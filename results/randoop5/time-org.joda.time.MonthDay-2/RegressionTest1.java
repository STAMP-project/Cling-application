import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest1 {

    public static boolean debug = false;

    @Test
    public void test0501() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0501");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        org.joda.time.MonthDay.Property property11 = monthDay3.monthOfYear();
        int int12 = monthDay3.getDayOfMonth();
        org.joda.time.MonthDay.Property property13 = monthDay3.dayOfMonth();
        int int14 = monthDay3.getDayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.MonthDay monthDay16 = monthDay3.plus(readablePeriod15);
        org.joda.time.MonthDay monthDay18 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MonthDay monthDay20 = monthDay18.withChronologyRetainFields(chronology19);
        org.joda.time.MonthDay monthDay22 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MonthDay monthDay24 = monthDay22.withChronologyRetainFields(chronology23);
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = monthDay22.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property27 = monthDay20.property(dateTimeFieldType26);
        org.joda.time.MonthDay.Property property28 = monthDay20.monthOfYear();
        int int29 = monthDay20.getDayOfMonth();
        org.joda.time.MonthDay.Property property30 = monthDay20.dayOfMonth();
        int int31 = monthDay20.getDayOfMonth();
        org.joda.time.MonthDay monthDay33 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MonthDay monthDay35 = monthDay33.withChronologyRetainFields(chronology34);
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = monthDay33.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property38 = monthDay33.dayOfMonth();
        org.joda.time.Chronology chronology39 = monthDay33.getChronology();
        org.joda.time.MonthDay monthDay40 = monthDay20.withChronologyRetainFields(chronology39);
        org.joda.time.MonthDay monthDay41 = monthDay16.withChronologyRetainFields(chronology39);
        org.joda.time.MonthDay monthDay43 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.MonthDay monthDay45 = monthDay43.withChronologyRetainFields(chronology44);
        org.joda.time.DateTimeFieldType dateTimeFieldType47 = monthDay43.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod48 = null;
        org.joda.time.MonthDay monthDay49 = monthDay43.plus(readablePeriod48);
        org.joda.time.MonthDay monthDay51 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.MonthDay monthDay53 = monthDay51.withChronologyRetainFields(chronology52);
        org.joda.time.MonthDay monthDay55 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.MonthDay monthDay57 = monthDay55.withChronologyRetainFields(chronology56);
        org.joda.time.DateTimeFieldType dateTimeFieldType59 = monthDay55.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property60 = monthDay53.property(dateTimeFieldType59);
        int int61 = property60.get();
        org.joda.time.MonthDay monthDay63 = property60.addWrapFieldToCopy((int) (short) 1);
        boolean boolean64 = monthDay43.isBefore((org.joda.time.ReadablePartial) monthDay63);
        org.joda.time.MonthDay monthDay66 = monthDay63.minusMonths((int) (byte) 100);
        org.joda.time.MonthDay monthDay68 = monthDay66.minusDays(31);
        boolean boolean69 = monthDay16.isAfter((org.joda.time.ReadablePartial) monthDay68);
        org.joda.time.DateTimeZone dateTimeZone70 = null;
        org.joda.time.MonthDay monthDay71 = new org.joda.time.MonthDay(dateTimeZone70);
        org.joda.time.MonthDay monthDay73 = monthDay71.minusDays(100);
        org.joda.time.MonthDay monthDay75 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology76 = null;
        org.joda.time.MonthDay monthDay77 = monthDay75.withChronologyRetainFields(chronology76);
        org.joda.time.DateTimeFieldType dateTimeFieldType79 = monthDay75.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property80 = monthDay75.dayOfMonth();
        org.joda.time.Chronology chronology81 = monthDay75.getChronology();
        org.joda.time.Chronology chronology82 = monthDay75.getChronology();
        org.joda.time.ReadableInstant readableInstant83 = null;
        org.joda.time.DateTime dateTime84 = monthDay75.toDateTime(readableInstant83);
        org.joda.time.DateTime dateTime85 = monthDay71.toDateTime((org.joda.time.ReadableInstant) dateTime84);
        org.joda.time.DateTime dateTime86 = monthDay16.toDateTime((org.joda.time.ReadableInstant) dateTime85);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(monthDay18);
        org.junit.Assert.assertNotNull(monthDay20);
        org.junit.Assert.assertNotNull(monthDay22);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertNotNull(monthDay33);
        org.junit.Assert.assertNotNull(monthDay35);
        org.junit.Assert.assertNotNull(dateTimeFieldType37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(monthDay40);
        org.junit.Assert.assertNotNull(monthDay41);
        org.junit.Assert.assertNotNull(monthDay43);
        org.junit.Assert.assertNotNull(monthDay45);
        org.junit.Assert.assertNotNull(dateTimeFieldType47);
        org.junit.Assert.assertNotNull(monthDay49);
        org.junit.Assert.assertNotNull(monthDay51);
        org.junit.Assert.assertNotNull(monthDay53);
        org.junit.Assert.assertNotNull(monthDay55);
        org.junit.Assert.assertNotNull(monthDay57);
        org.junit.Assert.assertNotNull(dateTimeFieldType59);
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(monthDay63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(monthDay66);
        org.junit.Assert.assertNotNull(monthDay68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(monthDay73);
        org.junit.Assert.assertNotNull(monthDay75);
        org.junit.Assert.assertNotNull(monthDay77);
        org.junit.Assert.assertNotNull(dateTimeFieldType79);
        org.junit.Assert.assertNotNull(property80);
        org.junit.Assert.assertNotNull(chronology81);
        org.junit.Assert.assertNotNull(chronology82);
        org.junit.Assert.assertNotNull(dateTime84);
        org.junit.Assert.assertNotNull(dateTime85);
        org.junit.Assert.assertNotNull(dateTime86);
    }

    @Test
    public void test0502() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0502");
        org.joda.time.MonthDay monthDay3 = org.joda.time.MonthDay.parse("");
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        boolean boolean10 = monthDay3.isSupported(dateTimeFieldType9);
        org.joda.time.MonthDay monthDay12 = org.joda.time.MonthDay.parse("");
        org.joda.time.MonthDay monthDay14 = monthDay12.minusDays((int) '#');
        org.joda.time.MonthDay monthDay16 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MonthDay monthDay18 = monthDay16.withChronologyRetainFields(chronology17);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = monthDay16.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property21 = monthDay16.dayOfMonth();
        org.joda.time.Chronology chronology22 = monthDay16.getChronology();
        org.joda.time.Chronology chronology23 = monthDay16.getChronology();
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.DateTime dateTime25 = monthDay16.toDateTime(readableInstant24);
        org.joda.time.MonthDay monthDay27 = monthDay16.plusMonths((int) ' ');
        boolean boolean28 = monthDay12.isAfter((org.joda.time.ReadablePartial) monthDay27);
        boolean boolean29 = monthDay3.isBefore((org.joda.time.ReadablePartial) monthDay27);
        org.joda.time.Chronology chronology30 = monthDay27.getChronology();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay31 = new org.joda.time.MonthDay((int) (byte) -1, (int) (byte) 100, chronology30);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -1 for monthOfYear must not be smaller than 1");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(monthDay12);
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(monthDay18);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(monthDay27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(chronology30);
    }

    @Test
    public void test0503() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0503");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.MonthDay monthDay3 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MonthDay monthDay5 = monthDay3.withChronologyRetainFields(chronology4);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = monthDay3.getFieldType((int) (byte) 1);
        boolean boolean8 = monthDay1.isSupported(dateTimeFieldType7);
        org.joda.time.MonthDay monthDay10 = org.joda.time.MonthDay.parse("");
        org.joda.time.MonthDay monthDay12 = monthDay10.minusDays((int) '#');
        org.joda.time.MonthDay monthDay14 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MonthDay monthDay16 = monthDay14.withChronologyRetainFields(chronology15);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = monthDay14.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property19 = monthDay14.dayOfMonth();
        org.joda.time.Chronology chronology20 = monthDay14.getChronology();
        org.joda.time.Chronology chronology21 = monthDay14.getChronology();
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.DateTime dateTime23 = monthDay14.toDateTime(readableInstant22);
        org.joda.time.MonthDay monthDay25 = monthDay14.plusMonths((int) ' ');
        boolean boolean26 = monthDay10.isAfter((org.joda.time.ReadablePartial) monthDay25);
        boolean boolean27 = monthDay1.isBefore((org.joda.time.ReadablePartial) monthDay25);
        org.joda.time.Chronology chronology28 = monthDay25.getChronology();
        org.joda.time.MonthDay monthDay30 = monthDay25.minusDays((int) (short) 100);
        // The following exception was thrown during execution in test generation
        try {
            int int32 = monthDay25.getValue((int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 100");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(monthDay10);
        org.junit.Assert.assertNotNull(monthDay12);
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(monthDay25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(monthDay30);
    }

    @Test
    public void test0504() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0504");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        int int11 = property10.get();
        org.joda.time.MonthDay monthDay13 = property10.addWrapFieldToCopy((int) (short) 1);
        java.lang.String str14 = property10.getAsString();
        java.lang.String str15 = property10.getAsText();
        org.joda.time.DurationField durationField16 = property10.getRangeDurationField();
        int int17 = property10.getMinimumValue();
        org.joda.time.MonthDay monthDay19 = property10.addWrapFieldToCopy((int) '4');
        int int20 = property10.getMaximumValueOverall();
        java.util.Locale locale21 = null;
        int int22 = property10.getMaximumShortTextLength(locale21);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "1" + "'", str14, "1");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "1" + "'", str15, "1");
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(monthDay19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 31 + "'", int20 == 31);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
    }

    @Test
    public void test0505() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0505");
        org.joda.time.MonthDay monthDay2 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MonthDay monthDay4 = monthDay2.withChronologyRetainFields(chronology3);
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = monthDay2.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property7 = monthDay2.dayOfMonth();
        org.joda.time.Chronology chronology8 = monthDay2.getChronology();
        org.joda.time.MonthDay monthDay9 = org.joda.time.MonthDay.now(chronology8);
        org.joda.time.MonthDay monthDay10 = new org.joda.time.MonthDay(0L, chronology8);
        org.joda.time.MonthDay monthDay12 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MonthDay monthDay14 = monthDay12.withChronologyRetainFields(chronology13);
        org.joda.time.MonthDay monthDay16 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MonthDay monthDay18 = monthDay16.withChronologyRetainFields(chronology17);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = monthDay16.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property21 = monthDay14.property(dateTimeFieldType20);
        int int22 = property21.get();
        org.joda.time.DurationField durationField23 = property21.getDurationField();
        org.joda.time.MonthDay monthDay25 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MonthDay monthDay27 = monthDay25.withChronologyRetainFields(chronology26);
        org.joda.time.MonthDay monthDay29 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.MonthDay monthDay31 = monthDay29.withChronologyRetainFields(chronology30);
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = monthDay29.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property34 = monthDay27.property(dateTimeFieldType33);
        boolean boolean35 = property21.equals((java.lang.Object) monthDay27);
        org.joda.time.MonthDay monthDay36 = new org.joda.time.MonthDay((java.lang.Object) monthDay27);
        org.joda.time.MonthDay monthDay38 = org.joda.time.MonthDay.parse("");
        org.joda.time.ReadablePeriod readablePeriod39 = null;
        org.joda.time.MonthDay monthDay41 = monthDay38.withPeriodAdded(readablePeriod39, 1);
        org.joda.time.MonthDay monthDay43 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.MonthDay monthDay45 = monthDay43.withChronologyRetainFields(chronology44);
        org.joda.time.DateTimeFieldType dateTimeFieldType47 = monthDay43.getFieldType((int) (byte) 1);
        int int48 = monthDay41.indexOf(dateTimeFieldType47);
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.MonthDay monthDay50 = monthDay41.withChronologyRetainFields(chronology49);
        boolean boolean51 = monthDay36.isBefore((org.joda.time.ReadablePartial) monthDay50);
        int int52 = monthDay10.compareTo((org.joda.time.ReadablePartial) monthDay50);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField54 = monthDay50.getField(25);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 25");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay2);
        org.junit.Assert.assertNotNull(monthDay4);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(monthDay9);
        org.junit.Assert.assertNotNull(monthDay12);
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(monthDay18);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(monthDay25);
        org.junit.Assert.assertNotNull(monthDay27);
        org.junit.Assert.assertNotNull(monthDay29);
        org.junit.Assert.assertNotNull(monthDay31);
        org.junit.Assert.assertNotNull(dateTimeFieldType33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(monthDay38);
        org.junit.Assert.assertNotNull(monthDay41);
        org.junit.Assert.assertNotNull(monthDay43);
        org.junit.Assert.assertNotNull(monthDay45);
        org.junit.Assert.assertNotNull(dateTimeFieldType47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertNotNull(monthDay50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
    }

    @Test
    public void test0506() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0506");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay1.plus(readablePeriod6);
        org.joda.time.MonthDay monthDay9 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MonthDay monthDay11 = monthDay9.withChronologyRetainFields(chronology10);
        org.joda.time.MonthDay monthDay13 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MonthDay monthDay15 = monthDay13.withChronologyRetainFields(chronology14);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = monthDay13.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property18 = monthDay11.property(dateTimeFieldType17);
        int int19 = property18.get();
        org.joda.time.MonthDay monthDay21 = property18.addWrapFieldToCopy((int) (short) 1);
        boolean boolean22 = monthDay1.isBefore((org.joda.time.ReadablePartial) monthDay21);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.MonthDay monthDay24 = monthDay21.plus(readablePeriod23);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(monthDay9);
        org.junit.Assert.assertNotNull(monthDay11);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(monthDay24);
    }

    @Test
    public void test0507() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0507");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay monthDay7 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MonthDay monthDay9 = monthDay7.withChronologyRetainFields(chronology8);
        org.joda.time.MonthDay monthDay11 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MonthDay monthDay13 = monthDay11.withChronologyRetainFields(chronology12);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = monthDay11.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property16 = monthDay9.property(dateTimeFieldType15);
        int int17 = monthDay1.indexOf(dateTimeFieldType15);
        org.joda.time.MonthDay.Property property18 = monthDay1.dayOfMonth();
        org.joda.time.MonthDay monthDay20 = property18.addWrapFieldToCopy((int) 'a');
        java.lang.String str21 = property18.toString();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(monthDay9);
        org.junit.Assert.assertNotNull(monthDay11);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(monthDay20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Property[dayOfMonth]" + "'", str21, "Property[dayOfMonth]");
    }

    @Test
    public void test0508() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0508");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay1.plus(readablePeriod6);
        org.joda.time.MonthDay monthDay9 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MonthDay monthDay11 = monthDay9.withChronologyRetainFields(chronology10);
        org.joda.time.MonthDay monthDay13 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MonthDay monthDay15 = monthDay13.withChronologyRetainFields(chronology14);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = monthDay13.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property18 = monthDay11.property(dateTimeFieldType17);
        int int19 = property18.get();
        org.joda.time.MonthDay monthDay21 = property18.addWrapFieldToCopy((int) (short) 1);
        boolean boolean22 = monthDay1.isBefore((org.joda.time.ReadablePartial) monthDay21);
        org.joda.time.MonthDay monthDay24 = monthDay21.minusMonths((int) (byte) 100);
        org.joda.time.MonthDay monthDay26 = monthDay24.plusMonths(1);
        org.joda.time.MonthDay monthDay28 = org.joda.time.MonthDay.parse("");
        org.joda.time.MonthDay monthDay30 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MonthDay monthDay32 = monthDay30.withChronologyRetainFields(chronology31);
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = monthDay30.getFieldType((int) (byte) 1);
        boolean boolean35 = monthDay28.isSupported(dateTimeFieldType34);
        boolean boolean36 = monthDay24.isSupported(dateTimeFieldType34);
        org.joda.time.Chronology chronology37 = monthDay24.getChronology();
        org.joda.time.MonthDay monthDay38 = org.joda.time.MonthDay.now(chronology37);
        org.joda.time.MonthDay monthDay40 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.MonthDay monthDay42 = monthDay40.withChronologyRetainFields(chronology41);
        org.joda.time.DateTimeFieldType dateTimeFieldType44 = monthDay40.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property45 = monthDay40.dayOfMonth();
        org.joda.time.MonthDay monthDay47 = property45.addWrapFieldToCopy(1);
        org.joda.time.MonthDay monthDay49 = property45.addWrapFieldToCopy(0);
        org.joda.time.MonthDay monthDay51 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.MonthDay monthDay53 = monthDay51.withChronologyRetainFields(chronology52);
        org.joda.time.MonthDay monthDay55 = monthDay51.minusMonths((int) (byte) -1);
        boolean boolean56 = property45.equals((java.lang.Object) monthDay55);
        int int57 = property45.getMaximumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType58 = property45.getFieldType();
        org.joda.time.DateTimeFieldType dateTimeFieldType59 = property45.getFieldType();
        org.joda.time.MonthDay.Property property60 = monthDay38.property(dateTimeFieldType59);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(monthDay9);
        org.junit.Assert.assertNotNull(monthDay11);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertNotNull(monthDay26);
        org.junit.Assert.assertNotNull(monthDay28);
        org.junit.Assert.assertNotNull(monthDay30);
        org.junit.Assert.assertNotNull(monthDay32);
        org.junit.Assert.assertNotNull(dateTimeFieldType34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(monthDay38);
        org.junit.Assert.assertNotNull(monthDay40);
        org.junit.Assert.assertNotNull(monthDay42);
        org.junit.Assert.assertNotNull(dateTimeFieldType44);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(monthDay47);
        org.junit.Assert.assertNotNull(monthDay49);
        org.junit.Assert.assertNotNull(monthDay51);
        org.junit.Assert.assertNotNull(monthDay53);
        org.junit.Assert.assertNotNull(monthDay55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 31 + "'", int57 == 31);
        org.junit.Assert.assertNotNull(dateTimeFieldType58);
        org.junit.Assert.assertNotNull(dateTimeFieldType59);
        org.junit.Assert.assertNotNull(property60);
    }

    @Test
    public void test0509() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0509");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        java.util.Locale locale11 = null;
        int int12 = property10.getMaximumTextLength(locale11);
        int int13 = property10.getMinimumValue();
        org.joda.time.MonthDay monthDay15 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MonthDay monthDay17 = monthDay15.withChronologyRetainFields(chronology16);
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = monthDay15.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay monthDay21 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.MonthDay monthDay23 = monthDay21.withChronologyRetainFields(chronology22);
        org.joda.time.MonthDay monthDay25 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MonthDay monthDay27 = monthDay25.withChronologyRetainFields(chronology26);
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = monthDay25.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property30 = monthDay23.property(dateTimeFieldType29);
        int int31 = monthDay15.indexOf(dateTimeFieldType29);
        org.joda.time.MonthDay monthDay33 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MonthDay monthDay35 = monthDay33.withChronologyRetainFields(chronology34);
        org.joda.time.MonthDay monthDay37 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.MonthDay monthDay39 = monthDay37.withChronologyRetainFields(chronology38);
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = monthDay37.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property42 = monthDay35.property(dateTimeFieldType41);
        int int43 = property42.get();
        org.joda.time.MonthDay monthDay45 = property42.addToCopy((int) (short) 0);
        org.joda.time.MonthDay monthDay47 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.MonthDay monthDay49 = monthDay47.withChronologyRetainFields(chronology48);
        org.joda.time.MonthDay monthDay51 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.MonthDay monthDay53 = monthDay51.withChronologyRetainFields(chronology52);
        org.joda.time.DateTimeFieldType dateTimeFieldType55 = monthDay51.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property56 = monthDay49.property(dateTimeFieldType55);
        int int57 = property56.get();
        org.joda.time.DurationField durationField58 = property56.getDurationField();
        java.util.Locale locale59 = null;
        int int60 = property56.getMaximumTextLength(locale59);
        org.joda.time.MonthDay monthDay62 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.MonthDay monthDay64 = monthDay62.withChronologyRetainFields(chronology63);
        org.joda.time.DateTimeFieldType dateTimeFieldType66 = monthDay62.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property67 = monthDay62.dayOfMonth();
        org.joda.time.Chronology chronology68 = monthDay62.getChronology();
        org.joda.time.Chronology chronology69 = monthDay62.getChronology();
        org.joda.time.ReadableInstant readableInstant70 = null;
        org.joda.time.DateTime dateTime71 = monthDay62.toDateTime(readableInstant70);
        int int72 = property56.compareTo((org.joda.time.ReadableInstant) dateTime71);
        int int73 = property42.compareTo((org.joda.time.ReadableInstant) dateTime71);
        org.joda.time.DateTime dateTime74 = monthDay15.toDateTime((org.joda.time.ReadableInstant) dateTime71);
        int int75 = property10.compareTo((org.joda.time.ReadableInstant) dateTime71);
        int int76 = property10.getMinimumValueOverall();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay77 = new org.joda.time.MonthDay((java.lang.Object) int76);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: java.lang.Integer");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(monthDay17);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertNotNull(monthDay23);
        org.junit.Assert.assertNotNull(monthDay25);
        org.junit.Assert.assertNotNull(monthDay27);
        org.junit.Assert.assertNotNull(dateTimeFieldType29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertNotNull(monthDay33);
        org.junit.Assert.assertNotNull(monthDay35);
        org.junit.Assert.assertNotNull(monthDay37);
        org.junit.Assert.assertNotNull(monthDay39);
        org.junit.Assert.assertNotNull(dateTimeFieldType41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertNotNull(monthDay45);
        org.junit.Assert.assertNotNull(monthDay47);
        org.junit.Assert.assertNotNull(monthDay49);
        org.junit.Assert.assertNotNull(monthDay51);
        org.junit.Assert.assertNotNull(monthDay53);
        org.junit.Assert.assertNotNull(dateTimeFieldType55);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertNotNull(durationField58);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 2 + "'", int60 == 2);
        org.junit.Assert.assertNotNull(monthDay62);
        org.junit.Assert.assertNotNull(monthDay64);
        org.junit.Assert.assertNotNull(dateTimeFieldType66);
        org.junit.Assert.assertNotNull(property67);
        org.junit.Assert.assertNotNull(chronology68);
        org.junit.Assert.assertNotNull(chronology69);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 1 + "'", int76 == 1);
    }

    @Test
    public void test0510() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0510");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        int int11 = property10.get();
        org.joda.time.DurationField durationField12 = property10.getDurationField();
        org.joda.time.MonthDay monthDay14 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MonthDay monthDay16 = monthDay14.withChronologyRetainFields(chronology15);
        org.joda.time.MonthDay monthDay18 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MonthDay monthDay20 = monthDay18.withChronologyRetainFields(chronology19);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = monthDay18.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property23 = monthDay16.property(dateTimeFieldType22);
        boolean boolean24 = property10.equals((java.lang.Object) monthDay16);
        org.joda.time.DateTimeField dateTimeField25 = property10.getField();
        java.util.Locale locale26 = null;
        int int27 = property10.getMaximumShortTextLength(locale26);
        org.joda.time.MonthDay monthDay28 = property10.getMonthDay();
        org.joda.time.DurationFieldType durationFieldType29 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay31 = monthDay28.withFieldAdded(durationFieldType29, 31);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(monthDay18);
        org.junit.Assert.assertNotNull(monthDay20);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2 + "'", int27 == 2);
        org.junit.Assert.assertNotNull(monthDay28);
    }

    @Test
    public void test0511() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0511");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay1.plus(readablePeriod6);
        org.joda.time.MonthDay monthDay9 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MonthDay monthDay11 = monthDay9.withChronologyRetainFields(chronology10);
        org.joda.time.MonthDay monthDay13 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MonthDay monthDay15 = monthDay13.withChronologyRetainFields(chronology14);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = monthDay13.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property18 = monthDay11.property(dateTimeFieldType17);
        int int19 = property18.get();
        org.joda.time.MonthDay monthDay21 = property18.addWrapFieldToCopy((int) (short) 1);
        boolean boolean22 = monthDay1.isBefore((org.joda.time.ReadablePartial) monthDay21);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MonthDay monthDay24 = monthDay1.withChronologyRetainFields(chronology23);
        org.joda.time.Chronology chronology25 = monthDay24.getChronology();
        int[] intArray26 = monthDay24.getValues();
        org.joda.time.MonthDay monthDay28 = org.joda.time.MonthDay.parse("");
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        org.joda.time.MonthDay monthDay31 = monthDay28.withPeriodAdded(readablePeriod29, 1);
        org.joda.time.MonthDay monthDay33 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MonthDay monthDay35 = monthDay33.withChronologyRetainFields(chronology34);
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = monthDay33.getFieldType((int) (byte) 1);
        int int38 = monthDay31.indexOf(dateTimeFieldType37);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.MonthDay monthDay40 = monthDay31.withChronologyRetainFields(chronology39);
        org.joda.time.MonthDay monthDay42 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.MonthDay monthDay44 = monthDay42.withChronologyRetainFields(chronology43);
        org.joda.time.DateTimeFieldType dateTimeFieldType46 = monthDay42.getFieldType((int) (byte) 1);
        int int47 = monthDay31.get(dateTimeFieldType46);
        boolean boolean48 = monthDay24.isAfter((org.joda.time.ReadablePartial) monthDay31);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray49 = monthDay31.getFieldTypes();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(monthDay9);
        org.junit.Assert.assertNotNull(monthDay11);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, 1]");
        org.junit.Assert.assertNotNull(monthDay28);
        org.junit.Assert.assertNotNull(monthDay31);
        org.junit.Assert.assertNotNull(monthDay33);
        org.junit.Assert.assertNotNull(monthDay35);
        org.junit.Assert.assertNotNull(dateTimeFieldType37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(monthDay40);
        org.junit.Assert.assertNotNull(monthDay42);
        org.junit.Assert.assertNotNull(monthDay44);
        org.junit.Assert.assertNotNull(dateTimeFieldType46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray49);
    }

    @Test
    public void test0512() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0512");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.MonthDay monthDay3 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MonthDay monthDay5 = monthDay3.withChronologyRetainFields(chronology4);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = monthDay3.getFieldType((int) (byte) 1);
        boolean boolean8 = monthDay1.isSupported(dateTimeFieldType7);
        org.joda.time.MonthDay monthDay10 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MonthDay monthDay12 = monthDay10.withChronologyRetainFields(chronology11);
        org.joda.time.MonthDay monthDay14 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MonthDay monthDay16 = monthDay14.withChronologyRetainFields(chronology15);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = monthDay14.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property19 = monthDay12.property(dateTimeFieldType18);
        int int20 = property19.get();
        int int21 = property19.getMaximumValue();
        org.joda.time.MonthDay monthDay23 = property19.setCopy((int) (short) 1);
        org.joda.time.MonthDay monthDay25 = org.joda.time.MonthDay.parse("");
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        org.joda.time.MonthDay monthDay28 = monthDay25.withPeriodAdded(readablePeriod26, 1);
        org.joda.time.MonthDay monthDay30 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MonthDay monthDay32 = monthDay30.withChronologyRetainFields(chronology31);
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = monthDay30.getFieldType((int) (byte) 1);
        int int35 = monthDay28.indexOf(dateTimeFieldType34);
        boolean boolean36 = monthDay23.isSupported(dateTimeFieldType34);
        boolean boolean37 = monthDay1.isEqual((org.joda.time.ReadablePartial) monthDay23);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(monthDay10);
        org.junit.Assert.assertNotNull(monthDay12);
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 31 + "'", int21 == 31);
        org.junit.Assert.assertNotNull(monthDay23);
        org.junit.Assert.assertNotNull(monthDay25);
        org.junit.Assert.assertNotNull(monthDay28);
        org.junit.Assert.assertNotNull(monthDay30);
        org.junit.Assert.assertNotNull(monthDay32);
        org.junit.Assert.assertNotNull(dateTimeFieldType34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
    }

    @Test
    public void test0513() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0513");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        int int11 = property10.get();
        org.joda.time.MonthDay monthDay13 = property10.addWrapFieldToCopy((int) (short) 1);
        org.joda.time.MonthDay monthDay15 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MonthDay monthDay17 = monthDay15.withChronologyRetainFields(chronology16);
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = monthDay15.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.MonthDay monthDay21 = monthDay15.plus(readablePeriod20);
        org.joda.time.MonthDay monthDay23 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MonthDay monthDay25 = monthDay23.withChronologyRetainFields(chronology24);
        org.joda.time.MonthDay monthDay27 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MonthDay monthDay29 = monthDay27.withChronologyRetainFields(chronology28);
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = monthDay27.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property32 = monthDay25.property(dateTimeFieldType31);
        int int33 = property32.get();
        org.joda.time.MonthDay monthDay35 = property32.addWrapFieldToCopy((int) (short) 1);
        boolean boolean36 = monthDay15.isBefore((org.joda.time.ReadablePartial) monthDay35);
        org.joda.time.MonthDay monthDay38 = monthDay35.minusMonths((int) (byte) 100);
        org.joda.time.MonthDay monthDay40 = monthDay38.plusMonths(1);
        org.joda.time.MonthDay monthDay42 = org.joda.time.MonthDay.parse("");
        org.joda.time.MonthDay monthDay44 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.MonthDay monthDay46 = monthDay44.withChronologyRetainFields(chronology45);
        org.joda.time.DateTimeFieldType dateTimeFieldType48 = monthDay44.getFieldType((int) (byte) 1);
        boolean boolean49 = monthDay42.isSupported(dateTimeFieldType48);
        boolean boolean50 = monthDay38.isSupported(dateTimeFieldType48);
        org.joda.time.Chronology chronology51 = monthDay38.getChronology();
        org.joda.time.MonthDay monthDay52 = monthDay13.withChronologyRetainFields(chronology51);
        int[] intArray53 = monthDay52.getValues();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField55 = monthDay52.getField(10);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 10");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(monthDay17);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertNotNull(monthDay23);
        org.junit.Assert.assertNotNull(monthDay25);
        org.junit.Assert.assertNotNull(monthDay27);
        org.junit.Assert.assertNotNull(monthDay29);
        org.junit.Assert.assertNotNull(dateTimeFieldType31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(monthDay35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(monthDay38);
        org.junit.Assert.assertNotNull(monthDay40);
        org.junit.Assert.assertNotNull(monthDay42);
        org.junit.Assert.assertNotNull(monthDay44);
        org.junit.Assert.assertNotNull(monthDay46);
        org.junit.Assert.assertNotNull(dateTimeFieldType48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(monthDay52);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[1, 2]");
    }

    @Test
    public void test0514() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0514");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        org.joda.time.MonthDay monthDay12 = property10.addWrapFieldToCopy(100);
        java.util.Locale locale13 = null;
        java.lang.String str14 = property10.getAsText(locale13);
        org.joda.time.MonthDay monthDay16 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MonthDay monthDay18 = monthDay16.withChronologyRetainFields(chronology17);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = monthDay16.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property21 = monthDay16.dayOfMonth();
        org.joda.time.Chronology chronology22 = monthDay16.getChronology();
        org.joda.time.Chronology chronology23 = monthDay16.getChronology();
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.DateTime dateTime25 = monthDay16.toDateTime(readableInstant24);
        org.joda.time.MonthDay monthDay27 = monthDay16.plusMonths((int) ' ');
        org.joda.time.MonthDay monthDay29 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.MonthDay monthDay31 = monthDay29.withChronologyRetainFields(chronology30);
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = monthDay29.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod34 = null;
        org.joda.time.MonthDay monthDay35 = monthDay29.plus(readablePeriod34);
        org.joda.time.MonthDay monthDay37 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.MonthDay monthDay39 = monthDay37.withChronologyRetainFields(chronology38);
        org.joda.time.MonthDay monthDay41 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.MonthDay monthDay43 = monthDay41.withChronologyRetainFields(chronology42);
        org.joda.time.DateTimeFieldType dateTimeFieldType45 = monthDay41.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property46 = monthDay39.property(dateTimeFieldType45);
        int int47 = property46.get();
        org.joda.time.MonthDay monthDay49 = property46.addWrapFieldToCopy((int) (short) 1);
        boolean boolean50 = monthDay29.isBefore((org.joda.time.ReadablePartial) monthDay49);
        org.joda.time.MonthDay monthDay52 = monthDay49.minusMonths((int) (byte) 100);
        org.joda.time.MonthDay monthDay54 = monthDay52.plusMonths(1);
        org.joda.time.ReadablePeriod readablePeriod55 = null;
        org.joda.time.MonthDay monthDay56 = monthDay52.minus(readablePeriod55);
        org.joda.time.DateTimeZone dateTimeZone57 = null;
        org.joda.time.MonthDay monthDay58 = new org.joda.time.MonthDay(dateTimeZone57);
        boolean boolean59 = monthDay56.isEqual((org.joda.time.ReadablePartial) monthDay58);
        boolean boolean60 = monthDay16.equals((java.lang.Object) monthDay56);
        org.joda.time.MonthDay.Property property61 = monthDay56.dayOfMonth();
        int int62 = property10.compareTo((org.joda.time.ReadablePartial) monthDay56);
        org.joda.time.MonthDay monthDay64 = property10.addWrapFieldToCopy((int) (byte) 10);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str66 = monthDay64.toString("dayOfMonth");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: O");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(monthDay12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "1" + "'", str14, "1");
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(monthDay18);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(monthDay27);
        org.junit.Assert.assertNotNull(monthDay29);
        org.junit.Assert.assertNotNull(monthDay31);
        org.junit.Assert.assertNotNull(dateTimeFieldType33);
        org.junit.Assert.assertNotNull(monthDay35);
        org.junit.Assert.assertNotNull(monthDay37);
        org.junit.Assert.assertNotNull(monthDay39);
        org.junit.Assert.assertNotNull(monthDay41);
        org.junit.Assert.assertNotNull(monthDay43);
        org.junit.Assert.assertNotNull(dateTimeFieldType45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(monthDay49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(monthDay52);
        org.junit.Assert.assertNotNull(monthDay54);
        org.junit.Assert.assertNotNull(monthDay56);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-1) + "'", int62 == (-1));
        org.junit.Assert.assertNotNull(monthDay64);
    }

    @Test
    public void test0515() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0515");
        org.joda.time.MonthDay monthDay2 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MonthDay monthDay4 = monthDay2.withChronologyRetainFields(chronology3);
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = monthDay2.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property7 = monthDay2.dayOfMonth();
        org.joda.time.Chronology chronology8 = monthDay2.getChronology();
        org.joda.time.MonthDay monthDay9 = new org.joda.time.MonthDay((-1L), chronology8);
        org.joda.time.MonthDay monthDay10 = new org.joda.time.MonthDay((java.lang.Object) monthDay9);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray11 = monthDay9.getFieldTypes();
        int int12 = monthDay9.getDayOfMonth();
        org.junit.Assert.assertNotNull(monthDay2);
        org.junit.Assert.assertNotNull(monthDay4);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 31 + "'", int12 == 31);
    }

    @Test
    public void test0516() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0516");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        org.joda.time.MonthDay.Property property11 = monthDay3.monthOfYear();
        java.lang.String str12 = property11.getAsShortText();
        int int13 = property11.getMinimumValue();
        org.joda.time.MonthDay monthDay15 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MonthDay monthDay17 = monthDay15.withChronologyRetainFields(chronology16);
        org.joda.time.MonthDay monthDay19 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MonthDay monthDay21 = monthDay19.withChronologyRetainFields(chronology20);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = monthDay19.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property24 = monthDay17.property(dateTimeFieldType23);
        java.util.Locale locale25 = null;
        int int26 = property24.getMaximumTextLength(locale25);
        org.joda.time.MonthDay monthDay28 = property24.addWrapFieldToCopy((int) (byte) 0);
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        org.joda.time.MonthDay monthDay30 = monthDay28.minus(readablePeriod29);
        boolean boolean31 = property11.equals((java.lang.Object) monthDay30);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay33 = property11.setCopy("--11-25");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"--11-25\" for monthOfYear is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Jan" + "'", str12, "Jan");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(monthDay17);
        org.junit.Assert.assertNotNull(monthDay19);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertNotNull(monthDay28);
        org.junit.Assert.assertNotNull(monthDay30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test0517() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0517");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property6 = monthDay1.dayOfMonth();
        org.joda.time.MonthDay monthDay8 = property6.addWrapFieldToCopy(1);
        org.joda.time.MonthDay monthDay10 = property6.addWrapFieldToCopy(0);
        java.lang.String str11 = property6.getName();
        org.joda.time.MonthDay monthDay12 = property6.getMonthDay();
        org.joda.time.MonthDay monthDay14 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MonthDay monthDay16 = monthDay14.withChronologyRetainFields(chronology15);
        org.joda.time.MonthDay monthDay18 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MonthDay monthDay20 = monthDay18.withChronologyRetainFields(chronology19);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = monthDay18.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property23 = monthDay16.property(dateTimeFieldType22);
        java.util.Locale locale24 = null;
        int int25 = property23.getMaximumTextLength(locale24);
        int int26 = property23.getMinimumValue();
        java.lang.String str27 = property23.getAsText();
        boolean boolean28 = property6.equals((java.lang.Object) str27);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(monthDay8);
        org.junit.Assert.assertNotNull(monthDay10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "dayOfMonth" + "'", str11, "dayOfMonth");
        org.junit.Assert.assertNotNull(monthDay12);
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(monthDay18);
        org.junit.Assert.assertNotNull(monthDay20);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2 + "'", int25 == 2);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "1" + "'", str27, "1");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test0518() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0518");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        int int11 = property10.get();
        org.joda.time.DurationField durationField12 = property10.getDurationField();
        org.joda.time.MonthDay monthDay14 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MonthDay monthDay16 = monthDay14.withChronologyRetainFields(chronology15);
        org.joda.time.MonthDay monthDay18 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MonthDay monthDay20 = monthDay18.withChronologyRetainFields(chronology19);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = monthDay18.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property23 = monthDay16.property(dateTimeFieldType22);
        boolean boolean24 = property10.equals((java.lang.Object) monthDay16);
        java.lang.String str25 = property10.getAsShortText();
        java.lang.String str26 = property10.toString();
        java.util.Locale locale27 = null;
        int int28 = property10.getMaximumShortTextLength(locale27);
        boolean boolean30 = property10.equals((java.lang.Object) 0.0d);
        org.joda.time.MonthDay monthDay32 = org.joda.time.MonthDay.parse("");
        org.joda.time.ReadablePeriod readablePeriod33 = null;
        org.joda.time.MonthDay monthDay35 = monthDay32.withPeriodAdded(readablePeriod33, 1);
        org.joda.time.MonthDay monthDay37 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.MonthDay monthDay39 = monthDay37.withChronologyRetainFields(chronology38);
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = monthDay37.getFieldType((int) (byte) 1);
        int int42 = monthDay35.indexOf(dateTimeFieldType41);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.MonthDay monthDay44 = monthDay35.withChronologyRetainFields(chronology43);
        org.joda.time.MonthDay.Property property45 = monthDay44.dayOfMonth();
        java.lang.String str46 = property45.toString();
        org.joda.time.MonthDay monthDay48 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.MonthDay monthDay50 = monthDay48.withChronologyRetainFields(chronology49);
        org.joda.time.DateTimeFieldType dateTimeFieldType52 = monthDay48.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod53 = null;
        org.joda.time.MonthDay monthDay54 = monthDay48.plus(readablePeriod53);
        org.joda.time.MonthDay monthDay56 = monthDay48.plusMonths((int) (byte) 1);
        org.joda.time.MonthDay monthDay58 = monthDay48.plusDays(31);
        int int59 = property45.compareTo((org.joda.time.ReadablePartial) monthDay58);
        int int60 = property10.compareTo((org.joda.time.ReadablePartial) monthDay58);
        org.joda.time.DurationField durationField61 = property10.getRangeDurationField();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(monthDay18);
        org.junit.Assert.assertNotNull(monthDay20);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "1" + "'", str25, "1");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Property[dayOfMonth]" + "'", str26, "Property[dayOfMonth]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(monthDay32);
        org.junit.Assert.assertNotNull(monthDay35);
        org.junit.Assert.assertNotNull(monthDay37);
        org.junit.Assert.assertNotNull(monthDay39);
        org.junit.Assert.assertNotNull(dateTimeFieldType41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertNotNull(monthDay44);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "Property[dayOfMonth]" + "'", str46, "Property[dayOfMonth]");
        org.junit.Assert.assertNotNull(monthDay48);
        org.junit.Assert.assertNotNull(monthDay50);
        org.junit.Assert.assertNotNull(dateTimeFieldType52);
        org.junit.Assert.assertNotNull(monthDay54);
        org.junit.Assert.assertNotNull(monthDay56);
        org.junit.Assert.assertNotNull(monthDay58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(durationField61);
    }

    @Test
    public void test0519() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0519");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.MonthDay monthDay4 = monthDay1.withPeriodAdded(readablePeriod2, 1);
        org.joda.time.MonthDay monthDay6 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MonthDay monthDay8 = monthDay6.withChronologyRetainFields(chronology7);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = monthDay6.getFieldType((int) (byte) 1);
        int int11 = monthDay4.indexOf(dateTimeFieldType10);
        org.joda.time.MonthDay monthDay12 = new org.joda.time.MonthDay((java.lang.Object) monthDay4);
        org.joda.time.MonthDay monthDay14 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MonthDay monthDay16 = monthDay14.withChronologyRetainFields(chronology15);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = monthDay14.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.MonthDay monthDay20 = monthDay14.plus(readablePeriod19);
        int int21 = monthDay20.getMonthOfYear();
        org.joda.time.MonthDay monthDay23 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MonthDay monthDay25 = monthDay23.withChronologyRetainFields(chronology24);
        org.joda.time.MonthDay monthDay27 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MonthDay monthDay29 = monthDay27.withChronologyRetainFields(chronology28);
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = monthDay27.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property32 = monthDay25.property(dateTimeFieldType31);
        java.util.Locale locale33 = null;
        int int34 = property32.getMaximumTextLength(locale33);
        org.joda.time.MonthDay monthDay36 = property32.addWrapFieldToCopy((int) (byte) 0);
        org.joda.time.ReadablePeriod readablePeriod37 = null;
        org.joda.time.MonthDay monthDay38 = monthDay36.minus(readablePeriod37);
        boolean boolean39 = monthDay20.isAfter((org.joda.time.ReadablePartial) monthDay36);
        boolean boolean40 = monthDay4.equals((java.lang.Object) boolean39);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay4);
        org.junit.Assert.assertNotNull(monthDay6);
        org.junit.Assert.assertNotNull(monthDay8);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(monthDay20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(monthDay23);
        org.junit.Assert.assertNotNull(monthDay25);
        org.junit.Assert.assertNotNull(monthDay27);
        org.junit.Assert.assertNotNull(monthDay29);
        org.junit.Assert.assertNotNull(dateTimeFieldType31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2 + "'", int34 == 2);
        org.junit.Assert.assertNotNull(monthDay36);
        org.junit.Assert.assertNotNull(monthDay38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test0520() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0520");
        org.joda.time.MonthDay monthDay0 = org.joda.time.MonthDay.now();
        org.joda.time.ReadablePeriod readablePeriod1 = null;
        org.joda.time.MonthDay monthDay2 = monthDay0.plus(readablePeriod1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MonthDay monthDay4 = new org.joda.time.MonthDay((java.lang.Object) monthDay0, chronology3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.MonthDay monthDay6 = monthDay4.minus(readablePeriod5);
        java.util.Locale locale8 = null;
        java.lang.String str9 = monthDay6.toString("2", locale8);
        org.junit.Assert.assertNotNull(monthDay0);
        org.junit.Assert.assertNotNull(monthDay2);
        org.junit.Assert.assertNotNull(monthDay6);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "2" + "'", str9, "2");
    }

    @Test
    public void test0521() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0521");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay1.plus(readablePeriod6);
        org.joda.time.MonthDay monthDay9 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MonthDay monthDay11 = monthDay9.withChronologyRetainFields(chronology10);
        org.joda.time.MonthDay monthDay13 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MonthDay monthDay15 = monthDay13.withChronologyRetainFields(chronology14);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = monthDay13.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property18 = monthDay11.property(dateTimeFieldType17);
        int int19 = property18.get();
        org.joda.time.MonthDay monthDay21 = property18.addWrapFieldToCopy((int) (short) 1);
        boolean boolean22 = monthDay1.isBefore((org.joda.time.ReadablePartial) monthDay21);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MonthDay monthDay24 = monthDay1.withChronologyRetainFields(chronology23);
        org.joda.time.Chronology chronology25 = monthDay24.getChronology();
        org.joda.time.MonthDay monthDay27 = org.joda.time.MonthDay.parse("");
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.MonthDay monthDay30 = monthDay27.withPeriodAdded(readablePeriod28, 1);
        org.joda.time.MonthDay monthDay32 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.MonthDay monthDay34 = monthDay32.withChronologyRetainFields(chronology33);
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = monthDay32.getFieldType((int) (byte) 1);
        int int37 = monthDay30.indexOf(dateTimeFieldType36);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.MonthDay monthDay39 = monthDay30.withChronologyRetainFields(chronology38);
        boolean boolean40 = monthDay24.isAfter((org.joda.time.ReadablePartial) monthDay30);
        org.joda.time.MonthDay monthDay42 = monthDay24.plusDays(2);
        org.joda.time.MonthDay monthDay44 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.MonthDay monthDay46 = monthDay44.withChronologyRetainFields(chronology45);
        org.joda.time.MonthDay monthDay48 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.MonthDay monthDay50 = monthDay48.withChronologyRetainFields(chronology49);
        org.joda.time.DateTimeFieldType dateTimeFieldType52 = monthDay48.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property53 = monthDay46.property(dateTimeFieldType52);
        int int54 = property53.get();
        org.joda.time.MonthDay monthDay56 = property53.addWrapFieldToCopy((int) (short) 1);
        org.joda.time.MonthDay monthDay58 = monthDay56.plusDays(2);
        boolean boolean59 = monthDay24.isEqual((org.joda.time.ReadablePartial) monthDay56);
        org.joda.time.DurationFieldType durationFieldType60 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay62 = monthDay56.withFieldAdded(durationFieldType60, (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(monthDay9);
        org.junit.Assert.assertNotNull(monthDay11);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(monthDay27);
        org.junit.Assert.assertNotNull(monthDay30);
        org.junit.Assert.assertNotNull(monthDay32);
        org.junit.Assert.assertNotNull(monthDay34);
        org.junit.Assert.assertNotNull(dateTimeFieldType36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(monthDay39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(monthDay42);
        org.junit.Assert.assertNotNull(monthDay44);
        org.junit.Assert.assertNotNull(monthDay46);
        org.junit.Assert.assertNotNull(monthDay48);
        org.junit.Assert.assertNotNull(monthDay50);
        org.junit.Assert.assertNotNull(dateTimeFieldType52);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertNotNull(monthDay56);
        org.junit.Assert.assertNotNull(monthDay58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
    }

    @Test
    public void test0522() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0522");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        int int11 = property10.get();
        org.joda.time.MonthDay monthDay13 = property10.addWrapFieldToCopy((int) (short) 1);
        java.lang.String str14 = property10.getAsString();
        java.lang.String str15 = property10.getAsText();
        org.joda.time.DurationField durationField16 = property10.getRangeDurationField();
        int int17 = property10.getMinimumValue();
        org.joda.time.MonthDay monthDay19 = property10.addToCopy((int) (short) -1);
        java.lang.String str20 = property10.toString();
        int int21 = property10.getMinimumValue();
        org.joda.time.MonthDay monthDay23 = property10.setCopy((int) (short) 1);
        org.joda.time.MonthDay monthDay25 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MonthDay monthDay27 = monthDay25.withChronologyRetainFields(chronology26);
        org.joda.time.MonthDay monthDay29 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.MonthDay monthDay31 = monthDay29.withChronologyRetainFields(chronology30);
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = monthDay29.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property34 = monthDay27.property(dateTimeFieldType33);
        int int35 = property34.get();
        java.lang.String str36 = property34.toString();
        org.joda.time.MonthDay monthDay38 = property34.addWrapFieldToCopy((int) (short) -1);
        boolean boolean39 = property10.equals((java.lang.Object) property34);
        org.joda.time.MonthDay monthDay41 = property34.setCopy("1");
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "1" + "'", str14, "1");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "1" + "'", str15, "1");
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(monthDay19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Property[dayOfMonth]" + "'", str20, "Property[dayOfMonth]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(monthDay23);
        org.junit.Assert.assertNotNull(monthDay25);
        org.junit.Assert.assertNotNull(monthDay27);
        org.junit.Assert.assertNotNull(monthDay29);
        org.junit.Assert.assertNotNull(monthDay31);
        org.junit.Assert.assertNotNull(dateTimeFieldType33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "Property[dayOfMonth]" + "'", str36, "Property[dayOfMonth]");
        org.junit.Assert.assertNotNull(monthDay38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(monthDay41);
    }

    @Test
    public void test0523() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0523");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        org.joda.time.MonthDay.Property property11 = monthDay3.monthOfYear();
        org.joda.time.MonthDay monthDay13 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MonthDay monthDay15 = monthDay13.withChronologyRetainFields(chronology14);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = monthDay13.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay monthDay19 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MonthDay monthDay21 = monthDay19.withChronologyRetainFields(chronology20);
        org.joda.time.MonthDay monthDay23 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MonthDay monthDay25 = monthDay23.withChronologyRetainFields(chronology24);
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = monthDay23.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property28 = monthDay21.property(dateTimeFieldType27);
        int int29 = monthDay13.indexOf(dateTimeFieldType27);
        boolean boolean30 = monthDay3.equals((java.lang.Object) int29);
        org.joda.time.MonthDay monthDay32 = monthDay3.withMonthOfYear(9);
        int int34 = monthDay32.getValue((int) (byte) 0);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray35 = monthDay32.getFieldTypes();
        org.joda.time.MonthDay monthDay37 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.MonthDay monthDay39 = monthDay37.withChronologyRetainFields(chronology38);
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = monthDay37.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property42 = monthDay37.dayOfMonth();
        org.joda.time.Chronology chronology43 = monthDay37.getChronology();
        org.joda.time.Chronology chronology44 = monthDay37.getChronology();
        org.joda.time.MonthDay monthDay45 = monthDay32.withChronologyRetainFields(chronology44);
        java.lang.String str46 = monthDay32.toString();
        org.joda.time.MonthDay.Property property47 = monthDay32.dayOfMonth();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(monthDay19);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertNotNull(monthDay23);
        org.junit.Assert.assertNotNull(monthDay25);
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(monthDay32);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 9 + "'", int34 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray35);
        org.junit.Assert.assertNotNull(monthDay37);
        org.junit.Assert.assertNotNull(monthDay39);
        org.junit.Assert.assertNotNull(dateTimeFieldType41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(monthDay45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "--09-01" + "'", str46, "--09-01");
        org.junit.Assert.assertNotNull(property47);
    }

    @Test
    public void test0524() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0524");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay5.dayOfMonth();
        org.joda.time.Chronology chronology11 = monthDay5.getChronology();
        org.joda.time.MonthDay monthDay12 = org.joda.time.MonthDay.now(chronology11);
        org.joda.time.MonthDay monthDay13 = monthDay3.withChronologyRetainFields(chronology11);
        int int14 = monthDay3.getDayOfMonth();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(monthDay12);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
    }

    @Test
    public void test0525() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0525");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay1.plus(readablePeriod6);
        org.joda.time.MonthDay monthDay9 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MonthDay monthDay11 = monthDay9.withChronologyRetainFields(chronology10);
        org.joda.time.MonthDay monthDay13 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MonthDay monthDay15 = monthDay13.withChronologyRetainFields(chronology14);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = monthDay13.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property18 = monthDay11.property(dateTimeFieldType17);
        int int19 = property18.get();
        org.joda.time.MonthDay monthDay21 = property18.addWrapFieldToCopy((int) (short) 1);
        boolean boolean22 = monthDay1.isBefore((org.joda.time.ReadablePartial) monthDay21);
        org.joda.time.MonthDay monthDay24 = monthDay21.minusMonths((int) (byte) 100);
        org.joda.time.MonthDay monthDay26 = monthDay24.plusMonths(1);
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.MonthDay monthDay28 = monthDay24.minus(readablePeriod27);
        org.joda.time.MonthDay monthDay30 = org.joda.time.MonthDay.parse("");
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        org.joda.time.MonthDay monthDay33 = monthDay30.withPeriodAdded(readablePeriod31, 1);
        org.joda.time.MonthDay monthDay35 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.MonthDay monthDay37 = monthDay35.withChronologyRetainFields(chronology36);
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = monthDay35.getFieldType((int) (byte) 1);
        int int40 = monthDay33.indexOf(dateTimeFieldType39);
        org.joda.time.MonthDay.Property property41 = monthDay28.property(dateTimeFieldType39);
        org.joda.time.DateTimeField[] dateTimeFieldArray42 = monthDay28.getFields();
        java.lang.String str43 = monthDay28.toString();
        java.util.Locale locale45 = null;
        java.lang.String str46 = monthDay28.toString("1", locale45);
        java.lang.String str47 = monthDay28.toString();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(monthDay9);
        org.junit.Assert.assertNotNull(monthDay11);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertNotNull(monthDay26);
        org.junit.Assert.assertNotNull(monthDay28);
        org.junit.Assert.assertNotNull(monthDay30);
        org.junit.Assert.assertNotNull(monthDay33);
        org.junit.Assert.assertNotNull(monthDay35);
        org.junit.Assert.assertNotNull(monthDay37);
        org.junit.Assert.assertNotNull(dateTimeFieldType39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(dateTimeFieldArray42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "--09-02" + "'", str43, "--09-02");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "1" + "'", str46, "1");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "--09-02" + "'", str47, "--09-02");
    }

    @Test
    public void test0526() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0526");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MonthDay monthDay1 = new org.joda.time.MonthDay(chronology0);
        org.joda.time.MonthDay.Property property2 = monthDay1.dayOfMonth();
        java.util.Locale locale4 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay5 = property2.setCopy("January", locale4);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"January\" for dayOfMonth is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
    }

    @Test
    public void test0527() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0527");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.MonthDay monthDay4 = monthDay1.withPeriodAdded(readablePeriod2, 1);
        org.joda.time.MonthDay monthDay6 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MonthDay monthDay8 = monthDay6.withChronologyRetainFields(chronology7);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = monthDay6.getFieldType((int) (byte) 1);
        int int11 = monthDay4.indexOf(dateTimeFieldType10);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MonthDay monthDay13 = monthDay4.withChronologyRetainFields(chronology12);
        org.joda.time.MonthDay monthDay15 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MonthDay monthDay17 = monthDay15.withChronologyRetainFields(chronology16);
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = monthDay15.getFieldType((int) (byte) 1);
        int int20 = monthDay4.get(dateTimeFieldType19);
        org.joda.time.MonthDay monthDay22 = monthDay4.plusDays(0);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.MonthDay monthDay24 = monthDay4.minus(readablePeriod23);
        org.joda.time.MonthDay monthDay26 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.MonthDay monthDay28 = monthDay26.withChronologyRetainFields(chronology27);
        org.joda.time.MonthDay monthDay30 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MonthDay monthDay32 = monthDay30.withChronologyRetainFields(chronology31);
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = monthDay30.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property35 = monthDay28.property(dateTimeFieldType34);
        org.joda.time.MonthDay.Property property36 = monthDay28.monthOfYear();
        int int37 = monthDay28.getDayOfMonth();
        org.joda.time.MonthDay.Property property38 = monthDay28.dayOfMonth();
        int int39 = monthDay28.getDayOfMonth();
        org.joda.time.MonthDay monthDay41 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.MonthDay monthDay43 = monthDay41.withChronologyRetainFields(chronology42);
        org.joda.time.DateTimeFieldType dateTimeFieldType45 = monthDay41.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property46 = monthDay41.dayOfMonth();
        org.joda.time.Chronology chronology47 = monthDay41.getChronology();
        org.joda.time.MonthDay monthDay48 = monthDay28.withChronologyRetainFields(chronology47);
        org.joda.time.MonthDay monthDay49 = new org.joda.time.MonthDay(chronology47);
        org.joda.time.DateTimeZone dateTimeZone50 = null;
        org.joda.time.MonthDay monthDay51 = new org.joda.time.MonthDay(dateTimeZone50);
        org.joda.time.DateTimeField[] dateTimeFieldArray52 = monthDay51.getFields();
        org.joda.time.MonthDay monthDay54 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.MonthDay monthDay56 = monthDay54.withChronologyRetainFields(chronology55);
        org.joda.time.DateTimeFieldType dateTimeFieldType58 = monthDay54.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property59 = monthDay54.dayOfMonth();
        org.joda.time.Chronology chronology60 = monthDay54.getChronology();
        org.joda.time.Chronology chronology61 = monthDay54.getChronology();
        org.joda.time.ReadableInstant readableInstant62 = null;
        org.joda.time.DateTime dateTime63 = monthDay54.toDateTime(readableInstant62);
        org.joda.time.MonthDay monthDay65 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.MonthDay monthDay67 = monthDay65.withChronologyRetainFields(chronology66);
        org.joda.time.DateTimeFieldType dateTimeFieldType69 = monthDay65.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod70 = null;
        org.joda.time.MonthDay monthDay71 = monthDay65.plus(readablePeriod70);
        org.joda.time.MonthDay monthDay73 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology74 = null;
        org.joda.time.MonthDay monthDay75 = monthDay73.withChronologyRetainFields(chronology74);
        org.joda.time.MonthDay monthDay77 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology78 = null;
        org.joda.time.MonthDay monthDay79 = monthDay77.withChronologyRetainFields(chronology78);
        org.joda.time.DateTimeFieldType dateTimeFieldType81 = monthDay77.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property82 = monthDay75.property(dateTimeFieldType81);
        int int83 = property82.get();
        org.joda.time.MonthDay monthDay85 = property82.addWrapFieldToCopy((int) (short) 1);
        boolean boolean86 = monthDay65.isBefore((org.joda.time.ReadablePartial) monthDay85);
        org.joda.time.DateTimeFieldType dateTimeFieldType88 = monthDay65.getFieldType(0);
        int int89 = monthDay54.get(dateTimeFieldType88);
        boolean boolean90 = monthDay51.isSupported(dateTimeFieldType88);
        org.joda.time.MonthDay.Property property91 = monthDay49.property(dateTimeFieldType88);
        int int92 = monthDay4.get(dateTimeFieldType88);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay4);
        org.junit.Assert.assertNotNull(monthDay6);
        org.junit.Assert.assertNotNull(monthDay8);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(monthDay17);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(monthDay22);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertNotNull(monthDay26);
        org.junit.Assert.assertNotNull(monthDay28);
        org.junit.Assert.assertNotNull(monthDay30);
        org.junit.Assert.assertNotNull(monthDay32);
        org.junit.Assert.assertNotNull(dateTimeFieldType34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNotNull(monthDay41);
        org.junit.Assert.assertNotNull(monthDay43);
        org.junit.Assert.assertNotNull(dateTimeFieldType45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(monthDay48);
        org.junit.Assert.assertNotNull(dateTimeFieldArray52);
        org.junit.Assert.assertNotNull(monthDay54);
        org.junit.Assert.assertNotNull(monthDay56);
        org.junit.Assert.assertNotNull(dateTimeFieldType58);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertNotNull(chronology61);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(monthDay65);
        org.junit.Assert.assertNotNull(monthDay67);
        org.junit.Assert.assertNotNull(dateTimeFieldType69);
        org.junit.Assert.assertNotNull(monthDay71);
        org.junit.Assert.assertNotNull(monthDay73);
        org.junit.Assert.assertNotNull(monthDay75);
        org.junit.Assert.assertNotNull(monthDay77);
        org.junit.Assert.assertNotNull(monthDay79);
        org.junit.Assert.assertNotNull(dateTimeFieldType81);
        org.junit.Assert.assertNotNull(property82);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 1 + "'", int83 == 1);
        org.junit.Assert.assertNotNull(monthDay85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType88);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 1 + "'", int89 == 1);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertNotNull(property91);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 1 + "'", int92 == 1);
    }

    @Test
    public void test0528() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0528");
        org.joda.time.MonthDay monthDay2 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MonthDay monthDay4 = monthDay2.withChronologyRetainFields(chronology3);
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = monthDay2.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property7 = monthDay2.dayOfMonth();
        org.joda.time.Chronology chronology8 = monthDay2.getChronology();
        org.joda.time.MonthDay monthDay9 = org.joda.time.MonthDay.now(chronology8);
        org.joda.time.MonthDay monthDay10 = new org.joda.time.MonthDay(0L, chronology8);
        org.joda.time.DateTimeField[] dateTimeFieldArray11 = monthDay10.getFields();
        org.joda.time.MonthDay monthDay13 = new org.joda.time.MonthDay((long) 10);
        org.joda.time.MonthDay monthDay15 = org.joda.time.MonthDay.parse("");
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.MonthDay monthDay18 = monthDay15.withPeriodAdded(readablePeriod16, 1);
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.MonthDay monthDay20 = monthDay15.plus(readablePeriod19);
        int int21 = monthDay13.compareTo((org.joda.time.ReadablePartial) monthDay20);
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.MonthDay monthDay24 = monthDay20.withPeriodAdded(readablePeriod22, (int) (byte) 10);
        org.joda.time.MonthDay monthDay26 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.MonthDay monthDay28 = monthDay26.withChronologyRetainFields(chronology27);
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = monthDay26.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property31 = monthDay26.dayOfMonth();
        org.joda.time.Chronology chronology32 = monthDay26.getChronology();
        org.joda.time.Chronology chronology33 = monthDay26.getChronology();
        org.joda.time.ReadableInstant readableInstant34 = null;
        org.joda.time.DateTime dateTime35 = monthDay26.toDateTime(readableInstant34);
        org.joda.time.DateTime dateTime36 = monthDay24.toDateTime(readableInstant34);
        org.joda.time.MonthDay monthDay38 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.MonthDay monthDay40 = monthDay38.withChronologyRetainFields(chronology39);
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = monthDay38.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod43 = null;
        org.joda.time.MonthDay monthDay44 = monthDay38.plus(readablePeriod43);
        org.joda.time.MonthDay monthDay46 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.MonthDay monthDay48 = monthDay46.withChronologyRetainFields(chronology47);
        org.joda.time.MonthDay monthDay50 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.MonthDay monthDay52 = monthDay50.withChronologyRetainFields(chronology51);
        org.joda.time.DateTimeFieldType dateTimeFieldType54 = monthDay50.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property55 = monthDay48.property(dateTimeFieldType54);
        int int56 = property55.get();
        org.joda.time.MonthDay monthDay58 = property55.addWrapFieldToCopy((int) (short) 1);
        boolean boolean59 = monthDay38.isBefore((org.joda.time.ReadablePartial) monthDay58);
        org.joda.time.MonthDay monthDay61 = monthDay58.minusMonths((int) (byte) 100);
        org.joda.time.MonthDay monthDay63 = monthDay61.plusMonths(1);
        org.joda.time.ReadablePeriod readablePeriod64 = null;
        org.joda.time.MonthDay monthDay65 = monthDay61.minus(readablePeriod64);
        org.joda.time.MonthDay monthDay67 = org.joda.time.MonthDay.parse("");
        org.joda.time.ReadablePeriod readablePeriod68 = null;
        org.joda.time.MonthDay monthDay70 = monthDay67.withPeriodAdded(readablePeriod68, 1);
        org.joda.time.MonthDay monthDay72 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology73 = null;
        org.joda.time.MonthDay monthDay74 = monthDay72.withChronologyRetainFields(chronology73);
        org.joda.time.DateTimeFieldType dateTimeFieldType76 = monthDay72.getFieldType((int) (byte) 1);
        int int77 = monthDay70.indexOf(dateTimeFieldType76);
        org.joda.time.MonthDay.Property property78 = monthDay65.property(dateTimeFieldType76);
        int int79 = monthDay24.get(dateTimeFieldType76);
        int int80 = monthDay10.indexOf(dateTimeFieldType76);
        org.junit.Assert.assertNotNull(monthDay2);
        org.junit.Assert.assertNotNull(monthDay4);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(monthDay9);
        org.junit.Assert.assertNotNull(dateTimeFieldArray11);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(monthDay18);
        org.junit.Assert.assertNotNull(monthDay20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertNotNull(monthDay26);
        org.junit.Assert.assertNotNull(monthDay28);
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(monthDay38);
        org.junit.Assert.assertNotNull(monthDay40);
        org.junit.Assert.assertNotNull(dateTimeFieldType42);
        org.junit.Assert.assertNotNull(monthDay44);
        org.junit.Assert.assertNotNull(monthDay46);
        org.junit.Assert.assertNotNull(monthDay48);
        org.junit.Assert.assertNotNull(monthDay50);
        org.junit.Assert.assertNotNull(monthDay52);
        org.junit.Assert.assertNotNull(dateTimeFieldType54);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertNotNull(monthDay58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(monthDay61);
        org.junit.Assert.assertNotNull(monthDay63);
        org.junit.Assert.assertNotNull(monthDay65);
        org.junit.Assert.assertNotNull(monthDay67);
        org.junit.Assert.assertNotNull(monthDay70);
        org.junit.Assert.assertNotNull(monthDay72);
        org.junit.Assert.assertNotNull(monthDay74);
        org.junit.Assert.assertNotNull(dateTimeFieldType76);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertNotNull(property78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 1 + "'", int79 == 1);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 1 + "'", int80 == 1);
    }

    @Test
    public void test0529() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0529");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        int int11 = property10.get();
        org.joda.time.MonthDay monthDay13 = property10.addWrapFieldToCopy((int) (short) 1);
        org.joda.time.MonthDay.Property property14 = monthDay13.dayOfMonth();
        int int15 = property14.getMaximumValueOverall();
        org.joda.time.MonthDay monthDay17 = property14.addWrapFieldToCopy((int) (short) 10);
        org.joda.time.MonthDay monthDay19 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MonthDay monthDay21 = monthDay19.withChronologyRetainFields(chronology20);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = monthDay19.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property24 = monthDay19.dayOfMonth();
        org.joda.time.Chronology chronology25 = monthDay19.getChronology();
        org.joda.time.Chronology chronology26 = monthDay19.getChronology();
        org.joda.time.MonthDay monthDay28 = monthDay19.plusMonths((int) ' ');
        int int29 = property14.compareTo((org.joda.time.ReadablePartial) monthDay28);
        org.joda.time.DateTimeField dateTimeField30 = property14.getField();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 31 + "'", int15 == 31);
        org.junit.Assert.assertNotNull(monthDay17);
        org.junit.Assert.assertNotNull(monthDay19);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(monthDay28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNotNull(dateTimeField30);
    }

    @Test
    public void test0530() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0530");
        org.joda.time.MonthDay monthDay3 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MonthDay monthDay5 = monthDay3.withChronologyRetainFields(chronology4);
        org.joda.time.MonthDay monthDay7 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MonthDay monthDay9 = monthDay7.withChronologyRetainFields(chronology8);
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = monthDay7.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property12 = monthDay5.property(dateTimeFieldType11);
        org.joda.time.MonthDay.Property property13 = monthDay5.monthOfYear();
        int int14 = monthDay5.getDayOfMonth();
        org.joda.time.MonthDay.Property property15 = monthDay5.dayOfMonth();
        int int16 = monthDay5.getDayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.MonthDay monthDay18 = monthDay5.plus(readablePeriod17);
        org.joda.time.MonthDay monthDay20 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.MonthDay monthDay22 = monthDay20.withChronologyRetainFields(chronology21);
        org.joda.time.MonthDay monthDay24 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MonthDay monthDay26 = monthDay24.withChronologyRetainFields(chronology25);
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = monthDay24.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property29 = monthDay22.property(dateTimeFieldType28);
        org.joda.time.MonthDay.Property property30 = monthDay22.monthOfYear();
        int int31 = monthDay22.getDayOfMonth();
        org.joda.time.MonthDay.Property property32 = monthDay22.dayOfMonth();
        int int33 = monthDay22.getDayOfMonth();
        org.joda.time.MonthDay monthDay35 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.MonthDay monthDay37 = monthDay35.withChronologyRetainFields(chronology36);
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = monthDay35.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property40 = monthDay35.dayOfMonth();
        org.joda.time.Chronology chronology41 = monthDay35.getChronology();
        org.joda.time.MonthDay monthDay42 = monthDay22.withChronologyRetainFields(chronology41);
        org.joda.time.MonthDay monthDay43 = monthDay18.withChronologyRetainFields(chronology41);
        org.joda.time.MonthDay monthDay45 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.MonthDay monthDay47 = monthDay45.withChronologyRetainFields(chronology46);
        org.joda.time.MonthDay monthDay49 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.MonthDay monthDay51 = monthDay49.withChronologyRetainFields(chronology50);
        org.joda.time.DateTimeFieldType dateTimeFieldType53 = monthDay49.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property54 = monthDay47.property(dateTimeFieldType53);
        org.joda.time.MonthDay.Property property55 = monthDay47.monthOfYear();
        int int56 = monthDay47.getDayOfMonth();
        org.joda.time.MonthDay.Property property57 = monthDay47.dayOfMonth();
        int int58 = monthDay47.getDayOfMonth();
        org.joda.time.MonthDay monthDay60 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.MonthDay monthDay62 = monthDay60.withChronologyRetainFields(chronology61);
        org.joda.time.DateTimeFieldType dateTimeFieldType64 = monthDay60.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property65 = monthDay60.dayOfMonth();
        org.joda.time.Chronology chronology66 = monthDay60.getChronology();
        org.joda.time.MonthDay monthDay67 = monthDay47.withChronologyRetainFields(chronology66);
        org.joda.time.MonthDay monthDay68 = new org.joda.time.MonthDay((java.lang.Object) monthDay18, chronology66);
        org.joda.time.MonthDay monthDay71 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology72 = null;
        org.joda.time.MonthDay monthDay73 = monthDay71.withChronologyRetainFields(chronology72);
        org.joda.time.MonthDay monthDay75 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology76 = null;
        org.joda.time.MonthDay monthDay77 = monthDay75.withChronologyRetainFields(chronology76);
        org.joda.time.DateTimeFieldType dateTimeFieldType79 = monthDay75.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property80 = monthDay75.dayOfMonth();
        org.joda.time.Chronology chronology81 = monthDay75.getChronology();
        org.joda.time.MonthDay monthDay82 = org.joda.time.MonthDay.now(chronology81);
        org.joda.time.MonthDay monthDay83 = monthDay73.withChronologyRetainFields(chronology81);
        org.joda.time.MonthDay monthDay84 = new org.joda.time.MonthDay(10L, chronology81);
        org.joda.time.MonthDay monthDay85 = new org.joda.time.MonthDay((java.lang.Object) monthDay18, chronology81);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay86 = new org.joda.time.MonthDay((int) (short) -1, (int) (short) -1, chronology81);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -1 for monthOfYear must not be smaller than 1");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(monthDay9);
        org.junit.Assert.assertNotNull(dateTimeFieldType11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(monthDay18);
        org.junit.Assert.assertNotNull(monthDay20);
        org.junit.Assert.assertNotNull(monthDay22);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertNotNull(monthDay26);
        org.junit.Assert.assertNotNull(dateTimeFieldType28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(monthDay35);
        org.junit.Assert.assertNotNull(monthDay37);
        org.junit.Assert.assertNotNull(dateTimeFieldType39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(monthDay42);
        org.junit.Assert.assertNotNull(monthDay43);
        org.junit.Assert.assertNotNull(monthDay45);
        org.junit.Assert.assertNotNull(monthDay47);
        org.junit.Assert.assertNotNull(monthDay49);
        org.junit.Assert.assertNotNull(monthDay51);
        org.junit.Assert.assertNotNull(dateTimeFieldType53);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertNotNull(monthDay60);
        org.junit.Assert.assertNotNull(monthDay62);
        org.junit.Assert.assertNotNull(dateTimeFieldType64);
        org.junit.Assert.assertNotNull(property65);
        org.junit.Assert.assertNotNull(chronology66);
        org.junit.Assert.assertNotNull(monthDay67);
        org.junit.Assert.assertNotNull(monthDay71);
        org.junit.Assert.assertNotNull(monthDay73);
        org.junit.Assert.assertNotNull(monthDay75);
        org.junit.Assert.assertNotNull(monthDay77);
        org.junit.Assert.assertNotNull(dateTimeFieldType79);
        org.junit.Assert.assertNotNull(property80);
        org.junit.Assert.assertNotNull(chronology81);
        org.junit.Assert.assertNotNull(monthDay82);
        org.junit.Assert.assertNotNull(monthDay83);
    }

    @Test
    public void test0531() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0531");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        int int11 = property10.get();
        org.joda.time.DurationField durationField12 = property10.getDurationField();
        org.joda.time.MonthDay monthDay14 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MonthDay monthDay16 = monthDay14.withChronologyRetainFields(chronology15);
        org.joda.time.MonthDay monthDay18 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MonthDay monthDay20 = monthDay18.withChronologyRetainFields(chronology19);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = monthDay18.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property23 = monthDay16.property(dateTimeFieldType22);
        boolean boolean24 = property10.equals((java.lang.Object) monthDay16);
        org.joda.time.MonthDay monthDay25 = new org.joda.time.MonthDay((java.lang.Object) monthDay16);
        org.joda.time.MonthDay monthDay27 = org.joda.time.MonthDay.parse("");
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.MonthDay monthDay30 = monthDay27.withPeriodAdded(readablePeriod28, 1);
        org.joda.time.MonthDay monthDay32 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.MonthDay monthDay34 = monthDay32.withChronologyRetainFields(chronology33);
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = monthDay32.getFieldType((int) (byte) 1);
        int int37 = monthDay30.indexOf(dateTimeFieldType36);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.MonthDay monthDay39 = monthDay30.withChronologyRetainFields(chronology38);
        boolean boolean40 = monthDay25.isBefore((org.joda.time.ReadablePartial) monthDay39);
        org.joda.time.MonthDay monthDay42 = org.joda.time.MonthDay.parse("");
        org.joda.time.MonthDay monthDay44 = monthDay42.minusDays((int) '#');
        org.joda.time.MonthDay monthDay46 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.MonthDay monthDay48 = monthDay46.withChronologyRetainFields(chronology47);
        org.joda.time.DateTimeFieldType dateTimeFieldType50 = monthDay46.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property51 = monthDay46.dayOfMonth();
        org.joda.time.Chronology chronology52 = monthDay46.getChronology();
        org.joda.time.Chronology chronology53 = monthDay46.getChronology();
        org.joda.time.ReadableInstant readableInstant54 = null;
        org.joda.time.DateTime dateTime55 = monthDay46.toDateTime(readableInstant54);
        org.joda.time.MonthDay monthDay57 = monthDay46.plusMonths((int) ' ');
        boolean boolean58 = monthDay42.isAfter((org.joda.time.ReadablePartial) monthDay57);
        org.joda.time.MonthDay monthDay60 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.MonthDay monthDay62 = monthDay60.withChronologyRetainFields(chronology61);
        org.joda.time.DateTimeFieldType dateTimeFieldType64 = monthDay60.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod65 = null;
        org.joda.time.MonthDay monthDay66 = monthDay60.plus(readablePeriod65);
        org.joda.time.MonthDay monthDay68 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology69 = null;
        org.joda.time.MonthDay monthDay70 = monthDay68.withChronologyRetainFields(chronology69);
        org.joda.time.MonthDay monthDay72 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology73 = null;
        org.joda.time.MonthDay monthDay74 = monthDay72.withChronologyRetainFields(chronology73);
        org.joda.time.DateTimeFieldType dateTimeFieldType76 = monthDay72.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property77 = monthDay70.property(dateTimeFieldType76);
        int int78 = property77.get();
        org.joda.time.MonthDay monthDay80 = property77.addWrapFieldToCopy((int) (short) 1);
        boolean boolean81 = monthDay60.isBefore((org.joda.time.ReadablePartial) monthDay80);
        org.joda.time.MonthDay monthDay83 = monthDay80.minusMonths((int) (byte) 100);
        org.joda.time.MonthDay monthDay85 = monthDay83.plusMonths(1);
        int int86 = monthDay57.compareTo((org.joda.time.ReadablePartial) monthDay83);
        int int87 = monthDay25.compareTo((org.joda.time.ReadablePartial) monthDay83);
        int int88 = monthDay83.getMonthOfYear();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str90 = monthDay83.toString("Property[monthOfYear]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: P");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(monthDay18);
        org.junit.Assert.assertNotNull(monthDay20);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(monthDay27);
        org.junit.Assert.assertNotNull(monthDay30);
        org.junit.Assert.assertNotNull(monthDay32);
        org.junit.Assert.assertNotNull(monthDay34);
        org.junit.Assert.assertNotNull(dateTimeFieldType36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(monthDay39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(monthDay42);
        org.junit.Assert.assertNotNull(monthDay44);
        org.junit.Assert.assertNotNull(monthDay46);
        org.junit.Assert.assertNotNull(monthDay48);
        org.junit.Assert.assertNotNull(dateTimeFieldType50);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(monthDay57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(monthDay60);
        org.junit.Assert.assertNotNull(monthDay62);
        org.junit.Assert.assertNotNull(dateTimeFieldType64);
        org.junit.Assert.assertNotNull(monthDay66);
        org.junit.Assert.assertNotNull(monthDay68);
        org.junit.Assert.assertNotNull(monthDay70);
        org.junit.Assert.assertNotNull(monthDay72);
        org.junit.Assert.assertNotNull(monthDay74);
        org.junit.Assert.assertNotNull(dateTimeFieldType76);
        org.junit.Assert.assertNotNull(property77);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 1 + "'", int78 == 1);
        org.junit.Assert.assertNotNull(monthDay80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertNotNull(monthDay83);
        org.junit.Assert.assertNotNull(monthDay85);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + (-1) + "'", int86 == (-1));
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + (-1) + "'", int87 == (-1));
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 9 + "'", int88 == 9);
    }

    @Test
    public void test0532() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0532");
        org.joda.time.MonthDay monthDay2 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MonthDay monthDay4 = monthDay2.withChronologyRetainFields(chronology3);
        org.joda.time.MonthDay monthDay6 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MonthDay monthDay8 = monthDay6.withChronologyRetainFields(chronology7);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = monthDay6.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property11 = monthDay6.dayOfMonth();
        org.joda.time.Chronology chronology12 = monthDay6.getChronology();
        org.joda.time.MonthDay monthDay13 = org.joda.time.MonthDay.now(chronology12);
        org.joda.time.MonthDay monthDay14 = monthDay4.withChronologyRetainFields(chronology12);
        org.joda.time.MonthDay monthDay15 = new org.joda.time.MonthDay(10L, chronology12);
        org.joda.time.MonthDay monthDay16 = org.joda.time.MonthDay.now(chronology12);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay18 = monthDay16.withMonthOfYear((int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 0 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay2);
        org.junit.Assert.assertNotNull(monthDay4);
        org.junit.Assert.assertNotNull(monthDay6);
        org.junit.Assert.assertNotNull(monthDay8);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertNotNull(monthDay16);
    }

    @Test
    public void test0533() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0533");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.MonthDay monthDay4 = monthDay1.withPeriodAdded(readablePeriod2, 1);
        org.joda.time.MonthDay monthDay6 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MonthDay monthDay8 = monthDay6.withChronologyRetainFields(chronology7);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = monthDay6.getFieldType((int) (byte) 1);
        int int11 = monthDay4.indexOf(dateTimeFieldType10);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MonthDay monthDay13 = monthDay4.withChronologyRetainFields(chronology12);
        org.joda.time.MonthDay monthDay15 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MonthDay monthDay17 = monthDay15.withChronologyRetainFields(chronology16);
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = monthDay15.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property20 = monthDay15.dayOfMonth();
        org.joda.time.Chronology chronology21 = monthDay15.getChronology();
        org.joda.time.Chronology chronology22 = monthDay15.getChronology();
        boolean boolean23 = monthDay4.isEqual((org.joda.time.ReadablePartial) monthDay15);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter24 = null;
        java.lang.String str25 = monthDay15.toString(dateTimeFormatter24);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MonthDay monthDay27 = monthDay15.withChronologyRetainFields(chronology26);
        int int28 = monthDay15.getDayOfMonth();
        org.joda.time.MonthDay.Property property29 = monthDay15.monthOfYear();
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.MonthDay monthDay32 = monthDay15.withPeriodAdded(readablePeriod30, 2);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay4);
        org.junit.Assert.assertNotNull(monthDay6);
        org.junit.Assert.assertNotNull(monthDay8);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(monthDay17);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "--01-01" + "'", str25, "--01-01");
        org.junit.Assert.assertNotNull(monthDay27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(monthDay32);
    }

    @Test
    public void test0534() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0534");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        int int11 = property10.get();
        int int12 = property10.getMinimumValueOverall();
        org.joda.time.DurationField durationField13 = property10.getRangeDurationField();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(durationField13);
    }

    @Test
    public void test0535() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0535");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        org.joda.time.MonthDay.Property property11 = monthDay3.monthOfYear();
        int int12 = monthDay3.getDayOfMonth();
        org.joda.time.MonthDay.Property property13 = monthDay3.dayOfMonth();
        int int14 = monthDay3.getDayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.MonthDay monthDay16 = monthDay3.plus(readablePeriod15);
        org.joda.time.MonthDay monthDay18 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MonthDay monthDay20 = monthDay18.withChronologyRetainFields(chronology19);
        org.joda.time.MonthDay monthDay22 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MonthDay monthDay24 = monthDay22.withChronologyRetainFields(chronology23);
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = monthDay22.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property27 = monthDay20.property(dateTimeFieldType26);
        org.joda.time.MonthDay.Property property28 = monthDay20.monthOfYear();
        int int29 = monthDay20.getDayOfMonth();
        org.joda.time.MonthDay.Property property30 = monthDay20.dayOfMonth();
        int int31 = monthDay20.getDayOfMonth();
        org.joda.time.MonthDay monthDay33 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MonthDay monthDay35 = monthDay33.withChronologyRetainFields(chronology34);
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = monthDay33.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property38 = monthDay33.dayOfMonth();
        org.joda.time.Chronology chronology39 = monthDay33.getChronology();
        org.joda.time.MonthDay monthDay40 = monthDay20.withChronologyRetainFields(chronology39);
        org.joda.time.MonthDay monthDay41 = monthDay16.withChronologyRetainFields(chronology39);
        org.joda.time.MonthDay monthDay43 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.MonthDay monthDay45 = monthDay43.withChronologyRetainFields(chronology44);
        org.joda.time.MonthDay monthDay47 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.MonthDay monthDay49 = monthDay47.withChronologyRetainFields(chronology48);
        org.joda.time.DateTimeFieldType dateTimeFieldType51 = monthDay47.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property52 = monthDay45.property(dateTimeFieldType51);
        org.joda.time.MonthDay.Property property53 = monthDay45.monthOfYear();
        int int54 = monthDay45.getDayOfMonth();
        org.joda.time.MonthDay.Property property55 = monthDay45.dayOfMonth();
        int int56 = monthDay45.getDayOfMonth();
        org.joda.time.MonthDay monthDay58 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.MonthDay monthDay60 = monthDay58.withChronologyRetainFields(chronology59);
        org.joda.time.DateTimeFieldType dateTimeFieldType62 = monthDay58.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property63 = monthDay58.dayOfMonth();
        org.joda.time.Chronology chronology64 = monthDay58.getChronology();
        org.joda.time.MonthDay monthDay65 = monthDay45.withChronologyRetainFields(chronology64);
        org.joda.time.MonthDay monthDay66 = new org.joda.time.MonthDay((java.lang.Object) monthDay16, chronology64);
        org.joda.time.MonthDay monthDay68 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology69 = null;
        org.joda.time.MonthDay monthDay70 = monthDay68.withChronologyRetainFields(chronology69);
        org.joda.time.MonthDay monthDay72 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology73 = null;
        org.joda.time.MonthDay monthDay74 = monthDay72.withChronologyRetainFields(chronology73);
        org.joda.time.DateTimeFieldType dateTimeFieldType76 = monthDay72.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property77 = monthDay72.dayOfMonth();
        org.joda.time.Chronology chronology78 = monthDay72.getChronology();
        org.joda.time.MonthDay monthDay79 = org.joda.time.MonthDay.now(chronology78);
        org.joda.time.MonthDay monthDay80 = monthDay70.withChronologyRetainFields(chronology78);
        org.joda.time.MonthDay monthDay81 = monthDay16.withChronologyRetainFields(chronology78);
        org.joda.time.MonthDay monthDay82 = org.joda.time.MonthDay.now(chronology78);
        org.joda.time.MonthDay monthDay83 = org.joda.time.MonthDay.now(chronology78);
        org.joda.time.ReadablePeriod readablePeriod84 = null;
        org.joda.time.MonthDay monthDay86 = monthDay83.withPeriodAdded(readablePeriod84, (int) (byte) 10);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(monthDay18);
        org.junit.Assert.assertNotNull(monthDay20);
        org.junit.Assert.assertNotNull(monthDay22);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertNotNull(monthDay33);
        org.junit.Assert.assertNotNull(monthDay35);
        org.junit.Assert.assertNotNull(dateTimeFieldType37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(monthDay40);
        org.junit.Assert.assertNotNull(monthDay41);
        org.junit.Assert.assertNotNull(monthDay43);
        org.junit.Assert.assertNotNull(monthDay45);
        org.junit.Assert.assertNotNull(monthDay47);
        org.junit.Assert.assertNotNull(monthDay49);
        org.junit.Assert.assertNotNull(dateTimeFieldType51);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertNotNull(monthDay58);
        org.junit.Assert.assertNotNull(monthDay60);
        org.junit.Assert.assertNotNull(dateTimeFieldType62);
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertNotNull(chronology64);
        org.junit.Assert.assertNotNull(monthDay65);
        org.junit.Assert.assertNotNull(monthDay68);
        org.junit.Assert.assertNotNull(monthDay70);
        org.junit.Assert.assertNotNull(monthDay72);
        org.junit.Assert.assertNotNull(monthDay74);
        org.junit.Assert.assertNotNull(dateTimeFieldType76);
        org.junit.Assert.assertNotNull(property77);
        org.junit.Assert.assertNotNull(chronology78);
        org.junit.Assert.assertNotNull(monthDay79);
        org.junit.Assert.assertNotNull(monthDay80);
        org.junit.Assert.assertNotNull(monthDay81);
        org.junit.Assert.assertNotNull(monthDay82);
        org.junit.Assert.assertNotNull(monthDay83);
        org.junit.Assert.assertNotNull(monthDay86);
    }

    @Test
    public void test0536() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0536");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePartial readablePartial6 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean7 = monthDay1.isBefore(readablePartial6);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Partial cannot be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
    }

    @Test
    public void test0537() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0537");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        int int11 = property10.get();
        org.joda.time.MonthDay monthDay13 = property10.addToCopy((int) (short) 0);
        org.joda.time.MonthDay monthDay15 = monthDay13.plusDays((int) 'a');
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
    }

    @Test
    public void test0538() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0538");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        int int11 = property10.get();
        int int12 = property10.getMaximumValueOverall();
        java.lang.String str13 = property10.getAsText();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 31 + "'", int12 == 31);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "1" + "'", str13, "1");
    }

    @Test
    public void test0539() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0539");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        org.joda.time.MonthDay.Property property11 = monthDay3.monthOfYear();
        java.lang.String str12 = property11.getAsShortText();
        java.util.Locale locale14 = null;
        org.joda.time.MonthDay monthDay15 = property11.setCopy("2", locale14);
        org.joda.time.MonthDay monthDay16 = property11.getMonthDay();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Jan" + "'", str12, "Jan");
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(monthDay16);
    }

    @Test
    public void test0540() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0540");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("monthOfYear");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"monthOfYear\"");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0541() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0541");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay1.plus(readablePeriod6);
        org.joda.time.MonthDay monthDay9 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MonthDay monthDay11 = monthDay9.withChronologyRetainFields(chronology10);
        org.joda.time.MonthDay monthDay13 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MonthDay monthDay15 = monthDay13.withChronologyRetainFields(chronology14);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = monthDay13.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property18 = monthDay11.property(dateTimeFieldType17);
        int int19 = property18.get();
        org.joda.time.MonthDay monthDay21 = property18.addWrapFieldToCopy((int) (short) 1);
        boolean boolean22 = monthDay1.isBefore((org.joda.time.ReadablePartial) monthDay21);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MonthDay monthDay24 = monthDay1.withChronologyRetainFields(chronology23);
        org.joda.time.MonthDay monthDay26 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.MonthDay monthDay28 = monthDay26.withChronologyRetainFields(chronology27);
        org.joda.time.MonthDay monthDay30 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MonthDay monthDay32 = monthDay30.withChronologyRetainFields(chronology31);
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = monthDay30.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property35 = monthDay28.property(dateTimeFieldType34);
        org.joda.time.MonthDay.Property property36 = monthDay28.monthOfYear();
        int int37 = monthDay28.getDayOfMonth();
        org.joda.time.MonthDay.Property property38 = monthDay28.dayOfMonth();
        int int39 = monthDay28.getDayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod40 = null;
        org.joda.time.MonthDay monthDay41 = monthDay28.plus(readablePeriod40);
        boolean boolean42 = monthDay24.isBefore((org.joda.time.ReadablePartial) monthDay28);
        org.joda.time.DateTimeField[] dateTimeFieldArray43 = monthDay28.getFields();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(monthDay9);
        org.junit.Assert.assertNotNull(monthDay11);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertNotNull(monthDay26);
        org.junit.Assert.assertNotNull(monthDay28);
        org.junit.Assert.assertNotNull(monthDay30);
        org.junit.Assert.assertNotNull(monthDay32);
        org.junit.Assert.assertNotNull(dateTimeFieldType34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNotNull(monthDay41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldArray43);
    }

    @Test
    public void test0542() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0542");
        org.joda.time.MonthDay monthDay3 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MonthDay monthDay5 = monthDay3.withChronologyRetainFields(chronology4);
        org.joda.time.MonthDay monthDay7 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MonthDay monthDay9 = monthDay7.withChronologyRetainFields(chronology8);
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = monthDay7.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property12 = monthDay5.property(dateTimeFieldType11);
        org.joda.time.MonthDay.Property property13 = monthDay5.monthOfYear();
        org.joda.time.MonthDay monthDay15 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MonthDay monthDay17 = monthDay15.withChronologyRetainFields(chronology16);
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = monthDay15.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay monthDay21 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.MonthDay monthDay23 = monthDay21.withChronologyRetainFields(chronology22);
        org.joda.time.MonthDay monthDay25 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MonthDay monthDay27 = monthDay25.withChronologyRetainFields(chronology26);
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = monthDay25.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property30 = monthDay23.property(dateTimeFieldType29);
        int int31 = monthDay15.indexOf(dateTimeFieldType29);
        boolean boolean32 = monthDay5.equals((java.lang.Object) int31);
        org.joda.time.MonthDay monthDay34 = monthDay5.withMonthOfYear(9);
        int int36 = monthDay34.getValue((int) (byte) 0);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray37 = monthDay34.getFieldTypes();
        org.joda.time.MonthDay monthDay39 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.MonthDay monthDay41 = monthDay39.withChronologyRetainFields(chronology40);
        org.joda.time.DateTimeFieldType dateTimeFieldType43 = monthDay39.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property44 = monthDay39.dayOfMonth();
        org.joda.time.Chronology chronology45 = monthDay39.getChronology();
        org.joda.time.Chronology chronology46 = monthDay39.getChronology();
        org.joda.time.MonthDay monthDay47 = monthDay34.withChronologyRetainFields(chronology46);
        org.joda.time.MonthDay monthDay48 = new org.joda.time.MonthDay((int) (byte) 10, (int) (byte) 1, chronology46);
        org.joda.time.MonthDay.Property property49 = monthDay48.dayOfMonth();
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(monthDay9);
        org.junit.Assert.assertNotNull(dateTimeFieldType11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(monthDay17);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertNotNull(monthDay23);
        org.junit.Assert.assertNotNull(monthDay25);
        org.junit.Assert.assertNotNull(monthDay27);
        org.junit.Assert.assertNotNull(dateTimeFieldType29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(monthDay34);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 9 + "'", int36 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray37);
        org.junit.Assert.assertNotNull(monthDay39);
        org.junit.Assert.assertNotNull(monthDay41);
        org.junit.Assert.assertNotNull(dateTimeFieldType43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(monthDay47);
        org.junit.Assert.assertNotNull(property49);
    }

    @Test
    public void test0543() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0543");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay1.plus(readablePeriod6);
        org.joda.time.MonthDay monthDay9 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MonthDay monthDay11 = monthDay9.withChronologyRetainFields(chronology10);
        org.joda.time.MonthDay monthDay13 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MonthDay monthDay15 = monthDay13.withChronologyRetainFields(chronology14);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = monthDay13.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property18 = monthDay11.property(dateTimeFieldType17);
        int int19 = property18.get();
        org.joda.time.MonthDay monthDay21 = property18.addWrapFieldToCopy((int) (short) 1);
        boolean boolean22 = monthDay1.isBefore((org.joda.time.ReadablePartial) monthDay21);
        org.joda.time.MonthDay monthDay24 = monthDay21.minusMonths((int) (byte) 100);
        org.joda.time.MonthDay monthDay26 = monthDay24.plusMonths(1);
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.MonthDay monthDay28 = monthDay24.minus(readablePeriod27);
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.MonthDay monthDay30 = new org.joda.time.MonthDay(dateTimeZone29);
        boolean boolean31 = monthDay28.isEqual((org.joda.time.ReadablePartial) monthDay30);
        org.joda.time.MonthDay monthDay33 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MonthDay monthDay35 = monthDay33.withChronologyRetainFields(chronology34);
        org.joda.time.MonthDay monthDay37 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.MonthDay monthDay39 = monthDay37.withChronologyRetainFields(chronology38);
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = monthDay37.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property42 = monthDay35.property(dateTimeFieldType41);
        int int43 = property42.get();
        org.joda.time.MonthDay monthDay45 = property42.addWrapFieldToCopy((int) (short) 1);
        java.lang.String str46 = property42.getAsString();
        java.lang.String str47 = property42.getAsText();
        java.lang.String str48 = property42.getAsShortText();
        boolean boolean49 = monthDay30.equals((java.lang.Object) str48);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(monthDay9);
        org.junit.Assert.assertNotNull(monthDay11);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertNotNull(monthDay26);
        org.junit.Assert.assertNotNull(monthDay28);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(monthDay33);
        org.junit.Assert.assertNotNull(monthDay35);
        org.junit.Assert.assertNotNull(monthDay37);
        org.junit.Assert.assertNotNull(monthDay39);
        org.junit.Assert.assertNotNull(dateTimeFieldType41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertNotNull(monthDay45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "1" + "'", str46, "1");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "1" + "'", str47, "1");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "1" + "'", str48, "1");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
    }

    @Test
    public void test0544() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0544");
        org.joda.time.MonthDay monthDay1 = new org.joda.time.MonthDay((long) 10);
        org.joda.time.MonthDay monthDay3 = org.joda.time.MonthDay.parse("");
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.MonthDay monthDay6 = monthDay3.withPeriodAdded(readablePeriod4, 1);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.MonthDay monthDay8 = monthDay3.plus(readablePeriod7);
        int int9 = monthDay1.compareTo((org.joda.time.ReadablePartial) monthDay8);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str11 = monthDay8.toString("Property[monthOfYear]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: P");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay6);
        org.junit.Assert.assertNotNull(monthDay8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
    }

    @Test
    public void test0545() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0545");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay2 = org.joda.time.MonthDay.parse("--01-09", dateTimeFormatter1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0546() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0546");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        int int11 = property10.get();
        org.joda.time.MonthDay monthDay13 = property10.addWrapFieldToCopy((int) (short) 1);
        org.joda.time.MonthDay.Property property14 = monthDay13.dayOfMonth();
        int int15 = property14.getMaximumValueOverall();
        int int16 = property14.getMinimumValueOverall();
        org.joda.time.MonthDay monthDay18 = property14.addWrapFieldToCopy((int) (byte) 1);
        org.joda.time.DateTimeField[] dateTimeFieldArray19 = monthDay18.getFields();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 31 + "'", int15 == 31);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(monthDay18);
        org.junit.Assert.assertNotNull(dateTimeFieldArray19);
    }

    @Test
    public void test0547() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0547");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        org.joda.time.MonthDay.Property property11 = monthDay3.monthOfYear();
        java.util.Locale locale12 = null;
        int int13 = property11.getMaximumTextLength(locale12);
        int int14 = property11.getMaximumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = property11.getFieldType();
        java.lang.String str16 = property11.getAsShortText();
        java.lang.String str17 = property11.toString();
        java.util.Locale locale19 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay20 = property11.setCopy("Property[monthOfYear]", locale19);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"Property[monthOfYear]\" for monthOfYear is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 9 + "'", int13 == 9);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 12 + "'", int14 == 12);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Jan" + "'", str16, "Jan");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Property[monthOfYear]" + "'", str17, "Property[monthOfYear]");
    }

    @Test
    public void test0548() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0548");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay1.plus(readablePeriod6);
        org.joda.time.MonthDay monthDay9 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MonthDay monthDay11 = monthDay9.withChronologyRetainFields(chronology10);
        org.joda.time.MonthDay monthDay13 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MonthDay monthDay15 = monthDay13.withChronologyRetainFields(chronology14);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = monthDay13.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property18 = monthDay11.property(dateTimeFieldType17);
        int int19 = property18.get();
        org.joda.time.MonthDay monthDay21 = property18.addWrapFieldToCopy((int) (short) 1);
        boolean boolean22 = monthDay1.isBefore((org.joda.time.ReadablePartial) monthDay21);
        org.joda.time.MonthDay monthDay24 = monthDay21.minusMonths((int) (byte) 100);
        org.joda.time.MonthDay monthDay26 = monthDay24.plusMonths(1);
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.MonthDay monthDay28 = monthDay24.minus(readablePeriod27);
        int int29 = monthDay28.size();
        org.joda.time.MonthDay monthDay31 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.MonthDay monthDay33 = monthDay31.withChronologyRetainFields(chronology32);
        org.joda.time.MonthDay monthDay35 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.MonthDay monthDay37 = monthDay35.withChronologyRetainFields(chronology36);
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = monthDay35.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property40 = monthDay33.property(dateTimeFieldType39);
        org.joda.time.MonthDay.Property property41 = monthDay33.monthOfYear();
        org.joda.time.MonthDay monthDay43 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.MonthDay monthDay45 = monthDay43.withChronologyRetainFields(chronology44);
        org.joda.time.DateTimeFieldType dateTimeFieldType47 = monthDay43.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay monthDay49 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.MonthDay monthDay51 = monthDay49.withChronologyRetainFields(chronology50);
        org.joda.time.MonthDay monthDay53 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.MonthDay monthDay55 = monthDay53.withChronologyRetainFields(chronology54);
        org.joda.time.DateTimeFieldType dateTimeFieldType57 = monthDay53.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property58 = monthDay51.property(dateTimeFieldType57);
        int int59 = monthDay43.indexOf(dateTimeFieldType57);
        boolean boolean60 = monthDay33.equals((java.lang.Object) int59);
        org.joda.time.MonthDay monthDay62 = monthDay33.withMonthOfYear(9);
        org.joda.time.MonthDay monthDay64 = monthDay62.minusMonths(100);
        int int65 = monthDay28.compareTo((org.joda.time.ReadablePartial) monthDay64);
        org.joda.time.MonthDay monthDay67 = monthDay64.minusDays((int) (short) -1);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(monthDay9);
        org.junit.Assert.assertNotNull(monthDay11);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertNotNull(monthDay26);
        org.junit.Assert.assertNotNull(monthDay28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2 + "'", int29 == 2);
        org.junit.Assert.assertNotNull(monthDay31);
        org.junit.Assert.assertNotNull(monthDay33);
        org.junit.Assert.assertNotNull(monthDay35);
        org.junit.Assert.assertNotNull(monthDay37);
        org.junit.Assert.assertNotNull(dateTimeFieldType39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(monthDay43);
        org.junit.Assert.assertNotNull(monthDay45);
        org.junit.Assert.assertNotNull(dateTimeFieldType47);
        org.junit.Assert.assertNotNull(monthDay49);
        org.junit.Assert.assertNotNull(monthDay51);
        org.junit.Assert.assertNotNull(monthDay53);
        org.junit.Assert.assertNotNull(monthDay55);
        org.junit.Assert.assertNotNull(dateTimeFieldType57);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(monthDay62);
        org.junit.Assert.assertNotNull(monthDay64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
        org.junit.Assert.assertNotNull(monthDay67);
    }

    @Test
    public void test0549() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0549");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.MonthDay monthDay1 = new org.joda.time.MonthDay(dateTimeZone0);
        org.joda.time.MonthDay monthDay3 = monthDay1.minusDays(100);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.MonthDay monthDay5 = monthDay1.minus(readablePeriod4);
        int int6 = monthDay5.size();
        org.joda.time.MonthDay monthDay8 = monthDay5.withMonthOfYear(1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(monthDay8);
    }

    @Test
    public void test0550() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0550");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property6 = monthDay1.dayOfMonth();
        org.joda.time.Chronology chronology7 = monthDay1.getChronology();
        org.joda.time.MonthDay monthDay9 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MonthDay monthDay11 = monthDay9.withChronologyRetainFields(chronology10);
        org.joda.time.MonthDay monthDay13 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MonthDay monthDay15 = monthDay13.withChronologyRetainFields(chronology14);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = monthDay13.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property18 = monthDay11.property(dateTimeFieldType17);
        boolean boolean19 = monthDay1.isSupported(dateTimeFieldType17);
        org.joda.time.MonthDay monthDay21 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.MonthDay monthDay23 = monthDay21.withChronologyRetainFields(chronology22);
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = monthDay21.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        org.joda.time.MonthDay monthDay27 = monthDay21.plus(readablePeriod26);
        org.joda.time.MonthDay monthDay29 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.MonthDay monthDay31 = monthDay29.withChronologyRetainFields(chronology30);
        org.joda.time.MonthDay monthDay33 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MonthDay monthDay35 = monthDay33.withChronologyRetainFields(chronology34);
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = monthDay33.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property38 = monthDay31.property(dateTimeFieldType37);
        int int39 = property38.get();
        org.joda.time.MonthDay monthDay41 = property38.addWrapFieldToCopy((int) (short) 1);
        boolean boolean42 = monthDay21.isBefore((org.joda.time.ReadablePartial) monthDay41);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.MonthDay monthDay44 = monthDay21.withChronologyRetainFields(chronology43);
        org.joda.time.Chronology chronology45 = monthDay44.getChronology();
        int[] intArray46 = monthDay44.getValues();
        java.lang.String str47 = monthDay44.toString();
        org.joda.time.MonthDay monthDay49 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.MonthDay monthDay51 = monthDay49.withChronologyRetainFields(chronology50);
        org.joda.time.DateTimeFieldType dateTimeFieldType53 = monthDay49.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod54 = null;
        org.joda.time.MonthDay monthDay55 = monthDay49.plus(readablePeriod54);
        org.joda.time.MonthDay monthDay57 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.MonthDay monthDay59 = monthDay57.withChronologyRetainFields(chronology58);
        org.joda.time.MonthDay monthDay61 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.MonthDay monthDay63 = monthDay61.withChronologyRetainFields(chronology62);
        org.joda.time.DateTimeFieldType dateTimeFieldType65 = monthDay61.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property66 = monthDay59.property(dateTimeFieldType65);
        int int67 = property66.get();
        org.joda.time.MonthDay monthDay69 = property66.addWrapFieldToCopy((int) (short) 1);
        boolean boolean70 = monthDay49.isBefore((org.joda.time.ReadablePartial) monthDay69);
        org.joda.time.DateTimeField[] dateTimeFieldArray71 = monthDay49.getFields();
        org.joda.time.ReadablePeriod readablePeriod72 = null;
        org.joda.time.MonthDay monthDay73 = monthDay49.minus(readablePeriod72);
        org.joda.time.ReadablePeriod readablePeriod74 = null;
        org.joda.time.MonthDay monthDay76 = monthDay49.withPeriodAdded(readablePeriod74, (int) (byte) -1);
        org.joda.time.Chronology chronology78 = null;
        org.joda.time.MonthDay monthDay79 = new org.joda.time.MonthDay((long) (short) 100, chronology78);
        org.joda.time.MonthDay monthDay81 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology82 = null;
        org.joda.time.MonthDay monthDay83 = monthDay81.withChronologyRetainFields(chronology82);
        org.joda.time.DateTimeFieldType dateTimeFieldType85 = monthDay81.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property86 = monthDay81.dayOfMonth();
        org.joda.time.Chronology chronology87 = monthDay81.getChronology();
        org.joda.time.Chronology chronology88 = monthDay81.getChronology();
        org.joda.time.ReadableInstant readableInstant89 = null;
        org.joda.time.DateTime dateTime90 = monthDay81.toDateTime(readableInstant89);
        org.joda.time.DateTime dateTime91 = monthDay79.toDateTime(readableInstant89);
        org.joda.time.DateTime dateTime92 = monthDay49.toDateTime((org.joda.time.ReadableInstant) dateTime91);
        org.joda.time.DateTime dateTime93 = monthDay44.toDateTime((org.joda.time.ReadableInstant) dateTime92);
        org.joda.time.DateTime dateTime94 = monthDay1.toDateTime((org.joda.time.ReadableInstant) dateTime92);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(monthDay9);
        org.junit.Assert.assertNotNull(monthDay11);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertNotNull(monthDay23);
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
        org.junit.Assert.assertNotNull(monthDay27);
        org.junit.Assert.assertNotNull(monthDay29);
        org.junit.Assert.assertNotNull(monthDay31);
        org.junit.Assert.assertNotNull(monthDay33);
        org.junit.Assert.assertNotNull(monthDay35);
        org.junit.Assert.assertNotNull(dateTimeFieldType37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNotNull(monthDay41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(monthDay44);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[1, 1]");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "--01-01" + "'", str47, "--01-01");
        org.junit.Assert.assertNotNull(monthDay49);
        org.junit.Assert.assertNotNull(monthDay51);
        org.junit.Assert.assertNotNull(dateTimeFieldType53);
        org.junit.Assert.assertNotNull(monthDay55);
        org.junit.Assert.assertNotNull(monthDay57);
        org.junit.Assert.assertNotNull(monthDay59);
        org.junit.Assert.assertNotNull(monthDay61);
        org.junit.Assert.assertNotNull(monthDay63);
        org.junit.Assert.assertNotNull(dateTimeFieldType65);
        org.junit.Assert.assertNotNull(property66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1 + "'", int67 == 1);
        org.junit.Assert.assertNotNull(monthDay69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldArray71);
        org.junit.Assert.assertNotNull(monthDay73);
        org.junit.Assert.assertNotNull(monthDay76);
        org.junit.Assert.assertNotNull(monthDay81);
        org.junit.Assert.assertNotNull(monthDay83);
        org.junit.Assert.assertNotNull(dateTimeFieldType85);
        org.junit.Assert.assertNotNull(property86);
        org.junit.Assert.assertNotNull(chronology87);
        org.junit.Assert.assertNotNull(chronology88);
        org.junit.Assert.assertNotNull(dateTime90);
        org.junit.Assert.assertNotNull(dateTime91);
        org.junit.Assert.assertNotNull(dateTime92);
        org.junit.Assert.assertNotNull(dateTime93);
        org.junit.Assert.assertNotNull(dateTime94);
    }

    @Test
    public void test0551() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0551");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay1.plus(readablePeriod6);
        org.joda.time.MonthDay monthDay9 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MonthDay monthDay11 = monthDay9.withChronologyRetainFields(chronology10);
        org.joda.time.MonthDay monthDay13 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MonthDay monthDay15 = monthDay13.withChronologyRetainFields(chronology14);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = monthDay13.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property18 = monthDay11.property(dateTimeFieldType17);
        int int19 = property18.get();
        org.joda.time.MonthDay monthDay21 = property18.addWrapFieldToCopy((int) (short) 1);
        boolean boolean22 = monthDay1.isBefore((org.joda.time.ReadablePartial) monthDay21);
        org.joda.time.MonthDay monthDay24 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MonthDay monthDay26 = monthDay24.withChronologyRetainFields(chronology25);
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = monthDay24.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        org.joda.time.MonthDay monthDay30 = monthDay24.plus(readablePeriod29);
        org.joda.time.MonthDay monthDay32 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.MonthDay monthDay34 = monthDay32.withChronologyRetainFields(chronology33);
        org.joda.time.MonthDay monthDay36 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.MonthDay monthDay38 = monthDay36.withChronologyRetainFields(chronology37);
        org.joda.time.DateTimeFieldType dateTimeFieldType40 = monthDay36.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property41 = monthDay34.property(dateTimeFieldType40);
        int int42 = property41.get();
        org.joda.time.MonthDay monthDay44 = property41.addWrapFieldToCopy((int) (short) 1);
        boolean boolean45 = monthDay24.isBefore((org.joda.time.ReadablePartial) monthDay44);
        org.joda.time.MonthDay monthDay47 = monthDay44.minusMonths((int) (byte) 100);
        org.joda.time.MonthDay monthDay49 = monthDay47.plusMonths(1);
        int int50 = monthDay47.size();
        org.joda.time.MonthDay monthDay52 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.MonthDay monthDay54 = monthDay52.withChronologyRetainFields(chronology53);
        org.joda.time.MonthDay monthDay56 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.MonthDay monthDay58 = monthDay56.withChronologyRetainFields(chronology57);
        org.joda.time.DateTimeFieldType dateTimeFieldType60 = monthDay56.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property61 = monthDay54.property(dateTimeFieldType60);
        int int62 = property61.get();
        org.joda.time.DurationField durationField63 = property61.getDurationField();
        org.joda.time.MonthDay monthDay65 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.MonthDay monthDay67 = monthDay65.withChronologyRetainFields(chronology66);
        org.joda.time.MonthDay monthDay69 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology70 = null;
        org.joda.time.MonthDay monthDay71 = monthDay69.withChronologyRetainFields(chronology70);
        org.joda.time.DateTimeFieldType dateTimeFieldType73 = monthDay69.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property74 = monthDay67.property(dateTimeFieldType73);
        boolean boolean75 = property61.equals((java.lang.Object) monthDay67);
        int int76 = property61.getMinimumValueOverall();
        org.joda.time.DateTimeFieldType dateTimeFieldType77 = property61.getFieldType();
        org.joda.time.MonthDay monthDay79 = monthDay47.withField(dateTimeFieldType77, (int) (byte) 1);
        int int80 = monthDay1.indexOf(dateTimeFieldType77);
        org.joda.time.MonthDay monthDay82 = monthDay1.minusMonths((int) ' ');
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay84 = monthDay82.withDayOfMonth((int) 'a');
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 97 for dayOfMonth must be in the range [1,31]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(monthDay9);
        org.junit.Assert.assertNotNull(monthDay11);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertNotNull(monthDay26);
        org.junit.Assert.assertNotNull(dateTimeFieldType28);
        org.junit.Assert.assertNotNull(monthDay30);
        org.junit.Assert.assertNotNull(monthDay32);
        org.junit.Assert.assertNotNull(monthDay34);
        org.junit.Assert.assertNotNull(monthDay36);
        org.junit.Assert.assertNotNull(monthDay38);
        org.junit.Assert.assertNotNull(dateTimeFieldType40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertNotNull(monthDay44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(monthDay47);
        org.junit.Assert.assertNotNull(monthDay49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 2 + "'", int50 == 2);
        org.junit.Assert.assertNotNull(monthDay52);
        org.junit.Assert.assertNotNull(monthDay54);
        org.junit.Assert.assertNotNull(monthDay56);
        org.junit.Assert.assertNotNull(monthDay58);
        org.junit.Assert.assertNotNull(dateTimeFieldType60);
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertNotNull(durationField63);
        org.junit.Assert.assertNotNull(monthDay65);
        org.junit.Assert.assertNotNull(monthDay67);
        org.junit.Assert.assertNotNull(monthDay69);
        org.junit.Assert.assertNotNull(monthDay71);
        org.junit.Assert.assertNotNull(dateTimeFieldType73);
        org.junit.Assert.assertNotNull(property74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 1 + "'", int76 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType77);
        org.junit.Assert.assertNotNull(monthDay79);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 1 + "'", int80 == 1);
        org.junit.Assert.assertNotNull(monthDay82);
    }

    @Test
    public void test0552() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0552");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        int int11 = property10.get();
        org.joda.time.MonthDay monthDay13 = property10.addWrapFieldToCopy((int) (short) 1);
        java.lang.String str14 = property10.getAsString();
        java.lang.String str15 = property10.getAsText();
        org.joda.time.DurationField durationField16 = property10.getRangeDurationField();
        int int17 = property10.get();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "1" + "'", str14, "1");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "1" + "'", str15, "1");
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
    }

    @Test
    public void test0553() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0553");
        org.joda.time.MonthDay monthDay3 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MonthDay monthDay5 = monthDay3.withChronologyRetainFields(chronology4);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = monthDay3.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.MonthDay monthDay9 = monthDay3.plus(readablePeriod8);
        org.joda.time.MonthDay monthDay11 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MonthDay monthDay13 = monthDay11.withChronologyRetainFields(chronology12);
        org.joda.time.MonthDay monthDay15 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MonthDay monthDay17 = monthDay15.withChronologyRetainFields(chronology16);
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = monthDay15.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property20 = monthDay13.property(dateTimeFieldType19);
        int int21 = property20.get();
        org.joda.time.MonthDay monthDay23 = property20.addWrapFieldToCopy((int) (short) 1);
        boolean boolean24 = monthDay3.isBefore((org.joda.time.ReadablePartial) monthDay23);
        org.joda.time.MonthDay monthDay26 = monthDay23.minusMonths((int) (byte) 100);
        org.joda.time.MonthDay monthDay28 = monthDay26.plusMonths(1);
        org.joda.time.MonthDay monthDay30 = org.joda.time.MonthDay.parse("");
        org.joda.time.MonthDay monthDay32 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.MonthDay monthDay34 = monthDay32.withChronologyRetainFields(chronology33);
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = monthDay32.getFieldType((int) (byte) 1);
        boolean boolean37 = monthDay30.isSupported(dateTimeFieldType36);
        boolean boolean38 = monthDay26.isSupported(dateTimeFieldType36);
        org.joda.time.Chronology chronology39 = monthDay26.getChronology();
        org.joda.time.MonthDay monthDay40 = org.joda.time.MonthDay.now(chronology39);
        org.joda.time.MonthDay monthDay41 = new org.joda.time.MonthDay(100L, chronology39);
        org.joda.time.MonthDay monthDay42 = new org.joda.time.MonthDay((long) 12, chronology39);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(monthDay9);
        org.junit.Assert.assertNotNull(monthDay11);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(monthDay17);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(monthDay23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(monthDay26);
        org.junit.Assert.assertNotNull(monthDay28);
        org.junit.Assert.assertNotNull(monthDay30);
        org.junit.Assert.assertNotNull(monthDay32);
        org.junit.Assert.assertNotNull(monthDay34);
        org.junit.Assert.assertNotNull(dateTimeFieldType36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(monthDay40);
    }

    @Test
    public void test0554() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0554");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        org.joda.time.MonthDay.Property property11 = monthDay3.monthOfYear();
        org.joda.time.MonthDay monthDay13 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MonthDay monthDay15 = monthDay13.withChronologyRetainFields(chronology14);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = monthDay13.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property18 = monthDay13.dayOfMonth();
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = property18.getFieldType();
        org.joda.time.MonthDay.Property property20 = monthDay3.property(dateTimeFieldType19);
        org.joda.time.MonthDay monthDay22 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MonthDay monthDay24 = monthDay22.withChronologyRetainFields(chronology23);
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = monthDay22.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.MonthDay monthDay28 = monthDay22.plus(readablePeriod27);
        org.joda.time.MonthDay monthDay30 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MonthDay monthDay32 = monthDay30.withChronologyRetainFields(chronology31);
        org.joda.time.MonthDay monthDay34 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.MonthDay monthDay36 = monthDay34.withChronologyRetainFields(chronology35);
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = monthDay34.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property39 = monthDay32.property(dateTimeFieldType38);
        int int40 = property39.get();
        org.joda.time.MonthDay monthDay42 = property39.addWrapFieldToCopy((int) (short) 1);
        boolean boolean43 = monthDay22.isBefore((org.joda.time.ReadablePartial) monthDay42);
        org.joda.time.MonthDay monthDay45 = monthDay42.minusMonths((int) (byte) 100);
        org.joda.time.MonthDay monthDay47 = monthDay45.minusDays(31);
        org.joda.time.MonthDay monthDay49 = org.joda.time.MonthDay.parse("");
        org.joda.time.ReadablePeriod readablePeriod50 = null;
        org.joda.time.MonthDay monthDay52 = monthDay49.withPeriodAdded(readablePeriod50, 1);
        org.joda.time.MonthDay monthDay54 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.MonthDay monthDay56 = monthDay54.withChronologyRetainFields(chronology55);
        org.joda.time.DateTimeFieldType dateTimeFieldType58 = monthDay54.getFieldType((int) (byte) 1);
        int int59 = monthDay52.indexOf(dateTimeFieldType58);
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.MonthDay monthDay61 = monthDay52.withChronologyRetainFields(chronology60);
        org.joda.time.MonthDay monthDay63 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.MonthDay monthDay65 = monthDay63.withChronologyRetainFields(chronology64);
        org.joda.time.DateTimeFieldType dateTimeFieldType67 = monthDay63.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod68 = null;
        org.joda.time.MonthDay monthDay69 = monthDay63.plus(readablePeriod68);
        org.joda.time.MonthDay monthDay71 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology72 = null;
        org.joda.time.MonthDay monthDay73 = monthDay71.withChronologyRetainFields(chronology72);
        org.joda.time.MonthDay monthDay75 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology76 = null;
        org.joda.time.MonthDay monthDay77 = monthDay75.withChronologyRetainFields(chronology76);
        org.joda.time.DateTimeFieldType dateTimeFieldType79 = monthDay75.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property80 = monthDay73.property(dateTimeFieldType79);
        int int81 = property80.get();
        org.joda.time.MonthDay monthDay83 = property80.addWrapFieldToCopy((int) (short) 1);
        boolean boolean84 = monthDay63.isBefore((org.joda.time.ReadablePartial) monthDay83);
        org.joda.time.Chronology chronology85 = null;
        org.joda.time.MonthDay monthDay86 = monthDay63.withChronologyRetainFields(chronology85);
        org.joda.time.Chronology chronology87 = monthDay86.getChronology();
        org.joda.time.MonthDay monthDay88 = monthDay61.withChronologyRetainFields(chronology87);
        org.joda.time.MonthDay monthDay89 = monthDay47.withChronologyRetainFields(chronology87);
        org.joda.time.Chronology chronology90 = monthDay89.getChronology();
        org.joda.time.MonthDay monthDay91 = monthDay3.withChronologyRetainFields(chronology90);
        org.joda.time.MonthDay monthDay92 = new org.joda.time.MonthDay(chronology90);
        java.lang.String str93 = monthDay92.toString();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(monthDay22);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertNotNull(monthDay28);
        org.junit.Assert.assertNotNull(monthDay30);
        org.junit.Assert.assertNotNull(monthDay32);
        org.junit.Assert.assertNotNull(monthDay34);
        org.junit.Assert.assertNotNull(monthDay36);
        org.junit.Assert.assertNotNull(dateTimeFieldType38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertNotNull(monthDay42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(monthDay45);
        org.junit.Assert.assertNotNull(monthDay47);
        org.junit.Assert.assertNotNull(monthDay49);
        org.junit.Assert.assertNotNull(monthDay52);
        org.junit.Assert.assertNotNull(monthDay54);
        org.junit.Assert.assertNotNull(monthDay56);
        org.junit.Assert.assertNotNull(dateTimeFieldType58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertNotNull(monthDay61);
        org.junit.Assert.assertNotNull(monthDay63);
        org.junit.Assert.assertNotNull(monthDay65);
        org.junit.Assert.assertNotNull(dateTimeFieldType67);
        org.junit.Assert.assertNotNull(monthDay69);
        org.junit.Assert.assertNotNull(monthDay71);
        org.junit.Assert.assertNotNull(monthDay73);
        org.junit.Assert.assertNotNull(monthDay75);
        org.junit.Assert.assertNotNull(monthDay77);
        org.junit.Assert.assertNotNull(dateTimeFieldType79);
        org.junit.Assert.assertNotNull(property80);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 1 + "'", int81 == 1);
        org.junit.Assert.assertNotNull(monthDay83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertNotNull(monthDay86);
        org.junit.Assert.assertNotNull(chronology87);
        org.junit.Assert.assertNotNull(monthDay88);
        org.junit.Assert.assertNotNull(monthDay89);
        org.junit.Assert.assertNotNull(chronology90);
        org.junit.Assert.assertNotNull(monthDay91);
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "--11-25" + "'", str93, "--11-25");
    }

    @Test
    public void test0555() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0555");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        int int11 = property10.get();
        org.joda.time.MonthDay monthDay13 = property10.addWrapFieldToCopy((int) (short) 1);
        java.lang.String str14 = property10.getAsString();
        java.lang.String str15 = property10.getAsText();
        org.joda.time.DurationField durationField16 = property10.getRangeDurationField();
        int int17 = property10.getMinimumValue();
        org.joda.time.MonthDay monthDay19 = property10.addToCopy((int) (short) -1);
        java.lang.String str20 = property10.toString();
        int int21 = property10.getMinimumValue();
        org.joda.time.MonthDay monthDay23 = property10.setCopy((int) (short) 1);
        int int24 = property10.getMaximumValueOverall();
        int int25 = property10.getMinimumValue();
        java.lang.Object obj26 = null;
        boolean boolean27 = property10.equals(obj26);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "1" + "'", str14, "1");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "1" + "'", str15, "1");
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(monthDay19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Property[dayOfMonth]" + "'", str20, "Property[dayOfMonth]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(monthDay23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 31 + "'", int24 == 31);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test0556() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0556");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        int int11 = property10.get();
        org.joda.time.MonthDay monthDay13 = property10.addWrapFieldToCopy((int) (short) 1);
        org.joda.time.MonthDay.Property property14 = monthDay13.dayOfMonth();
        int int15 = property14.getMaximumValueOverall();
        int int16 = property14.getMinimumValueOverall();
        org.joda.time.MonthDay monthDay18 = property14.setCopy(31);
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.MonthDay monthDay20 = monthDay18.plus(readablePeriod19);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay22 = monthDay18.withDayOfMonth((int) '#');
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 35 for dayOfMonth must be in the range [1,31]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 31 + "'", int15 == 31);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(monthDay18);
        org.junit.Assert.assertNotNull(monthDay20);
    }

    @Test
    public void test0557() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0557");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property6 = monthDay1.dayOfMonth();
        org.joda.time.MonthDay monthDay8 = property6.addWrapFieldToCopy(1);
        org.joda.time.MonthDay monthDay10 = property6.addWrapFieldToCopy(0);
        org.joda.time.MonthDay monthDay12 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MonthDay monthDay14 = monthDay12.withChronologyRetainFields(chronology13);
        org.joda.time.MonthDay monthDay16 = monthDay12.minusMonths((int) (byte) -1);
        boolean boolean17 = property6.equals((java.lang.Object) monthDay16);
        java.lang.String str18 = property6.getAsShortText();
        org.joda.time.DateTimeField dateTimeField19 = property6.getField();
        java.lang.String str20 = property6.getAsText();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(monthDay8);
        org.junit.Assert.assertNotNull(monthDay10);
        org.junit.Assert.assertNotNull(monthDay12);
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "1" + "'", str18, "1");
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "1" + "'", str20, "1");
    }

    @Test
    public void test0558() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0558");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.MonthDay monthDay4 = monthDay1.withPeriodAdded(readablePeriod2, 1);
        org.joda.time.MonthDay monthDay6 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MonthDay monthDay8 = monthDay6.withChronologyRetainFields(chronology7);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = monthDay6.getFieldType((int) (byte) 1);
        int int11 = monthDay4.indexOf(dateTimeFieldType10);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MonthDay monthDay13 = monthDay4.withChronologyRetainFields(chronology12);
        org.joda.time.MonthDay monthDay14 = org.joda.time.MonthDay.now();
        boolean boolean15 = monthDay13.isBefore((org.joda.time.ReadablePartial) monthDay14);
        org.joda.time.MonthDay monthDay17 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.MonthDay monthDay19 = monthDay17.withChronologyRetainFields(chronology18);
        org.joda.time.MonthDay monthDay21 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.MonthDay monthDay23 = monthDay21.withChronologyRetainFields(chronology22);
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = monthDay21.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property26 = monthDay19.property(dateTimeFieldType25);
        int int27 = property26.get();
        int int28 = property26.getMaximumValue();
        org.joda.time.MonthDay monthDay30 = property26.setCopy((int) (short) 1);
        org.joda.time.MonthDay monthDay32 = org.joda.time.MonthDay.parse("");
        org.joda.time.ReadablePeriod readablePeriod33 = null;
        org.joda.time.MonthDay monthDay35 = monthDay32.withPeriodAdded(readablePeriod33, 1);
        org.joda.time.MonthDay monthDay37 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.MonthDay monthDay39 = monthDay37.withChronologyRetainFields(chronology38);
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = monthDay37.getFieldType((int) (byte) 1);
        int int42 = monthDay35.indexOf(dateTimeFieldType41);
        boolean boolean43 = monthDay30.isSupported(dateTimeFieldType41);
        org.joda.time.MonthDay monthDay45 = monthDay30.plusDays((int) (short) 100);
        org.joda.time.ReadablePeriod readablePeriod46 = null;
        org.joda.time.MonthDay monthDay47 = monthDay30.plus(readablePeriod46);
        boolean boolean48 = monthDay13.isAfter((org.joda.time.ReadablePartial) monthDay47);
        org.joda.time.MonthDay monthDay50 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.MonthDay monthDay52 = monthDay50.withChronologyRetainFields(chronology51);
        org.joda.time.MonthDay monthDay54 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.MonthDay monthDay56 = monthDay54.withChronologyRetainFields(chronology55);
        org.joda.time.DateTimeFieldType dateTimeFieldType58 = monthDay54.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property59 = monthDay52.property(dateTimeFieldType58);
        int int60 = property59.get();
        org.joda.time.MonthDay monthDay62 = property59.addWrapFieldToCopy((int) (short) 1);
        org.joda.time.MonthDay monthDay64 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.MonthDay monthDay66 = monthDay64.withChronologyRetainFields(chronology65);
        org.joda.time.DateTimeFieldType dateTimeFieldType68 = monthDay64.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod69 = null;
        org.joda.time.MonthDay monthDay70 = monthDay64.plus(readablePeriod69);
        org.joda.time.MonthDay monthDay72 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology73 = null;
        org.joda.time.MonthDay monthDay74 = monthDay72.withChronologyRetainFields(chronology73);
        org.joda.time.MonthDay monthDay76 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology77 = null;
        org.joda.time.MonthDay monthDay78 = monthDay76.withChronologyRetainFields(chronology77);
        org.joda.time.DateTimeFieldType dateTimeFieldType80 = monthDay76.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property81 = monthDay74.property(dateTimeFieldType80);
        int int82 = property81.get();
        org.joda.time.MonthDay monthDay84 = property81.addWrapFieldToCopy((int) (short) 1);
        boolean boolean85 = monthDay64.isBefore((org.joda.time.ReadablePartial) monthDay84);
        org.joda.time.MonthDay monthDay87 = monthDay84.minusMonths((int) (byte) 100);
        org.joda.time.MonthDay monthDay89 = monthDay87.plusMonths(1);
        org.joda.time.ReadablePeriod readablePeriod90 = null;
        org.joda.time.MonthDay monthDay91 = monthDay87.minus(readablePeriod90);
        int int92 = monthDay62.compareTo((org.joda.time.ReadablePartial) monthDay87);
        org.joda.time.ReadablePeriod readablePeriod93 = null;
        org.joda.time.MonthDay monthDay94 = monthDay62.plus(readablePeriod93);
        int int95 = monthDay47.compareTo((org.joda.time.ReadablePartial) monthDay94);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay4);
        org.junit.Assert.assertNotNull(monthDay6);
        org.junit.Assert.assertNotNull(monthDay8);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(monthDay17);
        org.junit.Assert.assertNotNull(monthDay19);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertNotNull(monthDay23);
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 31 + "'", int28 == 31);
        org.junit.Assert.assertNotNull(monthDay30);
        org.junit.Assert.assertNotNull(monthDay32);
        org.junit.Assert.assertNotNull(monthDay35);
        org.junit.Assert.assertNotNull(monthDay37);
        org.junit.Assert.assertNotNull(monthDay39);
        org.junit.Assert.assertNotNull(dateTimeFieldType41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(monthDay45);
        org.junit.Assert.assertNotNull(monthDay47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(monthDay50);
        org.junit.Assert.assertNotNull(monthDay52);
        org.junit.Assert.assertNotNull(monthDay54);
        org.junit.Assert.assertNotNull(monthDay56);
        org.junit.Assert.assertNotNull(dateTimeFieldType58);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
        org.junit.Assert.assertNotNull(monthDay62);
        org.junit.Assert.assertNotNull(monthDay64);
        org.junit.Assert.assertNotNull(monthDay66);
        org.junit.Assert.assertNotNull(dateTimeFieldType68);
        org.junit.Assert.assertNotNull(monthDay70);
        org.junit.Assert.assertNotNull(monthDay72);
        org.junit.Assert.assertNotNull(monthDay74);
        org.junit.Assert.assertNotNull(monthDay76);
        org.junit.Assert.assertNotNull(monthDay78);
        org.junit.Assert.assertNotNull(dateTimeFieldType80);
        org.junit.Assert.assertNotNull(property81);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 1 + "'", int82 == 1);
        org.junit.Assert.assertNotNull(monthDay84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertNotNull(monthDay87);
        org.junit.Assert.assertNotNull(monthDay89);
        org.junit.Assert.assertNotNull(monthDay91);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + (-1) + "'", int92 == (-1));
        org.junit.Assert.assertNotNull(monthDay94);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + (-1) + "'", int95 == (-1));
    }

    @Test
    public void test0559() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0559");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        int int11 = property10.get();
        int int12 = property10.getMaximumValue();
        org.joda.time.MonthDay monthDay14 = property10.setCopy((int) (short) 1);
        org.joda.time.MonthDay monthDay16 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MonthDay monthDay18 = monthDay16.withChronologyRetainFields(chronology17);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = monthDay16.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.MonthDay monthDay22 = monthDay16.plus(readablePeriod21);
        int int23 = monthDay16.getDayOfMonth();
        int int24 = property10.compareTo((org.joda.time.ReadablePartial) monthDay16);
        org.joda.time.DateTimeField[] dateTimeFieldArray25 = monthDay16.getFields();
        org.joda.time.MonthDay monthDay27 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MonthDay monthDay29 = monthDay27.withChronologyRetainFields(chronology28);
        org.joda.time.MonthDay monthDay31 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.MonthDay monthDay33 = monthDay31.withChronologyRetainFields(chronology32);
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = monthDay31.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property36 = monthDay29.property(dateTimeFieldType35);
        int int37 = property36.get();
        org.joda.time.MonthDay monthDay39 = property36.addWrapFieldToCopy((int) (short) 1);
        org.joda.time.MonthDay monthDay41 = monthDay39.plusDays(2);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray42 = monthDay41.getFieldTypes();
        boolean boolean43 = monthDay16.isAfter((org.joda.time.ReadablePartial) monthDay41);
        org.joda.time.MonthDay monthDay45 = new org.joda.time.MonthDay((long) 10);
        org.joda.time.MonthDay monthDay47 = org.joda.time.MonthDay.parse("");
        org.joda.time.ReadablePeriod readablePeriod48 = null;
        org.joda.time.MonthDay monthDay50 = monthDay47.withPeriodAdded(readablePeriod48, 1);
        org.joda.time.ReadablePeriod readablePeriod51 = null;
        org.joda.time.MonthDay monthDay52 = monthDay47.plus(readablePeriod51);
        int int53 = monthDay45.compareTo((org.joda.time.ReadablePartial) monthDay52);
        org.joda.time.ReadablePeriod readablePeriod54 = null;
        org.joda.time.MonthDay monthDay56 = monthDay52.withPeriodAdded(readablePeriod54, (int) (byte) 10);
        org.joda.time.MonthDay monthDay58 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.MonthDay monthDay60 = monthDay58.withChronologyRetainFields(chronology59);
        org.joda.time.DateTimeFieldType dateTimeFieldType62 = monthDay58.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property63 = monthDay58.dayOfMonth();
        org.joda.time.Chronology chronology64 = monthDay58.getChronology();
        org.joda.time.Chronology chronology65 = monthDay58.getChronology();
        org.joda.time.ReadableInstant readableInstant66 = null;
        org.joda.time.DateTime dateTime67 = monthDay58.toDateTime(readableInstant66);
        org.joda.time.DateTime dateTime68 = monthDay56.toDateTime(readableInstant66);
        org.joda.time.DateTime dateTime69 = monthDay41.toDateTime((org.joda.time.ReadableInstant) dateTime68);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 31 + "'", int12 == 31);
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(monthDay18);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertNotNull(monthDay22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldArray25);
        org.junit.Assert.assertNotNull(monthDay27);
        org.junit.Assert.assertNotNull(monthDay29);
        org.junit.Assert.assertNotNull(monthDay31);
        org.junit.Assert.assertNotNull(monthDay33);
        org.junit.Assert.assertNotNull(dateTimeFieldType35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(monthDay39);
        org.junit.Assert.assertNotNull(monthDay41);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(monthDay47);
        org.junit.Assert.assertNotNull(monthDay50);
        org.junit.Assert.assertNotNull(monthDay52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(monthDay56);
        org.junit.Assert.assertNotNull(monthDay58);
        org.junit.Assert.assertNotNull(monthDay60);
        org.junit.Assert.assertNotNull(dateTimeFieldType62);
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertNotNull(chronology64);
        org.junit.Assert.assertNotNull(chronology65);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(dateTime69);
    }

    @Test
    public void test0560() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0560");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property6 = monthDay1.dayOfMonth();
        org.joda.time.Chronology chronology7 = monthDay1.getChronology();
        org.joda.time.Chronology chronology8 = monthDay1.getChronology();
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.DateTime dateTime10 = monthDay1.toDateTime(readableInstant9);
        org.joda.time.MonthDay monthDay12 = monthDay1.plusMonths((int) ' ');
        org.joda.time.MonthDay monthDay14 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MonthDay monthDay16 = monthDay14.withChronologyRetainFields(chronology15);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = monthDay14.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.MonthDay monthDay20 = monthDay14.plus(readablePeriod19);
        org.joda.time.MonthDay monthDay22 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MonthDay monthDay24 = monthDay22.withChronologyRetainFields(chronology23);
        org.joda.time.MonthDay monthDay26 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.MonthDay monthDay28 = monthDay26.withChronologyRetainFields(chronology27);
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = monthDay26.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property31 = monthDay24.property(dateTimeFieldType30);
        int int32 = property31.get();
        org.joda.time.MonthDay monthDay34 = property31.addWrapFieldToCopy((int) (short) 1);
        boolean boolean35 = monthDay14.isBefore((org.joda.time.ReadablePartial) monthDay34);
        org.joda.time.MonthDay monthDay37 = monthDay34.minusMonths((int) (byte) 100);
        org.joda.time.MonthDay monthDay39 = monthDay37.plusMonths(1);
        org.joda.time.ReadablePeriod readablePeriod40 = null;
        org.joda.time.MonthDay monthDay41 = monthDay37.minus(readablePeriod40);
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.MonthDay monthDay43 = new org.joda.time.MonthDay(dateTimeZone42);
        boolean boolean44 = monthDay41.isEqual((org.joda.time.ReadablePartial) monthDay43);
        boolean boolean45 = monthDay1.equals((java.lang.Object) monthDay41);
        org.joda.time.MonthDay.Property property46 = monthDay41.dayOfMonth();
        org.joda.time.MonthDay monthDay48 = org.joda.time.MonthDay.parse("");
        org.joda.time.ReadablePeriod readablePeriod49 = null;
        org.joda.time.MonthDay monthDay51 = monthDay48.withPeriodAdded(readablePeriod49, 1);
        org.joda.time.MonthDay monthDay53 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.MonthDay monthDay55 = monthDay53.withChronologyRetainFields(chronology54);
        org.joda.time.DateTimeFieldType dateTimeFieldType57 = monthDay53.getFieldType((int) (byte) 1);
        int int58 = monthDay51.indexOf(dateTimeFieldType57);
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.MonthDay monthDay60 = monthDay51.withChronologyRetainFields(chronology59);
        org.joda.time.MonthDay monthDay62 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.MonthDay monthDay64 = monthDay62.withChronologyRetainFields(chronology63);
        org.joda.time.DateTimeFieldType dateTimeFieldType66 = monthDay62.getFieldType((int) (byte) 1);
        int int67 = monthDay51.get(dateTimeFieldType66);
        org.joda.time.MonthDay monthDay69 = monthDay51.plusDays(0);
        int int70 = property46.compareTo((org.joda.time.ReadablePartial) monthDay51);
        org.joda.time.MonthDay monthDay72 = property46.addToCopy((int) (byte) 100);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(monthDay12);
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(monthDay20);
        org.junit.Assert.assertNotNull(monthDay22);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertNotNull(monthDay26);
        org.junit.Assert.assertNotNull(monthDay28);
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(monthDay34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(monthDay37);
        org.junit.Assert.assertNotNull(monthDay39);
        org.junit.Assert.assertNotNull(monthDay41);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(monthDay48);
        org.junit.Assert.assertNotNull(monthDay51);
        org.junit.Assert.assertNotNull(monthDay53);
        org.junit.Assert.assertNotNull(monthDay55);
        org.junit.Assert.assertNotNull(dateTimeFieldType57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertNotNull(monthDay60);
        org.junit.Assert.assertNotNull(monthDay62);
        org.junit.Assert.assertNotNull(monthDay64);
        org.junit.Assert.assertNotNull(dateTimeFieldType66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1 + "'", int67 == 1);
        org.junit.Assert.assertNotNull(monthDay69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 1 + "'", int70 == 1);
        org.junit.Assert.assertNotNull(monthDay72);
    }

    @Test
    public void test0561() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0561");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        java.util.Locale locale11 = null;
        int int12 = property10.getMaximumTextLength(locale11);
        java.util.Locale locale13 = null;
        int int14 = property10.getMaximumShortTextLength(locale13);
        org.joda.time.DateTimeField dateTimeField15 = property10.getField();
        int int16 = property10.getMaximumValue();
        org.joda.time.MonthDay monthDay17 = property10.getMonthDay();
        int int18 = property10.get();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 31 + "'", int16 == 31);
        org.junit.Assert.assertNotNull(monthDay17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
    }

    @Test
    public void test0562() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0562");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay5.dayOfMonth();
        org.joda.time.Chronology chronology11 = monthDay5.getChronology();
        org.joda.time.MonthDay monthDay12 = org.joda.time.MonthDay.now(chronology11);
        org.joda.time.MonthDay monthDay13 = monthDay3.withChronologyRetainFields(chronology11);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.MonthDay monthDay15 = monthDay3.minus(readablePeriod14);
        org.joda.time.MonthDay monthDay17 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.MonthDay monthDay19 = monthDay17.withChronologyRetainFields(chronology18);
        org.joda.time.MonthDay monthDay21 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.MonthDay monthDay23 = monthDay21.withChronologyRetainFields(chronology22);
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = monthDay21.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property26 = monthDay19.property(dateTimeFieldType25);
        int int27 = property26.get();
        int int28 = property26.getMaximumValue();
        org.joda.time.MonthDay monthDay30 = property26.setCopy((int) (short) 1);
        org.joda.time.MonthDay monthDay32 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.MonthDay monthDay34 = monthDay32.withChronologyRetainFields(chronology33);
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = monthDay32.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod37 = null;
        org.joda.time.MonthDay monthDay38 = monthDay32.plus(readablePeriod37);
        int int39 = monthDay32.getDayOfMonth();
        int int40 = property26.compareTo((org.joda.time.ReadablePartial) monthDay32);
        boolean boolean41 = monthDay15.isBefore((org.joda.time.ReadablePartial) monthDay32);
        java.lang.String str42 = monthDay15.toString();
        org.joda.time.MonthDay monthDay44 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.MonthDay monthDay46 = monthDay44.withChronologyRetainFields(chronology45);
        org.joda.time.MonthDay monthDay48 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.MonthDay monthDay50 = monthDay48.withChronologyRetainFields(chronology49);
        org.joda.time.DateTimeFieldType dateTimeFieldType52 = monthDay48.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property53 = monthDay46.property(dateTimeFieldType52);
        int int54 = property53.get();
        int int55 = property53.getMaximumValue();
        org.joda.time.MonthDay monthDay57 = property53.setCopy((int) (short) 1);
        org.joda.time.MonthDay monthDay59 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.MonthDay monthDay61 = monthDay59.withChronologyRetainFields(chronology60);
        org.joda.time.DateTimeFieldType dateTimeFieldType63 = monthDay59.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod64 = null;
        org.joda.time.MonthDay monthDay65 = monthDay59.plus(readablePeriod64);
        int int66 = monthDay59.getDayOfMonth();
        int int67 = property53.compareTo((org.joda.time.ReadablePartial) monthDay59);
        org.joda.time.DateTimeField[] dateTimeFieldArray68 = monthDay59.getFields();
        org.joda.time.MonthDay monthDay70 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology71 = null;
        org.joda.time.MonthDay monthDay72 = monthDay70.withChronologyRetainFields(chronology71);
        org.joda.time.DateTimeFieldType dateTimeFieldType74 = monthDay70.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property75 = monthDay70.dayOfMonth();
        org.joda.time.MonthDay monthDay77 = property75.addWrapFieldToCopy(1);
        boolean boolean78 = monthDay59.isEqual((org.joda.time.ReadablePartial) monthDay77);
        boolean boolean79 = monthDay15.equals((java.lang.Object) monthDay77);
        org.joda.time.MonthDay monthDay81 = monthDay77.minusDays((-1));
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(monthDay12);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(monthDay17);
        org.junit.Assert.assertNotNull(monthDay19);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertNotNull(monthDay23);
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 31 + "'", int28 == 31);
        org.junit.Assert.assertNotNull(monthDay30);
        org.junit.Assert.assertNotNull(monthDay32);
        org.junit.Assert.assertNotNull(monthDay34);
        org.junit.Assert.assertNotNull(dateTimeFieldType36);
        org.junit.Assert.assertNotNull(monthDay38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "--01-01" + "'", str42, "--01-01");
        org.junit.Assert.assertNotNull(monthDay44);
        org.junit.Assert.assertNotNull(monthDay46);
        org.junit.Assert.assertNotNull(monthDay48);
        org.junit.Assert.assertNotNull(monthDay50);
        org.junit.Assert.assertNotNull(dateTimeFieldType52);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 31 + "'", int55 == 31);
        org.junit.Assert.assertNotNull(monthDay57);
        org.junit.Assert.assertNotNull(monthDay59);
        org.junit.Assert.assertNotNull(monthDay61);
        org.junit.Assert.assertNotNull(dateTimeFieldType63);
        org.junit.Assert.assertNotNull(monthDay65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1 + "'", int66 == 1);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldArray68);
        org.junit.Assert.assertNotNull(monthDay70);
        org.junit.Assert.assertNotNull(monthDay72);
        org.junit.Assert.assertNotNull(dateTimeFieldType74);
        org.junit.Assert.assertNotNull(property75);
        org.junit.Assert.assertNotNull(monthDay77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(monthDay81);
    }

    @Test
    public void test0563() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0563");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property6 = monthDay1.dayOfMonth();
        java.util.Locale locale7 = null;
        int int8 = property6.getMaximumShortTextLength(locale7);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
    }

    @Test
    public void test0564() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0564");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        int int11 = property10.get();
        int int12 = property10.getMaximumValue();
        org.joda.time.MonthDay monthDay14 = property10.setCopy((int) (short) 1);
        org.joda.time.MonthDay monthDay16 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MonthDay monthDay18 = monthDay16.withChronologyRetainFields(chronology17);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = monthDay16.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.MonthDay monthDay22 = monthDay16.plus(readablePeriod21);
        int int23 = monthDay16.getDayOfMonth();
        int int24 = property10.compareTo((org.joda.time.ReadablePartial) monthDay16);
        org.joda.time.DateTimeField[] dateTimeFieldArray25 = monthDay16.getFields();
        org.joda.time.MonthDay monthDay27 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MonthDay monthDay29 = monthDay27.withChronologyRetainFields(chronology28);
        org.joda.time.MonthDay monthDay31 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.MonthDay monthDay33 = monthDay31.withChronologyRetainFields(chronology32);
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = monthDay31.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property36 = monthDay29.property(dateTimeFieldType35);
        int int37 = property36.get();
        org.joda.time.MonthDay monthDay39 = property36.addWrapFieldToCopy((int) (short) 1);
        org.joda.time.MonthDay monthDay41 = monthDay39.plusDays(2);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray42 = monthDay41.getFieldTypes();
        boolean boolean43 = monthDay16.isAfter((org.joda.time.ReadablePartial) monthDay41);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay45 = monthDay16.withMonthOfYear(30);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 30 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 31 + "'", int12 == 31);
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(monthDay18);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertNotNull(monthDay22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldArray25);
        org.junit.Assert.assertNotNull(monthDay27);
        org.junit.Assert.assertNotNull(monthDay29);
        org.junit.Assert.assertNotNull(monthDay31);
        org.junit.Assert.assertNotNull(monthDay33);
        org.junit.Assert.assertNotNull(dateTimeFieldType35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(monthDay39);
        org.junit.Assert.assertNotNull(monthDay41);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
    }

    @Test
    public void test0565() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0565");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        org.joda.time.MonthDay.Property property11 = monthDay3.monthOfYear();
        org.joda.time.MonthDay monthDay13 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MonthDay monthDay15 = monthDay13.withChronologyRetainFields(chronology14);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = monthDay13.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay monthDay19 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MonthDay monthDay21 = monthDay19.withChronologyRetainFields(chronology20);
        org.joda.time.MonthDay monthDay23 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MonthDay monthDay25 = monthDay23.withChronologyRetainFields(chronology24);
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = monthDay23.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property28 = monthDay21.property(dateTimeFieldType27);
        int int29 = monthDay13.indexOf(dateTimeFieldType27);
        boolean boolean30 = monthDay3.equals((java.lang.Object) int29);
        org.joda.time.MonthDay monthDay32 = monthDay3.withMonthOfYear(9);
        org.joda.time.MonthDay monthDay34 = monthDay32.plusDays(3);
        org.joda.time.DateTimeField[] dateTimeFieldArray35 = monthDay32.getFields();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(monthDay19);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertNotNull(monthDay23);
        org.junit.Assert.assertNotNull(monthDay25);
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(monthDay32);
        org.junit.Assert.assertNotNull(monthDay34);
        org.junit.Assert.assertNotNull(dateTimeFieldArray35);
    }

    @Test
    public void test0566() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0566");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        int int11 = property10.get();
        org.joda.time.MonthDay monthDay13 = property10.addWrapFieldToCopy((int) (short) 1);
        org.joda.time.MonthDay.Property property14 = monthDay13.dayOfMonth();
        int int15 = property14.getMaximumValue();
        int int16 = property14.getMaximumValueOverall();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay18 = property14.setCopy("--01-01");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"--01-01\" for dayOfMonth is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 31 + "'", int15 == 31);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 31 + "'", int16 == 31);
    }

    @Test
    public void test0567() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0567");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay2 = new org.joda.time.MonthDay((int) (short) 1, (-1));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -1 for dayOfMonth must not be smaller than 1");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0568() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0568");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property6 = monthDay1.dayOfMonth();
        org.joda.time.MonthDay monthDay8 = property6.addWrapFieldToCopy(1);
        org.joda.time.MonthDay monthDay10 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MonthDay monthDay12 = monthDay10.withChronologyRetainFields(chronology11);
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = monthDay10.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.MonthDay monthDay16 = monthDay10.plus(readablePeriod15);
        org.joda.time.MonthDay monthDay18 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MonthDay monthDay20 = monthDay18.withChronologyRetainFields(chronology19);
        org.joda.time.MonthDay monthDay22 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MonthDay monthDay24 = monthDay22.withChronologyRetainFields(chronology23);
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = monthDay22.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property27 = monthDay20.property(dateTimeFieldType26);
        int int28 = property27.get();
        org.joda.time.MonthDay monthDay30 = property27.addWrapFieldToCopy((int) (short) 1);
        boolean boolean31 = monthDay10.isBefore((org.joda.time.ReadablePartial) monthDay30);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.MonthDay monthDay33 = monthDay10.withChronologyRetainFields(chronology32);
        org.joda.time.Chronology chronology34 = monthDay33.getChronology();
        org.joda.time.MonthDay monthDay35 = org.joda.time.MonthDay.now(chronology34);
        org.joda.time.MonthDay monthDay36 = new org.joda.time.MonthDay((java.lang.Object) monthDay8, chronology34);
        org.joda.time.MonthDay monthDay37 = org.joda.time.MonthDay.now(chronology34);
        org.joda.time.MonthDay monthDay39 = org.joda.time.MonthDay.parse("");
        org.joda.time.ReadablePeriod readablePeriod40 = null;
        org.joda.time.MonthDay monthDay42 = monthDay39.withPeriodAdded(readablePeriod40, 1);
        org.joda.time.MonthDay monthDay44 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.MonthDay monthDay46 = monthDay44.withChronologyRetainFields(chronology45);
        org.joda.time.DateTimeFieldType dateTimeFieldType48 = monthDay44.getFieldType((int) (byte) 1);
        int int49 = monthDay42.indexOf(dateTimeFieldType48);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.MonthDay monthDay51 = monthDay42.withChronologyRetainFields(chronology50);
        org.joda.time.MonthDay.Property property52 = monthDay51.dayOfMonth();
        org.joda.time.DateTimeFieldType dateTimeFieldType53 = property52.getFieldType();
        org.joda.time.MonthDay.Property property54 = monthDay37.property(dateTimeFieldType53);
        java.util.Locale locale56 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str57 = monthDay37.toString("January", locale56);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: J");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(monthDay8);
        org.junit.Assert.assertNotNull(monthDay10);
        org.junit.Assert.assertNotNull(monthDay12);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(monthDay18);
        org.junit.Assert.assertNotNull(monthDay20);
        org.junit.Assert.assertNotNull(monthDay22);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(monthDay30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(monthDay33);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(monthDay35);
        org.junit.Assert.assertNotNull(monthDay37);
        org.junit.Assert.assertNotNull(monthDay39);
        org.junit.Assert.assertNotNull(monthDay42);
        org.junit.Assert.assertNotNull(monthDay44);
        org.junit.Assert.assertNotNull(monthDay46);
        org.junit.Assert.assertNotNull(dateTimeFieldType48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertNotNull(monthDay51);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(dateTimeFieldType53);
        org.junit.Assert.assertNotNull(property54);
    }

    @Test
    public void test0569() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0569");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        org.joda.time.MonthDay.Property property11 = monthDay3.monthOfYear();
        java.lang.String str12 = property11.getAsShortText();
        int int13 = property11.getMinimumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = property11.getFieldType();
        org.joda.time.MonthDay monthDay16 = property11.addToCopy(11);
        org.joda.time.MonthDay monthDay18 = property11.addWrapFieldToCopy(2);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Jan" + "'", str12, "Jan");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(monthDay18);
    }

    @Test
    public void test0570() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0570");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay12 = property10.setCopy("January");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"January\" for dayOfMonth is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
    }

    @Test
    public void test0571() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0571");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property6 = monthDay1.dayOfMonth();
        java.util.Locale locale7 = null;
        java.lang.String str8 = property6.getAsShortText(locale7);
        org.joda.time.MonthDay monthDay10 = property6.addToCopy(0);
        java.lang.String str11 = property6.getAsShortText();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "1" + "'", str8, "1");
        org.junit.Assert.assertNotNull(monthDay10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "1" + "'", str11, "1");
    }

    @Test
    public void test0572() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0572");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay1.plus(readablePeriod6);
        org.joda.time.MonthDay monthDay9 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MonthDay monthDay11 = monthDay9.withChronologyRetainFields(chronology10);
        org.joda.time.MonthDay monthDay13 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MonthDay monthDay15 = monthDay13.withChronologyRetainFields(chronology14);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = monthDay13.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property18 = monthDay11.property(dateTimeFieldType17);
        int int19 = property18.get();
        org.joda.time.MonthDay monthDay21 = property18.addWrapFieldToCopy((int) (short) 1);
        boolean boolean22 = monthDay1.isBefore((org.joda.time.ReadablePartial) monthDay21);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MonthDay monthDay24 = monthDay1.withChronologyRetainFields(chronology23);
        org.joda.time.MonthDay monthDay26 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.MonthDay monthDay28 = monthDay26.withChronologyRetainFields(chronology27);
        org.joda.time.MonthDay monthDay30 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MonthDay monthDay32 = monthDay30.withChronologyRetainFields(chronology31);
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = monthDay30.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property35 = monthDay28.property(dateTimeFieldType34);
        org.joda.time.MonthDay.Property property36 = monthDay28.monthOfYear();
        int int37 = monthDay28.getDayOfMonth();
        org.joda.time.MonthDay.Property property38 = monthDay28.dayOfMonth();
        int int39 = monthDay28.getDayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod40 = null;
        org.joda.time.MonthDay monthDay41 = monthDay28.plus(readablePeriod40);
        boolean boolean42 = monthDay24.isBefore((org.joda.time.ReadablePartial) monthDay28);
        org.joda.time.ReadablePeriod readablePeriod43 = null;
        org.joda.time.MonthDay monthDay45 = monthDay28.withPeriodAdded(readablePeriod43, 30);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(monthDay9);
        org.junit.Assert.assertNotNull(monthDay11);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertNotNull(monthDay26);
        org.junit.Assert.assertNotNull(monthDay28);
        org.junit.Assert.assertNotNull(monthDay30);
        org.junit.Assert.assertNotNull(monthDay32);
        org.junit.Assert.assertNotNull(dateTimeFieldType34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNotNull(monthDay41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(monthDay45);
    }

    @Test
    public void test0573() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0573");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        int int11 = property10.get();
        org.joda.time.MonthDay monthDay13 = property10.addWrapFieldToCopy((int) (short) 1);
        org.joda.time.MonthDay.Property property14 = monthDay13.dayOfMonth();
        int int15 = property14.getMaximumValueOverall();
        int int16 = property14.getMinimumValueOverall();
        org.joda.time.MonthDay monthDay18 = property14.setCopy(31);
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.MonthDay monthDay20 = monthDay18.plus(readablePeriod19);
        int int21 = monthDay20.getDayOfMonth();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 31 + "'", int15 == 31);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(monthDay18);
        org.junit.Assert.assertNotNull(monthDay20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 31 + "'", int21 == 31);
    }

    @Test
    public void test0574() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0574");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property6 = monthDay1.dayOfMonth();
        org.joda.time.Chronology chronology7 = monthDay1.getChronology();
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.MonthDay monthDay9 = monthDay1.plus(readablePeriod8);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField11 = monthDay9.getField(30);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 30");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(monthDay9);
    }

    @Test
    public void test0575() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0575");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        int int11 = property10.get();
        int int12 = property10.getMaximumValue();
        org.joda.time.MonthDay monthDay14 = property10.setCopy((int) (short) 1);
        org.joda.time.MonthDay monthDay16 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MonthDay monthDay18 = monthDay16.withChronologyRetainFields(chronology17);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = monthDay16.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.MonthDay monthDay22 = monthDay16.plus(readablePeriod21);
        int int23 = monthDay16.getDayOfMonth();
        int int24 = property10.compareTo((org.joda.time.ReadablePartial) monthDay16);
        java.lang.String str25 = property10.getName();
        java.util.Locale locale26 = null;
        java.lang.String str27 = property10.getAsShortText(locale26);
        org.joda.time.DateTimeField dateTimeField28 = property10.getField();
        java.lang.String str29 = property10.getAsText();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 31 + "'", int12 == 31);
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(monthDay18);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertNotNull(monthDay22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "dayOfMonth" + "'", str25, "dayOfMonth");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "1" + "'", str27, "1");
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "1" + "'", str29, "1");
    }

    @Test
    public void test0576() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0576");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        org.joda.time.MonthDay.Property property11 = monthDay3.monthOfYear();
        int int12 = monthDay3.getDayOfMonth();
        org.joda.time.MonthDay.Property property13 = monthDay3.dayOfMonth();
        int int14 = monthDay3.getDayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.MonthDay monthDay16 = monthDay3.plus(readablePeriod15);
        org.joda.time.MonthDay monthDay18 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MonthDay monthDay20 = monthDay18.withChronologyRetainFields(chronology19);
        org.joda.time.MonthDay monthDay22 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MonthDay monthDay24 = monthDay22.withChronologyRetainFields(chronology23);
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = monthDay22.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property27 = monthDay20.property(dateTimeFieldType26);
        org.joda.time.MonthDay.Property property28 = monthDay20.monthOfYear();
        int int29 = monthDay20.getDayOfMonth();
        org.joda.time.MonthDay.Property property30 = monthDay20.dayOfMonth();
        int int31 = monthDay20.getDayOfMonth();
        org.joda.time.MonthDay monthDay33 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MonthDay monthDay35 = monthDay33.withChronologyRetainFields(chronology34);
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = monthDay33.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property38 = monthDay33.dayOfMonth();
        org.joda.time.Chronology chronology39 = monthDay33.getChronology();
        org.joda.time.MonthDay monthDay40 = monthDay20.withChronologyRetainFields(chronology39);
        org.joda.time.MonthDay monthDay41 = monthDay16.withChronologyRetainFields(chronology39);
        org.joda.time.ReadablePeriod readablePeriod42 = null;
        org.joda.time.MonthDay monthDay43 = monthDay41.plus(readablePeriod42);
        java.lang.String str44 = monthDay43.toString();
        org.joda.time.MonthDay monthDay46 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.MonthDay monthDay48 = monthDay46.withChronologyRetainFields(chronology47);
        org.joda.time.DateTimeFieldType dateTimeFieldType50 = monthDay46.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod51 = null;
        org.joda.time.MonthDay monthDay52 = monthDay46.plus(readablePeriod51);
        org.joda.time.MonthDay monthDay54 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.MonthDay monthDay56 = monthDay54.withChronologyRetainFields(chronology55);
        org.joda.time.MonthDay monthDay58 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.MonthDay monthDay60 = monthDay58.withChronologyRetainFields(chronology59);
        org.joda.time.DateTimeFieldType dateTimeFieldType62 = monthDay58.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property63 = monthDay56.property(dateTimeFieldType62);
        int int64 = property63.get();
        org.joda.time.MonthDay monthDay66 = property63.addWrapFieldToCopy((int) (short) 1);
        boolean boolean67 = monthDay46.isBefore((org.joda.time.ReadablePartial) monthDay66);
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.MonthDay monthDay69 = monthDay46.withChronologyRetainFields(chronology68);
        org.joda.time.MonthDay monthDay71 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology72 = null;
        org.joda.time.MonthDay monthDay73 = monthDay71.withChronologyRetainFields(chronology72);
        org.joda.time.DateTimeFieldType dateTimeFieldType75 = monthDay71.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod76 = null;
        org.joda.time.MonthDay monthDay77 = monthDay71.plus(readablePeriod76);
        org.joda.time.MonthDay monthDay79 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology80 = null;
        org.joda.time.MonthDay monthDay81 = monthDay79.withChronologyRetainFields(chronology80);
        org.joda.time.MonthDay monthDay83 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology84 = null;
        org.joda.time.MonthDay monthDay85 = monthDay83.withChronologyRetainFields(chronology84);
        org.joda.time.DateTimeFieldType dateTimeFieldType87 = monthDay83.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property88 = monthDay81.property(dateTimeFieldType87);
        int int89 = property88.get();
        org.joda.time.MonthDay monthDay91 = property88.addWrapFieldToCopy((int) (short) 1);
        boolean boolean92 = monthDay71.isBefore((org.joda.time.ReadablePartial) monthDay91);
        org.joda.time.DateTimeFieldType dateTimeFieldType94 = monthDay71.getFieldType(0);
        boolean boolean95 = monthDay46.isAfter((org.joda.time.ReadablePartial) monthDay71);
        boolean boolean96 = monthDay43.isAfter((org.joda.time.ReadablePartial) monthDay46);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(monthDay18);
        org.junit.Assert.assertNotNull(monthDay20);
        org.junit.Assert.assertNotNull(monthDay22);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertNotNull(monthDay33);
        org.junit.Assert.assertNotNull(monthDay35);
        org.junit.Assert.assertNotNull(dateTimeFieldType37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(monthDay40);
        org.junit.Assert.assertNotNull(monthDay41);
        org.junit.Assert.assertNotNull(monthDay43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "--01-01" + "'", str44, "--01-01");
        org.junit.Assert.assertNotNull(monthDay46);
        org.junit.Assert.assertNotNull(monthDay48);
        org.junit.Assert.assertNotNull(dateTimeFieldType50);
        org.junit.Assert.assertNotNull(monthDay52);
        org.junit.Assert.assertNotNull(monthDay54);
        org.junit.Assert.assertNotNull(monthDay56);
        org.junit.Assert.assertNotNull(monthDay58);
        org.junit.Assert.assertNotNull(monthDay60);
        org.junit.Assert.assertNotNull(dateTimeFieldType62);
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertNotNull(monthDay66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(monthDay69);
        org.junit.Assert.assertNotNull(monthDay71);
        org.junit.Assert.assertNotNull(monthDay73);
        org.junit.Assert.assertNotNull(dateTimeFieldType75);
        org.junit.Assert.assertNotNull(monthDay77);
        org.junit.Assert.assertNotNull(monthDay79);
        org.junit.Assert.assertNotNull(monthDay81);
        org.junit.Assert.assertNotNull(monthDay83);
        org.junit.Assert.assertNotNull(monthDay85);
        org.junit.Assert.assertNotNull(dateTimeFieldType87);
        org.junit.Assert.assertNotNull(property88);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 1 + "'", int89 == 1);
        org.junit.Assert.assertNotNull(monthDay91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType94);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
    }

    @Test
    public void test0577() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0577");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay1.plus(readablePeriod6);
        org.joda.time.MonthDay monthDay9 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MonthDay monthDay11 = monthDay9.withChronologyRetainFields(chronology10);
        org.joda.time.MonthDay monthDay13 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MonthDay monthDay15 = monthDay13.withChronologyRetainFields(chronology14);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = monthDay13.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property18 = monthDay11.property(dateTimeFieldType17);
        int int19 = property18.get();
        org.joda.time.MonthDay monthDay21 = property18.addWrapFieldToCopy((int) (short) 1);
        boolean boolean22 = monthDay1.isBefore((org.joda.time.ReadablePartial) monthDay21);
        org.joda.time.MonthDay monthDay24 = monthDay21.minusMonths((int) (byte) 100);
        org.joda.time.MonthDay monthDay26 = monthDay24.minusDays(31);
        org.joda.time.MonthDay monthDay28 = org.joda.time.MonthDay.parse("");
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        org.joda.time.MonthDay monthDay31 = monthDay28.withPeriodAdded(readablePeriod29, 1);
        org.joda.time.MonthDay monthDay33 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MonthDay monthDay35 = monthDay33.withChronologyRetainFields(chronology34);
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = monthDay33.getFieldType((int) (byte) 1);
        int int38 = monthDay31.indexOf(dateTimeFieldType37);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.MonthDay monthDay40 = monthDay31.withChronologyRetainFields(chronology39);
        org.joda.time.MonthDay monthDay42 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.MonthDay monthDay44 = monthDay42.withChronologyRetainFields(chronology43);
        org.joda.time.DateTimeFieldType dateTimeFieldType46 = monthDay42.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod47 = null;
        org.joda.time.MonthDay monthDay48 = monthDay42.plus(readablePeriod47);
        org.joda.time.MonthDay monthDay50 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.MonthDay monthDay52 = monthDay50.withChronologyRetainFields(chronology51);
        org.joda.time.MonthDay monthDay54 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.MonthDay monthDay56 = monthDay54.withChronologyRetainFields(chronology55);
        org.joda.time.DateTimeFieldType dateTimeFieldType58 = monthDay54.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property59 = monthDay52.property(dateTimeFieldType58);
        int int60 = property59.get();
        org.joda.time.MonthDay monthDay62 = property59.addWrapFieldToCopy((int) (short) 1);
        boolean boolean63 = monthDay42.isBefore((org.joda.time.ReadablePartial) monthDay62);
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.MonthDay monthDay65 = monthDay42.withChronologyRetainFields(chronology64);
        org.joda.time.Chronology chronology66 = monthDay65.getChronology();
        org.joda.time.MonthDay monthDay67 = monthDay40.withChronologyRetainFields(chronology66);
        org.joda.time.MonthDay monthDay68 = monthDay26.withChronologyRetainFields(chronology66);
        org.joda.time.Chronology chronology69 = monthDay68.getChronology();
        org.joda.time.MonthDay monthDay70 = org.joda.time.MonthDay.now(chronology69);
        org.joda.time.MonthDay monthDay71 = new org.joda.time.MonthDay(chronology69);
        org.joda.time.MonthDay monthDay72 = new org.joda.time.MonthDay(chronology69);
        org.joda.time.MonthDay monthDay74 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology75 = null;
        org.joda.time.MonthDay monthDay76 = monthDay74.withChronologyRetainFields(chronology75);
        org.joda.time.MonthDay monthDay78 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology79 = null;
        org.joda.time.MonthDay monthDay80 = monthDay78.withChronologyRetainFields(chronology79);
        org.joda.time.DateTimeFieldType dateTimeFieldType82 = monthDay78.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property83 = monthDay76.property(dateTimeFieldType82);
        java.util.Locale locale84 = null;
        int int85 = property83.getMaximumTextLength(locale84);
        java.util.Locale locale86 = null;
        int int87 = property83.getMaximumShortTextLength(locale86);
        org.joda.time.DateTimeField dateTimeField88 = property83.getField();
        int int89 = property83.getMaximumValue();
        int int90 = property83.getMinimumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType91 = property83.getFieldType();
        org.joda.time.MonthDay.Property property92 = monthDay72.property(dateTimeFieldType91);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(monthDay9);
        org.junit.Assert.assertNotNull(monthDay11);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertNotNull(monthDay26);
        org.junit.Assert.assertNotNull(monthDay28);
        org.junit.Assert.assertNotNull(monthDay31);
        org.junit.Assert.assertNotNull(monthDay33);
        org.junit.Assert.assertNotNull(monthDay35);
        org.junit.Assert.assertNotNull(dateTimeFieldType37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(monthDay40);
        org.junit.Assert.assertNotNull(monthDay42);
        org.junit.Assert.assertNotNull(monthDay44);
        org.junit.Assert.assertNotNull(dateTimeFieldType46);
        org.junit.Assert.assertNotNull(monthDay48);
        org.junit.Assert.assertNotNull(monthDay50);
        org.junit.Assert.assertNotNull(monthDay52);
        org.junit.Assert.assertNotNull(monthDay54);
        org.junit.Assert.assertNotNull(monthDay56);
        org.junit.Assert.assertNotNull(dateTimeFieldType58);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
        org.junit.Assert.assertNotNull(monthDay62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(monthDay65);
        org.junit.Assert.assertNotNull(chronology66);
        org.junit.Assert.assertNotNull(monthDay67);
        org.junit.Assert.assertNotNull(monthDay68);
        org.junit.Assert.assertNotNull(chronology69);
        org.junit.Assert.assertNotNull(monthDay70);
        org.junit.Assert.assertNotNull(monthDay74);
        org.junit.Assert.assertNotNull(monthDay76);
        org.junit.Assert.assertNotNull(monthDay78);
        org.junit.Assert.assertNotNull(monthDay80);
        org.junit.Assert.assertNotNull(dateTimeFieldType82);
        org.junit.Assert.assertNotNull(property83);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 2 + "'", int85 == 2);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 2 + "'", int87 == 2);
        org.junit.Assert.assertNotNull(dateTimeField88);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 31 + "'", int89 == 31);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 1 + "'", int90 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType91);
        org.junit.Assert.assertNotNull(property92);
    }

    @Test
    public void test0578() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0578");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        int int11 = property10.get();
        org.joda.time.MonthDay monthDay13 = property10.addWrapFieldToCopy((int) (short) 1);
        org.joda.time.MonthDay.Property property14 = monthDay13.dayOfMonth();
        int int15 = property14.getMaximumValueOverall();
        java.util.Locale locale17 = null;
        org.joda.time.MonthDay monthDay18 = property14.setCopy("1", locale17);
        org.joda.time.MonthDay monthDay20 = org.joda.time.MonthDay.parse("");
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.MonthDay monthDay23 = monthDay20.withPeriodAdded(readablePeriod21, 1);
        org.joda.time.MonthDay monthDay25 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MonthDay monthDay27 = monthDay25.withChronologyRetainFields(chronology26);
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = monthDay25.getFieldType((int) (byte) 1);
        int int30 = monthDay23.indexOf(dateTimeFieldType29);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MonthDay monthDay32 = monthDay23.withChronologyRetainFields(chronology31);
        org.joda.time.MonthDay monthDay34 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.MonthDay monthDay36 = monthDay34.withChronologyRetainFields(chronology35);
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = monthDay34.getFieldType((int) (byte) 1);
        int int39 = monthDay23.get(dateTimeFieldType38);
        org.joda.time.DateTimeFieldType dateTimeFieldType40 = null;
        boolean boolean41 = monthDay23.isSupported(dateTimeFieldType40);
        int int42 = monthDay18.compareTo((org.joda.time.ReadablePartial) monthDay23);
        int int43 = monthDay23.getDayOfMonth();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 31 + "'", int15 == 31);
        org.junit.Assert.assertNotNull(monthDay18);
        org.junit.Assert.assertNotNull(monthDay20);
        org.junit.Assert.assertNotNull(monthDay23);
        org.junit.Assert.assertNotNull(monthDay25);
        org.junit.Assert.assertNotNull(monthDay27);
        org.junit.Assert.assertNotNull(dateTimeFieldType29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(monthDay32);
        org.junit.Assert.assertNotNull(monthDay34);
        org.junit.Assert.assertNotNull(monthDay36);
        org.junit.Assert.assertNotNull(dateTimeFieldType38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
    }

    @Test
    public void test0579() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0579");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property6 = monthDay1.dayOfMonth();
        org.joda.time.Chronology chronology7 = monthDay1.getChronology();
        org.joda.time.MonthDay monthDay9 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MonthDay monthDay11 = monthDay9.withChronologyRetainFields(chronology10);
        org.joda.time.MonthDay monthDay13 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MonthDay monthDay15 = monthDay13.withChronologyRetainFields(chronology14);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = monthDay13.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property18 = monthDay11.property(dateTimeFieldType17);
        boolean boolean19 = monthDay1.isSupported(dateTimeFieldType17);
        org.joda.time.MonthDay.Property property20 = monthDay1.monthOfYear();
        org.joda.time.MonthDay monthDay22 = property20.addToCopy((int) (short) 100);
        org.joda.time.MonthDay monthDay23 = org.joda.time.MonthDay.now();
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.MonthDay monthDay25 = monthDay23.plus(readablePeriod24);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MonthDay monthDay27 = new org.joda.time.MonthDay((java.lang.Object) monthDay23, chronology26);
        org.joda.time.MonthDay monthDay29 = org.joda.time.MonthDay.parse("");
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.MonthDay monthDay32 = monthDay29.withPeriodAdded(readablePeriod30, 1);
        org.joda.time.MonthDay monthDay34 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.MonthDay monthDay36 = monthDay34.withChronologyRetainFields(chronology35);
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = monthDay34.getFieldType((int) (byte) 1);
        int int39 = monthDay32.indexOf(dateTimeFieldType38);
        int int40 = monthDay27.indexOf(dateTimeFieldType38);
        boolean boolean41 = monthDay22.equals((java.lang.Object) dateTimeFieldType38);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(monthDay9);
        org.junit.Assert.assertNotNull(monthDay11);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(monthDay22);
        org.junit.Assert.assertNotNull(monthDay23);
        org.junit.Assert.assertNotNull(monthDay25);
        org.junit.Assert.assertNotNull(monthDay29);
        org.junit.Assert.assertNotNull(monthDay32);
        org.junit.Assert.assertNotNull(monthDay34);
        org.junit.Assert.assertNotNull(monthDay36);
        org.junit.Assert.assertNotNull(dateTimeFieldType38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
    }

    @Test
    public void test0580() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0580");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        int int11 = property10.get();
        org.joda.time.DurationField durationField12 = property10.getDurationField();
        org.joda.time.MonthDay monthDay14 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MonthDay monthDay16 = monthDay14.withChronologyRetainFields(chronology15);
        org.joda.time.MonthDay monthDay18 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MonthDay monthDay20 = monthDay18.withChronologyRetainFields(chronology19);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = monthDay18.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property23 = monthDay16.property(dateTimeFieldType22);
        boolean boolean24 = property10.equals((java.lang.Object) monthDay16);
        org.joda.time.MonthDay.Property property25 = monthDay16.dayOfMonth();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay27 = monthDay16.withDayOfMonth((int) '#');
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 35 for dayOfMonth must be in the range [1,31]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(monthDay18);
        org.junit.Assert.assertNotNull(monthDay20);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(property25);
    }

    @Test
    public void test0581() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0581");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = monthDay1.minusMonths((int) (byte) -1);
        org.joda.time.MonthDay monthDay7 = new org.joda.time.MonthDay(10L);
        int int8 = monthDay7.size();
        org.joda.time.MonthDay monthDay10 = monthDay7.minusDays((int) (byte) 1);
        org.joda.time.MonthDay monthDay12 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MonthDay monthDay14 = monthDay12.withChronologyRetainFields(chronology13);
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = monthDay12.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.MonthDay monthDay18 = monthDay12.plus(readablePeriod17);
        org.joda.time.MonthDay monthDay20 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.MonthDay monthDay22 = monthDay20.withChronologyRetainFields(chronology21);
        org.joda.time.MonthDay monthDay24 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MonthDay monthDay26 = monthDay24.withChronologyRetainFields(chronology25);
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = monthDay24.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property29 = monthDay22.property(dateTimeFieldType28);
        int int30 = property29.get();
        org.joda.time.MonthDay monthDay32 = property29.addWrapFieldToCopy((int) (short) 1);
        boolean boolean33 = monthDay12.isBefore((org.joda.time.ReadablePartial) monthDay32);
        org.joda.time.MonthDay monthDay35 = monthDay32.minusMonths((int) (byte) -1);
        org.joda.time.MonthDay.Property property36 = monthDay35.monthOfYear();
        boolean boolean37 = monthDay10.isEqual((org.joda.time.ReadablePartial) monthDay35);
        int int38 = monthDay1.compareTo((org.joda.time.ReadablePartial) monthDay10);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertNotNull(monthDay10);
        org.junit.Assert.assertNotNull(monthDay12);
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertNotNull(monthDay18);
        org.junit.Assert.assertNotNull(monthDay20);
        org.junit.Assert.assertNotNull(monthDay22);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertNotNull(monthDay26);
        org.junit.Assert.assertNotNull(dateTimeFieldType28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(monthDay32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(monthDay35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
    }

    @Test
    public void test0582() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0582");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property6 = monthDay1.dayOfMonth();
        org.joda.time.MonthDay monthDay8 = property6.addWrapFieldToCopy(1);
        org.joda.time.MonthDay monthDay10 = property6.addWrapFieldToCopy(0);
        org.joda.time.MonthDay monthDay12 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MonthDay monthDay14 = monthDay12.withChronologyRetainFields(chronology13);
        org.joda.time.MonthDay monthDay16 = monthDay12.minusMonths((int) (byte) -1);
        boolean boolean17 = property6.equals((java.lang.Object) monthDay16);
        int int18 = property6.getMaximumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = property6.getFieldType();
        org.joda.time.DurationField durationField20 = property6.getDurationField();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay22 = property6.setCopy("--02-01");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"--02-01\" for dayOfMonth is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(monthDay8);
        org.junit.Assert.assertNotNull(monthDay10);
        org.junit.Assert.assertNotNull(monthDay12);
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 31 + "'", int18 == 31);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertNotNull(durationField20);
    }

    @Test
    public void test0583() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0583");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        int int11 = property10.get();
        org.joda.time.DurationField durationField12 = property10.getDurationField();
        org.joda.time.MonthDay monthDay14 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MonthDay monthDay16 = monthDay14.withChronologyRetainFields(chronology15);
        org.joda.time.MonthDay monthDay18 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MonthDay monthDay20 = monthDay18.withChronologyRetainFields(chronology19);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = monthDay18.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property23 = monthDay16.property(dateTimeFieldType22);
        boolean boolean24 = property10.equals((java.lang.Object) monthDay16);
        org.joda.time.ReadableInstant readableInstant25 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int26 = property10.compareTo(readableInstant25);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The instant must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(monthDay18);
        org.junit.Assert.assertNotNull(monthDay20);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test0584() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0584");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property6 = monthDay1.dayOfMonth();
        org.joda.time.MonthDay monthDay8 = property6.addWrapFieldToCopy(1);
        java.util.Locale locale9 = null;
        java.lang.String str10 = property6.getAsText(locale9);
        java.util.Locale locale11 = null;
        java.lang.String str12 = property6.getAsText(locale11);
        org.joda.time.MonthDay monthDay14 = property6.setCopy((int) (byte) 1);
        java.lang.String str15 = property6.getAsText();
        org.joda.time.DurationField durationField16 = property6.getRangeDurationField();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(monthDay8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1" + "'", str10, "1");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "1" + "'", str12, "1");
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "1" + "'", str15, "1");
        org.junit.Assert.assertNotNull(durationField16);
    }

    @Test
    public void test0585() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0585");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay5.dayOfMonth();
        org.joda.time.Chronology chronology11 = monthDay5.getChronology();
        org.joda.time.MonthDay monthDay12 = org.joda.time.MonthDay.now(chronology11);
        org.joda.time.MonthDay monthDay13 = monthDay3.withChronologyRetainFields(chronology11);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.MonthDay monthDay15 = monthDay3.minus(readablePeriod14);
        org.joda.time.MonthDay monthDay17 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.MonthDay monthDay19 = monthDay17.withChronologyRetainFields(chronology18);
        org.joda.time.MonthDay monthDay21 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.MonthDay monthDay23 = monthDay21.withChronologyRetainFields(chronology22);
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = monthDay21.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property26 = monthDay19.property(dateTimeFieldType25);
        int int27 = property26.get();
        int int28 = property26.getMaximumValue();
        org.joda.time.MonthDay monthDay30 = property26.setCopy((int) (short) 1);
        org.joda.time.MonthDay monthDay32 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.MonthDay monthDay34 = monthDay32.withChronologyRetainFields(chronology33);
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = monthDay32.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod37 = null;
        org.joda.time.MonthDay monthDay38 = monthDay32.plus(readablePeriod37);
        int int39 = monthDay32.getDayOfMonth();
        int int40 = property26.compareTo((org.joda.time.ReadablePartial) monthDay32);
        boolean boolean41 = monthDay15.isBefore((org.joda.time.ReadablePartial) monthDay32);
        java.lang.String str42 = monthDay15.toString();
        org.joda.time.MonthDay monthDay44 = org.joda.time.MonthDay.parse("");
        org.joda.time.MonthDay monthDay46 = monthDay44.minusDays((int) '#');
        org.joda.time.MonthDay monthDay48 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.MonthDay monthDay50 = monthDay48.withChronologyRetainFields(chronology49);
        org.joda.time.DateTimeFieldType dateTimeFieldType52 = monthDay48.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property53 = monthDay48.dayOfMonth();
        org.joda.time.Chronology chronology54 = monthDay48.getChronology();
        org.joda.time.Chronology chronology55 = monthDay48.getChronology();
        org.joda.time.ReadableInstant readableInstant56 = null;
        org.joda.time.DateTime dateTime57 = monthDay48.toDateTime(readableInstant56);
        org.joda.time.MonthDay monthDay59 = monthDay48.plusMonths((int) ' ');
        boolean boolean60 = monthDay44.isAfter((org.joda.time.ReadablePartial) monthDay59);
        org.joda.time.Chronology chronology61 = monthDay59.getChronology();
        org.joda.time.MonthDay monthDay62 = monthDay15.withChronologyRetainFields(chronology61);
        // The following exception was thrown during execution in test generation
        try {
            int int64 = monthDay15.getValue((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(monthDay12);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(monthDay17);
        org.junit.Assert.assertNotNull(monthDay19);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertNotNull(monthDay23);
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 31 + "'", int28 == 31);
        org.junit.Assert.assertNotNull(monthDay30);
        org.junit.Assert.assertNotNull(monthDay32);
        org.junit.Assert.assertNotNull(monthDay34);
        org.junit.Assert.assertNotNull(dateTimeFieldType36);
        org.junit.Assert.assertNotNull(monthDay38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "--01-01" + "'", str42, "--01-01");
        org.junit.Assert.assertNotNull(monthDay44);
        org.junit.Assert.assertNotNull(monthDay46);
        org.junit.Assert.assertNotNull(monthDay48);
        org.junit.Assert.assertNotNull(monthDay50);
        org.junit.Assert.assertNotNull(dateTimeFieldType52);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(monthDay59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(chronology61);
        org.junit.Assert.assertNotNull(monthDay62);
    }

    @Test
    public void test0586() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0586");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        int int11 = property10.get();
        org.joda.time.MonthDay monthDay13 = property10.addWrapFieldToCopy((int) (short) 1);
        org.joda.time.MonthDay monthDay15 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MonthDay monthDay17 = monthDay15.withChronologyRetainFields(chronology16);
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = monthDay15.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.MonthDay monthDay21 = monthDay15.plus(readablePeriod20);
        org.joda.time.MonthDay monthDay23 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MonthDay monthDay25 = monthDay23.withChronologyRetainFields(chronology24);
        org.joda.time.MonthDay monthDay27 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MonthDay monthDay29 = monthDay27.withChronologyRetainFields(chronology28);
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = monthDay27.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property32 = monthDay25.property(dateTimeFieldType31);
        int int33 = property32.get();
        org.joda.time.MonthDay monthDay35 = property32.addWrapFieldToCopy((int) (short) 1);
        boolean boolean36 = monthDay15.isBefore((org.joda.time.ReadablePartial) monthDay35);
        org.joda.time.MonthDay monthDay38 = monthDay35.minusMonths((int) (byte) 100);
        org.joda.time.MonthDay monthDay40 = monthDay38.plusMonths(1);
        org.joda.time.MonthDay monthDay42 = org.joda.time.MonthDay.parse("");
        org.joda.time.MonthDay monthDay44 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.MonthDay monthDay46 = monthDay44.withChronologyRetainFields(chronology45);
        org.joda.time.DateTimeFieldType dateTimeFieldType48 = monthDay44.getFieldType((int) (byte) 1);
        boolean boolean49 = monthDay42.isSupported(dateTimeFieldType48);
        boolean boolean50 = monthDay38.isSupported(dateTimeFieldType48);
        org.joda.time.Chronology chronology51 = monthDay38.getChronology();
        org.joda.time.MonthDay monthDay52 = monthDay13.withChronologyRetainFields(chronology51);
        org.joda.time.MonthDay monthDay54 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.MonthDay monthDay56 = monthDay54.withChronologyRetainFields(chronology55);
        org.joda.time.DateTimeFieldType dateTimeFieldType58 = monthDay54.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod59 = null;
        org.joda.time.MonthDay monthDay60 = monthDay54.plus(readablePeriod59);
        org.joda.time.MonthDay monthDay62 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.MonthDay monthDay64 = monthDay62.withChronologyRetainFields(chronology63);
        org.joda.time.MonthDay monthDay66 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.MonthDay monthDay68 = monthDay66.withChronologyRetainFields(chronology67);
        org.joda.time.DateTimeFieldType dateTimeFieldType70 = monthDay66.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property71 = monthDay64.property(dateTimeFieldType70);
        int int72 = property71.get();
        org.joda.time.MonthDay monthDay74 = property71.addWrapFieldToCopy((int) (short) 1);
        boolean boolean75 = monthDay54.isBefore((org.joda.time.ReadablePartial) monthDay74);
        org.joda.time.MonthDay monthDay77 = monthDay74.minusMonths((int) (byte) 100);
        org.joda.time.MonthDay monthDay79 = monthDay77.plusMonths(1);
        org.joda.time.ReadablePeriod readablePeriod80 = null;
        org.joda.time.MonthDay monthDay81 = monthDay77.minus(readablePeriod80);
        org.joda.time.MonthDay monthDay83 = org.joda.time.MonthDay.parse("");
        org.joda.time.ReadablePeriod readablePeriod84 = null;
        org.joda.time.MonthDay monthDay86 = monthDay83.withPeriodAdded(readablePeriod84, 1);
        org.joda.time.MonthDay monthDay88 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology89 = null;
        org.joda.time.MonthDay monthDay90 = monthDay88.withChronologyRetainFields(chronology89);
        org.joda.time.DateTimeFieldType dateTimeFieldType92 = monthDay88.getFieldType((int) (byte) 1);
        int int93 = monthDay86.indexOf(dateTimeFieldType92);
        org.joda.time.MonthDay.Property property94 = monthDay81.property(dateTimeFieldType92);
        org.joda.time.DateTimeField[] dateTimeFieldArray95 = monthDay81.getFields();
        java.lang.String str96 = monthDay81.toString();
        boolean boolean97 = monthDay13.equals((java.lang.Object) monthDay81);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(monthDay17);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertNotNull(monthDay23);
        org.junit.Assert.assertNotNull(monthDay25);
        org.junit.Assert.assertNotNull(monthDay27);
        org.junit.Assert.assertNotNull(monthDay29);
        org.junit.Assert.assertNotNull(dateTimeFieldType31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(monthDay35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(monthDay38);
        org.junit.Assert.assertNotNull(monthDay40);
        org.junit.Assert.assertNotNull(monthDay42);
        org.junit.Assert.assertNotNull(monthDay44);
        org.junit.Assert.assertNotNull(monthDay46);
        org.junit.Assert.assertNotNull(dateTimeFieldType48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(monthDay52);
        org.junit.Assert.assertNotNull(monthDay54);
        org.junit.Assert.assertNotNull(monthDay56);
        org.junit.Assert.assertNotNull(dateTimeFieldType58);
        org.junit.Assert.assertNotNull(monthDay60);
        org.junit.Assert.assertNotNull(monthDay62);
        org.junit.Assert.assertNotNull(monthDay64);
        org.junit.Assert.assertNotNull(monthDay66);
        org.junit.Assert.assertNotNull(monthDay68);
        org.junit.Assert.assertNotNull(dateTimeFieldType70);
        org.junit.Assert.assertNotNull(property71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 1 + "'", int72 == 1);
        org.junit.Assert.assertNotNull(monthDay74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(monthDay77);
        org.junit.Assert.assertNotNull(monthDay79);
        org.junit.Assert.assertNotNull(monthDay81);
        org.junit.Assert.assertNotNull(monthDay83);
        org.junit.Assert.assertNotNull(monthDay86);
        org.junit.Assert.assertNotNull(monthDay88);
        org.junit.Assert.assertNotNull(monthDay90);
        org.junit.Assert.assertNotNull(dateTimeFieldType92);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 1 + "'", int93 == 1);
        org.junit.Assert.assertNotNull(property94);
        org.junit.Assert.assertNotNull(dateTimeFieldArray95);
        org.junit.Assert.assertEquals("'" + str96 + "' != '" + "--09-02" + "'", str96, "--09-02");
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
    }

    @Test
    public void test0587() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0587");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        int int11 = property10.get();
        org.joda.time.MonthDay monthDay13 = property10.addWrapFieldToCopy((int) (short) 1);
        java.lang.String str14 = property10.getAsString();
        java.lang.String str15 = property10.getAsText();
        org.joda.time.MonthDay monthDay17 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.MonthDay monthDay19 = monthDay17.withChronologyRetainFields(chronology18);
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = monthDay17.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property22 = monthDay17.dayOfMonth();
        org.joda.time.Chronology chronology23 = monthDay17.getChronology();
        org.joda.time.Chronology chronology24 = monthDay17.getChronology();
        org.joda.time.MonthDay monthDay25 = org.joda.time.MonthDay.now(chronology24);
        org.joda.time.MonthDay monthDay26 = org.joda.time.MonthDay.now(chronology24);
        boolean boolean27 = property10.equals((java.lang.Object) monthDay26);
        org.joda.time.DateTimeField dateTimeField28 = property10.getField();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "1" + "'", str14, "1");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "1" + "'", str15, "1");
        org.junit.Assert.assertNotNull(monthDay17);
        org.junit.Assert.assertNotNull(monthDay19);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(monthDay25);
        org.junit.Assert.assertNotNull(monthDay26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(dateTimeField28);
    }

    @Test
    public void test0588() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0588");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        int int11 = property10.get();
        org.joda.time.DurationField durationField12 = property10.getDurationField();
        org.joda.time.MonthDay monthDay14 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MonthDay monthDay16 = monthDay14.withChronologyRetainFields(chronology15);
        org.joda.time.MonthDay monthDay18 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MonthDay monthDay20 = monthDay18.withChronologyRetainFields(chronology19);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = monthDay18.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property23 = monthDay16.property(dateTimeFieldType22);
        boolean boolean24 = property10.equals((java.lang.Object) monthDay16);
        java.lang.String str25 = property10.getAsShortText();
        java.lang.String str26 = property10.toString();
        org.joda.time.MonthDay monthDay28 = property10.addWrapFieldToCopy(9);
        org.joda.time.MonthDay monthDay30 = property10.addWrapFieldToCopy((int) '#');
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(monthDay18);
        org.junit.Assert.assertNotNull(monthDay20);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "1" + "'", str25, "1");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Property[dayOfMonth]" + "'", str26, "Property[dayOfMonth]");
        org.junit.Assert.assertNotNull(monthDay28);
        org.junit.Assert.assertNotNull(monthDay30);
    }

    @Test
    public void test0589() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0589");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        int int11 = property10.get();
        org.joda.time.DurationField durationField12 = property10.getDurationField();
        org.joda.time.MonthDay monthDay14 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MonthDay monthDay16 = monthDay14.withChronologyRetainFields(chronology15);
        org.joda.time.MonthDay monthDay18 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MonthDay monthDay20 = monthDay18.withChronologyRetainFields(chronology19);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = monthDay18.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property23 = monthDay16.property(dateTimeFieldType22);
        boolean boolean24 = property10.equals((java.lang.Object) monthDay16);
        org.joda.time.DateTimeField dateTimeField25 = property10.getField();
        java.util.Locale locale26 = null;
        int int27 = property10.getMaximumShortTextLength(locale26);
        java.lang.String str28 = property10.getName();
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = property10.getFieldType();
        java.lang.String str30 = property10.getName();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(monthDay18);
        org.junit.Assert.assertNotNull(monthDay20);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2 + "'", int27 == 2);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "dayOfMonth" + "'", str28, "dayOfMonth");
        org.junit.Assert.assertNotNull(dateTimeFieldType29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "dayOfMonth" + "'", str30, "dayOfMonth");
    }

    @Test
    public void test0590() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0590");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.MonthDay monthDay4 = monthDay1.withPeriodAdded(readablePeriod2, 1);
        org.joda.time.MonthDay monthDay6 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MonthDay monthDay8 = monthDay6.withChronologyRetainFields(chronology7);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = monthDay6.getFieldType((int) (byte) 1);
        int int11 = monthDay4.indexOf(dateTimeFieldType10);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MonthDay monthDay13 = monthDay4.withChronologyRetainFields(chronology12);
        org.joda.time.MonthDay monthDay15 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MonthDay monthDay17 = monthDay15.withChronologyRetainFields(chronology16);
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = monthDay15.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property20 = monthDay15.dayOfMonth();
        org.joda.time.Chronology chronology21 = monthDay15.getChronology();
        org.joda.time.Chronology chronology22 = monthDay15.getChronology();
        boolean boolean23 = monthDay4.isEqual((org.joda.time.ReadablePartial) monthDay15);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter24 = null;
        java.lang.String str25 = monthDay15.toString(dateTimeFormatter24);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MonthDay monthDay27 = monthDay15.withChronologyRetainFields(chronology26);
        org.joda.time.MonthDay monthDay29 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.MonthDay monthDay31 = monthDay29.withChronologyRetainFields(chronology30);
        org.joda.time.MonthDay monthDay33 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MonthDay monthDay35 = monthDay33.withChronologyRetainFields(chronology34);
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = monthDay33.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property38 = monthDay31.property(dateTimeFieldType37);
        int int39 = property38.get();
        org.joda.time.DurationField durationField40 = property38.getDurationField();
        org.joda.time.MonthDay monthDay42 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.MonthDay monthDay44 = monthDay42.withChronologyRetainFields(chronology43);
        org.joda.time.MonthDay monthDay46 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.MonthDay monthDay48 = monthDay46.withChronologyRetainFields(chronology47);
        org.joda.time.DateTimeFieldType dateTimeFieldType50 = monthDay46.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property51 = monthDay44.property(dateTimeFieldType50);
        boolean boolean52 = property38.equals((java.lang.Object) monthDay44);
        java.util.Locale locale53 = null;
        java.lang.String str54 = property38.getAsShortText(locale53);
        java.lang.String str55 = property38.getAsShortText();
        java.lang.String str56 = property38.toString();
        org.joda.time.DateTimeFieldType dateTimeFieldType57 = property38.getFieldType();
        boolean boolean58 = monthDay27.isSupported(dateTimeFieldType57);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay4);
        org.junit.Assert.assertNotNull(monthDay6);
        org.junit.Assert.assertNotNull(monthDay8);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(monthDay17);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "--01-01" + "'", str25, "--01-01");
        org.junit.Assert.assertNotNull(monthDay27);
        org.junit.Assert.assertNotNull(monthDay29);
        org.junit.Assert.assertNotNull(monthDay31);
        org.junit.Assert.assertNotNull(monthDay33);
        org.junit.Assert.assertNotNull(monthDay35);
        org.junit.Assert.assertNotNull(dateTimeFieldType37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNotNull(durationField40);
        org.junit.Assert.assertNotNull(monthDay42);
        org.junit.Assert.assertNotNull(monthDay44);
        org.junit.Assert.assertNotNull(monthDay46);
        org.junit.Assert.assertNotNull(monthDay48);
        org.junit.Assert.assertNotNull(dateTimeFieldType50);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "1" + "'", str54, "1");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "1" + "'", str55, "1");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "Property[dayOfMonth]" + "'", str56, "Property[dayOfMonth]");
        org.junit.Assert.assertNotNull(dateTimeFieldType57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
    }

    @Test
    public void test0591() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0591");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.MonthDay monthDay3 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MonthDay monthDay5 = monthDay3.withChronologyRetainFields(chronology4);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = monthDay3.getFieldType((int) (byte) 1);
        boolean boolean8 = monthDay1.isSupported(dateTimeFieldType7);
        org.joda.time.MonthDay monthDay10 = org.joda.time.MonthDay.parse("");
        org.joda.time.MonthDay monthDay12 = monthDay10.minusDays((int) '#');
        org.joda.time.MonthDay monthDay14 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MonthDay monthDay16 = monthDay14.withChronologyRetainFields(chronology15);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = monthDay14.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property19 = monthDay14.dayOfMonth();
        org.joda.time.Chronology chronology20 = monthDay14.getChronology();
        org.joda.time.Chronology chronology21 = monthDay14.getChronology();
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.DateTime dateTime23 = monthDay14.toDateTime(readableInstant22);
        org.joda.time.MonthDay monthDay25 = monthDay14.plusMonths((int) ' ');
        boolean boolean26 = monthDay10.isAfter((org.joda.time.ReadablePartial) monthDay25);
        boolean boolean27 = monthDay1.isBefore((org.joda.time.ReadablePartial) monthDay25);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.MonthDay monthDay29 = monthDay1.minus(readablePeriod28);
        org.joda.time.MonthDay monthDay31 = monthDay29.withMonthOfYear(12);
        org.joda.time.MonthDay monthDay33 = monthDay29.withDayOfMonth((int) (byte) 10);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(monthDay10);
        org.junit.Assert.assertNotNull(monthDay12);
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(monthDay25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(monthDay29);
        org.junit.Assert.assertNotNull(monthDay31);
        org.junit.Assert.assertNotNull(monthDay33);
    }

    @Test
    public void test0592() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0592");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        org.joda.time.MonthDay.Property property11 = monthDay3.monthOfYear();
        int int12 = monthDay3.getDayOfMonth();
        org.joda.time.MonthDay.Property property13 = monthDay3.dayOfMonth();
        int int14 = monthDay3.getDayOfMonth();
        org.joda.time.MonthDay monthDay16 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MonthDay monthDay18 = monthDay16.withChronologyRetainFields(chronology17);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = monthDay16.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property21 = monthDay16.dayOfMonth();
        org.joda.time.Chronology chronology22 = monthDay16.getChronology();
        org.joda.time.MonthDay monthDay23 = monthDay3.withChronologyRetainFields(chronology22);
        org.joda.time.MonthDay monthDay24 = new org.joda.time.MonthDay(chronology22);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.MonthDay monthDay26 = new org.joda.time.MonthDay(dateTimeZone25);
        org.joda.time.DateTimeField[] dateTimeFieldArray27 = monthDay26.getFields();
        org.joda.time.MonthDay monthDay29 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.MonthDay monthDay31 = monthDay29.withChronologyRetainFields(chronology30);
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = monthDay29.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property34 = monthDay29.dayOfMonth();
        org.joda.time.Chronology chronology35 = monthDay29.getChronology();
        org.joda.time.Chronology chronology36 = monthDay29.getChronology();
        org.joda.time.ReadableInstant readableInstant37 = null;
        org.joda.time.DateTime dateTime38 = monthDay29.toDateTime(readableInstant37);
        org.joda.time.MonthDay monthDay40 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.MonthDay monthDay42 = monthDay40.withChronologyRetainFields(chronology41);
        org.joda.time.DateTimeFieldType dateTimeFieldType44 = monthDay40.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod45 = null;
        org.joda.time.MonthDay monthDay46 = monthDay40.plus(readablePeriod45);
        org.joda.time.MonthDay monthDay48 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.MonthDay monthDay50 = monthDay48.withChronologyRetainFields(chronology49);
        org.joda.time.MonthDay monthDay52 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.MonthDay monthDay54 = monthDay52.withChronologyRetainFields(chronology53);
        org.joda.time.DateTimeFieldType dateTimeFieldType56 = monthDay52.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property57 = monthDay50.property(dateTimeFieldType56);
        int int58 = property57.get();
        org.joda.time.MonthDay monthDay60 = property57.addWrapFieldToCopy((int) (short) 1);
        boolean boolean61 = monthDay40.isBefore((org.joda.time.ReadablePartial) monthDay60);
        org.joda.time.DateTimeFieldType dateTimeFieldType63 = monthDay40.getFieldType(0);
        int int64 = monthDay29.get(dateTimeFieldType63);
        boolean boolean65 = monthDay26.isSupported(dateTimeFieldType63);
        org.joda.time.MonthDay.Property property66 = monthDay24.property(dateTimeFieldType63);
        java.lang.String str67 = property66.getAsText();
        org.joda.time.DurationField durationField68 = property66.getRangeDurationField();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(monthDay18);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(monthDay23);
        org.junit.Assert.assertNotNull(dateTimeFieldArray27);
        org.junit.Assert.assertNotNull(monthDay29);
        org.junit.Assert.assertNotNull(monthDay31);
        org.junit.Assert.assertNotNull(dateTimeFieldType33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(monthDay40);
        org.junit.Assert.assertNotNull(monthDay42);
        org.junit.Assert.assertNotNull(dateTimeFieldType44);
        org.junit.Assert.assertNotNull(monthDay46);
        org.junit.Assert.assertNotNull(monthDay48);
        org.junit.Assert.assertNotNull(monthDay50);
        org.junit.Assert.assertNotNull(monthDay52);
        org.junit.Assert.assertNotNull(monthDay54);
        org.junit.Assert.assertNotNull(dateTimeFieldType56);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertNotNull(monthDay60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(property66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "November" + "'", str67, "November");
        org.junit.Assert.assertNotNull(durationField68);
    }

    @Test
    public void test0593() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0593");
        org.joda.time.MonthDay monthDay2 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MonthDay monthDay4 = monthDay2.withChronologyRetainFields(chronology3);
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = monthDay2.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property7 = monthDay2.dayOfMonth();
        org.joda.time.Chronology chronology8 = monthDay2.getChronology();
        org.joda.time.MonthDay monthDay9 = new org.joda.time.MonthDay((-1L), chronology8);
        org.joda.time.MonthDay monthDay10 = new org.joda.time.MonthDay((java.lang.Object) monthDay9);
        org.joda.time.MonthDay monthDay12 = org.joda.time.MonthDay.parse("");
        org.joda.time.MonthDay monthDay14 = monthDay12.minusDays((int) '#');
        org.joda.time.MonthDay monthDay16 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MonthDay monthDay18 = monthDay16.withChronologyRetainFields(chronology17);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = monthDay16.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property21 = monthDay16.dayOfMonth();
        org.joda.time.Chronology chronology22 = monthDay16.getChronology();
        org.joda.time.Chronology chronology23 = monthDay16.getChronology();
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.DateTime dateTime25 = monthDay16.toDateTime(readableInstant24);
        org.joda.time.MonthDay monthDay27 = monthDay16.plusMonths((int) ' ');
        boolean boolean28 = monthDay12.isAfter((org.joda.time.ReadablePartial) monthDay27);
        org.joda.time.MonthDay monthDay30 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MonthDay monthDay32 = monthDay30.withChronologyRetainFields(chronology31);
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = monthDay30.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property35 = monthDay30.dayOfMonth();
        org.joda.time.MonthDay monthDay37 = property35.addWrapFieldToCopy(1);
        org.joda.time.MonthDay monthDay39 = property35.addWrapFieldToCopy(0);
        org.joda.time.MonthDay monthDay41 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.MonthDay monthDay43 = monthDay41.withChronologyRetainFields(chronology42);
        org.joda.time.MonthDay monthDay45 = monthDay41.minusMonths((int) (byte) -1);
        boolean boolean46 = property35.equals((java.lang.Object) monthDay45);
        int int47 = property35.getMaximumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType48 = property35.getFieldType();
        org.joda.time.MonthDay.Property property49 = monthDay27.property(dateTimeFieldType48);
        int int50 = monthDay10.indexOf(dateTimeFieldType48);
        // The following exception was thrown during execution in test generation
        try {
            int int52 = monthDay10.getValue((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay2);
        org.junit.Assert.assertNotNull(monthDay4);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(monthDay12);
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(monthDay18);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(monthDay27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(monthDay30);
        org.junit.Assert.assertNotNull(monthDay32);
        org.junit.Assert.assertNotNull(dateTimeFieldType34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(monthDay37);
        org.junit.Assert.assertNotNull(monthDay39);
        org.junit.Assert.assertNotNull(monthDay41);
        org.junit.Assert.assertNotNull(monthDay43);
        org.junit.Assert.assertNotNull(monthDay45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 31 + "'", int47 == 31);
        org.junit.Assert.assertNotNull(dateTimeFieldType48);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
    }

    @Test
    public void test0594() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0594");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        org.joda.time.MonthDay.Property property11 = monthDay3.monthOfYear();
        org.joda.time.DurationField durationField12 = property11.getRangeDurationField();
        org.joda.time.MonthDay monthDay14 = property11.setCopy("1");
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = property11.getFieldType();
        java.lang.String str16 = property11.getAsShortText();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Jan" + "'", str16, "Jan");
    }

    @Test
    public void test0595() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0595");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.MonthDay monthDay4 = monthDay1.withPeriodAdded(readablePeriod2, 1);
        org.joda.time.MonthDay monthDay6 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MonthDay monthDay8 = monthDay6.withChronologyRetainFields(chronology7);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = monthDay6.getFieldType((int) (byte) 1);
        int int11 = monthDay4.indexOf(dateTimeFieldType10);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MonthDay monthDay13 = monthDay4.withChronologyRetainFields(chronology12);
        org.joda.time.MonthDay monthDay15 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MonthDay monthDay17 = monthDay15.withChronologyRetainFields(chronology16);
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = monthDay15.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property20 = monthDay15.dayOfMonth();
        org.joda.time.Chronology chronology21 = monthDay15.getChronology();
        org.joda.time.Chronology chronology22 = monthDay15.getChronology();
        boolean boolean23 = monthDay4.isEqual((org.joda.time.ReadablePartial) monthDay15);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter24 = null;
        java.lang.String str25 = monthDay15.toString(dateTimeFormatter24);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MonthDay monthDay27 = monthDay15.withChronologyRetainFields(chronology26);
        int int28 = monthDay15.getDayOfMonth();
        org.joda.time.MonthDay.Property property29 = monthDay15.monthOfYear();
        java.util.Locale locale30 = null;
        int int31 = property29.getMaximumTextLength(locale30);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay4);
        org.junit.Assert.assertNotNull(monthDay6);
        org.junit.Assert.assertNotNull(monthDay8);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(monthDay17);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "--01-01" + "'", str25, "--01-01");
        org.junit.Assert.assertNotNull(monthDay27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 9 + "'", int31 == 9);
    }

    @Test
    public void test0596() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0596");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        org.joda.time.MonthDay.Property property11 = monthDay3.monthOfYear();
        java.util.Locale locale12 = null;
        int int13 = property11.getMaximumTextLength(locale12);
        int int14 = property11.getMaximumValue();
        org.joda.time.MonthDay monthDay16 = property11.addWrapFieldToCopy((int) '#');
        org.joda.time.MonthDay monthDay18 = property11.addWrapFieldToCopy(11);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 9 + "'", int13 == 9);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 12 + "'", int14 == 12);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(monthDay18);
    }

    @Test
    public void test0597() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0597");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        org.joda.time.MonthDay.Property property11 = monthDay3.monthOfYear();
        org.joda.time.MonthDay monthDay13 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MonthDay monthDay15 = monthDay13.withChronologyRetainFields(chronology14);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = monthDay13.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property18 = monthDay13.dayOfMonth();
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = property18.getFieldType();
        org.joda.time.MonthDay.Property property20 = monthDay3.property(dateTimeFieldType19);
        org.joda.time.MonthDay monthDay22 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MonthDay monthDay24 = monthDay22.withChronologyRetainFields(chronology23);
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = monthDay22.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.MonthDay monthDay28 = monthDay22.plus(readablePeriod27);
        org.joda.time.MonthDay monthDay30 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MonthDay monthDay32 = monthDay30.withChronologyRetainFields(chronology31);
        org.joda.time.MonthDay monthDay34 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.MonthDay monthDay36 = monthDay34.withChronologyRetainFields(chronology35);
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = monthDay34.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property39 = monthDay32.property(dateTimeFieldType38);
        int int40 = property39.get();
        org.joda.time.MonthDay monthDay42 = property39.addWrapFieldToCopy((int) (short) 1);
        boolean boolean43 = monthDay22.isBefore((org.joda.time.ReadablePartial) monthDay42);
        org.joda.time.MonthDay monthDay45 = monthDay42.minusMonths((int) (byte) 100);
        org.joda.time.MonthDay monthDay47 = monthDay45.minusDays(31);
        org.joda.time.MonthDay monthDay49 = org.joda.time.MonthDay.parse("");
        org.joda.time.ReadablePeriod readablePeriod50 = null;
        org.joda.time.MonthDay monthDay52 = monthDay49.withPeriodAdded(readablePeriod50, 1);
        org.joda.time.MonthDay monthDay54 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.MonthDay monthDay56 = monthDay54.withChronologyRetainFields(chronology55);
        org.joda.time.DateTimeFieldType dateTimeFieldType58 = monthDay54.getFieldType((int) (byte) 1);
        int int59 = monthDay52.indexOf(dateTimeFieldType58);
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.MonthDay monthDay61 = monthDay52.withChronologyRetainFields(chronology60);
        org.joda.time.MonthDay monthDay63 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.MonthDay monthDay65 = monthDay63.withChronologyRetainFields(chronology64);
        org.joda.time.DateTimeFieldType dateTimeFieldType67 = monthDay63.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod68 = null;
        org.joda.time.MonthDay monthDay69 = monthDay63.plus(readablePeriod68);
        org.joda.time.MonthDay monthDay71 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology72 = null;
        org.joda.time.MonthDay monthDay73 = monthDay71.withChronologyRetainFields(chronology72);
        org.joda.time.MonthDay monthDay75 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology76 = null;
        org.joda.time.MonthDay monthDay77 = monthDay75.withChronologyRetainFields(chronology76);
        org.joda.time.DateTimeFieldType dateTimeFieldType79 = monthDay75.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property80 = monthDay73.property(dateTimeFieldType79);
        int int81 = property80.get();
        org.joda.time.MonthDay monthDay83 = property80.addWrapFieldToCopy((int) (short) 1);
        boolean boolean84 = monthDay63.isBefore((org.joda.time.ReadablePartial) monthDay83);
        org.joda.time.Chronology chronology85 = null;
        org.joda.time.MonthDay monthDay86 = monthDay63.withChronologyRetainFields(chronology85);
        org.joda.time.Chronology chronology87 = monthDay86.getChronology();
        org.joda.time.MonthDay monthDay88 = monthDay61.withChronologyRetainFields(chronology87);
        org.joda.time.MonthDay monthDay89 = monthDay47.withChronologyRetainFields(chronology87);
        org.joda.time.Chronology chronology90 = monthDay89.getChronology();
        org.joda.time.MonthDay monthDay91 = monthDay3.withChronologyRetainFields(chronology90);
        int[] intArray92 = monthDay3.getValues();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(monthDay22);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertNotNull(monthDay28);
        org.junit.Assert.assertNotNull(monthDay30);
        org.junit.Assert.assertNotNull(monthDay32);
        org.junit.Assert.assertNotNull(monthDay34);
        org.junit.Assert.assertNotNull(monthDay36);
        org.junit.Assert.assertNotNull(dateTimeFieldType38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertNotNull(monthDay42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(monthDay45);
        org.junit.Assert.assertNotNull(monthDay47);
        org.junit.Assert.assertNotNull(monthDay49);
        org.junit.Assert.assertNotNull(monthDay52);
        org.junit.Assert.assertNotNull(monthDay54);
        org.junit.Assert.assertNotNull(monthDay56);
        org.junit.Assert.assertNotNull(dateTimeFieldType58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertNotNull(monthDay61);
        org.junit.Assert.assertNotNull(monthDay63);
        org.junit.Assert.assertNotNull(monthDay65);
        org.junit.Assert.assertNotNull(dateTimeFieldType67);
        org.junit.Assert.assertNotNull(monthDay69);
        org.junit.Assert.assertNotNull(monthDay71);
        org.junit.Assert.assertNotNull(monthDay73);
        org.junit.Assert.assertNotNull(monthDay75);
        org.junit.Assert.assertNotNull(monthDay77);
        org.junit.Assert.assertNotNull(dateTimeFieldType79);
        org.junit.Assert.assertNotNull(property80);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 1 + "'", int81 == 1);
        org.junit.Assert.assertNotNull(monthDay83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertNotNull(monthDay86);
        org.junit.Assert.assertNotNull(chronology87);
        org.junit.Assert.assertNotNull(monthDay88);
        org.junit.Assert.assertNotNull(monthDay89);
        org.junit.Assert.assertNotNull(chronology90);
        org.junit.Assert.assertNotNull(monthDay91);
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[1, 1]");
    }

    @Test
    public void test0598() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0598");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay monthDay7 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MonthDay monthDay9 = monthDay7.withChronologyRetainFields(chronology8);
        org.joda.time.MonthDay monthDay11 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MonthDay monthDay13 = monthDay11.withChronologyRetainFields(chronology12);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = monthDay11.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property16 = monthDay9.property(dateTimeFieldType15);
        int int17 = monthDay1.indexOf(dateTimeFieldType15);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.MonthDay monthDay19 = new org.joda.time.MonthDay(dateTimeZone18);
        org.joda.time.DateTimeField[] dateTimeFieldArray20 = monthDay19.getFields();
        org.joda.time.MonthDay monthDay22 = org.joda.time.MonthDay.parse("");
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.MonthDay monthDay25 = monthDay22.withPeriodAdded(readablePeriod23, 1);
        boolean boolean26 = monthDay19.isBefore((org.joda.time.ReadablePartial) monthDay22);
        boolean boolean27 = monthDay1.isAfter((org.joda.time.ReadablePartial) monthDay22);
        org.joda.time.MonthDay.Property property28 = monthDay22.dayOfMonth();
        org.joda.time.MonthDay monthDay30 = property28.addWrapFieldToCopy(31);
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = property28.getFieldType();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(monthDay9);
        org.junit.Assert.assertNotNull(monthDay11);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldArray20);
        org.junit.Assert.assertNotNull(monthDay22);
        org.junit.Assert.assertNotNull(monthDay25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(monthDay30);
        org.junit.Assert.assertNotNull(dateTimeFieldType31);
    }

    @Test
    public void test0599() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0599");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("--09-01");
        org.joda.time.MonthDay monthDay3 = monthDay1.plusMonths((-1));
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
    }

    @Test
    public void test0600() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0600");
        org.joda.time.MonthDay monthDay1 = new org.joda.time.MonthDay((long) (short) 1);
        org.joda.time.MonthDay monthDay3 = monthDay1.withDayOfMonth(1);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.MonthDay monthDay5 = monthDay1.plus(readablePeriod4);
        org.joda.time.MonthDay monthDay7 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MonthDay monthDay9 = monthDay7.withChronologyRetainFields(chronology8);
        org.joda.time.MonthDay monthDay11 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MonthDay monthDay13 = monthDay11.withChronologyRetainFields(chronology12);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = monthDay11.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property16 = monthDay9.property(dateTimeFieldType15);
        org.joda.time.MonthDay.Property property17 = monthDay9.monthOfYear();
        org.joda.time.MonthDay monthDay19 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MonthDay monthDay21 = monthDay19.withChronologyRetainFields(chronology20);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = monthDay19.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay monthDay25 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MonthDay monthDay27 = monthDay25.withChronologyRetainFields(chronology26);
        org.joda.time.MonthDay monthDay29 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.MonthDay monthDay31 = monthDay29.withChronologyRetainFields(chronology30);
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = monthDay29.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property34 = monthDay27.property(dateTimeFieldType33);
        int int35 = monthDay19.indexOf(dateTimeFieldType33);
        boolean boolean36 = monthDay9.equals((java.lang.Object) int35);
        org.joda.time.MonthDay monthDay38 = monthDay9.withMonthOfYear(9);
        org.joda.time.MonthDay monthDay40 = monthDay38.minusMonths(100);
        org.joda.time.DateTimeField dateTimeField42 = monthDay40.getField((int) (byte) 1);
        org.joda.time.MonthDay monthDay44 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.MonthDay monthDay46 = monthDay44.withChronologyRetainFields(chronology45);
        org.joda.time.MonthDay monthDay48 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.MonthDay monthDay50 = monthDay48.withChronologyRetainFields(chronology49);
        org.joda.time.DateTimeFieldType dateTimeFieldType52 = monthDay48.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property53 = monthDay46.property(dateTimeFieldType52);
        int int54 = property53.get();
        org.joda.time.DurationField durationField55 = property53.getDurationField();
        org.joda.time.MonthDay monthDay57 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.MonthDay monthDay59 = monthDay57.withChronologyRetainFields(chronology58);
        org.joda.time.MonthDay monthDay61 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.MonthDay monthDay63 = monthDay61.withChronologyRetainFields(chronology62);
        org.joda.time.DateTimeFieldType dateTimeFieldType65 = monthDay61.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property66 = monthDay59.property(dateTimeFieldType65);
        boolean boolean67 = property53.equals((java.lang.Object) monthDay59);
        int int68 = property53.getMinimumValueOverall();
        org.joda.time.DateTimeFieldType dateTimeFieldType69 = property53.getFieldType();
        int int70 = monthDay40.indexOf(dateTimeFieldType69);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay72 = monthDay5.withField(dateTimeFieldType69, (int) '4');
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 52 for dayOfMonth must be in the range [1,31]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(monthDay9);
        org.junit.Assert.assertNotNull(monthDay11);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(monthDay19);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertNotNull(monthDay25);
        org.junit.Assert.assertNotNull(monthDay27);
        org.junit.Assert.assertNotNull(monthDay29);
        org.junit.Assert.assertNotNull(monthDay31);
        org.junit.Assert.assertNotNull(dateTimeFieldType33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(monthDay38);
        org.junit.Assert.assertNotNull(monthDay40);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(monthDay44);
        org.junit.Assert.assertNotNull(monthDay46);
        org.junit.Assert.assertNotNull(monthDay48);
        org.junit.Assert.assertNotNull(monthDay50);
        org.junit.Assert.assertNotNull(dateTimeFieldType52);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertNotNull(durationField55);
        org.junit.Assert.assertNotNull(monthDay57);
        org.junit.Assert.assertNotNull(monthDay59);
        org.junit.Assert.assertNotNull(monthDay61);
        org.junit.Assert.assertNotNull(monthDay63);
        org.junit.Assert.assertNotNull(dateTimeFieldType65);
        org.junit.Assert.assertNotNull(property66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1 + "'", int68 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 1 + "'", int70 == 1);
    }

    @Test
    public void test0601() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0601");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property6 = monthDay1.dayOfMonth();
        org.joda.time.MonthDay monthDay8 = property6.addWrapFieldToCopy(1);
        org.joda.time.MonthDay monthDay10 = property6.addWrapFieldToCopy(0);
        java.util.Locale locale11 = null;
        int int12 = property6.getMaximumShortTextLength(locale11);
        java.util.Locale locale14 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay15 = property6.setCopy("--09-02", locale14);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"--09-02\" for dayOfMonth is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(monthDay8);
        org.junit.Assert.assertNotNull(monthDay10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
    }

    @Test
    public void test0602() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0602");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property6 = monthDay1.dayOfMonth();
        org.joda.time.Chronology chronology7 = monthDay1.getChronology();
        org.joda.time.Chronology chronology8 = monthDay1.getChronology();
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.DateTime dateTime10 = monthDay1.toDateTime(readableInstant9);
        org.joda.time.MonthDay monthDay12 = monthDay1.plusMonths((int) ' ');
        org.joda.time.MonthDay monthDay14 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MonthDay monthDay16 = monthDay14.withChronologyRetainFields(chronology15);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = monthDay14.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.MonthDay monthDay20 = monthDay14.plus(readablePeriod19);
        org.joda.time.MonthDay monthDay22 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MonthDay monthDay24 = monthDay22.withChronologyRetainFields(chronology23);
        org.joda.time.MonthDay monthDay26 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.MonthDay monthDay28 = monthDay26.withChronologyRetainFields(chronology27);
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = monthDay26.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property31 = monthDay24.property(dateTimeFieldType30);
        int int32 = property31.get();
        org.joda.time.MonthDay monthDay34 = property31.addWrapFieldToCopy((int) (short) 1);
        boolean boolean35 = monthDay14.isBefore((org.joda.time.ReadablePartial) monthDay34);
        org.joda.time.MonthDay monthDay37 = monthDay34.minusMonths((int) (byte) 100);
        org.joda.time.MonthDay monthDay39 = monthDay37.plusMonths(1);
        org.joda.time.ReadablePeriod readablePeriod40 = null;
        org.joda.time.MonthDay monthDay41 = monthDay37.minus(readablePeriod40);
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.MonthDay monthDay43 = new org.joda.time.MonthDay(dateTimeZone42);
        boolean boolean44 = monthDay41.isEqual((org.joda.time.ReadablePartial) monthDay43);
        boolean boolean45 = monthDay1.equals((java.lang.Object) monthDay41);
        org.joda.time.MonthDay.Property property46 = monthDay41.dayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod47 = null;
        org.joda.time.MonthDay monthDay48 = monthDay41.plus(readablePeriod47);
        org.joda.time.MonthDay monthDay50 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.MonthDay monthDay52 = monthDay50.withChronologyRetainFields(chronology51);
        org.joda.time.DateTimeFieldType dateTimeFieldType54 = monthDay50.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod55 = null;
        org.joda.time.MonthDay monthDay56 = monthDay50.plus(readablePeriod55);
        org.joda.time.MonthDay monthDay58 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.MonthDay monthDay60 = monthDay58.withChronologyRetainFields(chronology59);
        org.joda.time.MonthDay monthDay62 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.MonthDay monthDay64 = monthDay62.withChronologyRetainFields(chronology63);
        org.joda.time.DateTimeFieldType dateTimeFieldType66 = monthDay62.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property67 = monthDay60.property(dateTimeFieldType66);
        int int68 = property67.get();
        org.joda.time.MonthDay monthDay70 = property67.addWrapFieldToCopy((int) (short) 1);
        boolean boolean71 = monthDay50.isBefore((org.joda.time.ReadablePartial) monthDay70);
        org.joda.time.MonthDay monthDay73 = monthDay70.minusMonths((int) (byte) 100);
        int int74 = monthDay73.getMonthOfYear();
        org.joda.time.MonthDay monthDay76 = monthDay73.withMonthOfYear(1);
        org.joda.time.ReadablePeriod readablePeriod77 = null;
        org.joda.time.MonthDay monthDay78 = monthDay73.plus(readablePeriod77);
        org.joda.time.MonthDay monthDay80 = monthDay78.withMonthOfYear(9);
        boolean boolean81 = monthDay48.equals((java.lang.Object) monthDay80);
        org.joda.time.ReadablePartial readablePartial82 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int83 = monthDay80.compareTo(readablePartial82);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(monthDay12);
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(monthDay20);
        org.junit.Assert.assertNotNull(monthDay22);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertNotNull(monthDay26);
        org.junit.Assert.assertNotNull(monthDay28);
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(monthDay34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(monthDay37);
        org.junit.Assert.assertNotNull(monthDay39);
        org.junit.Assert.assertNotNull(monthDay41);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(monthDay48);
        org.junit.Assert.assertNotNull(monthDay50);
        org.junit.Assert.assertNotNull(monthDay52);
        org.junit.Assert.assertNotNull(dateTimeFieldType54);
        org.junit.Assert.assertNotNull(monthDay56);
        org.junit.Assert.assertNotNull(monthDay58);
        org.junit.Assert.assertNotNull(monthDay60);
        org.junit.Assert.assertNotNull(monthDay62);
        org.junit.Assert.assertNotNull(monthDay64);
        org.junit.Assert.assertNotNull(dateTimeFieldType66);
        org.junit.Assert.assertNotNull(property67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1 + "'", int68 == 1);
        org.junit.Assert.assertNotNull(monthDay70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(monthDay73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 9 + "'", int74 == 9);
        org.junit.Assert.assertNotNull(monthDay76);
        org.junit.Assert.assertNotNull(monthDay78);
        org.junit.Assert.assertNotNull(monthDay80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
    }

    @Test
    public void test0603() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0603");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay1.plus(readablePeriod6);
        org.joda.time.MonthDay monthDay9 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MonthDay monthDay11 = monthDay9.withChronologyRetainFields(chronology10);
        org.joda.time.MonthDay monthDay13 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MonthDay monthDay15 = monthDay13.withChronologyRetainFields(chronology14);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = monthDay13.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property18 = monthDay11.property(dateTimeFieldType17);
        int int19 = property18.get();
        org.joda.time.MonthDay monthDay21 = property18.addWrapFieldToCopy((int) (short) 1);
        boolean boolean22 = monthDay1.isBefore((org.joda.time.ReadablePartial) monthDay21);
        org.joda.time.MonthDay monthDay24 = monthDay21.minusMonths((int) (byte) 100);
        org.joda.time.MonthDay monthDay26 = monthDay24.plusMonths(1);
        int int27 = monthDay26.getDayOfMonth();
        org.joda.time.DateTimeField[] dateTimeFieldArray28 = monthDay26.getFields();
        org.joda.time.MonthDay monthDay30 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MonthDay monthDay32 = monthDay30.withChronologyRetainFields(chronology31);
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = monthDay30.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod35 = null;
        org.joda.time.MonthDay monthDay36 = monthDay30.plus(readablePeriod35);
        org.joda.time.MonthDay monthDay38 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.MonthDay monthDay40 = monthDay38.withChronologyRetainFields(chronology39);
        org.joda.time.MonthDay monthDay42 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.MonthDay monthDay44 = monthDay42.withChronologyRetainFields(chronology43);
        org.joda.time.DateTimeFieldType dateTimeFieldType46 = monthDay42.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property47 = monthDay40.property(dateTimeFieldType46);
        int int48 = property47.get();
        org.joda.time.MonthDay monthDay50 = property47.addWrapFieldToCopy((int) (short) 1);
        boolean boolean51 = monthDay30.isBefore((org.joda.time.ReadablePartial) monthDay50);
        org.joda.time.MonthDay monthDay53 = monthDay50.minusMonths((int) (byte) 100);
        org.joda.time.MonthDay monthDay55 = org.joda.time.MonthDay.parse("");
        org.joda.time.MonthDay monthDay57 = monthDay55.minusDays((int) '#');
        boolean boolean58 = monthDay53.isBefore((org.joda.time.ReadablePartial) monthDay57);
        org.joda.time.MonthDay monthDay60 = monthDay57.plusMonths((int) (byte) 1);
        boolean boolean61 = monthDay26.isAfter((org.joda.time.ReadablePartial) monthDay60);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(monthDay9);
        org.junit.Assert.assertNotNull(monthDay11);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertNotNull(monthDay26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2 + "'", int27 == 2);
        org.junit.Assert.assertNotNull(dateTimeFieldArray28);
        org.junit.Assert.assertNotNull(monthDay30);
        org.junit.Assert.assertNotNull(monthDay32);
        org.junit.Assert.assertNotNull(dateTimeFieldType34);
        org.junit.Assert.assertNotNull(monthDay36);
        org.junit.Assert.assertNotNull(monthDay38);
        org.junit.Assert.assertNotNull(monthDay40);
        org.junit.Assert.assertNotNull(monthDay42);
        org.junit.Assert.assertNotNull(monthDay44);
        org.junit.Assert.assertNotNull(dateTimeFieldType46);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertNotNull(monthDay50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(monthDay53);
        org.junit.Assert.assertNotNull(monthDay55);
        org.junit.Assert.assertNotNull(monthDay57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(monthDay60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
    }

    @Test
    public void test0604() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0604");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        java.util.Locale locale11 = null;
        int int12 = property10.getMaximumTextLength(locale11);
        int int13 = property10.getMinimumValue();
        org.joda.time.MonthDay monthDay15 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MonthDay monthDay17 = monthDay15.withChronologyRetainFields(chronology16);
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = monthDay15.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay monthDay21 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.MonthDay monthDay23 = monthDay21.withChronologyRetainFields(chronology22);
        org.joda.time.MonthDay monthDay25 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MonthDay monthDay27 = monthDay25.withChronologyRetainFields(chronology26);
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = monthDay25.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property30 = monthDay23.property(dateTimeFieldType29);
        int int31 = monthDay15.indexOf(dateTimeFieldType29);
        org.joda.time.MonthDay monthDay33 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MonthDay monthDay35 = monthDay33.withChronologyRetainFields(chronology34);
        org.joda.time.MonthDay monthDay37 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.MonthDay monthDay39 = monthDay37.withChronologyRetainFields(chronology38);
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = monthDay37.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property42 = monthDay35.property(dateTimeFieldType41);
        int int43 = property42.get();
        org.joda.time.MonthDay monthDay45 = property42.addToCopy((int) (short) 0);
        org.joda.time.MonthDay monthDay47 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.MonthDay monthDay49 = monthDay47.withChronologyRetainFields(chronology48);
        org.joda.time.MonthDay monthDay51 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.MonthDay monthDay53 = monthDay51.withChronologyRetainFields(chronology52);
        org.joda.time.DateTimeFieldType dateTimeFieldType55 = monthDay51.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property56 = monthDay49.property(dateTimeFieldType55);
        int int57 = property56.get();
        org.joda.time.DurationField durationField58 = property56.getDurationField();
        java.util.Locale locale59 = null;
        int int60 = property56.getMaximumTextLength(locale59);
        org.joda.time.MonthDay monthDay62 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.MonthDay monthDay64 = monthDay62.withChronologyRetainFields(chronology63);
        org.joda.time.DateTimeFieldType dateTimeFieldType66 = monthDay62.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property67 = monthDay62.dayOfMonth();
        org.joda.time.Chronology chronology68 = monthDay62.getChronology();
        org.joda.time.Chronology chronology69 = monthDay62.getChronology();
        org.joda.time.ReadableInstant readableInstant70 = null;
        org.joda.time.DateTime dateTime71 = monthDay62.toDateTime(readableInstant70);
        int int72 = property56.compareTo((org.joda.time.ReadableInstant) dateTime71);
        int int73 = property42.compareTo((org.joda.time.ReadableInstant) dateTime71);
        org.joda.time.DateTime dateTime74 = monthDay15.toDateTime((org.joda.time.ReadableInstant) dateTime71);
        int int75 = property10.compareTo((org.joda.time.ReadableInstant) dateTime71);
        java.util.Locale locale76 = null;
        java.lang.String str77 = property10.getAsText(locale76);
        org.joda.time.DateTimeFieldType dateTimeFieldType78 = property10.getFieldType();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(monthDay17);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertNotNull(monthDay23);
        org.junit.Assert.assertNotNull(monthDay25);
        org.junit.Assert.assertNotNull(monthDay27);
        org.junit.Assert.assertNotNull(dateTimeFieldType29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertNotNull(monthDay33);
        org.junit.Assert.assertNotNull(monthDay35);
        org.junit.Assert.assertNotNull(monthDay37);
        org.junit.Assert.assertNotNull(monthDay39);
        org.junit.Assert.assertNotNull(dateTimeFieldType41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertNotNull(monthDay45);
        org.junit.Assert.assertNotNull(monthDay47);
        org.junit.Assert.assertNotNull(monthDay49);
        org.junit.Assert.assertNotNull(monthDay51);
        org.junit.Assert.assertNotNull(monthDay53);
        org.junit.Assert.assertNotNull(dateTimeFieldType55);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertNotNull(durationField58);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 2 + "'", int60 == 2);
        org.junit.Assert.assertNotNull(monthDay62);
        org.junit.Assert.assertNotNull(monthDay64);
        org.junit.Assert.assertNotNull(dateTimeFieldType66);
        org.junit.Assert.assertNotNull(property67);
        org.junit.Assert.assertNotNull(chronology68);
        org.junit.Assert.assertNotNull(chronology69);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "1" + "'", str77, "1");
        org.junit.Assert.assertNotNull(dateTimeFieldType78);
    }

    @Test
    public void test0605() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0605");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay1.plus(readablePeriod6);
        org.joda.time.MonthDay monthDay9 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MonthDay monthDay11 = monthDay9.withChronologyRetainFields(chronology10);
        org.joda.time.MonthDay monthDay13 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MonthDay monthDay15 = monthDay13.withChronologyRetainFields(chronology14);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = monthDay13.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property18 = monthDay11.property(dateTimeFieldType17);
        int int19 = property18.get();
        org.joda.time.MonthDay monthDay21 = property18.addWrapFieldToCopy((int) (short) 1);
        boolean boolean22 = monthDay1.isBefore((org.joda.time.ReadablePartial) monthDay21);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MonthDay monthDay24 = monthDay1.withChronologyRetainFields(chronology23);
        org.joda.time.Chronology chronology25 = monthDay24.getChronology();
        java.lang.String str26 = monthDay24.toString();
        org.joda.time.MonthDay monthDay28 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MonthDay monthDay30 = monthDay28.withChronologyRetainFields(chronology29);
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = monthDay28.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property33 = monthDay28.dayOfMonth();
        org.joda.time.MonthDay monthDay35 = property33.addWrapFieldToCopy(1);
        org.joda.time.MonthDay monthDay37 = property33.addWrapFieldToCopy(0);
        boolean boolean38 = monthDay24.isBefore((org.joda.time.ReadablePartial) monthDay37);
        org.joda.time.MonthDay monthDay40 = monthDay24.plusDays(11);
        org.joda.time.MonthDay monthDay42 = monthDay24.plusDays((-1));
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(monthDay9);
        org.junit.Assert.assertNotNull(monthDay11);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "--01-01" + "'", str26, "--01-01");
        org.junit.Assert.assertNotNull(monthDay28);
        org.junit.Assert.assertNotNull(monthDay30);
        org.junit.Assert.assertNotNull(dateTimeFieldType32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(monthDay35);
        org.junit.Assert.assertNotNull(monthDay37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(monthDay40);
        org.junit.Assert.assertNotNull(monthDay42);
    }

    @Test
    public void test0606() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0606");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        int int11 = property10.get();
        org.joda.time.MonthDay monthDay13 = property10.addWrapFieldToCopy((int) (short) 1);
        java.lang.String str14 = property10.getAsString();
        java.lang.String str15 = property10.getAsText();
        org.joda.time.MonthDay monthDay16 = property10.getMonthDay();
        java.util.Locale locale17 = null;
        java.lang.String str18 = property10.getAsShortText(locale17);
        java.lang.String str19 = property10.toString();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "1" + "'", str14, "1");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "1" + "'", str15, "1");
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "1" + "'", str18, "1");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Property[dayOfMonth]" + "'", str19, "Property[dayOfMonth]");
    }

    @Test
    public void test0607() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0607");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.MonthDay monthDay4 = monthDay1.withPeriodAdded(readablePeriod2, 1);
        org.joda.time.MonthDay monthDay6 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MonthDay monthDay8 = monthDay6.withChronologyRetainFields(chronology7);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = monthDay6.getFieldType((int) (byte) 1);
        int int11 = monthDay4.indexOf(dateTimeFieldType10);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MonthDay monthDay13 = monthDay4.withChronologyRetainFields(chronology12);
        org.joda.time.MonthDay monthDay15 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MonthDay monthDay17 = monthDay15.withChronologyRetainFields(chronology16);
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = monthDay15.getFieldType((int) (byte) 1);
        int int20 = monthDay4.get(dateTimeFieldType19);
        org.joda.time.MonthDay monthDay22 = monthDay4.plusDays(0);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay23 = new org.joda.time.MonthDay((java.lang.Object) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: java.lang.Integer");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay4);
        org.junit.Assert.assertNotNull(monthDay6);
        org.junit.Assert.assertNotNull(monthDay8);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(monthDay17);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(monthDay22);
    }

    @Test
    public void test0608() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0608");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.MonthDay monthDay1 = new org.joda.time.MonthDay(dateTimeZone0);
        org.joda.time.DateTimeField[] dateTimeFieldArray2 = monthDay1.getFields();
        org.joda.time.MonthDay monthDay4 = org.joda.time.MonthDay.parse("");
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.MonthDay monthDay7 = monthDay4.withPeriodAdded(readablePeriod5, 1);
        boolean boolean8 = monthDay1.isBefore((org.joda.time.ReadablePartial) monthDay4);
        org.joda.time.MonthDay monthDay10 = monthDay1.plusDays((int) (short) -1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = null;
        java.lang.String str12 = monthDay10.toString(dateTimeFormatter11);
        java.lang.String str13 = monthDay10.toString();
        int int14 = monthDay10.getMonthOfYear();
        org.joda.time.MonthDay monthDay16 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MonthDay monthDay18 = monthDay16.withChronologyRetainFields(chronology17);
        org.joda.time.MonthDay monthDay20 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.MonthDay monthDay22 = monthDay20.withChronologyRetainFields(chronology21);
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = monthDay20.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property25 = monthDay18.property(dateTimeFieldType24);
        int int26 = property25.get();
        org.joda.time.DurationField durationField27 = property25.getDurationField();
        org.joda.time.MonthDay monthDay29 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.MonthDay monthDay31 = monthDay29.withChronologyRetainFields(chronology30);
        org.joda.time.MonthDay monthDay33 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MonthDay monthDay35 = monthDay33.withChronologyRetainFields(chronology34);
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = monthDay33.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property38 = monthDay31.property(dateTimeFieldType37);
        boolean boolean39 = property25.equals((java.lang.Object) monthDay31);
        org.joda.time.DateTimeField dateTimeField40 = property25.getField();
        int int41 = property25.getMaximumValueOverall();
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = property25.getFieldType();
        org.joda.time.MonthDay monthDay44 = monthDay10.withField(dateTimeFieldType42, 1);
        org.joda.time.MonthDay monthDay46 = monthDay44.minusDays((int) ' ');
        org.junit.Assert.assertNotNull(dateTimeFieldArray2);
        org.junit.Assert.assertNotNull(monthDay4);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(monthDay10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "--11-24" + "'", str12, "--11-24");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "--11-24" + "'", str13, "--11-24");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 11 + "'", int14 == 11);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(monthDay18);
        org.junit.Assert.assertNotNull(monthDay20);
        org.junit.Assert.assertNotNull(monthDay22);
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(monthDay29);
        org.junit.Assert.assertNotNull(monthDay31);
        org.junit.Assert.assertNotNull(monthDay33);
        org.junit.Assert.assertNotNull(monthDay35);
        org.junit.Assert.assertNotNull(dateTimeFieldType37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 31 + "'", int41 == 31);
        org.junit.Assert.assertNotNull(dateTimeFieldType42);
        org.junit.Assert.assertNotNull(monthDay44);
        org.junit.Assert.assertNotNull(monthDay46);
    }

    @Test
    public void test0609() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0609");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay1.plus(readablePeriod6);
        org.joda.time.MonthDay monthDay9 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MonthDay monthDay11 = monthDay9.withChronologyRetainFields(chronology10);
        org.joda.time.MonthDay monthDay13 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MonthDay monthDay15 = monthDay13.withChronologyRetainFields(chronology14);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = monthDay13.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property18 = monthDay11.property(dateTimeFieldType17);
        int int19 = property18.get();
        org.joda.time.MonthDay monthDay21 = property18.addWrapFieldToCopy((int) (short) 1);
        boolean boolean22 = monthDay1.isBefore((org.joda.time.ReadablePartial) monthDay21);
        org.joda.time.MonthDay monthDay24 = monthDay21.minusMonths((int) (byte) 100);
        org.joda.time.MonthDay monthDay26 = monthDay24.plusMonths(1);
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.MonthDay monthDay28 = monthDay24.minus(readablePeriod27);
        int int29 = monthDay28.size();
        org.joda.time.MonthDay.Property property30 = monthDay28.monthOfYear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay32 = property30.setCopy("dayOfMonth");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"dayOfMonth\" for monthOfYear is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(monthDay9);
        org.junit.Assert.assertNotNull(monthDay11);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertNotNull(monthDay26);
        org.junit.Assert.assertNotNull(monthDay28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2 + "'", int29 == 2);
        org.junit.Assert.assertNotNull(property30);
    }

    @Test
    public void test0610() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0610");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        int int11 = property10.get();
        org.joda.time.DurationField durationField12 = property10.getDurationField();
        org.joda.time.MonthDay monthDay14 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MonthDay monthDay16 = monthDay14.withChronologyRetainFields(chronology15);
        org.joda.time.MonthDay monthDay18 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MonthDay monthDay20 = monthDay18.withChronologyRetainFields(chronology19);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = monthDay18.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property23 = monthDay16.property(dateTimeFieldType22);
        boolean boolean24 = property10.equals((java.lang.Object) monthDay16);
        java.lang.String str25 = property10.getAsShortText();
        java.lang.String str26 = property10.toString();
        java.lang.String str27 = property10.getAsShortText();
        java.lang.String str28 = property10.toString();
        org.joda.time.MonthDay monthDay30 = property10.setCopy("2");
        int int31 = property10.getMinimumValueOverall();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(monthDay18);
        org.junit.Assert.assertNotNull(monthDay20);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "1" + "'", str25, "1");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Property[dayOfMonth]" + "'", str26, "Property[dayOfMonth]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "1" + "'", str27, "1");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Property[dayOfMonth]" + "'", str28, "Property[dayOfMonth]");
        org.junit.Assert.assertNotNull(monthDay30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
    }

    @Test
    public void test0611() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0611");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property6 = monthDay1.dayOfMonth();
        org.joda.time.MonthDay monthDay8 = property6.addWrapFieldToCopy(1);
        java.util.Locale locale9 = null;
        java.lang.String str10 = property6.getAsText(locale9);
        java.util.Locale locale11 = null;
        java.lang.String str12 = property6.getAsText(locale11);
        org.joda.time.MonthDay monthDay14 = property6.setCopy((int) (byte) 1);
        org.joda.time.DateTimeField dateTimeField15 = property6.getField();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(monthDay8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1" + "'", str10, "1");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "1" + "'", str12, "1");
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertNotNull(dateTimeField15);
    }

    @Test
    public void test0612() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0612");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay1.plus(readablePeriod6);
        org.joda.time.MonthDay monthDay9 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MonthDay monthDay11 = monthDay9.withChronologyRetainFields(chronology10);
        org.joda.time.MonthDay monthDay13 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MonthDay monthDay15 = monthDay13.withChronologyRetainFields(chronology14);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = monthDay13.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property18 = monthDay11.property(dateTimeFieldType17);
        int int19 = property18.get();
        org.joda.time.MonthDay monthDay21 = property18.addWrapFieldToCopy((int) (short) 1);
        boolean boolean22 = monthDay1.isBefore((org.joda.time.ReadablePartial) monthDay21);
        org.joda.time.MonthDay monthDay24 = monthDay21.minusMonths((int) (byte) 100);
        org.joda.time.MonthDay monthDay26 = monthDay24.minusDays(31);
        org.joda.time.MonthDay monthDay28 = org.joda.time.MonthDay.parse("");
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        org.joda.time.MonthDay monthDay31 = monthDay28.withPeriodAdded(readablePeriod29, 1);
        org.joda.time.MonthDay monthDay33 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MonthDay monthDay35 = monthDay33.withChronologyRetainFields(chronology34);
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = monthDay33.getFieldType((int) (byte) 1);
        int int38 = monthDay31.indexOf(dateTimeFieldType37);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.MonthDay monthDay40 = monthDay31.withChronologyRetainFields(chronology39);
        org.joda.time.MonthDay monthDay42 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.MonthDay monthDay44 = monthDay42.withChronologyRetainFields(chronology43);
        org.joda.time.DateTimeFieldType dateTimeFieldType46 = monthDay42.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod47 = null;
        org.joda.time.MonthDay monthDay48 = monthDay42.plus(readablePeriod47);
        org.joda.time.MonthDay monthDay50 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.MonthDay monthDay52 = monthDay50.withChronologyRetainFields(chronology51);
        org.joda.time.MonthDay monthDay54 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.MonthDay monthDay56 = monthDay54.withChronologyRetainFields(chronology55);
        org.joda.time.DateTimeFieldType dateTimeFieldType58 = monthDay54.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property59 = monthDay52.property(dateTimeFieldType58);
        int int60 = property59.get();
        org.joda.time.MonthDay monthDay62 = property59.addWrapFieldToCopy((int) (short) 1);
        boolean boolean63 = monthDay42.isBefore((org.joda.time.ReadablePartial) monthDay62);
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.MonthDay monthDay65 = monthDay42.withChronologyRetainFields(chronology64);
        org.joda.time.Chronology chronology66 = monthDay65.getChronology();
        org.joda.time.MonthDay monthDay67 = monthDay40.withChronologyRetainFields(chronology66);
        org.joda.time.MonthDay monthDay68 = monthDay26.withChronologyRetainFields(chronology66);
        org.joda.time.Chronology chronology69 = monthDay68.getChronology();
        org.joda.time.MonthDay monthDay70 = org.joda.time.MonthDay.now(chronology69);
        org.joda.time.MonthDay monthDay71 = new org.joda.time.MonthDay(chronology69);
        org.joda.time.MonthDay monthDay72 = new org.joda.time.MonthDay(chronology69);
        org.joda.time.ReadablePartial readablePartial73 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean74 = monthDay72.isEqual(readablePartial73);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Partial cannot be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(monthDay9);
        org.junit.Assert.assertNotNull(monthDay11);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertNotNull(monthDay26);
        org.junit.Assert.assertNotNull(monthDay28);
        org.junit.Assert.assertNotNull(monthDay31);
        org.junit.Assert.assertNotNull(monthDay33);
        org.junit.Assert.assertNotNull(monthDay35);
        org.junit.Assert.assertNotNull(dateTimeFieldType37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(monthDay40);
        org.junit.Assert.assertNotNull(monthDay42);
        org.junit.Assert.assertNotNull(monthDay44);
        org.junit.Assert.assertNotNull(dateTimeFieldType46);
        org.junit.Assert.assertNotNull(monthDay48);
        org.junit.Assert.assertNotNull(monthDay50);
        org.junit.Assert.assertNotNull(monthDay52);
        org.junit.Assert.assertNotNull(monthDay54);
        org.junit.Assert.assertNotNull(monthDay56);
        org.junit.Assert.assertNotNull(dateTimeFieldType58);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
        org.junit.Assert.assertNotNull(monthDay62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(monthDay65);
        org.junit.Assert.assertNotNull(chronology66);
        org.junit.Assert.assertNotNull(monthDay67);
        org.junit.Assert.assertNotNull(monthDay68);
        org.junit.Assert.assertNotNull(chronology69);
        org.junit.Assert.assertNotNull(monthDay70);
    }

    @Test
    public void test0613() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0613");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.MonthDay monthDay1 = new org.joda.time.MonthDay(dateTimeZone0);
        org.joda.time.MonthDay monthDay3 = monthDay1.minusDays(100);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.MonthDay monthDay11 = monthDay5.plus(readablePeriod10);
        org.joda.time.MonthDay monthDay13 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MonthDay monthDay15 = monthDay13.withChronologyRetainFields(chronology14);
        org.joda.time.MonthDay monthDay17 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.MonthDay monthDay19 = monthDay17.withChronologyRetainFields(chronology18);
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = monthDay17.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property22 = monthDay15.property(dateTimeFieldType21);
        int int23 = property22.get();
        org.joda.time.MonthDay monthDay25 = property22.addWrapFieldToCopy((int) (short) 1);
        boolean boolean26 = monthDay5.isBefore((org.joda.time.ReadablePartial) monthDay25);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.MonthDay monthDay28 = monthDay5.withChronologyRetainFields(chronology27);
        org.joda.time.MonthDay monthDay30 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MonthDay monthDay32 = monthDay30.withChronologyRetainFields(chronology31);
        org.joda.time.MonthDay monthDay34 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.MonthDay monthDay36 = monthDay34.withChronologyRetainFields(chronology35);
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = monthDay34.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property39 = monthDay32.property(dateTimeFieldType38);
        org.joda.time.MonthDay.Property property40 = monthDay32.monthOfYear();
        int int41 = monthDay32.getDayOfMonth();
        org.joda.time.MonthDay.Property property42 = monthDay32.dayOfMonth();
        int int43 = monthDay32.getDayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod44 = null;
        org.joda.time.MonthDay monthDay45 = monthDay32.plus(readablePeriod44);
        boolean boolean46 = monthDay28.isBefore((org.joda.time.ReadablePartial) monthDay32);
        org.joda.time.MonthDay monthDay48 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.MonthDay monthDay50 = monthDay48.withChronologyRetainFields(chronology49);
        org.joda.time.MonthDay monthDay52 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.MonthDay monthDay54 = monthDay52.withChronologyRetainFields(chronology53);
        org.joda.time.DateTimeFieldType dateTimeFieldType56 = monthDay52.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property57 = monthDay50.property(dateTimeFieldType56);
        int int58 = property57.get();
        org.joda.time.MonthDay monthDay60 = property57.addToCopy((int) (short) 0);
        org.joda.time.MonthDay monthDay62 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.MonthDay monthDay64 = monthDay62.withChronologyRetainFields(chronology63);
        org.joda.time.MonthDay monthDay66 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.MonthDay monthDay68 = monthDay66.withChronologyRetainFields(chronology67);
        org.joda.time.DateTimeFieldType dateTimeFieldType70 = monthDay66.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property71 = monthDay64.property(dateTimeFieldType70);
        int int72 = property71.get();
        org.joda.time.DurationField durationField73 = property71.getDurationField();
        java.util.Locale locale74 = null;
        int int75 = property71.getMaximumTextLength(locale74);
        org.joda.time.MonthDay monthDay77 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology78 = null;
        org.joda.time.MonthDay monthDay79 = monthDay77.withChronologyRetainFields(chronology78);
        org.joda.time.DateTimeFieldType dateTimeFieldType81 = monthDay77.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property82 = monthDay77.dayOfMonth();
        org.joda.time.Chronology chronology83 = monthDay77.getChronology();
        org.joda.time.Chronology chronology84 = monthDay77.getChronology();
        org.joda.time.ReadableInstant readableInstant85 = null;
        org.joda.time.DateTime dateTime86 = monthDay77.toDateTime(readableInstant85);
        int int87 = property71.compareTo((org.joda.time.ReadableInstant) dateTime86);
        int int88 = property57.compareTo((org.joda.time.ReadableInstant) dateTime86);
        org.joda.time.DateTime dateTime89 = monthDay28.toDateTime((org.joda.time.ReadableInstant) dateTime86);
        org.joda.time.DateTime dateTime90 = monthDay3.toDateTime((org.joda.time.ReadableInstant) dateTime89);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(monthDay11);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(monthDay17);
        org.junit.Assert.assertNotNull(monthDay19);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(monthDay25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(monthDay28);
        org.junit.Assert.assertNotNull(monthDay30);
        org.junit.Assert.assertNotNull(monthDay32);
        org.junit.Assert.assertNotNull(monthDay34);
        org.junit.Assert.assertNotNull(monthDay36);
        org.junit.Assert.assertNotNull(dateTimeFieldType38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertNotNull(monthDay45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(monthDay48);
        org.junit.Assert.assertNotNull(monthDay50);
        org.junit.Assert.assertNotNull(monthDay52);
        org.junit.Assert.assertNotNull(monthDay54);
        org.junit.Assert.assertNotNull(dateTimeFieldType56);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertNotNull(monthDay60);
        org.junit.Assert.assertNotNull(monthDay62);
        org.junit.Assert.assertNotNull(monthDay64);
        org.junit.Assert.assertNotNull(monthDay66);
        org.junit.Assert.assertNotNull(monthDay68);
        org.junit.Assert.assertNotNull(dateTimeFieldType70);
        org.junit.Assert.assertNotNull(property71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 1 + "'", int72 == 1);
        org.junit.Assert.assertNotNull(durationField73);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 2 + "'", int75 == 2);
        org.junit.Assert.assertNotNull(monthDay77);
        org.junit.Assert.assertNotNull(monthDay79);
        org.junit.Assert.assertNotNull(dateTimeFieldType81);
        org.junit.Assert.assertNotNull(property82);
        org.junit.Assert.assertNotNull(chronology83);
        org.junit.Assert.assertNotNull(chronology84);
        org.junit.Assert.assertNotNull(dateTime86);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 0 + "'", int88 == 0);
        org.junit.Assert.assertNotNull(dateTime89);
        org.junit.Assert.assertNotNull(dateTime90);
    }

    @Test
    public void test0614() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0614");
        org.joda.time.MonthDay monthDay1 = new org.joda.time.MonthDay((long) 11);
    }

    @Test
    public void test0615() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0615");
        org.joda.time.MonthDay monthDay0 = org.joda.time.MonthDay.now();
        org.joda.time.ReadablePeriod readablePeriod1 = null;
        org.joda.time.MonthDay monthDay2 = monthDay0.plus(readablePeriod1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MonthDay monthDay4 = new org.joda.time.MonthDay((java.lang.Object) monthDay0, chronology3);
        org.joda.time.MonthDay monthDay6 = org.joda.time.MonthDay.parse("");
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.MonthDay monthDay9 = monthDay6.withPeriodAdded(readablePeriod7, 1);
        org.joda.time.MonthDay monthDay11 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MonthDay monthDay13 = monthDay11.withChronologyRetainFields(chronology12);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = monthDay11.getFieldType((int) (byte) 1);
        int int16 = monthDay9.indexOf(dateTimeFieldType15);
        int int17 = monthDay4.indexOf(dateTimeFieldType15);
        org.joda.time.DurationFieldType durationFieldType18 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay20 = monthDay4.withFieldAdded(durationFieldType18, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay0);
        org.junit.Assert.assertNotNull(monthDay2);
        org.junit.Assert.assertNotNull(monthDay6);
        org.junit.Assert.assertNotNull(monthDay9);
        org.junit.Assert.assertNotNull(monthDay11);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
    }

    @Test
    public void test0616() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0616");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        int int11 = property10.get();
        org.joda.time.MonthDay monthDay13 = property10.addWrapFieldToCopy((int) (short) 1);
        java.lang.String str14 = property10.getAsString();
        java.lang.String str15 = property10.getAsText();
        org.joda.time.DurationField durationField16 = property10.getRangeDurationField();
        int int17 = property10.getMinimumValue();
        org.joda.time.MonthDay monthDay19 = property10.addWrapFieldToCopy((int) '4');
        java.util.Locale locale20 = null;
        java.lang.String str21 = property10.getAsShortText(locale20);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "1" + "'", str14, "1");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "1" + "'", str15, "1");
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(monthDay19);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "1" + "'", str21, "1");
    }

    @Test
    public void test0617() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0617");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        int int11 = property10.get();
        int int12 = property10.getMaximumValue();
        org.joda.time.MonthDay monthDay14 = property10.addWrapFieldToCopy(30);
        org.joda.time.DurationField durationField15 = property10.getRangeDurationField();
        int int16 = property10.getMaximumValue();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 31 + "'", int12 == 31);
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 31 + "'", int16 == 31);
    }

    @Test
    public void test0618() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0618");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        int int11 = property10.get();
        org.joda.time.MonthDay monthDay13 = property10.addWrapFieldToCopy((int) (short) 1);
        java.lang.String str14 = property10.getAsString();
        java.lang.String str15 = property10.getAsText();
        org.joda.time.DurationField durationField16 = property10.getRangeDurationField();
        org.joda.time.MonthDay monthDay18 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MonthDay monthDay20 = monthDay18.withChronologyRetainFields(chronology19);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = monthDay18.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.MonthDay monthDay24 = monthDay18.plus(readablePeriod23);
        org.joda.time.MonthDay monthDay26 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.MonthDay monthDay28 = monthDay26.withChronologyRetainFields(chronology27);
        org.joda.time.MonthDay monthDay30 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MonthDay monthDay32 = monthDay30.withChronologyRetainFields(chronology31);
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = monthDay30.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property35 = monthDay28.property(dateTimeFieldType34);
        int int36 = property35.get();
        org.joda.time.MonthDay monthDay38 = property35.addWrapFieldToCopy((int) (short) 1);
        boolean boolean39 = monthDay18.isBefore((org.joda.time.ReadablePartial) monthDay38);
        org.joda.time.MonthDay.Property property40 = monthDay18.monthOfYear();
        org.joda.time.MonthDay monthDay42 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.MonthDay monthDay44 = monthDay42.withChronologyRetainFields(chronology43);
        org.joda.time.DateTimeFieldType dateTimeFieldType46 = monthDay42.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod47 = null;
        org.joda.time.MonthDay monthDay48 = monthDay42.plus(readablePeriod47);
        org.joda.time.MonthDay monthDay50 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.MonthDay monthDay52 = monthDay50.withChronologyRetainFields(chronology51);
        org.joda.time.MonthDay monthDay54 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.MonthDay monthDay56 = monthDay54.withChronologyRetainFields(chronology55);
        org.joda.time.DateTimeFieldType dateTimeFieldType58 = monthDay54.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property59 = monthDay52.property(dateTimeFieldType58);
        int int60 = property59.get();
        org.joda.time.MonthDay monthDay62 = property59.addWrapFieldToCopy((int) (short) 1);
        boolean boolean63 = monthDay42.isBefore((org.joda.time.ReadablePartial) monthDay62);
        boolean boolean64 = monthDay18.isAfter((org.joda.time.ReadablePartial) monthDay62);
        int[] intArray65 = monthDay62.getValues();
        boolean boolean66 = property10.equals((java.lang.Object) intArray65);
        org.joda.time.MonthDay monthDay68 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology69 = null;
        org.joda.time.MonthDay monthDay70 = monthDay68.withChronologyRetainFields(chronology69);
        org.joda.time.MonthDay monthDay72 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology73 = null;
        org.joda.time.MonthDay monthDay74 = monthDay72.withChronologyRetainFields(chronology73);
        org.joda.time.DateTimeFieldType dateTimeFieldType76 = monthDay72.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property77 = monthDay70.property(dateTimeFieldType76);
        int int78 = property77.get();
        int int79 = property77.getMaximumValue();
        org.joda.time.MonthDay monthDay81 = property77.setCopy((int) (short) 1);
        org.joda.time.MonthDay monthDay83 = org.joda.time.MonthDay.parse("");
        org.joda.time.ReadablePeriod readablePeriod84 = null;
        org.joda.time.MonthDay monthDay86 = monthDay83.withPeriodAdded(readablePeriod84, 1);
        org.joda.time.MonthDay monthDay88 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology89 = null;
        org.joda.time.MonthDay monthDay90 = monthDay88.withChronologyRetainFields(chronology89);
        org.joda.time.DateTimeFieldType dateTimeFieldType92 = monthDay88.getFieldType((int) (byte) 1);
        int int93 = monthDay86.indexOf(dateTimeFieldType92);
        boolean boolean94 = monthDay81.isSupported(dateTimeFieldType92);
        org.joda.time.MonthDay monthDay96 = monthDay81.plusDays((int) (short) 100);
        int int97 = property10.compareTo((org.joda.time.ReadablePartial) monthDay96);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "1" + "'", str14, "1");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "1" + "'", str15, "1");
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(monthDay18);
        org.junit.Assert.assertNotNull(monthDay20);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertNotNull(monthDay26);
        org.junit.Assert.assertNotNull(monthDay28);
        org.junit.Assert.assertNotNull(monthDay30);
        org.junit.Assert.assertNotNull(monthDay32);
        org.junit.Assert.assertNotNull(dateTimeFieldType34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(monthDay38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(monthDay42);
        org.junit.Assert.assertNotNull(monthDay44);
        org.junit.Assert.assertNotNull(dateTimeFieldType46);
        org.junit.Assert.assertNotNull(monthDay48);
        org.junit.Assert.assertNotNull(monthDay50);
        org.junit.Assert.assertNotNull(monthDay52);
        org.junit.Assert.assertNotNull(monthDay54);
        org.junit.Assert.assertNotNull(monthDay56);
        org.junit.Assert.assertNotNull(dateTimeFieldType58);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
        org.junit.Assert.assertNotNull(monthDay62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[1, 2]");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(monthDay68);
        org.junit.Assert.assertNotNull(monthDay70);
        org.junit.Assert.assertNotNull(monthDay72);
        org.junit.Assert.assertNotNull(monthDay74);
        org.junit.Assert.assertNotNull(dateTimeFieldType76);
        org.junit.Assert.assertNotNull(property77);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 1 + "'", int78 == 1);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 31 + "'", int79 == 31);
        org.junit.Assert.assertNotNull(monthDay81);
        org.junit.Assert.assertNotNull(monthDay83);
        org.junit.Assert.assertNotNull(monthDay86);
        org.junit.Assert.assertNotNull(monthDay88);
        org.junit.Assert.assertNotNull(monthDay90);
        org.junit.Assert.assertNotNull(dateTimeFieldType92);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 1 + "'", int93 == 1);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + true + "'", boolean94 == true);
        org.junit.Assert.assertNotNull(monthDay96);
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + (-1) + "'", int97 == (-1));
    }

    @Test
    public void test0619() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0619");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        org.joda.time.MonthDay.Property property11 = monthDay3.monthOfYear();
        java.lang.String str12 = property11.getAsShortText();
        org.joda.time.MonthDay monthDay14 = property11.setCopy(12);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Jan" + "'", str12, "Jan");
        org.junit.Assert.assertNotNull(monthDay14);
    }

    @Test
    public void test0620() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0620");
        org.joda.time.MonthDay monthDay1 = new org.joda.time.MonthDay((long) ' ');
        java.util.Locale locale3 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str4 = monthDay1.toString("Property[monthOfYear]", locale3);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: P");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0621() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0621");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay1.plus(readablePeriod6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.MonthDay monthDay10 = monthDay1.withPeriodAdded(readablePeriod8, 9);
        org.joda.time.DateTimeField dateTimeField12 = monthDay10.getField(1);
        java.lang.String str14 = monthDay10.toString("--09-02");
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.MonthDay monthDay16 = monthDay10.plus(readablePeriod15);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray17 = monthDay16.getFieldTypes();
        org.joda.time.MonthDay monthDay19 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MonthDay monthDay21 = monthDay19.withChronologyRetainFields(chronology20);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = monthDay19.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.MonthDay monthDay25 = monthDay19.plus(readablePeriod24);
        org.joda.time.MonthDay monthDay27 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MonthDay monthDay29 = monthDay27.withChronologyRetainFields(chronology28);
        org.joda.time.MonthDay monthDay31 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.MonthDay monthDay33 = monthDay31.withChronologyRetainFields(chronology32);
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = monthDay31.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property36 = monthDay29.property(dateTimeFieldType35);
        int int37 = property36.get();
        org.joda.time.MonthDay monthDay39 = property36.addWrapFieldToCopy((int) (short) 1);
        boolean boolean40 = monthDay19.isBefore((org.joda.time.ReadablePartial) monthDay39);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.MonthDay monthDay42 = monthDay19.withChronologyRetainFields(chronology41);
        org.joda.time.Chronology chronology43 = monthDay42.getChronology();
        org.joda.time.MonthDay monthDay45 = org.joda.time.MonthDay.parse("");
        org.joda.time.ReadablePeriod readablePeriod46 = null;
        org.joda.time.MonthDay monthDay48 = monthDay45.withPeriodAdded(readablePeriod46, 1);
        org.joda.time.MonthDay monthDay50 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.MonthDay monthDay52 = monthDay50.withChronologyRetainFields(chronology51);
        org.joda.time.DateTimeFieldType dateTimeFieldType54 = monthDay50.getFieldType((int) (byte) 1);
        int int55 = monthDay48.indexOf(dateTimeFieldType54);
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.MonthDay monthDay57 = monthDay48.withChronologyRetainFields(chronology56);
        boolean boolean58 = monthDay42.isAfter((org.joda.time.ReadablePartial) monthDay48);
        org.joda.time.MonthDay monthDay60 = monthDay42.plusDays(2);
        org.joda.time.MonthDay monthDay62 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.MonthDay monthDay64 = monthDay62.withChronologyRetainFields(chronology63);
        org.joda.time.MonthDay monthDay66 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.MonthDay monthDay68 = monthDay66.withChronologyRetainFields(chronology67);
        org.joda.time.DateTimeFieldType dateTimeFieldType70 = monthDay66.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property71 = monthDay64.property(dateTimeFieldType70);
        int int72 = property71.get();
        org.joda.time.MonthDay monthDay74 = property71.addWrapFieldToCopy((int) (short) 1);
        org.joda.time.MonthDay monthDay76 = monthDay74.plusDays(2);
        boolean boolean77 = monthDay42.isEqual((org.joda.time.ReadablePartial) monthDay74);
        boolean boolean78 = monthDay16.isBefore((org.joda.time.ReadablePartial) monthDay74);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(monthDay10);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "--09-02" + "'", str14, "--09-02");
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray17);
        org.junit.Assert.assertNotNull(monthDay19);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertNotNull(monthDay25);
        org.junit.Assert.assertNotNull(monthDay27);
        org.junit.Assert.assertNotNull(monthDay29);
        org.junit.Assert.assertNotNull(monthDay31);
        org.junit.Assert.assertNotNull(monthDay33);
        org.junit.Assert.assertNotNull(dateTimeFieldType35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(monthDay39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(monthDay42);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(monthDay45);
        org.junit.Assert.assertNotNull(monthDay48);
        org.junit.Assert.assertNotNull(monthDay50);
        org.junit.Assert.assertNotNull(monthDay52);
        org.junit.Assert.assertNotNull(dateTimeFieldType54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertNotNull(monthDay57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(monthDay60);
        org.junit.Assert.assertNotNull(monthDay62);
        org.junit.Assert.assertNotNull(monthDay64);
        org.junit.Assert.assertNotNull(monthDay66);
        org.junit.Assert.assertNotNull(monthDay68);
        org.junit.Assert.assertNotNull(dateTimeFieldType70);
        org.junit.Assert.assertNotNull(property71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 1 + "'", int72 == 1);
        org.junit.Assert.assertNotNull(monthDay74);
        org.junit.Assert.assertNotNull(monthDay76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
    }

    @Test
    public void test0622() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0622");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay1.plus(readablePeriod6);
        org.joda.time.MonthDay monthDay9 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MonthDay monthDay11 = monthDay9.withChronologyRetainFields(chronology10);
        org.joda.time.MonthDay monthDay13 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MonthDay monthDay15 = monthDay13.withChronologyRetainFields(chronology14);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = monthDay13.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property18 = monthDay11.property(dateTimeFieldType17);
        int int19 = property18.get();
        org.joda.time.MonthDay monthDay21 = property18.addWrapFieldToCopy((int) (short) 1);
        boolean boolean22 = monthDay1.isBefore((org.joda.time.ReadablePartial) monthDay21);
        org.joda.time.MonthDay monthDay24 = monthDay21.minusMonths((int) (byte) 100);
        org.joda.time.MonthDay monthDay26 = monthDay24.plusMonths(1);
        org.joda.time.MonthDay monthDay28 = org.joda.time.MonthDay.parse("");
        org.joda.time.MonthDay monthDay30 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MonthDay monthDay32 = monthDay30.withChronologyRetainFields(chronology31);
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = monthDay30.getFieldType((int) (byte) 1);
        boolean boolean35 = monthDay28.isSupported(dateTimeFieldType34);
        boolean boolean36 = monthDay24.isSupported(dateTimeFieldType34);
        org.joda.time.Chronology chronology37 = monthDay24.getChronology();
        org.joda.time.MonthDay monthDay38 = org.joda.time.MonthDay.now(chronology37);
        java.lang.Class<?> wildcardClass39 = chronology37.getClass();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(monthDay9);
        org.junit.Assert.assertNotNull(monthDay11);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertNotNull(monthDay26);
        org.junit.Assert.assertNotNull(monthDay28);
        org.junit.Assert.assertNotNull(monthDay30);
        org.junit.Assert.assertNotNull(monthDay32);
        org.junit.Assert.assertNotNull(dateTimeFieldType34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(monthDay38);
        org.junit.Assert.assertNotNull(wildcardClass39);
    }

    @Test
    public void test0623() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0623");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay1.plus(readablePeriod6);
        org.joda.time.MonthDay monthDay9 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MonthDay monthDay11 = monthDay9.withChronologyRetainFields(chronology10);
        org.joda.time.MonthDay monthDay13 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MonthDay monthDay15 = monthDay13.withChronologyRetainFields(chronology14);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = monthDay13.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property18 = monthDay11.property(dateTimeFieldType17);
        int int19 = property18.get();
        org.joda.time.MonthDay monthDay21 = property18.addWrapFieldToCopy((int) (short) 1);
        boolean boolean22 = monthDay1.isBefore((org.joda.time.ReadablePartial) monthDay21);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MonthDay monthDay24 = monthDay1.withChronologyRetainFields(chronology23);
        org.joda.time.Chronology chronology25 = monthDay24.getChronology();
        int[] intArray26 = monthDay24.getValues();
        org.joda.time.MonthDay monthDay28 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MonthDay monthDay30 = monthDay28.withChronologyRetainFields(chronology29);
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = monthDay28.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay monthDay34 = monthDay24.withField(dateTimeFieldType32, 10);
        org.joda.time.ReadablePeriod readablePeriod35 = null;
        org.joda.time.MonthDay monthDay36 = monthDay34.plus(readablePeriod35);
        java.util.Locale locale38 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str39 = monthDay36.toString("dayOfMonth", locale38);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: O");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(monthDay9);
        org.junit.Assert.assertNotNull(monthDay11);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, 1]");
        org.junit.Assert.assertNotNull(monthDay28);
        org.junit.Assert.assertNotNull(monthDay30);
        org.junit.Assert.assertNotNull(dateTimeFieldType32);
        org.junit.Assert.assertNotNull(monthDay34);
        org.junit.Assert.assertNotNull(monthDay36);
    }

    @Test
    public void test0624() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0624");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property6 = monthDay1.dayOfMonth();
        org.joda.time.Chronology chronology7 = monthDay1.getChronology();
        org.joda.time.Chronology chronology8 = monthDay1.getChronology();
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.DateTime dateTime10 = monthDay1.toDateTime(readableInstant9);
        org.joda.time.MonthDay monthDay12 = monthDay1.plusMonths((int) ' ');
        org.joda.time.MonthDay monthDay14 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MonthDay monthDay16 = monthDay14.withChronologyRetainFields(chronology15);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = monthDay14.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.MonthDay monthDay20 = monthDay14.plus(readablePeriod19);
        org.joda.time.MonthDay monthDay22 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MonthDay monthDay24 = monthDay22.withChronologyRetainFields(chronology23);
        org.joda.time.MonthDay monthDay26 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.MonthDay monthDay28 = monthDay26.withChronologyRetainFields(chronology27);
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = monthDay26.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property31 = monthDay24.property(dateTimeFieldType30);
        int int32 = property31.get();
        org.joda.time.MonthDay monthDay34 = property31.addWrapFieldToCopy((int) (short) 1);
        boolean boolean35 = monthDay14.isBefore((org.joda.time.ReadablePartial) monthDay34);
        org.joda.time.MonthDay monthDay37 = monthDay34.minusMonths((int) (byte) 100);
        org.joda.time.MonthDay monthDay39 = monthDay37.plusMonths(1);
        org.joda.time.ReadablePeriod readablePeriod40 = null;
        org.joda.time.MonthDay monthDay41 = monthDay37.minus(readablePeriod40);
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.MonthDay monthDay43 = new org.joda.time.MonthDay(dateTimeZone42);
        boolean boolean44 = monthDay41.isEqual((org.joda.time.ReadablePartial) monthDay43);
        boolean boolean45 = monthDay1.equals((java.lang.Object) monthDay41);
        org.joda.time.MonthDay.Property property46 = monthDay41.dayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod47 = null;
        org.joda.time.MonthDay monthDay48 = monthDay41.plus(readablePeriod47);
        org.joda.time.MonthDay monthDay50 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.MonthDay monthDay52 = monthDay50.withChronologyRetainFields(chronology51);
        org.joda.time.DateTimeFieldType dateTimeFieldType54 = monthDay50.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod55 = null;
        org.joda.time.MonthDay monthDay56 = monthDay50.plus(readablePeriod55);
        org.joda.time.MonthDay monthDay58 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.MonthDay monthDay60 = monthDay58.withChronologyRetainFields(chronology59);
        org.joda.time.MonthDay monthDay62 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.MonthDay monthDay64 = monthDay62.withChronologyRetainFields(chronology63);
        org.joda.time.DateTimeFieldType dateTimeFieldType66 = monthDay62.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property67 = monthDay60.property(dateTimeFieldType66);
        int int68 = property67.get();
        org.joda.time.MonthDay monthDay70 = property67.addWrapFieldToCopy((int) (short) 1);
        boolean boolean71 = monthDay50.isBefore((org.joda.time.ReadablePartial) monthDay70);
        org.joda.time.MonthDay monthDay73 = monthDay70.minusMonths((int) (byte) 100);
        int int74 = monthDay73.getMonthOfYear();
        org.joda.time.MonthDay monthDay76 = monthDay73.withMonthOfYear(1);
        org.joda.time.ReadablePeriod readablePeriod77 = null;
        org.joda.time.MonthDay monthDay78 = monthDay73.plus(readablePeriod77);
        org.joda.time.MonthDay monthDay80 = monthDay78.withMonthOfYear(9);
        boolean boolean81 = monthDay48.equals((java.lang.Object) monthDay80);
        java.lang.String str82 = monthDay80.toString();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(monthDay12);
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(monthDay20);
        org.junit.Assert.assertNotNull(monthDay22);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertNotNull(monthDay26);
        org.junit.Assert.assertNotNull(monthDay28);
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(monthDay34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(monthDay37);
        org.junit.Assert.assertNotNull(monthDay39);
        org.junit.Assert.assertNotNull(monthDay41);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(monthDay48);
        org.junit.Assert.assertNotNull(monthDay50);
        org.junit.Assert.assertNotNull(monthDay52);
        org.junit.Assert.assertNotNull(dateTimeFieldType54);
        org.junit.Assert.assertNotNull(monthDay56);
        org.junit.Assert.assertNotNull(monthDay58);
        org.junit.Assert.assertNotNull(monthDay60);
        org.junit.Assert.assertNotNull(monthDay62);
        org.junit.Assert.assertNotNull(monthDay64);
        org.junit.Assert.assertNotNull(dateTimeFieldType66);
        org.junit.Assert.assertNotNull(property67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1 + "'", int68 == 1);
        org.junit.Assert.assertNotNull(monthDay70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(monthDay73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 9 + "'", int74 == 9);
        org.junit.Assert.assertNotNull(monthDay76);
        org.junit.Assert.assertNotNull(monthDay78);
        org.junit.Assert.assertNotNull(monthDay80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "--09-02" + "'", str82, "--09-02");
    }

    @Test
    public void test0625() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0625");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay1.plus(readablePeriod6);
        org.joda.time.MonthDay monthDay9 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MonthDay monthDay11 = monthDay9.withChronologyRetainFields(chronology10);
        org.joda.time.MonthDay monthDay13 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MonthDay monthDay15 = monthDay13.withChronologyRetainFields(chronology14);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = monthDay13.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property18 = monthDay11.property(dateTimeFieldType17);
        int int19 = property18.get();
        org.joda.time.MonthDay monthDay21 = property18.addWrapFieldToCopy((int) (short) 1);
        boolean boolean22 = monthDay1.isBefore((org.joda.time.ReadablePartial) monthDay21);
        org.joda.time.MonthDay monthDay24 = monthDay21.minusMonths((int) (byte) 100);
        org.joda.time.MonthDay monthDay26 = monthDay24.plusMonths(1);
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.MonthDay monthDay28 = monthDay24.minus(readablePeriod27);
        org.joda.time.MonthDay monthDay30 = org.joda.time.MonthDay.parse("");
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        org.joda.time.MonthDay monthDay33 = monthDay30.withPeriodAdded(readablePeriod31, 1);
        org.joda.time.MonthDay monthDay35 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.MonthDay monthDay37 = monthDay35.withChronologyRetainFields(chronology36);
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = monthDay35.getFieldType((int) (byte) 1);
        int int40 = monthDay33.indexOf(dateTimeFieldType39);
        org.joda.time.MonthDay.Property property41 = monthDay28.property(dateTimeFieldType39);
        org.joda.time.MonthDay monthDay43 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.MonthDay monthDay45 = monthDay43.withChronologyRetainFields(chronology44);
        org.joda.time.MonthDay monthDay47 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.MonthDay monthDay49 = monthDay47.withChronologyRetainFields(chronology48);
        org.joda.time.DateTimeFieldType dateTimeFieldType51 = monthDay47.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property52 = monthDay45.property(dateTimeFieldType51);
        int int53 = property52.get();
        int int54 = property52.getMaximumValue();
        org.joda.time.MonthDay monthDay56 = property52.setCopy((int) (short) 1);
        org.joda.time.MonthDay monthDay58 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.MonthDay monthDay60 = monthDay58.withChronologyRetainFields(chronology59);
        org.joda.time.DateTimeFieldType dateTimeFieldType62 = monthDay58.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod63 = null;
        org.joda.time.MonthDay monthDay64 = monthDay58.plus(readablePeriod63);
        int int65 = monthDay58.getDayOfMonth();
        int int66 = property52.compareTo((org.joda.time.ReadablePartial) monthDay58);
        org.joda.time.DateTimeField[] dateTimeFieldArray67 = monthDay58.getFields();
        org.joda.time.MonthDay monthDay69 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology70 = null;
        org.joda.time.MonthDay monthDay71 = monthDay69.withChronologyRetainFields(chronology70);
        org.joda.time.DateTimeFieldType dateTimeFieldType73 = monthDay69.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property74 = monthDay69.dayOfMonth();
        org.joda.time.MonthDay monthDay76 = property74.addWrapFieldToCopy(1);
        boolean boolean77 = monthDay58.isEqual((org.joda.time.ReadablePartial) monthDay76);
        java.lang.String str78 = monthDay58.toString();
        boolean boolean79 = monthDay28.isEqual((org.joda.time.ReadablePartial) monthDay58);
        int int80 = monthDay58.size();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(monthDay9);
        org.junit.Assert.assertNotNull(monthDay11);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertNotNull(monthDay26);
        org.junit.Assert.assertNotNull(monthDay28);
        org.junit.Assert.assertNotNull(monthDay30);
        org.junit.Assert.assertNotNull(monthDay33);
        org.junit.Assert.assertNotNull(monthDay35);
        org.junit.Assert.assertNotNull(monthDay37);
        org.junit.Assert.assertNotNull(dateTimeFieldType39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(monthDay43);
        org.junit.Assert.assertNotNull(monthDay45);
        org.junit.Assert.assertNotNull(monthDay47);
        org.junit.Assert.assertNotNull(monthDay49);
        org.junit.Assert.assertNotNull(dateTimeFieldType51);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 31 + "'", int54 == 31);
        org.junit.Assert.assertNotNull(monthDay56);
        org.junit.Assert.assertNotNull(monthDay58);
        org.junit.Assert.assertNotNull(monthDay60);
        org.junit.Assert.assertNotNull(dateTimeFieldType62);
        org.junit.Assert.assertNotNull(monthDay64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldArray67);
        org.junit.Assert.assertNotNull(monthDay69);
        org.junit.Assert.assertNotNull(monthDay71);
        org.junit.Assert.assertNotNull(dateTimeFieldType73);
        org.junit.Assert.assertNotNull(property74);
        org.junit.Assert.assertNotNull(monthDay76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "--01-01" + "'", str78, "--01-01");
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 2 + "'", int80 == 2);
    }

    @Test
    public void test0626() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0626");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        org.joda.time.MonthDay.Property property11 = monthDay3.monthOfYear();
        java.util.Locale locale12 = null;
        int int13 = property11.getMaximumTextLength(locale12);
        int int14 = property11.getMaximumValue();
        org.joda.time.MonthDay monthDay16 = property11.addWrapFieldToCopy((int) '#');
        java.lang.String str17 = property11.toString();
        org.joda.time.DateTimeField dateTimeField18 = property11.getField();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 9 + "'", int13 == 9);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 12 + "'", int14 == 12);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Property[monthOfYear]" + "'", str17, "Property[monthOfYear]");
        org.junit.Assert.assertNotNull(dateTimeField18);
    }

    @Test
    public void test0627() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0627");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay1.plus(readablePeriod6);
        org.joda.time.MonthDay monthDay9 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MonthDay monthDay11 = monthDay9.withChronologyRetainFields(chronology10);
        org.joda.time.MonthDay monthDay13 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MonthDay monthDay15 = monthDay13.withChronologyRetainFields(chronology14);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = monthDay13.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property18 = monthDay11.property(dateTimeFieldType17);
        int int19 = property18.get();
        org.joda.time.MonthDay monthDay21 = property18.addWrapFieldToCopy((int) (short) 1);
        boolean boolean22 = monthDay1.isBefore((org.joda.time.ReadablePartial) monthDay21);
        org.joda.time.MonthDay monthDay24 = monthDay21.minusMonths((int) (byte) 100);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter25 = null;
        java.lang.String str26 = monthDay24.toString(dateTimeFormatter25);
        org.joda.time.MonthDay monthDay28 = org.joda.time.MonthDay.parse("");
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        org.joda.time.MonthDay monthDay31 = monthDay28.withPeriodAdded(readablePeriod29, 1);
        org.joda.time.MonthDay monthDay33 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MonthDay monthDay35 = monthDay33.withChronologyRetainFields(chronology34);
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = monthDay33.getFieldType((int) (byte) 1);
        int int38 = monthDay31.indexOf(dateTimeFieldType37);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.MonthDay monthDay40 = monthDay31.withChronologyRetainFields(chronology39);
        org.joda.time.MonthDay.Property property41 = monthDay40.dayOfMonth();
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = property41.getFieldType();
        org.joda.time.MonthDay monthDay44 = monthDay24.withField(dateTimeFieldType42, 2);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType46 = monthDay24.getFieldType((int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 52");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(monthDay9);
        org.junit.Assert.assertNotNull(monthDay11);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "--09-02" + "'", str26, "--09-02");
        org.junit.Assert.assertNotNull(monthDay28);
        org.junit.Assert.assertNotNull(monthDay31);
        org.junit.Assert.assertNotNull(monthDay33);
        org.junit.Assert.assertNotNull(monthDay35);
        org.junit.Assert.assertNotNull(dateTimeFieldType37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(monthDay40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(dateTimeFieldType42);
        org.junit.Assert.assertNotNull(monthDay44);
    }

    @Test
    public void test0628() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0628");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        org.joda.time.MonthDay.Property property11 = monthDay3.monthOfYear();
        java.util.Locale locale12 = null;
        int int13 = property11.getMaximumTextLength(locale12);
        int int14 = property11.getMaximumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = property11.getFieldType();
        java.lang.String str16 = property11.getAsShortText();
        java.lang.String str17 = property11.toString();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay19 = property11.setCopy("monthOfYear");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"monthOfYear\" for monthOfYear is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 9 + "'", int13 == 9);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 12 + "'", int14 == 12);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Jan" + "'", str16, "Jan");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Property[monthOfYear]" + "'", str17, "Property[monthOfYear]");
    }

    @Test
    public void test0629() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0629");
        org.joda.time.MonthDay monthDay2 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MonthDay monthDay4 = monthDay2.withChronologyRetainFields(chronology3);
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = monthDay2.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property7 = monthDay2.dayOfMonth();
        org.joda.time.Chronology chronology8 = monthDay2.getChronology();
        org.joda.time.MonthDay monthDay9 = new org.joda.time.MonthDay((-1L), chronology8);
        org.joda.time.MonthDay monthDay10 = new org.joda.time.MonthDay((java.lang.Object) monthDay9);
        org.joda.time.MonthDay monthDay12 = org.joda.time.MonthDay.parse("");
        org.joda.time.MonthDay monthDay14 = monthDay12.minusDays((int) '#');
        org.joda.time.MonthDay monthDay16 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MonthDay monthDay18 = monthDay16.withChronologyRetainFields(chronology17);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = monthDay16.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property21 = monthDay16.dayOfMonth();
        org.joda.time.Chronology chronology22 = monthDay16.getChronology();
        org.joda.time.Chronology chronology23 = monthDay16.getChronology();
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.DateTime dateTime25 = monthDay16.toDateTime(readableInstant24);
        org.joda.time.MonthDay monthDay27 = monthDay16.plusMonths((int) ' ');
        boolean boolean28 = monthDay12.isAfter((org.joda.time.ReadablePartial) monthDay27);
        org.joda.time.MonthDay monthDay30 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MonthDay monthDay32 = monthDay30.withChronologyRetainFields(chronology31);
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = monthDay30.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property35 = monthDay30.dayOfMonth();
        org.joda.time.MonthDay monthDay37 = property35.addWrapFieldToCopy(1);
        org.joda.time.MonthDay monthDay39 = property35.addWrapFieldToCopy(0);
        org.joda.time.MonthDay monthDay41 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.MonthDay monthDay43 = monthDay41.withChronologyRetainFields(chronology42);
        org.joda.time.MonthDay monthDay45 = monthDay41.minusMonths((int) (byte) -1);
        boolean boolean46 = property35.equals((java.lang.Object) monthDay45);
        int int47 = property35.getMaximumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType48 = property35.getFieldType();
        org.joda.time.MonthDay.Property property49 = monthDay27.property(dateTimeFieldType48);
        int int50 = monthDay10.indexOf(dateTimeFieldType48);
        org.joda.time.MonthDay monthDay52 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.MonthDay monthDay54 = monthDay52.withChronologyRetainFields(chronology53);
        org.joda.time.DateTimeFieldType dateTimeFieldType56 = monthDay52.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property57 = monthDay52.dayOfMonth();
        org.joda.time.Chronology chronology58 = monthDay52.getChronology();
        org.joda.time.Chronology chronology59 = monthDay52.getChronology();
        org.joda.time.MonthDay monthDay60 = org.joda.time.MonthDay.now(chronology59);
        org.joda.time.MonthDay monthDay61 = monthDay10.withChronologyRetainFields(chronology59);
        org.joda.time.MonthDay monthDay62 = new org.joda.time.MonthDay(chronology59);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray63 = monthDay62.getFieldTypes();
        org.junit.Assert.assertNotNull(monthDay2);
        org.junit.Assert.assertNotNull(monthDay4);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(monthDay12);
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(monthDay18);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(monthDay27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(monthDay30);
        org.junit.Assert.assertNotNull(monthDay32);
        org.junit.Assert.assertNotNull(dateTimeFieldType34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(monthDay37);
        org.junit.Assert.assertNotNull(monthDay39);
        org.junit.Assert.assertNotNull(monthDay41);
        org.junit.Assert.assertNotNull(monthDay43);
        org.junit.Assert.assertNotNull(monthDay45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 31 + "'", int47 == 31);
        org.junit.Assert.assertNotNull(dateTimeFieldType48);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertNotNull(monthDay52);
        org.junit.Assert.assertNotNull(monthDay54);
        org.junit.Assert.assertNotNull(dateTimeFieldType56);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertNotNull(chronology59);
        org.junit.Assert.assertNotNull(monthDay60);
        org.junit.Assert.assertNotNull(monthDay61);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray63);
    }

    @Test
    public void test0630() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0630");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        org.joda.time.MonthDay.Property property11 = monthDay3.monthOfYear();
        java.lang.String str12 = property11.getAsShortText();
        int int13 = property11.getMinimumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = property11.getFieldType();
        java.util.Locale locale15 = null;
        java.lang.String str16 = property11.getAsShortText(locale15);
        int int17 = property11.getMinimumValue();
        java.lang.Class<?> wildcardClass18 = property11.getClass();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Jan" + "'", str12, "Jan");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Jan" + "'", str16, "Jan");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test0631() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0631");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay1.plus(readablePeriod6);
        org.joda.time.MonthDay monthDay9 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MonthDay monthDay11 = monthDay9.withChronologyRetainFields(chronology10);
        org.joda.time.MonthDay monthDay13 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MonthDay monthDay15 = monthDay13.withChronologyRetainFields(chronology14);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = monthDay13.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property18 = monthDay11.property(dateTimeFieldType17);
        int int19 = property18.get();
        org.joda.time.MonthDay monthDay21 = property18.addWrapFieldToCopy((int) (short) 1);
        boolean boolean22 = monthDay1.isBefore((org.joda.time.ReadablePartial) monthDay21);
        org.joda.time.MonthDay monthDay24 = monthDay21.minusMonths((int) (byte) 100);
        int int25 = monthDay24.getMonthOfYear();
        org.joda.time.MonthDay monthDay27 = monthDay24.withMonthOfYear(1);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.MonthDay monthDay29 = monthDay24.plus(readablePeriod28);
        org.joda.time.MonthDay monthDay31 = monthDay29.withMonthOfYear(9);
        org.joda.time.DateTimeField[] dateTimeFieldArray32 = monthDay29.getFields();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType34 = monthDay29.getFieldType((int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 52");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(monthDay9);
        org.junit.Assert.assertNotNull(monthDay11);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 9 + "'", int25 == 9);
        org.junit.Assert.assertNotNull(monthDay27);
        org.junit.Assert.assertNotNull(monthDay29);
        org.junit.Assert.assertNotNull(monthDay31);
        org.junit.Assert.assertNotNull(dateTimeFieldArray32);
    }

    @Test
    public void test0632() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0632");
        org.joda.time.MonthDay monthDay1 = new org.joda.time.MonthDay(10L);
        int[] intArray2 = monthDay1.getValues();
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        org.joda.time.MonthDay monthDay4 = monthDay1.plus(readablePeriod3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.MonthDay monthDay6 = monthDay4.plus(readablePeriod5);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[1, 1]");
        org.junit.Assert.assertNotNull(monthDay4);
        org.junit.Assert.assertNotNull(monthDay6);
    }

    @Test
    public void test0633() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0633");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.MonthDay monthDay4 = monthDay1.withPeriodAdded(readablePeriod2, 1);
        org.joda.time.MonthDay monthDay6 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MonthDay monthDay8 = monthDay6.withChronologyRetainFields(chronology7);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = monthDay6.getFieldType((int) (byte) 1);
        int int11 = monthDay4.indexOf(dateTimeFieldType10);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MonthDay monthDay13 = monthDay4.withChronologyRetainFields(chronology12);
        org.joda.time.MonthDay.Property property14 = monthDay13.dayOfMonth();
        int int15 = property14.getMinimumValue();
        int int16 = property14.getMaximumValueOverall();
        java.lang.String str17 = property14.getName();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay4);
        org.junit.Assert.assertNotNull(monthDay6);
        org.junit.Assert.assertNotNull(monthDay8);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 31 + "'", int16 == 31);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "dayOfMonth" + "'", str17, "dayOfMonth");
    }

    @Test
    public void test0634() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0634");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("--01-09");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay3 = monthDay1.withMonthOfYear(0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 0 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
    }

    @Test
    public void test0635() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0635");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay1.plus(readablePeriod6);
        org.joda.time.MonthDay monthDay9 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MonthDay monthDay11 = monthDay9.withChronologyRetainFields(chronology10);
        org.joda.time.MonthDay monthDay13 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MonthDay monthDay15 = monthDay13.withChronologyRetainFields(chronology14);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = monthDay13.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property18 = monthDay11.property(dateTimeFieldType17);
        int int19 = property18.get();
        org.joda.time.MonthDay monthDay21 = property18.addWrapFieldToCopy((int) (short) 1);
        boolean boolean22 = monthDay1.isBefore((org.joda.time.ReadablePartial) monthDay21);
        org.joda.time.MonthDay monthDay24 = monthDay21.minusMonths((int) (byte) 100);
        org.joda.time.MonthDay monthDay26 = monthDay24.plusMonths(1);
        org.joda.time.MonthDay monthDay28 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MonthDay monthDay30 = monthDay28.withChronologyRetainFields(chronology29);
        boolean boolean31 = monthDay24.isBefore((org.joda.time.ReadablePartial) monthDay30);
        org.joda.time.DateTimeField[] dateTimeFieldArray32 = monthDay30.getFields();
        org.joda.time.ReadablePeriod readablePeriod33 = null;
        org.joda.time.MonthDay monthDay35 = monthDay30.withPeriodAdded(readablePeriod33, 30);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(monthDay9);
        org.junit.Assert.assertNotNull(monthDay11);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertNotNull(monthDay26);
        org.junit.Assert.assertNotNull(monthDay28);
        org.junit.Assert.assertNotNull(monthDay30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldArray32);
        org.junit.Assert.assertNotNull(monthDay35);
    }

    @Test
    public void test0636() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0636");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay1.plus(readablePeriod6);
        org.joda.time.MonthDay monthDay9 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MonthDay monthDay11 = monthDay9.withChronologyRetainFields(chronology10);
        org.joda.time.MonthDay monthDay13 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MonthDay monthDay15 = monthDay13.withChronologyRetainFields(chronology14);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = monthDay13.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property18 = monthDay11.property(dateTimeFieldType17);
        int int19 = property18.get();
        org.joda.time.MonthDay monthDay21 = property18.addWrapFieldToCopy((int) (short) 1);
        boolean boolean22 = monthDay1.isBefore((org.joda.time.ReadablePartial) monthDay21);
        org.joda.time.DateTimeField[] dateTimeFieldArray23 = monthDay1.getFields();
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.MonthDay monthDay25 = monthDay1.minus(readablePeriod24);
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        org.joda.time.MonthDay monthDay28 = monthDay1.withPeriodAdded(readablePeriod26, (int) (byte) -1);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.MonthDay monthDay31 = new org.joda.time.MonthDay((long) (short) 100, chronology30);
        org.joda.time.MonthDay monthDay33 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MonthDay monthDay35 = monthDay33.withChronologyRetainFields(chronology34);
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = monthDay33.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property38 = monthDay33.dayOfMonth();
        org.joda.time.Chronology chronology39 = monthDay33.getChronology();
        org.joda.time.Chronology chronology40 = monthDay33.getChronology();
        org.joda.time.ReadableInstant readableInstant41 = null;
        org.joda.time.DateTime dateTime42 = monthDay33.toDateTime(readableInstant41);
        org.joda.time.DateTime dateTime43 = monthDay31.toDateTime(readableInstant41);
        org.joda.time.DateTime dateTime44 = monthDay1.toDateTime((org.joda.time.ReadableInstant) dateTime43);
        org.joda.time.ReadablePeriod readablePeriod45 = null;
        org.joda.time.MonthDay monthDay46 = monthDay1.minus(readablePeriod45);
        org.joda.time.DateTimeField[] dateTimeFieldArray47 = monthDay1.getFields();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(monthDay9);
        org.junit.Assert.assertNotNull(monthDay11);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldArray23);
        org.junit.Assert.assertNotNull(monthDay25);
        org.junit.Assert.assertNotNull(monthDay28);
        org.junit.Assert.assertNotNull(monthDay33);
        org.junit.Assert.assertNotNull(monthDay35);
        org.junit.Assert.assertNotNull(dateTimeFieldType37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(monthDay46);
        org.junit.Assert.assertNotNull(dateTimeFieldArray47);
    }

    @Test
    public void test0637() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0637");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        int int11 = property10.get();
        int int12 = property10.getMaximumValue();
        org.joda.time.MonthDay monthDay14 = property10.setCopy((int) (short) 1);
        org.joda.time.MonthDay monthDay16 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MonthDay monthDay18 = monthDay16.withChronologyRetainFields(chronology17);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = monthDay16.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.MonthDay monthDay22 = monthDay16.plus(readablePeriod21);
        int int23 = monthDay16.getDayOfMonth();
        int int24 = property10.compareTo((org.joda.time.ReadablePartial) monthDay16);
        org.joda.time.DateTimeField[] dateTimeFieldArray25 = monthDay16.getFields();
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        org.joda.time.MonthDay monthDay27 = monthDay16.plus(readablePeriod26);
        java.util.Locale locale29 = null;
        java.lang.String str30 = monthDay16.toString("--08-02", locale29);
        org.joda.time.MonthDay monthDay32 = monthDay16.minusDays((int) (short) 1);
        org.joda.time.MonthDay monthDay35 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.MonthDay monthDay37 = monthDay35.withChronologyRetainFields(chronology36);
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = monthDay35.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property40 = monthDay35.dayOfMonth();
        org.joda.time.Chronology chronology41 = monthDay35.getChronology();
        org.joda.time.MonthDay monthDay42 = new org.joda.time.MonthDay((-1L), chronology41);
        org.joda.time.MonthDay monthDay43 = new org.joda.time.MonthDay((java.lang.Object) monthDay42);
        org.joda.time.MonthDay monthDay45 = org.joda.time.MonthDay.parse("");
        org.joda.time.MonthDay monthDay47 = monthDay45.minusDays((int) '#');
        org.joda.time.MonthDay monthDay49 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.MonthDay monthDay51 = monthDay49.withChronologyRetainFields(chronology50);
        org.joda.time.DateTimeFieldType dateTimeFieldType53 = monthDay49.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property54 = monthDay49.dayOfMonth();
        org.joda.time.Chronology chronology55 = monthDay49.getChronology();
        org.joda.time.Chronology chronology56 = monthDay49.getChronology();
        org.joda.time.ReadableInstant readableInstant57 = null;
        org.joda.time.DateTime dateTime58 = monthDay49.toDateTime(readableInstant57);
        org.joda.time.MonthDay monthDay60 = monthDay49.plusMonths((int) ' ');
        boolean boolean61 = monthDay45.isAfter((org.joda.time.ReadablePartial) monthDay60);
        org.joda.time.MonthDay monthDay63 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.MonthDay monthDay65 = monthDay63.withChronologyRetainFields(chronology64);
        org.joda.time.DateTimeFieldType dateTimeFieldType67 = monthDay63.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property68 = monthDay63.dayOfMonth();
        org.joda.time.MonthDay monthDay70 = property68.addWrapFieldToCopy(1);
        org.joda.time.MonthDay monthDay72 = property68.addWrapFieldToCopy(0);
        org.joda.time.MonthDay monthDay74 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology75 = null;
        org.joda.time.MonthDay monthDay76 = monthDay74.withChronologyRetainFields(chronology75);
        org.joda.time.MonthDay monthDay78 = monthDay74.minusMonths((int) (byte) -1);
        boolean boolean79 = property68.equals((java.lang.Object) monthDay78);
        int int80 = property68.getMaximumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType81 = property68.getFieldType();
        org.joda.time.MonthDay.Property property82 = monthDay60.property(dateTimeFieldType81);
        int int83 = monthDay43.indexOf(dateTimeFieldType81);
        org.joda.time.MonthDay monthDay85 = monthDay32.withField(dateTimeFieldType81, (int) (byte) 1);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 31 + "'", int12 == 31);
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(monthDay18);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertNotNull(monthDay22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldArray25);
        org.junit.Assert.assertNotNull(monthDay27);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "--08-02" + "'", str30, "--08-02");
        org.junit.Assert.assertNotNull(monthDay32);
        org.junit.Assert.assertNotNull(monthDay35);
        org.junit.Assert.assertNotNull(monthDay37);
        org.junit.Assert.assertNotNull(dateTimeFieldType39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(monthDay45);
        org.junit.Assert.assertNotNull(monthDay47);
        org.junit.Assert.assertNotNull(monthDay49);
        org.junit.Assert.assertNotNull(monthDay51);
        org.junit.Assert.assertNotNull(dateTimeFieldType53);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertNotNull(chronology56);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(monthDay60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(monthDay63);
        org.junit.Assert.assertNotNull(monthDay65);
        org.junit.Assert.assertNotNull(dateTimeFieldType67);
        org.junit.Assert.assertNotNull(property68);
        org.junit.Assert.assertNotNull(monthDay70);
        org.junit.Assert.assertNotNull(monthDay72);
        org.junit.Assert.assertNotNull(monthDay74);
        org.junit.Assert.assertNotNull(monthDay76);
        org.junit.Assert.assertNotNull(monthDay78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 31 + "'", int80 == 31);
        org.junit.Assert.assertNotNull(dateTimeFieldType81);
        org.junit.Assert.assertNotNull(property82);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 1 + "'", int83 == 1);
        org.junit.Assert.assertNotNull(monthDay85);
    }

    @Test
    public void test0638() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0638");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        int int11 = property10.get();
        org.joda.time.DurationField durationField12 = property10.getDurationField();
        org.joda.time.MonthDay monthDay14 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MonthDay monthDay16 = monthDay14.withChronologyRetainFields(chronology15);
        org.joda.time.MonthDay monthDay18 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MonthDay monthDay20 = monthDay18.withChronologyRetainFields(chronology19);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = monthDay18.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property23 = monthDay16.property(dateTimeFieldType22);
        boolean boolean24 = property10.equals((java.lang.Object) monthDay16);
        org.joda.time.MonthDay monthDay25 = new org.joda.time.MonthDay((java.lang.Object) monthDay16);
        org.joda.time.MonthDay monthDay27 = org.joda.time.MonthDay.parse("");
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.MonthDay monthDay30 = monthDay27.withPeriodAdded(readablePeriod28, 1);
        org.joda.time.MonthDay monthDay32 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.MonthDay monthDay34 = monthDay32.withChronologyRetainFields(chronology33);
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = monthDay32.getFieldType((int) (byte) 1);
        int int37 = monthDay30.indexOf(dateTimeFieldType36);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.MonthDay monthDay39 = monthDay30.withChronologyRetainFields(chronology38);
        boolean boolean40 = monthDay25.isBefore((org.joda.time.ReadablePartial) monthDay39);
        org.joda.time.MonthDay monthDay42 = org.joda.time.MonthDay.parse("");
        org.joda.time.MonthDay monthDay44 = monthDay42.minusDays((int) '#');
        org.joda.time.MonthDay monthDay46 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.MonthDay monthDay48 = monthDay46.withChronologyRetainFields(chronology47);
        org.joda.time.DateTimeFieldType dateTimeFieldType50 = monthDay46.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property51 = monthDay46.dayOfMonth();
        org.joda.time.Chronology chronology52 = monthDay46.getChronology();
        org.joda.time.Chronology chronology53 = monthDay46.getChronology();
        org.joda.time.ReadableInstant readableInstant54 = null;
        org.joda.time.DateTime dateTime55 = monthDay46.toDateTime(readableInstant54);
        org.joda.time.MonthDay monthDay57 = monthDay46.plusMonths((int) ' ');
        boolean boolean58 = monthDay42.isAfter((org.joda.time.ReadablePartial) monthDay57);
        org.joda.time.MonthDay monthDay60 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.MonthDay monthDay62 = monthDay60.withChronologyRetainFields(chronology61);
        org.joda.time.DateTimeFieldType dateTimeFieldType64 = monthDay60.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod65 = null;
        org.joda.time.MonthDay monthDay66 = monthDay60.plus(readablePeriod65);
        org.joda.time.MonthDay monthDay68 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology69 = null;
        org.joda.time.MonthDay monthDay70 = monthDay68.withChronologyRetainFields(chronology69);
        org.joda.time.MonthDay monthDay72 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology73 = null;
        org.joda.time.MonthDay monthDay74 = monthDay72.withChronologyRetainFields(chronology73);
        org.joda.time.DateTimeFieldType dateTimeFieldType76 = monthDay72.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property77 = monthDay70.property(dateTimeFieldType76);
        int int78 = property77.get();
        org.joda.time.MonthDay monthDay80 = property77.addWrapFieldToCopy((int) (short) 1);
        boolean boolean81 = monthDay60.isBefore((org.joda.time.ReadablePartial) monthDay80);
        org.joda.time.MonthDay monthDay83 = monthDay80.minusMonths((int) (byte) 100);
        org.joda.time.MonthDay monthDay85 = monthDay83.plusMonths(1);
        int int86 = monthDay57.compareTo((org.joda.time.ReadablePartial) monthDay83);
        int int87 = monthDay25.compareTo((org.joda.time.ReadablePartial) monthDay83);
        int int88 = monthDay83.getMonthOfYear();
        org.joda.time.MonthDay monthDay90 = monthDay83.plusDays(100);
        int int91 = monthDay83.getMonthOfYear();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(monthDay18);
        org.junit.Assert.assertNotNull(monthDay20);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(monthDay27);
        org.junit.Assert.assertNotNull(monthDay30);
        org.junit.Assert.assertNotNull(monthDay32);
        org.junit.Assert.assertNotNull(monthDay34);
        org.junit.Assert.assertNotNull(dateTimeFieldType36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(monthDay39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(monthDay42);
        org.junit.Assert.assertNotNull(monthDay44);
        org.junit.Assert.assertNotNull(monthDay46);
        org.junit.Assert.assertNotNull(monthDay48);
        org.junit.Assert.assertNotNull(dateTimeFieldType50);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(monthDay57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(monthDay60);
        org.junit.Assert.assertNotNull(monthDay62);
        org.junit.Assert.assertNotNull(dateTimeFieldType64);
        org.junit.Assert.assertNotNull(monthDay66);
        org.junit.Assert.assertNotNull(monthDay68);
        org.junit.Assert.assertNotNull(monthDay70);
        org.junit.Assert.assertNotNull(monthDay72);
        org.junit.Assert.assertNotNull(monthDay74);
        org.junit.Assert.assertNotNull(dateTimeFieldType76);
        org.junit.Assert.assertNotNull(property77);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 1 + "'", int78 == 1);
        org.junit.Assert.assertNotNull(monthDay80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertNotNull(monthDay83);
        org.junit.Assert.assertNotNull(monthDay85);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + (-1) + "'", int86 == (-1));
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + (-1) + "'", int87 == (-1));
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 9 + "'", int88 == 9);
        org.junit.Assert.assertNotNull(monthDay90);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 9 + "'", int91 == 9);
    }

    @Test
    public void test0639() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0639");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.MonthDay monthDay3 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MonthDay monthDay5 = monthDay3.withChronologyRetainFields(chronology4);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = monthDay3.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.MonthDay monthDay9 = monthDay3.plus(readablePeriod8);
        org.joda.time.MonthDay monthDay11 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MonthDay monthDay13 = monthDay11.withChronologyRetainFields(chronology12);
        org.joda.time.MonthDay monthDay15 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MonthDay monthDay17 = monthDay15.withChronologyRetainFields(chronology16);
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = monthDay15.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property20 = monthDay13.property(dateTimeFieldType19);
        int int21 = property20.get();
        org.joda.time.MonthDay monthDay23 = property20.addWrapFieldToCopy((int) (short) 1);
        boolean boolean24 = monthDay3.isBefore((org.joda.time.ReadablePartial) monthDay23);
        org.joda.time.MonthDay monthDay26 = monthDay23.minusMonths((int) (byte) 100);
        org.joda.time.MonthDay monthDay28 = monthDay26.plusMonths(1);
        org.joda.time.MonthDay monthDay30 = org.joda.time.MonthDay.parse("");
        org.joda.time.MonthDay monthDay32 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.MonthDay monthDay34 = monthDay32.withChronologyRetainFields(chronology33);
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = monthDay32.getFieldType((int) (byte) 1);
        boolean boolean37 = monthDay30.isSupported(dateTimeFieldType36);
        boolean boolean38 = monthDay26.isSupported(dateTimeFieldType36);
        int int39 = monthDay1.compareTo((org.joda.time.ReadablePartial) monthDay26);
        org.joda.time.MonthDay monthDay41 = monthDay1.minusDays((int) '4');
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(monthDay9);
        org.junit.Assert.assertNotNull(monthDay11);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(monthDay17);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(monthDay23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(monthDay26);
        org.junit.Assert.assertNotNull(monthDay28);
        org.junit.Assert.assertNotNull(monthDay30);
        org.junit.Assert.assertNotNull(monthDay32);
        org.junit.Assert.assertNotNull(monthDay34);
        org.junit.Assert.assertNotNull(dateTimeFieldType36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertNotNull(monthDay41);
    }

    @Test
    public void test0640() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0640");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        int int11 = property10.get();
        org.joda.time.MonthDay monthDay13 = property10.addWrapFieldToCopy((int) (short) 1);
        org.joda.time.MonthDay monthDay15 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MonthDay monthDay17 = monthDay15.withChronologyRetainFields(chronology16);
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = monthDay15.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.MonthDay monthDay21 = monthDay15.plus(readablePeriod20);
        org.joda.time.MonthDay monthDay23 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MonthDay monthDay25 = monthDay23.withChronologyRetainFields(chronology24);
        org.joda.time.MonthDay monthDay27 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MonthDay monthDay29 = monthDay27.withChronologyRetainFields(chronology28);
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = monthDay27.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property32 = monthDay25.property(dateTimeFieldType31);
        int int33 = property32.get();
        org.joda.time.MonthDay monthDay35 = property32.addWrapFieldToCopy((int) (short) 1);
        boolean boolean36 = monthDay15.isBefore((org.joda.time.ReadablePartial) monthDay35);
        org.joda.time.MonthDay monthDay38 = monthDay35.minusMonths((int) (byte) 100);
        org.joda.time.MonthDay monthDay40 = monthDay38.plusMonths(1);
        org.joda.time.MonthDay monthDay42 = org.joda.time.MonthDay.parse("");
        org.joda.time.MonthDay monthDay44 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.MonthDay monthDay46 = monthDay44.withChronologyRetainFields(chronology45);
        org.joda.time.DateTimeFieldType dateTimeFieldType48 = monthDay44.getFieldType((int) (byte) 1);
        boolean boolean49 = monthDay42.isSupported(dateTimeFieldType48);
        boolean boolean50 = monthDay38.isSupported(dateTimeFieldType48);
        org.joda.time.Chronology chronology51 = monthDay38.getChronology();
        org.joda.time.MonthDay monthDay52 = monthDay13.withChronologyRetainFields(chronology51);
        int[] intArray53 = monthDay52.getValues();
        org.joda.time.MonthDay monthDay55 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.MonthDay monthDay57 = monthDay55.withChronologyRetainFields(chronology56);
        org.joda.time.DateTimeFieldType dateTimeFieldType59 = monthDay55.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod60 = null;
        org.joda.time.MonthDay monthDay61 = monthDay55.plus(readablePeriod60);
        org.joda.time.MonthDay monthDay63 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.MonthDay monthDay65 = monthDay63.withChronologyRetainFields(chronology64);
        org.joda.time.MonthDay monthDay67 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.MonthDay monthDay69 = monthDay67.withChronologyRetainFields(chronology68);
        org.joda.time.DateTimeFieldType dateTimeFieldType71 = monthDay67.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property72 = monthDay65.property(dateTimeFieldType71);
        int int73 = property72.get();
        org.joda.time.MonthDay monthDay75 = property72.addWrapFieldToCopy((int) (short) 1);
        boolean boolean76 = monthDay55.isBefore((org.joda.time.ReadablePartial) monthDay75);
        org.joda.time.MonthDay monthDay78 = monthDay75.minusMonths((int) (byte) 100);
        org.joda.time.MonthDay monthDay80 = monthDay78.plusMonths(1);
        org.joda.time.ReadablePeriod readablePeriod81 = null;
        org.joda.time.MonthDay monthDay82 = monthDay78.minus(readablePeriod81);
        org.joda.time.MonthDay monthDay84 = org.joda.time.MonthDay.parse("");
        org.joda.time.ReadablePeriod readablePeriod85 = null;
        org.joda.time.MonthDay monthDay87 = monthDay84.withPeriodAdded(readablePeriod85, 1);
        org.joda.time.MonthDay monthDay89 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology90 = null;
        org.joda.time.MonthDay monthDay91 = monthDay89.withChronologyRetainFields(chronology90);
        org.joda.time.DateTimeFieldType dateTimeFieldType93 = monthDay89.getFieldType((int) (byte) 1);
        int int94 = monthDay87.indexOf(dateTimeFieldType93);
        org.joda.time.MonthDay.Property property95 = monthDay82.property(dateTimeFieldType93);
        int int96 = monthDay52.get(dateTimeFieldType93);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(monthDay17);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertNotNull(monthDay23);
        org.junit.Assert.assertNotNull(monthDay25);
        org.junit.Assert.assertNotNull(monthDay27);
        org.junit.Assert.assertNotNull(monthDay29);
        org.junit.Assert.assertNotNull(dateTimeFieldType31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(monthDay35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(monthDay38);
        org.junit.Assert.assertNotNull(monthDay40);
        org.junit.Assert.assertNotNull(monthDay42);
        org.junit.Assert.assertNotNull(monthDay44);
        org.junit.Assert.assertNotNull(monthDay46);
        org.junit.Assert.assertNotNull(dateTimeFieldType48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(monthDay52);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[1, 2]");
        org.junit.Assert.assertNotNull(monthDay55);
        org.junit.Assert.assertNotNull(monthDay57);
        org.junit.Assert.assertNotNull(dateTimeFieldType59);
        org.junit.Assert.assertNotNull(monthDay61);
        org.junit.Assert.assertNotNull(monthDay63);
        org.junit.Assert.assertNotNull(monthDay65);
        org.junit.Assert.assertNotNull(monthDay67);
        org.junit.Assert.assertNotNull(monthDay69);
        org.junit.Assert.assertNotNull(dateTimeFieldType71);
        org.junit.Assert.assertNotNull(property72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 1 + "'", int73 == 1);
        org.junit.Assert.assertNotNull(monthDay75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNotNull(monthDay78);
        org.junit.Assert.assertNotNull(monthDay80);
        org.junit.Assert.assertNotNull(monthDay82);
        org.junit.Assert.assertNotNull(monthDay84);
        org.junit.Assert.assertNotNull(monthDay87);
        org.junit.Assert.assertNotNull(monthDay89);
        org.junit.Assert.assertNotNull(monthDay91);
        org.junit.Assert.assertNotNull(dateTimeFieldType93);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 1 + "'", int94 == 1);
        org.junit.Assert.assertNotNull(property95);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 2 + "'", int96 == 2);
    }

    @Test
    public void test0641() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0641");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        org.joda.time.MonthDay.Property property11 = monthDay3.monthOfYear();
        java.lang.String str12 = property11.getAsShortText();
        java.util.Locale locale14 = null;
        org.joda.time.MonthDay monthDay15 = property11.setCopy("2", locale14);
        org.joda.time.DurationFieldType durationFieldType16 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay18 = monthDay15.withFieldAdded(durationFieldType16, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Jan" + "'", str12, "Jan");
        org.junit.Assert.assertNotNull(monthDay15);
    }

    @Test
    public void test0642() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0642");
        org.joda.time.MonthDay monthDay0 = org.joda.time.MonthDay.now();
        org.joda.time.ReadablePeriod readablePeriod1 = null;
        org.joda.time.MonthDay monthDay2 = monthDay0.plus(readablePeriod1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MonthDay monthDay4 = new org.joda.time.MonthDay((java.lang.Object) monthDay2, chronology3);
        // The following exception was thrown during execution in test generation
        try {
            int int6 = monthDay4.getValue(12);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 12");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay0);
        org.junit.Assert.assertNotNull(monthDay2);
    }

    @Test
    public void test0643() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0643");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        java.lang.String str11 = property10.getAsText();
        org.joda.time.MonthDay monthDay13 = property10.setCopy((int) (byte) 1);
        java.util.Locale locale15 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str16 = monthDay13.toString("Property[dayOfMonth]", locale15);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: P");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "1" + "'", str11, "1");
        org.junit.Assert.assertNotNull(monthDay13);
    }

    @Test
    public void test0644() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0644");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        int int11 = property10.getMaximumValueOverall();
        java.lang.String str12 = property10.getName();
        java.lang.String str13 = property10.getAsShortText();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 31 + "'", int11 == 31);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "dayOfMonth" + "'", str12, "dayOfMonth");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "1" + "'", str13, "1");
    }

    @Test
    public void test0645() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0645");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay1.plus(readablePeriod6);
        org.joda.time.MonthDay monthDay9 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MonthDay monthDay11 = monthDay9.withChronologyRetainFields(chronology10);
        org.joda.time.MonthDay monthDay13 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MonthDay monthDay15 = monthDay13.withChronologyRetainFields(chronology14);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = monthDay13.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property18 = monthDay11.property(dateTimeFieldType17);
        int int19 = property18.get();
        org.joda.time.MonthDay monthDay21 = property18.addWrapFieldToCopy((int) (short) 1);
        boolean boolean22 = monthDay1.isBefore((org.joda.time.ReadablePartial) monthDay21);
        org.joda.time.MonthDay monthDay24 = monthDay21.minusMonths((int) (byte) 100);
        org.joda.time.MonthDay monthDay26 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.MonthDay monthDay28 = monthDay26.withChronologyRetainFields(chronology27);
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = monthDay26.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        org.joda.time.MonthDay monthDay32 = monthDay26.plus(readablePeriod31);
        org.joda.time.MonthDay monthDay34 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.MonthDay monthDay36 = monthDay34.withChronologyRetainFields(chronology35);
        org.joda.time.MonthDay monthDay38 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.MonthDay monthDay40 = monthDay38.withChronologyRetainFields(chronology39);
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = monthDay38.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property43 = monthDay36.property(dateTimeFieldType42);
        int int44 = property43.get();
        org.joda.time.MonthDay monthDay46 = property43.addWrapFieldToCopy((int) (short) 1);
        boolean boolean47 = monthDay26.isBefore((org.joda.time.ReadablePartial) monthDay46);
        org.joda.time.MonthDay monthDay49 = monthDay46.minusMonths((int) (byte) 100);
        org.joda.time.MonthDay monthDay51 = org.joda.time.MonthDay.parse("");
        org.joda.time.MonthDay monthDay53 = monthDay51.minusDays((int) '#');
        boolean boolean54 = monthDay49.isBefore((org.joda.time.ReadablePartial) monthDay53);
        org.joda.time.MonthDay monthDay56 = monthDay53.plusMonths((int) (byte) 1);
        int int57 = monthDay21.compareTo((org.joda.time.ReadablePartial) monthDay53);
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.MonthDay monthDay59 = monthDay21.withChronologyRetainFields(chronology58);
        org.joda.time.DateTimeField[] dateTimeFieldArray60 = monthDay59.getFields();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(monthDay9);
        org.junit.Assert.assertNotNull(monthDay11);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertNotNull(monthDay26);
        org.junit.Assert.assertNotNull(monthDay28);
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertNotNull(monthDay32);
        org.junit.Assert.assertNotNull(monthDay34);
        org.junit.Assert.assertNotNull(monthDay36);
        org.junit.Assert.assertNotNull(monthDay38);
        org.junit.Assert.assertNotNull(monthDay40);
        org.junit.Assert.assertNotNull(dateTimeFieldType42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNotNull(monthDay46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(monthDay49);
        org.junit.Assert.assertNotNull(monthDay51);
        org.junit.Assert.assertNotNull(monthDay53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(monthDay56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertNotNull(monthDay59);
        org.junit.Assert.assertNotNull(dateTimeFieldArray60);
    }

    @Test
    public void test0646() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0646");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        java.util.Locale locale11 = null;
        int int12 = property10.getMaximumTextLength(locale11);
        int int13 = property10.getMinimumValue();
        java.util.Locale locale14 = null;
        int int15 = property10.getMaximumTextLength(locale14);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2 + "'", int15 == 2);
    }

    @Test
    public void test0647() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0647");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay1.plus(readablePeriod6);
        org.joda.time.MonthDay monthDay9 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MonthDay monthDay11 = monthDay9.withChronologyRetainFields(chronology10);
        org.joda.time.MonthDay monthDay13 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MonthDay monthDay15 = monthDay13.withChronologyRetainFields(chronology14);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = monthDay13.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property18 = monthDay11.property(dateTimeFieldType17);
        int int19 = property18.get();
        org.joda.time.MonthDay monthDay21 = property18.addWrapFieldToCopy((int) (short) 1);
        boolean boolean22 = monthDay1.isBefore((org.joda.time.ReadablePartial) monthDay21);
        org.joda.time.MonthDay monthDay24 = monthDay21.minusMonths((int) (byte) 100);
        org.joda.time.MonthDay monthDay26 = monthDay24.plusMonths(1);
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.MonthDay monthDay28 = monthDay24.minus(readablePeriod27);
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.MonthDay monthDay30 = new org.joda.time.MonthDay(dateTimeZone29);
        boolean boolean31 = monthDay28.isEqual((org.joda.time.ReadablePartial) monthDay30);
        int int32 = monthDay28.size();
        java.lang.String str33 = monthDay28.toString();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(monthDay9);
        org.junit.Assert.assertNotNull(monthDay11);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertNotNull(monthDay26);
        org.junit.Assert.assertNotNull(monthDay28);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2 + "'", int32 == 2);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "--09-02" + "'", str33, "--09-02");
    }

    @Test
    public void test0648() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0648");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay1.plus(readablePeriod6);
        org.joda.time.MonthDay monthDay9 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MonthDay monthDay11 = monthDay9.withChronologyRetainFields(chronology10);
        org.joda.time.MonthDay monthDay13 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MonthDay monthDay15 = monthDay13.withChronologyRetainFields(chronology14);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = monthDay13.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property18 = monthDay11.property(dateTimeFieldType17);
        int int19 = property18.get();
        org.joda.time.MonthDay monthDay21 = property18.addWrapFieldToCopy((int) (short) 1);
        boolean boolean22 = monthDay1.isBefore((org.joda.time.ReadablePartial) monthDay21);
        org.joda.time.MonthDay monthDay24 = monthDay21.minusMonths((int) (byte) 100);
        org.joda.time.MonthDay monthDay26 = org.joda.time.MonthDay.parse("");
        org.joda.time.MonthDay monthDay28 = monthDay26.minusDays((int) '#');
        boolean boolean29 = monthDay24.isBefore((org.joda.time.ReadablePartial) monthDay28);
        org.joda.time.MonthDay monthDay31 = monthDay28.plusMonths((int) (byte) 1);
        int int32 = monthDay28.getDayOfMonth();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(monthDay9);
        org.junit.Assert.assertNotNull(monthDay11);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertNotNull(monthDay26);
        org.junit.Assert.assertNotNull(monthDay28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(monthDay31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 28 + "'", int32 == 28);
    }

    @Test
    public void test0649() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0649");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        int int11 = property10.get();
        org.joda.time.DurationField durationField12 = property10.getDurationField();
        org.joda.time.MonthDay monthDay14 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MonthDay monthDay16 = monthDay14.withChronologyRetainFields(chronology15);
        org.joda.time.MonthDay monthDay18 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MonthDay monthDay20 = monthDay18.withChronologyRetainFields(chronology19);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = monthDay18.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property23 = monthDay16.property(dateTimeFieldType22);
        boolean boolean24 = property10.equals((java.lang.Object) monthDay16);
        java.util.Locale locale25 = null;
        java.lang.String str26 = property10.getAsShortText(locale25);
        int int27 = property10.getMinimumValue();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(monthDay18);
        org.junit.Assert.assertNotNull(monthDay20);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "1" + "'", str26, "1");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
    }

    @Test
    public void test0650() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0650");
        org.joda.time.MonthDay monthDay2 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MonthDay monthDay4 = monthDay2.withChronologyRetainFields(chronology3);
        org.joda.time.MonthDay monthDay6 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MonthDay monthDay8 = monthDay6.withChronologyRetainFields(chronology7);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = monthDay6.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property11 = monthDay4.property(dateTimeFieldType10);
        java.lang.String str12 = property11.getAsText();
        org.joda.time.MonthDay monthDay14 = property11.setCopy((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.MonthDay monthDay16 = monthDay14.plus(readablePeriod15);
        org.joda.time.MonthDay monthDay18 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MonthDay monthDay20 = monthDay18.withChronologyRetainFields(chronology19);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = monthDay18.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.MonthDay monthDay24 = monthDay18.plus(readablePeriod23);
        org.joda.time.MonthDay monthDay26 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.MonthDay monthDay28 = monthDay26.withChronologyRetainFields(chronology27);
        org.joda.time.MonthDay monthDay30 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MonthDay monthDay32 = monthDay30.withChronologyRetainFields(chronology31);
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = monthDay30.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property35 = monthDay28.property(dateTimeFieldType34);
        int int36 = property35.get();
        org.joda.time.MonthDay monthDay38 = property35.addWrapFieldToCopy((int) (short) 1);
        boolean boolean39 = monthDay18.isBefore((org.joda.time.ReadablePartial) monthDay38);
        org.joda.time.MonthDay monthDay41 = monthDay38.minusMonths((int) (byte) 100);
        org.joda.time.MonthDay monthDay43 = monthDay41.plusMonths(1);
        org.joda.time.MonthDay monthDay45 = org.joda.time.MonthDay.parse("");
        org.joda.time.MonthDay monthDay47 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.MonthDay monthDay49 = monthDay47.withChronologyRetainFields(chronology48);
        org.joda.time.DateTimeFieldType dateTimeFieldType51 = monthDay47.getFieldType((int) (byte) 1);
        boolean boolean52 = monthDay45.isSupported(dateTimeFieldType51);
        boolean boolean53 = monthDay41.isSupported(dateTimeFieldType51);
        org.joda.time.Chronology chronology54 = monthDay41.getChronology();
        org.joda.time.MonthDay monthDay55 = monthDay16.withChronologyRetainFields(chronology54);
        org.joda.time.MonthDay monthDay56 = new org.joda.time.MonthDay((long) 11, chronology54);
        // The following exception was thrown during execution in test generation
        try {
            int int58 = monthDay56.getValue((int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 52");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay2);
        org.junit.Assert.assertNotNull(monthDay4);
        org.junit.Assert.assertNotNull(monthDay6);
        org.junit.Assert.assertNotNull(monthDay8);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "1" + "'", str12, "1");
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(monthDay18);
        org.junit.Assert.assertNotNull(monthDay20);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertNotNull(monthDay26);
        org.junit.Assert.assertNotNull(monthDay28);
        org.junit.Assert.assertNotNull(monthDay30);
        org.junit.Assert.assertNotNull(monthDay32);
        org.junit.Assert.assertNotNull(dateTimeFieldType34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(monthDay38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(monthDay41);
        org.junit.Assert.assertNotNull(monthDay43);
        org.junit.Assert.assertNotNull(monthDay45);
        org.junit.Assert.assertNotNull(monthDay47);
        org.junit.Assert.assertNotNull(monthDay49);
        org.junit.Assert.assertNotNull(dateTimeFieldType51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertNotNull(monthDay55);
    }

    @Test
    public void test0651() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0651");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        int int11 = property10.get();
        org.joda.time.DurationField durationField12 = property10.getDurationField();
        org.joda.time.MonthDay monthDay14 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MonthDay monthDay16 = monthDay14.withChronologyRetainFields(chronology15);
        org.joda.time.MonthDay monthDay18 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MonthDay monthDay20 = monthDay18.withChronologyRetainFields(chronology19);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = monthDay18.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property23 = monthDay16.property(dateTimeFieldType22);
        boolean boolean24 = property10.equals((java.lang.Object) monthDay16);
        org.joda.time.MonthDay monthDay25 = new org.joda.time.MonthDay((java.lang.Object) monthDay16);
        org.joda.time.MonthDay monthDay27 = org.joda.time.MonthDay.parse("");
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.MonthDay monthDay30 = monthDay27.withPeriodAdded(readablePeriod28, 1);
        org.joda.time.MonthDay monthDay32 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.MonthDay monthDay34 = monthDay32.withChronologyRetainFields(chronology33);
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = monthDay32.getFieldType((int) (byte) 1);
        int int37 = monthDay30.indexOf(dateTimeFieldType36);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.MonthDay monthDay39 = monthDay30.withChronologyRetainFields(chronology38);
        boolean boolean40 = monthDay25.isBefore((org.joda.time.ReadablePartial) monthDay39);
        org.joda.time.MonthDay monthDay42 = org.joda.time.MonthDay.parse("");
        org.joda.time.MonthDay monthDay44 = monthDay42.minusDays((int) '#');
        org.joda.time.MonthDay monthDay46 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.MonthDay monthDay48 = monthDay46.withChronologyRetainFields(chronology47);
        org.joda.time.DateTimeFieldType dateTimeFieldType50 = monthDay46.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property51 = monthDay46.dayOfMonth();
        org.joda.time.Chronology chronology52 = monthDay46.getChronology();
        org.joda.time.Chronology chronology53 = monthDay46.getChronology();
        org.joda.time.ReadableInstant readableInstant54 = null;
        org.joda.time.DateTime dateTime55 = monthDay46.toDateTime(readableInstant54);
        org.joda.time.MonthDay monthDay57 = monthDay46.plusMonths((int) ' ');
        boolean boolean58 = monthDay42.isAfter((org.joda.time.ReadablePartial) monthDay57);
        org.joda.time.MonthDay monthDay60 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.MonthDay monthDay62 = monthDay60.withChronologyRetainFields(chronology61);
        org.joda.time.DateTimeFieldType dateTimeFieldType64 = monthDay60.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod65 = null;
        org.joda.time.MonthDay monthDay66 = monthDay60.plus(readablePeriod65);
        org.joda.time.MonthDay monthDay68 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology69 = null;
        org.joda.time.MonthDay monthDay70 = monthDay68.withChronologyRetainFields(chronology69);
        org.joda.time.MonthDay monthDay72 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology73 = null;
        org.joda.time.MonthDay monthDay74 = monthDay72.withChronologyRetainFields(chronology73);
        org.joda.time.DateTimeFieldType dateTimeFieldType76 = monthDay72.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property77 = monthDay70.property(dateTimeFieldType76);
        int int78 = property77.get();
        org.joda.time.MonthDay monthDay80 = property77.addWrapFieldToCopy((int) (short) 1);
        boolean boolean81 = monthDay60.isBefore((org.joda.time.ReadablePartial) monthDay80);
        org.joda.time.MonthDay monthDay83 = monthDay80.minusMonths((int) (byte) 100);
        org.joda.time.MonthDay monthDay85 = monthDay83.plusMonths(1);
        int int86 = monthDay57.compareTo((org.joda.time.ReadablePartial) monthDay83);
        int int87 = monthDay25.compareTo((org.joda.time.ReadablePartial) monthDay83);
        int int88 = monthDay83.getMonthOfYear();
        org.joda.time.MonthDay monthDay90 = monthDay83.plusDays(100);
        org.joda.time.MonthDay.Property property91 = monthDay90.dayOfMonth();
        org.joda.time.MonthDay monthDay92 = property91.getMonthDay();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(monthDay18);
        org.junit.Assert.assertNotNull(monthDay20);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(monthDay27);
        org.junit.Assert.assertNotNull(monthDay30);
        org.junit.Assert.assertNotNull(monthDay32);
        org.junit.Assert.assertNotNull(monthDay34);
        org.junit.Assert.assertNotNull(dateTimeFieldType36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(monthDay39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(monthDay42);
        org.junit.Assert.assertNotNull(monthDay44);
        org.junit.Assert.assertNotNull(monthDay46);
        org.junit.Assert.assertNotNull(monthDay48);
        org.junit.Assert.assertNotNull(dateTimeFieldType50);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(monthDay57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(monthDay60);
        org.junit.Assert.assertNotNull(monthDay62);
        org.junit.Assert.assertNotNull(dateTimeFieldType64);
        org.junit.Assert.assertNotNull(monthDay66);
        org.junit.Assert.assertNotNull(monthDay68);
        org.junit.Assert.assertNotNull(monthDay70);
        org.junit.Assert.assertNotNull(monthDay72);
        org.junit.Assert.assertNotNull(monthDay74);
        org.junit.Assert.assertNotNull(dateTimeFieldType76);
        org.junit.Assert.assertNotNull(property77);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 1 + "'", int78 == 1);
        org.junit.Assert.assertNotNull(monthDay80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertNotNull(monthDay83);
        org.junit.Assert.assertNotNull(monthDay85);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + (-1) + "'", int86 == (-1));
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + (-1) + "'", int87 == (-1));
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 9 + "'", int88 == 9);
        org.junit.Assert.assertNotNull(monthDay90);
        org.junit.Assert.assertNotNull(property91);
        org.junit.Assert.assertNotNull(monthDay92);
    }

    @Test
    public void test0652() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0652");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay1.plus(readablePeriod6);
        org.joda.time.MonthDay monthDay9 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MonthDay monthDay11 = monthDay9.withChronologyRetainFields(chronology10);
        org.joda.time.MonthDay monthDay13 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MonthDay monthDay15 = monthDay13.withChronologyRetainFields(chronology14);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = monthDay13.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property18 = monthDay11.property(dateTimeFieldType17);
        int int19 = property18.get();
        org.joda.time.MonthDay monthDay21 = property18.addWrapFieldToCopy((int) (short) 1);
        boolean boolean22 = monthDay1.isBefore((org.joda.time.ReadablePartial) monthDay21);
        org.joda.time.MonthDay monthDay24 = monthDay21.minusMonths((int) (byte) 100);
        org.joda.time.MonthDay monthDay26 = monthDay24.minusDays(31);
        org.joda.time.MonthDay monthDay28 = org.joda.time.MonthDay.parse("");
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        org.joda.time.MonthDay monthDay31 = monthDay28.withPeriodAdded(readablePeriod29, 1);
        org.joda.time.MonthDay monthDay33 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MonthDay monthDay35 = monthDay33.withChronologyRetainFields(chronology34);
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = monthDay33.getFieldType((int) (byte) 1);
        int int38 = monthDay31.indexOf(dateTimeFieldType37);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.MonthDay monthDay40 = monthDay31.withChronologyRetainFields(chronology39);
        org.joda.time.MonthDay monthDay42 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.MonthDay monthDay44 = monthDay42.withChronologyRetainFields(chronology43);
        org.joda.time.DateTimeFieldType dateTimeFieldType46 = monthDay42.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod47 = null;
        org.joda.time.MonthDay monthDay48 = monthDay42.plus(readablePeriod47);
        org.joda.time.MonthDay monthDay50 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.MonthDay monthDay52 = monthDay50.withChronologyRetainFields(chronology51);
        org.joda.time.MonthDay monthDay54 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.MonthDay monthDay56 = monthDay54.withChronologyRetainFields(chronology55);
        org.joda.time.DateTimeFieldType dateTimeFieldType58 = monthDay54.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property59 = monthDay52.property(dateTimeFieldType58);
        int int60 = property59.get();
        org.joda.time.MonthDay monthDay62 = property59.addWrapFieldToCopy((int) (short) 1);
        boolean boolean63 = monthDay42.isBefore((org.joda.time.ReadablePartial) monthDay62);
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.MonthDay monthDay65 = monthDay42.withChronologyRetainFields(chronology64);
        org.joda.time.Chronology chronology66 = monthDay65.getChronology();
        org.joda.time.MonthDay monthDay67 = monthDay40.withChronologyRetainFields(chronology66);
        org.joda.time.MonthDay monthDay68 = monthDay26.withChronologyRetainFields(chronology66);
        org.joda.time.Chronology chronology69 = monthDay68.getChronology();
        org.joda.time.DurationFieldType durationFieldType70 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay72 = monthDay68.withFieldAdded(durationFieldType70, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(monthDay9);
        org.junit.Assert.assertNotNull(monthDay11);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertNotNull(monthDay26);
        org.junit.Assert.assertNotNull(monthDay28);
        org.junit.Assert.assertNotNull(monthDay31);
        org.junit.Assert.assertNotNull(monthDay33);
        org.junit.Assert.assertNotNull(monthDay35);
        org.junit.Assert.assertNotNull(dateTimeFieldType37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(monthDay40);
        org.junit.Assert.assertNotNull(monthDay42);
        org.junit.Assert.assertNotNull(monthDay44);
        org.junit.Assert.assertNotNull(dateTimeFieldType46);
        org.junit.Assert.assertNotNull(monthDay48);
        org.junit.Assert.assertNotNull(monthDay50);
        org.junit.Assert.assertNotNull(monthDay52);
        org.junit.Assert.assertNotNull(monthDay54);
        org.junit.Assert.assertNotNull(monthDay56);
        org.junit.Assert.assertNotNull(dateTimeFieldType58);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
        org.junit.Assert.assertNotNull(monthDay62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(monthDay65);
        org.junit.Assert.assertNotNull(chronology66);
        org.junit.Assert.assertNotNull(monthDay67);
        org.junit.Assert.assertNotNull(monthDay68);
        org.junit.Assert.assertNotNull(chronology69);
    }

    @Test
    public void test0653() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0653");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        int int11 = property10.get();
        int int12 = property10.getMaximumValue();
        org.joda.time.MonthDay monthDay14 = property10.setCopy((int) (short) 1);
        org.joda.time.MonthDay monthDay16 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MonthDay monthDay18 = monthDay16.withChronologyRetainFields(chronology17);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = monthDay16.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.MonthDay monthDay22 = monthDay16.plus(readablePeriod21);
        int int23 = monthDay16.getDayOfMonth();
        int int24 = property10.compareTo((org.joda.time.ReadablePartial) monthDay16);
        org.joda.time.DateTimeField[] dateTimeFieldArray25 = monthDay16.getFields();
        org.joda.time.MonthDay monthDay27 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MonthDay monthDay29 = monthDay27.withChronologyRetainFields(chronology28);
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = monthDay27.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property32 = monthDay27.dayOfMonth();
        org.joda.time.MonthDay monthDay34 = property32.addWrapFieldToCopy(1);
        boolean boolean35 = monthDay16.isEqual((org.joda.time.ReadablePartial) monthDay34);
        java.lang.String str36 = monthDay16.toString();
        org.joda.time.MonthDay monthDay38 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.MonthDay monthDay40 = monthDay38.withChronologyRetainFields(chronology39);
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = monthDay38.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod43 = null;
        org.joda.time.MonthDay monthDay44 = monthDay38.plus(readablePeriod43);
        org.joda.time.MonthDay monthDay46 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.MonthDay monthDay48 = monthDay46.withChronologyRetainFields(chronology47);
        org.joda.time.MonthDay monthDay50 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.MonthDay monthDay52 = monthDay50.withChronologyRetainFields(chronology51);
        org.joda.time.DateTimeFieldType dateTimeFieldType54 = monthDay50.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property55 = monthDay48.property(dateTimeFieldType54);
        int int56 = property55.get();
        org.joda.time.MonthDay monthDay58 = property55.addWrapFieldToCopy((int) (short) 1);
        boolean boolean59 = monthDay38.isBefore((org.joda.time.ReadablePartial) monthDay58);
        org.joda.time.MonthDay monthDay61 = monthDay58.minusMonths((int) (byte) 100);
        org.joda.time.MonthDay monthDay63 = monthDay61.plusMonths(1);
        int int64 = monthDay61.size();
        org.joda.time.MonthDay monthDay66 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.MonthDay monthDay68 = monthDay66.withChronologyRetainFields(chronology67);
        org.joda.time.MonthDay monthDay70 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology71 = null;
        org.joda.time.MonthDay monthDay72 = monthDay70.withChronologyRetainFields(chronology71);
        org.joda.time.DateTimeFieldType dateTimeFieldType74 = monthDay70.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property75 = monthDay68.property(dateTimeFieldType74);
        int int76 = property75.get();
        org.joda.time.DurationField durationField77 = property75.getDurationField();
        org.joda.time.MonthDay monthDay79 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology80 = null;
        org.joda.time.MonthDay monthDay81 = monthDay79.withChronologyRetainFields(chronology80);
        org.joda.time.MonthDay monthDay83 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology84 = null;
        org.joda.time.MonthDay monthDay85 = monthDay83.withChronologyRetainFields(chronology84);
        org.joda.time.DateTimeFieldType dateTimeFieldType87 = monthDay83.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property88 = monthDay81.property(dateTimeFieldType87);
        boolean boolean89 = property75.equals((java.lang.Object) monthDay81);
        int int90 = property75.getMinimumValueOverall();
        org.joda.time.DateTimeFieldType dateTimeFieldType91 = property75.getFieldType();
        org.joda.time.MonthDay monthDay93 = monthDay61.withField(dateTimeFieldType91, (int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType95 = monthDay93.getFieldType(0);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay97 = monthDay16.withField(dateTimeFieldType95, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 100 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 31 + "'", int12 == 31);
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(monthDay18);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertNotNull(monthDay22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldArray25);
        org.junit.Assert.assertNotNull(monthDay27);
        org.junit.Assert.assertNotNull(monthDay29);
        org.junit.Assert.assertNotNull(dateTimeFieldType31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(monthDay34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "--01-01" + "'", str36, "--01-01");
        org.junit.Assert.assertNotNull(monthDay38);
        org.junit.Assert.assertNotNull(monthDay40);
        org.junit.Assert.assertNotNull(dateTimeFieldType42);
        org.junit.Assert.assertNotNull(monthDay44);
        org.junit.Assert.assertNotNull(monthDay46);
        org.junit.Assert.assertNotNull(monthDay48);
        org.junit.Assert.assertNotNull(monthDay50);
        org.junit.Assert.assertNotNull(monthDay52);
        org.junit.Assert.assertNotNull(dateTimeFieldType54);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertNotNull(monthDay58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(monthDay61);
        org.junit.Assert.assertNotNull(monthDay63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 2 + "'", int64 == 2);
        org.junit.Assert.assertNotNull(monthDay66);
        org.junit.Assert.assertNotNull(monthDay68);
        org.junit.Assert.assertNotNull(monthDay70);
        org.junit.Assert.assertNotNull(monthDay72);
        org.junit.Assert.assertNotNull(dateTimeFieldType74);
        org.junit.Assert.assertNotNull(property75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 1 + "'", int76 == 1);
        org.junit.Assert.assertNotNull(durationField77);
        org.junit.Assert.assertNotNull(monthDay79);
        org.junit.Assert.assertNotNull(monthDay81);
        org.junit.Assert.assertNotNull(monthDay83);
        org.junit.Assert.assertNotNull(monthDay85);
        org.junit.Assert.assertNotNull(dateTimeFieldType87);
        org.junit.Assert.assertNotNull(property88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 1 + "'", int90 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType91);
        org.junit.Assert.assertNotNull(monthDay93);
        org.junit.Assert.assertNotNull(dateTimeFieldType95);
    }

    @Test
    public void test0654() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0654");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        int int11 = property10.get();
        org.joda.time.DurationField durationField12 = property10.getDurationField();
        java.util.Locale locale13 = null;
        int int14 = property10.getMaximumTextLength(locale13);
        org.joda.time.MonthDay monthDay16 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MonthDay monthDay18 = monthDay16.withChronologyRetainFields(chronology17);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = monthDay16.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property21 = monthDay16.dayOfMonth();
        org.joda.time.Chronology chronology22 = monthDay16.getChronology();
        org.joda.time.Chronology chronology23 = monthDay16.getChronology();
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.DateTime dateTime25 = monthDay16.toDateTime(readableInstant24);
        int int26 = property10.compareTo((org.joda.time.ReadableInstant) dateTime25);
        int int27 = property10.getMinimumValueOverall();
        java.lang.String str28 = property10.getAsText();
        java.util.Locale locale29 = null;
        java.lang.String str30 = property10.getAsText(locale29);
        org.joda.time.MonthDay monthDay32 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.MonthDay monthDay34 = monthDay32.withChronologyRetainFields(chronology33);
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = monthDay32.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod37 = null;
        org.joda.time.MonthDay monthDay38 = monthDay32.plus(readablePeriod37);
        org.joda.time.MonthDay monthDay40 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.MonthDay monthDay42 = monthDay40.withChronologyRetainFields(chronology41);
        org.joda.time.MonthDay monthDay44 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.MonthDay monthDay46 = monthDay44.withChronologyRetainFields(chronology45);
        org.joda.time.DateTimeFieldType dateTimeFieldType48 = monthDay44.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property49 = monthDay42.property(dateTimeFieldType48);
        int int50 = property49.get();
        org.joda.time.MonthDay monthDay52 = property49.addWrapFieldToCopy((int) (short) 1);
        boolean boolean53 = monthDay32.isBefore((org.joda.time.ReadablePartial) monthDay52);
        org.joda.time.MonthDay.Property property54 = monthDay32.monthOfYear();
        org.joda.time.MonthDay monthDay56 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.MonthDay monthDay58 = monthDay56.withChronologyRetainFields(chronology57);
        org.joda.time.DateTimeFieldType dateTimeFieldType60 = monthDay56.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod61 = null;
        org.joda.time.MonthDay monthDay62 = monthDay56.plus(readablePeriod61);
        org.joda.time.MonthDay monthDay64 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.MonthDay monthDay66 = monthDay64.withChronologyRetainFields(chronology65);
        org.joda.time.MonthDay monthDay68 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology69 = null;
        org.joda.time.MonthDay monthDay70 = monthDay68.withChronologyRetainFields(chronology69);
        org.joda.time.DateTimeFieldType dateTimeFieldType72 = monthDay68.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property73 = monthDay66.property(dateTimeFieldType72);
        int int74 = property73.get();
        org.joda.time.MonthDay monthDay76 = property73.addWrapFieldToCopy((int) (short) 1);
        boolean boolean77 = monthDay56.isBefore((org.joda.time.ReadablePartial) monthDay76);
        boolean boolean78 = monthDay32.isAfter((org.joda.time.ReadablePartial) monthDay76);
        org.joda.time.MonthDay monthDay80 = monthDay76.withMonthOfYear(12);
        int int81 = property10.compareTo((org.joda.time.ReadablePartial) monthDay80);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(monthDay18);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "1" + "'", str28, "1");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "1" + "'", str30, "1");
        org.junit.Assert.assertNotNull(monthDay32);
        org.junit.Assert.assertNotNull(monthDay34);
        org.junit.Assert.assertNotNull(dateTimeFieldType36);
        org.junit.Assert.assertNotNull(monthDay38);
        org.junit.Assert.assertNotNull(monthDay40);
        org.junit.Assert.assertNotNull(monthDay42);
        org.junit.Assert.assertNotNull(monthDay44);
        org.junit.Assert.assertNotNull(monthDay46);
        org.junit.Assert.assertNotNull(dateTimeFieldType48);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertNotNull(monthDay52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(monthDay56);
        org.junit.Assert.assertNotNull(monthDay58);
        org.junit.Assert.assertNotNull(dateTimeFieldType60);
        org.junit.Assert.assertNotNull(monthDay62);
        org.junit.Assert.assertNotNull(monthDay64);
        org.junit.Assert.assertNotNull(monthDay66);
        org.junit.Assert.assertNotNull(monthDay68);
        org.junit.Assert.assertNotNull(monthDay70);
        org.junit.Assert.assertNotNull(dateTimeFieldType72);
        org.junit.Assert.assertNotNull(property73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 1 + "'", int74 == 1);
        org.junit.Assert.assertNotNull(monthDay76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(monthDay80);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + (-1) + "'", int81 == (-1));
    }

    @Test
    public void test0655() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0655");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        int int11 = property10.get();
        org.joda.time.MonthDay monthDay13 = property10.addToCopy((int) (short) 0);
        java.util.Locale locale15 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay16 = property10.setCopy("Property[dayOfMonth]", locale15);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"Property[dayOfMonth]\" for dayOfMonth is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(monthDay13);
    }

    @Test
    public void test0656() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0656");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        int int11 = property10.get();
        org.joda.time.MonthDay monthDay13 = property10.addWrapFieldToCopy((int) (short) 1);
        org.joda.time.MonthDay.Property property14 = monthDay13.dayOfMonth();
        int int15 = property14.getMaximumValue();
        int int16 = property14.getMaximumValueOverall();
        org.joda.time.DurationField durationField17 = property14.getRangeDurationField();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 31 + "'", int15 == 31);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 31 + "'", int16 == 31);
        org.junit.Assert.assertNotNull(durationField17);
    }

    @Test
    public void test0657() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0657");
        org.joda.time.MonthDay monthDay2 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MonthDay monthDay4 = monthDay2.withChronologyRetainFields(chronology3);
        org.joda.time.MonthDay monthDay6 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MonthDay monthDay8 = monthDay6.withChronologyRetainFields(chronology7);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = monthDay6.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property11 = monthDay4.property(dateTimeFieldType10);
        org.joda.time.MonthDay.Property property12 = monthDay4.monthOfYear();
        int int13 = monthDay4.getDayOfMonth();
        org.joda.time.MonthDay.Property property14 = monthDay4.dayOfMonth();
        int int15 = monthDay4.getDayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.MonthDay monthDay17 = monthDay4.plus(readablePeriod16);
        org.joda.time.MonthDay monthDay19 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MonthDay monthDay21 = monthDay19.withChronologyRetainFields(chronology20);
        org.joda.time.MonthDay monthDay23 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MonthDay monthDay25 = monthDay23.withChronologyRetainFields(chronology24);
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = monthDay23.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property28 = monthDay21.property(dateTimeFieldType27);
        org.joda.time.MonthDay.Property property29 = monthDay21.monthOfYear();
        int int30 = monthDay21.getDayOfMonth();
        org.joda.time.MonthDay.Property property31 = monthDay21.dayOfMonth();
        int int32 = monthDay21.getDayOfMonth();
        org.joda.time.MonthDay monthDay34 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.MonthDay monthDay36 = monthDay34.withChronologyRetainFields(chronology35);
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = monthDay34.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property39 = monthDay34.dayOfMonth();
        org.joda.time.Chronology chronology40 = monthDay34.getChronology();
        org.joda.time.MonthDay monthDay41 = monthDay21.withChronologyRetainFields(chronology40);
        org.joda.time.MonthDay monthDay42 = monthDay17.withChronologyRetainFields(chronology40);
        org.joda.time.MonthDay monthDay44 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.MonthDay monthDay46 = monthDay44.withChronologyRetainFields(chronology45);
        org.joda.time.MonthDay monthDay48 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.MonthDay monthDay50 = monthDay48.withChronologyRetainFields(chronology49);
        org.joda.time.DateTimeFieldType dateTimeFieldType52 = monthDay48.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property53 = monthDay46.property(dateTimeFieldType52);
        org.joda.time.MonthDay.Property property54 = monthDay46.monthOfYear();
        int int55 = monthDay46.getDayOfMonth();
        org.joda.time.MonthDay.Property property56 = monthDay46.dayOfMonth();
        int int57 = monthDay46.getDayOfMonth();
        org.joda.time.MonthDay monthDay59 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.MonthDay monthDay61 = monthDay59.withChronologyRetainFields(chronology60);
        org.joda.time.DateTimeFieldType dateTimeFieldType63 = monthDay59.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property64 = monthDay59.dayOfMonth();
        org.joda.time.Chronology chronology65 = monthDay59.getChronology();
        org.joda.time.MonthDay monthDay66 = monthDay46.withChronologyRetainFields(chronology65);
        org.joda.time.MonthDay monthDay67 = new org.joda.time.MonthDay((java.lang.Object) monthDay17, chronology65);
        org.joda.time.MonthDay monthDay69 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology70 = null;
        org.joda.time.MonthDay monthDay71 = monthDay69.withChronologyRetainFields(chronology70);
        org.joda.time.MonthDay monthDay73 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology74 = null;
        org.joda.time.MonthDay monthDay75 = monthDay73.withChronologyRetainFields(chronology74);
        org.joda.time.DateTimeFieldType dateTimeFieldType77 = monthDay73.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property78 = monthDay73.dayOfMonth();
        org.joda.time.Chronology chronology79 = monthDay73.getChronology();
        org.joda.time.MonthDay monthDay80 = org.joda.time.MonthDay.now(chronology79);
        org.joda.time.MonthDay monthDay81 = monthDay71.withChronologyRetainFields(chronology79);
        org.joda.time.MonthDay monthDay82 = monthDay17.withChronologyRetainFields(chronology79);
        org.joda.time.MonthDay monthDay83 = new org.joda.time.MonthDay((long) (short) 1, chronology79);
        org.junit.Assert.assertNotNull(monthDay2);
        org.junit.Assert.assertNotNull(monthDay4);
        org.junit.Assert.assertNotNull(monthDay6);
        org.junit.Assert.assertNotNull(monthDay8);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(monthDay17);
        org.junit.Assert.assertNotNull(monthDay19);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertNotNull(monthDay23);
        org.junit.Assert.assertNotNull(monthDay25);
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(monthDay34);
        org.junit.Assert.assertNotNull(monthDay36);
        org.junit.Assert.assertNotNull(dateTimeFieldType38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(monthDay41);
        org.junit.Assert.assertNotNull(monthDay42);
        org.junit.Assert.assertNotNull(monthDay44);
        org.junit.Assert.assertNotNull(monthDay46);
        org.junit.Assert.assertNotNull(monthDay48);
        org.junit.Assert.assertNotNull(monthDay50);
        org.junit.Assert.assertNotNull(dateTimeFieldType52);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertNotNull(monthDay59);
        org.junit.Assert.assertNotNull(monthDay61);
        org.junit.Assert.assertNotNull(dateTimeFieldType63);
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertNotNull(chronology65);
        org.junit.Assert.assertNotNull(monthDay66);
        org.junit.Assert.assertNotNull(monthDay69);
        org.junit.Assert.assertNotNull(monthDay71);
        org.junit.Assert.assertNotNull(monthDay73);
        org.junit.Assert.assertNotNull(monthDay75);
        org.junit.Assert.assertNotNull(dateTimeFieldType77);
        org.junit.Assert.assertNotNull(property78);
        org.junit.Assert.assertNotNull(chronology79);
        org.junit.Assert.assertNotNull(monthDay80);
        org.junit.Assert.assertNotNull(monthDay81);
        org.junit.Assert.assertNotNull(monthDay82);
    }

    @Test
    public void test0658() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0658");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        int int11 = property10.get();
        java.lang.String str12 = property10.toString();
        org.joda.time.MonthDay monthDay14 = property10.addToCopy(31);
        int int15 = property10.getMaximumValueOverall();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Property[dayOfMonth]" + "'", str12, "Property[dayOfMonth]");
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 31 + "'", int15 == 31);
    }

    @Test
    public void test0659() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0659");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay1.plus(readablePeriod6);
        org.joda.time.MonthDay monthDay9 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MonthDay monthDay11 = monthDay9.withChronologyRetainFields(chronology10);
        org.joda.time.MonthDay monthDay13 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MonthDay monthDay15 = monthDay13.withChronologyRetainFields(chronology14);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = monthDay13.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property18 = monthDay11.property(dateTimeFieldType17);
        int int19 = property18.get();
        org.joda.time.MonthDay monthDay21 = property18.addWrapFieldToCopy((int) (short) 1);
        boolean boolean22 = monthDay1.isBefore((org.joda.time.ReadablePartial) monthDay21);
        org.joda.time.MonthDay monthDay24 = monthDay21.minusMonths((int) (byte) 100);
        int int25 = monthDay24.getMonthOfYear();
        org.joda.time.MonthDay monthDay27 = monthDay24.withMonthOfYear(1);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField29 = monthDay27.getField((int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 10");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(monthDay9);
        org.junit.Assert.assertNotNull(monthDay11);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 9 + "'", int25 == 9);
        org.junit.Assert.assertNotNull(monthDay27);
    }

    @Test
    public void test0660() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0660");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay2 = new org.joda.time.MonthDay(12, 100);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 100 for dayOfMonth must not be larger than 31");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0661() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0661");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay1.plus(readablePeriod6);
        int int8 = monthDay7.getMonthOfYear();
        org.joda.time.MonthDay monthDay10 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MonthDay monthDay12 = monthDay10.withChronologyRetainFields(chronology11);
        org.joda.time.MonthDay monthDay14 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MonthDay monthDay16 = monthDay14.withChronologyRetainFields(chronology15);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = monthDay14.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property19 = monthDay12.property(dateTimeFieldType18);
        java.util.Locale locale20 = null;
        int int21 = property19.getMaximumTextLength(locale20);
        org.joda.time.MonthDay monthDay23 = property19.addWrapFieldToCopy((int) (byte) 0);
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.MonthDay monthDay25 = monthDay23.minus(readablePeriod24);
        boolean boolean26 = monthDay7.isAfter((org.joda.time.ReadablePartial) monthDay23);
        org.joda.time.MonthDay monthDay28 = org.joda.time.MonthDay.parse("");
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        org.joda.time.MonthDay monthDay31 = monthDay28.withPeriodAdded(readablePeriod29, 1);
        org.joda.time.ReadablePeriod readablePeriod32 = null;
        org.joda.time.MonthDay monthDay33 = monthDay28.plus(readablePeriod32);
        org.joda.time.MonthDay monthDay35 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.MonthDay monthDay37 = monthDay35.withChronologyRetainFields(chronology36);
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = monthDay35.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod40 = null;
        org.joda.time.MonthDay monthDay41 = monthDay35.plus(readablePeriod40);
        org.joda.time.MonthDay monthDay43 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.MonthDay monthDay45 = monthDay43.withChronologyRetainFields(chronology44);
        org.joda.time.MonthDay monthDay47 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.MonthDay monthDay49 = monthDay47.withChronologyRetainFields(chronology48);
        org.joda.time.DateTimeFieldType dateTimeFieldType51 = monthDay47.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property52 = monthDay45.property(dateTimeFieldType51);
        int int53 = property52.get();
        org.joda.time.MonthDay monthDay55 = property52.addWrapFieldToCopy((int) (short) 1);
        boolean boolean56 = monthDay35.isBefore((org.joda.time.ReadablePartial) monthDay55);
        org.joda.time.MonthDay monthDay58 = monthDay55.minusMonths((int) (byte) 100);
        org.joda.time.MonthDay monthDay60 = monthDay58.plusMonths(1);
        org.joda.time.MonthDay monthDay62 = org.joda.time.MonthDay.parse("");
        org.joda.time.MonthDay monthDay64 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.MonthDay monthDay66 = monthDay64.withChronologyRetainFields(chronology65);
        org.joda.time.DateTimeFieldType dateTimeFieldType68 = monthDay64.getFieldType((int) (byte) 1);
        boolean boolean69 = monthDay62.isSupported(dateTimeFieldType68);
        boolean boolean70 = monthDay58.isSupported(dateTimeFieldType68);
        boolean boolean71 = monthDay33.isAfter((org.joda.time.ReadablePartial) monthDay58);
        org.joda.time.MonthDay monthDay73 = monthDay58.minusMonths((int) (byte) 100);
        boolean boolean74 = monthDay23.equals((java.lang.Object) (byte) 100);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(monthDay10);
        org.junit.Assert.assertNotNull(monthDay12);
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2 + "'", int21 == 2);
        org.junit.Assert.assertNotNull(monthDay23);
        org.junit.Assert.assertNotNull(monthDay25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(monthDay28);
        org.junit.Assert.assertNotNull(monthDay31);
        org.junit.Assert.assertNotNull(monthDay33);
        org.junit.Assert.assertNotNull(monthDay35);
        org.junit.Assert.assertNotNull(monthDay37);
        org.junit.Assert.assertNotNull(dateTimeFieldType39);
        org.junit.Assert.assertNotNull(monthDay41);
        org.junit.Assert.assertNotNull(monthDay43);
        org.junit.Assert.assertNotNull(monthDay45);
        org.junit.Assert.assertNotNull(monthDay47);
        org.junit.Assert.assertNotNull(monthDay49);
        org.junit.Assert.assertNotNull(dateTimeFieldType51);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertNotNull(monthDay55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(monthDay58);
        org.junit.Assert.assertNotNull(monthDay60);
        org.junit.Assert.assertNotNull(monthDay62);
        org.junit.Assert.assertNotNull(monthDay64);
        org.junit.Assert.assertNotNull(monthDay66);
        org.junit.Assert.assertNotNull(dateTimeFieldType68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(monthDay73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
    }

    @Test
    public void test0662() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0662");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay2 = new org.joda.time.MonthDay(0, 0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 0 for monthOfYear must not be smaller than 1");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0663() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0663");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property6 = monthDay1.dayOfMonth();
        org.joda.time.Chronology chronology7 = monthDay1.getChronology();
        org.joda.time.Chronology chronology8 = monthDay1.getChronology();
        org.joda.time.MonthDay monthDay9 = org.joda.time.MonthDay.now(chronology8);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = null;
        java.lang.String str11 = monthDay9.toString(dateTimeFormatter10);
        int int12 = monthDay9.getMonthOfYear();
        org.joda.time.DateTimeField[] dateTimeFieldArray13 = monthDay9.getFields();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(monthDay9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "--11-25" + "'", str11, "--11-25");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 11 + "'", int12 == 11);
        org.junit.Assert.assertNotNull(dateTimeFieldArray13);
    }

    @Test
    public void test0664() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0664");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.MonthDay monthDay4 = monthDay1.withPeriodAdded(readablePeriod2, 1);
        org.joda.time.MonthDay monthDay6 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MonthDay monthDay8 = monthDay6.withChronologyRetainFields(chronology7);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = monthDay6.getFieldType((int) (byte) 1);
        int int11 = monthDay4.indexOf(dateTimeFieldType10);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MonthDay monthDay13 = monthDay4.withChronologyRetainFields(chronology12);
        org.joda.time.MonthDay monthDay15 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MonthDay monthDay17 = monthDay15.withChronologyRetainFields(chronology16);
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = monthDay15.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.MonthDay monthDay21 = monthDay15.plus(readablePeriod20);
        org.joda.time.MonthDay monthDay23 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MonthDay monthDay25 = monthDay23.withChronologyRetainFields(chronology24);
        org.joda.time.MonthDay monthDay27 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MonthDay monthDay29 = monthDay27.withChronologyRetainFields(chronology28);
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = monthDay27.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property32 = monthDay25.property(dateTimeFieldType31);
        int int33 = property32.get();
        org.joda.time.MonthDay monthDay35 = property32.addWrapFieldToCopy((int) (short) 1);
        boolean boolean36 = monthDay15.isBefore((org.joda.time.ReadablePartial) monthDay35);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.MonthDay monthDay38 = monthDay15.withChronologyRetainFields(chronology37);
        org.joda.time.Chronology chronology39 = monthDay38.getChronology();
        org.joda.time.MonthDay monthDay40 = monthDay13.withChronologyRetainFields(chronology39);
        org.joda.time.DurationFieldType durationFieldType41 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay43 = monthDay13.withFieldAdded(durationFieldType41, 11);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay4);
        org.junit.Assert.assertNotNull(monthDay6);
        org.junit.Assert.assertNotNull(monthDay8);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(monthDay17);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertNotNull(monthDay23);
        org.junit.Assert.assertNotNull(monthDay25);
        org.junit.Assert.assertNotNull(monthDay27);
        org.junit.Assert.assertNotNull(monthDay29);
        org.junit.Assert.assertNotNull(dateTimeFieldType31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(monthDay35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(monthDay38);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(monthDay40);
    }

    @Test
    public void test0665() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0665");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        int int11 = property10.get();
        org.joda.time.MonthDay monthDay13 = property10.addWrapFieldToCopy((int) (short) 1);
        org.joda.time.MonthDay.Property property14 = monthDay13.dayOfMonth();
        int int15 = property14.getMaximumValueOverall();
        java.util.Locale locale17 = null;
        org.joda.time.MonthDay monthDay18 = property14.setCopy("1", locale17);
        org.joda.time.MonthDay monthDay20 = org.joda.time.MonthDay.parse("");
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.MonthDay monthDay23 = monthDay20.withPeriodAdded(readablePeriod21, 1);
        org.joda.time.MonthDay monthDay25 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MonthDay monthDay27 = monthDay25.withChronologyRetainFields(chronology26);
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = monthDay25.getFieldType((int) (byte) 1);
        int int30 = monthDay23.indexOf(dateTimeFieldType29);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MonthDay monthDay32 = monthDay23.withChronologyRetainFields(chronology31);
        org.joda.time.MonthDay monthDay34 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.MonthDay monthDay36 = monthDay34.withChronologyRetainFields(chronology35);
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = monthDay34.getFieldType((int) (byte) 1);
        int int39 = monthDay23.get(dateTimeFieldType38);
        org.joda.time.DateTimeFieldType dateTimeFieldType40 = null;
        boolean boolean41 = monthDay23.isSupported(dateTimeFieldType40);
        int int42 = monthDay18.compareTo((org.joda.time.ReadablePartial) monthDay23);
        org.joda.time.MonthDay monthDay44 = monthDay18.minusMonths((int) ' ');
        org.joda.time.MonthDay monthDay46 = new org.joda.time.MonthDay(10L);
        boolean boolean47 = monthDay18.isAfter((org.joda.time.ReadablePartial) monthDay46);
        java.lang.Class<?> wildcardClass48 = monthDay18.getClass();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 31 + "'", int15 == 31);
        org.junit.Assert.assertNotNull(monthDay18);
        org.junit.Assert.assertNotNull(monthDay20);
        org.junit.Assert.assertNotNull(monthDay23);
        org.junit.Assert.assertNotNull(monthDay25);
        org.junit.Assert.assertNotNull(monthDay27);
        org.junit.Assert.assertNotNull(dateTimeFieldType29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(monthDay32);
        org.junit.Assert.assertNotNull(monthDay34);
        org.junit.Assert.assertNotNull(monthDay36);
        org.junit.Assert.assertNotNull(dateTimeFieldType38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(monthDay44);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(wildcardClass48);
    }

    @Test
    public void test0666() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0666");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        int int11 = property10.get();
        java.lang.String str12 = property10.toString();
        org.joda.time.MonthDay monthDay14 = property10.addWrapFieldToCopy((int) (short) -1);
        org.joda.time.DurationFieldType durationFieldType15 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay17 = monthDay14.withFieldAdded(durationFieldType15, 28);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Property[dayOfMonth]" + "'", str12, "Property[dayOfMonth]");
        org.junit.Assert.assertNotNull(monthDay14);
    }

    @Test
    public void test0667() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0667");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property6 = monthDay1.dayOfMonth();
        java.util.Locale locale7 = null;
        java.lang.String str8 = property6.getAsShortText(locale7);
        org.joda.time.MonthDay monthDay10 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MonthDay monthDay12 = monthDay10.withChronologyRetainFields(chronology11);
        org.joda.time.MonthDay monthDay14 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MonthDay monthDay16 = monthDay14.withChronologyRetainFields(chronology15);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = monthDay14.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property19 = monthDay12.property(dateTimeFieldType18);
        org.joda.time.MonthDay.Property property20 = monthDay12.monthOfYear();
        int int21 = monthDay12.getDayOfMonth();
        org.joda.time.MonthDay.Property property22 = monthDay12.dayOfMonth();
        int int23 = monthDay12.getDayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.MonthDay monthDay25 = monthDay12.plus(readablePeriod24);
        org.joda.time.MonthDay monthDay27 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MonthDay monthDay29 = monthDay27.withChronologyRetainFields(chronology28);
        org.joda.time.MonthDay monthDay31 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.MonthDay monthDay33 = monthDay31.withChronologyRetainFields(chronology32);
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = monthDay31.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property36 = monthDay29.property(dateTimeFieldType35);
        org.joda.time.MonthDay.Property property37 = monthDay29.monthOfYear();
        int int38 = monthDay29.getDayOfMonth();
        org.joda.time.MonthDay.Property property39 = monthDay29.dayOfMonth();
        int int40 = monthDay29.getDayOfMonth();
        org.joda.time.MonthDay monthDay42 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.MonthDay monthDay44 = monthDay42.withChronologyRetainFields(chronology43);
        org.joda.time.DateTimeFieldType dateTimeFieldType46 = monthDay42.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property47 = monthDay42.dayOfMonth();
        org.joda.time.Chronology chronology48 = monthDay42.getChronology();
        org.joda.time.MonthDay monthDay49 = monthDay29.withChronologyRetainFields(chronology48);
        org.joda.time.MonthDay monthDay50 = monthDay25.withChronologyRetainFields(chronology48);
        org.joda.time.MonthDay monthDay52 = monthDay25.plusDays(0);
        org.joda.time.MonthDay monthDay54 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.MonthDay monthDay56 = monthDay54.withChronologyRetainFields(chronology55);
        org.joda.time.MonthDay monthDay58 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.MonthDay monthDay60 = monthDay58.withChronologyRetainFields(chronology59);
        org.joda.time.DateTimeFieldType dateTimeFieldType62 = monthDay58.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property63 = monthDay56.property(dateTimeFieldType62);
        int int64 = property63.get();
        org.joda.time.DurationField durationField65 = property63.getDurationField();
        org.joda.time.MonthDay monthDay67 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.MonthDay monthDay69 = monthDay67.withChronologyRetainFields(chronology68);
        org.joda.time.MonthDay monthDay71 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology72 = null;
        org.joda.time.MonthDay monthDay73 = monthDay71.withChronologyRetainFields(chronology72);
        org.joda.time.DateTimeFieldType dateTimeFieldType75 = monthDay71.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property76 = monthDay69.property(dateTimeFieldType75);
        boolean boolean77 = property63.equals((java.lang.Object) monthDay69);
        java.util.Locale locale78 = null;
        java.lang.String str79 = property63.getAsShortText(locale78);
        java.lang.String str80 = property63.getAsShortText();
        java.lang.String str81 = property63.toString();
        org.joda.time.DateTimeFieldType dateTimeFieldType82 = property63.getFieldType();
        int int83 = monthDay52.get(dateTimeFieldType82);
        int int84 = property6.compareTo((org.joda.time.ReadablePartial) monthDay52);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "1" + "'", str8, "1");
        org.junit.Assert.assertNotNull(monthDay10);
        org.junit.Assert.assertNotNull(monthDay12);
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(monthDay25);
        org.junit.Assert.assertNotNull(monthDay27);
        org.junit.Assert.assertNotNull(monthDay29);
        org.junit.Assert.assertNotNull(monthDay31);
        org.junit.Assert.assertNotNull(monthDay33);
        org.junit.Assert.assertNotNull(dateTimeFieldType35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertNotNull(monthDay42);
        org.junit.Assert.assertNotNull(monthDay44);
        org.junit.Assert.assertNotNull(dateTimeFieldType46);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(monthDay49);
        org.junit.Assert.assertNotNull(monthDay50);
        org.junit.Assert.assertNotNull(monthDay52);
        org.junit.Assert.assertNotNull(monthDay54);
        org.junit.Assert.assertNotNull(monthDay56);
        org.junit.Assert.assertNotNull(monthDay58);
        org.junit.Assert.assertNotNull(monthDay60);
        org.junit.Assert.assertNotNull(dateTimeFieldType62);
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertNotNull(durationField65);
        org.junit.Assert.assertNotNull(monthDay67);
        org.junit.Assert.assertNotNull(monthDay69);
        org.junit.Assert.assertNotNull(monthDay71);
        org.junit.Assert.assertNotNull(monthDay73);
        org.junit.Assert.assertNotNull(dateTimeFieldType75);
        org.junit.Assert.assertNotNull(property76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "1" + "'", str79, "1");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "1" + "'", str80, "1");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "Property[dayOfMonth]" + "'", str81, "Property[dayOfMonth]");
        org.junit.Assert.assertNotNull(dateTimeFieldType82);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 1 + "'", int83 == 1);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
    }

    @Test
    public void test0668() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0668");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        int int11 = property10.get();
        org.joda.time.MonthDay monthDay13 = property10.addWrapFieldToCopy((int) (short) 1);
        org.joda.time.MonthDay.Property property14 = monthDay13.dayOfMonth();
        int int15 = property14.getMaximumValue();
        java.lang.String str16 = property14.getAsText();
        java.util.Locale locale17 = null;
        java.lang.String str18 = property14.getAsShortText(locale17);
        org.joda.time.MonthDay monthDay20 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.MonthDay monthDay22 = monthDay20.withChronologyRetainFields(chronology21);
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = monthDay20.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        org.joda.time.MonthDay monthDay26 = monthDay20.plus(readablePeriod25);
        org.joda.time.MonthDay monthDay28 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MonthDay monthDay30 = monthDay28.withChronologyRetainFields(chronology29);
        org.joda.time.MonthDay monthDay32 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.MonthDay monthDay34 = monthDay32.withChronologyRetainFields(chronology33);
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = monthDay32.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property37 = monthDay30.property(dateTimeFieldType36);
        int int38 = property37.get();
        org.joda.time.MonthDay monthDay40 = property37.addWrapFieldToCopy((int) (short) 1);
        boolean boolean41 = monthDay20.isBefore((org.joda.time.ReadablePartial) monthDay40);
        org.joda.time.MonthDay monthDay43 = monthDay40.minusMonths((int) (byte) 100);
        int int44 = monthDay43.getMonthOfYear();
        org.joda.time.MonthDay monthDay46 = monthDay43.withMonthOfYear(1);
        org.joda.time.ReadablePeriod readablePeriod47 = null;
        org.joda.time.MonthDay monthDay48 = monthDay43.plus(readablePeriod47);
        int int49 = property14.compareTo((org.joda.time.ReadablePartial) monthDay48);
        org.joda.time.MonthDay monthDay51 = property14.addWrapFieldToCopy((int) '#');
        int int52 = property14.get();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 31 + "'", int15 == 31);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "2" + "'", str16, "2");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "2" + "'", str18, "2");
        org.junit.Assert.assertNotNull(monthDay20);
        org.junit.Assert.assertNotNull(monthDay22);
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertNotNull(monthDay26);
        org.junit.Assert.assertNotNull(monthDay28);
        org.junit.Assert.assertNotNull(monthDay30);
        org.junit.Assert.assertNotNull(monthDay32);
        org.junit.Assert.assertNotNull(monthDay34);
        org.junit.Assert.assertNotNull(dateTimeFieldType36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(monthDay40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(monthDay43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 9 + "'", int44 == 9);
        org.junit.Assert.assertNotNull(monthDay46);
        org.junit.Assert.assertNotNull(monthDay48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(monthDay51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 2 + "'", int52 == 2);
    }

    @Test
    public void test0669() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0669");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property6 = monthDay1.dayOfMonth();
        org.joda.time.MonthDay monthDay8 = property6.addWrapFieldToCopy(1);
        org.joda.time.MonthDay monthDay10 = property6.addWrapFieldToCopy(0);
        org.joda.time.MonthDay monthDay12 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MonthDay monthDay14 = monthDay12.withChronologyRetainFields(chronology13);
        org.joda.time.MonthDay monthDay16 = monthDay12.minusMonths((int) (byte) -1);
        boolean boolean17 = property6.equals((java.lang.Object) monthDay16);
        int int18 = property6.get();
        org.joda.time.DurationField durationField19 = property6.getRangeDurationField();
        org.joda.time.MonthDay monthDay21 = property6.addWrapFieldToCopy((int) (byte) 1);
        int int22 = property6.get();
        org.joda.time.MonthDay monthDay24 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MonthDay monthDay26 = monthDay24.withChronologyRetainFields(chronology25);
        org.joda.time.MonthDay monthDay28 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MonthDay monthDay30 = monthDay28.withChronologyRetainFields(chronology29);
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = monthDay28.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property33 = monthDay26.property(dateTimeFieldType32);
        int int34 = property33.get();
        org.joda.time.DurationField durationField35 = property33.getDurationField();
        org.joda.time.MonthDay monthDay37 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.MonthDay monthDay39 = monthDay37.withChronologyRetainFields(chronology38);
        org.joda.time.MonthDay monthDay41 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.MonthDay monthDay43 = monthDay41.withChronologyRetainFields(chronology42);
        org.joda.time.DateTimeFieldType dateTimeFieldType45 = monthDay41.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property46 = monthDay39.property(dateTimeFieldType45);
        boolean boolean47 = property33.equals((java.lang.Object) monthDay39);
        int int48 = property33.getMaximumValueOverall();
        java.lang.String str49 = property33.getAsShortText();
        java.lang.String str50 = property33.getName();
        boolean boolean51 = property6.equals((java.lang.Object) str50);
        java.lang.String str52 = property6.getAsString();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(monthDay8);
        org.junit.Assert.assertNotNull(monthDay10);
        org.junit.Assert.assertNotNull(monthDay12);
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertNotNull(monthDay26);
        org.junit.Assert.assertNotNull(monthDay28);
        org.junit.Assert.assertNotNull(monthDay30);
        org.junit.Assert.assertNotNull(dateTimeFieldType32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertNotNull(monthDay37);
        org.junit.Assert.assertNotNull(monthDay39);
        org.junit.Assert.assertNotNull(monthDay41);
        org.junit.Assert.assertNotNull(monthDay43);
        org.junit.Assert.assertNotNull(dateTimeFieldType45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 31 + "'", int48 == 31);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "1" + "'", str49, "1");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "dayOfMonth" + "'", str50, "dayOfMonth");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "1" + "'", str52, "1");
    }

    @Test
    public void test0670() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0670");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        int int11 = property10.get();
        org.joda.time.MonthDay monthDay13 = property10.addWrapFieldToCopy((int) (short) 1);
        org.joda.time.MonthDay.Property property14 = monthDay13.dayOfMonth();
        int int15 = property14.getMaximumValueOverall();
        int int16 = property14.getMinimumValueOverall();
        org.joda.time.MonthDay monthDay17 = property14.getMonthDay();
        java.util.Locale locale18 = null;
        java.lang.String str19 = property14.getAsText(locale18);
        java.lang.String str20 = property14.getAsText();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 31 + "'", int15 == 31);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(monthDay17);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "2" + "'", str19, "2");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "2" + "'", str20, "2");
    }

    @Test
    public void test0671() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0671");
        org.joda.time.MonthDay monthDay2 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MonthDay monthDay4 = monthDay2.withChronologyRetainFields(chronology3);
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = monthDay2.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property7 = monthDay2.dayOfMonth();
        org.joda.time.Chronology chronology8 = monthDay2.getChronology();
        org.joda.time.MonthDay monthDay9 = org.joda.time.MonthDay.now(chronology8);
        org.joda.time.MonthDay monthDay10 = new org.joda.time.MonthDay(0L, chronology8);
        org.joda.time.MonthDay monthDay12 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MonthDay monthDay14 = monthDay12.withChronologyRetainFields(chronology13);
        org.joda.time.MonthDay monthDay16 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MonthDay monthDay18 = monthDay16.withChronologyRetainFields(chronology17);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = monthDay16.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property21 = monthDay14.property(dateTimeFieldType20);
        int int22 = property21.get();
        org.joda.time.DurationField durationField23 = property21.getDurationField();
        org.joda.time.MonthDay monthDay25 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MonthDay monthDay27 = monthDay25.withChronologyRetainFields(chronology26);
        org.joda.time.MonthDay monthDay29 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.MonthDay monthDay31 = monthDay29.withChronologyRetainFields(chronology30);
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = monthDay29.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property34 = monthDay27.property(dateTimeFieldType33);
        boolean boolean35 = property21.equals((java.lang.Object) monthDay27);
        org.joda.time.MonthDay monthDay36 = new org.joda.time.MonthDay((java.lang.Object) monthDay27);
        org.joda.time.MonthDay monthDay38 = org.joda.time.MonthDay.parse("");
        org.joda.time.ReadablePeriod readablePeriod39 = null;
        org.joda.time.MonthDay monthDay41 = monthDay38.withPeriodAdded(readablePeriod39, 1);
        org.joda.time.MonthDay monthDay43 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.MonthDay monthDay45 = monthDay43.withChronologyRetainFields(chronology44);
        org.joda.time.DateTimeFieldType dateTimeFieldType47 = monthDay43.getFieldType((int) (byte) 1);
        int int48 = monthDay41.indexOf(dateTimeFieldType47);
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.MonthDay monthDay50 = monthDay41.withChronologyRetainFields(chronology49);
        boolean boolean51 = monthDay36.isBefore((org.joda.time.ReadablePartial) monthDay50);
        int int52 = monthDay10.compareTo((org.joda.time.ReadablePartial) monthDay50);
        org.joda.time.MonthDay monthDay54 = monthDay10.withDayOfMonth(1);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField56 = monthDay10.getField(11);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 11");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay2);
        org.junit.Assert.assertNotNull(monthDay4);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(monthDay9);
        org.junit.Assert.assertNotNull(monthDay12);
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(monthDay18);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(monthDay25);
        org.junit.Assert.assertNotNull(monthDay27);
        org.junit.Assert.assertNotNull(monthDay29);
        org.junit.Assert.assertNotNull(monthDay31);
        org.junit.Assert.assertNotNull(dateTimeFieldType33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(monthDay38);
        org.junit.Assert.assertNotNull(monthDay41);
        org.junit.Assert.assertNotNull(monthDay43);
        org.junit.Assert.assertNotNull(monthDay45);
        org.junit.Assert.assertNotNull(dateTimeFieldType47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertNotNull(monthDay50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(monthDay54);
    }

    @Test
    public void test0672() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0672");
        org.joda.time.MonthDay monthDay1 = new org.joda.time.MonthDay((long) 0);
        int int3 = monthDay1.getValue((int) (short) 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
    }

    @Test
    public void test0673() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0673");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.MonthDay monthDay3 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MonthDay monthDay5 = monthDay3.withChronologyRetainFields(chronology4);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = monthDay3.getFieldType((int) (byte) 1);
        boolean boolean8 = monthDay1.isSupported(dateTimeFieldType7);
        org.joda.time.MonthDay monthDay10 = org.joda.time.MonthDay.parse("");
        org.joda.time.MonthDay monthDay12 = monthDay10.minusDays((int) '#');
        org.joda.time.MonthDay monthDay14 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MonthDay monthDay16 = monthDay14.withChronologyRetainFields(chronology15);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = monthDay14.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property19 = monthDay14.dayOfMonth();
        org.joda.time.Chronology chronology20 = monthDay14.getChronology();
        org.joda.time.Chronology chronology21 = monthDay14.getChronology();
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.DateTime dateTime23 = monthDay14.toDateTime(readableInstant22);
        org.joda.time.MonthDay monthDay25 = monthDay14.plusMonths((int) ' ');
        boolean boolean26 = monthDay10.isAfter((org.joda.time.ReadablePartial) monthDay25);
        boolean boolean27 = monthDay1.isBefore((org.joda.time.ReadablePartial) monthDay25);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.MonthDay monthDay29 = monthDay1.minus(readablePeriod28);
        org.joda.time.MonthDay monthDay31 = monthDay29.withMonthOfYear(12);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField33 = monthDay29.getField((int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 35");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(monthDay10);
        org.junit.Assert.assertNotNull(monthDay12);
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(monthDay25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(monthDay29);
        org.junit.Assert.assertNotNull(monthDay31);
    }

    @Test
    public void test0674() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0674");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        java.util.Locale locale11 = null;
        int int12 = property10.getMaximumTextLength(locale11);
        java.util.Locale locale13 = null;
        int int14 = property10.getMaximumShortTextLength(locale13);
        org.joda.time.DateTimeField dateTimeField15 = property10.getField();
        int int16 = property10.getMaximumValue();
        java.lang.String str17 = property10.getAsText();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 31 + "'", int16 == 31);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "1" + "'", str17, "1");
    }

    @Test
    public void test0675() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0675");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        org.joda.time.MonthDay.Property property11 = monthDay3.monthOfYear();
        org.joda.time.MonthDay monthDay13 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MonthDay monthDay15 = monthDay13.withChronologyRetainFields(chronology14);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = monthDay13.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay monthDay19 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MonthDay monthDay21 = monthDay19.withChronologyRetainFields(chronology20);
        org.joda.time.MonthDay monthDay23 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MonthDay monthDay25 = monthDay23.withChronologyRetainFields(chronology24);
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = monthDay23.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property28 = monthDay21.property(dateTimeFieldType27);
        int int29 = monthDay13.indexOf(dateTimeFieldType27);
        boolean boolean30 = monthDay3.equals((java.lang.Object) int29);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MonthDay monthDay32 = monthDay3.withChronologyRetainFields(chronology31);
        // The following exception was thrown during execution in test generation
        try {
            int int34 = monthDay3.getValue(100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 100");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(monthDay19);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertNotNull(monthDay23);
        org.junit.Assert.assertNotNull(monthDay25);
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(monthDay32);
    }

    @Test
    public void test0676() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0676");
        org.joda.time.MonthDay monthDay2 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MonthDay monthDay4 = monthDay2.withChronologyRetainFields(chronology3);
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = monthDay2.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property7 = monthDay2.dayOfMonth();
        org.joda.time.MonthDay monthDay9 = property7.addWrapFieldToCopy(1);
        org.joda.time.MonthDay monthDay11 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MonthDay monthDay13 = monthDay11.withChronologyRetainFields(chronology12);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = monthDay11.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.MonthDay monthDay17 = monthDay11.plus(readablePeriod16);
        org.joda.time.MonthDay monthDay19 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MonthDay monthDay21 = monthDay19.withChronologyRetainFields(chronology20);
        org.joda.time.MonthDay monthDay23 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MonthDay monthDay25 = monthDay23.withChronologyRetainFields(chronology24);
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = monthDay23.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property28 = monthDay21.property(dateTimeFieldType27);
        int int29 = property28.get();
        org.joda.time.MonthDay monthDay31 = property28.addWrapFieldToCopy((int) (short) 1);
        boolean boolean32 = monthDay11.isBefore((org.joda.time.ReadablePartial) monthDay31);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.MonthDay monthDay34 = monthDay11.withChronologyRetainFields(chronology33);
        org.joda.time.Chronology chronology35 = monthDay34.getChronology();
        org.joda.time.MonthDay monthDay36 = org.joda.time.MonthDay.now(chronology35);
        org.joda.time.MonthDay monthDay37 = new org.joda.time.MonthDay((java.lang.Object) monthDay9, chronology35);
        org.joda.time.MonthDay monthDay38 = new org.joda.time.MonthDay((long) (byte) -1, chronology35);
        org.joda.time.MonthDay monthDay39 = new org.joda.time.MonthDay(chronology35);
        org.junit.Assert.assertNotNull(monthDay2);
        org.junit.Assert.assertNotNull(monthDay4);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(monthDay9);
        org.junit.Assert.assertNotNull(monthDay11);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(monthDay17);
        org.junit.Assert.assertNotNull(monthDay19);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertNotNull(monthDay23);
        org.junit.Assert.assertNotNull(monthDay25);
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNotNull(monthDay31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(monthDay34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(monthDay36);
    }

    @Test
    public void test0677() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0677");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property6 = monthDay1.dayOfMonth();
        org.joda.time.MonthDay monthDay8 = property6.addWrapFieldToCopy(1);
        org.joda.time.MonthDay monthDay10 = property6.addWrapFieldToCopy(0);
        org.joda.time.MonthDay monthDay12 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MonthDay monthDay14 = monthDay12.withChronologyRetainFields(chronology13);
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = monthDay12.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.MonthDay monthDay18 = monthDay12.plus(readablePeriod17);
        org.joda.time.MonthDay monthDay20 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.MonthDay monthDay22 = monthDay20.withChronologyRetainFields(chronology21);
        org.joda.time.MonthDay monthDay24 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MonthDay monthDay26 = monthDay24.withChronologyRetainFields(chronology25);
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = monthDay24.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property29 = monthDay22.property(dateTimeFieldType28);
        int int30 = property29.get();
        org.joda.time.MonthDay monthDay32 = property29.addWrapFieldToCopy((int) (short) 1);
        boolean boolean33 = monthDay12.isBefore((org.joda.time.ReadablePartial) monthDay32);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MonthDay monthDay35 = monthDay12.withChronologyRetainFields(chronology34);
        org.joda.time.Chronology chronology36 = monthDay35.getChronology();
        java.lang.String str37 = monthDay35.toString();
        int int38 = property6.compareTo((org.joda.time.ReadablePartial) monthDay35);
        java.util.Locale locale40 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay41 = property6.setCopy("dayOfMonth", locale40);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"dayOfMonth\" for dayOfMonth is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(monthDay8);
        org.junit.Assert.assertNotNull(monthDay10);
        org.junit.Assert.assertNotNull(monthDay12);
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertNotNull(monthDay18);
        org.junit.Assert.assertNotNull(monthDay20);
        org.junit.Assert.assertNotNull(monthDay22);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertNotNull(monthDay26);
        org.junit.Assert.assertNotNull(dateTimeFieldType28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(monthDay32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(monthDay35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "--01-01" + "'", str37, "--01-01");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
    }

    @Test
    public void test0678() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0678");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        int int11 = property10.get();
        org.joda.time.MonthDay monthDay13 = property10.addWrapFieldToCopy((int) (short) 1);
        java.lang.String str14 = property10.getAsString();
        java.lang.String str15 = property10.getAsText();
        org.joda.time.DurationField durationField16 = property10.getRangeDurationField();
        int int17 = property10.getMinimumValue();
        org.joda.time.MonthDay monthDay19 = property10.addToCopy((int) (short) -1);
        int int20 = property10.getMaximumValueOverall();
        java.lang.String str21 = property10.getAsString();
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = property10.getFieldType();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "1" + "'", str14, "1");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "1" + "'", str15, "1");
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(monthDay19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 31 + "'", int20 == 31);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "1" + "'", str21, "1");
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
    }

    @Test
    public void test0679() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0679");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        org.joda.time.MonthDay.Property property11 = monthDay3.monthOfYear();
        int int12 = monthDay3.getDayOfMonth();
        org.joda.time.MonthDay.Property property13 = monthDay3.dayOfMonth();
        int int14 = monthDay3.getDayOfMonth();
        org.joda.time.MonthDay monthDay16 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MonthDay monthDay18 = monthDay16.withChronologyRetainFields(chronology17);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = monthDay16.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property21 = monthDay16.dayOfMonth();
        org.joda.time.Chronology chronology22 = monthDay16.getChronology();
        org.joda.time.MonthDay monthDay23 = monthDay3.withChronologyRetainFields(chronology22);
        org.joda.time.MonthDay monthDay25 = monthDay23.minusMonths((int) (byte) -1);
        org.joda.time.DurationFieldType durationFieldType26 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay28 = monthDay25.withFieldAdded(durationFieldType26, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(monthDay18);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(monthDay23);
        org.junit.Assert.assertNotNull(monthDay25);
    }

    @Test
    public void test0680() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0680");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.MonthDay monthDay4 = monthDay1.withPeriodAdded(readablePeriod2, 1);
        org.joda.time.MonthDay monthDay6 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MonthDay monthDay8 = monthDay6.withChronologyRetainFields(chronology7);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = monthDay6.getFieldType((int) (byte) 1);
        int int11 = monthDay4.indexOf(dateTimeFieldType10);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MonthDay monthDay13 = monthDay4.withChronologyRetainFields(chronology12);
        org.joda.time.MonthDay monthDay14 = org.joda.time.MonthDay.now();
        boolean boolean15 = monthDay13.isBefore((org.joda.time.ReadablePartial) monthDay14);
        org.joda.time.MonthDay monthDay17 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.MonthDay monthDay19 = monthDay17.withChronologyRetainFields(chronology18);
        org.joda.time.MonthDay monthDay21 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.MonthDay monthDay23 = monthDay21.withChronologyRetainFields(chronology22);
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = monthDay21.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property26 = monthDay19.property(dateTimeFieldType25);
        int int27 = property26.get();
        int int28 = property26.getMaximumValue();
        org.joda.time.MonthDay monthDay30 = property26.setCopy((int) (short) 1);
        org.joda.time.MonthDay monthDay32 = org.joda.time.MonthDay.parse("");
        org.joda.time.ReadablePeriod readablePeriod33 = null;
        org.joda.time.MonthDay monthDay35 = monthDay32.withPeriodAdded(readablePeriod33, 1);
        org.joda.time.MonthDay monthDay37 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.MonthDay monthDay39 = monthDay37.withChronologyRetainFields(chronology38);
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = monthDay37.getFieldType((int) (byte) 1);
        int int42 = monthDay35.indexOf(dateTimeFieldType41);
        boolean boolean43 = monthDay30.isSupported(dateTimeFieldType41);
        org.joda.time.MonthDay monthDay45 = monthDay30.plusDays((int) (short) 100);
        org.joda.time.ReadablePeriod readablePeriod46 = null;
        org.joda.time.MonthDay monthDay47 = monthDay30.plus(readablePeriod46);
        boolean boolean48 = monthDay13.isAfter((org.joda.time.ReadablePartial) monthDay47);
        java.util.Locale locale50 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str51 = monthDay13.toString("January", locale50);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: J");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay4);
        org.junit.Assert.assertNotNull(monthDay6);
        org.junit.Assert.assertNotNull(monthDay8);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(monthDay17);
        org.junit.Assert.assertNotNull(monthDay19);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertNotNull(monthDay23);
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 31 + "'", int28 == 31);
        org.junit.Assert.assertNotNull(monthDay30);
        org.junit.Assert.assertNotNull(monthDay32);
        org.junit.Assert.assertNotNull(monthDay35);
        org.junit.Assert.assertNotNull(monthDay37);
        org.junit.Assert.assertNotNull(monthDay39);
        org.junit.Assert.assertNotNull(dateTimeFieldType41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(monthDay45);
        org.junit.Assert.assertNotNull(monthDay47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
    }

    @Test
    public void test0681() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0681");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        int int11 = property10.get();
        org.joda.time.DurationField durationField12 = property10.getDurationField();
        org.joda.time.MonthDay monthDay14 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MonthDay monthDay16 = monthDay14.withChronologyRetainFields(chronology15);
        org.joda.time.MonthDay monthDay18 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MonthDay monthDay20 = monthDay18.withChronologyRetainFields(chronology19);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = monthDay18.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property23 = monthDay16.property(dateTimeFieldType22);
        boolean boolean24 = property10.equals((java.lang.Object) monthDay16);
        java.lang.String str25 = property10.getAsShortText();
        java.lang.String str26 = property10.toString();
        org.joda.time.MonthDay monthDay28 = property10.addWrapFieldToCopy(9);
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        org.joda.time.MonthDay monthDay30 = monthDay28.minus(readablePeriod29);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType32 = monthDay30.getFieldType(4);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 4");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(monthDay18);
        org.junit.Assert.assertNotNull(monthDay20);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "1" + "'", str25, "1");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Property[dayOfMonth]" + "'", str26, "Property[dayOfMonth]");
        org.junit.Assert.assertNotNull(monthDay28);
        org.junit.Assert.assertNotNull(monthDay30);
    }

    @Test
    public void test0682() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0682");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.MonthDay monthDay4 = monthDay1.withPeriodAdded(readablePeriod2, 1);
        org.joda.time.MonthDay monthDay6 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MonthDay monthDay8 = monthDay6.withChronologyRetainFields(chronology7);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = monthDay6.getFieldType((int) (byte) 1);
        int int11 = monthDay4.indexOf(dateTimeFieldType10);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MonthDay monthDay13 = monthDay4.withChronologyRetainFields(chronology12);
        org.joda.time.MonthDay monthDay15 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MonthDay monthDay17 = monthDay15.withChronologyRetainFields(chronology16);
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = monthDay15.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.MonthDay monthDay21 = monthDay15.plus(readablePeriod20);
        org.joda.time.MonthDay monthDay23 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MonthDay monthDay25 = monthDay23.withChronologyRetainFields(chronology24);
        org.joda.time.MonthDay monthDay27 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MonthDay monthDay29 = monthDay27.withChronologyRetainFields(chronology28);
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = monthDay27.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property32 = monthDay25.property(dateTimeFieldType31);
        int int33 = property32.get();
        org.joda.time.MonthDay monthDay35 = property32.addWrapFieldToCopy((int) (short) 1);
        boolean boolean36 = monthDay15.isBefore((org.joda.time.ReadablePartial) monthDay35);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.MonthDay monthDay38 = monthDay15.withChronologyRetainFields(chronology37);
        org.joda.time.Chronology chronology39 = monthDay38.getChronology();
        org.joda.time.MonthDay monthDay40 = monthDay13.withChronologyRetainFields(chronology39);
        org.joda.time.MonthDay monthDay42 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.MonthDay monthDay44 = monthDay42.withChronologyRetainFields(chronology43);
        org.joda.time.MonthDay monthDay46 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.MonthDay monthDay48 = monthDay46.withChronologyRetainFields(chronology47);
        org.joda.time.DateTimeFieldType dateTimeFieldType50 = monthDay46.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property51 = monthDay46.dayOfMonth();
        org.joda.time.Chronology chronology52 = monthDay46.getChronology();
        org.joda.time.MonthDay monthDay53 = org.joda.time.MonthDay.now(chronology52);
        org.joda.time.MonthDay monthDay54 = monthDay44.withChronologyRetainFields(chronology52);
        org.joda.time.ReadablePeriod readablePeriod55 = null;
        org.joda.time.MonthDay monthDay56 = monthDay44.minus(readablePeriod55);
        org.joda.time.MonthDay monthDay58 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.MonthDay monthDay60 = monthDay58.withChronologyRetainFields(chronology59);
        org.joda.time.MonthDay monthDay62 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.MonthDay monthDay64 = monthDay62.withChronologyRetainFields(chronology63);
        org.joda.time.DateTimeFieldType dateTimeFieldType66 = monthDay62.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property67 = monthDay60.property(dateTimeFieldType66);
        int int68 = property67.get();
        int int69 = property67.getMaximumValue();
        org.joda.time.MonthDay monthDay71 = property67.setCopy((int) (short) 1);
        org.joda.time.MonthDay monthDay73 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology74 = null;
        org.joda.time.MonthDay monthDay75 = monthDay73.withChronologyRetainFields(chronology74);
        org.joda.time.DateTimeFieldType dateTimeFieldType77 = monthDay73.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod78 = null;
        org.joda.time.MonthDay monthDay79 = monthDay73.plus(readablePeriod78);
        int int80 = monthDay73.getDayOfMonth();
        int int81 = property67.compareTo((org.joda.time.ReadablePartial) monthDay73);
        boolean boolean82 = monthDay56.isBefore((org.joda.time.ReadablePartial) monthDay73);
        int int83 = monthDay13.compareTo((org.joda.time.ReadablePartial) monthDay73);
        java.util.Locale locale85 = null;
        java.lang.String str86 = monthDay13.toString("1", locale85);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay4);
        org.junit.Assert.assertNotNull(monthDay6);
        org.junit.Assert.assertNotNull(monthDay8);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(monthDay17);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertNotNull(monthDay23);
        org.junit.Assert.assertNotNull(monthDay25);
        org.junit.Assert.assertNotNull(monthDay27);
        org.junit.Assert.assertNotNull(monthDay29);
        org.junit.Assert.assertNotNull(dateTimeFieldType31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(monthDay35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(monthDay38);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(monthDay40);
        org.junit.Assert.assertNotNull(monthDay42);
        org.junit.Assert.assertNotNull(monthDay44);
        org.junit.Assert.assertNotNull(monthDay46);
        org.junit.Assert.assertNotNull(monthDay48);
        org.junit.Assert.assertNotNull(dateTimeFieldType50);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertNotNull(monthDay53);
        org.junit.Assert.assertNotNull(monthDay54);
        org.junit.Assert.assertNotNull(monthDay56);
        org.junit.Assert.assertNotNull(monthDay58);
        org.junit.Assert.assertNotNull(monthDay60);
        org.junit.Assert.assertNotNull(monthDay62);
        org.junit.Assert.assertNotNull(monthDay64);
        org.junit.Assert.assertNotNull(dateTimeFieldType66);
        org.junit.Assert.assertNotNull(property67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1 + "'", int68 == 1);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 31 + "'", int69 == 31);
        org.junit.Assert.assertNotNull(monthDay71);
        org.junit.Assert.assertNotNull(monthDay73);
        org.junit.Assert.assertNotNull(monthDay75);
        org.junit.Assert.assertNotNull(dateTimeFieldType77);
        org.junit.Assert.assertNotNull(monthDay79);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 1 + "'", int80 == 1);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "1" + "'", str86, "1");
    }

    @Test
    public void test0683() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0683");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay monthDay7 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MonthDay monthDay9 = monthDay7.withChronologyRetainFields(chronology8);
        org.joda.time.MonthDay monthDay11 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MonthDay monthDay13 = monthDay11.withChronologyRetainFields(chronology12);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = monthDay11.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property16 = monthDay9.property(dateTimeFieldType15);
        int int17 = monthDay1.indexOf(dateTimeFieldType15);
        org.joda.time.MonthDay monthDay19 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MonthDay monthDay21 = monthDay19.withChronologyRetainFields(chronology20);
        org.joda.time.MonthDay monthDay23 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MonthDay monthDay25 = monthDay23.withChronologyRetainFields(chronology24);
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = monthDay23.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property28 = monthDay21.property(dateTimeFieldType27);
        int int29 = property28.get();
        org.joda.time.MonthDay monthDay31 = property28.addToCopy((int) (short) 0);
        org.joda.time.MonthDay monthDay33 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MonthDay monthDay35 = monthDay33.withChronologyRetainFields(chronology34);
        org.joda.time.MonthDay monthDay37 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.MonthDay monthDay39 = monthDay37.withChronologyRetainFields(chronology38);
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = monthDay37.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property42 = monthDay35.property(dateTimeFieldType41);
        int int43 = property42.get();
        org.joda.time.DurationField durationField44 = property42.getDurationField();
        java.util.Locale locale45 = null;
        int int46 = property42.getMaximumTextLength(locale45);
        org.joda.time.MonthDay monthDay48 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.MonthDay monthDay50 = monthDay48.withChronologyRetainFields(chronology49);
        org.joda.time.DateTimeFieldType dateTimeFieldType52 = monthDay48.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property53 = monthDay48.dayOfMonth();
        org.joda.time.Chronology chronology54 = monthDay48.getChronology();
        org.joda.time.Chronology chronology55 = monthDay48.getChronology();
        org.joda.time.ReadableInstant readableInstant56 = null;
        org.joda.time.DateTime dateTime57 = monthDay48.toDateTime(readableInstant56);
        int int58 = property42.compareTo((org.joda.time.ReadableInstant) dateTime57);
        int int59 = property28.compareTo((org.joda.time.ReadableInstant) dateTime57);
        org.joda.time.DateTime dateTime60 = monthDay1.toDateTime((org.joda.time.ReadableInstant) dateTime57);
        org.joda.time.Chronology chronology61 = monthDay1.getChronology();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(monthDay9);
        org.junit.Assert.assertNotNull(monthDay11);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(monthDay19);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertNotNull(monthDay23);
        org.junit.Assert.assertNotNull(monthDay25);
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNotNull(monthDay31);
        org.junit.Assert.assertNotNull(monthDay33);
        org.junit.Assert.assertNotNull(monthDay35);
        org.junit.Assert.assertNotNull(monthDay37);
        org.junit.Assert.assertNotNull(monthDay39);
        org.junit.Assert.assertNotNull(dateTimeFieldType41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertNotNull(durationField44);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2 + "'", int46 == 2);
        org.junit.Assert.assertNotNull(monthDay48);
        org.junit.Assert.assertNotNull(monthDay50);
        org.junit.Assert.assertNotNull(dateTimeFieldType52);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(chronology61);
    }

    @Test
    public void test0684() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0684");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay1.plus(readablePeriod6);
        org.joda.time.MonthDay monthDay9 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MonthDay monthDay11 = monthDay9.withChronologyRetainFields(chronology10);
        org.joda.time.MonthDay monthDay13 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MonthDay monthDay15 = monthDay13.withChronologyRetainFields(chronology14);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = monthDay13.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property18 = monthDay11.property(dateTimeFieldType17);
        int int19 = property18.get();
        org.joda.time.MonthDay monthDay21 = property18.addWrapFieldToCopy((int) (short) 1);
        boolean boolean22 = monthDay1.isBefore((org.joda.time.ReadablePartial) monthDay21);
        org.joda.time.MonthDay monthDay24 = monthDay21.minusMonths((int) (byte) 100);
        org.joda.time.MonthDay monthDay26 = monthDay24.plusMonths(1);
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.MonthDay monthDay28 = monthDay24.minus(readablePeriod27);
        org.joda.time.MonthDay monthDay30 = org.joda.time.MonthDay.parse("");
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        org.joda.time.MonthDay monthDay33 = monthDay30.withPeriodAdded(readablePeriod31, 1);
        org.joda.time.MonthDay monthDay35 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.MonthDay monthDay37 = monthDay35.withChronologyRetainFields(chronology36);
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = monthDay35.getFieldType((int) (byte) 1);
        int int40 = monthDay33.indexOf(dateTimeFieldType39);
        org.joda.time.MonthDay.Property property41 = monthDay28.property(dateTimeFieldType39);
        java.util.Locale locale43 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay44 = property41.setCopy("monthOfYear", locale43);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"monthOfYear\" for dayOfMonth is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(monthDay9);
        org.junit.Assert.assertNotNull(monthDay11);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertNotNull(monthDay26);
        org.junit.Assert.assertNotNull(monthDay28);
        org.junit.Assert.assertNotNull(monthDay30);
        org.junit.Assert.assertNotNull(monthDay33);
        org.junit.Assert.assertNotNull(monthDay35);
        org.junit.Assert.assertNotNull(monthDay37);
        org.junit.Assert.assertNotNull(dateTimeFieldType39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertNotNull(property41);
    }

    @Test
    public void test0685() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0685");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.MonthDay monthDay3 = monthDay1.minusDays((int) '#');
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay5.dayOfMonth();
        org.joda.time.Chronology chronology11 = monthDay5.getChronology();
        org.joda.time.Chronology chronology12 = monthDay5.getChronology();
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.DateTime dateTime14 = monthDay5.toDateTime(readableInstant13);
        org.joda.time.MonthDay monthDay16 = monthDay5.plusMonths((int) ' ');
        boolean boolean17 = monthDay1.isAfter((org.joda.time.ReadablePartial) monthDay16);
        int[] intArray18 = monthDay1.getValues();
        org.joda.time.MonthDay monthDay20 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.MonthDay monthDay22 = monthDay20.withChronologyRetainFields(chronology21);
        org.joda.time.MonthDay monthDay24 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MonthDay monthDay26 = monthDay24.withChronologyRetainFields(chronology25);
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = monthDay24.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property29 = monthDay22.property(dateTimeFieldType28);
        int int30 = property29.get();
        org.joda.time.DurationField durationField31 = property29.getDurationField();
        org.joda.time.MonthDay monthDay33 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MonthDay monthDay35 = monthDay33.withChronologyRetainFields(chronology34);
        org.joda.time.MonthDay monthDay37 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.MonthDay monthDay39 = monthDay37.withChronologyRetainFields(chronology38);
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = monthDay37.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property42 = monthDay35.property(dateTimeFieldType41);
        boolean boolean43 = property29.equals((java.lang.Object) monthDay35);
        boolean boolean44 = monthDay1.equals((java.lang.Object) monthDay35);
        org.joda.time.MonthDay monthDay46 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.MonthDay monthDay48 = monthDay46.withChronologyRetainFields(chronology47);
        org.joda.time.DateTimeFieldType dateTimeFieldType50 = monthDay46.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod51 = null;
        org.joda.time.MonthDay monthDay52 = monthDay46.plus(readablePeriod51);
        org.joda.time.MonthDay monthDay54 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.MonthDay monthDay56 = monthDay54.withChronologyRetainFields(chronology55);
        org.joda.time.MonthDay monthDay58 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.MonthDay monthDay60 = monthDay58.withChronologyRetainFields(chronology59);
        org.joda.time.DateTimeFieldType dateTimeFieldType62 = monthDay58.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property63 = monthDay56.property(dateTimeFieldType62);
        int int64 = property63.get();
        org.joda.time.MonthDay monthDay66 = property63.addWrapFieldToCopy((int) (short) 1);
        boolean boolean67 = monthDay46.isBefore((org.joda.time.ReadablePartial) monthDay66);
        org.joda.time.MonthDay monthDay69 = monthDay66.minusMonths((int) (byte) -1);
        org.joda.time.MonthDay.Property property70 = monthDay69.monthOfYear();
        int int71 = property70.getMaximumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType72 = property70.getFieldType();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay74 = monthDay35.withField(dateTimeFieldType72, (int) '#');
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 35 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[1, 1]");
        org.junit.Assert.assertNotNull(monthDay20);
        org.junit.Assert.assertNotNull(monthDay22);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertNotNull(monthDay26);
        org.junit.Assert.assertNotNull(dateTimeFieldType28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(monthDay33);
        org.junit.Assert.assertNotNull(monthDay35);
        org.junit.Assert.assertNotNull(monthDay37);
        org.junit.Assert.assertNotNull(monthDay39);
        org.junit.Assert.assertNotNull(dateTimeFieldType41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(monthDay46);
        org.junit.Assert.assertNotNull(monthDay48);
        org.junit.Assert.assertNotNull(dateTimeFieldType50);
        org.junit.Assert.assertNotNull(monthDay52);
        org.junit.Assert.assertNotNull(monthDay54);
        org.junit.Assert.assertNotNull(monthDay56);
        org.junit.Assert.assertNotNull(monthDay58);
        org.junit.Assert.assertNotNull(monthDay60);
        org.junit.Assert.assertNotNull(dateTimeFieldType62);
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertNotNull(monthDay66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(monthDay69);
        org.junit.Assert.assertNotNull(property70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 12 + "'", int71 == 12);
        org.junit.Assert.assertNotNull(dateTimeFieldType72);
    }

    @Test
    public void test0686() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0686");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        org.joda.time.MonthDay.Property property11 = monthDay3.monthOfYear();
        java.lang.String str12 = property11.getAsShortText();
        int int13 = property11.getMinimumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = property11.getFieldType();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay15 = new org.joda.time.MonthDay((java.lang.Object) dateTimeFieldType14);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: org.joda.time.DateTimeFieldType$StandardDateTimeFieldType");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Jan" + "'", str12, "Jan");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
    }

    @Test
    public void test0687() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0687");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property6 = monthDay1.dayOfMonth();
        org.joda.time.Chronology chronology7 = monthDay1.getChronology();
        org.joda.time.MonthDay monthDay9 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MonthDay monthDay11 = monthDay9.withChronologyRetainFields(chronology10);
        org.joda.time.MonthDay monthDay13 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MonthDay monthDay15 = monthDay13.withChronologyRetainFields(chronology14);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = monthDay13.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property18 = monthDay11.property(dateTimeFieldType17);
        boolean boolean19 = monthDay1.isSupported(dateTimeFieldType17);
        org.joda.time.MonthDay.Property property20 = monthDay1.monthOfYear();
        org.joda.time.MonthDay monthDay22 = monthDay1.minusDays((int) (short) 1);
        java.util.Locale locale24 = null;
        java.lang.String str25 = monthDay1.toString("--11-25", locale24);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(monthDay9);
        org.junit.Assert.assertNotNull(monthDay11);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(monthDay22);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "--11-25" + "'", str25, "--11-25");
    }

    @Test
    public void test0688() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0688");
        org.joda.time.MonthDay monthDay4 = org.joda.time.MonthDay.parse("");
        org.joda.time.MonthDay monthDay6 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MonthDay monthDay8 = monthDay6.withChronologyRetainFields(chronology7);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = monthDay6.getFieldType((int) (byte) 1);
        boolean boolean11 = monthDay4.isSupported(dateTimeFieldType10);
        org.joda.time.MonthDay monthDay13 = org.joda.time.MonthDay.parse("");
        org.joda.time.MonthDay monthDay15 = monthDay13.minusDays((int) '#');
        org.joda.time.MonthDay monthDay17 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.MonthDay monthDay19 = monthDay17.withChronologyRetainFields(chronology18);
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = monthDay17.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property22 = monthDay17.dayOfMonth();
        org.joda.time.Chronology chronology23 = monthDay17.getChronology();
        org.joda.time.Chronology chronology24 = monthDay17.getChronology();
        org.joda.time.ReadableInstant readableInstant25 = null;
        org.joda.time.DateTime dateTime26 = monthDay17.toDateTime(readableInstant25);
        org.joda.time.MonthDay monthDay28 = monthDay17.plusMonths((int) ' ');
        boolean boolean29 = monthDay13.isAfter((org.joda.time.ReadablePartial) monthDay28);
        boolean boolean30 = monthDay4.isBefore((org.joda.time.ReadablePartial) monthDay28);
        org.joda.time.Chronology chronology31 = monthDay28.getChronology();
        org.joda.time.MonthDay monthDay32 = new org.joda.time.MonthDay((long) 0, chronology31);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay33 = new org.joda.time.MonthDay(0, 31, chronology31);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 0 for monthOfYear must not be smaller than 1");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay4);
        org.junit.Assert.assertNotNull(monthDay6);
        org.junit.Assert.assertNotNull(monthDay8);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(monthDay17);
        org.junit.Assert.assertNotNull(monthDay19);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(monthDay28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(chronology31);
    }

    @Test
    public void test0689() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0689");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        org.joda.time.MonthDay.Property property11 = monthDay3.monthOfYear();
        int int12 = monthDay3.getDayOfMonth();
        org.joda.time.MonthDay.Property property13 = monthDay3.dayOfMonth();
        int int14 = monthDay3.getDayOfMonth();
        org.joda.time.MonthDay monthDay16 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MonthDay monthDay18 = monthDay16.withChronologyRetainFields(chronology17);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = monthDay16.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property21 = monthDay16.dayOfMonth();
        org.joda.time.Chronology chronology22 = monthDay16.getChronology();
        org.joda.time.MonthDay monthDay23 = monthDay3.withChronologyRetainFields(chronology22);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter24 = null;
        java.lang.String str25 = monthDay23.toString(dateTimeFormatter24);
        java.lang.String str26 = monthDay23.toString();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(monthDay18);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(monthDay23);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "--01-01" + "'", str25, "--01-01");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "--01-01" + "'", str26, "--01-01");
    }

    @Test
    public void test0690() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0690");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay1.plus(readablePeriod6);
        org.joda.time.MonthDay monthDay9 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MonthDay monthDay11 = monthDay9.withChronologyRetainFields(chronology10);
        org.joda.time.MonthDay monthDay13 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MonthDay monthDay15 = monthDay13.withChronologyRetainFields(chronology14);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = monthDay13.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property18 = monthDay11.property(dateTimeFieldType17);
        int int19 = property18.get();
        org.joda.time.MonthDay monthDay21 = property18.addWrapFieldToCopy((int) (short) 1);
        boolean boolean22 = monthDay1.isBefore((org.joda.time.ReadablePartial) monthDay21);
        org.joda.time.MonthDay.Property property23 = monthDay1.monthOfYear();
        org.joda.time.MonthDay monthDay25 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MonthDay monthDay27 = monthDay25.withChronologyRetainFields(chronology26);
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = monthDay25.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.MonthDay monthDay31 = monthDay25.plus(readablePeriod30);
        org.joda.time.MonthDay monthDay33 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MonthDay monthDay35 = monthDay33.withChronologyRetainFields(chronology34);
        org.joda.time.MonthDay monthDay37 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.MonthDay monthDay39 = monthDay37.withChronologyRetainFields(chronology38);
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = monthDay37.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property42 = monthDay35.property(dateTimeFieldType41);
        int int43 = property42.get();
        org.joda.time.MonthDay monthDay45 = property42.addWrapFieldToCopy((int) (short) 1);
        boolean boolean46 = monthDay25.isBefore((org.joda.time.ReadablePartial) monthDay45);
        boolean boolean47 = monthDay1.isAfter((org.joda.time.ReadablePartial) monthDay45);
        org.joda.time.MonthDay monthDay49 = monthDay45.withMonthOfYear(12);
        org.joda.time.MonthDay monthDay51 = org.joda.time.MonthDay.parse("");
        org.joda.time.ReadablePeriod readablePeriod52 = null;
        org.joda.time.MonthDay monthDay54 = monthDay51.withPeriodAdded(readablePeriod52, 1);
        org.joda.time.ReadablePeriod readablePeriod55 = null;
        org.joda.time.MonthDay monthDay56 = monthDay51.plus(readablePeriod55);
        org.joda.time.ReadablePeriod readablePeriod57 = null;
        org.joda.time.MonthDay monthDay58 = monthDay51.plus(readablePeriod57);
        org.joda.time.MonthDay monthDay60 = monthDay51.plusMonths(2);
        org.joda.time.MonthDay monthDay62 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.MonthDay monthDay64 = monthDay62.withChronologyRetainFields(chronology63);
        org.joda.time.MonthDay monthDay66 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.MonthDay monthDay68 = monthDay66.withChronologyRetainFields(chronology67);
        org.joda.time.DateTimeFieldType dateTimeFieldType70 = monthDay66.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property71 = monthDay64.property(dateTimeFieldType70);
        int int72 = property71.get();
        org.joda.time.MonthDay monthDay74 = property71.addWrapFieldToCopy((int) (short) 1);
        org.joda.time.MonthDay.Property property75 = monthDay74.dayOfMonth();
        int int76 = property75.getMaximumValueOverall();
        org.joda.time.MonthDay monthDay78 = property75.addWrapFieldToCopy((int) (short) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType79 = property75.getFieldType();
        org.joda.time.MonthDay.Property property80 = monthDay60.property(dateTimeFieldType79);
        int int81 = monthDay49.indexOf(dateTimeFieldType79);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(monthDay9);
        org.junit.Assert.assertNotNull(monthDay11);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(monthDay25);
        org.junit.Assert.assertNotNull(monthDay27);
        org.junit.Assert.assertNotNull(dateTimeFieldType29);
        org.junit.Assert.assertNotNull(monthDay31);
        org.junit.Assert.assertNotNull(monthDay33);
        org.junit.Assert.assertNotNull(monthDay35);
        org.junit.Assert.assertNotNull(monthDay37);
        org.junit.Assert.assertNotNull(monthDay39);
        org.junit.Assert.assertNotNull(dateTimeFieldType41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertNotNull(monthDay45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(monthDay49);
        org.junit.Assert.assertNotNull(monthDay51);
        org.junit.Assert.assertNotNull(monthDay54);
        org.junit.Assert.assertNotNull(monthDay56);
        org.junit.Assert.assertNotNull(monthDay58);
        org.junit.Assert.assertNotNull(monthDay60);
        org.junit.Assert.assertNotNull(monthDay62);
        org.junit.Assert.assertNotNull(monthDay64);
        org.junit.Assert.assertNotNull(monthDay66);
        org.junit.Assert.assertNotNull(monthDay68);
        org.junit.Assert.assertNotNull(dateTimeFieldType70);
        org.junit.Assert.assertNotNull(property71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 1 + "'", int72 == 1);
        org.junit.Assert.assertNotNull(monthDay74);
        org.junit.Assert.assertNotNull(property75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 31 + "'", int76 == 31);
        org.junit.Assert.assertNotNull(monthDay78);
        org.junit.Assert.assertNotNull(dateTimeFieldType79);
        org.junit.Assert.assertNotNull(property80);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 1 + "'", int81 == 1);
    }

    @Test
    public void test0691() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0691");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        org.joda.time.MonthDay.Property property11 = monthDay3.monthOfYear();
        int int12 = monthDay3.getDayOfMonth();
        org.joda.time.MonthDay.Property property13 = monthDay3.dayOfMonth();
        int int14 = monthDay3.getDayOfMonth();
        org.joda.time.MonthDay monthDay16 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MonthDay monthDay18 = monthDay16.withChronologyRetainFields(chronology17);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = monthDay16.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property21 = monthDay16.dayOfMonth();
        org.joda.time.Chronology chronology22 = monthDay16.getChronology();
        org.joda.time.MonthDay monthDay23 = monthDay3.withChronologyRetainFields(chronology22);
        org.joda.time.MonthDay monthDay24 = new org.joda.time.MonthDay(chronology22);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.MonthDay monthDay26 = new org.joda.time.MonthDay(dateTimeZone25);
        org.joda.time.DateTimeField[] dateTimeFieldArray27 = monthDay26.getFields();
        org.joda.time.MonthDay monthDay29 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.MonthDay monthDay31 = monthDay29.withChronologyRetainFields(chronology30);
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = monthDay29.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property34 = monthDay29.dayOfMonth();
        org.joda.time.Chronology chronology35 = monthDay29.getChronology();
        org.joda.time.Chronology chronology36 = monthDay29.getChronology();
        org.joda.time.ReadableInstant readableInstant37 = null;
        org.joda.time.DateTime dateTime38 = monthDay29.toDateTime(readableInstant37);
        org.joda.time.MonthDay monthDay40 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.MonthDay monthDay42 = monthDay40.withChronologyRetainFields(chronology41);
        org.joda.time.DateTimeFieldType dateTimeFieldType44 = monthDay40.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod45 = null;
        org.joda.time.MonthDay monthDay46 = monthDay40.plus(readablePeriod45);
        org.joda.time.MonthDay monthDay48 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.MonthDay monthDay50 = monthDay48.withChronologyRetainFields(chronology49);
        org.joda.time.MonthDay monthDay52 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.MonthDay monthDay54 = monthDay52.withChronologyRetainFields(chronology53);
        org.joda.time.DateTimeFieldType dateTimeFieldType56 = monthDay52.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property57 = monthDay50.property(dateTimeFieldType56);
        int int58 = property57.get();
        org.joda.time.MonthDay monthDay60 = property57.addWrapFieldToCopy((int) (short) 1);
        boolean boolean61 = monthDay40.isBefore((org.joda.time.ReadablePartial) monthDay60);
        org.joda.time.DateTimeFieldType dateTimeFieldType63 = monthDay40.getFieldType(0);
        int int64 = monthDay29.get(dateTimeFieldType63);
        boolean boolean65 = monthDay26.isSupported(dateTimeFieldType63);
        org.joda.time.MonthDay.Property property66 = monthDay24.property(dateTimeFieldType63);
        java.lang.String str67 = property66.getAsText();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay69 = property66.setCopy((int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 0 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(monthDay18);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(monthDay23);
        org.junit.Assert.assertNotNull(dateTimeFieldArray27);
        org.junit.Assert.assertNotNull(monthDay29);
        org.junit.Assert.assertNotNull(monthDay31);
        org.junit.Assert.assertNotNull(dateTimeFieldType33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(monthDay40);
        org.junit.Assert.assertNotNull(monthDay42);
        org.junit.Assert.assertNotNull(dateTimeFieldType44);
        org.junit.Assert.assertNotNull(monthDay46);
        org.junit.Assert.assertNotNull(monthDay48);
        org.junit.Assert.assertNotNull(monthDay50);
        org.junit.Assert.assertNotNull(monthDay52);
        org.junit.Assert.assertNotNull(monthDay54);
        org.junit.Assert.assertNotNull(dateTimeFieldType56);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertNotNull(monthDay60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(property66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "November" + "'", str67, "November");
    }

    @Test
    public void test0692() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0692");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        org.joda.time.MonthDay monthDay12 = property10.addWrapFieldToCopy(1);
        org.joda.time.MonthDay monthDay14 = property10.setCopy((int) (short) 1);
        java.util.Locale locale15 = null;
        java.lang.String str16 = property10.getAsShortText(locale15);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(monthDay12);
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "1" + "'", str16, "1");
    }

    @Test
    public void test0693() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0693");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        int int11 = property10.get();
        org.joda.time.DurationField durationField12 = property10.getDurationField();
        java.util.Locale locale13 = null;
        int int14 = property10.getMaximumTextLength(locale13);
        org.joda.time.MonthDay monthDay16 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MonthDay monthDay18 = monthDay16.withChronologyRetainFields(chronology17);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = monthDay16.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property21 = monthDay16.dayOfMonth();
        org.joda.time.Chronology chronology22 = monthDay16.getChronology();
        org.joda.time.Chronology chronology23 = monthDay16.getChronology();
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.DateTime dateTime25 = monthDay16.toDateTime(readableInstant24);
        int int26 = property10.compareTo((org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.MonthDay monthDay28 = property10.addWrapFieldToCopy((int) '4');
        int int29 = property10.getMinimumValue();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(monthDay18);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(monthDay28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
    }

    @Test
    public void test0694() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0694");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        int int11 = property10.get();
        org.joda.time.MonthDay monthDay13 = property10.addWrapFieldToCopy((int) (short) 1);
        org.joda.time.MonthDay.Property property14 = monthDay13.dayOfMonth();
        int int15 = property14.getMaximumValueOverall();
        org.joda.time.MonthDay monthDay17 = property14.addWrapFieldToCopy((int) (short) 10);
        org.joda.time.DateTimeField dateTimeField18 = property14.getField();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 31 + "'", int15 == 31);
        org.junit.Assert.assertNotNull(monthDay17);
        org.junit.Assert.assertNotNull(dateTimeField18);
    }

    @Test
    public void test0695() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0695");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        int int11 = property10.get();
        org.joda.time.DurationField durationField12 = property10.getDurationField();
        java.util.Locale locale13 = null;
        int int14 = property10.getMaximumTextLength(locale13);
        org.joda.time.MonthDay monthDay16 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MonthDay monthDay18 = monthDay16.withChronologyRetainFields(chronology17);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = monthDay16.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property21 = monthDay16.dayOfMonth();
        org.joda.time.Chronology chronology22 = monthDay16.getChronology();
        org.joda.time.Chronology chronology23 = monthDay16.getChronology();
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.DateTime dateTime25 = monthDay16.toDateTime(readableInstant24);
        int int26 = property10.compareTo((org.joda.time.ReadableInstant) dateTime25);
        int int27 = property10.getMinimumValueOverall();
        java.lang.String str28 = property10.getAsText();
        int int29 = property10.get();
        org.joda.time.MonthDay monthDay31 = property10.setCopy((int) (byte) 1);
        org.joda.time.DurationField durationField32 = property10.getDurationField();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(monthDay18);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "1" + "'", str28, "1");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNotNull(monthDay31);
        org.junit.Assert.assertNotNull(durationField32);
    }

    @Test
    public void test0696() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0696");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay1.plus(readablePeriod6);
        org.joda.time.MonthDay monthDay9 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MonthDay monthDay11 = monthDay9.withChronologyRetainFields(chronology10);
        org.joda.time.MonthDay monthDay13 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MonthDay monthDay15 = monthDay13.withChronologyRetainFields(chronology14);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = monthDay13.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property18 = monthDay11.property(dateTimeFieldType17);
        int int19 = property18.get();
        org.joda.time.MonthDay monthDay21 = property18.addWrapFieldToCopy((int) (short) 1);
        boolean boolean22 = monthDay1.isBefore((org.joda.time.ReadablePartial) monthDay21);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MonthDay monthDay24 = monthDay1.withChronologyRetainFields(chronology23);
        org.joda.time.Chronology chronology25 = monthDay24.getChronology();
        org.joda.time.MonthDay monthDay27 = org.joda.time.MonthDay.parse("");
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.MonthDay monthDay30 = monthDay27.withPeriodAdded(readablePeriod28, 1);
        org.joda.time.MonthDay monthDay32 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.MonthDay monthDay34 = monthDay32.withChronologyRetainFields(chronology33);
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = monthDay32.getFieldType((int) (byte) 1);
        int int37 = monthDay30.indexOf(dateTimeFieldType36);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.MonthDay monthDay39 = monthDay30.withChronologyRetainFields(chronology38);
        boolean boolean40 = monthDay24.isAfter((org.joda.time.ReadablePartial) monthDay30);
        org.joda.time.MonthDay monthDay42 = monthDay30.plusDays((int) (byte) 0);
        org.joda.time.DateTimeField[] dateTimeFieldArray43 = monthDay30.getFields();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter44 = null;
        java.lang.String str45 = monthDay30.toString(dateTimeFormatter44);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(monthDay9);
        org.junit.Assert.assertNotNull(monthDay11);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(monthDay27);
        org.junit.Assert.assertNotNull(monthDay30);
        org.junit.Assert.assertNotNull(monthDay32);
        org.junit.Assert.assertNotNull(monthDay34);
        org.junit.Assert.assertNotNull(dateTimeFieldType36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(monthDay39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(monthDay42);
        org.junit.Assert.assertNotNull(dateTimeFieldArray43);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "--01-01" + "'", str45, "--01-01");
    }

    @Test
    public void test0697() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0697");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.MonthDay monthDay3 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MonthDay monthDay5 = monthDay3.withChronologyRetainFields(chronology4);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = monthDay3.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.MonthDay monthDay9 = monthDay3.plus(readablePeriod8);
        org.joda.time.MonthDay monthDay11 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MonthDay monthDay13 = monthDay11.withChronologyRetainFields(chronology12);
        org.joda.time.MonthDay monthDay15 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MonthDay monthDay17 = monthDay15.withChronologyRetainFields(chronology16);
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = monthDay15.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property20 = monthDay13.property(dateTimeFieldType19);
        int int21 = property20.get();
        org.joda.time.MonthDay monthDay23 = property20.addWrapFieldToCopy((int) (short) 1);
        boolean boolean24 = monthDay3.isBefore((org.joda.time.ReadablePartial) monthDay23);
        org.joda.time.MonthDay monthDay26 = monthDay23.minusMonths((int) (byte) 100);
        org.joda.time.MonthDay monthDay28 = monthDay26.plusMonths(1);
        org.joda.time.MonthDay monthDay30 = org.joda.time.MonthDay.parse("");
        org.joda.time.MonthDay monthDay32 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.MonthDay monthDay34 = monthDay32.withChronologyRetainFields(chronology33);
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = monthDay32.getFieldType((int) (byte) 1);
        boolean boolean37 = monthDay30.isSupported(dateTimeFieldType36);
        boolean boolean38 = monthDay26.isSupported(dateTimeFieldType36);
        int int39 = monthDay1.compareTo((org.joda.time.ReadablePartial) monthDay26);
        org.joda.time.MonthDay monthDay40 = new org.joda.time.MonthDay((java.lang.Object) monthDay26);
        org.joda.time.MonthDay monthDay42 = org.joda.time.MonthDay.parse("");
        org.joda.time.MonthDay monthDay44 = monthDay42.minusDays((int) '#');
        org.joda.time.MonthDay monthDay46 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.MonthDay monthDay48 = monthDay46.withChronologyRetainFields(chronology47);
        org.joda.time.DateTimeFieldType dateTimeFieldType50 = monthDay46.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property51 = monthDay46.dayOfMonth();
        org.joda.time.Chronology chronology52 = monthDay46.getChronology();
        org.joda.time.Chronology chronology53 = monthDay46.getChronology();
        org.joda.time.ReadableInstant readableInstant54 = null;
        org.joda.time.DateTime dateTime55 = monthDay46.toDateTime(readableInstant54);
        org.joda.time.MonthDay monthDay57 = monthDay46.plusMonths((int) ' ');
        boolean boolean58 = monthDay42.isAfter((org.joda.time.ReadablePartial) monthDay57);
        org.joda.time.Chronology chronology59 = monthDay57.getChronology();
        org.joda.time.MonthDay monthDay60 = new org.joda.time.MonthDay((java.lang.Object) monthDay40, chronology59);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField62 = monthDay40.getField(28);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 28");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(monthDay9);
        org.junit.Assert.assertNotNull(monthDay11);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(monthDay17);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(monthDay23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(monthDay26);
        org.junit.Assert.assertNotNull(monthDay28);
        org.junit.Assert.assertNotNull(monthDay30);
        org.junit.Assert.assertNotNull(monthDay32);
        org.junit.Assert.assertNotNull(monthDay34);
        org.junit.Assert.assertNotNull(dateTimeFieldType36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertNotNull(monthDay42);
        org.junit.Assert.assertNotNull(monthDay44);
        org.junit.Assert.assertNotNull(monthDay46);
        org.junit.Assert.assertNotNull(monthDay48);
        org.junit.Assert.assertNotNull(dateTimeFieldType50);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(monthDay57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(chronology59);
    }

    @Test
    public void test0698() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0698");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay1.plus(readablePeriod6);
        org.joda.time.MonthDay monthDay9 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MonthDay monthDay11 = monthDay9.withChronologyRetainFields(chronology10);
        org.joda.time.MonthDay monthDay13 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MonthDay monthDay15 = monthDay13.withChronologyRetainFields(chronology14);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = monthDay13.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property18 = monthDay11.property(dateTimeFieldType17);
        int int19 = property18.get();
        org.joda.time.MonthDay monthDay21 = property18.addWrapFieldToCopy((int) (short) 1);
        boolean boolean22 = monthDay1.isBefore((org.joda.time.ReadablePartial) monthDay21);
        org.joda.time.MonthDay.Property property23 = monthDay1.monthOfYear();
        java.lang.String str24 = property23.getAsText();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(monthDay9);
        org.junit.Assert.assertNotNull(monthDay11);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "January" + "'", str24, "January");
    }

    @Test
    public void test0699() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0699");
        org.joda.time.MonthDay monthDay3 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MonthDay monthDay5 = monthDay3.withChronologyRetainFields(chronology4);
        org.joda.time.MonthDay monthDay7 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MonthDay monthDay9 = monthDay7.withChronologyRetainFields(chronology8);
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = monthDay7.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property12 = monthDay5.property(dateTimeFieldType11);
        org.joda.time.MonthDay.Property property13 = monthDay5.monthOfYear();
        org.joda.time.MonthDay monthDay15 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MonthDay monthDay17 = monthDay15.withChronologyRetainFields(chronology16);
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = monthDay15.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property20 = monthDay15.dayOfMonth();
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = property20.getFieldType();
        org.joda.time.MonthDay.Property property22 = monthDay5.property(dateTimeFieldType21);
        org.joda.time.MonthDay monthDay24 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MonthDay monthDay26 = monthDay24.withChronologyRetainFields(chronology25);
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = monthDay24.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        org.joda.time.MonthDay monthDay30 = monthDay24.plus(readablePeriod29);
        org.joda.time.MonthDay monthDay32 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.MonthDay monthDay34 = monthDay32.withChronologyRetainFields(chronology33);
        org.joda.time.MonthDay monthDay36 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.MonthDay monthDay38 = monthDay36.withChronologyRetainFields(chronology37);
        org.joda.time.DateTimeFieldType dateTimeFieldType40 = monthDay36.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property41 = monthDay34.property(dateTimeFieldType40);
        int int42 = property41.get();
        org.joda.time.MonthDay monthDay44 = property41.addWrapFieldToCopy((int) (short) 1);
        boolean boolean45 = monthDay24.isBefore((org.joda.time.ReadablePartial) monthDay44);
        org.joda.time.MonthDay monthDay47 = monthDay44.minusMonths((int) (byte) 100);
        org.joda.time.MonthDay monthDay49 = monthDay47.minusDays(31);
        org.joda.time.MonthDay monthDay51 = org.joda.time.MonthDay.parse("");
        org.joda.time.ReadablePeriod readablePeriod52 = null;
        org.joda.time.MonthDay monthDay54 = monthDay51.withPeriodAdded(readablePeriod52, 1);
        org.joda.time.MonthDay monthDay56 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.MonthDay monthDay58 = monthDay56.withChronologyRetainFields(chronology57);
        org.joda.time.DateTimeFieldType dateTimeFieldType60 = monthDay56.getFieldType((int) (byte) 1);
        int int61 = monthDay54.indexOf(dateTimeFieldType60);
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.MonthDay monthDay63 = monthDay54.withChronologyRetainFields(chronology62);
        org.joda.time.MonthDay monthDay65 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.MonthDay monthDay67 = monthDay65.withChronologyRetainFields(chronology66);
        org.joda.time.DateTimeFieldType dateTimeFieldType69 = monthDay65.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod70 = null;
        org.joda.time.MonthDay monthDay71 = monthDay65.plus(readablePeriod70);
        org.joda.time.MonthDay monthDay73 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology74 = null;
        org.joda.time.MonthDay monthDay75 = monthDay73.withChronologyRetainFields(chronology74);
        org.joda.time.MonthDay monthDay77 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology78 = null;
        org.joda.time.MonthDay monthDay79 = monthDay77.withChronologyRetainFields(chronology78);
        org.joda.time.DateTimeFieldType dateTimeFieldType81 = monthDay77.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property82 = monthDay75.property(dateTimeFieldType81);
        int int83 = property82.get();
        org.joda.time.MonthDay monthDay85 = property82.addWrapFieldToCopy((int) (short) 1);
        boolean boolean86 = monthDay65.isBefore((org.joda.time.ReadablePartial) monthDay85);
        org.joda.time.Chronology chronology87 = null;
        org.joda.time.MonthDay monthDay88 = monthDay65.withChronologyRetainFields(chronology87);
        org.joda.time.Chronology chronology89 = monthDay88.getChronology();
        org.joda.time.MonthDay monthDay90 = monthDay63.withChronologyRetainFields(chronology89);
        org.joda.time.MonthDay monthDay91 = monthDay49.withChronologyRetainFields(chronology89);
        org.joda.time.Chronology chronology92 = monthDay91.getChronology();
        org.joda.time.MonthDay monthDay93 = monthDay5.withChronologyRetainFields(chronology92);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay94 = new org.joda.time.MonthDay((int) (byte) 10, (int) (short) 0, chronology92);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 0 for dayOfMonth must not be smaller than 1");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(monthDay9);
        org.junit.Assert.assertNotNull(dateTimeFieldType11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(monthDay17);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertNotNull(monthDay26);
        org.junit.Assert.assertNotNull(dateTimeFieldType28);
        org.junit.Assert.assertNotNull(monthDay30);
        org.junit.Assert.assertNotNull(monthDay32);
        org.junit.Assert.assertNotNull(monthDay34);
        org.junit.Assert.assertNotNull(monthDay36);
        org.junit.Assert.assertNotNull(monthDay38);
        org.junit.Assert.assertNotNull(dateTimeFieldType40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertNotNull(monthDay44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(monthDay47);
        org.junit.Assert.assertNotNull(monthDay49);
        org.junit.Assert.assertNotNull(monthDay51);
        org.junit.Assert.assertNotNull(monthDay54);
        org.junit.Assert.assertNotNull(monthDay56);
        org.junit.Assert.assertNotNull(monthDay58);
        org.junit.Assert.assertNotNull(dateTimeFieldType60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(monthDay63);
        org.junit.Assert.assertNotNull(monthDay65);
        org.junit.Assert.assertNotNull(monthDay67);
        org.junit.Assert.assertNotNull(dateTimeFieldType69);
        org.junit.Assert.assertNotNull(monthDay71);
        org.junit.Assert.assertNotNull(monthDay73);
        org.junit.Assert.assertNotNull(monthDay75);
        org.junit.Assert.assertNotNull(monthDay77);
        org.junit.Assert.assertNotNull(monthDay79);
        org.junit.Assert.assertNotNull(dateTimeFieldType81);
        org.junit.Assert.assertNotNull(property82);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 1 + "'", int83 == 1);
        org.junit.Assert.assertNotNull(monthDay85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertNotNull(monthDay88);
        org.junit.Assert.assertNotNull(chronology89);
        org.junit.Assert.assertNotNull(monthDay90);
        org.junit.Assert.assertNotNull(monthDay91);
        org.junit.Assert.assertNotNull(chronology92);
        org.junit.Assert.assertNotNull(monthDay93);
    }

    @Test
    public void test0700() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0700");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        int int11 = property10.get();
        org.joda.time.MonthDay monthDay13 = property10.addWrapFieldToCopy((int) (short) 1);
        org.joda.time.MonthDay.Property property14 = monthDay13.dayOfMonth();
        int int15 = property14.getMaximumValue();
        java.lang.String str16 = property14.getAsText();
        java.util.Locale locale17 = null;
        java.lang.String str18 = property14.getAsShortText(locale17);
        org.joda.time.MonthDay monthDay20 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.MonthDay monthDay22 = monthDay20.withChronologyRetainFields(chronology21);
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = monthDay20.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        org.joda.time.MonthDay monthDay26 = monthDay20.plus(readablePeriod25);
        org.joda.time.MonthDay monthDay28 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MonthDay monthDay30 = monthDay28.withChronologyRetainFields(chronology29);
        org.joda.time.MonthDay monthDay32 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.MonthDay monthDay34 = monthDay32.withChronologyRetainFields(chronology33);
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = monthDay32.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property37 = monthDay30.property(dateTimeFieldType36);
        int int38 = property37.get();
        org.joda.time.MonthDay monthDay40 = property37.addWrapFieldToCopy((int) (short) 1);
        boolean boolean41 = monthDay20.isBefore((org.joda.time.ReadablePartial) monthDay40);
        org.joda.time.MonthDay monthDay43 = monthDay40.minusMonths((int) (byte) 100);
        int int44 = monthDay43.getMonthOfYear();
        org.joda.time.MonthDay monthDay46 = monthDay43.withMonthOfYear(1);
        org.joda.time.ReadablePeriod readablePeriod47 = null;
        org.joda.time.MonthDay monthDay48 = monthDay43.plus(readablePeriod47);
        int int49 = property14.compareTo((org.joda.time.ReadablePartial) monthDay48);
        org.joda.time.MonthDay monthDay51 = property14.addWrapFieldToCopy((int) '#');
        org.joda.time.DateTimeFieldType dateTimeFieldType52 = null;
        boolean boolean53 = monthDay51.isSupported(dateTimeFieldType52);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType55 = monthDay51.getFieldType(28);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 28");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 31 + "'", int15 == 31);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "2" + "'", str16, "2");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "2" + "'", str18, "2");
        org.junit.Assert.assertNotNull(monthDay20);
        org.junit.Assert.assertNotNull(monthDay22);
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertNotNull(monthDay26);
        org.junit.Assert.assertNotNull(monthDay28);
        org.junit.Assert.assertNotNull(monthDay30);
        org.junit.Assert.assertNotNull(monthDay32);
        org.junit.Assert.assertNotNull(monthDay34);
        org.junit.Assert.assertNotNull(dateTimeFieldType36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(monthDay40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(monthDay43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 9 + "'", int44 == 9);
        org.junit.Assert.assertNotNull(monthDay46);
        org.junit.Assert.assertNotNull(monthDay48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(monthDay51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
    }

    @Test
    public void test0701() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0701");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        org.joda.time.MonthDay.Property property11 = monthDay3.monthOfYear();
        java.util.Locale locale12 = null;
        int int13 = property11.getMaximumTextLength(locale12);
        int int14 = property11.getMaximumValue();
        org.joda.time.MonthDay monthDay16 = property11.addWrapFieldToCopy((int) '#');
        java.lang.String str17 = property11.toString();
        org.joda.time.MonthDay monthDay19 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MonthDay monthDay21 = monthDay19.withChronologyRetainFields(chronology20);
        org.joda.time.MonthDay monthDay23 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MonthDay monthDay25 = monthDay23.withChronologyRetainFields(chronology24);
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = monthDay23.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property28 = monthDay21.property(dateTimeFieldType27);
        int int29 = property28.get();
        org.joda.time.DurationField durationField30 = property28.getDurationField();
        org.joda.time.MonthDay monthDay32 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.MonthDay monthDay34 = monthDay32.withChronologyRetainFields(chronology33);
        org.joda.time.MonthDay monthDay36 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.MonthDay monthDay38 = monthDay36.withChronologyRetainFields(chronology37);
        org.joda.time.DateTimeFieldType dateTimeFieldType40 = monthDay36.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property41 = monthDay34.property(dateTimeFieldType40);
        boolean boolean42 = property28.equals((java.lang.Object) monthDay34);
        org.joda.time.MonthDay.Property property43 = monthDay34.dayOfMonth();
        org.joda.time.MonthDay.Property property44 = monthDay34.monthOfYear();
        boolean boolean45 = property11.equals((java.lang.Object) property44);
        java.lang.String str46 = property44.getAsShortText();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 9 + "'", int13 == 9);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 12 + "'", int14 == 12);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Property[monthOfYear]" + "'", str17, "Property[monthOfYear]");
        org.junit.Assert.assertNotNull(monthDay19);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertNotNull(monthDay23);
        org.junit.Assert.assertNotNull(monthDay25);
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(monthDay32);
        org.junit.Assert.assertNotNull(monthDay34);
        org.junit.Assert.assertNotNull(monthDay36);
        org.junit.Assert.assertNotNull(monthDay38);
        org.junit.Assert.assertNotNull(dateTimeFieldType40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "Jan" + "'", str46, "Jan");
    }

    @Test
    public void test0702() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0702");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        int int11 = property10.get();
        int int12 = property10.getMaximumValue();
        org.joda.time.MonthDay monthDay14 = property10.setCopy((int) (short) 1);
        org.joda.time.MonthDay monthDay16 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MonthDay monthDay18 = monthDay16.withChronologyRetainFields(chronology17);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = monthDay16.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.MonthDay monthDay22 = monthDay16.plus(readablePeriod21);
        int int23 = monthDay16.getDayOfMonth();
        int int24 = property10.compareTo((org.joda.time.ReadablePartial) monthDay16);
        org.joda.time.DurationField durationField25 = property10.getDurationField();
        org.joda.time.DurationField durationField26 = property10.getDurationField();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 31 + "'", int12 == 31);
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(monthDay18);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertNotNull(monthDay22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(durationField26);
    }

    @Test
    public void test0703() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0703");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        java.util.Locale locale11 = null;
        int int12 = property10.getMaximumTextLength(locale11);
        org.joda.time.MonthDay monthDay14 = property10.addWrapFieldToCopy((int) (byte) 0);
        boolean boolean16 = property10.equals((java.lang.Object) 'a');
        org.joda.time.DurationField durationField17 = property10.getRangeDurationField();
        java.lang.String str18 = property10.getName();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "dayOfMonth" + "'", str18, "dayOfMonth");
    }

    @Test
    public void test0704() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0704");
        org.joda.time.MonthDay monthDay3 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MonthDay monthDay5 = monthDay3.withChronologyRetainFields(chronology4);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = monthDay3.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property8 = monthDay3.dayOfMonth();
        org.joda.time.Chronology chronology9 = monthDay3.getChronology();
        org.joda.time.MonthDay monthDay10 = new org.joda.time.MonthDay((-1L), chronology9);
        org.joda.time.MonthDay monthDay11 = new org.joda.time.MonthDay((java.lang.Object) monthDay10);
        org.joda.time.MonthDay monthDay13 = org.joda.time.MonthDay.parse("");
        org.joda.time.MonthDay monthDay15 = monthDay13.minusDays((int) '#');
        org.joda.time.MonthDay monthDay17 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.MonthDay monthDay19 = monthDay17.withChronologyRetainFields(chronology18);
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = monthDay17.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property22 = monthDay17.dayOfMonth();
        org.joda.time.Chronology chronology23 = monthDay17.getChronology();
        org.joda.time.Chronology chronology24 = monthDay17.getChronology();
        org.joda.time.ReadableInstant readableInstant25 = null;
        org.joda.time.DateTime dateTime26 = monthDay17.toDateTime(readableInstant25);
        org.joda.time.MonthDay monthDay28 = monthDay17.plusMonths((int) ' ');
        boolean boolean29 = monthDay13.isAfter((org.joda.time.ReadablePartial) monthDay28);
        org.joda.time.MonthDay monthDay31 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.MonthDay monthDay33 = monthDay31.withChronologyRetainFields(chronology32);
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = monthDay31.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property36 = monthDay31.dayOfMonth();
        org.joda.time.MonthDay monthDay38 = property36.addWrapFieldToCopy(1);
        org.joda.time.MonthDay monthDay40 = property36.addWrapFieldToCopy(0);
        org.joda.time.MonthDay monthDay42 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.MonthDay monthDay44 = monthDay42.withChronologyRetainFields(chronology43);
        org.joda.time.MonthDay monthDay46 = monthDay42.minusMonths((int) (byte) -1);
        boolean boolean47 = property36.equals((java.lang.Object) monthDay46);
        int int48 = property36.getMaximumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType49 = property36.getFieldType();
        org.joda.time.MonthDay.Property property50 = monthDay28.property(dateTimeFieldType49);
        int int51 = monthDay11.indexOf(dateTimeFieldType49);
        org.joda.time.MonthDay monthDay53 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.MonthDay monthDay55 = monthDay53.withChronologyRetainFields(chronology54);
        org.joda.time.DateTimeFieldType dateTimeFieldType57 = monthDay53.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property58 = monthDay53.dayOfMonth();
        org.joda.time.Chronology chronology59 = monthDay53.getChronology();
        org.joda.time.Chronology chronology60 = monthDay53.getChronology();
        org.joda.time.MonthDay monthDay61 = org.joda.time.MonthDay.now(chronology60);
        org.joda.time.MonthDay monthDay62 = monthDay11.withChronologyRetainFields(chronology60);
        org.joda.time.MonthDay monthDay63 = new org.joda.time.MonthDay((-1L), chronology60);
        org.joda.time.MonthDay monthDay65 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.MonthDay monthDay67 = monthDay65.withChronologyRetainFields(chronology66);
        org.joda.time.DateTimeFieldType dateTimeFieldType69 = monthDay65.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod70 = null;
        org.joda.time.MonthDay monthDay71 = monthDay65.plus(readablePeriod70);
        org.joda.time.MonthDay monthDay73 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology74 = null;
        org.joda.time.MonthDay monthDay75 = monthDay73.withChronologyRetainFields(chronology74);
        org.joda.time.MonthDay monthDay77 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology78 = null;
        org.joda.time.MonthDay monthDay79 = monthDay77.withChronologyRetainFields(chronology78);
        org.joda.time.DateTimeFieldType dateTimeFieldType81 = monthDay77.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property82 = monthDay75.property(dateTimeFieldType81);
        int int83 = property82.get();
        org.joda.time.MonthDay monthDay85 = property82.addWrapFieldToCopy((int) (short) 1);
        boolean boolean86 = monthDay65.isBefore((org.joda.time.ReadablePartial) monthDay85);
        org.joda.time.MonthDay monthDay88 = monthDay85.minusMonths((int) (byte) 100);
        int int89 = monthDay88.getMonthOfYear();
        org.joda.time.MonthDay monthDay91 = monthDay88.withMonthOfYear(1);
        int int92 = monthDay91.getMonthOfYear();
        org.joda.time.MonthDay monthDay94 = monthDay91.withMonthOfYear((int) (short) 1);
        boolean boolean95 = monthDay63.isAfter((org.joda.time.ReadablePartial) monthDay91);
        java.lang.String str96 = monthDay63.toString();
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(monthDay17);
        org.junit.Assert.assertNotNull(monthDay19);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(monthDay28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(monthDay31);
        org.junit.Assert.assertNotNull(monthDay33);
        org.junit.Assert.assertNotNull(dateTimeFieldType35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(monthDay38);
        org.junit.Assert.assertNotNull(monthDay40);
        org.junit.Assert.assertNotNull(monthDay42);
        org.junit.Assert.assertNotNull(monthDay44);
        org.junit.Assert.assertNotNull(monthDay46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 31 + "'", int48 == 31);
        org.junit.Assert.assertNotNull(dateTimeFieldType49);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertNotNull(monthDay53);
        org.junit.Assert.assertNotNull(monthDay55);
        org.junit.Assert.assertNotNull(dateTimeFieldType57);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertNotNull(chronology59);
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertNotNull(monthDay61);
        org.junit.Assert.assertNotNull(monthDay62);
        org.junit.Assert.assertNotNull(monthDay65);
        org.junit.Assert.assertNotNull(monthDay67);
        org.junit.Assert.assertNotNull(dateTimeFieldType69);
        org.junit.Assert.assertNotNull(monthDay71);
        org.junit.Assert.assertNotNull(monthDay73);
        org.junit.Assert.assertNotNull(monthDay75);
        org.junit.Assert.assertNotNull(monthDay77);
        org.junit.Assert.assertNotNull(monthDay79);
        org.junit.Assert.assertNotNull(dateTimeFieldType81);
        org.junit.Assert.assertNotNull(property82);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 1 + "'", int83 == 1);
        org.junit.Assert.assertNotNull(monthDay85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertNotNull(monthDay88);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 9 + "'", int89 == 9);
        org.junit.Assert.assertNotNull(monthDay91);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 1 + "'", int92 == 1);
        org.junit.Assert.assertNotNull(monthDay94);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + true + "'", boolean95 == true);
        org.junit.Assert.assertEquals("'" + str96 + "' != '" + "--12-31" + "'", str96, "--12-31");
    }

    @Test
    public void test0705() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0705");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        int int11 = property10.get();
        org.joda.time.MonthDay monthDay13 = property10.addWrapFieldToCopy((int) (short) 1);
        org.joda.time.MonthDay.Property property14 = monthDay13.dayOfMonth();
        int int15 = property14.getMaximumValueOverall();
        org.joda.time.MonthDay monthDay17 = property14.addWrapFieldToCopy((int) (short) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = property14.getFieldType();
        int int19 = property14.getMaximumValue();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 31 + "'", int15 == 31);
        org.junit.Assert.assertNotNull(monthDay17);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 31 + "'", int19 == 31);
    }

    @Test
    public void test0706() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0706");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property6 = monthDay1.dayOfMonth();
        org.joda.time.MonthDay monthDay8 = property6.addWrapFieldToCopy(1);
        org.joda.time.MonthDay monthDay10 = property6.addWrapFieldToCopy(0);
        org.joda.time.MonthDay monthDay12 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MonthDay monthDay14 = monthDay12.withChronologyRetainFields(chronology13);
        org.joda.time.MonthDay monthDay16 = monthDay12.minusMonths((int) (byte) -1);
        boolean boolean17 = property6.equals((java.lang.Object) monthDay16);
        java.lang.String str18 = property6.getAsShortText();
        org.joda.time.DateTimeField dateTimeField19 = property6.getField();
        org.joda.time.MonthDay monthDay21 = org.joda.time.MonthDay.parse("");
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.MonthDay monthDay24 = monthDay21.withPeriodAdded(readablePeriod22, 1);
        org.joda.time.MonthDay monthDay26 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.MonthDay monthDay28 = monthDay26.withChronologyRetainFields(chronology27);
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = monthDay26.getFieldType((int) (byte) 1);
        int int31 = monthDay24.indexOf(dateTimeFieldType30);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.MonthDay monthDay33 = monthDay24.withChronologyRetainFields(chronology32);
        int int34 = property6.compareTo((org.joda.time.ReadablePartial) monthDay24);
        java.util.Locale locale35 = null;
        int int36 = property6.getMaximumShortTextLength(locale35);
        org.joda.time.MonthDay monthDay38 = property6.addWrapFieldToCopy((int) (short) -1);
        org.joda.time.MonthDay monthDay40 = monthDay38.minusDays(25);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(monthDay8);
        org.junit.Assert.assertNotNull(monthDay10);
        org.junit.Assert.assertNotNull(monthDay12);
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "1" + "'", str18, "1");
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertNotNull(monthDay26);
        org.junit.Assert.assertNotNull(monthDay28);
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertNotNull(monthDay33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2 + "'", int36 == 2);
        org.junit.Assert.assertNotNull(monthDay38);
        org.junit.Assert.assertNotNull(monthDay40);
    }

    @Test
    public void test0707() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0707");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        int int11 = property10.get();
        org.joda.time.MonthDay monthDay13 = property10.addWrapFieldToCopy((int) (short) 1);
        org.joda.time.MonthDay.Property property14 = monthDay13.dayOfMonth();
        int int15 = property14.getMaximumValue();
        java.lang.String str16 = property14.getAsText();
        java.util.Locale locale17 = null;
        java.lang.String str18 = property14.getAsShortText(locale17);
        org.joda.time.MonthDay monthDay20 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.MonthDay monthDay22 = monthDay20.withChronologyRetainFields(chronology21);
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = monthDay20.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        org.joda.time.MonthDay monthDay26 = monthDay20.plus(readablePeriod25);
        org.joda.time.MonthDay monthDay28 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MonthDay monthDay30 = monthDay28.withChronologyRetainFields(chronology29);
        org.joda.time.MonthDay monthDay32 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.MonthDay monthDay34 = monthDay32.withChronologyRetainFields(chronology33);
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = monthDay32.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property37 = monthDay30.property(dateTimeFieldType36);
        int int38 = property37.get();
        org.joda.time.MonthDay monthDay40 = property37.addWrapFieldToCopy((int) (short) 1);
        boolean boolean41 = monthDay20.isBefore((org.joda.time.ReadablePartial) monthDay40);
        org.joda.time.MonthDay monthDay43 = monthDay40.minusMonths((int) (byte) 100);
        int int44 = monthDay43.getMonthOfYear();
        org.joda.time.MonthDay monthDay46 = monthDay43.withMonthOfYear(1);
        org.joda.time.ReadablePeriod readablePeriod47 = null;
        org.joda.time.MonthDay monthDay48 = monthDay43.plus(readablePeriod47);
        int int49 = property14.compareTo((org.joda.time.ReadablePartial) monthDay48);
        org.joda.time.MonthDay monthDay51 = property14.addWrapFieldToCopy((int) '#');
        org.joda.time.MonthDay monthDay52 = property14.getMonthDay();
        int int53 = property14.getMinimumValue();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 31 + "'", int15 == 31);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "2" + "'", str16, "2");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "2" + "'", str18, "2");
        org.junit.Assert.assertNotNull(monthDay20);
        org.junit.Assert.assertNotNull(monthDay22);
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertNotNull(monthDay26);
        org.junit.Assert.assertNotNull(monthDay28);
        org.junit.Assert.assertNotNull(monthDay30);
        org.junit.Assert.assertNotNull(monthDay32);
        org.junit.Assert.assertNotNull(monthDay34);
        org.junit.Assert.assertNotNull(dateTimeFieldType36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(monthDay40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(monthDay43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 9 + "'", int44 == 9);
        org.junit.Assert.assertNotNull(monthDay46);
        org.junit.Assert.assertNotNull(monthDay48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(monthDay51);
        org.junit.Assert.assertNotNull(monthDay52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
    }

    @Test
    public void test0708() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0708");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay1.plus(readablePeriod6);
        org.joda.time.MonthDay monthDay9 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MonthDay monthDay11 = monthDay9.withChronologyRetainFields(chronology10);
        org.joda.time.MonthDay monthDay13 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MonthDay monthDay15 = monthDay13.withChronologyRetainFields(chronology14);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = monthDay13.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property18 = monthDay11.property(dateTimeFieldType17);
        int int19 = property18.get();
        org.joda.time.MonthDay monthDay21 = property18.addWrapFieldToCopy((int) (short) 1);
        boolean boolean22 = monthDay1.isBefore((org.joda.time.ReadablePartial) monthDay21);
        org.joda.time.MonthDay monthDay24 = monthDay21.minusMonths((int) (byte) 100);
        org.joda.time.MonthDay monthDay26 = monthDay24.plusMonths(1);
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.MonthDay monthDay28 = monthDay24.minus(readablePeriod27);
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.MonthDay monthDay30 = new org.joda.time.MonthDay(dateTimeZone29);
        boolean boolean31 = monthDay28.isEqual((org.joda.time.ReadablePartial) monthDay30);
        org.joda.time.DateTimeField[] dateTimeFieldArray32 = monthDay28.getFields();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay34 = monthDay28.withDayOfMonth(0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 0 for dayOfMonth must be in the range [1,30]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(monthDay9);
        org.junit.Assert.assertNotNull(monthDay11);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertNotNull(monthDay26);
        org.junit.Assert.assertNotNull(monthDay28);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldArray32);
    }

    @Test
    public void test0709() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0709");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.MonthDay monthDay4 = monthDay1.withPeriodAdded(readablePeriod2, 1);
        org.joda.time.MonthDay monthDay6 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MonthDay monthDay8 = monthDay6.withChronologyRetainFields(chronology7);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = monthDay6.getFieldType((int) (byte) 1);
        int int11 = monthDay4.indexOf(dateTimeFieldType10);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MonthDay monthDay13 = monthDay4.withChronologyRetainFields(chronology12);
        org.joda.time.MonthDay.Property property14 = monthDay13.dayOfMonth();
        int int15 = property14.getMinimumValue();
        int int16 = property14.getMaximumValueOverall();
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = property14.getFieldType();
        int int18 = property14.get();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay4);
        org.junit.Assert.assertNotNull(monthDay6);
        org.junit.Assert.assertNotNull(monthDay8);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 31 + "'", int16 == 31);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
    }

    @Test
    public void test0710() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0710");
        org.joda.time.MonthDay monthDay3 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MonthDay monthDay5 = monthDay3.withChronologyRetainFields(chronology4);
        org.joda.time.MonthDay monthDay7 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MonthDay monthDay9 = monthDay7.withChronologyRetainFields(chronology8);
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = monthDay7.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property12 = monthDay5.property(dateTimeFieldType11);
        org.joda.time.MonthDay.Property property13 = monthDay5.monthOfYear();
        org.joda.time.MonthDay monthDay15 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MonthDay monthDay17 = monthDay15.withChronologyRetainFields(chronology16);
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = monthDay15.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property20 = monthDay15.dayOfMonth();
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = property20.getFieldType();
        org.joda.time.MonthDay.Property property22 = monthDay5.property(dateTimeFieldType21);
        org.joda.time.MonthDay monthDay24 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MonthDay monthDay26 = monthDay24.withChronologyRetainFields(chronology25);
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = monthDay24.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        org.joda.time.MonthDay monthDay30 = monthDay24.plus(readablePeriod29);
        org.joda.time.MonthDay monthDay32 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.MonthDay monthDay34 = monthDay32.withChronologyRetainFields(chronology33);
        org.joda.time.MonthDay monthDay36 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.MonthDay monthDay38 = monthDay36.withChronologyRetainFields(chronology37);
        org.joda.time.DateTimeFieldType dateTimeFieldType40 = monthDay36.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property41 = monthDay34.property(dateTimeFieldType40);
        int int42 = property41.get();
        org.joda.time.MonthDay monthDay44 = property41.addWrapFieldToCopy((int) (short) 1);
        boolean boolean45 = monthDay24.isBefore((org.joda.time.ReadablePartial) monthDay44);
        org.joda.time.MonthDay monthDay47 = monthDay44.minusMonths((int) (byte) 100);
        org.joda.time.MonthDay monthDay49 = monthDay47.minusDays(31);
        org.joda.time.MonthDay monthDay51 = org.joda.time.MonthDay.parse("");
        org.joda.time.ReadablePeriod readablePeriod52 = null;
        org.joda.time.MonthDay monthDay54 = monthDay51.withPeriodAdded(readablePeriod52, 1);
        org.joda.time.MonthDay monthDay56 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.MonthDay monthDay58 = monthDay56.withChronologyRetainFields(chronology57);
        org.joda.time.DateTimeFieldType dateTimeFieldType60 = monthDay56.getFieldType((int) (byte) 1);
        int int61 = monthDay54.indexOf(dateTimeFieldType60);
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.MonthDay monthDay63 = monthDay54.withChronologyRetainFields(chronology62);
        org.joda.time.MonthDay monthDay65 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.MonthDay monthDay67 = monthDay65.withChronologyRetainFields(chronology66);
        org.joda.time.DateTimeFieldType dateTimeFieldType69 = monthDay65.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod70 = null;
        org.joda.time.MonthDay monthDay71 = monthDay65.plus(readablePeriod70);
        org.joda.time.MonthDay monthDay73 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology74 = null;
        org.joda.time.MonthDay monthDay75 = monthDay73.withChronologyRetainFields(chronology74);
        org.joda.time.MonthDay monthDay77 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology78 = null;
        org.joda.time.MonthDay monthDay79 = monthDay77.withChronologyRetainFields(chronology78);
        org.joda.time.DateTimeFieldType dateTimeFieldType81 = monthDay77.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property82 = monthDay75.property(dateTimeFieldType81);
        int int83 = property82.get();
        org.joda.time.MonthDay monthDay85 = property82.addWrapFieldToCopy((int) (short) 1);
        boolean boolean86 = monthDay65.isBefore((org.joda.time.ReadablePartial) monthDay85);
        org.joda.time.Chronology chronology87 = null;
        org.joda.time.MonthDay monthDay88 = monthDay65.withChronologyRetainFields(chronology87);
        org.joda.time.Chronology chronology89 = monthDay88.getChronology();
        org.joda.time.MonthDay monthDay90 = monthDay63.withChronologyRetainFields(chronology89);
        org.joda.time.MonthDay monthDay91 = monthDay49.withChronologyRetainFields(chronology89);
        org.joda.time.Chronology chronology92 = monthDay91.getChronology();
        org.joda.time.MonthDay monthDay93 = monthDay5.withChronologyRetainFields(chronology92);
        org.joda.time.MonthDay monthDay94 = new org.joda.time.MonthDay((int) (short) 1, 12, chronology92);
        org.joda.time.MonthDay.Property property95 = monthDay94.dayOfMonth();
        int int96 = property95.getMinimumValue();
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(monthDay9);
        org.junit.Assert.assertNotNull(dateTimeFieldType11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(monthDay17);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertNotNull(monthDay26);
        org.junit.Assert.assertNotNull(dateTimeFieldType28);
        org.junit.Assert.assertNotNull(monthDay30);
        org.junit.Assert.assertNotNull(monthDay32);
        org.junit.Assert.assertNotNull(monthDay34);
        org.junit.Assert.assertNotNull(monthDay36);
        org.junit.Assert.assertNotNull(monthDay38);
        org.junit.Assert.assertNotNull(dateTimeFieldType40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertNotNull(monthDay44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(monthDay47);
        org.junit.Assert.assertNotNull(monthDay49);
        org.junit.Assert.assertNotNull(monthDay51);
        org.junit.Assert.assertNotNull(monthDay54);
        org.junit.Assert.assertNotNull(monthDay56);
        org.junit.Assert.assertNotNull(monthDay58);
        org.junit.Assert.assertNotNull(dateTimeFieldType60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(monthDay63);
        org.junit.Assert.assertNotNull(monthDay65);
        org.junit.Assert.assertNotNull(monthDay67);
        org.junit.Assert.assertNotNull(dateTimeFieldType69);
        org.junit.Assert.assertNotNull(monthDay71);
        org.junit.Assert.assertNotNull(monthDay73);
        org.junit.Assert.assertNotNull(monthDay75);
        org.junit.Assert.assertNotNull(monthDay77);
        org.junit.Assert.assertNotNull(monthDay79);
        org.junit.Assert.assertNotNull(dateTimeFieldType81);
        org.junit.Assert.assertNotNull(property82);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 1 + "'", int83 == 1);
        org.junit.Assert.assertNotNull(monthDay85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertNotNull(monthDay88);
        org.junit.Assert.assertNotNull(chronology89);
        org.junit.Assert.assertNotNull(monthDay90);
        org.junit.Assert.assertNotNull(monthDay91);
        org.junit.Assert.assertNotNull(chronology92);
        org.junit.Assert.assertNotNull(monthDay93);
        org.junit.Assert.assertNotNull(property95);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 1 + "'", int96 == 1);
    }

    @Test
    public void test0711() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0711");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.MonthDay monthDay4 = monthDay1.withPeriodAdded(readablePeriod2, 1);
        org.joda.time.MonthDay monthDay6 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MonthDay monthDay8 = monthDay6.withChronologyRetainFields(chronology7);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = monthDay6.getFieldType((int) (byte) 1);
        int int11 = monthDay4.indexOf(dateTimeFieldType10);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MonthDay monthDay13 = monthDay4.withChronologyRetainFields(chronology12);
        org.joda.time.MonthDay monthDay14 = org.joda.time.MonthDay.now();
        boolean boolean15 = monthDay13.isBefore((org.joda.time.ReadablePartial) monthDay14);
        org.joda.time.MonthDay monthDay17 = monthDay13.plusMonths((int) (byte) 0);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay4);
        org.junit.Assert.assertNotNull(monthDay6);
        org.junit.Assert.assertNotNull(monthDay8);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(monthDay17);
    }

    @Test
    public void test0712() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0712");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        org.joda.time.MonthDay.Property property11 = monthDay3.monthOfYear();
        org.joda.time.MonthDay monthDay13 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MonthDay monthDay15 = monthDay13.withChronologyRetainFields(chronology14);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = monthDay13.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay monthDay19 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MonthDay monthDay21 = monthDay19.withChronologyRetainFields(chronology20);
        org.joda.time.MonthDay monthDay23 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MonthDay monthDay25 = monthDay23.withChronologyRetainFields(chronology24);
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = monthDay23.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property28 = monthDay21.property(dateTimeFieldType27);
        int int29 = monthDay13.indexOf(dateTimeFieldType27);
        boolean boolean30 = monthDay3.equals((java.lang.Object) int29);
        org.joda.time.MonthDay monthDay32 = monthDay3.withMonthOfYear(9);
        org.joda.time.MonthDay monthDay34 = monthDay32.plusDays(3);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay36 = monthDay32.withMonthOfYear(31);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 31 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(monthDay19);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertNotNull(monthDay23);
        org.junit.Assert.assertNotNull(monthDay25);
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(monthDay32);
        org.junit.Assert.assertNotNull(monthDay34);
    }

    @Test
    public void test0713() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0713");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        org.joda.time.MonthDay monthDay12 = property10.addWrapFieldToCopy(100);
        java.util.Locale locale13 = null;
        java.lang.String str14 = property10.getAsShortText(locale13);
        int int15 = property10.getMaximumValue();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(monthDay12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "1" + "'", str14, "1");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 31 + "'", int15 == 31);
    }

    @Test
    public void test0714() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0714");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay1.plus(readablePeriod6);
        org.joda.time.MonthDay monthDay9 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MonthDay monthDay11 = monthDay9.withChronologyRetainFields(chronology10);
        org.joda.time.MonthDay monthDay13 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MonthDay monthDay15 = monthDay13.withChronologyRetainFields(chronology14);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = monthDay13.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property18 = monthDay11.property(dateTimeFieldType17);
        int int19 = property18.get();
        org.joda.time.MonthDay monthDay21 = property18.addWrapFieldToCopy((int) (short) 1);
        boolean boolean22 = monthDay1.isBefore((org.joda.time.ReadablePartial) monthDay21);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MonthDay monthDay24 = monthDay1.withChronologyRetainFields(chronology23);
        org.joda.time.Chronology chronology25 = monthDay24.getChronology();
        java.lang.String str26 = monthDay24.toString();
        int int27 = monthDay24.size();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(monthDay9);
        org.junit.Assert.assertNotNull(monthDay11);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "--01-01" + "'", str26, "--01-01");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2 + "'", int27 == 2);
    }

    @Test
    public void test0715() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0715");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        int int11 = property10.get();
        org.joda.time.MonthDay monthDay13 = property10.addWrapFieldToCopy((int) (short) 1);
        org.joda.time.MonthDay.Property property14 = monthDay13.dayOfMonth();
        int int15 = property14.getMaximumValueOverall();
        org.joda.time.MonthDay monthDay17 = property14.addToCopy((int) (byte) 100);
        org.joda.time.ReadablePartial readablePartial18 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int19 = property14.compareTo(readablePartial18);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The instant must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 31 + "'", int15 == 31);
        org.junit.Assert.assertNotNull(monthDay17);
    }

    @Test
    public void test0716() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0716");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        int int11 = property10.get();
        org.joda.time.DurationField durationField12 = property10.getDurationField();
        org.joda.time.MonthDay monthDay14 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MonthDay monthDay16 = monthDay14.withChronologyRetainFields(chronology15);
        org.joda.time.MonthDay monthDay18 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MonthDay monthDay20 = monthDay18.withChronologyRetainFields(chronology19);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = monthDay18.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property23 = monthDay16.property(dateTimeFieldType22);
        boolean boolean24 = property10.equals((java.lang.Object) monthDay16);
        org.joda.time.MonthDay monthDay25 = new org.joda.time.MonthDay((java.lang.Object) monthDay16);
        org.joda.time.MonthDay monthDay27 = org.joda.time.MonthDay.parse("");
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.MonthDay monthDay30 = monthDay27.withPeriodAdded(readablePeriod28, 1);
        org.joda.time.MonthDay monthDay32 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.MonthDay monthDay34 = monthDay32.withChronologyRetainFields(chronology33);
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = monthDay32.getFieldType((int) (byte) 1);
        int int37 = monthDay30.indexOf(dateTimeFieldType36);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.MonthDay monthDay39 = monthDay30.withChronologyRetainFields(chronology38);
        boolean boolean40 = monthDay25.isBefore((org.joda.time.ReadablePartial) monthDay39);
        org.joda.time.MonthDay monthDay42 = org.joda.time.MonthDay.parse("");
        org.joda.time.MonthDay monthDay44 = monthDay42.minusDays((int) '#');
        org.joda.time.MonthDay monthDay46 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.MonthDay monthDay48 = monthDay46.withChronologyRetainFields(chronology47);
        org.joda.time.DateTimeFieldType dateTimeFieldType50 = monthDay46.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property51 = monthDay46.dayOfMonth();
        org.joda.time.Chronology chronology52 = monthDay46.getChronology();
        org.joda.time.Chronology chronology53 = monthDay46.getChronology();
        org.joda.time.ReadableInstant readableInstant54 = null;
        org.joda.time.DateTime dateTime55 = monthDay46.toDateTime(readableInstant54);
        org.joda.time.MonthDay monthDay57 = monthDay46.plusMonths((int) ' ');
        boolean boolean58 = monthDay42.isAfter((org.joda.time.ReadablePartial) monthDay57);
        org.joda.time.MonthDay monthDay60 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.MonthDay monthDay62 = monthDay60.withChronologyRetainFields(chronology61);
        org.joda.time.DateTimeFieldType dateTimeFieldType64 = monthDay60.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod65 = null;
        org.joda.time.MonthDay monthDay66 = monthDay60.plus(readablePeriod65);
        org.joda.time.MonthDay monthDay68 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology69 = null;
        org.joda.time.MonthDay monthDay70 = monthDay68.withChronologyRetainFields(chronology69);
        org.joda.time.MonthDay monthDay72 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology73 = null;
        org.joda.time.MonthDay monthDay74 = monthDay72.withChronologyRetainFields(chronology73);
        org.joda.time.DateTimeFieldType dateTimeFieldType76 = monthDay72.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property77 = monthDay70.property(dateTimeFieldType76);
        int int78 = property77.get();
        org.joda.time.MonthDay monthDay80 = property77.addWrapFieldToCopy((int) (short) 1);
        boolean boolean81 = monthDay60.isBefore((org.joda.time.ReadablePartial) monthDay80);
        org.joda.time.MonthDay monthDay83 = monthDay80.minusMonths((int) (byte) 100);
        org.joda.time.MonthDay monthDay85 = monthDay83.plusMonths(1);
        int int86 = monthDay57.compareTo((org.joda.time.ReadablePartial) monthDay83);
        int int87 = monthDay25.compareTo((org.joda.time.ReadablePartial) monthDay83);
        int int88 = monthDay83.getMonthOfYear();
        org.joda.time.MonthDay monthDay90 = monthDay83.minusMonths(11);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(monthDay18);
        org.junit.Assert.assertNotNull(monthDay20);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(monthDay27);
        org.junit.Assert.assertNotNull(monthDay30);
        org.junit.Assert.assertNotNull(monthDay32);
        org.junit.Assert.assertNotNull(monthDay34);
        org.junit.Assert.assertNotNull(dateTimeFieldType36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(monthDay39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(monthDay42);
        org.junit.Assert.assertNotNull(monthDay44);
        org.junit.Assert.assertNotNull(monthDay46);
        org.junit.Assert.assertNotNull(monthDay48);
        org.junit.Assert.assertNotNull(dateTimeFieldType50);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(monthDay57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(monthDay60);
        org.junit.Assert.assertNotNull(monthDay62);
        org.junit.Assert.assertNotNull(dateTimeFieldType64);
        org.junit.Assert.assertNotNull(monthDay66);
        org.junit.Assert.assertNotNull(monthDay68);
        org.junit.Assert.assertNotNull(monthDay70);
        org.junit.Assert.assertNotNull(monthDay72);
        org.junit.Assert.assertNotNull(monthDay74);
        org.junit.Assert.assertNotNull(dateTimeFieldType76);
        org.junit.Assert.assertNotNull(property77);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 1 + "'", int78 == 1);
        org.junit.Assert.assertNotNull(monthDay80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertNotNull(monthDay83);
        org.junit.Assert.assertNotNull(monthDay85);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + (-1) + "'", int86 == (-1));
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + (-1) + "'", int87 == (-1));
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 9 + "'", int88 == 9);
        org.junit.Assert.assertNotNull(monthDay90);
    }

    @Test
    public void test0717() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0717");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property6 = monthDay1.dayOfMonth();
        org.joda.time.MonthDay monthDay8 = property6.addWrapFieldToCopy(1);
        org.joda.time.MonthDay monthDay10 = property6.addWrapFieldToCopy(0);
        org.joda.time.MonthDay monthDay12 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MonthDay monthDay14 = monthDay12.withChronologyRetainFields(chronology13);
        org.joda.time.MonthDay monthDay16 = monthDay12.minusMonths((int) (byte) -1);
        boolean boolean17 = property6.equals((java.lang.Object) monthDay16);
        int int18 = property6.get();
        org.joda.time.DurationField durationField19 = property6.getRangeDurationField();
        org.joda.time.MonthDay monthDay21 = property6.addWrapFieldToCopy((int) (byte) 1);
        int int22 = property6.get();
        int int23 = property6.get();
        org.joda.time.DurationField durationField24 = property6.getDurationField();
        java.util.Locale locale25 = null;
        java.lang.String str26 = property6.getAsText(locale25);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(monthDay8);
        org.junit.Assert.assertNotNull(monthDay10);
        org.junit.Assert.assertNotNull(monthDay12);
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "1" + "'", str26, "1");
    }

    @Test
    public void test0718() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0718");
        org.joda.time.MonthDay monthDay2 = new org.joda.time.MonthDay(3, (int) (byte) 10);
    }

    @Test
    public void test0719() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0719");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay2 = new org.joda.time.MonthDay((int) ' ', (int) ' ');
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 32 for monthOfYear must not be larger than 12");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0720() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0720");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay1.plus(readablePeriod6);
        org.joda.time.MonthDay monthDay9 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MonthDay monthDay11 = monthDay9.withChronologyRetainFields(chronology10);
        org.joda.time.MonthDay monthDay13 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MonthDay monthDay15 = monthDay13.withChronologyRetainFields(chronology14);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = monthDay13.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property18 = monthDay11.property(dateTimeFieldType17);
        int int19 = property18.get();
        org.joda.time.MonthDay monthDay21 = property18.addWrapFieldToCopy((int) (short) 1);
        boolean boolean22 = monthDay1.isBefore((org.joda.time.ReadablePartial) monthDay21);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MonthDay monthDay24 = monthDay1.withChronologyRetainFields(chronology23);
        org.joda.time.Chronology chronology25 = monthDay24.getChronology();
        int[] intArray26 = monthDay24.getValues();
        org.joda.time.MonthDay monthDay28 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MonthDay monthDay30 = monthDay28.withChronologyRetainFields(chronology29);
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = monthDay28.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay monthDay34 = monthDay24.withField(dateTimeFieldType32, 10);
        org.joda.time.MonthDay monthDay36 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.MonthDay monthDay38 = monthDay36.withChronologyRetainFields(chronology37);
        org.joda.time.MonthDay monthDay40 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.MonthDay monthDay42 = monthDay40.withChronologyRetainFields(chronology41);
        org.joda.time.DateTimeFieldType dateTimeFieldType44 = monthDay40.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property45 = monthDay40.dayOfMonth();
        org.joda.time.Chronology chronology46 = monthDay40.getChronology();
        org.joda.time.MonthDay monthDay47 = org.joda.time.MonthDay.now(chronology46);
        org.joda.time.MonthDay monthDay48 = monthDay38.withChronologyRetainFields(chronology46);
        org.joda.time.Chronology chronology49 = monthDay38.getChronology();
        org.joda.time.MonthDay monthDay50 = new org.joda.time.MonthDay((java.lang.Object) monthDay34, chronology49);
        org.joda.time.MonthDay monthDay52 = monthDay34.minusMonths(10);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField54 = monthDay52.getField((int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 100");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(monthDay9);
        org.junit.Assert.assertNotNull(monthDay11);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, 1]");
        org.junit.Assert.assertNotNull(monthDay28);
        org.junit.Assert.assertNotNull(monthDay30);
        org.junit.Assert.assertNotNull(dateTimeFieldType32);
        org.junit.Assert.assertNotNull(monthDay34);
        org.junit.Assert.assertNotNull(monthDay36);
        org.junit.Assert.assertNotNull(monthDay38);
        org.junit.Assert.assertNotNull(monthDay40);
        org.junit.Assert.assertNotNull(monthDay42);
        org.junit.Assert.assertNotNull(dateTimeFieldType44);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(monthDay47);
        org.junit.Assert.assertNotNull(monthDay48);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(monthDay52);
    }

    @Test
    public void test0721() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0721");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        org.joda.time.MonthDay.Property property11 = monthDay3.monthOfYear();
        org.joda.time.MonthDay monthDay13 = property11.addWrapFieldToCopy((int) (short) -1);
        java.util.Locale locale14 = null;
        int int15 = property11.getMaximumTextLength(locale14);
        java.util.Locale locale17 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay18 = property11.setCopy("--09-01", locale17);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"--09-01\" for monthOfYear is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 9 + "'", int15 == 9);
    }

    @Test
    public void test0722() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0722");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.MonthDay monthDay1 = new org.joda.time.MonthDay(dateTimeZone0);
        org.joda.time.MonthDay.Property property2 = monthDay1.dayOfMonth();
        int int3 = property2.getMaximumValue();
        java.util.Locale locale4 = null;
        int int5 = property2.getMaximumShortTextLength(locale4);
        org.joda.time.MonthDay monthDay7 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MonthDay monthDay9 = monthDay7.withChronologyRetainFields(chronology8);
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = monthDay7.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.MonthDay monthDay13 = monthDay7.plus(readablePeriod12);
        org.joda.time.MonthDay monthDay15 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MonthDay monthDay17 = monthDay15.withChronologyRetainFields(chronology16);
        org.joda.time.MonthDay monthDay19 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MonthDay monthDay21 = monthDay19.withChronologyRetainFields(chronology20);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = monthDay19.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property24 = monthDay17.property(dateTimeFieldType23);
        int int25 = property24.get();
        org.joda.time.MonthDay monthDay27 = property24.addWrapFieldToCopy((int) (short) 1);
        boolean boolean28 = monthDay7.isBefore((org.joda.time.ReadablePartial) monthDay27);
        org.joda.time.MonthDay monthDay30 = monthDay27.minusMonths((int) (byte) 100);
        org.joda.time.MonthDay monthDay32 = monthDay30.minusDays(31);
        org.joda.time.MonthDay monthDay34 = monthDay32.plusDays((int) (byte) 10);
        org.joda.time.MonthDay monthDay36 = monthDay32.minusDays(0);
        int int37 = property2.compareTo((org.joda.time.ReadablePartial) monthDay32);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 30 + "'", int3 == 30);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2 + "'", int5 == 2);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(monthDay9);
        org.junit.Assert.assertNotNull(dateTimeFieldType11);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(monthDay17);
        org.junit.Assert.assertNotNull(monthDay19);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(monthDay27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(monthDay30);
        org.junit.Assert.assertNotNull(monthDay32);
        org.junit.Assert.assertNotNull(monthDay34);
        org.junit.Assert.assertNotNull(monthDay36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
    }

    @Test
    public void test0723() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0723");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        org.joda.time.MonthDay.Property property11 = monthDay3.monthOfYear();
        org.joda.time.MonthDay monthDay13 = property11.addWrapFieldToCopy((int) (short) -1);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType15 = monthDay13.getFieldType((int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 10");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(monthDay13);
    }

    @Test
    public void test0724() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0724");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay1.plus(readablePeriod6);
        org.joda.time.MonthDay monthDay9 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MonthDay monthDay11 = monthDay9.withChronologyRetainFields(chronology10);
        org.joda.time.MonthDay monthDay13 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MonthDay monthDay15 = monthDay13.withChronologyRetainFields(chronology14);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = monthDay13.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property18 = monthDay11.property(dateTimeFieldType17);
        int int19 = property18.get();
        org.joda.time.MonthDay monthDay21 = property18.addWrapFieldToCopy((int) (short) 1);
        boolean boolean22 = monthDay1.isBefore((org.joda.time.ReadablePartial) monthDay21);
        org.joda.time.MonthDay monthDay24 = monthDay21.minusMonths((int) (byte) 100);
        org.joda.time.MonthDay monthDay26 = monthDay24.plusMonths(1);
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.MonthDay monthDay28 = monthDay24.minus(readablePeriod27);
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.MonthDay monthDay30 = new org.joda.time.MonthDay(dateTimeZone29);
        boolean boolean31 = monthDay28.isEqual((org.joda.time.ReadablePartial) monthDay30);
        org.joda.time.MonthDay monthDay33 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MonthDay monthDay35 = monthDay33.withChronologyRetainFields(chronology34);
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = monthDay33.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod38 = null;
        org.joda.time.MonthDay monthDay39 = monthDay33.plus(readablePeriod38);
        org.joda.time.MonthDay monthDay41 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.MonthDay monthDay43 = monthDay41.withChronologyRetainFields(chronology42);
        org.joda.time.MonthDay monthDay45 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.MonthDay monthDay47 = monthDay45.withChronologyRetainFields(chronology46);
        org.joda.time.DateTimeFieldType dateTimeFieldType49 = monthDay45.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property50 = monthDay43.property(dateTimeFieldType49);
        int int51 = property50.get();
        org.joda.time.MonthDay monthDay53 = property50.addWrapFieldToCopy((int) (short) 1);
        boolean boolean54 = monthDay33.isBefore((org.joda.time.ReadablePartial) monthDay53);
        org.joda.time.DateTimeFieldType dateTimeFieldType56 = monthDay33.getFieldType(0);
        int int57 = monthDay28.indexOf(dateTimeFieldType56);
        int int58 = monthDay28.getDayOfMonth();
        org.joda.time.MonthDay monthDay60 = monthDay28.minusDays((int) (short) 0);
        org.joda.time.MonthDay monthDay62 = monthDay60.plusMonths(0);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter63 = null;
        java.lang.String str64 = monthDay60.toString(dateTimeFormatter63);
        org.joda.time.MonthDay monthDay66 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.MonthDay monthDay68 = monthDay66.withChronologyRetainFields(chronology67);
        org.joda.time.DateTimeFieldType dateTimeFieldType70 = monthDay66.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod71 = null;
        org.joda.time.MonthDay monthDay72 = monthDay66.plus(readablePeriod71);
        org.joda.time.MonthDay monthDay74 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology75 = null;
        org.joda.time.MonthDay monthDay76 = monthDay74.withChronologyRetainFields(chronology75);
        org.joda.time.MonthDay monthDay78 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology79 = null;
        org.joda.time.MonthDay monthDay80 = monthDay78.withChronologyRetainFields(chronology79);
        org.joda.time.DateTimeFieldType dateTimeFieldType82 = monthDay78.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property83 = monthDay76.property(dateTimeFieldType82);
        int int84 = property83.get();
        org.joda.time.MonthDay monthDay86 = property83.addWrapFieldToCopy((int) (short) 1);
        boolean boolean87 = monthDay66.isBefore((org.joda.time.ReadablePartial) monthDay86);
        org.joda.time.DateTimeFieldType dateTimeFieldType89 = monthDay66.getFieldType(0);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay91 = monthDay60.withField(dateTimeFieldType89, 31);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 31 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(monthDay9);
        org.junit.Assert.assertNotNull(monthDay11);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertNotNull(monthDay26);
        org.junit.Assert.assertNotNull(monthDay28);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(monthDay33);
        org.junit.Assert.assertNotNull(monthDay35);
        org.junit.Assert.assertNotNull(dateTimeFieldType37);
        org.junit.Assert.assertNotNull(monthDay39);
        org.junit.Assert.assertNotNull(monthDay41);
        org.junit.Assert.assertNotNull(monthDay43);
        org.junit.Assert.assertNotNull(monthDay45);
        org.junit.Assert.assertNotNull(monthDay47);
        org.junit.Assert.assertNotNull(dateTimeFieldType49);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertNotNull(monthDay53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 2 + "'", int58 == 2);
        org.junit.Assert.assertNotNull(monthDay60);
        org.junit.Assert.assertNotNull(monthDay62);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "--09-02" + "'", str64, "--09-02");
        org.junit.Assert.assertNotNull(monthDay66);
        org.junit.Assert.assertNotNull(monthDay68);
        org.junit.Assert.assertNotNull(dateTimeFieldType70);
        org.junit.Assert.assertNotNull(monthDay72);
        org.junit.Assert.assertNotNull(monthDay74);
        org.junit.Assert.assertNotNull(monthDay76);
        org.junit.Assert.assertNotNull(monthDay78);
        org.junit.Assert.assertNotNull(monthDay80);
        org.junit.Assert.assertNotNull(dateTimeFieldType82);
        org.junit.Assert.assertNotNull(property83);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 1 + "'", int84 == 1);
        org.junit.Assert.assertNotNull(monthDay86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType89);
    }

    @Test
    public void test0725() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0725");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.MonthDay monthDay3 = monthDay1.minusDays((int) '#');
        int int4 = monthDay3.size();
        org.joda.time.MonthDay monthDay6 = monthDay3.withMonthOfYear(9);
        int int8 = monthDay6.getValue((int) (short) 1);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2 + "'", int4 == 2);
        org.junit.Assert.assertNotNull(monthDay6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 28 + "'", int8 == 28);
    }

    @Test
    public void test0726() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0726");
        org.joda.time.MonthDay monthDay2 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MonthDay monthDay4 = monthDay2.withChronologyRetainFields(chronology3);
        org.joda.time.MonthDay monthDay6 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MonthDay monthDay8 = monthDay6.withChronologyRetainFields(chronology7);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = monthDay6.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property11 = monthDay4.property(dateTimeFieldType10);
        int int12 = property11.get();
        org.joda.time.DurationField durationField13 = property11.getDurationField();
        org.joda.time.MonthDay monthDay15 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MonthDay monthDay17 = monthDay15.withChronologyRetainFields(chronology16);
        org.joda.time.MonthDay monthDay19 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MonthDay monthDay21 = monthDay19.withChronologyRetainFields(chronology20);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = monthDay19.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property24 = monthDay17.property(dateTimeFieldType23);
        boolean boolean25 = property11.equals((java.lang.Object) monthDay17);
        org.joda.time.DateTimeField dateTimeField26 = property11.getField();
        java.util.Locale locale27 = null;
        int int28 = property11.getMaximumShortTextLength(locale27);
        org.joda.time.MonthDay monthDay30 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MonthDay monthDay32 = monthDay30.withChronologyRetainFields(chronology31);
        org.joda.time.MonthDay monthDay34 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.MonthDay monthDay36 = monthDay34.withChronologyRetainFields(chronology35);
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = monthDay34.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property39 = monthDay32.property(dateTimeFieldType38);
        org.joda.time.MonthDay.Property property40 = monthDay32.monthOfYear();
        int int41 = monthDay32.getDayOfMonth();
        org.joda.time.MonthDay.Property property42 = monthDay32.dayOfMonth();
        int int43 = monthDay32.getDayOfMonth();
        org.joda.time.MonthDay monthDay45 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.MonthDay monthDay47 = monthDay45.withChronologyRetainFields(chronology46);
        org.joda.time.DateTimeFieldType dateTimeFieldType49 = monthDay45.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property50 = monthDay45.dayOfMonth();
        org.joda.time.Chronology chronology51 = monthDay45.getChronology();
        org.joda.time.MonthDay monthDay52 = monthDay32.withChronologyRetainFields(chronology51);
        org.joda.time.MonthDay monthDay53 = new org.joda.time.MonthDay((java.lang.Object) locale27, chronology51);
        org.joda.time.MonthDay monthDay54 = new org.joda.time.MonthDay(chronology51);
        org.joda.time.MonthDay monthDay55 = new org.joda.time.MonthDay((long) (short) 10, chronology51);
        org.junit.Assert.assertNotNull(monthDay2);
        org.junit.Assert.assertNotNull(monthDay4);
        org.junit.Assert.assertNotNull(monthDay6);
        org.junit.Assert.assertNotNull(monthDay8);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(monthDay17);
        org.junit.Assert.assertNotNull(monthDay19);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
        org.junit.Assert.assertNotNull(monthDay30);
        org.junit.Assert.assertNotNull(monthDay32);
        org.junit.Assert.assertNotNull(monthDay34);
        org.junit.Assert.assertNotNull(monthDay36);
        org.junit.Assert.assertNotNull(dateTimeFieldType38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertNotNull(monthDay45);
        org.junit.Assert.assertNotNull(monthDay47);
        org.junit.Assert.assertNotNull(dateTimeFieldType49);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(monthDay52);
    }

    @Test
    public void test0727() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0727");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        int int11 = property10.get();
        org.joda.time.MonthDay monthDay13 = property10.addWrapFieldToCopy((int) (short) 1);
        org.joda.time.MonthDay.Property property14 = monthDay13.dayOfMonth();
        int int15 = property14.getMaximumValueOverall();
        int int16 = property14.getMinimumValueOverall();
        org.joda.time.MonthDay monthDay18 = property14.setCopy(31);
        java.util.Locale locale19 = null;
        int int20 = property14.getMaximumTextLength(locale19);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 31 + "'", int15 == 31);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(monthDay18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2 + "'", int20 == 2);
    }

    @Test
    public void test0728() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0728");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        org.joda.time.MonthDay.Property property11 = monthDay3.monthOfYear();
        java.lang.String str12 = property11.getAsShortText();
        int int13 = property11.getMinimumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = property11.getFieldType();
        java.util.Locale locale15 = null;
        int int16 = property11.getMaximumShortTextLength(locale15);
        org.joda.time.DateTimeField dateTimeField17 = property11.getField();
        int int18 = property11.get();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Jan" + "'", str12, "Jan");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 3 + "'", int16 == 3);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
    }

    @Test
    public void test0729() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0729");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay2 = new org.joda.time.MonthDay((int) ' ', (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 32 for monthOfYear must not be larger than 12");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0730() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0730");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay1.plus(readablePeriod6);
        org.joda.time.MonthDay monthDay9 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MonthDay monthDay11 = monthDay9.withChronologyRetainFields(chronology10);
        org.joda.time.MonthDay monthDay13 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MonthDay monthDay15 = monthDay13.withChronologyRetainFields(chronology14);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = monthDay13.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property18 = monthDay11.property(dateTimeFieldType17);
        int int19 = property18.get();
        org.joda.time.MonthDay monthDay21 = property18.addWrapFieldToCopy((int) (short) 1);
        boolean boolean22 = monthDay1.isBefore((org.joda.time.ReadablePartial) monthDay21);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MonthDay monthDay24 = monthDay1.withChronologyRetainFields(chronology23);
        org.joda.time.Chronology chronology25 = monthDay24.getChronology();
        org.joda.time.MonthDay monthDay26 = new org.joda.time.MonthDay(chronology25);
        org.joda.time.MonthDay monthDay28 = monthDay26.plusMonths((int) '#');
        org.joda.time.MonthDay monthDay30 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MonthDay monthDay32 = monthDay30.withChronologyRetainFields(chronology31);
        org.joda.time.MonthDay monthDay34 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.MonthDay monthDay36 = monthDay34.withChronologyRetainFields(chronology35);
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = monthDay34.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property39 = monthDay32.property(dateTimeFieldType38);
        int int40 = property39.get();
        org.joda.time.MonthDay monthDay42 = property39.addWrapFieldToCopy((int) (short) 1);
        org.joda.time.MonthDay monthDay44 = monthDay42.plusDays(2);
        org.joda.time.ReadablePeriod readablePeriod45 = null;
        org.joda.time.MonthDay monthDay46 = monthDay44.minus(readablePeriod45);
        org.joda.time.Chronology chronology47 = monthDay46.getChronology();
        org.joda.time.MonthDay monthDay49 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.MonthDay monthDay51 = monthDay49.withChronologyRetainFields(chronology50);
        org.joda.time.MonthDay monthDay53 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.MonthDay monthDay55 = monthDay53.withChronologyRetainFields(chronology54);
        org.joda.time.DateTimeFieldType dateTimeFieldType57 = monthDay53.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property58 = monthDay51.property(dateTimeFieldType57);
        int int59 = property58.get();
        org.joda.time.MonthDay monthDay61 = property58.addWrapFieldToCopy((int) (short) 1);
        org.joda.time.MonthDay.Property property62 = monthDay61.dayOfMonth();
        int int63 = property62.getMaximumValueOverall();
        int int64 = property62.getMinimumValueOverall();
        org.joda.time.MonthDay monthDay66 = property62.setCopy(31);
        org.joda.time.DateTimeFieldType dateTimeFieldType67 = property62.getFieldType();
        int int68 = monthDay46.get(dateTimeFieldType67);
        int int69 = monthDay26.get(dateTimeFieldType67);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(monthDay9);
        org.junit.Assert.assertNotNull(monthDay11);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(monthDay28);
        org.junit.Assert.assertNotNull(monthDay30);
        org.junit.Assert.assertNotNull(monthDay32);
        org.junit.Assert.assertNotNull(monthDay34);
        org.junit.Assert.assertNotNull(monthDay36);
        org.junit.Assert.assertNotNull(dateTimeFieldType38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertNotNull(monthDay42);
        org.junit.Assert.assertNotNull(monthDay44);
        org.junit.Assert.assertNotNull(monthDay46);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(monthDay49);
        org.junit.Assert.assertNotNull(monthDay51);
        org.junit.Assert.assertNotNull(monthDay53);
        org.junit.Assert.assertNotNull(monthDay55);
        org.junit.Assert.assertNotNull(dateTimeFieldType57);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertNotNull(monthDay61);
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 31 + "'", int63 == 31);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertNotNull(monthDay66);
        org.junit.Assert.assertNotNull(dateTimeFieldType67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 4 + "'", int68 == 4);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 25 + "'", int69 == 25);
    }

    @Test
    public void test0731() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0731");
        org.joda.time.MonthDay monthDay4 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.MonthDay monthDay6 = monthDay4.withChronologyRetainFields(chronology5);
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = monthDay4.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property9 = monthDay4.dayOfMonth();
        org.joda.time.Chronology chronology10 = monthDay4.getChronology();
        org.joda.time.MonthDay monthDay11 = new org.joda.time.MonthDay((-1L), chronology10);
        org.joda.time.MonthDay monthDay12 = new org.joda.time.MonthDay(chronology10);
        org.joda.time.MonthDay monthDay13 = new org.joda.time.MonthDay((long) 8, chronology10);
        org.joda.time.MonthDay monthDay14 = new org.joda.time.MonthDay((long) ' ', chronology10);
        int int15 = monthDay14.getDayOfMonth();
        org.junit.Assert.assertNotNull(monthDay4);
        org.junit.Assert.assertNotNull(monthDay6);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
    }

    @Test
    public void test0732() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0732");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay1.plus(readablePeriod6);
        org.joda.time.MonthDay monthDay9 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MonthDay monthDay11 = monthDay9.withChronologyRetainFields(chronology10);
        org.joda.time.MonthDay monthDay13 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MonthDay monthDay15 = monthDay13.withChronologyRetainFields(chronology14);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = monthDay13.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property18 = monthDay11.property(dateTimeFieldType17);
        int int19 = property18.get();
        org.joda.time.MonthDay monthDay21 = property18.addWrapFieldToCopy((int) (short) 1);
        boolean boolean22 = monthDay1.isBefore((org.joda.time.ReadablePartial) monthDay21);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MonthDay monthDay24 = monthDay1.withChronologyRetainFields(chronology23);
        org.joda.time.Chronology chronology25 = monthDay24.getChronology();
        org.joda.time.MonthDay monthDay27 = org.joda.time.MonthDay.parse("");
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.MonthDay monthDay30 = monthDay27.withPeriodAdded(readablePeriod28, 1);
        org.joda.time.MonthDay monthDay32 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.MonthDay monthDay34 = monthDay32.withChronologyRetainFields(chronology33);
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = monthDay32.getFieldType((int) (byte) 1);
        int int37 = monthDay30.indexOf(dateTimeFieldType36);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.MonthDay monthDay39 = monthDay30.withChronologyRetainFields(chronology38);
        boolean boolean40 = monthDay24.isAfter((org.joda.time.ReadablePartial) monthDay30);
        int int41 = monthDay30.getMonthOfYear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField43 = monthDay30.getField(31);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 31");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(monthDay9);
        org.junit.Assert.assertNotNull(monthDay11);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(monthDay27);
        org.junit.Assert.assertNotNull(monthDay30);
        org.junit.Assert.assertNotNull(monthDay32);
        org.junit.Assert.assertNotNull(monthDay34);
        org.junit.Assert.assertNotNull(dateTimeFieldType36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(monthDay39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
    }

    @Test
    public void test0733() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0733");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        int int11 = property10.get();
        int int12 = property10.getMaximumValue();
        org.joda.time.MonthDay monthDay14 = property10.setCopy((int) (short) 1);
        org.joda.time.MonthDay monthDay16 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MonthDay monthDay18 = monthDay16.withChronologyRetainFields(chronology17);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = monthDay16.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.MonthDay monthDay22 = monthDay16.plus(readablePeriod21);
        int int23 = monthDay16.getDayOfMonth();
        int int24 = property10.compareTo((org.joda.time.ReadablePartial) monthDay16);
        org.joda.time.DateTimeField[] dateTimeFieldArray25 = monthDay16.getFields();
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        org.joda.time.MonthDay monthDay27 = monthDay16.plus(readablePeriod26);
        java.util.Locale locale29 = null;
        java.lang.String str30 = monthDay16.toString("--08-02", locale29);
        int int31 = monthDay16.getDayOfMonth();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 31 + "'", int12 == 31);
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(monthDay18);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertNotNull(monthDay22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldArray25);
        org.junit.Assert.assertNotNull(monthDay27);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "--08-02" + "'", str30, "--08-02");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
    }

    @Test
    public void test0734() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0734");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        int int11 = property10.get();
        org.joda.time.MonthDay monthDay13 = property10.addWrapFieldToCopy((int) (short) 1);
        org.joda.time.MonthDay.Property property14 = monthDay13.dayOfMonth();
        int int15 = property14.getMaximumValue();
        java.lang.String str16 = property14.getAsText();
        java.util.Locale locale17 = null;
        java.lang.String str18 = property14.getAsShortText(locale17);
        org.joda.time.MonthDay monthDay20 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.MonthDay monthDay22 = monthDay20.withChronologyRetainFields(chronology21);
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = monthDay20.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        org.joda.time.MonthDay monthDay26 = monthDay20.plus(readablePeriod25);
        org.joda.time.MonthDay monthDay28 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MonthDay monthDay30 = monthDay28.withChronologyRetainFields(chronology29);
        org.joda.time.MonthDay monthDay32 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.MonthDay monthDay34 = monthDay32.withChronologyRetainFields(chronology33);
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = monthDay32.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property37 = monthDay30.property(dateTimeFieldType36);
        int int38 = property37.get();
        org.joda.time.MonthDay monthDay40 = property37.addWrapFieldToCopy((int) (short) 1);
        boolean boolean41 = monthDay20.isBefore((org.joda.time.ReadablePartial) monthDay40);
        org.joda.time.MonthDay monthDay43 = monthDay40.minusMonths((int) (byte) 100);
        int int44 = monthDay43.getMonthOfYear();
        org.joda.time.MonthDay monthDay46 = monthDay43.withMonthOfYear(1);
        org.joda.time.ReadablePeriod readablePeriod47 = null;
        org.joda.time.MonthDay monthDay48 = monthDay43.plus(readablePeriod47);
        int int49 = property14.compareTo((org.joda.time.ReadablePartial) monthDay48);
        org.joda.time.MonthDay monthDay50 = property14.getMonthDay();
        org.joda.time.DateTimeField dateTimeField51 = property14.getField();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 31 + "'", int15 == 31);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "2" + "'", str16, "2");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "2" + "'", str18, "2");
        org.junit.Assert.assertNotNull(monthDay20);
        org.junit.Assert.assertNotNull(monthDay22);
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertNotNull(monthDay26);
        org.junit.Assert.assertNotNull(monthDay28);
        org.junit.Assert.assertNotNull(monthDay30);
        org.junit.Assert.assertNotNull(monthDay32);
        org.junit.Assert.assertNotNull(monthDay34);
        org.junit.Assert.assertNotNull(dateTimeFieldType36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(monthDay40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(monthDay43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 9 + "'", int44 == 9);
        org.junit.Assert.assertNotNull(monthDay46);
        org.junit.Assert.assertNotNull(monthDay48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(monthDay50);
        org.junit.Assert.assertNotNull(dateTimeField51);
    }

    @Test
    public void test0735() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0735");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay1.plus(readablePeriod6);
        org.joda.time.MonthDay monthDay9 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MonthDay monthDay11 = monthDay9.withChronologyRetainFields(chronology10);
        org.joda.time.MonthDay monthDay13 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MonthDay monthDay15 = monthDay13.withChronologyRetainFields(chronology14);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = monthDay13.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property18 = monthDay11.property(dateTimeFieldType17);
        int int19 = property18.get();
        org.joda.time.MonthDay monthDay21 = property18.addWrapFieldToCopy((int) (short) 1);
        boolean boolean22 = monthDay1.isBefore((org.joda.time.ReadablePartial) monthDay21);
        org.joda.time.MonthDay monthDay24 = monthDay21.minusMonths((int) (byte) 100);
        org.joda.time.MonthDay monthDay26 = monthDay24.plusMonths(1);
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.MonthDay monthDay28 = monthDay24.minus(readablePeriod27);
        org.joda.time.MonthDay monthDay30 = org.joda.time.MonthDay.parse("");
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        org.joda.time.MonthDay monthDay33 = monthDay30.withPeriodAdded(readablePeriod31, 1);
        org.joda.time.MonthDay monthDay35 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.MonthDay monthDay37 = monthDay35.withChronologyRetainFields(chronology36);
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = monthDay35.getFieldType((int) (byte) 1);
        int int40 = monthDay33.indexOf(dateTimeFieldType39);
        org.joda.time.MonthDay.Property property41 = monthDay28.property(dateTimeFieldType39);
        java.util.Locale locale42 = null;
        int int43 = property41.getMaximumShortTextLength(locale42);
        org.joda.time.MonthDay monthDay44 = property41.getMonthDay();
        org.joda.time.MonthDay monthDay46 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.MonthDay monthDay48 = monthDay46.withChronologyRetainFields(chronology47);
        org.joda.time.DateTimeFieldType dateTimeFieldType50 = monthDay46.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod51 = null;
        org.joda.time.MonthDay monthDay52 = monthDay46.plus(readablePeriod51);
        org.joda.time.MonthDay monthDay54 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.MonthDay monthDay56 = monthDay54.withChronologyRetainFields(chronology55);
        org.joda.time.MonthDay monthDay58 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.MonthDay monthDay60 = monthDay58.withChronologyRetainFields(chronology59);
        org.joda.time.DateTimeFieldType dateTimeFieldType62 = monthDay58.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property63 = monthDay56.property(dateTimeFieldType62);
        int int64 = property63.get();
        org.joda.time.MonthDay monthDay66 = property63.addWrapFieldToCopy((int) (short) 1);
        boolean boolean67 = monthDay46.isBefore((org.joda.time.ReadablePartial) monthDay66);
        org.joda.time.MonthDay monthDay69 = monthDay66.minusMonths((int) (byte) 100);
        int int70 = monthDay69.getMonthOfYear();
        org.joda.time.MonthDay monthDay72 = monthDay69.withMonthOfYear(1);
        org.joda.time.ReadablePeriod readablePeriod73 = null;
        org.joda.time.MonthDay monthDay74 = monthDay69.plus(readablePeriod73);
        org.joda.time.MonthDay monthDay76 = monthDay74.withDayOfMonth(1);
        int int77 = property41.compareTo((org.joda.time.ReadablePartial) monthDay76);
        org.joda.time.MonthDay monthDay79 = property41.addWrapFieldToCopy(100);
        int int80 = property41.getMinimumValueOverall();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(monthDay9);
        org.junit.Assert.assertNotNull(monthDay11);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertNotNull(monthDay26);
        org.junit.Assert.assertNotNull(monthDay28);
        org.junit.Assert.assertNotNull(monthDay30);
        org.junit.Assert.assertNotNull(monthDay33);
        org.junit.Assert.assertNotNull(monthDay35);
        org.junit.Assert.assertNotNull(monthDay37);
        org.junit.Assert.assertNotNull(dateTimeFieldType39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2 + "'", int43 == 2);
        org.junit.Assert.assertNotNull(monthDay44);
        org.junit.Assert.assertNotNull(monthDay46);
        org.junit.Assert.assertNotNull(monthDay48);
        org.junit.Assert.assertNotNull(dateTimeFieldType50);
        org.junit.Assert.assertNotNull(monthDay52);
        org.junit.Assert.assertNotNull(monthDay54);
        org.junit.Assert.assertNotNull(monthDay56);
        org.junit.Assert.assertNotNull(monthDay58);
        org.junit.Assert.assertNotNull(monthDay60);
        org.junit.Assert.assertNotNull(dateTimeFieldType62);
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertNotNull(monthDay66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(monthDay69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 9 + "'", int70 == 9);
        org.junit.Assert.assertNotNull(monthDay72);
        org.junit.Assert.assertNotNull(monthDay74);
        org.junit.Assert.assertNotNull(monthDay76);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertNotNull(monthDay79);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 1 + "'", int80 == 1);
    }

    @Test
    public void test0736() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0736");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.MonthDay monthDay3 = monthDay1.minusDays((int) '#');
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay5.dayOfMonth();
        org.joda.time.Chronology chronology11 = monthDay5.getChronology();
        org.joda.time.Chronology chronology12 = monthDay5.getChronology();
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.DateTime dateTime14 = monthDay5.toDateTime(readableInstant13);
        org.joda.time.MonthDay monthDay16 = monthDay5.plusMonths((int) ' ');
        boolean boolean17 = monthDay1.isAfter((org.joda.time.ReadablePartial) monthDay16);
        int[] intArray18 = monthDay1.getValues();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray19 = monthDay1.getFieldTypes();
        org.joda.time.MonthDay monthDay21 = org.joda.time.MonthDay.parse("--09-02");
        int int22 = monthDay21.size();
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = monthDay21.getFieldType(1);
        boolean boolean25 = monthDay1.isSupported(dateTimeFieldType24);
        java.util.Locale locale27 = null;
        java.lang.String str28 = monthDay1.toString("--09-01", locale27);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[1, 1]");
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray19);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "--09-01" + "'", str28, "--09-01");
    }

    @Test
    public void test0737() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0737");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay1.plus(readablePeriod6);
        org.joda.time.MonthDay monthDay9 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MonthDay monthDay11 = monthDay9.withChronologyRetainFields(chronology10);
        org.joda.time.MonthDay monthDay13 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MonthDay monthDay15 = monthDay13.withChronologyRetainFields(chronology14);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = monthDay13.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property18 = monthDay11.property(dateTimeFieldType17);
        int int19 = property18.get();
        org.joda.time.MonthDay monthDay21 = property18.addWrapFieldToCopy((int) (short) 1);
        boolean boolean22 = monthDay1.isBefore((org.joda.time.ReadablePartial) monthDay21);
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = monthDay1.getFieldType(0);
        org.joda.time.MonthDay monthDay26 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.MonthDay monthDay28 = monthDay26.withChronologyRetainFields(chronology27);
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = monthDay26.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        org.joda.time.MonthDay monthDay32 = monthDay26.plus(readablePeriod31);
        org.joda.time.ReadablePeriod readablePeriod33 = null;
        org.joda.time.MonthDay monthDay35 = monthDay26.withPeriodAdded(readablePeriod33, 9);
        org.joda.time.DateTimeField dateTimeField37 = monthDay35.getField(1);
        boolean boolean38 = monthDay1.isEqual((org.joda.time.ReadablePartial) monthDay35);
        org.joda.time.MonthDay monthDay40 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.MonthDay monthDay42 = monthDay40.withChronologyRetainFields(chronology41);
        org.joda.time.MonthDay monthDay44 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.MonthDay monthDay46 = monthDay44.withChronologyRetainFields(chronology45);
        org.joda.time.DateTimeFieldType dateTimeFieldType48 = monthDay44.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property49 = monthDay42.property(dateTimeFieldType48);
        int int50 = property49.get();
        int int51 = property49.getMaximumValue();
        org.joda.time.MonthDay monthDay53 = property49.setCopy((int) (short) 1);
        org.joda.time.MonthDay monthDay55 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.MonthDay monthDay57 = monthDay55.withChronologyRetainFields(chronology56);
        org.joda.time.DateTimeFieldType dateTimeFieldType59 = monthDay55.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod60 = null;
        org.joda.time.MonthDay monthDay61 = monthDay55.plus(readablePeriod60);
        int int62 = monthDay55.getDayOfMonth();
        int int63 = property49.compareTo((org.joda.time.ReadablePartial) monthDay55);
        java.lang.String str64 = property49.getName();
        java.util.Locale locale65 = null;
        java.lang.String str66 = property49.getAsShortText(locale65);
        org.joda.time.DurationField durationField67 = property49.getRangeDurationField();
        org.joda.time.DateTimeFieldType dateTimeFieldType68 = property49.getFieldType();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay70 = monthDay1.withField(dateTimeFieldType68, (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 0 for dayOfMonth must be in the range [1,31]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(monthDay9);
        org.junit.Assert.assertNotNull(monthDay11);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertNotNull(monthDay26);
        org.junit.Assert.assertNotNull(monthDay28);
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertNotNull(monthDay32);
        org.junit.Assert.assertNotNull(monthDay35);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(monthDay40);
        org.junit.Assert.assertNotNull(monthDay42);
        org.junit.Assert.assertNotNull(monthDay44);
        org.junit.Assert.assertNotNull(monthDay46);
        org.junit.Assert.assertNotNull(dateTimeFieldType48);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 31 + "'", int51 == 31);
        org.junit.Assert.assertNotNull(monthDay53);
        org.junit.Assert.assertNotNull(monthDay55);
        org.junit.Assert.assertNotNull(monthDay57);
        org.junit.Assert.assertNotNull(dateTimeFieldType59);
        org.junit.Assert.assertNotNull(monthDay61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "dayOfMonth" + "'", str64, "dayOfMonth");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "1" + "'", str66, "1");
        org.junit.Assert.assertNotNull(durationField67);
        org.junit.Assert.assertNotNull(dateTimeFieldType68);
    }

    @Test
    public void test0738() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0738");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property6 = monthDay1.dayOfMonth();
        org.joda.time.MonthDay monthDay8 = property6.addWrapFieldToCopy(1);
        org.joda.time.MonthDay monthDay10 = property6.addWrapFieldToCopy(0);
        org.joda.time.MonthDay monthDay12 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MonthDay monthDay14 = monthDay12.withChronologyRetainFields(chronology13);
        org.joda.time.MonthDay monthDay16 = monthDay12.minusMonths((int) (byte) -1);
        boolean boolean17 = property6.equals((java.lang.Object) monthDay16);
        java.util.Locale locale18 = null;
        java.lang.String str19 = property6.getAsShortText(locale18);
        org.joda.time.DurationField durationField20 = property6.getRangeDurationField();
        java.util.Locale locale22 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay23 = property6.setCopy("--02-01", locale22);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"--02-01\" for dayOfMonth is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(monthDay8);
        org.junit.Assert.assertNotNull(monthDay10);
        org.junit.Assert.assertNotNull(monthDay12);
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "1" + "'", str19, "1");
        org.junit.Assert.assertNotNull(durationField20);
    }

    @Test
    public void test0739() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0739");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        int int11 = property10.get();
        org.joda.time.MonthDay monthDay13 = property10.addWrapFieldToCopy((int) (short) 1);
        java.lang.String str14 = property10.getAsString();
        java.lang.String str15 = property10.getAsText();
        org.joda.time.DurationField durationField16 = property10.getRangeDurationField();
        int int17 = property10.getMinimumValue();
        org.joda.time.MonthDay monthDay19 = property10.addToCopy((int) (short) -1);
        org.joda.time.MonthDay monthDay21 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.MonthDay monthDay23 = monthDay21.withChronologyRetainFields(chronology22);
        org.joda.time.MonthDay monthDay25 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MonthDay monthDay27 = monthDay25.withChronologyRetainFields(chronology26);
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = monthDay25.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property30 = monthDay23.property(dateTimeFieldType29);
        int int31 = property30.get();
        org.joda.time.DurationField durationField32 = property30.getDurationField();
        org.joda.time.MonthDay monthDay34 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.MonthDay monthDay36 = monthDay34.withChronologyRetainFields(chronology35);
        org.joda.time.MonthDay monthDay38 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.MonthDay monthDay40 = monthDay38.withChronologyRetainFields(chronology39);
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = monthDay38.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property43 = monthDay36.property(dateTimeFieldType42);
        boolean boolean44 = property30.equals((java.lang.Object) monthDay36);
        org.joda.time.MonthDay monthDay45 = new org.joda.time.MonthDay((java.lang.Object) monthDay36);
        boolean boolean46 = property10.equals((java.lang.Object) monthDay45);
        org.joda.time.MonthDay monthDay48 = monthDay45.minusDays((int) (short) 10);
        org.joda.time.DateTimeField[] dateTimeFieldArray49 = monthDay45.getFields();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "1" + "'", str14, "1");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "1" + "'", str15, "1");
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(monthDay19);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertNotNull(monthDay23);
        org.junit.Assert.assertNotNull(monthDay25);
        org.junit.Assert.assertNotNull(monthDay27);
        org.junit.Assert.assertNotNull(dateTimeFieldType29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(monthDay34);
        org.junit.Assert.assertNotNull(monthDay36);
        org.junit.Assert.assertNotNull(monthDay38);
        org.junit.Assert.assertNotNull(monthDay40);
        org.junit.Assert.assertNotNull(dateTimeFieldType42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(monthDay48);
        org.junit.Assert.assertNotNull(dateTimeFieldArray49);
    }

    @Test
    public void test0740() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0740");
        org.joda.time.MonthDay monthDay2 = org.joda.time.MonthDay.parse("");
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        org.joda.time.MonthDay monthDay5 = monthDay2.withPeriodAdded(readablePeriod3, 1);
        org.joda.time.MonthDay monthDay7 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MonthDay monthDay9 = monthDay7.withChronologyRetainFields(chronology8);
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = monthDay7.getFieldType((int) (byte) 1);
        int int12 = monthDay5.indexOf(dateTimeFieldType11);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MonthDay monthDay14 = monthDay5.withChronologyRetainFields(chronology13);
        org.joda.time.MonthDay monthDay16 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MonthDay monthDay18 = monthDay16.withChronologyRetainFields(chronology17);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = monthDay16.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.MonthDay monthDay22 = monthDay16.plus(readablePeriod21);
        org.joda.time.MonthDay monthDay24 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MonthDay monthDay26 = monthDay24.withChronologyRetainFields(chronology25);
        org.joda.time.MonthDay monthDay28 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MonthDay monthDay30 = monthDay28.withChronologyRetainFields(chronology29);
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = monthDay28.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property33 = monthDay26.property(dateTimeFieldType32);
        int int34 = property33.get();
        org.joda.time.MonthDay monthDay36 = property33.addWrapFieldToCopy((int) (short) 1);
        boolean boolean37 = monthDay16.isBefore((org.joda.time.ReadablePartial) monthDay36);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.MonthDay monthDay39 = monthDay16.withChronologyRetainFields(chronology38);
        org.joda.time.Chronology chronology40 = monthDay39.getChronology();
        org.joda.time.MonthDay monthDay41 = monthDay14.withChronologyRetainFields(chronology40);
        org.joda.time.MonthDay monthDay42 = new org.joda.time.MonthDay((long) 12, chronology40);
        org.joda.time.MonthDay.Property property43 = monthDay42.dayOfMonth();
        // The following exception was thrown during execution in test generation
        try {
            int int45 = monthDay42.getValue(28);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 28");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay2);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(monthDay9);
        org.junit.Assert.assertNotNull(dateTimeFieldType11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(monthDay18);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertNotNull(monthDay22);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertNotNull(monthDay26);
        org.junit.Assert.assertNotNull(monthDay28);
        org.junit.Assert.assertNotNull(monthDay30);
        org.junit.Assert.assertNotNull(dateTimeFieldType32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(monthDay36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(monthDay39);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(monthDay41);
        org.junit.Assert.assertNotNull(property43);
    }

    @Test
    public void test0741() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0741");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay2 = org.joda.time.MonthDay.parse("1", dateTimeFormatter1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0742() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0742");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        int int11 = property10.get();
        int int12 = property10.getMaximumValue();
        org.joda.time.MonthDay monthDay14 = property10.setCopy((int) (short) 1);
        org.joda.time.MonthDay monthDay16 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MonthDay monthDay18 = monthDay16.withChronologyRetainFields(chronology17);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = monthDay16.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.MonthDay monthDay22 = monthDay16.plus(readablePeriod21);
        int int23 = monthDay16.getDayOfMonth();
        int int24 = property10.compareTo((org.joda.time.ReadablePartial) monthDay16);
        org.joda.time.DurationField durationField25 = property10.getDurationField();
        java.util.Locale locale26 = null;
        java.lang.String str27 = property10.getAsShortText(locale26);
        int int28 = property10.getMinimumValue();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 31 + "'", int12 == 31);
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(monthDay18);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertNotNull(monthDay22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "1" + "'", str27, "1");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
    }

    @Test
    public void test0743() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0743");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay1.plus(readablePeriod6);
        int int8 = monthDay7.getMonthOfYear();
        org.joda.time.MonthDay monthDay10 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MonthDay monthDay12 = monthDay10.withChronologyRetainFields(chronology11);
        org.joda.time.MonthDay monthDay14 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MonthDay monthDay16 = monthDay14.withChronologyRetainFields(chronology15);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = monthDay14.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property19 = monthDay12.property(dateTimeFieldType18);
        java.util.Locale locale20 = null;
        int int21 = property19.getMaximumTextLength(locale20);
        org.joda.time.MonthDay monthDay23 = property19.addWrapFieldToCopy((int) (byte) 0);
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.MonthDay monthDay25 = monthDay23.minus(readablePeriod24);
        boolean boolean26 = monthDay7.isAfter((org.joda.time.ReadablePartial) monthDay23);
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.MonthDay monthDay29 = monthDay23.withPeriodAdded(readablePeriod27, (int) (byte) 100);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(monthDay10);
        org.junit.Assert.assertNotNull(monthDay12);
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2 + "'", int21 == 2);
        org.junit.Assert.assertNotNull(monthDay23);
        org.junit.Assert.assertNotNull(monthDay25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(monthDay29);
    }

    @Test
    public void test0744() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0744");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.MonthDay monthDay4 = monthDay1.withPeriodAdded(readablePeriod2, 1);
        org.joda.time.MonthDay monthDay6 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MonthDay monthDay8 = monthDay6.withChronologyRetainFields(chronology7);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = monthDay6.getFieldType((int) (byte) 1);
        int int11 = monthDay4.indexOf(dateTimeFieldType10);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MonthDay monthDay13 = monthDay4.withChronologyRetainFields(chronology12);
        org.joda.time.MonthDay monthDay15 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MonthDay monthDay17 = monthDay15.withChronologyRetainFields(chronology16);
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = monthDay15.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property20 = monthDay15.dayOfMonth();
        org.joda.time.Chronology chronology21 = monthDay15.getChronology();
        org.joda.time.Chronology chronology22 = monthDay15.getChronology();
        boolean boolean23 = monthDay4.isEqual((org.joda.time.ReadablePartial) monthDay15);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter24 = null;
        java.lang.String str25 = monthDay15.toString(dateTimeFormatter24);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MonthDay monthDay27 = monthDay15.withChronologyRetainFields(chronology26);
        org.joda.time.MonthDay monthDay29 = org.joda.time.MonthDay.parse("");
        org.joda.time.MonthDay monthDay31 = monthDay29.minusDays((int) '#');
        org.joda.time.MonthDay monthDay33 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MonthDay monthDay35 = monthDay33.withChronologyRetainFields(chronology34);
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = monthDay33.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property38 = monthDay33.dayOfMonth();
        org.joda.time.Chronology chronology39 = monthDay33.getChronology();
        org.joda.time.Chronology chronology40 = monthDay33.getChronology();
        org.joda.time.ReadableInstant readableInstant41 = null;
        org.joda.time.DateTime dateTime42 = monthDay33.toDateTime(readableInstant41);
        org.joda.time.MonthDay monthDay44 = monthDay33.plusMonths((int) ' ');
        boolean boolean45 = monthDay29.isAfter((org.joda.time.ReadablePartial) monthDay44);
        org.joda.time.MonthDay monthDay47 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.MonthDay monthDay49 = monthDay47.withChronologyRetainFields(chronology48);
        org.joda.time.DateTimeFieldType dateTimeFieldType51 = monthDay47.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod52 = null;
        org.joda.time.MonthDay monthDay53 = monthDay47.plus(readablePeriod52);
        org.joda.time.MonthDay monthDay55 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.MonthDay monthDay57 = monthDay55.withChronologyRetainFields(chronology56);
        org.joda.time.MonthDay monthDay59 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.MonthDay monthDay61 = monthDay59.withChronologyRetainFields(chronology60);
        org.joda.time.DateTimeFieldType dateTimeFieldType63 = monthDay59.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property64 = monthDay57.property(dateTimeFieldType63);
        int int65 = property64.get();
        org.joda.time.MonthDay monthDay67 = property64.addWrapFieldToCopy((int) (short) 1);
        boolean boolean68 = monthDay47.isBefore((org.joda.time.ReadablePartial) monthDay67);
        org.joda.time.MonthDay monthDay70 = monthDay67.minusMonths((int) (byte) 100);
        org.joda.time.MonthDay monthDay72 = monthDay70.plusMonths(1);
        int int73 = monthDay44.compareTo((org.joda.time.ReadablePartial) monthDay70);
        boolean boolean74 = monthDay27.isBefore((org.joda.time.ReadablePartial) monthDay70);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField76 = monthDay70.getField(100);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 100");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay4);
        org.junit.Assert.assertNotNull(monthDay6);
        org.junit.Assert.assertNotNull(monthDay8);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(monthDay17);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "--01-01" + "'", str25, "--01-01");
        org.junit.Assert.assertNotNull(monthDay27);
        org.junit.Assert.assertNotNull(monthDay29);
        org.junit.Assert.assertNotNull(monthDay31);
        org.junit.Assert.assertNotNull(monthDay33);
        org.junit.Assert.assertNotNull(monthDay35);
        org.junit.Assert.assertNotNull(dateTimeFieldType37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(monthDay44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(monthDay47);
        org.junit.Assert.assertNotNull(monthDay49);
        org.junit.Assert.assertNotNull(dateTimeFieldType51);
        org.junit.Assert.assertNotNull(monthDay53);
        org.junit.Assert.assertNotNull(monthDay55);
        org.junit.Assert.assertNotNull(monthDay57);
        org.junit.Assert.assertNotNull(monthDay59);
        org.junit.Assert.assertNotNull(monthDay61);
        org.junit.Assert.assertNotNull(dateTimeFieldType63);
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
        org.junit.Assert.assertNotNull(monthDay67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(monthDay70);
        org.junit.Assert.assertNotNull(monthDay72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + (-1) + "'", int73 == (-1));
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
    }

    @Test
    public void test0745() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0745");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property6 = monthDay1.dayOfMonth();
        org.joda.time.MonthDay monthDay8 = property6.addWrapFieldToCopy(1);
        int int9 = property6.getMaximumValue();
        int int10 = property6.getMaximumValueOverall();
        java.util.Locale locale11 = null;
        int int12 = property6.getMaximumTextLength(locale11);
        org.joda.time.MonthDay monthDay14 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MonthDay monthDay16 = monthDay14.withChronologyRetainFields(chronology15);
        org.joda.time.MonthDay monthDay18 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MonthDay monthDay20 = monthDay18.withChronologyRetainFields(chronology19);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = monthDay18.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property23 = monthDay16.property(dateTimeFieldType22);
        int int24 = property23.get();
        int int25 = property23.getMaximumValue();
        org.joda.time.MonthDay monthDay27 = property23.setCopy((int) (short) 1);
        org.joda.time.MonthDay monthDay29 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.MonthDay monthDay31 = monthDay29.withChronologyRetainFields(chronology30);
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = monthDay29.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod34 = null;
        org.joda.time.MonthDay monthDay35 = monthDay29.plus(readablePeriod34);
        int int36 = monthDay29.getDayOfMonth();
        int int37 = property23.compareTo((org.joda.time.ReadablePartial) monthDay29);
        org.joda.time.MonthDay monthDay39 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.MonthDay monthDay41 = monthDay39.withChronologyRetainFields(chronology40);
        org.joda.time.MonthDay monthDay43 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.MonthDay monthDay45 = monthDay43.withChronologyRetainFields(chronology44);
        org.joda.time.DateTimeFieldType dateTimeFieldType47 = monthDay43.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property48 = monthDay41.property(dateTimeFieldType47);
        int int49 = property48.get();
        org.joda.time.DurationField durationField50 = property48.getDurationField();
        java.util.Locale locale51 = null;
        int int52 = property48.getMaximumTextLength(locale51);
        org.joda.time.MonthDay monthDay54 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.MonthDay monthDay56 = monthDay54.withChronologyRetainFields(chronology55);
        org.joda.time.DateTimeFieldType dateTimeFieldType58 = monthDay54.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property59 = monthDay54.dayOfMonth();
        org.joda.time.Chronology chronology60 = monthDay54.getChronology();
        org.joda.time.Chronology chronology61 = monthDay54.getChronology();
        org.joda.time.ReadableInstant readableInstant62 = null;
        org.joda.time.DateTime dateTime63 = monthDay54.toDateTime(readableInstant62);
        int int64 = property48.compareTo((org.joda.time.ReadableInstant) dateTime63);
        int int65 = property23.compareTo((org.joda.time.ReadableInstant) dateTime63);
        java.lang.String str66 = property23.getAsText();
        boolean boolean67 = property6.equals((java.lang.Object) property23);
        int int68 = property23.getMaximumValue();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(monthDay8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 31 + "'", int9 == 31);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 31 + "'", int10 == 31);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(monthDay18);
        org.junit.Assert.assertNotNull(monthDay20);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 31 + "'", int25 == 31);
        org.junit.Assert.assertNotNull(monthDay27);
        org.junit.Assert.assertNotNull(monthDay29);
        org.junit.Assert.assertNotNull(monthDay31);
        org.junit.Assert.assertNotNull(dateTimeFieldType33);
        org.junit.Assert.assertNotNull(monthDay35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(monthDay39);
        org.junit.Assert.assertNotNull(monthDay41);
        org.junit.Assert.assertNotNull(monthDay43);
        org.junit.Assert.assertNotNull(monthDay45);
        org.junit.Assert.assertNotNull(dateTimeFieldType47);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertNotNull(durationField50);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 2 + "'", int52 == 2);
        org.junit.Assert.assertNotNull(monthDay54);
        org.junit.Assert.assertNotNull(monthDay56);
        org.junit.Assert.assertNotNull(dateTimeFieldType58);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertNotNull(chronology61);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "1" + "'", str66, "1");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 31 + "'", int68 == 31);
    }

    @Test
    public void test0746() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0746");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        int int11 = property10.get();
        org.joda.time.MonthDay monthDay13 = property10.addWrapFieldToCopy((int) (short) 1);
        java.lang.String str14 = property10.getAsString();
        java.lang.String str15 = property10.getAsText();
        org.joda.time.DurationField durationField16 = property10.getRangeDurationField();
        int int17 = property10.getMinimumValue();
        org.joda.time.MonthDay monthDay19 = property10.addToCopy((int) (short) -1);
        java.lang.String str20 = property10.toString();
        int int21 = property10.getMinimumValue();
        org.joda.time.MonthDay monthDay23 = property10.setCopy((int) (short) 1);
        java.util.Locale locale24 = null;
        int int25 = property10.getMaximumShortTextLength(locale24);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "1" + "'", str14, "1");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "1" + "'", str15, "1");
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(monthDay19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Property[dayOfMonth]" + "'", str20, "Property[dayOfMonth]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(monthDay23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2 + "'", int25 == 2);
    }

    @Test
    public void test0747() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0747");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay1.plus(readablePeriod6);
        org.joda.time.MonthDay monthDay9 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MonthDay monthDay11 = monthDay9.withChronologyRetainFields(chronology10);
        org.joda.time.MonthDay monthDay13 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MonthDay monthDay15 = monthDay13.withChronologyRetainFields(chronology14);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = monthDay13.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property18 = monthDay11.property(dateTimeFieldType17);
        int int19 = property18.get();
        org.joda.time.MonthDay monthDay21 = property18.addWrapFieldToCopy((int) (short) 1);
        boolean boolean22 = monthDay1.isBefore((org.joda.time.ReadablePartial) monthDay21);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MonthDay monthDay24 = monthDay1.withChronologyRetainFields(chronology23);
        org.joda.time.Chronology chronology25 = monthDay24.getChronology();
        org.joda.time.MonthDay monthDay26 = new org.joda.time.MonthDay(chronology25);
        org.joda.time.MonthDay monthDay28 = org.joda.time.MonthDay.parse("");
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        org.joda.time.MonthDay monthDay31 = monthDay28.withPeriodAdded(readablePeriod29, 1);
        org.joda.time.MonthDay monthDay33 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MonthDay monthDay35 = monthDay33.withChronologyRetainFields(chronology34);
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = monthDay33.getFieldType((int) (byte) 1);
        int int38 = monthDay31.indexOf(dateTimeFieldType37);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.MonthDay monthDay40 = monthDay31.withChronologyRetainFields(chronology39);
        org.joda.time.MonthDay monthDay42 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.MonthDay monthDay44 = monthDay42.withChronologyRetainFields(chronology43);
        org.joda.time.DateTimeFieldType dateTimeFieldType46 = monthDay42.getFieldType((int) (byte) 1);
        int int47 = monthDay31.get(dateTimeFieldType46);
        int int48 = monthDay26.indexOf(dateTimeFieldType46);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(monthDay9);
        org.junit.Assert.assertNotNull(monthDay11);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(monthDay28);
        org.junit.Assert.assertNotNull(monthDay31);
        org.junit.Assert.assertNotNull(monthDay33);
        org.junit.Assert.assertNotNull(monthDay35);
        org.junit.Assert.assertNotNull(dateTimeFieldType37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(monthDay40);
        org.junit.Assert.assertNotNull(monthDay42);
        org.junit.Assert.assertNotNull(monthDay44);
        org.junit.Assert.assertNotNull(dateTimeFieldType46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
    }

    @Test
    public void test0748() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0748");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        java.util.Locale locale11 = null;
        int int12 = property10.getMaximumTextLength(locale11);
        java.util.Locale locale13 = null;
        int int14 = property10.getMaximumShortTextLength(locale13);
        org.joda.time.DateTimeField dateTimeField15 = property10.getField();
        int int16 = property10.getMaximumValue();
        org.joda.time.MonthDay monthDay18 = property10.addToCopy((int) ' ');
        java.lang.String str19 = property10.toString();
        org.joda.time.MonthDay monthDay21 = property10.addWrapFieldToCopy((int) (byte) 0);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 31 + "'", int16 == 31);
        org.junit.Assert.assertNotNull(monthDay18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Property[dayOfMonth]" + "'", str19, "Property[dayOfMonth]");
        org.junit.Assert.assertNotNull(monthDay21);
    }

    @Test
    public void test0749() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0749");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        java.util.Locale locale11 = null;
        int int12 = property10.getMaximumTextLength(locale11);
        int int13 = property10.getMinimumValue();
        java.lang.String str14 = property10.getAsText();
        org.joda.time.MonthDay monthDay16 = property10.addWrapFieldToCopy(9);
        org.joda.time.MonthDay monthDay18 = monthDay16.plusMonths(9);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "1" + "'", str14, "1");
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(monthDay18);
    }

    @Test
    public void test0750() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0750");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property6 = monthDay1.dayOfMonth();
        org.joda.time.MonthDay monthDay8 = property6.addWrapFieldToCopy(1);
        int int9 = property6.getMaximumValue();
        int int10 = property6.getMaximumValueOverall();
        java.util.Locale locale11 = null;
        int int12 = property6.getMaximumTextLength(locale11);
        java.lang.String str13 = property6.getName();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(monthDay8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 31 + "'", int9 == 31);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 31 + "'", int10 == 31);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "dayOfMonth" + "'", str13, "dayOfMonth");
    }

    @Test
    public void test0751() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0751");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        java.util.Locale locale11 = null;
        int int12 = property10.getMaximumTextLength(locale11);
        int int13 = property10.getMinimumValue();
        org.joda.time.MonthDay monthDay15 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MonthDay monthDay17 = monthDay15.withChronologyRetainFields(chronology16);
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = monthDay15.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay monthDay21 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.MonthDay monthDay23 = monthDay21.withChronologyRetainFields(chronology22);
        org.joda.time.MonthDay monthDay25 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MonthDay monthDay27 = monthDay25.withChronologyRetainFields(chronology26);
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = monthDay25.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property30 = monthDay23.property(dateTimeFieldType29);
        int int31 = monthDay15.indexOf(dateTimeFieldType29);
        org.joda.time.MonthDay monthDay33 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MonthDay monthDay35 = monthDay33.withChronologyRetainFields(chronology34);
        org.joda.time.MonthDay monthDay37 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.MonthDay monthDay39 = monthDay37.withChronologyRetainFields(chronology38);
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = monthDay37.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property42 = monthDay35.property(dateTimeFieldType41);
        int int43 = property42.get();
        org.joda.time.MonthDay monthDay45 = property42.addToCopy((int) (short) 0);
        org.joda.time.MonthDay monthDay47 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.MonthDay monthDay49 = monthDay47.withChronologyRetainFields(chronology48);
        org.joda.time.MonthDay monthDay51 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.MonthDay monthDay53 = monthDay51.withChronologyRetainFields(chronology52);
        org.joda.time.DateTimeFieldType dateTimeFieldType55 = monthDay51.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property56 = monthDay49.property(dateTimeFieldType55);
        int int57 = property56.get();
        org.joda.time.DurationField durationField58 = property56.getDurationField();
        java.util.Locale locale59 = null;
        int int60 = property56.getMaximumTextLength(locale59);
        org.joda.time.MonthDay monthDay62 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.MonthDay monthDay64 = monthDay62.withChronologyRetainFields(chronology63);
        org.joda.time.DateTimeFieldType dateTimeFieldType66 = monthDay62.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property67 = monthDay62.dayOfMonth();
        org.joda.time.Chronology chronology68 = monthDay62.getChronology();
        org.joda.time.Chronology chronology69 = monthDay62.getChronology();
        org.joda.time.ReadableInstant readableInstant70 = null;
        org.joda.time.DateTime dateTime71 = monthDay62.toDateTime(readableInstant70);
        int int72 = property56.compareTo((org.joda.time.ReadableInstant) dateTime71);
        int int73 = property42.compareTo((org.joda.time.ReadableInstant) dateTime71);
        org.joda.time.DateTime dateTime74 = monthDay15.toDateTime((org.joda.time.ReadableInstant) dateTime71);
        int int75 = property10.compareTo((org.joda.time.ReadableInstant) dateTime71);
        java.lang.String str76 = property10.getAsText();
        java.util.Locale locale77 = null;
        int int78 = property10.getMaximumTextLength(locale77);
        int int79 = property10.getMaximumValueOverall();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(monthDay17);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertNotNull(monthDay23);
        org.junit.Assert.assertNotNull(monthDay25);
        org.junit.Assert.assertNotNull(monthDay27);
        org.junit.Assert.assertNotNull(dateTimeFieldType29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertNotNull(monthDay33);
        org.junit.Assert.assertNotNull(monthDay35);
        org.junit.Assert.assertNotNull(monthDay37);
        org.junit.Assert.assertNotNull(monthDay39);
        org.junit.Assert.assertNotNull(dateTimeFieldType41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertNotNull(monthDay45);
        org.junit.Assert.assertNotNull(monthDay47);
        org.junit.Assert.assertNotNull(monthDay49);
        org.junit.Assert.assertNotNull(monthDay51);
        org.junit.Assert.assertNotNull(monthDay53);
        org.junit.Assert.assertNotNull(dateTimeFieldType55);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertNotNull(durationField58);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 2 + "'", int60 == 2);
        org.junit.Assert.assertNotNull(monthDay62);
        org.junit.Assert.assertNotNull(monthDay64);
        org.junit.Assert.assertNotNull(dateTimeFieldType66);
        org.junit.Assert.assertNotNull(property67);
        org.junit.Assert.assertNotNull(chronology68);
        org.junit.Assert.assertNotNull(chronology69);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "1" + "'", str76, "1");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 2 + "'", int78 == 2);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 31 + "'", int79 == 31);
    }

    @Test
    public void test0752() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0752");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.MonthDay monthDay4 = monthDay1.withPeriodAdded(readablePeriod2, 1);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.MonthDay monthDay6 = monthDay1.plus(readablePeriod5);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.MonthDay monthDay8 = monthDay1.plus(readablePeriod7);
        org.joda.time.MonthDay monthDay10 = monthDay1.withDayOfMonth((int) (short) 10);
        java.util.Locale locale12 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str13 = monthDay10.toString("Property[dayOfMonth]", locale12);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: P");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay4);
        org.junit.Assert.assertNotNull(monthDay6);
        org.junit.Assert.assertNotNull(monthDay8);
        org.junit.Assert.assertNotNull(monthDay10);
    }

    @Test
    public void test0753() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0753");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        int int11 = property10.get();
        org.joda.time.DurationField durationField12 = property10.getDurationField();
        org.joda.time.MonthDay monthDay14 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MonthDay monthDay16 = monthDay14.withChronologyRetainFields(chronology15);
        org.joda.time.MonthDay monthDay18 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MonthDay monthDay20 = monthDay18.withChronologyRetainFields(chronology19);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = monthDay18.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property23 = monthDay16.property(dateTimeFieldType22);
        boolean boolean24 = property10.equals((java.lang.Object) monthDay16);
        java.lang.String str25 = property10.getAsShortText();
        java.lang.String str26 = property10.toString();
        java.util.Locale locale27 = null;
        int int28 = property10.getMaximumShortTextLength(locale27);
        boolean boolean30 = property10.equals((java.lang.Object) 0.0d);
        org.joda.time.MonthDay monthDay32 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.MonthDay monthDay34 = monthDay32.withChronologyRetainFields(chronology33);
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = monthDay32.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod37 = null;
        org.joda.time.MonthDay monthDay38 = monthDay32.plus(readablePeriod37);
        org.joda.time.MonthDay monthDay40 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.MonthDay monthDay42 = monthDay40.withChronologyRetainFields(chronology41);
        org.joda.time.MonthDay monthDay44 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.MonthDay monthDay46 = monthDay44.withChronologyRetainFields(chronology45);
        org.joda.time.DateTimeFieldType dateTimeFieldType48 = monthDay44.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property49 = monthDay42.property(dateTimeFieldType48);
        int int50 = property49.get();
        org.joda.time.MonthDay monthDay52 = property49.addWrapFieldToCopy((int) (short) 1);
        boolean boolean53 = monthDay32.isBefore((org.joda.time.ReadablePartial) monthDay52);
        int int54 = property10.compareTo((org.joda.time.ReadablePartial) monthDay52);
        java.lang.String str55 = property10.getAsText();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(monthDay18);
        org.junit.Assert.assertNotNull(monthDay20);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "1" + "'", str25, "1");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Property[dayOfMonth]" + "'", str26, "Property[dayOfMonth]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(monthDay32);
        org.junit.Assert.assertNotNull(monthDay34);
        org.junit.Assert.assertNotNull(dateTimeFieldType36);
        org.junit.Assert.assertNotNull(monthDay38);
        org.junit.Assert.assertNotNull(monthDay40);
        org.junit.Assert.assertNotNull(monthDay42);
        org.junit.Assert.assertNotNull(monthDay44);
        org.junit.Assert.assertNotNull(monthDay46);
        org.junit.Assert.assertNotNull(dateTimeFieldType48);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertNotNull(monthDay52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "1" + "'", str55, "1");
    }

    @Test
    public void test0754() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0754");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        int int11 = property10.get();
        java.lang.String str12 = property10.toString();
        org.joda.time.MonthDay monthDay14 = property10.addToCopy(31);
        int int15 = monthDay14.getDayOfMonth();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Property[dayOfMonth]" + "'", str12, "Property[dayOfMonth]");
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
    }

    @Test
    public void test0755() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0755");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.MonthDay monthDay1 = new org.joda.time.MonthDay(dateTimeZone0);
        org.joda.time.MonthDay monthDay3 = monthDay1.minusDays(100);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.MonthDay monthDay8 = monthDay5.withPeriodAdded(readablePeriod6, 1);
        org.joda.time.MonthDay monthDay10 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MonthDay monthDay12 = monthDay10.withChronologyRetainFields(chronology11);
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = monthDay10.getFieldType((int) (byte) 1);
        int int15 = monthDay8.indexOf(dateTimeFieldType14);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MonthDay monthDay17 = monthDay8.withChronologyRetainFields(chronology16);
        org.joda.time.MonthDay monthDay19 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MonthDay monthDay21 = monthDay19.withChronologyRetainFields(chronology20);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = monthDay19.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property24 = monthDay19.dayOfMonth();
        org.joda.time.Chronology chronology25 = monthDay19.getChronology();
        org.joda.time.Chronology chronology26 = monthDay19.getChronology();
        boolean boolean27 = monthDay8.isEqual((org.joda.time.ReadablePartial) monthDay19);
        boolean boolean28 = monthDay1.isEqual((org.joda.time.ReadablePartial) monthDay8);
        int[] intArray29 = monthDay8.getValues();
        java.lang.Class<?> wildcardClass30 = intArray29.getClass();
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay8);
        org.junit.Assert.assertNotNull(monthDay10);
        org.junit.Assert.assertNotNull(monthDay12);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(monthDay17);
        org.junit.Assert.assertNotNull(monthDay19);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[1, 1]");
        org.junit.Assert.assertNotNull(wildcardClass30);
    }

    @Test
    public void test0756() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0756");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        org.joda.time.MonthDay.Property property11 = monthDay3.monthOfYear();
        org.joda.time.MonthDay monthDay13 = property11.addWrapFieldToCopy((int) (short) -1);
        java.util.Locale locale14 = null;
        int int15 = property11.getMaximumTextLength(locale14);
        int int16 = property11.get();
        org.joda.time.MonthDay monthDay18 = property11.addWrapFieldToCopy((int) '#');
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 9 + "'", int15 == 9);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(monthDay18);
    }

    @Test
    public void test0757() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0757");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.MonthDay monthDay3 = monthDay1.minusDays((int) '#');
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay5.dayOfMonth();
        org.joda.time.Chronology chronology11 = monthDay5.getChronology();
        org.joda.time.Chronology chronology12 = monthDay5.getChronology();
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.DateTime dateTime14 = monthDay5.toDateTime(readableInstant13);
        org.joda.time.MonthDay monthDay16 = monthDay5.plusMonths((int) ' ');
        boolean boolean17 = monthDay1.isAfter((org.joda.time.ReadablePartial) monthDay16);
        org.joda.time.MonthDay monthDay19 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MonthDay monthDay21 = monthDay19.withChronologyRetainFields(chronology20);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = monthDay19.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property24 = monthDay19.dayOfMonth();
        org.joda.time.MonthDay monthDay26 = property24.addWrapFieldToCopy(1);
        org.joda.time.MonthDay monthDay28 = property24.addWrapFieldToCopy(0);
        org.joda.time.MonthDay monthDay30 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MonthDay monthDay32 = monthDay30.withChronologyRetainFields(chronology31);
        org.joda.time.MonthDay monthDay34 = monthDay30.minusMonths((int) (byte) -1);
        boolean boolean35 = property24.equals((java.lang.Object) monthDay34);
        int int36 = property24.getMaximumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = property24.getFieldType();
        org.joda.time.MonthDay.Property property38 = monthDay16.property(dateTimeFieldType37);
        java.lang.String str39 = property38.getAsText();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay41 = property38.setCopy((int) (short) 100);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 100 for dayOfMonth must be in the range [1,30]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(monthDay19);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(monthDay26);
        org.junit.Assert.assertNotNull(monthDay28);
        org.junit.Assert.assertNotNull(monthDay30);
        org.junit.Assert.assertNotNull(monthDay32);
        org.junit.Assert.assertNotNull(monthDay34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 31 + "'", int36 == 31);
        org.junit.Assert.assertNotNull(dateTimeFieldType37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "1" + "'", str39, "1");
    }

    @Test
    public void test0758() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0758");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        int int11 = property10.get();
        int int12 = property10.getMaximumValue();
        org.joda.time.MonthDay monthDay14 = property10.setCopy((int) (short) 1);
        org.joda.time.MonthDay monthDay16 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MonthDay monthDay18 = monthDay16.withChronologyRetainFields(chronology17);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = monthDay16.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.MonthDay monthDay22 = monthDay16.plus(readablePeriod21);
        int int23 = monthDay16.getDayOfMonth();
        int int24 = property10.compareTo((org.joda.time.ReadablePartial) monthDay16);
        java.lang.String str25 = property10.getName();
        java.util.Locale locale26 = null;
        java.lang.String str27 = property10.getAsShortText(locale26);
        org.joda.time.DurationField durationField28 = property10.getRangeDurationField();
        java.lang.String str29 = property10.toString();
        org.joda.time.MonthDay monthDay31 = property10.addWrapFieldToCopy((int) (short) -1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter32 = null;
        java.lang.String str33 = monthDay31.toString(dateTimeFormatter32);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 31 + "'", int12 == 31);
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(monthDay18);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertNotNull(monthDay22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "dayOfMonth" + "'", str25, "dayOfMonth");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "1" + "'", str27, "1");
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Property[dayOfMonth]" + "'", str29, "Property[dayOfMonth]");
        org.junit.Assert.assertNotNull(monthDay31);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "--01-31" + "'", str33, "--01-31");
    }

    @Test
    public void test0759() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0759");
        org.joda.time.MonthDay monthDay2 = new org.joda.time.MonthDay(10, (int) (short) 1);
        org.joda.time.MonthDay monthDay4 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.MonthDay monthDay6 = monthDay4.withChronologyRetainFields(chronology5);
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = monthDay4.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.MonthDay monthDay10 = monthDay4.plus(readablePeriod9);
        org.joda.time.MonthDay monthDay12 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MonthDay monthDay14 = monthDay12.withChronologyRetainFields(chronology13);
        org.joda.time.MonthDay monthDay16 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MonthDay monthDay18 = monthDay16.withChronologyRetainFields(chronology17);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = monthDay16.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property21 = monthDay14.property(dateTimeFieldType20);
        int int22 = property21.get();
        org.joda.time.MonthDay monthDay24 = property21.addWrapFieldToCopy((int) (short) 1);
        boolean boolean25 = monthDay4.isBefore((org.joda.time.ReadablePartial) monthDay24);
        org.joda.time.DateTimeField[] dateTimeFieldArray26 = monthDay4.getFields();
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.MonthDay monthDay28 = monthDay4.minus(readablePeriod27);
        org.joda.time.MonthDay monthDay30 = monthDay28.minusDays(31);
        org.joda.time.MonthDay monthDay32 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.MonthDay monthDay34 = monthDay32.withChronologyRetainFields(chronology33);
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = monthDay32.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod37 = null;
        org.joda.time.MonthDay monthDay38 = monthDay32.plus(readablePeriod37);
        org.joda.time.MonthDay monthDay40 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.MonthDay monthDay42 = monthDay40.withChronologyRetainFields(chronology41);
        org.joda.time.MonthDay monthDay44 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.MonthDay monthDay46 = monthDay44.withChronologyRetainFields(chronology45);
        org.joda.time.DateTimeFieldType dateTimeFieldType48 = monthDay44.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property49 = monthDay42.property(dateTimeFieldType48);
        int int50 = property49.get();
        org.joda.time.MonthDay monthDay52 = property49.addWrapFieldToCopy((int) (short) 1);
        boolean boolean53 = monthDay32.isBefore((org.joda.time.ReadablePartial) monthDay52);
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.MonthDay monthDay55 = monthDay32.withChronologyRetainFields(chronology54);
        org.joda.time.Chronology chronology56 = monthDay55.getChronology();
        int[] intArray57 = monthDay55.getValues();
        org.joda.time.MonthDay monthDay59 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.MonthDay monthDay61 = monthDay59.withChronologyRetainFields(chronology60);
        org.joda.time.DateTimeFieldType dateTimeFieldType63 = monthDay59.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay monthDay65 = monthDay55.withField(dateTimeFieldType63, 10);
        org.joda.time.MonthDay monthDay67 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.MonthDay monthDay69 = monthDay67.withChronologyRetainFields(chronology68);
        org.joda.time.MonthDay monthDay71 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology72 = null;
        org.joda.time.MonthDay monthDay73 = monthDay71.withChronologyRetainFields(chronology72);
        org.joda.time.DateTimeFieldType dateTimeFieldType75 = monthDay71.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property76 = monthDay71.dayOfMonth();
        org.joda.time.Chronology chronology77 = monthDay71.getChronology();
        org.joda.time.MonthDay monthDay78 = org.joda.time.MonthDay.now(chronology77);
        org.joda.time.MonthDay monthDay79 = monthDay69.withChronologyRetainFields(chronology77);
        org.joda.time.Chronology chronology80 = monthDay69.getChronology();
        org.joda.time.MonthDay monthDay81 = new org.joda.time.MonthDay((java.lang.Object) monthDay65, chronology80);
        org.joda.time.MonthDay monthDay82 = org.joda.time.MonthDay.now(chronology80);
        org.joda.time.MonthDay monthDay83 = org.joda.time.MonthDay.now(chronology80);
        org.joda.time.MonthDay monthDay84 = monthDay28.withChronologyRetainFields(chronology80);
        boolean boolean85 = monthDay2.isBefore((org.joda.time.ReadablePartial) monthDay84);
        org.junit.Assert.assertNotNull(monthDay4);
        org.junit.Assert.assertNotNull(monthDay6);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertNotNull(monthDay10);
        org.junit.Assert.assertNotNull(monthDay12);
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(monthDay18);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldArray26);
        org.junit.Assert.assertNotNull(monthDay28);
        org.junit.Assert.assertNotNull(monthDay30);
        org.junit.Assert.assertNotNull(monthDay32);
        org.junit.Assert.assertNotNull(monthDay34);
        org.junit.Assert.assertNotNull(dateTimeFieldType36);
        org.junit.Assert.assertNotNull(monthDay38);
        org.junit.Assert.assertNotNull(monthDay40);
        org.junit.Assert.assertNotNull(monthDay42);
        org.junit.Assert.assertNotNull(monthDay44);
        org.junit.Assert.assertNotNull(monthDay46);
        org.junit.Assert.assertNotNull(dateTimeFieldType48);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertNotNull(monthDay52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(monthDay55);
        org.junit.Assert.assertNotNull(chronology56);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[1, 1]");
        org.junit.Assert.assertNotNull(monthDay59);
        org.junit.Assert.assertNotNull(monthDay61);
        org.junit.Assert.assertNotNull(dateTimeFieldType63);
        org.junit.Assert.assertNotNull(monthDay65);
        org.junit.Assert.assertNotNull(monthDay67);
        org.junit.Assert.assertNotNull(monthDay69);
        org.junit.Assert.assertNotNull(monthDay71);
        org.junit.Assert.assertNotNull(monthDay73);
        org.junit.Assert.assertNotNull(dateTimeFieldType75);
        org.junit.Assert.assertNotNull(property76);
        org.junit.Assert.assertNotNull(chronology77);
        org.junit.Assert.assertNotNull(monthDay78);
        org.junit.Assert.assertNotNull(monthDay79);
        org.junit.Assert.assertNotNull(chronology80);
        org.junit.Assert.assertNotNull(monthDay82);
        org.junit.Assert.assertNotNull(monthDay83);
        org.junit.Assert.assertNotNull(monthDay84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
    }

    @Test
    public void test0760() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0760");
        org.joda.time.MonthDay monthDay3 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MonthDay monthDay5 = monthDay3.withChronologyRetainFields(chronology4);
        org.joda.time.MonthDay monthDay7 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MonthDay monthDay9 = monthDay7.withChronologyRetainFields(chronology8);
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = monthDay7.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property12 = monthDay7.dayOfMonth();
        org.joda.time.Chronology chronology13 = monthDay7.getChronology();
        org.joda.time.MonthDay monthDay14 = org.joda.time.MonthDay.now(chronology13);
        org.joda.time.MonthDay monthDay15 = monthDay5.withChronologyRetainFields(chronology13);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.MonthDay monthDay17 = monthDay5.minus(readablePeriod16);
        org.joda.time.MonthDay monthDay19 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MonthDay monthDay21 = monthDay19.withChronologyRetainFields(chronology20);
        org.joda.time.MonthDay monthDay23 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MonthDay monthDay25 = monthDay23.withChronologyRetainFields(chronology24);
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = monthDay23.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property28 = monthDay21.property(dateTimeFieldType27);
        int int29 = property28.get();
        int int30 = property28.getMaximumValue();
        org.joda.time.MonthDay monthDay32 = property28.setCopy((int) (short) 1);
        org.joda.time.MonthDay monthDay34 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.MonthDay monthDay36 = monthDay34.withChronologyRetainFields(chronology35);
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = monthDay34.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod39 = null;
        org.joda.time.MonthDay monthDay40 = monthDay34.plus(readablePeriod39);
        int int41 = monthDay34.getDayOfMonth();
        int int42 = property28.compareTo((org.joda.time.ReadablePartial) monthDay34);
        boolean boolean43 = monthDay17.isBefore((org.joda.time.ReadablePartial) monthDay34);
        org.joda.time.Chronology chronology44 = monthDay34.getChronology();
        org.joda.time.MonthDay monthDay45 = new org.joda.time.MonthDay((long) 2, chronology44);
        org.joda.time.MonthDay monthDay46 = new org.joda.time.MonthDay((long) 10, chronology44);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay47 = new org.joda.time.MonthDay((java.lang.Object) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: java.lang.Integer");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(monthDay9);
        org.junit.Assert.assertNotNull(dateTimeFieldType11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(monthDay17);
        org.junit.Assert.assertNotNull(monthDay19);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertNotNull(monthDay23);
        org.junit.Assert.assertNotNull(monthDay25);
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 31 + "'", int30 == 31);
        org.junit.Assert.assertNotNull(monthDay32);
        org.junit.Assert.assertNotNull(monthDay34);
        org.junit.Assert.assertNotNull(monthDay36);
        org.junit.Assert.assertNotNull(dateTimeFieldType38);
        org.junit.Assert.assertNotNull(monthDay40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(chronology44);
    }

    @Test
    public void test0761() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0761");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.MonthDay monthDay1 = new org.joda.time.MonthDay(dateTimeZone0);
        org.joda.time.MonthDay monthDay3 = monthDay1.minusDays(100);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.MonthDay monthDay8 = monthDay5.withPeriodAdded(readablePeriod6, 1);
        org.joda.time.MonthDay monthDay10 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MonthDay monthDay12 = monthDay10.withChronologyRetainFields(chronology11);
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = monthDay10.getFieldType((int) (byte) 1);
        int int15 = monthDay8.indexOf(dateTimeFieldType14);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MonthDay monthDay17 = monthDay8.withChronologyRetainFields(chronology16);
        org.joda.time.MonthDay monthDay19 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MonthDay monthDay21 = monthDay19.withChronologyRetainFields(chronology20);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = monthDay19.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property24 = monthDay19.dayOfMonth();
        org.joda.time.Chronology chronology25 = monthDay19.getChronology();
        org.joda.time.Chronology chronology26 = monthDay19.getChronology();
        boolean boolean27 = monthDay8.isEqual((org.joda.time.ReadablePartial) monthDay19);
        boolean boolean28 = monthDay1.isEqual((org.joda.time.ReadablePartial) monthDay8);
        org.joda.time.DurationFieldType durationFieldType29 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay31 = monthDay8.withFieldAdded(durationFieldType29, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay8);
        org.junit.Assert.assertNotNull(monthDay10);
        org.junit.Assert.assertNotNull(monthDay12);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(monthDay17);
        org.junit.Assert.assertNotNull(monthDay19);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test0762() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0762");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        int int11 = property10.get();
        int int12 = property10.getMaximumValue();
        org.joda.time.MonthDay monthDay14 = property10.setCopy((int) (short) 1);
        java.util.Locale locale16 = null;
        org.joda.time.MonthDay monthDay17 = property10.setCopy("25", locale16);
        int int18 = property10.getMinimumValue();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 31 + "'", int12 == 31);
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertNotNull(monthDay17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
    }

    @Test
    public void test0763() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0763");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay1.plus(readablePeriod6);
        org.joda.time.MonthDay monthDay9 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MonthDay monthDay11 = monthDay9.withChronologyRetainFields(chronology10);
        org.joda.time.MonthDay monthDay13 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MonthDay monthDay15 = monthDay13.withChronologyRetainFields(chronology14);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = monthDay13.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property18 = monthDay11.property(dateTimeFieldType17);
        int int19 = property18.get();
        org.joda.time.MonthDay monthDay21 = property18.addWrapFieldToCopy((int) (short) 1);
        boolean boolean22 = monthDay1.isBefore((org.joda.time.ReadablePartial) monthDay21);
        org.joda.time.MonthDay monthDay24 = monthDay21.minusMonths((int) (byte) 100);
        int int25 = monthDay24.getMonthOfYear();
        org.joda.time.MonthDay monthDay27 = monthDay24.withMonthOfYear(1);
        int int28 = monthDay27.getMonthOfYear();
        org.joda.time.MonthDay monthDay30 = monthDay27.withMonthOfYear((int) (short) 1);
        org.joda.time.DateTimeField[] dateTimeFieldArray31 = monthDay27.getFields();
        org.joda.time.MonthDay monthDay33 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MonthDay monthDay35 = monthDay33.withChronologyRetainFields(chronology34);
        org.joda.time.MonthDay monthDay37 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.MonthDay monthDay39 = monthDay37.withChronologyRetainFields(chronology38);
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = monthDay37.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property42 = monthDay35.property(dateTimeFieldType41);
        int int43 = property42.get();
        int int44 = property42.getMaximumValue();
        org.joda.time.MonthDay monthDay46 = property42.setCopy((int) (short) 1);
        org.joda.time.MonthDay monthDay48 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.MonthDay monthDay50 = monthDay48.withChronologyRetainFields(chronology49);
        org.joda.time.DateTimeFieldType dateTimeFieldType52 = monthDay48.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod53 = null;
        org.joda.time.MonthDay monthDay54 = monthDay48.plus(readablePeriod53);
        int int55 = monthDay48.getDayOfMonth();
        int int56 = property42.compareTo((org.joda.time.ReadablePartial) monthDay48);
        org.joda.time.DurationField durationField57 = property42.getDurationField();
        boolean boolean58 = monthDay27.equals((java.lang.Object) durationField57);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(monthDay9);
        org.junit.Assert.assertNotNull(monthDay11);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 9 + "'", int25 == 9);
        org.junit.Assert.assertNotNull(monthDay27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(monthDay30);
        org.junit.Assert.assertNotNull(dateTimeFieldArray31);
        org.junit.Assert.assertNotNull(monthDay33);
        org.junit.Assert.assertNotNull(monthDay35);
        org.junit.Assert.assertNotNull(monthDay37);
        org.junit.Assert.assertNotNull(monthDay39);
        org.junit.Assert.assertNotNull(dateTimeFieldType41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 31 + "'", int44 == 31);
        org.junit.Assert.assertNotNull(monthDay46);
        org.junit.Assert.assertNotNull(monthDay48);
        org.junit.Assert.assertNotNull(monthDay50);
        org.junit.Assert.assertNotNull(dateTimeFieldType52);
        org.junit.Assert.assertNotNull(monthDay54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(durationField57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
    }

    @Test
    public void test0764() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0764");
        org.joda.time.MonthDay monthDay3 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MonthDay monthDay5 = monthDay3.withChronologyRetainFields(chronology4);
        org.joda.time.MonthDay monthDay7 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MonthDay monthDay9 = monthDay7.withChronologyRetainFields(chronology8);
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = monthDay7.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property12 = monthDay5.property(dateTimeFieldType11);
        org.joda.time.MonthDay.Property property13 = monthDay5.monthOfYear();
        int int14 = monthDay5.getDayOfMonth();
        org.joda.time.MonthDay.Property property15 = monthDay5.dayOfMonth();
        int int16 = monthDay5.getDayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.MonthDay monthDay18 = monthDay5.plus(readablePeriod17);
        org.joda.time.MonthDay monthDay20 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.MonthDay monthDay22 = monthDay20.withChronologyRetainFields(chronology21);
        org.joda.time.MonthDay monthDay24 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MonthDay monthDay26 = monthDay24.withChronologyRetainFields(chronology25);
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = monthDay24.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property29 = monthDay22.property(dateTimeFieldType28);
        org.joda.time.MonthDay.Property property30 = monthDay22.monthOfYear();
        int int31 = monthDay22.getDayOfMonth();
        org.joda.time.MonthDay.Property property32 = monthDay22.dayOfMonth();
        int int33 = monthDay22.getDayOfMonth();
        org.joda.time.MonthDay monthDay35 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.MonthDay monthDay37 = monthDay35.withChronologyRetainFields(chronology36);
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = monthDay35.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property40 = monthDay35.dayOfMonth();
        org.joda.time.Chronology chronology41 = monthDay35.getChronology();
        org.joda.time.MonthDay monthDay42 = monthDay22.withChronologyRetainFields(chronology41);
        org.joda.time.MonthDay monthDay43 = monthDay18.withChronologyRetainFields(chronology41);
        org.joda.time.MonthDay monthDay45 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.MonthDay monthDay47 = monthDay45.withChronologyRetainFields(chronology46);
        org.joda.time.MonthDay monthDay49 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.MonthDay monthDay51 = monthDay49.withChronologyRetainFields(chronology50);
        org.joda.time.DateTimeFieldType dateTimeFieldType53 = monthDay49.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property54 = monthDay47.property(dateTimeFieldType53);
        org.joda.time.MonthDay.Property property55 = monthDay47.monthOfYear();
        int int56 = monthDay47.getDayOfMonth();
        org.joda.time.MonthDay.Property property57 = monthDay47.dayOfMonth();
        int int58 = monthDay47.getDayOfMonth();
        org.joda.time.MonthDay monthDay60 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.MonthDay monthDay62 = monthDay60.withChronologyRetainFields(chronology61);
        org.joda.time.DateTimeFieldType dateTimeFieldType64 = monthDay60.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property65 = monthDay60.dayOfMonth();
        org.joda.time.Chronology chronology66 = monthDay60.getChronology();
        org.joda.time.MonthDay monthDay67 = monthDay47.withChronologyRetainFields(chronology66);
        org.joda.time.MonthDay monthDay68 = new org.joda.time.MonthDay((java.lang.Object) monthDay18, chronology66);
        org.joda.time.MonthDay monthDay70 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology71 = null;
        org.joda.time.MonthDay monthDay72 = monthDay70.withChronologyRetainFields(chronology71);
        org.joda.time.MonthDay monthDay74 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology75 = null;
        org.joda.time.MonthDay monthDay76 = monthDay74.withChronologyRetainFields(chronology75);
        org.joda.time.DateTimeFieldType dateTimeFieldType78 = monthDay74.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property79 = monthDay74.dayOfMonth();
        org.joda.time.Chronology chronology80 = monthDay74.getChronology();
        org.joda.time.MonthDay monthDay81 = org.joda.time.MonthDay.now(chronology80);
        org.joda.time.MonthDay monthDay82 = monthDay72.withChronologyRetainFields(chronology80);
        org.joda.time.MonthDay monthDay83 = monthDay18.withChronologyRetainFields(chronology80);
        org.joda.time.MonthDay monthDay84 = org.joda.time.MonthDay.now(chronology80);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay85 = new org.joda.time.MonthDay((int) ' ', 12, chronology80);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 32 for monthOfYear must not be larger than 12");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(monthDay9);
        org.junit.Assert.assertNotNull(dateTimeFieldType11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(monthDay18);
        org.junit.Assert.assertNotNull(monthDay20);
        org.junit.Assert.assertNotNull(monthDay22);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertNotNull(monthDay26);
        org.junit.Assert.assertNotNull(dateTimeFieldType28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(monthDay35);
        org.junit.Assert.assertNotNull(monthDay37);
        org.junit.Assert.assertNotNull(dateTimeFieldType39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(monthDay42);
        org.junit.Assert.assertNotNull(monthDay43);
        org.junit.Assert.assertNotNull(monthDay45);
        org.junit.Assert.assertNotNull(monthDay47);
        org.junit.Assert.assertNotNull(monthDay49);
        org.junit.Assert.assertNotNull(monthDay51);
        org.junit.Assert.assertNotNull(dateTimeFieldType53);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertNotNull(monthDay60);
        org.junit.Assert.assertNotNull(monthDay62);
        org.junit.Assert.assertNotNull(dateTimeFieldType64);
        org.junit.Assert.assertNotNull(property65);
        org.junit.Assert.assertNotNull(chronology66);
        org.junit.Assert.assertNotNull(monthDay67);
        org.junit.Assert.assertNotNull(monthDay70);
        org.junit.Assert.assertNotNull(monthDay72);
        org.junit.Assert.assertNotNull(monthDay74);
        org.junit.Assert.assertNotNull(monthDay76);
        org.junit.Assert.assertNotNull(dateTimeFieldType78);
        org.junit.Assert.assertNotNull(property79);
        org.junit.Assert.assertNotNull(chronology80);
        org.junit.Assert.assertNotNull(monthDay81);
        org.junit.Assert.assertNotNull(monthDay82);
        org.junit.Assert.assertNotNull(monthDay83);
        org.junit.Assert.assertNotNull(monthDay84);
    }

    @Test
    public void test0765() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0765");
        org.joda.time.MonthDay monthDay2 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MonthDay monthDay4 = monthDay2.withChronologyRetainFields(chronology3);
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = monthDay2.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property7 = monthDay2.dayOfMonth();
        org.joda.time.Chronology chronology8 = monthDay2.getChronology();
        org.joda.time.MonthDay monthDay9 = new org.joda.time.MonthDay((-1L), chronology8);
        org.joda.time.MonthDay monthDay10 = new org.joda.time.MonthDay(chronology8);
        org.joda.time.MonthDay monthDay11 = new org.joda.time.MonthDay(chronology8);
        org.joda.time.MonthDay monthDay12 = org.joda.time.MonthDay.now(chronology8);
        org.junit.Assert.assertNotNull(monthDay2);
        org.junit.Assert.assertNotNull(monthDay4);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(monthDay12);
    }

    @Test
    public void test0766() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0766");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay1.plus(readablePeriod6);
        org.joda.time.MonthDay monthDay9 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MonthDay monthDay11 = monthDay9.withChronologyRetainFields(chronology10);
        org.joda.time.MonthDay monthDay13 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MonthDay monthDay15 = monthDay13.withChronologyRetainFields(chronology14);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = monthDay13.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property18 = monthDay11.property(dateTimeFieldType17);
        int int19 = property18.get();
        org.joda.time.MonthDay monthDay21 = property18.addWrapFieldToCopy((int) (short) 1);
        boolean boolean22 = monthDay1.isBefore((org.joda.time.ReadablePartial) monthDay21);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MonthDay monthDay24 = monthDay1.withChronologyRetainFields(chronology23);
        org.joda.time.MonthDay monthDay26 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.MonthDay monthDay28 = monthDay26.withChronologyRetainFields(chronology27);
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = monthDay26.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        org.joda.time.MonthDay monthDay32 = monthDay26.plus(readablePeriod31);
        org.joda.time.MonthDay monthDay34 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.MonthDay monthDay36 = monthDay34.withChronologyRetainFields(chronology35);
        org.joda.time.MonthDay monthDay38 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.MonthDay monthDay40 = monthDay38.withChronologyRetainFields(chronology39);
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = monthDay38.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property43 = monthDay36.property(dateTimeFieldType42);
        int int44 = property43.get();
        org.joda.time.MonthDay monthDay46 = property43.addWrapFieldToCopy((int) (short) 1);
        boolean boolean47 = monthDay26.isBefore((org.joda.time.ReadablePartial) monthDay46);
        org.joda.time.DateTimeFieldType dateTimeFieldType49 = monthDay26.getFieldType(0);
        boolean boolean50 = monthDay1.isAfter((org.joda.time.ReadablePartial) monthDay26);
        org.joda.time.MonthDay monthDay52 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.MonthDay monthDay54 = monthDay52.withChronologyRetainFields(chronology53);
        org.joda.time.MonthDay monthDay56 = monthDay52.minusMonths((int) (byte) -1);
        int int57 = monthDay52.getDayOfMonth();
        boolean boolean58 = monthDay1.isBefore((org.joda.time.ReadablePartial) monthDay52);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(monthDay9);
        org.junit.Assert.assertNotNull(monthDay11);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertNotNull(monthDay26);
        org.junit.Assert.assertNotNull(monthDay28);
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertNotNull(monthDay32);
        org.junit.Assert.assertNotNull(monthDay34);
        org.junit.Assert.assertNotNull(monthDay36);
        org.junit.Assert.assertNotNull(monthDay38);
        org.junit.Assert.assertNotNull(monthDay40);
        org.junit.Assert.assertNotNull(dateTimeFieldType42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNotNull(monthDay46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(monthDay52);
        org.junit.Assert.assertNotNull(monthDay54);
        org.junit.Assert.assertNotNull(monthDay56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
    }

    @Test
    public void test0767() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0767");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay1.plus(readablePeriod6);
        org.joda.time.MonthDay monthDay9 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MonthDay monthDay11 = monthDay9.withChronologyRetainFields(chronology10);
        org.joda.time.MonthDay monthDay13 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MonthDay monthDay15 = monthDay13.withChronologyRetainFields(chronology14);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = monthDay13.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property18 = monthDay11.property(dateTimeFieldType17);
        int int19 = property18.get();
        org.joda.time.MonthDay monthDay21 = property18.addWrapFieldToCopy((int) (short) 1);
        boolean boolean22 = monthDay1.isBefore((org.joda.time.ReadablePartial) monthDay21);
        org.joda.time.MonthDay.Property property23 = monthDay1.monthOfYear();
        java.util.Locale locale24 = null;
        int int25 = property23.getMaximumTextLength(locale24);
        java.lang.String str26 = property23.getAsShortText();
        java.lang.String str27 = property23.toString();
        java.util.Locale locale28 = null;
        java.lang.String str29 = property23.getAsText(locale28);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(monthDay9);
        org.junit.Assert.assertNotNull(monthDay11);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 9 + "'", int25 == 9);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Jan" + "'", str26, "Jan");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Property[monthOfYear]" + "'", str27, "Property[monthOfYear]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "January" + "'", str29, "January");
    }

    @Test
    public void test0768() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0768");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        int int11 = property10.get();
        int int12 = property10.getMinimumValueOverall();
        int int13 = property10.get();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
    }

    @Test
    public void test0769() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0769");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        java.util.Locale locale11 = null;
        int int12 = property10.getMaximumTextLength(locale11);
        int int13 = property10.getMinimumValue();
        org.joda.time.MonthDay monthDay15 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MonthDay monthDay17 = monthDay15.withChronologyRetainFields(chronology16);
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = monthDay15.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay monthDay21 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.MonthDay monthDay23 = monthDay21.withChronologyRetainFields(chronology22);
        org.joda.time.MonthDay monthDay25 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MonthDay monthDay27 = monthDay25.withChronologyRetainFields(chronology26);
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = monthDay25.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property30 = monthDay23.property(dateTimeFieldType29);
        int int31 = monthDay15.indexOf(dateTimeFieldType29);
        org.joda.time.MonthDay monthDay33 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MonthDay monthDay35 = monthDay33.withChronologyRetainFields(chronology34);
        org.joda.time.MonthDay monthDay37 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.MonthDay monthDay39 = monthDay37.withChronologyRetainFields(chronology38);
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = monthDay37.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property42 = monthDay35.property(dateTimeFieldType41);
        int int43 = property42.get();
        org.joda.time.MonthDay monthDay45 = property42.addToCopy((int) (short) 0);
        org.joda.time.MonthDay monthDay47 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.MonthDay monthDay49 = monthDay47.withChronologyRetainFields(chronology48);
        org.joda.time.MonthDay monthDay51 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.MonthDay monthDay53 = monthDay51.withChronologyRetainFields(chronology52);
        org.joda.time.DateTimeFieldType dateTimeFieldType55 = monthDay51.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property56 = monthDay49.property(dateTimeFieldType55);
        int int57 = property56.get();
        org.joda.time.DurationField durationField58 = property56.getDurationField();
        java.util.Locale locale59 = null;
        int int60 = property56.getMaximumTextLength(locale59);
        org.joda.time.MonthDay monthDay62 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.MonthDay monthDay64 = monthDay62.withChronologyRetainFields(chronology63);
        org.joda.time.DateTimeFieldType dateTimeFieldType66 = monthDay62.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property67 = monthDay62.dayOfMonth();
        org.joda.time.Chronology chronology68 = monthDay62.getChronology();
        org.joda.time.Chronology chronology69 = monthDay62.getChronology();
        org.joda.time.ReadableInstant readableInstant70 = null;
        org.joda.time.DateTime dateTime71 = monthDay62.toDateTime(readableInstant70);
        int int72 = property56.compareTo((org.joda.time.ReadableInstant) dateTime71);
        int int73 = property42.compareTo((org.joda.time.ReadableInstant) dateTime71);
        org.joda.time.DateTime dateTime74 = monthDay15.toDateTime((org.joda.time.ReadableInstant) dateTime71);
        int int75 = property10.compareTo((org.joda.time.ReadableInstant) dateTime71);
        java.lang.String str76 = property10.getAsText();
        java.util.Locale locale77 = null;
        int int78 = property10.getMaximumTextLength(locale77);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay80 = property10.setCopy("monthOfYear");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"monthOfYear\" for dayOfMonth is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(monthDay17);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertNotNull(monthDay23);
        org.junit.Assert.assertNotNull(monthDay25);
        org.junit.Assert.assertNotNull(monthDay27);
        org.junit.Assert.assertNotNull(dateTimeFieldType29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertNotNull(monthDay33);
        org.junit.Assert.assertNotNull(monthDay35);
        org.junit.Assert.assertNotNull(monthDay37);
        org.junit.Assert.assertNotNull(monthDay39);
        org.junit.Assert.assertNotNull(dateTimeFieldType41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertNotNull(monthDay45);
        org.junit.Assert.assertNotNull(monthDay47);
        org.junit.Assert.assertNotNull(monthDay49);
        org.junit.Assert.assertNotNull(monthDay51);
        org.junit.Assert.assertNotNull(monthDay53);
        org.junit.Assert.assertNotNull(dateTimeFieldType55);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertNotNull(durationField58);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 2 + "'", int60 == 2);
        org.junit.Assert.assertNotNull(monthDay62);
        org.junit.Assert.assertNotNull(monthDay64);
        org.junit.Assert.assertNotNull(dateTimeFieldType66);
        org.junit.Assert.assertNotNull(property67);
        org.junit.Assert.assertNotNull(chronology68);
        org.junit.Assert.assertNotNull(chronology69);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "1" + "'", str76, "1");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 2 + "'", int78 == 2);
    }

    @Test
    public void test0770() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0770");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay monthDay7 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MonthDay monthDay9 = monthDay7.withChronologyRetainFields(chronology8);
        org.joda.time.MonthDay monthDay11 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MonthDay monthDay13 = monthDay11.withChronologyRetainFields(chronology12);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = monthDay11.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property16 = monthDay9.property(dateTimeFieldType15);
        int int17 = monthDay1.indexOf(dateTimeFieldType15);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.MonthDay monthDay19 = new org.joda.time.MonthDay(dateTimeZone18);
        org.joda.time.DateTimeField[] dateTimeFieldArray20 = monthDay19.getFields();
        org.joda.time.MonthDay monthDay22 = org.joda.time.MonthDay.parse("");
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.MonthDay monthDay25 = monthDay22.withPeriodAdded(readablePeriod23, 1);
        boolean boolean26 = monthDay19.isBefore((org.joda.time.ReadablePartial) monthDay22);
        boolean boolean27 = monthDay1.isAfter((org.joda.time.ReadablePartial) monthDay22);
        org.joda.time.MonthDay.Property property28 = monthDay22.dayOfMonth();
        int int29 = property28.get();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay31 = property28.setCopy("--11-24");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"--11-24\" for dayOfMonth is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(monthDay9);
        org.junit.Assert.assertNotNull(monthDay11);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldArray20);
        org.junit.Assert.assertNotNull(monthDay22);
        org.junit.Assert.assertNotNull(monthDay25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
    }

    @Test
    public void test0771() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0771");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property6 = monthDay1.dayOfMonth();
        org.joda.time.Chronology chronology7 = monthDay1.getChronology();
        org.joda.time.MonthDay monthDay9 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MonthDay monthDay11 = monthDay9.withChronologyRetainFields(chronology10);
        org.joda.time.MonthDay monthDay13 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MonthDay monthDay15 = monthDay13.withChronologyRetainFields(chronology14);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = monthDay13.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property18 = monthDay11.property(dateTimeFieldType17);
        boolean boolean19 = monthDay1.isSupported(dateTimeFieldType17);
        org.joda.time.MonthDay.Property property20 = monthDay1.monthOfYear();
        org.joda.time.MonthDay monthDay22 = monthDay1.minusDays((int) (short) 1);
        org.joda.time.MonthDay monthDay24 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MonthDay monthDay26 = monthDay24.withChronologyRetainFields(chronology25);
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = monthDay24.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        org.joda.time.MonthDay monthDay30 = monthDay24.plus(readablePeriod29);
        int int31 = monthDay30.getMonthOfYear();
        org.joda.time.MonthDay monthDay33 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MonthDay monthDay35 = monthDay33.withChronologyRetainFields(chronology34);
        org.joda.time.MonthDay monthDay37 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.MonthDay monthDay39 = monthDay37.withChronologyRetainFields(chronology38);
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = monthDay37.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property42 = monthDay35.property(dateTimeFieldType41);
        java.util.Locale locale43 = null;
        int int44 = property42.getMaximumTextLength(locale43);
        org.joda.time.MonthDay monthDay46 = property42.addWrapFieldToCopy((int) (byte) 0);
        org.joda.time.ReadablePeriod readablePeriod47 = null;
        org.joda.time.MonthDay monthDay48 = monthDay46.minus(readablePeriod47);
        boolean boolean49 = monthDay30.isAfter((org.joda.time.ReadablePartial) monthDay46);
        boolean boolean50 = monthDay1.isBefore((org.joda.time.ReadablePartial) monthDay46);
        org.joda.time.MonthDay monthDay52 = monthDay46.minusMonths(0);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(monthDay9);
        org.junit.Assert.assertNotNull(monthDay11);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(monthDay22);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertNotNull(monthDay26);
        org.junit.Assert.assertNotNull(dateTimeFieldType28);
        org.junit.Assert.assertNotNull(monthDay30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertNotNull(monthDay33);
        org.junit.Assert.assertNotNull(monthDay35);
        org.junit.Assert.assertNotNull(monthDay37);
        org.junit.Assert.assertNotNull(monthDay39);
        org.junit.Assert.assertNotNull(dateTimeFieldType41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 2 + "'", int44 == 2);
        org.junit.Assert.assertNotNull(monthDay46);
        org.junit.Assert.assertNotNull(monthDay48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(monthDay52);
    }

    @Test
    public void test0772() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0772");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.MonthDay monthDay4 = monthDay1.withPeriodAdded(readablePeriod2, 1);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.MonthDay monthDay6 = monthDay1.plus(readablePeriod5);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.MonthDay monthDay8 = monthDay1.plus(readablePeriod7);
        org.joda.time.MonthDay monthDay10 = monthDay1.plusMonths(2);
        org.joda.time.MonthDay monthDay12 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MonthDay monthDay14 = monthDay12.withChronologyRetainFields(chronology13);
        org.joda.time.MonthDay monthDay16 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MonthDay monthDay18 = monthDay16.withChronologyRetainFields(chronology17);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = monthDay16.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property21 = monthDay14.property(dateTimeFieldType20);
        int int22 = property21.get();
        org.joda.time.MonthDay monthDay24 = property21.addWrapFieldToCopy((int) (short) 1);
        org.joda.time.MonthDay.Property property25 = monthDay24.dayOfMonth();
        int int26 = property25.getMaximumValueOverall();
        org.joda.time.MonthDay monthDay28 = property25.addWrapFieldToCopy((int) (short) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = property25.getFieldType();
        org.joda.time.MonthDay.Property property30 = monthDay10.property(dateTimeFieldType29);
        org.joda.time.MonthDay monthDay32 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.MonthDay monthDay34 = monthDay32.withChronologyRetainFields(chronology33);
        org.joda.time.MonthDay monthDay36 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.MonthDay monthDay38 = monthDay36.withChronologyRetainFields(chronology37);
        org.joda.time.DateTimeFieldType dateTimeFieldType40 = monthDay36.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property41 = monthDay34.property(dateTimeFieldType40);
        int int42 = property41.get();
        int int43 = property41.getMaximumValue();
        org.joda.time.DurationField durationField44 = property41.getDurationField();
        java.util.Locale locale45 = null;
        int int46 = property41.getMaximumTextLength(locale45);
        boolean boolean47 = property30.equals((java.lang.Object) int46);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay4);
        org.junit.Assert.assertNotNull(monthDay6);
        org.junit.Assert.assertNotNull(monthDay8);
        org.junit.Assert.assertNotNull(monthDay10);
        org.junit.Assert.assertNotNull(monthDay12);
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(monthDay18);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 31 + "'", int26 == 31);
        org.junit.Assert.assertNotNull(monthDay28);
        org.junit.Assert.assertNotNull(dateTimeFieldType29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(monthDay32);
        org.junit.Assert.assertNotNull(monthDay34);
        org.junit.Assert.assertNotNull(monthDay36);
        org.junit.Assert.assertNotNull(monthDay38);
        org.junit.Assert.assertNotNull(dateTimeFieldType40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 31 + "'", int43 == 31);
        org.junit.Assert.assertNotNull(durationField44);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2 + "'", int46 == 2);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
    }

    @Test
    public void test0773() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0773");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        int int11 = property10.get();
        org.joda.time.MonthDay monthDay13 = property10.addWrapFieldToCopy((int) (short) 1);
        org.joda.time.MonthDay.Property property14 = monthDay13.dayOfMonth();
        int int15 = property14.getMaximumValueOverall();
        int int16 = property14.getMinimumValueOverall();
        org.joda.time.MonthDay monthDay18 = property14.setCopy(31);
        org.joda.time.DurationFieldType durationFieldType19 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay21 = monthDay18.withFieldAdded(durationFieldType19, (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 31 + "'", int15 == 31);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(monthDay18);
    }

    @Test
    public void test0774() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0774");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = null;
        java.lang.String str7 = monthDay1.toString(dateTimeFormatter6);
        org.joda.time.MonthDay monthDay9 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MonthDay monthDay11 = monthDay9.withChronologyRetainFields(chronology10);
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = monthDay9.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.MonthDay monthDay15 = monthDay9.plus(readablePeriod14);
        org.joda.time.MonthDay monthDay17 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.MonthDay monthDay19 = monthDay17.withChronologyRetainFields(chronology18);
        org.joda.time.MonthDay monthDay21 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.MonthDay monthDay23 = monthDay21.withChronologyRetainFields(chronology22);
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = monthDay21.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property26 = monthDay19.property(dateTimeFieldType25);
        int int27 = property26.get();
        org.joda.time.MonthDay monthDay29 = property26.addWrapFieldToCopy((int) (short) 1);
        boolean boolean30 = monthDay9.isBefore((org.joda.time.ReadablePartial) monthDay29);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MonthDay monthDay32 = monthDay9.withChronologyRetainFields(chronology31);
        org.joda.time.MonthDay monthDay34 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.MonthDay monthDay36 = monthDay34.withChronologyRetainFields(chronology35);
        org.joda.time.MonthDay monthDay38 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.MonthDay monthDay40 = monthDay38.withChronologyRetainFields(chronology39);
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = monthDay38.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property43 = monthDay36.property(dateTimeFieldType42);
        org.joda.time.MonthDay.Property property44 = monthDay36.monthOfYear();
        int int45 = monthDay36.getDayOfMonth();
        org.joda.time.MonthDay.Property property46 = monthDay36.dayOfMonth();
        int int47 = monthDay36.getDayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod48 = null;
        org.joda.time.MonthDay monthDay49 = monthDay36.plus(readablePeriod48);
        boolean boolean50 = monthDay32.isBefore((org.joda.time.ReadablePartial) monthDay36);
        boolean boolean51 = monthDay1.isAfter((org.joda.time.ReadablePartial) monthDay32);
        int int52 = monthDay1.getDayOfMonth();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "--01-01" + "'", str7, "--01-01");
        org.junit.Assert.assertNotNull(monthDay9);
        org.junit.Assert.assertNotNull(monthDay11);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(monthDay17);
        org.junit.Assert.assertNotNull(monthDay19);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertNotNull(monthDay23);
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(monthDay29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(monthDay32);
        org.junit.Assert.assertNotNull(monthDay34);
        org.junit.Assert.assertNotNull(monthDay36);
        org.junit.Assert.assertNotNull(monthDay38);
        org.junit.Assert.assertNotNull(monthDay40);
        org.junit.Assert.assertNotNull(dateTimeFieldType42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(monthDay49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
    }

    @Test
    public void test0775() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0775");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.MonthDay monthDay4 = monthDay1.withPeriodAdded(readablePeriod2, 1);
        org.joda.time.MonthDay monthDay6 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MonthDay monthDay8 = monthDay6.withChronologyRetainFields(chronology7);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = monthDay6.getFieldType((int) (byte) 1);
        int int11 = monthDay4.indexOf(dateTimeFieldType10);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MonthDay monthDay13 = monthDay4.withChronologyRetainFields(chronology12);
        org.joda.time.MonthDay.Property property14 = monthDay13.dayOfMonth();
        java.lang.String str15 = property14.toString();
        org.joda.time.MonthDay monthDay17 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.MonthDay monthDay19 = monthDay17.withChronologyRetainFields(chronology18);
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = monthDay17.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.MonthDay monthDay23 = monthDay17.plus(readablePeriod22);
        org.joda.time.MonthDay monthDay25 = monthDay17.plusMonths((int) (byte) 1);
        org.joda.time.MonthDay monthDay27 = monthDay17.plusDays(31);
        int int28 = property14.compareTo((org.joda.time.ReadablePartial) monthDay27);
        java.lang.String str29 = property14.getAsString();
        java.util.Locale locale30 = null;
        int int31 = property14.getMaximumTextLength(locale30);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay4);
        org.junit.Assert.assertNotNull(monthDay6);
        org.junit.Assert.assertNotNull(monthDay8);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Property[dayOfMonth]" + "'", str15, "Property[dayOfMonth]");
        org.junit.Assert.assertNotNull(monthDay17);
        org.junit.Assert.assertNotNull(monthDay19);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertNotNull(monthDay23);
        org.junit.Assert.assertNotNull(monthDay25);
        org.junit.Assert.assertNotNull(monthDay27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "1" + "'", str29, "1");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2 + "'", int31 == 2);
    }

    @Test
    public void test0776() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0776");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay1.plus(readablePeriod6);
        org.joda.time.MonthDay monthDay9 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MonthDay monthDay11 = monthDay9.withChronologyRetainFields(chronology10);
        org.joda.time.MonthDay monthDay13 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MonthDay monthDay15 = monthDay13.withChronologyRetainFields(chronology14);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = monthDay13.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property18 = monthDay11.property(dateTimeFieldType17);
        int int19 = property18.get();
        org.joda.time.MonthDay monthDay21 = property18.addWrapFieldToCopy((int) (short) 1);
        boolean boolean22 = monthDay1.isBefore((org.joda.time.ReadablePartial) monthDay21);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MonthDay monthDay24 = monthDay1.withChronologyRetainFields(chronology23);
        org.joda.time.Chronology chronology25 = monthDay24.getChronology();
        int[] intArray26 = monthDay24.getValues();
        org.joda.time.MonthDay monthDay28 = org.joda.time.MonthDay.parse("");
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        org.joda.time.MonthDay monthDay31 = monthDay28.withPeriodAdded(readablePeriod29, 1);
        org.joda.time.MonthDay monthDay33 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MonthDay monthDay35 = monthDay33.withChronologyRetainFields(chronology34);
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = monthDay33.getFieldType((int) (byte) 1);
        int int38 = monthDay31.indexOf(dateTimeFieldType37);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.MonthDay monthDay40 = monthDay31.withChronologyRetainFields(chronology39);
        org.joda.time.MonthDay monthDay42 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.MonthDay monthDay44 = monthDay42.withChronologyRetainFields(chronology43);
        org.joda.time.DateTimeFieldType dateTimeFieldType46 = monthDay42.getFieldType((int) (byte) 1);
        int int47 = monthDay31.get(dateTimeFieldType46);
        boolean boolean48 = monthDay24.isAfter((org.joda.time.ReadablePartial) monthDay31);
        org.joda.time.ReadablePeriod readablePeriod49 = null;
        org.joda.time.MonthDay monthDay50 = monthDay24.plus(readablePeriod49);
        int int51 = monthDay24.getMonthOfYear();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(monthDay9);
        org.junit.Assert.assertNotNull(monthDay11);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, 1]");
        org.junit.Assert.assertNotNull(monthDay28);
        org.junit.Assert.assertNotNull(monthDay31);
        org.junit.Assert.assertNotNull(monthDay33);
        org.junit.Assert.assertNotNull(monthDay35);
        org.junit.Assert.assertNotNull(dateTimeFieldType37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(monthDay40);
        org.junit.Assert.assertNotNull(monthDay42);
        org.junit.Assert.assertNotNull(monthDay44);
        org.junit.Assert.assertNotNull(dateTimeFieldType46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(monthDay50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
    }

    @Test
    public void test0777() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0777");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay1.plus(readablePeriod6);
        org.joda.time.MonthDay monthDay9 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MonthDay monthDay11 = monthDay9.withChronologyRetainFields(chronology10);
        org.joda.time.MonthDay monthDay13 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MonthDay monthDay15 = monthDay13.withChronologyRetainFields(chronology14);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = monthDay13.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property18 = monthDay11.property(dateTimeFieldType17);
        int int19 = property18.get();
        org.joda.time.MonthDay monthDay21 = property18.addWrapFieldToCopy((int) (short) 1);
        boolean boolean22 = monthDay1.isBefore((org.joda.time.ReadablePartial) monthDay21);
        org.joda.time.DateTimeField[] dateTimeFieldArray23 = monthDay1.getFields();
        org.joda.time.DateTimeField[] dateTimeFieldArray24 = monthDay1.getFields();
        org.joda.time.MonthDay.Property property25 = monthDay1.monthOfYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter26 = null;
        java.lang.String str27 = monthDay1.toString(dateTimeFormatter26);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(monthDay9);
        org.junit.Assert.assertNotNull(monthDay11);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldArray23);
        org.junit.Assert.assertNotNull(dateTimeFieldArray24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "--01-01" + "'", str27, "--01-01");
    }

    @Test
    public void test0778() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0778");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        int int11 = property10.get();
        org.joda.time.MonthDay monthDay13 = property10.addWrapFieldToCopy((int) (short) 1);
        java.lang.String str14 = property10.getAsString();
        java.lang.String str15 = property10.getAsText();
        org.joda.time.DurationField durationField16 = property10.getRangeDurationField();
        int int17 = property10.getMinimumValue();
        org.joda.time.MonthDay monthDay19 = property10.addToCopy((int) (short) -1);
        int int20 = property10.getMaximumValueOverall();
        java.lang.String str21 = property10.getAsString();
        org.joda.time.MonthDay monthDay23 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MonthDay monthDay25 = monthDay23.withChronologyRetainFields(chronology24);
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = monthDay23.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.MonthDay monthDay29 = monthDay23.plus(readablePeriod28);
        org.joda.time.MonthDay monthDay31 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.MonthDay monthDay33 = monthDay31.withChronologyRetainFields(chronology32);
        org.joda.time.MonthDay monthDay35 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.MonthDay monthDay37 = monthDay35.withChronologyRetainFields(chronology36);
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = monthDay35.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property40 = monthDay33.property(dateTimeFieldType39);
        int int41 = property40.get();
        org.joda.time.MonthDay monthDay43 = property40.addWrapFieldToCopy((int) (short) 1);
        boolean boolean44 = monthDay23.isBefore((org.joda.time.ReadablePartial) monthDay43);
        org.joda.time.MonthDay monthDay46 = monthDay43.minusMonths((int) (byte) 100);
        org.joda.time.MonthDay monthDay48 = org.joda.time.MonthDay.parse("");
        org.joda.time.MonthDay monthDay50 = monthDay48.minusDays((int) '#');
        boolean boolean51 = monthDay46.isBefore((org.joda.time.ReadablePartial) monthDay50);
        org.joda.time.MonthDay monthDay53 = monthDay50.plusMonths((int) (byte) 1);
        int int54 = property10.compareTo((org.joda.time.ReadablePartial) monthDay50);
        org.joda.time.ReadablePeriod readablePeriod55 = null;
        org.joda.time.MonthDay monthDay56 = monthDay50.minus(readablePeriod55);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "1" + "'", str14, "1");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "1" + "'", str15, "1");
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(monthDay19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 31 + "'", int20 == 31);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "1" + "'", str21, "1");
        org.junit.Assert.assertNotNull(monthDay23);
        org.junit.Assert.assertNotNull(monthDay25);
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertNotNull(monthDay29);
        org.junit.Assert.assertNotNull(monthDay31);
        org.junit.Assert.assertNotNull(monthDay33);
        org.junit.Assert.assertNotNull(monthDay35);
        org.junit.Assert.assertNotNull(monthDay37);
        org.junit.Assert.assertNotNull(dateTimeFieldType39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertNotNull(monthDay43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(monthDay46);
        org.junit.Assert.assertNotNull(monthDay48);
        org.junit.Assert.assertNotNull(monthDay50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(monthDay53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertNotNull(monthDay56);
    }

    @Test
    public void test0779() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0779");
        org.joda.time.MonthDay monthDay2 = new org.joda.time.MonthDay(10, 4);
    }

    @Test
    public void test0780() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0780");
        org.joda.time.MonthDay monthDay0 = org.joda.time.MonthDay.now();
        org.joda.time.ReadablePeriod readablePeriod1 = null;
        org.joda.time.MonthDay monthDay2 = monthDay0.plus(readablePeriod1);
        org.joda.time.MonthDay monthDay3 = new org.joda.time.MonthDay((java.lang.Object) readablePeriod1);
        org.junit.Assert.assertNotNull(monthDay0);
        org.junit.Assert.assertNotNull(monthDay2);
    }

    @Test
    public void test0781() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0781");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property6 = monthDay1.dayOfMonth();
        org.joda.time.Chronology chronology7 = monthDay1.getChronology();
        org.joda.time.Chronology chronology8 = monthDay1.getChronology();
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.DateTime dateTime10 = monthDay1.toDateTime(readableInstant9);
        org.joda.time.MonthDay monthDay12 = monthDay1.plusMonths(0);
        org.joda.time.MonthDay monthDay14 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MonthDay monthDay16 = monthDay14.withChronologyRetainFields(chronology15);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = monthDay14.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.MonthDay monthDay20 = monthDay14.plus(readablePeriod19);
        org.joda.time.MonthDay monthDay22 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MonthDay monthDay24 = monthDay22.withChronologyRetainFields(chronology23);
        org.joda.time.MonthDay monthDay26 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.MonthDay monthDay28 = monthDay26.withChronologyRetainFields(chronology27);
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = monthDay26.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property31 = monthDay24.property(dateTimeFieldType30);
        int int32 = property31.get();
        org.joda.time.MonthDay monthDay34 = property31.addWrapFieldToCopy((int) (short) 1);
        boolean boolean35 = monthDay14.isBefore((org.joda.time.ReadablePartial) monthDay34);
        org.joda.time.DateTimeField[] dateTimeFieldArray36 = monthDay14.getFields();
        org.joda.time.ReadablePeriod readablePeriod37 = null;
        org.joda.time.MonthDay monthDay38 = monthDay14.minus(readablePeriod37);
        boolean boolean39 = monthDay1.equals((java.lang.Object) monthDay38);
        org.joda.time.MonthDay monthDay41 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.MonthDay monthDay43 = monthDay41.withChronologyRetainFields(chronology42);
        org.joda.time.MonthDay monthDay45 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.MonthDay monthDay47 = monthDay45.withChronologyRetainFields(chronology46);
        org.joda.time.DateTimeFieldType dateTimeFieldType49 = monthDay45.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property50 = monthDay43.property(dateTimeFieldType49);
        java.util.Locale locale51 = null;
        int int52 = property50.getMaximumTextLength(locale51);
        org.joda.time.MonthDay monthDay54 = property50.addWrapFieldToCopy((int) (byte) 0);
        org.joda.time.MonthDay monthDay55 = new org.joda.time.MonthDay((java.lang.Object) monthDay54);
        boolean boolean56 = monthDay38.isAfter((org.joda.time.ReadablePartial) monthDay55);
        org.joda.time.MonthDay.Property property57 = monthDay55.monthOfYear();
        org.joda.time.ReadablePartial readablePartial58 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int59 = property57.compareTo(readablePartial58);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The instant must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(monthDay12);
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(monthDay20);
        org.junit.Assert.assertNotNull(monthDay22);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertNotNull(monthDay26);
        org.junit.Assert.assertNotNull(monthDay28);
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(monthDay34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldArray36);
        org.junit.Assert.assertNotNull(monthDay38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(monthDay41);
        org.junit.Assert.assertNotNull(monthDay43);
        org.junit.Assert.assertNotNull(monthDay45);
        org.junit.Assert.assertNotNull(monthDay47);
        org.junit.Assert.assertNotNull(dateTimeFieldType49);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 2 + "'", int52 == 2);
        org.junit.Assert.assertNotNull(monthDay54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(property57);
    }

    @Test
    public void test0782() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0782");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay5.dayOfMonth();
        org.joda.time.Chronology chronology11 = monthDay5.getChronology();
        org.joda.time.MonthDay monthDay12 = org.joda.time.MonthDay.now(chronology11);
        org.joda.time.MonthDay monthDay13 = monthDay3.withChronologyRetainFields(chronology11);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.MonthDay monthDay15 = monthDay3.minus(readablePeriod14);
        org.joda.time.MonthDay monthDay17 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.MonthDay monthDay19 = monthDay17.withChronologyRetainFields(chronology18);
        org.joda.time.MonthDay monthDay21 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.MonthDay monthDay23 = monthDay21.withChronologyRetainFields(chronology22);
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = monthDay21.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property26 = monthDay19.property(dateTimeFieldType25);
        int int27 = property26.get();
        int int28 = property26.getMaximumValue();
        org.joda.time.MonthDay monthDay30 = property26.setCopy((int) (short) 1);
        org.joda.time.MonthDay monthDay32 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.MonthDay monthDay34 = monthDay32.withChronologyRetainFields(chronology33);
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = monthDay32.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod37 = null;
        org.joda.time.MonthDay monthDay38 = monthDay32.plus(readablePeriod37);
        int int39 = monthDay32.getDayOfMonth();
        int int40 = property26.compareTo((org.joda.time.ReadablePartial) monthDay32);
        boolean boolean41 = monthDay15.isBefore((org.joda.time.ReadablePartial) monthDay32);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter42 = null;
        java.lang.String str43 = monthDay32.toString(dateTimeFormatter42);
        java.lang.Class<?> wildcardClass44 = monthDay32.getClass();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(monthDay12);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(monthDay17);
        org.junit.Assert.assertNotNull(monthDay19);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertNotNull(monthDay23);
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 31 + "'", int28 == 31);
        org.junit.Assert.assertNotNull(monthDay30);
        org.junit.Assert.assertNotNull(monthDay32);
        org.junit.Assert.assertNotNull(monthDay34);
        org.junit.Assert.assertNotNull(dateTimeFieldType36);
        org.junit.Assert.assertNotNull(monthDay38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "--01-01" + "'", str43, "--01-01");
        org.junit.Assert.assertNotNull(wildcardClass44);
    }

    @Test
    public void test0783() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0783");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.MonthDay monthDay1 = new org.joda.time.MonthDay(dateTimeZone0);
        org.joda.time.MonthDay monthDay3 = monthDay1.minusDays(100);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.MonthDay monthDay5 = monthDay1.minus(readablePeriod4);
        java.util.Locale locale7 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str8 = monthDay1.toString("hi!", locale7);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: i");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
    }

    @Test
    public void test0784() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0784");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        org.joda.time.MonthDay.Property property11 = monthDay3.monthOfYear();
        org.joda.time.MonthDay monthDay13 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MonthDay monthDay15 = monthDay13.withChronologyRetainFields(chronology14);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = monthDay13.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay monthDay19 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MonthDay monthDay21 = monthDay19.withChronologyRetainFields(chronology20);
        org.joda.time.MonthDay monthDay23 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MonthDay monthDay25 = monthDay23.withChronologyRetainFields(chronology24);
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = monthDay23.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property28 = monthDay21.property(dateTimeFieldType27);
        int int29 = monthDay13.indexOf(dateTimeFieldType27);
        boolean boolean30 = monthDay3.equals((java.lang.Object) int29);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MonthDay monthDay32 = monthDay3.withChronologyRetainFields(chronology31);
        int int33 = monthDay3.getDayOfMonth();
        org.joda.time.MonthDay monthDay35 = monthDay3.minusDays(11);
        int[] intArray36 = monthDay35.getValues();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(monthDay19);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertNotNull(monthDay23);
        org.junit.Assert.assertNotNull(monthDay25);
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(monthDay32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(monthDay35);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[12, 21]");
    }

    @Test
    public void test0785() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0785");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property6 = monthDay1.dayOfMonth();
        org.joda.time.MonthDay monthDay8 = property6.addWrapFieldToCopy(1);
        org.joda.time.MonthDay monthDay10 = property6.addWrapFieldToCopy(0);
        int int11 = property6.getMaximumValueOverall();
        java.util.Locale locale12 = null;
        java.lang.String str13 = property6.getAsText(locale12);
        java.lang.String str14 = property6.getName();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay16 = property6.setCopy("--09-02");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"--09-02\" for dayOfMonth is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(monthDay8);
        org.junit.Assert.assertNotNull(monthDay10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 31 + "'", int11 == 31);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "1" + "'", str13, "1");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "dayOfMonth" + "'", str14, "dayOfMonth");
    }

    @Test
    public void test0786() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0786");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay1.plus(readablePeriod6);
        org.joda.time.MonthDay monthDay9 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MonthDay monthDay11 = monthDay9.withChronologyRetainFields(chronology10);
        org.joda.time.MonthDay monthDay13 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MonthDay monthDay15 = monthDay13.withChronologyRetainFields(chronology14);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = monthDay13.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property18 = monthDay11.property(dateTimeFieldType17);
        int int19 = property18.get();
        org.joda.time.MonthDay monthDay21 = property18.addWrapFieldToCopy((int) (short) 1);
        boolean boolean22 = monthDay1.isBefore((org.joda.time.ReadablePartial) monthDay21);
        org.joda.time.MonthDay monthDay24 = monthDay21.minusMonths((int) (byte) 100);
        org.joda.time.MonthDay monthDay26 = monthDay24.plusMonths(1);
        org.joda.time.MonthDay monthDay28 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MonthDay monthDay30 = monthDay28.withChronologyRetainFields(chronology29);
        boolean boolean31 = monthDay24.isBefore((org.joda.time.ReadablePartial) monthDay30);
        org.joda.time.DateTimeField[] dateTimeFieldArray32 = monthDay30.getFields();
        org.joda.time.MonthDay monthDay34 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.MonthDay monthDay36 = monthDay34.withChronologyRetainFields(chronology35);
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = monthDay34.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod39 = null;
        org.joda.time.MonthDay monthDay40 = monthDay34.plus(readablePeriod39);
        org.joda.time.MonthDay monthDay42 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.MonthDay monthDay44 = monthDay42.withChronologyRetainFields(chronology43);
        org.joda.time.MonthDay monthDay46 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.MonthDay monthDay48 = monthDay46.withChronologyRetainFields(chronology47);
        org.joda.time.DateTimeFieldType dateTimeFieldType50 = monthDay46.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property51 = monthDay44.property(dateTimeFieldType50);
        int int52 = property51.get();
        org.joda.time.MonthDay monthDay54 = property51.addWrapFieldToCopy((int) (short) 1);
        boolean boolean55 = monthDay34.isBefore((org.joda.time.ReadablePartial) monthDay54);
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.MonthDay monthDay57 = monthDay34.withChronologyRetainFields(chronology56);
        org.joda.time.Chronology chronology58 = monthDay57.getChronology();
        int[] intArray59 = monthDay57.getValues();
        org.joda.time.MonthDay monthDay61 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.MonthDay monthDay63 = monthDay61.withChronologyRetainFields(chronology62);
        org.joda.time.DateTimeFieldType dateTimeFieldType65 = monthDay61.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay monthDay67 = monthDay57.withField(dateTimeFieldType65, 10);
        int int68 = monthDay30.get(dateTimeFieldType65);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter69 = null;
        java.lang.String str70 = monthDay30.toString(dateTimeFormatter69);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(monthDay9);
        org.junit.Assert.assertNotNull(monthDay11);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertNotNull(monthDay26);
        org.junit.Assert.assertNotNull(monthDay28);
        org.junit.Assert.assertNotNull(monthDay30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldArray32);
        org.junit.Assert.assertNotNull(monthDay34);
        org.junit.Assert.assertNotNull(monthDay36);
        org.junit.Assert.assertNotNull(dateTimeFieldType38);
        org.junit.Assert.assertNotNull(monthDay40);
        org.junit.Assert.assertNotNull(monthDay42);
        org.junit.Assert.assertNotNull(monthDay44);
        org.junit.Assert.assertNotNull(monthDay46);
        org.junit.Assert.assertNotNull(monthDay48);
        org.junit.Assert.assertNotNull(dateTimeFieldType50);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertNotNull(monthDay54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(monthDay57);
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[1, 1]");
        org.junit.Assert.assertNotNull(monthDay61);
        org.junit.Assert.assertNotNull(monthDay63);
        org.junit.Assert.assertNotNull(dateTimeFieldType65);
        org.junit.Assert.assertNotNull(monthDay67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1 + "'", int68 == 1);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "--01-01" + "'", str70, "--01-01");
    }

    @Test
    public void test0787() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0787");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.MonthDay monthDay1 = new org.joda.time.MonthDay(dateTimeZone0);
        org.joda.time.MonthDay monthDay3 = monthDay1.minusDays(100);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.MonthDay monthDay8 = monthDay5.withPeriodAdded(readablePeriod6, 1);
        org.joda.time.MonthDay monthDay10 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MonthDay monthDay12 = monthDay10.withChronologyRetainFields(chronology11);
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = monthDay10.getFieldType((int) (byte) 1);
        int int15 = monthDay8.indexOf(dateTimeFieldType14);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MonthDay monthDay17 = monthDay8.withChronologyRetainFields(chronology16);
        org.joda.time.MonthDay monthDay19 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MonthDay monthDay21 = monthDay19.withChronologyRetainFields(chronology20);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = monthDay19.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property24 = monthDay19.dayOfMonth();
        org.joda.time.Chronology chronology25 = monthDay19.getChronology();
        org.joda.time.Chronology chronology26 = monthDay19.getChronology();
        boolean boolean27 = monthDay8.isEqual((org.joda.time.ReadablePartial) monthDay19);
        boolean boolean28 = monthDay1.isEqual((org.joda.time.ReadablePartial) monthDay8);
        int[] intArray29 = monthDay8.getValues();
        org.joda.time.MonthDay monthDay31 = monthDay8.plusMonths((int) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            int int33 = monthDay31.getValue((int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 35");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay8);
        org.junit.Assert.assertNotNull(monthDay10);
        org.junit.Assert.assertNotNull(monthDay12);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(monthDay17);
        org.junit.Assert.assertNotNull(monthDay19);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[1, 1]");
        org.junit.Assert.assertNotNull(monthDay31);
    }

    @Test
    public void test0788() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0788");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay1.plus(readablePeriod6);
        org.joda.time.MonthDay monthDay9 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MonthDay monthDay11 = monthDay9.withChronologyRetainFields(chronology10);
        org.joda.time.MonthDay monthDay13 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MonthDay monthDay15 = monthDay13.withChronologyRetainFields(chronology14);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = monthDay13.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property18 = monthDay11.property(dateTimeFieldType17);
        int int19 = property18.get();
        org.joda.time.MonthDay monthDay21 = property18.addWrapFieldToCopy((int) (short) 1);
        boolean boolean22 = monthDay1.isBefore((org.joda.time.ReadablePartial) monthDay21);
        org.joda.time.MonthDay.Property property23 = monthDay1.monthOfYear();
        int int24 = property23.get();
        org.joda.time.MonthDay monthDay25 = property23.getMonthDay();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(monthDay9);
        org.junit.Assert.assertNotNull(monthDay11);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(monthDay25);
    }

    @Test
    public void test0789() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0789");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property6 = monthDay1.dayOfMonth();
        org.joda.time.Chronology chronology7 = monthDay1.getChronology();
        org.joda.time.Chronology chronology8 = monthDay1.getChronology();
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.DateTime dateTime10 = monthDay1.toDateTime(readableInstant9);
        org.joda.time.MonthDay monthDay12 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MonthDay monthDay14 = monthDay12.withChronologyRetainFields(chronology13);
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = monthDay12.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.MonthDay monthDay18 = monthDay12.plus(readablePeriod17);
        org.joda.time.MonthDay monthDay20 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.MonthDay monthDay22 = monthDay20.withChronologyRetainFields(chronology21);
        org.joda.time.MonthDay monthDay24 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MonthDay monthDay26 = monthDay24.withChronologyRetainFields(chronology25);
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = monthDay24.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property29 = monthDay22.property(dateTimeFieldType28);
        int int30 = property29.get();
        org.joda.time.MonthDay monthDay32 = property29.addWrapFieldToCopy((int) (short) 1);
        boolean boolean33 = monthDay12.isBefore((org.joda.time.ReadablePartial) monthDay32);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MonthDay monthDay35 = monthDay12.withChronologyRetainFields(chronology34);
        org.joda.time.Chronology chronology36 = monthDay35.getChronology();
        org.joda.time.MonthDay monthDay37 = org.joda.time.MonthDay.now(chronology36);
        org.joda.time.MonthDay monthDay38 = monthDay1.withChronologyRetainFields(chronology36);
        org.joda.time.ReadablePeriod readablePeriod39 = null;
        org.joda.time.MonthDay monthDay40 = monthDay38.plus(readablePeriod39);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(monthDay12);
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertNotNull(monthDay18);
        org.junit.Assert.assertNotNull(monthDay20);
        org.junit.Assert.assertNotNull(monthDay22);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertNotNull(monthDay26);
        org.junit.Assert.assertNotNull(dateTimeFieldType28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(monthDay32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(monthDay35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(monthDay37);
        org.junit.Assert.assertNotNull(monthDay38);
        org.junit.Assert.assertNotNull(monthDay40);
    }

    @Test
    public void test0790() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0790");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        int int11 = property10.get();
        org.joda.time.MonthDay monthDay13 = property10.addWrapFieldToCopy((int) (short) 1);
        org.joda.time.MonthDay.Property property14 = monthDay13.dayOfMonth();
        int int15 = property14.getMaximumValueOverall();
        org.joda.time.MonthDay monthDay17 = property14.addToCopy((int) (byte) 100);
        java.lang.String str18 = property14.getAsString();
        java.util.Locale locale19 = null;
        java.lang.String str20 = property14.getAsShortText(locale19);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 31 + "'", int15 == 31);
        org.junit.Assert.assertNotNull(monthDay17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "2" + "'", str18, "2");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "2" + "'", str20, "2");
    }

    @Test
    public void test0791() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0791");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay1.plus(readablePeriod6);
        org.joda.time.MonthDay monthDay9 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MonthDay monthDay11 = monthDay9.withChronologyRetainFields(chronology10);
        org.joda.time.MonthDay monthDay13 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MonthDay monthDay15 = monthDay13.withChronologyRetainFields(chronology14);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = monthDay13.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property18 = monthDay11.property(dateTimeFieldType17);
        int int19 = property18.get();
        org.joda.time.MonthDay monthDay21 = property18.addWrapFieldToCopy((int) (short) 1);
        boolean boolean22 = monthDay1.isBefore((org.joda.time.ReadablePartial) monthDay21);
        int int23 = monthDay1.size();
        int int25 = monthDay1.getValue(0);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(monthDay9);
        org.junit.Assert.assertNotNull(monthDay11);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2 + "'", int23 == 2);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
    }

    @Test
    public void test0792() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0792");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        org.joda.time.MonthDay.Property property11 = monthDay3.monthOfYear();
        org.joda.time.MonthDay monthDay13 = monthDay3.minusDays((int) (byte) 1);
        org.joda.time.DateTimeField dateTimeField15 = monthDay13.getField(0);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(dateTimeField15);
    }

    @Test
    public void test0793() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0793");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property6 = monthDay1.dayOfMonth();
        org.joda.time.MonthDay monthDay8 = property6.addWrapFieldToCopy(1);
        org.joda.time.MonthDay monthDay10 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MonthDay monthDay12 = monthDay10.withChronologyRetainFields(chronology11);
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = monthDay10.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.MonthDay monthDay16 = monthDay10.plus(readablePeriod15);
        org.joda.time.MonthDay monthDay18 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MonthDay monthDay20 = monthDay18.withChronologyRetainFields(chronology19);
        org.joda.time.MonthDay monthDay22 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MonthDay monthDay24 = monthDay22.withChronologyRetainFields(chronology23);
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = monthDay22.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property27 = monthDay20.property(dateTimeFieldType26);
        int int28 = property27.get();
        org.joda.time.MonthDay monthDay30 = property27.addWrapFieldToCopy((int) (short) 1);
        boolean boolean31 = monthDay10.isBefore((org.joda.time.ReadablePartial) monthDay30);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.MonthDay monthDay33 = monthDay10.withChronologyRetainFields(chronology32);
        org.joda.time.Chronology chronology34 = monthDay33.getChronology();
        org.joda.time.MonthDay monthDay35 = org.joda.time.MonthDay.now(chronology34);
        org.joda.time.MonthDay monthDay36 = new org.joda.time.MonthDay((java.lang.Object) monthDay8, chronology34);
        org.joda.time.MonthDay monthDay37 = org.joda.time.MonthDay.now(chronology34);
        org.joda.time.MonthDay monthDay39 = org.joda.time.MonthDay.parse("");
        org.joda.time.ReadablePeriod readablePeriod40 = null;
        org.joda.time.MonthDay monthDay42 = monthDay39.withPeriodAdded(readablePeriod40, 1);
        org.joda.time.MonthDay monthDay44 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.MonthDay monthDay46 = monthDay44.withChronologyRetainFields(chronology45);
        org.joda.time.DateTimeFieldType dateTimeFieldType48 = monthDay44.getFieldType((int) (byte) 1);
        int int49 = monthDay42.indexOf(dateTimeFieldType48);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.MonthDay monthDay51 = monthDay42.withChronologyRetainFields(chronology50);
        org.joda.time.MonthDay.Property property52 = monthDay51.dayOfMonth();
        org.joda.time.DateTimeFieldType dateTimeFieldType53 = property52.getFieldType();
        org.joda.time.MonthDay.Property property54 = monthDay37.property(dateTimeFieldType53);
        org.joda.time.MonthDay monthDay56 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.MonthDay monthDay58 = monthDay56.withChronologyRetainFields(chronology57);
        org.joda.time.DateTimeFieldType dateTimeFieldType60 = monthDay56.getFieldType((int) (byte) 1);
        int int61 = monthDay37.compareTo((org.joda.time.ReadablePartial) monthDay56);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(monthDay8);
        org.junit.Assert.assertNotNull(monthDay10);
        org.junit.Assert.assertNotNull(monthDay12);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(monthDay18);
        org.junit.Assert.assertNotNull(monthDay20);
        org.junit.Assert.assertNotNull(monthDay22);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(monthDay30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(monthDay33);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(monthDay35);
        org.junit.Assert.assertNotNull(monthDay37);
        org.junit.Assert.assertNotNull(monthDay39);
        org.junit.Assert.assertNotNull(monthDay42);
        org.junit.Assert.assertNotNull(monthDay44);
        org.junit.Assert.assertNotNull(monthDay46);
        org.junit.Assert.assertNotNull(dateTimeFieldType48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertNotNull(monthDay51);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(dateTimeFieldType53);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(monthDay56);
        org.junit.Assert.assertNotNull(monthDay58);
        org.junit.Assert.assertNotNull(dateTimeFieldType60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
    }

    @Test
    public void test0794() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0794");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        int int11 = property10.get();
        int int12 = property10.getMaximumValue();
        org.joda.time.MonthDay monthDay14 = property10.setCopy((int) (short) 1);
        org.joda.time.MonthDay monthDay16 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MonthDay monthDay18 = monthDay16.withChronologyRetainFields(chronology17);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = monthDay16.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.MonthDay monthDay22 = monthDay16.plus(readablePeriod21);
        int int23 = monthDay16.getDayOfMonth();
        int int24 = property10.compareTo((org.joda.time.ReadablePartial) monthDay16);
        org.joda.time.MonthDay monthDay26 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.MonthDay monthDay28 = monthDay26.withChronologyRetainFields(chronology27);
        org.joda.time.MonthDay monthDay30 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MonthDay monthDay32 = monthDay30.withChronologyRetainFields(chronology31);
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = monthDay30.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property35 = monthDay28.property(dateTimeFieldType34);
        int int36 = property35.get();
        org.joda.time.MonthDay monthDay38 = property35.addWrapFieldToCopy((int) (short) 1);
        org.joda.time.MonthDay.Property property39 = monthDay38.dayOfMonth();
        int int40 = property39.getMaximumValueOverall();
        java.util.Locale locale42 = null;
        org.joda.time.MonthDay monthDay43 = property39.setCopy("1", locale42);
        int int44 = property10.compareTo((org.joda.time.ReadablePartial) monthDay43);
        int int45 = property10.get();
        java.lang.String str46 = property10.toString();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 31 + "'", int12 == 31);
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(monthDay18);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertNotNull(monthDay22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(monthDay26);
        org.junit.Assert.assertNotNull(monthDay28);
        org.junit.Assert.assertNotNull(monthDay30);
        org.junit.Assert.assertNotNull(monthDay32);
        org.junit.Assert.assertNotNull(dateTimeFieldType34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(monthDay38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 31 + "'", int40 == 31);
        org.junit.Assert.assertNotNull(monthDay43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "Property[dayOfMonth]" + "'", str46, "Property[dayOfMonth]");
    }

    @Test
    public void test0795() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0795");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.MonthDay monthDay3 = monthDay1.minusDays((int) '#');
        int int4 = monthDay3.size();
        org.joda.time.MonthDay monthDay6 = monthDay3.withMonthOfYear(9);
        // The following exception was thrown during execution in test generation
        try {
            int int8 = monthDay6.getValue((int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 32");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2 + "'", int4 == 2);
        org.junit.Assert.assertNotNull(monthDay6);
    }

    @Test
    public void test0796() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0796");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.MonthDay monthDay4 = monthDay1.withPeriodAdded(readablePeriod2, 1);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.MonthDay monthDay6 = monthDay1.plus(readablePeriod5);
        org.joda.time.MonthDay monthDay8 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MonthDay monthDay10 = monthDay8.withChronologyRetainFields(chronology9);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = monthDay8.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.MonthDay monthDay14 = monthDay8.plus(readablePeriod13);
        org.joda.time.MonthDay monthDay16 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MonthDay monthDay18 = monthDay16.withChronologyRetainFields(chronology17);
        org.joda.time.MonthDay monthDay20 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.MonthDay monthDay22 = monthDay20.withChronologyRetainFields(chronology21);
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = monthDay20.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property25 = monthDay18.property(dateTimeFieldType24);
        int int26 = property25.get();
        org.joda.time.MonthDay monthDay28 = property25.addWrapFieldToCopy((int) (short) 1);
        boolean boolean29 = monthDay8.isBefore((org.joda.time.ReadablePartial) monthDay28);
        org.joda.time.MonthDay monthDay31 = monthDay28.minusMonths((int) (byte) 100);
        org.joda.time.MonthDay monthDay33 = monthDay31.plusMonths(1);
        org.joda.time.MonthDay monthDay35 = org.joda.time.MonthDay.parse("");
        org.joda.time.MonthDay monthDay37 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.MonthDay monthDay39 = monthDay37.withChronologyRetainFields(chronology38);
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = monthDay37.getFieldType((int) (byte) 1);
        boolean boolean42 = monthDay35.isSupported(dateTimeFieldType41);
        boolean boolean43 = monthDay31.isSupported(dateTimeFieldType41);
        boolean boolean44 = monthDay6.isAfter((org.joda.time.ReadablePartial) monthDay31);
        org.joda.time.MonthDay monthDay46 = monthDay31.minusMonths((int) (byte) 100);
        java.util.Locale locale48 = null;
        java.lang.String str49 = monthDay46.toString("--09-02", locale48);
        org.joda.time.MonthDay monthDay51 = new org.joda.time.MonthDay((long) (short) 1);
        org.joda.time.MonthDay monthDay53 = monthDay51.withDayOfMonth(1);
        java.lang.Class<?> wildcardClass54 = monthDay53.getClass();
        org.joda.time.MonthDay monthDay56 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.MonthDay monthDay58 = monthDay56.withChronologyRetainFields(chronology57);
        org.joda.time.DateTimeFieldType dateTimeFieldType60 = monthDay56.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property61 = monthDay56.dayOfMonth();
        org.joda.time.MonthDay monthDay63 = property61.addWrapFieldToCopy(1);
        org.joda.time.MonthDay monthDay65 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.MonthDay monthDay67 = monthDay65.withChronologyRetainFields(chronology66);
        org.joda.time.DateTimeFieldType dateTimeFieldType69 = monthDay65.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod70 = null;
        org.joda.time.MonthDay monthDay71 = monthDay65.plus(readablePeriod70);
        org.joda.time.MonthDay monthDay73 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology74 = null;
        org.joda.time.MonthDay monthDay75 = monthDay73.withChronologyRetainFields(chronology74);
        org.joda.time.MonthDay monthDay77 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology78 = null;
        org.joda.time.MonthDay monthDay79 = monthDay77.withChronologyRetainFields(chronology78);
        org.joda.time.DateTimeFieldType dateTimeFieldType81 = monthDay77.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property82 = monthDay75.property(dateTimeFieldType81);
        int int83 = property82.get();
        org.joda.time.MonthDay monthDay85 = property82.addWrapFieldToCopy((int) (short) 1);
        boolean boolean86 = monthDay65.isBefore((org.joda.time.ReadablePartial) monthDay85);
        org.joda.time.Chronology chronology87 = null;
        org.joda.time.MonthDay monthDay88 = monthDay65.withChronologyRetainFields(chronology87);
        org.joda.time.Chronology chronology89 = monthDay88.getChronology();
        org.joda.time.MonthDay monthDay90 = org.joda.time.MonthDay.now(chronology89);
        org.joda.time.MonthDay monthDay91 = new org.joda.time.MonthDay((java.lang.Object) monthDay63, chronology89);
        org.joda.time.MonthDay monthDay92 = new org.joda.time.MonthDay((java.lang.Object) monthDay53, chronology89);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay93 = new org.joda.time.MonthDay((java.lang.Object) str49, chronology89);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"--09-02\"");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay4);
        org.junit.Assert.assertNotNull(monthDay6);
        org.junit.Assert.assertNotNull(monthDay8);
        org.junit.Assert.assertNotNull(monthDay10);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(monthDay18);
        org.junit.Assert.assertNotNull(monthDay20);
        org.junit.Assert.assertNotNull(monthDay22);
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(monthDay28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(monthDay31);
        org.junit.Assert.assertNotNull(monthDay33);
        org.junit.Assert.assertNotNull(monthDay35);
        org.junit.Assert.assertNotNull(monthDay37);
        org.junit.Assert.assertNotNull(monthDay39);
        org.junit.Assert.assertNotNull(dateTimeFieldType41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(monthDay46);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "--09-02" + "'", str49, "--09-02");
        org.junit.Assert.assertNotNull(monthDay53);
        org.junit.Assert.assertNotNull(wildcardClass54);
        org.junit.Assert.assertNotNull(monthDay56);
        org.junit.Assert.assertNotNull(monthDay58);
        org.junit.Assert.assertNotNull(dateTimeFieldType60);
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertNotNull(monthDay63);
        org.junit.Assert.assertNotNull(monthDay65);
        org.junit.Assert.assertNotNull(monthDay67);
        org.junit.Assert.assertNotNull(dateTimeFieldType69);
        org.junit.Assert.assertNotNull(monthDay71);
        org.junit.Assert.assertNotNull(monthDay73);
        org.junit.Assert.assertNotNull(monthDay75);
        org.junit.Assert.assertNotNull(monthDay77);
        org.junit.Assert.assertNotNull(monthDay79);
        org.junit.Assert.assertNotNull(dateTimeFieldType81);
        org.junit.Assert.assertNotNull(property82);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 1 + "'", int83 == 1);
        org.junit.Assert.assertNotNull(monthDay85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertNotNull(monthDay88);
        org.junit.Assert.assertNotNull(chronology89);
        org.junit.Assert.assertNotNull(monthDay90);
    }

    @Test
    public void test0797() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0797");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        java.util.Locale locale11 = null;
        int int12 = property10.getMaximumTextLength(locale11);
        org.joda.time.MonthDay monthDay14 = property10.addWrapFieldToCopy((int) (byte) 0);
        boolean boolean16 = property10.equals((java.lang.Object) 'a');
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay18 = property10.setCopy("January");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"January\" for dayOfMonth is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test0798() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0798");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.MonthDay monthDay4 = monthDay1.withPeriodAdded(readablePeriod2, 1);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.MonthDay monthDay6 = monthDay1.plus(readablePeriod5);
        org.joda.time.MonthDay monthDay8 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MonthDay monthDay10 = monthDay8.withChronologyRetainFields(chronology9);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = monthDay8.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.MonthDay monthDay14 = monthDay8.plus(readablePeriod13);
        org.joda.time.MonthDay monthDay16 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MonthDay monthDay18 = monthDay16.withChronologyRetainFields(chronology17);
        org.joda.time.MonthDay monthDay20 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.MonthDay monthDay22 = monthDay20.withChronologyRetainFields(chronology21);
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = monthDay20.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property25 = monthDay18.property(dateTimeFieldType24);
        int int26 = property25.get();
        org.joda.time.MonthDay monthDay28 = property25.addWrapFieldToCopy((int) (short) 1);
        boolean boolean29 = monthDay8.isBefore((org.joda.time.ReadablePartial) monthDay28);
        org.joda.time.MonthDay monthDay31 = monthDay28.minusMonths((int) (byte) 100);
        org.joda.time.MonthDay monthDay33 = monthDay31.plusMonths(1);
        org.joda.time.MonthDay monthDay35 = org.joda.time.MonthDay.parse("");
        org.joda.time.MonthDay monthDay37 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.MonthDay monthDay39 = monthDay37.withChronologyRetainFields(chronology38);
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = monthDay37.getFieldType((int) (byte) 1);
        boolean boolean42 = monthDay35.isSupported(dateTimeFieldType41);
        boolean boolean43 = monthDay31.isSupported(dateTimeFieldType41);
        boolean boolean44 = monthDay6.isAfter((org.joda.time.ReadablePartial) monthDay31);
        org.joda.time.MonthDay monthDay46 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.MonthDay monthDay48 = monthDay46.withChronologyRetainFields(chronology47);
        org.joda.time.DateTimeFieldType dateTimeFieldType50 = monthDay46.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property51 = monthDay46.dayOfMonth();
        org.joda.time.MonthDay monthDay53 = property51.addWrapFieldToCopy(1);
        org.joda.time.MonthDay monthDay55 = property51.addWrapFieldToCopy(0);
        boolean boolean56 = monthDay31.isAfter((org.joda.time.ReadablePartial) monthDay55);
        org.joda.time.MonthDay monthDay58 = org.joda.time.MonthDay.parse("");
        org.joda.time.MonthDay monthDay60 = monthDay58.minusDays((int) '#');
        org.joda.time.MonthDay monthDay62 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.MonthDay monthDay64 = monthDay62.withChronologyRetainFields(chronology63);
        org.joda.time.DateTimeFieldType dateTimeFieldType66 = monthDay62.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property67 = monthDay62.dayOfMonth();
        org.joda.time.Chronology chronology68 = monthDay62.getChronology();
        org.joda.time.Chronology chronology69 = monthDay62.getChronology();
        org.joda.time.ReadableInstant readableInstant70 = null;
        org.joda.time.DateTime dateTime71 = monthDay62.toDateTime(readableInstant70);
        org.joda.time.MonthDay monthDay73 = monthDay62.plusMonths((int) ' ');
        boolean boolean74 = monthDay58.isAfter((org.joda.time.ReadablePartial) monthDay73);
        int[] intArray75 = monthDay58.getValues();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray76 = monthDay58.getFieldTypes();
        org.joda.time.MonthDay monthDay78 = org.joda.time.MonthDay.parse("--09-02");
        int int79 = monthDay78.size();
        org.joda.time.DateTimeFieldType dateTimeFieldType81 = monthDay78.getFieldType(1);
        boolean boolean82 = monthDay58.isSupported(dateTimeFieldType81);
        int int83 = monthDay55.get(dateTimeFieldType81);
        org.joda.time.MonthDay.Property property84 = monthDay55.monthOfYear();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay4);
        org.junit.Assert.assertNotNull(monthDay6);
        org.junit.Assert.assertNotNull(monthDay8);
        org.junit.Assert.assertNotNull(monthDay10);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(monthDay18);
        org.junit.Assert.assertNotNull(monthDay20);
        org.junit.Assert.assertNotNull(monthDay22);
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(monthDay28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(monthDay31);
        org.junit.Assert.assertNotNull(monthDay33);
        org.junit.Assert.assertNotNull(monthDay35);
        org.junit.Assert.assertNotNull(monthDay37);
        org.junit.Assert.assertNotNull(monthDay39);
        org.junit.Assert.assertNotNull(dateTimeFieldType41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(monthDay46);
        org.junit.Assert.assertNotNull(monthDay48);
        org.junit.Assert.assertNotNull(dateTimeFieldType50);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(monthDay53);
        org.junit.Assert.assertNotNull(monthDay55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(monthDay58);
        org.junit.Assert.assertNotNull(monthDay60);
        org.junit.Assert.assertNotNull(monthDay62);
        org.junit.Assert.assertNotNull(monthDay64);
        org.junit.Assert.assertNotNull(dateTimeFieldType66);
        org.junit.Assert.assertNotNull(property67);
        org.junit.Assert.assertNotNull(chronology68);
        org.junit.Assert.assertNotNull(chronology69);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(monthDay73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[1, 1]");
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray76);
        org.junit.Assert.assertNotNull(monthDay78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 2 + "'", int79 == 2);
        org.junit.Assert.assertNotNull(dateTimeFieldType81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 1 + "'", int83 == 1);
        org.junit.Assert.assertNotNull(property84);
    }

    @Test
    public void test0799() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0799");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay2 = new org.joda.time.MonthDay(0, (int) '#');
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 0 for monthOfYear must not be smaller than 1");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0800() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0800");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        int int11 = property10.get();
        org.joda.time.MonthDay monthDay13 = property10.addWrapFieldToCopy((int) (short) 1);
        org.joda.time.MonthDay monthDay15 = monthDay13.plusDays(2);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray16 = monthDay15.getFieldTypes();
        org.joda.time.MonthDay monthDay18 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MonthDay monthDay20 = monthDay18.withChronologyRetainFields(chronology19);
        org.joda.time.MonthDay monthDay22 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MonthDay monthDay24 = monthDay22.withChronologyRetainFields(chronology23);
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = monthDay22.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property27 = monthDay20.property(dateTimeFieldType26);
        org.joda.time.MonthDay.Property property28 = monthDay20.monthOfYear();
        java.lang.String str29 = property28.getAsShortText();
        int int30 = property28.getMinimumValue();
        java.util.Locale locale32 = null;
        org.joda.time.MonthDay monthDay33 = property28.setCopy("2", locale32);
        org.joda.time.MonthDay monthDay35 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.MonthDay monthDay37 = monthDay35.withChronologyRetainFields(chronology36);
        org.joda.time.MonthDay monthDay39 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.MonthDay monthDay41 = monthDay39.withChronologyRetainFields(chronology40);
        org.joda.time.DateTimeFieldType dateTimeFieldType43 = monthDay39.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property44 = monthDay37.property(dateTimeFieldType43);
        org.joda.time.MonthDay.Property property45 = monthDay37.monthOfYear();
        org.joda.time.DurationField durationField46 = property45.getRangeDurationField();
        org.joda.time.MonthDay monthDay48 = property45.setCopy("1");
        org.joda.time.DateTimeFieldType dateTimeFieldType49 = property45.getFieldType();
        org.joda.time.MonthDay.Property property50 = monthDay33.property(dateTimeFieldType49);
        org.joda.time.MonthDay.Property property51 = monthDay15.property(dateTimeFieldType49);
        org.joda.time.MonthDay monthDay53 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.MonthDay monthDay55 = monthDay53.withChronologyRetainFields(chronology54);
        org.joda.time.DateTimeFieldType dateTimeFieldType57 = monthDay53.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod58 = null;
        org.joda.time.MonthDay monthDay59 = monthDay53.plus(readablePeriod58);
        org.joda.time.MonthDay monthDay61 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.MonthDay monthDay63 = monthDay61.withChronologyRetainFields(chronology62);
        org.joda.time.MonthDay monthDay65 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.MonthDay monthDay67 = monthDay65.withChronologyRetainFields(chronology66);
        org.joda.time.DateTimeFieldType dateTimeFieldType69 = monthDay65.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property70 = monthDay63.property(dateTimeFieldType69);
        int int71 = property70.get();
        org.joda.time.MonthDay monthDay73 = property70.addWrapFieldToCopy((int) (short) 1);
        boolean boolean74 = monthDay53.isBefore((org.joda.time.ReadablePartial) monthDay73);
        org.joda.time.DateTimeField[] dateTimeFieldArray75 = monthDay53.getFields();
        org.joda.time.ReadablePeriod readablePeriod76 = null;
        org.joda.time.MonthDay monthDay77 = monthDay53.minus(readablePeriod76);
        org.joda.time.ReadablePeriod readablePeriod78 = null;
        org.joda.time.MonthDay monthDay80 = monthDay53.withPeriodAdded(readablePeriod78, (int) (byte) -1);
        org.joda.time.Chronology chronology82 = null;
        org.joda.time.MonthDay monthDay83 = new org.joda.time.MonthDay((long) (short) 100, chronology82);
        org.joda.time.MonthDay monthDay85 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology86 = null;
        org.joda.time.MonthDay monthDay87 = monthDay85.withChronologyRetainFields(chronology86);
        org.joda.time.DateTimeFieldType dateTimeFieldType89 = monthDay85.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property90 = monthDay85.dayOfMonth();
        org.joda.time.Chronology chronology91 = monthDay85.getChronology();
        org.joda.time.Chronology chronology92 = monthDay85.getChronology();
        org.joda.time.ReadableInstant readableInstant93 = null;
        org.joda.time.DateTime dateTime94 = monthDay85.toDateTime(readableInstant93);
        org.joda.time.DateTime dateTime95 = monthDay83.toDateTime(readableInstant93);
        org.joda.time.DateTime dateTime96 = monthDay53.toDateTime((org.joda.time.ReadableInstant) dateTime95);
        org.joda.time.ReadablePeriod readablePeriod97 = null;
        org.joda.time.MonthDay monthDay98 = monthDay53.minus(readablePeriod97);
        boolean boolean99 = monthDay15.isEqual((org.joda.time.ReadablePartial) monthDay53);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray16);
        org.junit.Assert.assertNotNull(monthDay18);
        org.junit.Assert.assertNotNull(monthDay20);
        org.junit.Assert.assertNotNull(monthDay22);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Jan" + "'", str29, "Jan");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(monthDay33);
        org.junit.Assert.assertNotNull(monthDay35);
        org.junit.Assert.assertNotNull(monthDay37);
        org.junit.Assert.assertNotNull(monthDay39);
        org.junit.Assert.assertNotNull(monthDay41);
        org.junit.Assert.assertNotNull(dateTimeFieldType43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(durationField46);
        org.junit.Assert.assertNotNull(monthDay48);
        org.junit.Assert.assertNotNull(dateTimeFieldType49);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(monthDay53);
        org.junit.Assert.assertNotNull(monthDay55);
        org.junit.Assert.assertNotNull(dateTimeFieldType57);
        org.junit.Assert.assertNotNull(monthDay59);
        org.junit.Assert.assertNotNull(monthDay61);
        org.junit.Assert.assertNotNull(monthDay63);
        org.junit.Assert.assertNotNull(monthDay65);
        org.junit.Assert.assertNotNull(monthDay67);
        org.junit.Assert.assertNotNull(dateTimeFieldType69);
        org.junit.Assert.assertNotNull(property70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 1 + "'", int71 == 1);
        org.junit.Assert.assertNotNull(monthDay73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldArray75);
        org.junit.Assert.assertNotNull(monthDay77);
        org.junit.Assert.assertNotNull(monthDay80);
        org.junit.Assert.assertNotNull(monthDay85);
        org.junit.Assert.assertNotNull(monthDay87);
        org.junit.Assert.assertNotNull(dateTimeFieldType89);
        org.junit.Assert.assertNotNull(property90);
        org.junit.Assert.assertNotNull(chronology91);
        org.junit.Assert.assertNotNull(chronology92);
        org.junit.Assert.assertNotNull(dateTime94);
        org.junit.Assert.assertNotNull(dateTime95);
        org.junit.Assert.assertNotNull(dateTime96);
        org.junit.Assert.assertNotNull(monthDay98);
        org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + false + "'", boolean99 == false);
    }

    @Test
    public void test0801() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0801");
        org.joda.time.MonthDay monthDay2 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MonthDay monthDay4 = monthDay2.withChronologyRetainFields(chronology3);
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = monthDay2.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property7 = monthDay2.dayOfMonth();
        org.joda.time.Chronology chronology8 = monthDay2.getChronology();
        org.joda.time.MonthDay monthDay9 = new org.joda.time.MonthDay((-1L), chronology8);
        org.joda.time.MonthDay monthDay10 = new org.joda.time.MonthDay((java.lang.Object) monthDay9);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray11 = monthDay9.getFieldTypes();
        org.joda.time.MonthDay monthDay13 = monthDay9.plusDays((int) '#');
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.MonthDay monthDay15 = monthDay13.minus(readablePeriod14);
        org.junit.Assert.assertNotNull(monthDay2);
        org.junit.Assert.assertNotNull(monthDay4);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray11);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
    }

    @Test
    public void test0802() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0802");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        org.joda.time.MonthDay.Property property11 = monthDay3.monthOfYear();
        int int12 = monthDay3.getDayOfMonth();
        org.joda.time.MonthDay.Property property13 = monthDay3.dayOfMonth();
        int int14 = monthDay3.getDayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.MonthDay monthDay16 = monthDay3.plus(readablePeriod15);
        org.joda.time.MonthDay monthDay18 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MonthDay monthDay20 = monthDay18.withChronologyRetainFields(chronology19);
        org.joda.time.MonthDay monthDay22 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MonthDay monthDay24 = monthDay22.withChronologyRetainFields(chronology23);
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = monthDay22.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property27 = monthDay20.property(dateTimeFieldType26);
        org.joda.time.MonthDay.Property property28 = monthDay20.monthOfYear();
        int int29 = monthDay20.getDayOfMonth();
        org.joda.time.MonthDay.Property property30 = monthDay20.dayOfMonth();
        int int31 = monthDay20.getDayOfMonth();
        org.joda.time.MonthDay monthDay33 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MonthDay monthDay35 = monthDay33.withChronologyRetainFields(chronology34);
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = monthDay33.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property38 = monthDay33.dayOfMonth();
        org.joda.time.Chronology chronology39 = monthDay33.getChronology();
        org.joda.time.MonthDay monthDay40 = monthDay20.withChronologyRetainFields(chronology39);
        org.joda.time.MonthDay monthDay41 = monthDay16.withChronologyRetainFields(chronology39);
        org.joda.time.MonthDay monthDay43 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.MonthDay monthDay45 = monthDay43.withChronologyRetainFields(chronology44);
        org.joda.time.MonthDay monthDay47 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.MonthDay monthDay49 = monthDay47.withChronologyRetainFields(chronology48);
        org.joda.time.DateTimeFieldType dateTimeFieldType51 = monthDay47.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property52 = monthDay45.property(dateTimeFieldType51);
        org.joda.time.MonthDay.Property property53 = monthDay45.monthOfYear();
        int int54 = monthDay45.getDayOfMonth();
        org.joda.time.MonthDay.Property property55 = monthDay45.dayOfMonth();
        int int56 = monthDay45.getDayOfMonth();
        org.joda.time.MonthDay monthDay58 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.MonthDay monthDay60 = monthDay58.withChronologyRetainFields(chronology59);
        org.joda.time.DateTimeFieldType dateTimeFieldType62 = monthDay58.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property63 = monthDay58.dayOfMonth();
        org.joda.time.Chronology chronology64 = monthDay58.getChronology();
        org.joda.time.MonthDay monthDay65 = monthDay45.withChronologyRetainFields(chronology64);
        org.joda.time.MonthDay monthDay66 = new org.joda.time.MonthDay((java.lang.Object) monthDay16, chronology64);
        org.joda.time.DurationFieldType durationFieldType67 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay69 = monthDay66.withFieldAdded(durationFieldType67, 28);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(monthDay18);
        org.junit.Assert.assertNotNull(monthDay20);
        org.junit.Assert.assertNotNull(monthDay22);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertNotNull(monthDay33);
        org.junit.Assert.assertNotNull(monthDay35);
        org.junit.Assert.assertNotNull(dateTimeFieldType37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(monthDay40);
        org.junit.Assert.assertNotNull(monthDay41);
        org.junit.Assert.assertNotNull(monthDay43);
        org.junit.Assert.assertNotNull(monthDay45);
        org.junit.Assert.assertNotNull(monthDay47);
        org.junit.Assert.assertNotNull(monthDay49);
        org.junit.Assert.assertNotNull(dateTimeFieldType51);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertNotNull(monthDay58);
        org.junit.Assert.assertNotNull(monthDay60);
        org.junit.Assert.assertNotNull(dateTimeFieldType62);
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertNotNull(chronology64);
        org.junit.Assert.assertNotNull(monthDay65);
    }

    @Test
    public void test0803() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0803");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        org.joda.time.MonthDay.Property property11 = monthDay3.monthOfYear();
        int int12 = monthDay3.getDayOfMonth();
        org.joda.time.MonthDay.Property property13 = monthDay3.dayOfMonth();
        int int14 = monthDay3.getDayOfMonth();
        org.joda.time.MonthDay monthDay16 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MonthDay monthDay18 = monthDay16.withChronologyRetainFields(chronology17);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = monthDay16.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property21 = monthDay16.dayOfMonth();
        org.joda.time.Chronology chronology22 = monthDay16.getChronology();
        org.joda.time.MonthDay monthDay23 = monthDay3.withChronologyRetainFields(chronology22);
        org.joda.time.MonthDay monthDay24 = new org.joda.time.MonthDay(chronology22);
        org.joda.time.MonthDay monthDay25 = new org.joda.time.MonthDay(chronology22);
        java.util.Locale locale27 = null;
        java.lang.String str28 = monthDay25.toString("--01-09", locale27);
        java.lang.String str30 = monthDay25.toString("--08-02");
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(monthDay18);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(monthDay23);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "--01-09" + "'", str28, "--01-09");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "--08-02" + "'", str30, "--08-02");
    }

    @Test
    public void test0804() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0804");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        int int11 = property10.get();
        org.joda.time.MonthDay monthDay13 = property10.addWrapFieldToCopy((int) (short) 1);
        java.lang.String str14 = property10.getAsString();
        java.lang.String str15 = property10.getAsText();
        org.joda.time.MonthDay monthDay17 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.MonthDay monthDay19 = monthDay17.withChronologyRetainFields(chronology18);
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = monthDay17.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property22 = monthDay17.dayOfMonth();
        org.joda.time.Chronology chronology23 = monthDay17.getChronology();
        org.joda.time.Chronology chronology24 = monthDay17.getChronology();
        org.joda.time.MonthDay monthDay25 = org.joda.time.MonthDay.now(chronology24);
        org.joda.time.MonthDay monthDay26 = org.joda.time.MonthDay.now(chronology24);
        boolean boolean27 = property10.equals((java.lang.Object) monthDay26);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray28 = monthDay26.getFieldTypes();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter29 = null;
        java.lang.String str30 = monthDay26.toString(dateTimeFormatter29);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "1" + "'", str14, "1");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "1" + "'", str15, "1");
        org.junit.Assert.assertNotNull(monthDay17);
        org.junit.Assert.assertNotNull(monthDay19);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(monthDay25);
        org.junit.Assert.assertNotNull(monthDay26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray28);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "--11-25" + "'", str30, "--11-25");
    }

    @Test
    public void test0805() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0805");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay1.plus(readablePeriod6);
        org.joda.time.MonthDay monthDay9 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MonthDay monthDay11 = monthDay9.withChronologyRetainFields(chronology10);
        org.joda.time.MonthDay monthDay13 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MonthDay monthDay15 = monthDay13.withChronologyRetainFields(chronology14);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = monthDay13.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property18 = monthDay11.property(dateTimeFieldType17);
        int int19 = property18.get();
        org.joda.time.MonthDay monthDay21 = property18.addWrapFieldToCopy((int) (short) 1);
        boolean boolean22 = monthDay1.isBefore((org.joda.time.ReadablePartial) monthDay21);
        org.joda.time.MonthDay monthDay24 = monthDay21.minusMonths((int) (byte) 100);
        org.joda.time.MonthDay monthDay26 = monthDay24.plusMonths(1);
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.MonthDay monthDay28 = monthDay24.minus(readablePeriod27);
        org.joda.time.MonthDay monthDay30 = org.joda.time.MonthDay.parse("");
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        org.joda.time.MonthDay monthDay33 = monthDay30.withPeriodAdded(readablePeriod31, 1);
        org.joda.time.MonthDay monthDay35 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.MonthDay monthDay37 = monthDay35.withChronologyRetainFields(chronology36);
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = monthDay35.getFieldType((int) (byte) 1);
        int int40 = monthDay33.indexOf(dateTimeFieldType39);
        org.joda.time.MonthDay.Property property41 = monthDay28.property(dateTimeFieldType39);
        java.util.Locale locale42 = null;
        int int43 = property41.getMaximumShortTextLength(locale42);
        java.lang.String str44 = property41.getAsShortText();
        java.util.Locale locale45 = null;
        int int46 = property41.getMaximumTextLength(locale45);
        int int47 = property41.getMaximumValueOverall();
        java.lang.String str48 = property41.getAsText();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay50 = property41.setCopy("--09-02");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"--09-02\" for dayOfMonth is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(monthDay9);
        org.junit.Assert.assertNotNull(monthDay11);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertNotNull(monthDay26);
        org.junit.Assert.assertNotNull(monthDay28);
        org.junit.Assert.assertNotNull(monthDay30);
        org.junit.Assert.assertNotNull(monthDay33);
        org.junit.Assert.assertNotNull(monthDay35);
        org.junit.Assert.assertNotNull(monthDay37);
        org.junit.Assert.assertNotNull(dateTimeFieldType39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2 + "'", int43 == 2);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "2" + "'", str44, "2");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2 + "'", int46 == 2);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 31 + "'", int47 == 31);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "2" + "'", str48, "2");
    }

    @Test
    public void test0806() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0806");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        org.joda.time.MonthDay.Property property11 = monthDay3.monthOfYear();
        org.joda.time.DurationField durationField12 = property11.getRangeDurationField();
        org.joda.time.MonthDay monthDay14 = property11.setCopy("1");
        org.joda.time.MonthDay monthDay17 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.MonthDay monthDay19 = monthDay17.withChronologyRetainFields(chronology18);
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = monthDay17.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property22 = monthDay17.dayOfMonth();
        org.joda.time.Chronology chronology23 = monthDay17.getChronology();
        org.joda.time.MonthDay monthDay24 = new org.joda.time.MonthDay((-1L), chronology23);
        boolean boolean25 = monthDay14.isBefore((org.joda.time.ReadablePartial) monthDay24);
        org.joda.time.MonthDay monthDay27 = org.joda.time.MonthDay.parse("");
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.MonthDay monthDay30 = monthDay27.withPeriodAdded(readablePeriod28, 1);
        org.joda.time.MonthDay monthDay32 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.MonthDay monthDay34 = monthDay32.withChronologyRetainFields(chronology33);
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = monthDay32.getFieldType((int) (byte) 1);
        int int37 = monthDay30.indexOf(dateTimeFieldType36);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.MonthDay monthDay39 = monthDay30.withChronologyRetainFields(chronology38);
        org.joda.time.MonthDay monthDay41 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.MonthDay monthDay43 = monthDay41.withChronologyRetainFields(chronology42);
        org.joda.time.DateTimeFieldType dateTimeFieldType45 = monthDay41.getFieldType((int) (byte) 1);
        int int46 = monthDay30.get(dateTimeFieldType45);
        boolean boolean47 = monthDay14.equals((java.lang.Object) int46);
        org.joda.time.MonthDay monthDay49 = new org.joda.time.MonthDay(10L);
        int[] intArray50 = monthDay49.getValues();
        org.joda.time.ReadablePeriod readablePeriod51 = null;
        org.joda.time.MonthDay monthDay52 = monthDay49.plus(readablePeriod51);
        org.joda.time.DateTimeZone dateTimeZone53 = null;
        org.joda.time.MonthDay monthDay54 = new org.joda.time.MonthDay(dateTimeZone53);
        org.joda.time.MonthDay monthDay56 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.MonthDay monthDay58 = monthDay56.withChronologyRetainFields(chronology57);
        org.joda.time.MonthDay monthDay60 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.MonthDay monthDay62 = monthDay60.withChronologyRetainFields(chronology61);
        org.joda.time.DateTimeFieldType dateTimeFieldType64 = monthDay60.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property65 = monthDay58.property(dateTimeFieldType64);
        int int66 = property65.get();
        int int67 = property65.getMaximumValue();
        org.joda.time.MonthDay monthDay69 = property65.setCopy((int) (short) 1);
        org.joda.time.MonthDay monthDay71 = org.joda.time.MonthDay.parse("");
        org.joda.time.ReadablePeriod readablePeriod72 = null;
        org.joda.time.MonthDay monthDay74 = monthDay71.withPeriodAdded(readablePeriod72, 1);
        org.joda.time.MonthDay monthDay76 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology77 = null;
        org.joda.time.MonthDay monthDay78 = monthDay76.withChronologyRetainFields(chronology77);
        org.joda.time.DateTimeFieldType dateTimeFieldType80 = monthDay76.getFieldType((int) (byte) 1);
        int int81 = monthDay74.indexOf(dateTimeFieldType80);
        boolean boolean82 = monthDay69.isSupported(dateTimeFieldType80);
        int int83 = monthDay54.get(dateTimeFieldType80);
        org.joda.time.MonthDay monthDay85 = monthDay52.withField(dateTimeFieldType80, (int) (byte) 10);
        boolean boolean86 = monthDay14.isEqual((org.joda.time.ReadablePartial) monthDay85);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertNotNull(monthDay17);
        org.junit.Assert.assertNotNull(monthDay19);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(monthDay27);
        org.junit.Assert.assertNotNull(monthDay30);
        org.junit.Assert.assertNotNull(monthDay32);
        org.junit.Assert.assertNotNull(monthDay34);
        org.junit.Assert.assertNotNull(dateTimeFieldType36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(monthDay39);
        org.junit.Assert.assertNotNull(monthDay41);
        org.junit.Assert.assertNotNull(monthDay43);
        org.junit.Assert.assertNotNull(dateTimeFieldType45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[1, 1]");
        org.junit.Assert.assertNotNull(monthDay52);
        org.junit.Assert.assertNotNull(monthDay56);
        org.junit.Assert.assertNotNull(monthDay58);
        org.junit.Assert.assertNotNull(monthDay60);
        org.junit.Assert.assertNotNull(monthDay62);
        org.junit.Assert.assertNotNull(dateTimeFieldType64);
        org.junit.Assert.assertNotNull(property65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1 + "'", int66 == 1);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 31 + "'", int67 == 31);
        org.junit.Assert.assertNotNull(monthDay69);
        org.junit.Assert.assertNotNull(monthDay71);
        org.junit.Assert.assertNotNull(monthDay74);
        org.junit.Assert.assertNotNull(monthDay76);
        org.junit.Assert.assertNotNull(monthDay78);
        org.junit.Assert.assertNotNull(dateTimeFieldType80);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 1 + "'", int81 == 1);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 25 + "'", int83 == 25);
        org.junit.Assert.assertNotNull(monthDay85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
    }

    @Test
    public void test0807() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0807");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        int int11 = property10.get();
        org.joda.time.MonthDay monthDay13 = property10.addWrapFieldToCopy((int) (short) 1);
        org.joda.time.MonthDay monthDay15 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MonthDay monthDay17 = monthDay15.withChronologyRetainFields(chronology16);
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = monthDay15.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.MonthDay monthDay21 = monthDay15.plus(readablePeriod20);
        org.joda.time.MonthDay monthDay23 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MonthDay monthDay25 = monthDay23.withChronologyRetainFields(chronology24);
        org.joda.time.MonthDay monthDay27 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MonthDay monthDay29 = monthDay27.withChronologyRetainFields(chronology28);
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = monthDay27.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property32 = monthDay25.property(dateTimeFieldType31);
        int int33 = property32.get();
        org.joda.time.MonthDay monthDay35 = property32.addWrapFieldToCopy((int) (short) 1);
        boolean boolean36 = monthDay15.isBefore((org.joda.time.ReadablePartial) monthDay35);
        org.joda.time.MonthDay monthDay38 = monthDay35.minusMonths((int) (byte) 100);
        org.joda.time.MonthDay monthDay40 = monthDay38.plusMonths(1);
        org.joda.time.ReadablePeriod readablePeriod41 = null;
        org.joda.time.MonthDay monthDay42 = monthDay38.minus(readablePeriod41);
        int int43 = monthDay13.compareTo((org.joda.time.ReadablePartial) monthDay38);
        org.joda.time.MonthDay monthDay45 = monthDay38.withMonthOfYear((int) (short) 1);
        org.joda.time.MonthDay monthDay47 = monthDay45.plusMonths((int) '4');
        org.joda.time.ReadablePeriod readablePeriod48 = null;
        org.joda.time.MonthDay monthDay49 = monthDay45.plus(readablePeriod48);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(monthDay17);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertNotNull(monthDay23);
        org.junit.Assert.assertNotNull(monthDay25);
        org.junit.Assert.assertNotNull(monthDay27);
        org.junit.Assert.assertNotNull(monthDay29);
        org.junit.Assert.assertNotNull(dateTimeFieldType31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(monthDay35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(monthDay38);
        org.junit.Assert.assertNotNull(monthDay40);
        org.junit.Assert.assertNotNull(monthDay42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertNotNull(monthDay45);
        org.junit.Assert.assertNotNull(monthDay47);
        org.junit.Assert.assertNotNull(monthDay49);
    }

    @Test
    public void test0808() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0808");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.MonthDay monthDay3 = monthDay1.minusDays((int) '#');
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray4 = monthDay1.getFieldTypes();
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.MonthDay monthDay6 = monthDay1.plus(readablePeriod5);
        org.joda.time.MonthDay monthDay8 = monthDay6.plusMonths((-1));
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray4);
        org.junit.Assert.assertNotNull(monthDay6);
        org.junit.Assert.assertNotNull(monthDay8);
    }

    @Test
    public void test0809() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0809");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        int int11 = property10.get();
        org.joda.time.MonthDay monthDay13 = property10.addWrapFieldToCopy((int) (short) 1);
        org.joda.time.MonthDay.Property property14 = monthDay13.dayOfMonth();
        int int15 = property14.getMaximumValue();
        org.joda.time.DurationField durationField16 = property14.getDurationField();
        org.joda.time.MonthDay monthDay18 = property14.addWrapFieldToCopy((int) (byte) -1);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 31 + "'", int15 == 31);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(monthDay18);
    }

    @Test
    public void test0810() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0810");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property6 = monthDay1.dayOfMonth();
        org.joda.time.Chronology chronology7 = monthDay1.getChronology();
        org.joda.time.Chronology chronology8 = monthDay1.getChronology();
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.DateTime dateTime10 = monthDay1.toDateTime(readableInstant9);
        org.joda.time.MonthDay monthDay12 = monthDay1.plusMonths(0);
        org.joda.time.MonthDay monthDay14 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MonthDay monthDay16 = monthDay14.withChronologyRetainFields(chronology15);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = monthDay14.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.MonthDay monthDay20 = monthDay14.plus(readablePeriod19);
        org.joda.time.MonthDay monthDay22 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MonthDay monthDay24 = monthDay22.withChronologyRetainFields(chronology23);
        org.joda.time.MonthDay monthDay26 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.MonthDay monthDay28 = monthDay26.withChronologyRetainFields(chronology27);
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = monthDay26.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property31 = monthDay24.property(dateTimeFieldType30);
        int int32 = property31.get();
        org.joda.time.MonthDay monthDay34 = property31.addWrapFieldToCopy((int) (short) 1);
        boolean boolean35 = monthDay14.isBefore((org.joda.time.ReadablePartial) monthDay34);
        org.joda.time.DateTimeField[] dateTimeFieldArray36 = monthDay14.getFields();
        org.joda.time.ReadablePeriod readablePeriod37 = null;
        org.joda.time.MonthDay monthDay38 = monthDay14.minus(readablePeriod37);
        boolean boolean39 = monthDay1.equals((java.lang.Object) monthDay38);
        org.joda.time.MonthDay monthDay41 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.MonthDay monthDay43 = monthDay41.withChronologyRetainFields(chronology42);
        org.joda.time.MonthDay monthDay45 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.MonthDay monthDay47 = monthDay45.withChronologyRetainFields(chronology46);
        org.joda.time.DateTimeFieldType dateTimeFieldType49 = monthDay45.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property50 = monthDay43.property(dateTimeFieldType49);
        java.util.Locale locale51 = null;
        int int52 = property50.getMaximumTextLength(locale51);
        org.joda.time.MonthDay monthDay54 = property50.addWrapFieldToCopy((int) (byte) 0);
        org.joda.time.MonthDay monthDay55 = new org.joda.time.MonthDay((java.lang.Object) monthDay54);
        boolean boolean56 = monthDay38.isAfter((org.joda.time.ReadablePartial) monthDay55);
        java.lang.String str57 = monthDay38.toString();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(monthDay12);
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(monthDay20);
        org.junit.Assert.assertNotNull(monthDay22);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertNotNull(monthDay26);
        org.junit.Assert.assertNotNull(monthDay28);
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(monthDay34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldArray36);
        org.junit.Assert.assertNotNull(monthDay38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(monthDay41);
        org.junit.Assert.assertNotNull(monthDay43);
        org.junit.Assert.assertNotNull(monthDay45);
        org.junit.Assert.assertNotNull(monthDay47);
        org.junit.Assert.assertNotNull(dateTimeFieldType49);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 2 + "'", int52 == 2);
        org.junit.Assert.assertNotNull(monthDay54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "--01-01" + "'", str57, "--01-01");
    }

    @Test
    public void test0811() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0811");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay1.plus(readablePeriod6);
        org.joda.time.MonthDay monthDay9 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MonthDay monthDay11 = monthDay9.withChronologyRetainFields(chronology10);
        org.joda.time.MonthDay monthDay13 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MonthDay monthDay15 = monthDay13.withChronologyRetainFields(chronology14);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = monthDay13.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property18 = monthDay11.property(dateTimeFieldType17);
        int int19 = property18.get();
        org.joda.time.MonthDay monthDay21 = property18.addWrapFieldToCopy((int) (short) 1);
        boolean boolean22 = monthDay1.isBefore((org.joda.time.ReadablePartial) monthDay21);
        org.joda.time.MonthDay monthDay24 = monthDay21.minusMonths((int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField26 = monthDay21.getField(1);
        org.joda.time.MonthDay monthDay27 = new org.joda.time.MonthDay((java.lang.Object) monthDay21);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.MonthDay monthDay29 = monthDay27.plus(readablePeriod28);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(monthDay9);
        org.junit.Assert.assertNotNull(monthDay11);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(monthDay29);
    }

    @Test
    public void test0812() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0812");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        java.util.Locale locale11 = null;
        int int12 = property10.getMaximumTextLength(locale11);
        org.joda.time.MonthDay monthDay14 = property10.addWrapFieldToCopy((int) (byte) 0);
        org.joda.time.MonthDay monthDay15 = new org.joda.time.MonthDay((java.lang.Object) monthDay14);
        org.joda.time.MonthDay monthDay17 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.MonthDay monthDay19 = monthDay17.withChronologyRetainFields(chronology18);
        org.joda.time.MonthDay monthDay21 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.MonthDay monthDay23 = monthDay21.withChronologyRetainFields(chronology22);
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = monthDay21.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property26 = monthDay19.property(dateTimeFieldType25);
        org.joda.time.MonthDay.Property property27 = monthDay19.monthOfYear();
        int int28 = monthDay19.getDayOfMonth();
        org.joda.time.MonthDay.Property property29 = monthDay19.dayOfMonth();
        int int30 = monthDay19.getDayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        org.joda.time.MonthDay monthDay32 = monthDay19.plus(readablePeriod31);
        org.joda.time.MonthDay monthDay34 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.MonthDay monthDay36 = monthDay34.withChronologyRetainFields(chronology35);
        org.joda.time.MonthDay monthDay38 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.MonthDay monthDay40 = monthDay38.withChronologyRetainFields(chronology39);
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = monthDay38.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property43 = monthDay36.property(dateTimeFieldType42);
        org.joda.time.MonthDay.Property property44 = monthDay36.monthOfYear();
        int int45 = monthDay36.getDayOfMonth();
        org.joda.time.MonthDay.Property property46 = monthDay36.dayOfMonth();
        int int47 = monthDay36.getDayOfMonth();
        org.joda.time.MonthDay monthDay49 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.MonthDay monthDay51 = monthDay49.withChronologyRetainFields(chronology50);
        org.joda.time.DateTimeFieldType dateTimeFieldType53 = monthDay49.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property54 = monthDay49.dayOfMonth();
        org.joda.time.Chronology chronology55 = monthDay49.getChronology();
        org.joda.time.MonthDay monthDay56 = monthDay36.withChronologyRetainFields(chronology55);
        org.joda.time.MonthDay monthDay57 = monthDay32.withChronologyRetainFields(chronology55);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter58 = null;
        java.lang.String str59 = monthDay32.toString(dateTimeFormatter58);
        boolean boolean60 = monthDay15.isBefore((org.joda.time.ReadablePartial) monthDay32);
        org.joda.time.MonthDay monthDay62 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.MonthDay monthDay64 = monthDay62.withChronologyRetainFields(chronology63);
        org.joda.time.DateTimeFieldType dateTimeFieldType66 = monthDay62.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod67 = null;
        org.joda.time.MonthDay monthDay68 = monthDay62.plus(readablePeriod67);
        org.joda.time.MonthDay monthDay70 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology71 = null;
        org.joda.time.MonthDay monthDay72 = monthDay70.withChronologyRetainFields(chronology71);
        org.joda.time.MonthDay monthDay74 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology75 = null;
        org.joda.time.MonthDay monthDay76 = monthDay74.withChronologyRetainFields(chronology75);
        org.joda.time.DateTimeFieldType dateTimeFieldType78 = monthDay74.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property79 = monthDay72.property(dateTimeFieldType78);
        int int80 = property79.get();
        org.joda.time.MonthDay monthDay82 = property79.addWrapFieldToCopy((int) (short) 1);
        boolean boolean83 = monthDay62.isBefore((org.joda.time.ReadablePartial) monthDay82);
        org.joda.time.MonthDay monthDay85 = monthDay82.minusMonths((int) (byte) 100);
        org.joda.time.MonthDay monthDay87 = monthDay85.plusMonths(1);
        org.joda.time.ReadablePeriod readablePeriod88 = null;
        org.joda.time.MonthDay monthDay89 = monthDay85.minus(readablePeriod88);
        int int90 = monthDay15.compareTo((org.joda.time.ReadablePartial) monthDay85);
        int[] intArray91 = monthDay15.getValues();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertNotNull(monthDay17);
        org.junit.Assert.assertNotNull(monthDay19);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertNotNull(monthDay23);
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(monthDay32);
        org.junit.Assert.assertNotNull(monthDay34);
        org.junit.Assert.assertNotNull(monthDay36);
        org.junit.Assert.assertNotNull(monthDay38);
        org.junit.Assert.assertNotNull(monthDay40);
        org.junit.Assert.assertNotNull(dateTimeFieldType42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(monthDay49);
        org.junit.Assert.assertNotNull(monthDay51);
        org.junit.Assert.assertNotNull(dateTimeFieldType53);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertNotNull(monthDay56);
        org.junit.Assert.assertNotNull(monthDay57);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "--01-01" + "'", str59, "--01-01");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(monthDay62);
        org.junit.Assert.assertNotNull(monthDay64);
        org.junit.Assert.assertNotNull(dateTimeFieldType66);
        org.junit.Assert.assertNotNull(monthDay68);
        org.junit.Assert.assertNotNull(monthDay70);
        org.junit.Assert.assertNotNull(monthDay72);
        org.junit.Assert.assertNotNull(monthDay74);
        org.junit.Assert.assertNotNull(monthDay76);
        org.junit.Assert.assertNotNull(dateTimeFieldType78);
        org.junit.Assert.assertNotNull(property79);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 1 + "'", int80 == 1);
        org.junit.Assert.assertNotNull(monthDay82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertNotNull(monthDay85);
        org.junit.Assert.assertNotNull(monthDay87);
        org.junit.Assert.assertNotNull(monthDay89);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + (-1) + "'", int90 == (-1));
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[1, 1]");
    }

    @Test
    public void test0813() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0813");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        int int11 = property10.get();
        org.joda.time.DurationField durationField12 = property10.getDurationField();
        org.joda.time.MonthDay monthDay14 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MonthDay monthDay16 = monthDay14.withChronologyRetainFields(chronology15);
        org.joda.time.MonthDay monthDay18 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MonthDay monthDay20 = monthDay18.withChronologyRetainFields(chronology19);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = monthDay18.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property23 = monthDay16.property(dateTimeFieldType22);
        boolean boolean24 = property10.equals((java.lang.Object) monthDay16);
        java.lang.String str25 = property10.getAsShortText();
        java.lang.String str26 = property10.toString();
        java.util.Locale locale27 = null;
        int int28 = property10.getMaximumShortTextLength(locale27);
        int int29 = property10.getMinimumValueOverall();
        java.lang.String str30 = property10.getAsString();
        java.util.Locale locale31 = null;
        java.lang.String str32 = property10.getAsShortText(locale31);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(monthDay18);
        org.junit.Assert.assertNotNull(monthDay20);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "1" + "'", str25, "1");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Property[dayOfMonth]" + "'", str26, "Property[dayOfMonth]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "1" + "'", str30, "1");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "1" + "'", str32, "1");
    }

    @Test
    public void test0814() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0814");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        int int11 = property10.get();
        org.joda.time.DurationField durationField12 = property10.getDurationField();
        org.joda.time.MonthDay monthDay14 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MonthDay monthDay16 = monthDay14.withChronologyRetainFields(chronology15);
        org.joda.time.MonthDay monthDay18 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MonthDay monthDay20 = monthDay18.withChronologyRetainFields(chronology19);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = monthDay18.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property23 = monthDay16.property(dateTimeFieldType22);
        boolean boolean24 = property10.equals((java.lang.Object) monthDay16);
        java.lang.String str25 = property10.getAsShortText();
        java.lang.String str26 = property10.toString();
        java.util.Locale locale27 = null;
        int int28 = property10.getMaximumShortTextLength(locale27);
        java.lang.String str29 = property10.getName();
        org.joda.time.MonthDay monthDay31 = property10.addToCopy((int) (byte) 0);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(monthDay18);
        org.junit.Assert.assertNotNull(monthDay20);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "1" + "'", str25, "1");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Property[dayOfMonth]" + "'", str26, "Property[dayOfMonth]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "dayOfMonth" + "'", str29, "dayOfMonth");
        org.junit.Assert.assertNotNull(monthDay31);
    }

    @Test
    public void test0815() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0815");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay2 = new org.joda.time.MonthDay((int) (short) 10, 100);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 100 for dayOfMonth must not be larger than 31");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0816() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0816");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay1.plus(readablePeriod6);
        org.joda.time.MonthDay monthDay9 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MonthDay monthDay11 = monthDay9.withChronologyRetainFields(chronology10);
        org.joda.time.MonthDay monthDay13 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MonthDay monthDay15 = monthDay13.withChronologyRetainFields(chronology14);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = monthDay13.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property18 = monthDay11.property(dateTimeFieldType17);
        int int19 = property18.get();
        org.joda.time.MonthDay monthDay21 = property18.addWrapFieldToCopy((int) (short) 1);
        boolean boolean22 = monthDay1.isBefore((org.joda.time.ReadablePartial) monthDay21);
        org.joda.time.MonthDay monthDay24 = monthDay21.minusMonths((int) (byte) 100);
        org.joda.time.MonthDay monthDay26 = monthDay24.minusDays(31);
        org.joda.time.MonthDay monthDay28 = monthDay26.plusDays((int) (byte) 10);
        org.joda.time.MonthDay monthDay30 = monthDay26.minusDays(0);
        org.joda.time.MonthDay monthDay32 = monthDay30.plusDays(0);
        int int33 = monthDay30.getDayOfMonth();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray34 = monthDay30.getFieldTypes();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(monthDay9);
        org.junit.Assert.assertNotNull(monthDay11);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertNotNull(monthDay26);
        org.junit.Assert.assertNotNull(monthDay28);
        org.junit.Assert.assertNotNull(monthDay30);
        org.junit.Assert.assertNotNull(monthDay32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2 + "'", int33 == 2);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray34);
    }

    @Test
    public void test0817() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0817");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.MonthDay monthDay4 = monthDay1.withPeriodAdded(readablePeriod2, 1);
        org.joda.time.MonthDay monthDay6 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MonthDay monthDay8 = monthDay6.withChronologyRetainFields(chronology7);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = monthDay6.getFieldType((int) (byte) 1);
        int int11 = monthDay4.indexOf(dateTimeFieldType10);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MonthDay monthDay13 = monthDay4.withChronologyRetainFields(chronology12);
        org.joda.time.MonthDay monthDay15 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MonthDay monthDay17 = monthDay15.withChronologyRetainFields(chronology16);
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = monthDay15.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property20 = monthDay15.dayOfMonth();
        org.joda.time.Chronology chronology21 = monthDay15.getChronology();
        org.joda.time.Chronology chronology22 = monthDay15.getChronology();
        boolean boolean23 = monthDay4.isEqual((org.joda.time.ReadablePartial) monthDay15);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter24 = null;
        java.lang.String str25 = monthDay15.toString(dateTimeFormatter24);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MonthDay monthDay27 = monthDay15.withChronologyRetainFields(chronology26);
        int int28 = monthDay15.getDayOfMonth();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter29 = null;
        java.lang.String str30 = monthDay15.toString(dateTimeFormatter29);
        org.joda.time.MonthDay.Property property31 = monthDay15.dayOfMonth();
        org.joda.time.MonthDay monthDay33 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MonthDay monthDay35 = monthDay33.withChronologyRetainFields(chronology34);
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = monthDay33.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod38 = null;
        org.joda.time.MonthDay monthDay39 = monthDay33.plus(readablePeriod38);
        org.joda.time.MonthDay monthDay41 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.MonthDay monthDay43 = monthDay41.withChronologyRetainFields(chronology42);
        org.joda.time.MonthDay monthDay45 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.MonthDay monthDay47 = monthDay45.withChronologyRetainFields(chronology46);
        org.joda.time.DateTimeFieldType dateTimeFieldType49 = monthDay45.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property50 = monthDay43.property(dateTimeFieldType49);
        int int51 = property50.get();
        org.joda.time.MonthDay monthDay53 = property50.addWrapFieldToCopy((int) (short) 1);
        boolean boolean54 = monthDay33.isBefore((org.joda.time.ReadablePartial) monthDay53);
        org.joda.time.MonthDay monthDay56 = monthDay53.minusMonths((int) (byte) 100);
        org.joda.time.MonthDay monthDay58 = monthDay56.plusMonths(1);
        org.joda.time.MonthDay monthDay60 = org.joda.time.MonthDay.parse("");
        org.joda.time.MonthDay monthDay62 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.MonthDay monthDay64 = monthDay62.withChronologyRetainFields(chronology63);
        org.joda.time.DateTimeFieldType dateTimeFieldType66 = monthDay62.getFieldType((int) (byte) 1);
        boolean boolean67 = monthDay60.isSupported(dateTimeFieldType66);
        boolean boolean68 = monthDay56.isSupported(dateTimeFieldType66);
        org.joda.time.Chronology chronology69 = monthDay56.getChronology();
        int int70 = property31.compareTo((org.joda.time.ReadablePartial) monthDay56);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay4);
        org.junit.Assert.assertNotNull(monthDay6);
        org.junit.Assert.assertNotNull(monthDay8);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(monthDay17);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "--01-01" + "'", str25, "--01-01");
        org.junit.Assert.assertNotNull(monthDay27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "--01-01" + "'", str30, "--01-01");
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(monthDay33);
        org.junit.Assert.assertNotNull(monthDay35);
        org.junit.Assert.assertNotNull(dateTimeFieldType37);
        org.junit.Assert.assertNotNull(monthDay39);
        org.junit.Assert.assertNotNull(monthDay41);
        org.junit.Assert.assertNotNull(monthDay43);
        org.junit.Assert.assertNotNull(monthDay45);
        org.junit.Assert.assertNotNull(monthDay47);
        org.junit.Assert.assertNotNull(dateTimeFieldType49);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertNotNull(monthDay53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(monthDay56);
        org.junit.Assert.assertNotNull(monthDay58);
        org.junit.Assert.assertNotNull(monthDay60);
        org.junit.Assert.assertNotNull(monthDay62);
        org.junit.Assert.assertNotNull(monthDay64);
        org.junit.Assert.assertNotNull(dateTimeFieldType66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(chronology69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-1) + "'", int70 == (-1));
    }

    @Test
    public void test0818() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0818");
        org.joda.time.MonthDay monthDay1 = new org.joda.time.MonthDay(1L);
    }

    @Test
    public void test0819() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0819");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        int int11 = property10.get();
        org.joda.time.MonthDay monthDay13 = property10.addWrapFieldToCopy((int) (short) 1);
        org.joda.time.MonthDay.Property property14 = monthDay13.dayOfMonth();
        int int15 = property14.getMaximumValueOverall();
        int int16 = property14.getMinimumValueOverall();
        org.joda.time.MonthDay monthDay18 = property14.setCopy(31);
        java.util.Locale locale19 = null;
        java.lang.String str20 = property14.getAsShortText(locale19);
        java.lang.String str21 = property14.getAsString();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 31 + "'", int15 == 31);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(monthDay18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "2" + "'", str20, "2");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "2" + "'", str21, "2");
    }

    @Test
    public void test0820() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0820");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        int int11 = property10.get();
        org.joda.time.DurationField durationField12 = property10.getDurationField();
        org.joda.time.MonthDay monthDay14 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MonthDay monthDay16 = monthDay14.withChronologyRetainFields(chronology15);
        org.joda.time.MonthDay monthDay18 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MonthDay monthDay20 = monthDay18.withChronologyRetainFields(chronology19);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = monthDay18.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property23 = monthDay16.property(dateTimeFieldType22);
        boolean boolean24 = property10.equals((java.lang.Object) monthDay16);
        java.lang.String str25 = property10.getAsShortText();
        java.lang.String str26 = property10.toString();
        java.util.Locale locale27 = null;
        int int28 = property10.getMaximumShortTextLength(locale27);
        boolean boolean30 = property10.equals((java.lang.Object) 0.0d);
        java.util.Locale locale31 = null;
        java.lang.String str32 = property10.getAsShortText(locale31);
        int int33 = property10.getMaximumValue();
        org.joda.time.DateTimeField dateTimeField34 = property10.getField();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(monthDay18);
        org.junit.Assert.assertNotNull(monthDay20);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "1" + "'", str25, "1");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Property[dayOfMonth]" + "'", str26, "Property[dayOfMonth]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "1" + "'", str32, "1");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 31 + "'", int33 == 31);
        org.junit.Assert.assertNotNull(dateTimeField34);
    }

    @Test
    public void test0821() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0821");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        org.joda.time.MonthDay.Property property11 = monthDay3.monthOfYear();
        java.util.Locale locale12 = null;
        int int13 = property11.getMaximumTextLength(locale12);
        int int14 = property11.getMaximumValue();
        java.lang.String str15 = property11.getAsShortText();
        org.joda.time.DurationField durationField16 = property11.getDurationField();
        java.lang.String str17 = property11.getAsString();
        int int18 = property11.getMaximumValue();
        org.joda.time.MonthDay monthDay20 = property11.addWrapFieldToCopy(2);
        int int21 = property11.getMinimumValue();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 9 + "'", int13 == 9);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 12 + "'", int14 == 12);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Jan" + "'", str15, "Jan");
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "1" + "'", str17, "1");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 12 + "'", int18 == 12);
        org.junit.Assert.assertNotNull(monthDay20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
    }

    @Test
    public void test0822() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0822");
        org.joda.time.MonthDay monthDay1 = new org.joda.time.MonthDay((long) '4');
    }

    @Test
    public void test0823() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0823");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay1.plus(readablePeriod6);
        org.joda.time.MonthDay monthDay9 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MonthDay monthDay11 = monthDay9.withChronologyRetainFields(chronology10);
        org.joda.time.MonthDay monthDay13 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MonthDay monthDay15 = monthDay13.withChronologyRetainFields(chronology14);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = monthDay13.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property18 = monthDay11.property(dateTimeFieldType17);
        int int19 = property18.get();
        org.joda.time.MonthDay monthDay21 = property18.addWrapFieldToCopy((int) (short) 1);
        boolean boolean22 = monthDay1.isBefore((org.joda.time.ReadablePartial) monthDay21);
        org.joda.time.MonthDay monthDay24 = monthDay21.minusMonths((int) (byte) -1);
        org.joda.time.MonthDay monthDay26 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.MonthDay monthDay28 = monthDay26.withChronologyRetainFields(chronology27);
        org.joda.time.MonthDay monthDay30 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MonthDay monthDay32 = monthDay30.withChronologyRetainFields(chronology31);
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = monthDay30.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property35 = monthDay28.property(dateTimeFieldType34);
        org.joda.time.MonthDay.Property property36 = monthDay28.monthOfYear();
        int int37 = monthDay28.getDayOfMonth();
        org.joda.time.MonthDay.Property property38 = monthDay28.dayOfMonth();
        int int39 = monthDay28.getDayOfMonth();
        org.joda.time.MonthDay monthDay41 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.MonthDay monthDay43 = monthDay41.withChronologyRetainFields(chronology42);
        org.joda.time.DateTimeFieldType dateTimeFieldType45 = monthDay41.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property46 = monthDay41.dayOfMonth();
        org.joda.time.Chronology chronology47 = monthDay41.getChronology();
        org.joda.time.MonthDay monthDay48 = monthDay28.withChronologyRetainFields(chronology47);
        org.joda.time.MonthDay monthDay49 = new org.joda.time.MonthDay(chronology47);
        boolean boolean50 = monthDay24.isAfter((org.joda.time.ReadablePartial) monthDay49);
        org.joda.time.DurationFieldType durationFieldType51 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay53 = monthDay24.withFieldAdded(durationFieldType51, 2);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(monthDay9);
        org.junit.Assert.assertNotNull(monthDay11);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertNotNull(monthDay26);
        org.junit.Assert.assertNotNull(monthDay28);
        org.junit.Assert.assertNotNull(monthDay30);
        org.junit.Assert.assertNotNull(monthDay32);
        org.junit.Assert.assertNotNull(dateTimeFieldType34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNotNull(monthDay41);
        org.junit.Assert.assertNotNull(monthDay43);
        org.junit.Assert.assertNotNull(dateTimeFieldType45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(monthDay48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
    }

    @Test
    public void test0824() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0824");
        org.joda.time.MonthDay monthDay1 = new org.joda.time.MonthDay(10L);
        int int2 = monthDay1.size();
        org.joda.time.MonthDay monthDay4 = monthDay1.minusDays((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.MonthDay monthDay6 = monthDay4.plus(readablePeriod5);
        org.joda.time.MonthDay monthDay7 = new org.joda.time.MonthDay((java.lang.Object) readablePeriod5);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 2 + "'", int2 == 2);
        org.junit.Assert.assertNotNull(monthDay4);
        org.junit.Assert.assertNotNull(monthDay6);
    }

    @Test
    public void test0825() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0825");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        java.util.Locale locale11 = null;
        int int12 = property10.getMaximumTextLength(locale11);
        int int13 = property10.getMinimumValue();
        java.lang.String str14 = property10.getAsText();
        org.joda.time.MonthDay monthDay16 = property10.addWrapFieldToCopy(9);
        java.lang.Class<?> wildcardClass17 = property10.getClass();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "1" + "'", str14, "1");
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test0826() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0826");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.MonthDay monthDay4 = monthDay1.withPeriodAdded(readablePeriod2, 1);
        org.joda.time.MonthDay monthDay6 = monthDay1.plusMonths((int) ' ');
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.MonthDay monthDay8 = new org.joda.time.MonthDay(dateTimeZone7);
        org.joda.time.DateTimeField[] dateTimeFieldArray9 = monthDay8.getFields();
        org.joda.time.MonthDay monthDay11 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MonthDay monthDay13 = monthDay11.withChronologyRetainFields(chronology12);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = monthDay11.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.MonthDay monthDay17 = monthDay11.plus(readablePeriod16);
        org.joda.time.MonthDay monthDay19 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MonthDay monthDay21 = monthDay19.withChronologyRetainFields(chronology20);
        org.joda.time.MonthDay monthDay23 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MonthDay monthDay25 = monthDay23.withChronologyRetainFields(chronology24);
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = monthDay23.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property28 = monthDay21.property(dateTimeFieldType27);
        int int29 = property28.get();
        org.joda.time.MonthDay monthDay31 = property28.addWrapFieldToCopy((int) (short) 1);
        boolean boolean32 = monthDay11.isBefore((org.joda.time.ReadablePartial) monthDay31);
        org.joda.time.MonthDay monthDay34 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.MonthDay monthDay36 = monthDay34.withChronologyRetainFields(chronology35);
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = monthDay34.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod39 = null;
        org.joda.time.MonthDay monthDay40 = monthDay34.plus(readablePeriod39);
        org.joda.time.MonthDay monthDay42 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.MonthDay monthDay44 = monthDay42.withChronologyRetainFields(chronology43);
        org.joda.time.MonthDay monthDay46 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.MonthDay monthDay48 = monthDay46.withChronologyRetainFields(chronology47);
        org.joda.time.DateTimeFieldType dateTimeFieldType50 = monthDay46.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property51 = monthDay44.property(dateTimeFieldType50);
        int int52 = property51.get();
        org.joda.time.MonthDay monthDay54 = property51.addWrapFieldToCopy((int) (short) 1);
        boolean boolean55 = monthDay34.isBefore((org.joda.time.ReadablePartial) monthDay54);
        org.joda.time.MonthDay monthDay57 = monthDay54.minusMonths((int) (byte) 100);
        org.joda.time.MonthDay monthDay59 = monthDay57.plusMonths(1);
        int int60 = monthDay57.size();
        org.joda.time.MonthDay monthDay62 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.MonthDay monthDay64 = monthDay62.withChronologyRetainFields(chronology63);
        org.joda.time.MonthDay monthDay66 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.MonthDay monthDay68 = monthDay66.withChronologyRetainFields(chronology67);
        org.joda.time.DateTimeFieldType dateTimeFieldType70 = monthDay66.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property71 = monthDay64.property(dateTimeFieldType70);
        int int72 = property71.get();
        org.joda.time.DurationField durationField73 = property71.getDurationField();
        org.joda.time.MonthDay monthDay75 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology76 = null;
        org.joda.time.MonthDay monthDay77 = monthDay75.withChronologyRetainFields(chronology76);
        org.joda.time.MonthDay monthDay79 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology80 = null;
        org.joda.time.MonthDay monthDay81 = monthDay79.withChronologyRetainFields(chronology80);
        org.joda.time.DateTimeFieldType dateTimeFieldType83 = monthDay79.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property84 = monthDay77.property(dateTimeFieldType83);
        boolean boolean85 = property71.equals((java.lang.Object) monthDay77);
        int int86 = property71.getMinimumValueOverall();
        org.joda.time.DateTimeFieldType dateTimeFieldType87 = property71.getFieldType();
        org.joda.time.MonthDay monthDay89 = monthDay57.withField(dateTimeFieldType87, (int) (byte) 1);
        int int90 = monthDay11.indexOf(dateTimeFieldType87);
        int int91 = monthDay8.indexOf(dateTimeFieldType87);
        org.joda.time.MonthDay monthDay93 = monthDay1.withField(dateTimeFieldType87, 9);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter94 = null;
        java.lang.String str95 = monthDay93.toString(dateTimeFormatter94);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter96 = null;
        java.lang.String str97 = monthDay93.toString(dateTimeFormatter96);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay4);
        org.junit.Assert.assertNotNull(monthDay6);
        org.junit.Assert.assertNotNull(dateTimeFieldArray9);
        org.junit.Assert.assertNotNull(monthDay11);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(monthDay17);
        org.junit.Assert.assertNotNull(monthDay19);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertNotNull(monthDay23);
        org.junit.Assert.assertNotNull(monthDay25);
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNotNull(monthDay31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(monthDay34);
        org.junit.Assert.assertNotNull(monthDay36);
        org.junit.Assert.assertNotNull(dateTimeFieldType38);
        org.junit.Assert.assertNotNull(monthDay40);
        org.junit.Assert.assertNotNull(monthDay42);
        org.junit.Assert.assertNotNull(monthDay44);
        org.junit.Assert.assertNotNull(monthDay46);
        org.junit.Assert.assertNotNull(monthDay48);
        org.junit.Assert.assertNotNull(dateTimeFieldType50);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertNotNull(monthDay54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(monthDay57);
        org.junit.Assert.assertNotNull(monthDay59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 2 + "'", int60 == 2);
        org.junit.Assert.assertNotNull(monthDay62);
        org.junit.Assert.assertNotNull(monthDay64);
        org.junit.Assert.assertNotNull(monthDay66);
        org.junit.Assert.assertNotNull(monthDay68);
        org.junit.Assert.assertNotNull(dateTimeFieldType70);
        org.junit.Assert.assertNotNull(property71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 1 + "'", int72 == 1);
        org.junit.Assert.assertNotNull(durationField73);
        org.junit.Assert.assertNotNull(monthDay75);
        org.junit.Assert.assertNotNull(monthDay77);
        org.junit.Assert.assertNotNull(monthDay79);
        org.junit.Assert.assertNotNull(monthDay81);
        org.junit.Assert.assertNotNull(dateTimeFieldType83);
        org.junit.Assert.assertNotNull(property84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 1 + "'", int86 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType87);
        org.junit.Assert.assertNotNull(monthDay89);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 1 + "'", int90 == 1);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 1 + "'", int91 == 1);
        org.junit.Assert.assertNotNull(monthDay93);
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "--01-09" + "'", str95, "--01-09");
        org.junit.Assert.assertEquals("'" + str97 + "' != '" + "--01-09" + "'", str97, "--01-09");
    }

    @Test
    public void test0827() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0827");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        org.joda.time.MonthDay.Property property11 = monthDay3.monthOfYear();
        int int12 = monthDay3.getDayOfMonth();
        org.joda.time.MonthDay.Property property13 = monthDay3.dayOfMonth();
        int int14 = monthDay3.getDayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.MonthDay monthDay16 = monthDay3.plus(readablePeriod15);
        org.joda.time.MonthDay monthDay18 = monthDay16.plusDays((int) (byte) 0);
        org.joda.time.MonthDay monthDay20 = monthDay16.minusMonths(28);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(monthDay18);
        org.junit.Assert.assertNotNull(monthDay20);
    }

    @Test
    public void test0828() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0828");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.MonthDay monthDay4 = monthDay1.withPeriodAdded(readablePeriod2, 1);
        org.joda.time.MonthDay monthDay6 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MonthDay monthDay8 = monthDay6.withChronologyRetainFields(chronology7);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = monthDay6.getFieldType((int) (byte) 1);
        int int11 = monthDay4.indexOf(dateTimeFieldType10);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MonthDay monthDay13 = monthDay4.withChronologyRetainFields(chronology12);
        org.joda.time.MonthDay monthDay14 = org.joda.time.MonthDay.now();
        boolean boolean15 = monthDay13.isBefore((org.joda.time.ReadablePartial) monthDay14);
        org.joda.time.MonthDay monthDay17 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.MonthDay monthDay19 = monthDay17.withChronologyRetainFields(chronology18);
        org.joda.time.MonthDay monthDay21 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.MonthDay monthDay23 = monthDay21.withChronologyRetainFields(chronology22);
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = monthDay21.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property26 = monthDay19.property(dateTimeFieldType25);
        int int27 = property26.get();
        int int28 = property26.getMaximumValue();
        org.joda.time.MonthDay monthDay30 = property26.setCopy((int) (short) 1);
        org.joda.time.MonthDay monthDay32 = org.joda.time.MonthDay.parse("");
        org.joda.time.ReadablePeriod readablePeriod33 = null;
        org.joda.time.MonthDay monthDay35 = monthDay32.withPeriodAdded(readablePeriod33, 1);
        org.joda.time.MonthDay monthDay37 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.MonthDay monthDay39 = monthDay37.withChronologyRetainFields(chronology38);
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = monthDay37.getFieldType((int) (byte) 1);
        int int42 = monthDay35.indexOf(dateTimeFieldType41);
        boolean boolean43 = monthDay30.isSupported(dateTimeFieldType41);
        org.joda.time.MonthDay monthDay45 = monthDay30.plusDays((int) (short) 100);
        org.joda.time.ReadablePeriod readablePeriod46 = null;
        org.joda.time.MonthDay monthDay47 = monthDay30.plus(readablePeriod46);
        boolean boolean48 = monthDay13.isAfter((org.joda.time.ReadablePartial) monthDay47);
        java.lang.Class<?> wildcardClass49 = monthDay13.getClass();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay4);
        org.junit.Assert.assertNotNull(monthDay6);
        org.junit.Assert.assertNotNull(monthDay8);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(monthDay17);
        org.junit.Assert.assertNotNull(monthDay19);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertNotNull(monthDay23);
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 31 + "'", int28 == 31);
        org.junit.Assert.assertNotNull(monthDay30);
        org.junit.Assert.assertNotNull(monthDay32);
        org.junit.Assert.assertNotNull(monthDay35);
        org.junit.Assert.assertNotNull(monthDay37);
        org.junit.Assert.assertNotNull(monthDay39);
        org.junit.Assert.assertNotNull(dateTimeFieldType41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(monthDay45);
        org.junit.Assert.assertNotNull(monthDay47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(wildcardClass49);
    }

    @Test
    public void test0829() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0829");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property6 = monthDay1.dayOfMonth();
        org.joda.time.MonthDay monthDay8 = property6.addWrapFieldToCopy(1);
        org.joda.time.MonthDay monthDay10 = property6.addWrapFieldToCopy(0);
        org.joda.time.MonthDay monthDay12 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MonthDay monthDay14 = monthDay12.withChronologyRetainFields(chronology13);
        org.joda.time.MonthDay monthDay16 = monthDay12.minusMonths((int) (byte) -1);
        boolean boolean17 = property6.equals((java.lang.Object) monthDay16);
        int int18 = property6.getMaximumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = property6.getFieldType();
        java.util.Locale locale21 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay22 = property6.setCopy("hi!", locale21);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"hi!\" for dayOfMonth is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(monthDay8);
        org.junit.Assert.assertNotNull(monthDay10);
        org.junit.Assert.assertNotNull(monthDay12);
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 31 + "'", int18 == 31);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
    }

    @Test
    public void test0830() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0830");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        int int11 = property10.get();
        org.joda.time.MonthDay monthDay13 = property10.addWrapFieldToCopy((int) (short) 1);
        org.joda.time.MonthDay monthDay15 = monthDay13.plusDays(2);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.MonthDay monthDay17 = monthDay15.minus(readablePeriod16);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter18 = null;
        java.lang.String str19 = monthDay17.toString(dateTimeFormatter18);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(monthDay17);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "--01-04" + "'", str19, "--01-04");
    }

    @Test
    public void test0831() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0831");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.MonthDay monthDay4 = monthDay1.withPeriodAdded(readablePeriod2, 1);
        org.joda.time.MonthDay monthDay6 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MonthDay monthDay8 = monthDay6.withChronologyRetainFields(chronology7);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = monthDay6.getFieldType((int) (byte) 1);
        int int11 = monthDay4.indexOf(dateTimeFieldType10);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MonthDay monthDay13 = monthDay4.withChronologyRetainFields(chronology12);
        org.joda.time.MonthDay.Property property14 = monthDay13.dayOfMonth();
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = property14.getFieldType();
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = property14.getFieldType();
        int int17 = property14.getMinimumValue();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay4);
        org.junit.Assert.assertNotNull(monthDay6);
        org.junit.Assert.assertNotNull(monthDay8);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
    }

    @Test
    public void test0832() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0832");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        int int11 = property10.get();
        org.joda.time.MonthDay monthDay13 = property10.addWrapFieldToCopy((int) (short) 1);
        java.lang.String str14 = property10.getAsString();
        java.lang.String str15 = property10.getAsText();
        org.joda.time.DurationField durationField16 = property10.getRangeDurationField();
        int int17 = property10.getMinimumValue();
        org.joda.time.MonthDay monthDay19 = property10.addToCopy(0);
        org.joda.time.MonthDay monthDay21 = monthDay19.plusDays((int) 'a');
        org.joda.time.DateTimeField[] dateTimeFieldArray22 = monthDay19.getFields();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "1" + "'", str14, "1");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "1" + "'", str15, "1");
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(monthDay19);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertNotNull(dateTimeFieldArray22);
    }

    @Test
    public void test0833() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0833");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.MonthDay monthDay3 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MonthDay monthDay5 = monthDay3.withChronologyRetainFields(chronology4);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = monthDay3.getFieldType((int) (byte) 1);
        boolean boolean8 = monthDay1.isSupported(dateTimeFieldType7);
        org.joda.time.MonthDay monthDay10 = org.joda.time.MonthDay.parse("");
        org.joda.time.MonthDay monthDay12 = monthDay10.minusDays((int) '#');
        org.joda.time.MonthDay monthDay14 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MonthDay monthDay16 = monthDay14.withChronologyRetainFields(chronology15);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = monthDay14.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property19 = monthDay14.dayOfMonth();
        org.joda.time.Chronology chronology20 = monthDay14.getChronology();
        org.joda.time.Chronology chronology21 = monthDay14.getChronology();
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.DateTime dateTime23 = monthDay14.toDateTime(readableInstant22);
        org.joda.time.MonthDay monthDay25 = monthDay14.plusMonths((int) ' ');
        boolean boolean26 = monthDay10.isAfter((org.joda.time.ReadablePartial) monthDay25);
        boolean boolean27 = monthDay1.isBefore((org.joda.time.ReadablePartial) monthDay25);
        org.joda.time.Chronology chronology28 = monthDay25.getChronology();
        org.joda.time.MonthDay monthDay29 = new org.joda.time.MonthDay(chronology28);
        org.joda.time.MonthDay monthDay31 = org.joda.time.MonthDay.parse("");
        org.joda.time.MonthDay monthDay33 = monthDay31.minusDays((int) '#');
        org.joda.time.MonthDay monthDay35 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.MonthDay monthDay37 = monthDay35.withChronologyRetainFields(chronology36);
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = monthDay35.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property40 = monthDay35.dayOfMonth();
        org.joda.time.Chronology chronology41 = monthDay35.getChronology();
        org.joda.time.Chronology chronology42 = monthDay35.getChronology();
        org.joda.time.ReadableInstant readableInstant43 = null;
        org.joda.time.DateTime dateTime44 = monthDay35.toDateTime(readableInstant43);
        org.joda.time.MonthDay monthDay46 = monthDay35.plusMonths((int) ' ');
        boolean boolean47 = monthDay31.isAfter((org.joda.time.ReadablePartial) monthDay46);
        org.joda.time.MonthDay monthDay49 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.MonthDay monthDay51 = monthDay49.withChronologyRetainFields(chronology50);
        org.joda.time.DateTimeFieldType dateTimeFieldType53 = monthDay49.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property54 = monthDay49.dayOfMonth();
        org.joda.time.MonthDay monthDay56 = property54.addWrapFieldToCopy(1);
        org.joda.time.MonthDay monthDay58 = property54.addWrapFieldToCopy(0);
        org.joda.time.MonthDay monthDay60 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.MonthDay monthDay62 = monthDay60.withChronologyRetainFields(chronology61);
        org.joda.time.MonthDay monthDay64 = monthDay60.minusMonths((int) (byte) -1);
        boolean boolean65 = property54.equals((java.lang.Object) monthDay64);
        int int66 = property54.getMaximumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType67 = property54.getFieldType();
        org.joda.time.MonthDay.Property property68 = monthDay46.property(dateTimeFieldType67);
        boolean boolean69 = monthDay29.isSupported(dateTimeFieldType67);
        org.joda.time.MonthDay.Property property70 = monthDay29.monthOfYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter71 = null;
        java.lang.String str72 = monthDay29.toString(dateTimeFormatter71);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(monthDay10);
        org.junit.Assert.assertNotNull(monthDay12);
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(monthDay25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(monthDay31);
        org.junit.Assert.assertNotNull(monthDay33);
        org.junit.Assert.assertNotNull(monthDay35);
        org.junit.Assert.assertNotNull(monthDay37);
        org.junit.Assert.assertNotNull(dateTimeFieldType39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(monthDay46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(monthDay49);
        org.junit.Assert.assertNotNull(monthDay51);
        org.junit.Assert.assertNotNull(dateTimeFieldType53);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(monthDay56);
        org.junit.Assert.assertNotNull(monthDay58);
        org.junit.Assert.assertNotNull(monthDay60);
        org.junit.Assert.assertNotNull(monthDay62);
        org.junit.Assert.assertNotNull(monthDay64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 31 + "'", int66 == 31);
        org.junit.Assert.assertNotNull(dateTimeFieldType67);
        org.junit.Assert.assertNotNull(property68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(property70);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "--11-25" + "'", str72, "--11-25");
    }

    @Test
    public void test0834() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0834");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        int int11 = property10.get();
        org.joda.time.MonthDay monthDay13 = property10.addToCopy((int) (short) 0);
        org.joda.time.MonthDay monthDay15 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MonthDay monthDay17 = monthDay15.withChronologyRetainFields(chronology16);
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = monthDay15.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.MonthDay monthDay21 = monthDay15.plus(readablePeriod20);
        org.joda.time.MonthDay monthDay23 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MonthDay monthDay25 = monthDay23.withChronologyRetainFields(chronology24);
        org.joda.time.MonthDay monthDay27 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MonthDay monthDay29 = monthDay27.withChronologyRetainFields(chronology28);
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = monthDay27.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property32 = monthDay25.property(dateTimeFieldType31);
        int int33 = property32.get();
        org.joda.time.MonthDay monthDay35 = property32.addWrapFieldToCopy((int) (short) 1);
        boolean boolean36 = monthDay15.isBefore((org.joda.time.ReadablePartial) monthDay35);
        org.joda.time.MonthDay monthDay38 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.MonthDay monthDay40 = monthDay38.withChronologyRetainFields(chronology39);
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = monthDay38.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod43 = null;
        org.joda.time.MonthDay monthDay44 = monthDay38.plus(readablePeriod43);
        org.joda.time.MonthDay monthDay46 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.MonthDay monthDay48 = monthDay46.withChronologyRetainFields(chronology47);
        org.joda.time.MonthDay monthDay50 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.MonthDay monthDay52 = monthDay50.withChronologyRetainFields(chronology51);
        org.joda.time.DateTimeFieldType dateTimeFieldType54 = monthDay50.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property55 = monthDay48.property(dateTimeFieldType54);
        int int56 = property55.get();
        org.joda.time.MonthDay monthDay58 = property55.addWrapFieldToCopy((int) (short) 1);
        boolean boolean59 = monthDay38.isBefore((org.joda.time.ReadablePartial) monthDay58);
        org.joda.time.MonthDay monthDay61 = monthDay58.minusMonths((int) (byte) 100);
        org.joda.time.MonthDay monthDay63 = monthDay61.plusMonths(1);
        int int64 = monthDay61.size();
        org.joda.time.MonthDay monthDay66 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.MonthDay monthDay68 = monthDay66.withChronologyRetainFields(chronology67);
        org.joda.time.MonthDay monthDay70 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology71 = null;
        org.joda.time.MonthDay monthDay72 = monthDay70.withChronologyRetainFields(chronology71);
        org.joda.time.DateTimeFieldType dateTimeFieldType74 = monthDay70.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property75 = monthDay68.property(dateTimeFieldType74);
        int int76 = property75.get();
        org.joda.time.DurationField durationField77 = property75.getDurationField();
        org.joda.time.MonthDay monthDay79 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology80 = null;
        org.joda.time.MonthDay monthDay81 = monthDay79.withChronologyRetainFields(chronology80);
        org.joda.time.MonthDay monthDay83 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology84 = null;
        org.joda.time.MonthDay monthDay85 = monthDay83.withChronologyRetainFields(chronology84);
        org.joda.time.DateTimeFieldType dateTimeFieldType87 = monthDay83.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property88 = monthDay81.property(dateTimeFieldType87);
        boolean boolean89 = property75.equals((java.lang.Object) monthDay81);
        int int90 = property75.getMinimumValueOverall();
        org.joda.time.DateTimeFieldType dateTimeFieldType91 = property75.getFieldType();
        org.joda.time.MonthDay monthDay93 = monthDay61.withField(dateTimeFieldType91, (int) (byte) 1);
        int int94 = monthDay15.indexOf(dateTimeFieldType91);
        boolean boolean95 = monthDay13.isBefore((org.joda.time.ReadablePartial) monthDay15);
        org.joda.time.DateTimeField[] dateTimeFieldArray96 = monthDay13.getFields();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(monthDay17);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertNotNull(monthDay23);
        org.junit.Assert.assertNotNull(monthDay25);
        org.junit.Assert.assertNotNull(monthDay27);
        org.junit.Assert.assertNotNull(monthDay29);
        org.junit.Assert.assertNotNull(dateTimeFieldType31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(monthDay35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(monthDay38);
        org.junit.Assert.assertNotNull(monthDay40);
        org.junit.Assert.assertNotNull(dateTimeFieldType42);
        org.junit.Assert.assertNotNull(monthDay44);
        org.junit.Assert.assertNotNull(monthDay46);
        org.junit.Assert.assertNotNull(monthDay48);
        org.junit.Assert.assertNotNull(monthDay50);
        org.junit.Assert.assertNotNull(monthDay52);
        org.junit.Assert.assertNotNull(dateTimeFieldType54);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertNotNull(monthDay58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(monthDay61);
        org.junit.Assert.assertNotNull(monthDay63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 2 + "'", int64 == 2);
        org.junit.Assert.assertNotNull(monthDay66);
        org.junit.Assert.assertNotNull(monthDay68);
        org.junit.Assert.assertNotNull(monthDay70);
        org.junit.Assert.assertNotNull(monthDay72);
        org.junit.Assert.assertNotNull(dateTimeFieldType74);
        org.junit.Assert.assertNotNull(property75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 1 + "'", int76 == 1);
        org.junit.Assert.assertNotNull(durationField77);
        org.junit.Assert.assertNotNull(monthDay79);
        org.junit.Assert.assertNotNull(monthDay81);
        org.junit.Assert.assertNotNull(monthDay83);
        org.junit.Assert.assertNotNull(monthDay85);
        org.junit.Assert.assertNotNull(dateTimeFieldType87);
        org.junit.Assert.assertNotNull(property88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 1 + "'", int90 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType91);
        org.junit.Assert.assertNotNull(monthDay93);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 1 + "'", int94 == 1);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldArray96);
    }

    @Test
    public void test0835() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0835");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay1.plus(readablePeriod6);
        org.joda.time.MonthDay monthDay9 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MonthDay monthDay11 = monthDay9.withChronologyRetainFields(chronology10);
        org.joda.time.MonthDay monthDay13 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MonthDay monthDay15 = monthDay13.withChronologyRetainFields(chronology14);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = monthDay13.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property18 = monthDay11.property(dateTimeFieldType17);
        int int19 = property18.get();
        org.joda.time.MonthDay monthDay21 = property18.addWrapFieldToCopy((int) (short) 1);
        boolean boolean22 = monthDay1.isBefore((org.joda.time.ReadablePartial) monthDay21);
        org.joda.time.MonthDay monthDay24 = monthDay21.minusMonths((int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        org.joda.time.MonthDay monthDay26 = monthDay24.minus(readablePeriod25);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(monthDay9);
        org.junit.Assert.assertNotNull(monthDay11);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertNotNull(monthDay26);
    }

    @Test
    public void test0836() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0836");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        java.util.Locale locale11 = null;
        int int12 = property10.getMaximumTextLength(locale11);
        java.util.Locale locale13 = null;
        int int14 = property10.getMaximumShortTextLength(locale13);
        org.joda.time.DateTimeField dateTimeField15 = property10.getField();
        int int16 = property10.getMaximumValue();
        org.joda.time.MonthDay monthDay17 = property10.getMonthDay();
        org.joda.time.MonthDay monthDay19 = property10.addWrapFieldToCopy((int) (byte) 10);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 31 + "'", int16 == 31);
        org.junit.Assert.assertNotNull(monthDay17);
        org.junit.Assert.assertNotNull(monthDay19);
    }

    @Test
    public void test0837() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0837");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        int int11 = property10.get();
        int int12 = property10.getMaximumValue();
        org.joda.time.MonthDay monthDay14 = property10.setCopy((int) (short) 1);
        org.joda.time.MonthDay monthDay16 = org.joda.time.MonthDay.parse("");
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.MonthDay monthDay19 = monthDay16.withPeriodAdded(readablePeriod17, 1);
        org.joda.time.MonthDay monthDay21 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.MonthDay monthDay23 = monthDay21.withChronologyRetainFields(chronology22);
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = monthDay21.getFieldType((int) (byte) 1);
        int int26 = monthDay19.indexOf(dateTimeFieldType25);
        boolean boolean27 = monthDay14.isSupported(dateTimeFieldType25);
        org.joda.time.MonthDay monthDay29 = monthDay14.plusDays((int) (short) 100);
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.MonthDay monthDay31 = monthDay14.plus(readablePeriod30);
        org.joda.time.MonthDay monthDay33 = org.joda.time.MonthDay.parse("");
        org.joda.time.ReadablePeriod readablePeriod34 = null;
        org.joda.time.MonthDay monthDay36 = monthDay33.withPeriodAdded(readablePeriod34, 1);
        org.joda.time.MonthDay monthDay38 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.MonthDay monthDay40 = monthDay38.withChronologyRetainFields(chronology39);
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = monthDay38.getFieldType((int) (byte) 1);
        int int43 = monthDay36.indexOf(dateTimeFieldType42);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.MonthDay monthDay45 = monthDay36.withChronologyRetainFields(chronology44);
        org.joda.time.MonthDay monthDay47 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.MonthDay monthDay49 = monthDay47.withChronologyRetainFields(chronology48);
        org.joda.time.DateTimeFieldType dateTimeFieldType51 = monthDay47.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod52 = null;
        org.joda.time.MonthDay monthDay53 = monthDay47.plus(readablePeriod52);
        org.joda.time.MonthDay monthDay55 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.MonthDay monthDay57 = monthDay55.withChronologyRetainFields(chronology56);
        org.joda.time.MonthDay monthDay59 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.MonthDay monthDay61 = monthDay59.withChronologyRetainFields(chronology60);
        org.joda.time.DateTimeFieldType dateTimeFieldType63 = monthDay59.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property64 = monthDay57.property(dateTimeFieldType63);
        int int65 = property64.get();
        org.joda.time.MonthDay monthDay67 = property64.addWrapFieldToCopy((int) (short) 1);
        boolean boolean68 = monthDay47.isBefore((org.joda.time.ReadablePartial) monthDay67);
        org.joda.time.Chronology chronology69 = null;
        org.joda.time.MonthDay monthDay70 = monthDay47.withChronologyRetainFields(chronology69);
        org.joda.time.Chronology chronology71 = monthDay70.getChronology();
        org.joda.time.MonthDay monthDay72 = monthDay45.withChronologyRetainFields(chronology71);
        org.joda.time.MonthDay monthDay73 = new org.joda.time.MonthDay((java.lang.Object) monthDay14, chronology71);
        java.lang.Class<?> wildcardClass74 = chronology71.getClass();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 31 + "'", int12 == 31);
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(monthDay19);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertNotNull(monthDay23);
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(monthDay29);
        org.junit.Assert.assertNotNull(monthDay31);
        org.junit.Assert.assertNotNull(monthDay33);
        org.junit.Assert.assertNotNull(monthDay36);
        org.junit.Assert.assertNotNull(monthDay38);
        org.junit.Assert.assertNotNull(monthDay40);
        org.junit.Assert.assertNotNull(dateTimeFieldType42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertNotNull(monthDay45);
        org.junit.Assert.assertNotNull(monthDay47);
        org.junit.Assert.assertNotNull(monthDay49);
        org.junit.Assert.assertNotNull(dateTimeFieldType51);
        org.junit.Assert.assertNotNull(monthDay53);
        org.junit.Assert.assertNotNull(monthDay55);
        org.junit.Assert.assertNotNull(monthDay57);
        org.junit.Assert.assertNotNull(monthDay59);
        org.junit.Assert.assertNotNull(monthDay61);
        org.junit.Assert.assertNotNull(dateTimeFieldType63);
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
        org.junit.Assert.assertNotNull(monthDay67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(monthDay70);
        org.junit.Assert.assertNotNull(chronology71);
        org.junit.Assert.assertNotNull(monthDay72);
        org.junit.Assert.assertNotNull(wildcardClass74);
    }

    @Test
    public void test0838() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0838");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        int int11 = property10.get();
        org.joda.time.DurationField durationField12 = property10.getDurationField();
        org.joda.time.MonthDay monthDay14 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MonthDay monthDay16 = monthDay14.withChronologyRetainFields(chronology15);
        org.joda.time.MonthDay monthDay18 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MonthDay monthDay20 = monthDay18.withChronologyRetainFields(chronology19);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = monthDay18.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property23 = monthDay16.property(dateTimeFieldType22);
        boolean boolean24 = property10.equals((java.lang.Object) monthDay16);
        org.joda.time.DateTimeField dateTimeField25 = property10.getField();
        java.util.Locale locale26 = null;
        int int27 = property10.getMaximumShortTextLength(locale26);
        org.joda.time.MonthDay monthDay28 = property10.getMonthDay();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay30 = property10.setCopy("dayOfMonth");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"dayOfMonth\" for dayOfMonth is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(monthDay18);
        org.junit.Assert.assertNotNull(monthDay20);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2 + "'", int27 == 2);
        org.junit.Assert.assertNotNull(monthDay28);
    }

    @Test
    public void test0839() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0839");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        int int11 = property10.get();
        org.joda.time.DurationField durationField12 = property10.getDurationField();
        int int13 = property10.getMinimumValue();
        int int14 = property10.getMaximumValue();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 31 + "'", int14 == 31);
    }

    @Test
    public void test0840() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0840");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property6 = monthDay1.dayOfMonth();
        org.joda.time.MonthDay monthDay8 = property6.addWrapFieldToCopy(1);
        int int9 = property6.getMaximumValue();
        int int10 = property6.getMaximumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = property6.getFieldType();
        java.lang.String str12 = property6.getAsText();
        org.joda.time.MonthDay monthDay14 = property6.addToCopy((int) '#');
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(monthDay8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 31 + "'", int9 == 31);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 31 + "'", int10 == 31);
        org.junit.Assert.assertNotNull(dateTimeFieldType11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "1" + "'", str12, "1");
        org.junit.Assert.assertNotNull(monthDay14);
    }

    @Test
    public void test0841() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0841");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay1.plus(readablePeriod6);
        org.joda.time.MonthDay monthDay9 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MonthDay monthDay11 = monthDay9.withChronologyRetainFields(chronology10);
        org.joda.time.MonthDay monthDay13 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MonthDay monthDay15 = monthDay13.withChronologyRetainFields(chronology14);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = monthDay13.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property18 = monthDay11.property(dateTimeFieldType17);
        int int19 = property18.get();
        org.joda.time.MonthDay monthDay21 = property18.addWrapFieldToCopy((int) (short) 1);
        boolean boolean22 = monthDay1.isBefore((org.joda.time.ReadablePartial) monthDay21);
        org.joda.time.MonthDay monthDay24 = monthDay21.minusMonths((int) (byte) 100);
        org.joda.time.MonthDay monthDay26 = monthDay24.plusMonths(1);
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.MonthDay monthDay28 = monthDay24.minus(readablePeriod27);
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.MonthDay monthDay30 = new org.joda.time.MonthDay(dateTimeZone29);
        boolean boolean31 = monthDay28.isEqual((org.joda.time.ReadablePartial) monthDay30);
        org.joda.time.MonthDay monthDay33 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MonthDay monthDay35 = monthDay33.withChronologyRetainFields(chronology34);
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = monthDay33.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod38 = null;
        org.joda.time.MonthDay monthDay39 = monthDay33.plus(readablePeriod38);
        org.joda.time.MonthDay monthDay41 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.MonthDay monthDay43 = monthDay41.withChronologyRetainFields(chronology42);
        org.joda.time.MonthDay monthDay45 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.MonthDay monthDay47 = monthDay45.withChronologyRetainFields(chronology46);
        org.joda.time.DateTimeFieldType dateTimeFieldType49 = monthDay45.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property50 = monthDay43.property(dateTimeFieldType49);
        int int51 = property50.get();
        org.joda.time.MonthDay monthDay53 = property50.addWrapFieldToCopy((int) (short) 1);
        boolean boolean54 = monthDay33.isBefore((org.joda.time.ReadablePartial) monthDay53);
        org.joda.time.DateTimeFieldType dateTimeFieldType56 = monthDay33.getFieldType(0);
        int int57 = monthDay28.indexOf(dateTimeFieldType56);
        java.lang.Class<?> wildcardClass58 = dateTimeFieldType56.getClass();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(monthDay9);
        org.junit.Assert.assertNotNull(monthDay11);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertNotNull(monthDay26);
        org.junit.Assert.assertNotNull(monthDay28);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(monthDay33);
        org.junit.Assert.assertNotNull(monthDay35);
        org.junit.Assert.assertNotNull(dateTimeFieldType37);
        org.junit.Assert.assertNotNull(monthDay39);
        org.junit.Assert.assertNotNull(monthDay41);
        org.junit.Assert.assertNotNull(monthDay43);
        org.junit.Assert.assertNotNull(monthDay45);
        org.junit.Assert.assertNotNull(monthDay47);
        org.junit.Assert.assertNotNull(dateTimeFieldType49);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertNotNull(monthDay53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(wildcardClass58);
    }

    @Test
    public void test0842() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0842");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        int int11 = property10.get();
        int int12 = property10.getMaximumValue();
        org.joda.time.MonthDay monthDay14 = property10.setCopy((int) (short) 1);
        org.joda.time.MonthDay monthDay16 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MonthDay monthDay18 = monthDay16.withChronologyRetainFields(chronology17);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = monthDay16.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.MonthDay monthDay22 = monthDay16.plus(readablePeriod21);
        int int23 = monthDay16.getDayOfMonth();
        int int24 = property10.compareTo((org.joda.time.ReadablePartial) monthDay16);
        org.joda.time.MonthDay monthDay26 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.MonthDay monthDay28 = monthDay26.withChronologyRetainFields(chronology27);
        org.joda.time.MonthDay monthDay30 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MonthDay monthDay32 = monthDay30.withChronologyRetainFields(chronology31);
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = monthDay30.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property35 = monthDay28.property(dateTimeFieldType34);
        int int36 = property35.get();
        org.joda.time.DurationField durationField37 = property35.getDurationField();
        java.util.Locale locale38 = null;
        int int39 = property35.getMaximumTextLength(locale38);
        org.joda.time.MonthDay monthDay41 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.MonthDay monthDay43 = monthDay41.withChronologyRetainFields(chronology42);
        org.joda.time.DateTimeFieldType dateTimeFieldType45 = monthDay41.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property46 = monthDay41.dayOfMonth();
        org.joda.time.Chronology chronology47 = monthDay41.getChronology();
        org.joda.time.Chronology chronology48 = monthDay41.getChronology();
        org.joda.time.ReadableInstant readableInstant49 = null;
        org.joda.time.DateTime dateTime50 = monthDay41.toDateTime(readableInstant49);
        int int51 = property35.compareTo((org.joda.time.ReadableInstant) dateTime50);
        int int52 = property10.compareTo((org.joda.time.ReadableInstant) dateTime50);
        java.lang.Class<?> wildcardClass53 = property10.getClass();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 31 + "'", int12 == 31);
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(monthDay18);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertNotNull(monthDay22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(monthDay26);
        org.junit.Assert.assertNotNull(monthDay28);
        org.junit.Assert.assertNotNull(monthDay30);
        org.junit.Assert.assertNotNull(monthDay32);
        org.junit.Assert.assertNotNull(dateTimeFieldType34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(durationField37);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 2 + "'", int39 == 2);
        org.junit.Assert.assertNotNull(monthDay41);
        org.junit.Assert.assertNotNull(monthDay43);
        org.junit.Assert.assertNotNull(dateTimeFieldType45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(wildcardClass53);
    }

    @Test
    public void test0843() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0843");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        int int11 = property10.get();
        org.joda.time.MonthDay monthDay13 = property10.addWrapFieldToCopy((int) (short) 1);
        java.lang.String str14 = property10.getAsString();
        java.lang.String str15 = property10.getAsText();
        java.lang.String str16 = property10.getAsShortText();
        org.joda.time.MonthDay monthDay18 = property10.addToCopy((int) 'a');
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "1" + "'", str14, "1");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "1" + "'", str15, "1");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "1" + "'", str16, "1");
        org.junit.Assert.assertNotNull(monthDay18);
    }

    @Test
    public void test0844() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0844");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        int int11 = property10.get();
        org.joda.time.DurationField durationField12 = property10.getDurationField();
        org.joda.time.MonthDay monthDay14 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MonthDay monthDay16 = monthDay14.withChronologyRetainFields(chronology15);
        org.joda.time.MonthDay monthDay18 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MonthDay monthDay20 = monthDay18.withChronologyRetainFields(chronology19);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = monthDay18.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property23 = monthDay16.property(dateTimeFieldType22);
        boolean boolean24 = property10.equals((java.lang.Object) monthDay16);
        java.util.Locale locale25 = null;
        java.lang.String str26 = property10.getAsShortText(locale25);
        int int27 = property10.get();
        int int28 = property10.getMaximumValueOverall();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(monthDay18);
        org.junit.Assert.assertNotNull(monthDay20);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "1" + "'", str26, "1");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 31 + "'", int28 == 31);
    }

    @Test
    public void test0845() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0845");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        int int11 = property10.get();
        org.joda.time.MonthDay monthDay13 = property10.addWrapFieldToCopy((int) (short) 1);
        java.lang.String str14 = property10.getAsString();
        java.lang.String str15 = property10.getAsText();
        org.joda.time.DurationField durationField16 = property10.getRangeDurationField();
        int int17 = property10.getMinimumValue();
        org.joda.time.MonthDay monthDay19 = property10.addWrapFieldToCopy((int) '4');
        org.joda.time.DurationField durationField20 = property10.getDurationField();
        int int21 = property10.getMaximumValue();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "1" + "'", str14, "1");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "1" + "'", str15, "1");
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(monthDay19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 31 + "'", int21 == 31);
    }

    @Test
    public void test0846() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0846");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        int int11 = property10.get();
        org.joda.time.MonthDay monthDay13 = property10.addWrapFieldToCopy((int) (short) 1);
        org.joda.time.MonthDay.Property property14 = monthDay13.dayOfMonth();
        int int15 = property14.getMaximumValue();
        java.lang.String str16 = property14.getAsText();
        java.util.Locale locale17 = null;
        java.lang.String str18 = property14.getAsShortText(locale17);
        org.joda.time.MonthDay monthDay20 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.MonthDay monthDay22 = monthDay20.withChronologyRetainFields(chronology21);
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = monthDay20.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        org.joda.time.MonthDay monthDay26 = monthDay20.plus(readablePeriod25);
        org.joda.time.MonthDay monthDay28 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MonthDay monthDay30 = monthDay28.withChronologyRetainFields(chronology29);
        org.joda.time.MonthDay monthDay32 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.MonthDay monthDay34 = monthDay32.withChronologyRetainFields(chronology33);
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = monthDay32.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property37 = monthDay30.property(dateTimeFieldType36);
        int int38 = property37.get();
        org.joda.time.MonthDay monthDay40 = property37.addWrapFieldToCopy((int) (short) 1);
        boolean boolean41 = monthDay20.isBefore((org.joda.time.ReadablePartial) monthDay40);
        org.joda.time.MonthDay monthDay43 = monthDay40.minusMonths((int) (byte) 100);
        int int44 = monthDay43.getMonthOfYear();
        org.joda.time.MonthDay monthDay46 = monthDay43.withMonthOfYear(1);
        org.joda.time.ReadablePeriod readablePeriod47 = null;
        org.joda.time.MonthDay monthDay48 = monthDay43.plus(readablePeriod47);
        int int49 = property14.compareTo((org.joda.time.ReadablePartial) monthDay48);
        int int50 = property14.getMaximumValueOverall();
        int int51 = property14.getMinimumValue();
        java.lang.String str52 = property14.getAsString();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 31 + "'", int15 == 31);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "2" + "'", str16, "2");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "2" + "'", str18, "2");
        org.junit.Assert.assertNotNull(monthDay20);
        org.junit.Assert.assertNotNull(monthDay22);
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertNotNull(monthDay26);
        org.junit.Assert.assertNotNull(monthDay28);
        org.junit.Assert.assertNotNull(monthDay30);
        org.junit.Assert.assertNotNull(monthDay32);
        org.junit.Assert.assertNotNull(monthDay34);
        org.junit.Assert.assertNotNull(dateTimeFieldType36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(monthDay40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(monthDay43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 9 + "'", int44 == 9);
        org.junit.Assert.assertNotNull(monthDay46);
        org.junit.Assert.assertNotNull(monthDay48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 31 + "'", int50 == 31);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "2" + "'", str52, "2");
    }

    @Test
    public void test0847() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0847");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        int int11 = property10.get();
        org.joda.time.MonthDay monthDay13 = property10.addWrapFieldToCopy((int) (short) 1);
        java.lang.String str14 = property10.getAsString();
        java.lang.String str15 = property10.getAsText();
        org.joda.time.DurationField durationField16 = property10.getRangeDurationField();
        int int17 = property10.getMinimumValue();
        org.joda.time.MonthDay monthDay19 = property10.addToCopy((int) (short) -1);
        org.joda.time.MonthDay monthDay21 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.MonthDay monthDay23 = monthDay21.withChronologyRetainFields(chronology22);
        org.joda.time.MonthDay monthDay25 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MonthDay monthDay27 = monthDay25.withChronologyRetainFields(chronology26);
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = monthDay25.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property30 = monthDay23.property(dateTimeFieldType29);
        int int31 = property30.get();
        org.joda.time.DurationField durationField32 = property30.getDurationField();
        org.joda.time.MonthDay monthDay34 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.MonthDay monthDay36 = monthDay34.withChronologyRetainFields(chronology35);
        org.joda.time.MonthDay monthDay38 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.MonthDay monthDay40 = monthDay38.withChronologyRetainFields(chronology39);
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = monthDay38.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property43 = monthDay36.property(dateTimeFieldType42);
        boolean boolean44 = property30.equals((java.lang.Object) monthDay36);
        org.joda.time.MonthDay monthDay45 = new org.joda.time.MonthDay((java.lang.Object) monthDay36);
        boolean boolean46 = property10.equals((java.lang.Object) monthDay45);
        org.joda.time.DateTimeField dateTimeField47 = property10.getField();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay48 = new org.joda.time.MonthDay((java.lang.Object) property10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: org.joda.time.MonthDay$Property");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "1" + "'", str14, "1");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "1" + "'", str15, "1");
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(monthDay19);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertNotNull(monthDay23);
        org.junit.Assert.assertNotNull(monthDay25);
        org.junit.Assert.assertNotNull(monthDay27);
        org.junit.Assert.assertNotNull(dateTimeFieldType29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(monthDay34);
        org.junit.Assert.assertNotNull(monthDay36);
        org.junit.Assert.assertNotNull(monthDay38);
        org.junit.Assert.assertNotNull(monthDay40);
        org.junit.Assert.assertNotNull(dateTimeFieldType42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(dateTimeField47);
    }

    @Test
    public void test0848() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0848");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay1.plus(readablePeriod6);
        org.joda.time.MonthDay monthDay9 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MonthDay monthDay11 = monthDay9.withChronologyRetainFields(chronology10);
        org.joda.time.MonthDay monthDay13 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MonthDay monthDay15 = monthDay13.withChronologyRetainFields(chronology14);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = monthDay13.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property18 = monthDay11.property(dateTimeFieldType17);
        int int19 = property18.get();
        org.joda.time.MonthDay monthDay21 = property18.addWrapFieldToCopy((int) (short) 1);
        boolean boolean22 = monthDay1.isBefore((org.joda.time.ReadablePartial) monthDay21);
        org.joda.time.MonthDay monthDay24 = monthDay21.minusMonths((int) (byte) 100);
        int int25 = monthDay24.getDayOfMonth();
        org.joda.time.MonthDay monthDay27 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MonthDay monthDay29 = monthDay27.withChronologyRetainFields(chronology28);
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = monthDay27.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property32 = monthDay27.dayOfMonth();
        org.joda.time.Chronology chronology33 = monthDay27.getChronology();
        org.joda.time.Chronology chronology34 = monthDay27.getChronology();
        org.joda.time.ReadableInstant readableInstant35 = null;
        org.joda.time.DateTime dateTime36 = monthDay27.toDateTime(readableInstant35);
        org.joda.time.MonthDay monthDay38 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.MonthDay monthDay40 = monthDay38.withChronologyRetainFields(chronology39);
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = monthDay38.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod43 = null;
        org.joda.time.MonthDay monthDay44 = monthDay38.plus(readablePeriod43);
        org.joda.time.MonthDay monthDay46 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.MonthDay monthDay48 = monthDay46.withChronologyRetainFields(chronology47);
        org.joda.time.MonthDay monthDay50 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.MonthDay monthDay52 = monthDay50.withChronologyRetainFields(chronology51);
        org.joda.time.DateTimeFieldType dateTimeFieldType54 = monthDay50.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property55 = monthDay48.property(dateTimeFieldType54);
        int int56 = property55.get();
        org.joda.time.MonthDay monthDay58 = property55.addWrapFieldToCopy((int) (short) 1);
        boolean boolean59 = monthDay38.isBefore((org.joda.time.ReadablePartial) monthDay58);
        org.joda.time.DateTimeFieldType dateTimeFieldType61 = monthDay38.getFieldType(0);
        int int62 = monthDay27.get(dateTimeFieldType61);
        org.joda.time.MonthDay.Property property63 = monthDay24.property(dateTimeFieldType61);
        int int64 = property63.getMaximumValue();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(monthDay9);
        org.junit.Assert.assertNotNull(monthDay11);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2 + "'", int25 == 2);
        org.junit.Assert.assertNotNull(monthDay27);
        org.junit.Assert.assertNotNull(monthDay29);
        org.junit.Assert.assertNotNull(dateTimeFieldType31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(monthDay38);
        org.junit.Assert.assertNotNull(monthDay40);
        org.junit.Assert.assertNotNull(dateTimeFieldType42);
        org.junit.Assert.assertNotNull(monthDay44);
        org.junit.Assert.assertNotNull(monthDay46);
        org.junit.Assert.assertNotNull(monthDay48);
        org.junit.Assert.assertNotNull(monthDay50);
        org.junit.Assert.assertNotNull(monthDay52);
        org.junit.Assert.assertNotNull(dateTimeFieldType54);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertNotNull(monthDay58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 12 + "'", int64 == 12);
    }

    @Test
    public void test0849() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0849");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        org.joda.time.MonthDay.Property property11 = monthDay3.monthOfYear();
        org.joda.time.MonthDay monthDay13 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MonthDay monthDay15 = monthDay13.withChronologyRetainFields(chronology14);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = monthDay13.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay monthDay19 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MonthDay monthDay21 = monthDay19.withChronologyRetainFields(chronology20);
        org.joda.time.MonthDay monthDay23 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MonthDay monthDay25 = monthDay23.withChronologyRetainFields(chronology24);
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = monthDay23.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property28 = monthDay21.property(dateTimeFieldType27);
        int int29 = monthDay13.indexOf(dateTimeFieldType27);
        boolean boolean30 = monthDay3.equals((java.lang.Object) int29);
        org.joda.time.MonthDay monthDay32 = monthDay3.withMonthOfYear(9);
        org.joda.time.MonthDay monthDay34 = monthDay32.plusDays(3);
        org.joda.time.MonthDay monthDay36 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.MonthDay monthDay38 = monthDay36.withChronologyRetainFields(chronology37);
        org.joda.time.MonthDay monthDay40 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.MonthDay monthDay42 = monthDay40.withChronologyRetainFields(chronology41);
        org.joda.time.DateTimeFieldType dateTimeFieldType44 = monthDay40.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property45 = monthDay38.property(dateTimeFieldType44);
        int int46 = property45.get();
        int int47 = property45.getMaximumValue();
        boolean boolean48 = monthDay32.equals((java.lang.Object) property45);
        int int49 = monthDay32.getDayOfMonth();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(monthDay19);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertNotNull(monthDay23);
        org.junit.Assert.assertNotNull(monthDay25);
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(monthDay32);
        org.junit.Assert.assertNotNull(monthDay34);
        org.junit.Assert.assertNotNull(monthDay36);
        org.junit.Assert.assertNotNull(monthDay38);
        org.junit.Assert.assertNotNull(monthDay40);
        org.junit.Assert.assertNotNull(monthDay42);
        org.junit.Assert.assertNotNull(dateTimeFieldType44);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 31 + "'", int47 == 31);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
    }

    @Test
    public void test0850() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0850");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        int int11 = property10.get();
        org.joda.time.MonthDay monthDay13 = property10.addWrapFieldToCopy((int) (short) 1);
        java.lang.String str14 = property10.getAsString();
        java.lang.String str15 = property10.getAsText();
        org.joda.time.DurationField durationField16 = property10.getRangeDurationField();
        int int17 = property10.getMinimumValue();
        org.joda.time.MonthDay monthDay19 = property10.addToCopy(0);
        org.joda.time.MonthDay monthDay21 = monthDay19.plusDays((int) 'a');
        org.joda.time.MonthDay monthDay23 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MonthDay monthDay25 = monthDay23.withChronologyRetainFields(chronology24);
        org.joda.time.MonthDay monthDay27 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MonthDay monthDay29 = monthDay27.withChronologyRetainFields(chronology28);
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = monthDay27.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property32 = monthDay25.property(dateTimeFieldType31);
        java.util.Locale locale33 = null;
        int int34 = property32.getMaximumTextLength(locale33);
        java.util.Locale locale35 = null;
        int int36 = property32.getMaximumShortTextLength(locale35);
        org.joda.time.DateTimeField dateTimeField37 = property32.getField();
        int int38 = property32.getMaximumValue();
        org.joda.time.MonthDay monthDay40 = property32.addToCopy((int) ' ');
        java.lang.String str41 = property32.toString();
        boolean boolean42 = monthDay21.equals((java.lang.Object) str41);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "1" + "'", str14, "1");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "1" + "'", str15, "1");
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(monthDay19);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertNotNull(monthDay23);
        org.junit.Assert.assertNotNull(monthDay25);
        org.junit.Assert.assertNotNull(monthDay27);
        org.junit.Assert.assertNotNull(monthDay29);
        org.junit.Assert.assertNotNull(dateTimeFieldType31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2 + "'", int34 == 2);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2 + "'", int36 == 2);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 31 + "'", int38 == 31);
        org.junit.Assert.assertNotNull(monthDay40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "Property[dayOfMonth]" + "'", str41, "Property[dayOfMonth]");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }

    @Test
    public void test0851() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0851");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.MonthDay monthDay4 = monthDay1.withPeriodAdded(readablePeriod2, 1);
        org.joda.time.MonthDay monthDay6 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MonthDay monthDay8 = monthDay6.withChronologyRetainFields(chronology7);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = monthDay6.getFieldType((int) (byte) 1);
        int int11 = monthDay4.indexOf(dateTimeFieldType10);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MonthDay monthDay13 = monthDay4.withChronologyRetainFields(chronology12);
        org.joda.time.MonthDay.Property property14 = monthDay13.dayOfMonth();
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = property14.getFieldType();
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = property14.getFieldType();
        int int17 = property14.get();
        int int18 = property14.get();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay20 = property14.setCopy("hi!");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"hi!\" for dayOfMonth is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay4);
        org.junit.Assert.assertNotNull(monthDay6);
        org.junit.Assert.assertNotNull(monthDay8);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
    }

    @Test
    public void test0852() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0852");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay1.plus(readablePeriod6);
        org.joda.time.MonthDay monthDay9 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MonthDay monthDay11 = monthDay9.withChronologyRetainFields(chronology10);
        org.joda.time.MonthDay monthDay13 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MonthDay monthDay15 = monthDay13.withChronologyRetainFields(chronology14);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = monthDay13.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property18 = monthDay11.property(dateTimeFieldType17);
        int int19 = property18.get();
        org.joda.time.MonthDay monthDay21 = property18.addWrapFieldToCopy((int) (short) 1);
        boolean boolean22 = monthDay1.isBefore((org.joda.time.ReadablePartial) monthDay21);
        org.joda.time.MonthDay monthDay24 = monthDay21.minusMonths((int) (byte) 100);
        org.joda.time.MonthDay monthDay26 = monthDay24.plusMonths(1);
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.MonthDay monthDay28 = monthDay24.minus(readablePeriod27);
        org.joda.time.MonthDay monthDay30 = org.joda.time.MonthDay.parse("");
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        org.joda.time.MonthDay monthDay33 = monthDay30.withPeriodAdded(readablePeriod31, 1);
        org.joda.time.MonthDay monthDay35 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.MonthDay monthDay37 = monthDay35.withChronologyRetainFields(chronology36);
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = monthDay35.getFieldType((int) (byte) 1);
        int int40 = monthDay33.indexOf(dateTimeFieldType39);
        org.joda.time.MonthDay.Property property41 = monthDay28.property(dateTimeFieldType39);
        java.util.Locale locale42 = null;
        int int43 = property41.getMaximumShortTextLength(locale42);
        java.lang.String str44 = property41.getAsShortText();
        int int45 = property41.getMaximumValueOverall();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(monthDay9);
        org.junit.Assert.assertNotNull(monthDay11);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertNotNull(monthDay26);
        org.junit.Assert.assertNotNull(monthDay28);
        org.junit.Assert.assertNotNull(monthDay30);
        org.junit.Assert.assertNotNull(monthDay33);
        org.junit.Assert.assertNotNull(monthDay35);
        org.junit.Assert.assertNotNull(monthDay37);
        org.junit.Assert.assertNotNull(dateTimeFieldType39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2 + "'", int43 == 2);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "2" + "'", str44, "2");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 31 + "'", int45 == 31);
    }

    @Test
    public void test0853() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0853");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property6 = monthDay1.dayOfMonth();
        org.joda.time.Chronology chronology7 = monthDay1.getChronology();
        org.joda.time.Chronology chronology8 = monthDay1.getChronology();
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.DateTime dateTime10 = monthDay1.toDateTime(readableInstant9);
        org.joda.time.MonthDay monthDay12 = monthDay1.plusMonths((int) ' ');
        org.joda.time.DateTimeField[] dateTimeFieldArray13 = monthDay12.getFields();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter14 = null;
        java.lang.String str15 = monthDay12.toString(dateTimeFormatter14);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(monthDay12);
        org.junit.Assert.assertNotNull(dateTimeFieldArray13);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "--09-01" + "'", str15, "--09-01");
    }

    @Test
    public void test0854() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0854");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        java.util.Locale locale11 = null;
        int int12 = property10.getMaximumTextLength(locale11);
        java.util.Locale locale13 = null;
        int int14 = property10.getMaximumShortTextLength(locale13);
        org.joda.time.MonthDay monthDay16 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MonthDay monthDay18 = monthDay16.withChronologyRetainFields(chronology17);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = monthDay16.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property21 = monthDay16.dayOfMonth();
        org.joda.time.Chronology chronology22 = monthDay16.getChronology();
        org.joda.time.Chronology chronology23 = monthDay16.getChronology();
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.DateTime dateTime25 = monthDay16.toDateTime(readableInstant24);
        org.joda.time.MonthDay monthDay27 = monthDay16.plusMonths((int) ' ');
        org.joda.time.MonthDay monthDay29 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.MonthDay monthDay31 = monthDay29.withChronologyRetainFields(chronology30);
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = monthDay29.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod34 = null;
        org.joda.time.MonthDay monthDay35 = monthDay29.plus(readablePeriod34);
        org.joda.time.MonthDay monthDay37 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.MonthDay monthDay39 = monthDay37.withChronologyRetainFields(chronology38);
        org.joda.time.MonthDay monthDay41 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.MonthDay monthDay43 = monthDay41.withChronologyRetainFields(chronology42);
        org.joda.time.DateTimeFieldType dateTimeFieldType45 = monthDay41.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property46 = monthDay39.property(dateTimeFieldType45);
        int int47 = property46.get();
        org.joda.time.MonthDay monthDay49 = property46.addWrapFieldToCopy((int) (short) 1);
        boolean boolean50 = monthDay29.isBefore((org.joda.time.ReadablePartial) monthDay49);
        org.joda.time.MonthDay monthDay52 = monthDay49.minusMonths((int) (byte) 100);
        org.joda.time.MonthDay monthDay54 = monthDay52.plusMonths(1);
        org.joda.time.ReadablePeriod readablePeriod55 = null;
        org.joda.time.MonthDay monthDay56 = monthDay52.minus(readablePeriod55);
        org.joda.time.DateTimeZone dateTimeZone57 = null;
        org.joda.time.MonthDay monthDay58 = new org.joda.time.MonthDay(dateTimeZone57);
        boolean boolean59 = monthDay56.isEqual((org.joda.time.ReadablePartial) monthDay58);
        boolean boolean60 = monthDay16.equals((java.lang.Object) monthDay56);
        org.joda.time.MonthDay.Property property61 = monthDay56.dayOfMonth();
        org.joda.time.MonthDay monthDay63 = org.joda.time.MonthDay.parse("");
        org.joda.time.ReadablePeriod readablePeriod64 = null;
        org.joda.time.MonthDay monthDay66 = monthDay63.withPeriodAdded(readablePeriod64, 1);
        org.joda.time.MonthDay monthDay68 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology69 = null;
        org.joda.time.MonthDay monthDay70 = monthDay68.withChronologyRetainFields(chronology69);
        org.joda.time.DateTimeFieldType dateTimeFieldType72 = monthDay68.getFieldType((int) (byte) 1);
        int int73 = monthDay66.indexOf(dateTimeFieldType72);
        org.joda.time.Chronology chronology74 = null;
        org.joda.time.MonthDay monthDay75 = monthDay66.withChronologyRetainFields(chronology74);
        org.joda.time.MonthDay monthDay77 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology78 = null;
        org.joda.time.MonthDay monthDay79 = monthDay77.withChronologyRetainFields(chronology78);
        org.joda.time.DateTimeFieldType dateTimeFieldType81 = monthDay77.getFieldType((int) (byte) 1);
        int int82 = monthDay66.get(dateTimeFieldType81);
        org.joda.time.MonthDay monthDay84 = monthDay66.plusDays(0);
        int int85 = property61.compareTo((org.joda.time.ReadablePartial) monthDay66);
        int int86 = property10.compareTo((org.joda.time.ReadablePartial) monthDay66);
        org.joda.time.DurationField durationField87 = property10.getRangeDurationField();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(monthDay18);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(monthDay27);
        org.junit.Assert.assertNotNull(monthDay29);
        org.junit.Assert.assertNotNull(monthDay31);
        org.junit.Assert.assertNotNull(dateTimeFieldType33);
        org.junit.Assert.assertNotNull(monthDay35);
        org.junit.Assert.assertNotNull(monthDay37);
        org.junit.Assert.assertNotNull(monthDay39);
        org.junit.Assert.assertNotNull(monthDay41);
        org.junit.Assert.assertNotNull(monthDay43);
        org.junit.Assert.assertNotNull(dateTimeFieldType45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(monthDay49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(monthDay52);
        org.junit.Assert.assertNotNull(monthDay54);
        org.junit.Assert.assertNotNull(monthDay56);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertNotNull(monthDay63);
        org.junit.Assert.assertNotNull(monthDay66);
        org.junit.Assert.assertNotNull(monthDay68);
        org.junit.Assert.assertNotNull(monthDay70);
        org.junit.Assert.assertNotNull(dateTimeFieldType72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 1 + "'", int73 == 1);
        org.junit.Assert.assertNotNull(monthDay75);
        org.junit.Assert.assertNotNull(monthDay77);
        org.junit.Assert.assertNotNull(monthDay79);
        org.junit.Assert.assertNotNull(dateTimeFieldType81);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 1 + "'", int82 == 1);
        org.junit.Assert.assertNotNull(monthDay84);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 1 + "'", int85 == 1);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertNotNull(durationField87);
    }

    @Test
    public void test0855() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0855");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay1.plus(readablePeriod6);
        org.joda.time.MonthDay monthDay9 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MonthDay monthDay11 = monthDay9.withChronologyRetainFields(chronology10);
        org.joda.time.MonthDay monthDay13 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MonthDay monthDay15 = monthDay13.withChronologyRetainFields(chronology14);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = monthDay13.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property18 = monthDay11.property(dateTimeFieldType17);
        int int19 = property18.get();
        org.joda.time.MonthDay monthDay21 = property18.addWrapFieldToCopy((int) (short) 1);
        boolean boolean22 = monthDay1.isBefore((org.joda.time.ReadablePartial) monthDay21);
        org.joda.time.DateTimeField[] dateTimeFieldArray23 = monthDay1.getFields();
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.MonthDay monthDay25 = monthDay1.minus(readablePeriod24);
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        org.joda.time.MonthDay monthDay28 = monthDay1.withPeriodAdded(readablePeriod26, (int) (byte) -1);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.MonthDay monthDay31 = new org.joda.time.MonthDay((long) (short) 100, chronology30);
        org.joda.time.MonthDay monthDay33 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MonthDay monthDay35 = monthDay33.withChronologyRetainFields(chronology34);
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = monthDay33.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property38 = monthDay33.dayOfMonth();
        org.joda.time.Chronology chronology39 = monthDay33.getChronology();
        org.joda.time.Chronology chronology40 = monthDay33.getChronology();
        org.joda.time.ReadableInstant readableInstant41 = null;
        org.joda.time.DateTime dateTime42 = monthDay33.toDateTime(readableInstant41);
        org.joda.time.DateTime dateTime43 = monthDay31.toDateTime(readableInstant41);
        org.joda.time.DateTime dateTime44 = monthDay1.toDateTime((org.joda.time.ReadableInstant) dateTime43);
        org.joda.time.ReadablePeriod readablePeriod45 = null;
        org.joda.time.MonthDay monthDay46 = monthDay1.minus(readablePeriod45);
        int[] intArray47 = monthDay1.getValues();
        java.lang.Class<?> wildcardClass48 = intArray47.getClass();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(monthDay9);
        org.junit.Assert.assertNotNull(monthDay11);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldArray23);
        org.junit.Assert.assertNotNull(monthDay25);
        org.junit.Assert.assertNotNull(monthDay28);
        org.junit.Assert.assertNotNull(monthDay33);
        org.junit.Assert.assertNotNull(monthDay35);
        org.junit.Assert.assertNotNull(dateTimeFieldType37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(monthDay46);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[1, 1]");
        org.junit.Assert.assertNotNull(wildcardClass48);
    }

    @Test
    public void test0856() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0856");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        int int11 = property10.get();
        org.joda.time.MonthDay monthDay13 = property10.addWrapFieldToCopy((int) (short) 1);
        org.joda.time.MonthDay.Property property14 = monthDay13.dayOfMonth();
        int int15 = property14.getMaximumValueOverall();
        java.util.Locale locale17 = null;
        org.joda.time.MonthDay monthDay18 = property14.setCopy("1", locale17);
        org.joda.time.MonthDay monthDay20 = org.joda.time.MonthDay.parse("");
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.MonthDay monthDay23 = monthDay20.withPeriodAdded(readablePeriod21, 1);
        org.joda.time.MonthDay monthDay25 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MonthDay monthDay27 = monthDay25.withChronologyRetainFields(chronology26);
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = monthDay25.getFieldType((int) (byte) 1);
        int int30 = monthDay23.indexOf(dateTimeFieldType29);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MonthDay monthDay32 = monthDay23.withChronologyRetainFields(chronology31);
        org.joda.time.MonthDay monthDay34 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.MonthDay monthDay36 = monthDay34.withChronologyRetainFields(chronology35);
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = monthDay34.getFieldType((int) (byte) 1);
        int int39 = monthDay23.get(dateTimeFieldType38);
        org.joda.time.DateTimeFieldType dateTimeFieldType40 = null;
        boolean boolean41 = monthDay23.isSupported(dateTimeFieldType40);
        int int42 = monthDay18.compareTo((org.joda.time.ReadablePartial) monthDay23);
        org.joda.time.ReadablePeriod readablePeriod43 = null;
        org.joda.time.MonthDay monthDay44 = monthDay18.minus(readablePeriod43);
        int int45 = monthDay44.size();
        org.joda.time.DateTimeField dateTimeField47 = monthDay44.getField((int) (short) 0);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 31 + "'", int15 == 31);
        org.junit.Assert.assertNotNull(monthDay18);
        org.junit.Assert.assertNotNull(monthDay20);
        org.junit.Assert.assertNotNull(monthDay23);
        org.junit.Assert.assertNotNull(monthDay25);
        org.junit.Assert.assertNotNull(monthDay27);
        org.junit.Assert.assertNotNull(dateTimeFieldType29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(monthDay32);
        org.junit.Assert.assertNotNull(monthDay34);
        org.junit.Assert.assertNotNull(monthDay36);
        org.junit.Assert.assertNotNull(dateTimeFieldType38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(monthDay44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2 + "'", int45 == 2);
        org.junit.Assert.assertNotNull(dateTimeField47);
    }

    @Test
    public void test0857() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0857");
        org.joda.time.MonthDay monthDay1 = new org.joda.time.MonthDay((long) (byte) 0);
        org.joda.time.MonthDay monthDay3 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MonthDay monthDay5 = monthDay3.withChronologyRetainFields(chronology4);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = monthDay3.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.MonthDay monthDay9 = monthDay3.plus(readablePeriod8);
        org.joda.time.MonthDay monthDay11 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MonthDay monthDay13 = monthDay11.withChronologyRetainFields(chronology12);
        org.joda.time.MonthDay monthDay15 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MonthDay monthDay17 = monthDay15.withChronologyRetainFields(chronology16);
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = monthDay15.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property20 = monthDay13.property(dateTimeFieldType19);
        int int21 = property20.get();
        org.joda.time.MonthDay monthDay23 = property20.addWrapFieldToCopy((int) (short) 1);
        boolean boolean24 = monthDay3.isBefore((org.joda.time.ReadablePartial) monthDay23);
        org.joda.time.MonthDay monthDay26 = monthDay23.minusMonths((int) (byte) 100);
        org.joda.time.MonthDay monthDay28 = monthDay26.plusMonths(1);
        org.joda.time.MonthDay monthDay30 = monthDay26.minusMonths((int) (short) 10);
        boolean boolean31 = monthDay1.isBefore((org.joda.time.ReadablePartial) monthDay26);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(monthDay9);
        org.junit.Assert.assertNotNull(monthDay11);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(monthDay17);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(monthDay23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(monthDay26);
        org.junit.Assert.assertNotNull(monthDay28);
        org.junit.Assert.assertNotNull(monthDay30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
    }

    @Test
    public void test0858() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0858");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        int int11 = property10.get();
        org.joda.time.MonthDay monthDay13 = property10.addWrapFieldToCopy((int) (short) 1);
        org.joda.time.MonthDay.Property property14 = monthDay13.dayOfMonth();
        int int15 = property14.getMaximumValueOverall();
        java.util.Locale locale17 = null;
        org.joda.time.MonthDay monthDay18 = property14.setCopy("1", locale17);
        org.joda.time.MonthDay monthDay20 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.MonthDay monthDay22 = monthDay20.withChronologyRetainFields(chronology21);
        org.joda.time.MonthDay monthDay24 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MonthDay monthDay26 = monthDay24.withChronologyRetainFields(chronology25);
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = monthDay24.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property29 = monthDay22.property(dateTimeFieldType28);
        int int30 = property29.get();
        org.joda.time.MonthDay monthDay32 = property29.addWrapFieldToCopy((int) (short) 1);
        java.lang.String str33 = property29.getAsString();
        java.lang.String str34 = property29.getAsText();
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = property29.getFieldType();
        org.joda.time.MonthDay.Property property36 = monthDay18.property(dateTimeFieldType35);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str38 = monthDay18.toString("hi!");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: i");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 31 + "'", int15 == 31);
        org.junit.Assert.assertNotNull(monthDay18);
        org.junit.Assert.assertNotNull(monthDay20);
        org.junit.Assert.assertNotNull(monthDay22);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertNotNull(monthDay26);
        org.junit.Assert.assertNotNull(dateTimeFieldType28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(monthDay32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "1" + "'", str33, "1");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "1" + "'", str34, "1");
        org.junit.Assert.assertNotNull(dateTimeFieldType35);
        org.junit.Assert.assertNotNull(property36);
    }

    @Test
    public void test0859() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0859");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay1.plus(readablePeriod6);
        org.joda.time.MonthDay monthDay9 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MonthDay monthDay11 = monthDay9.withChronologyRetainFields(chronology10);
        org.joda.time.MonthDay monthDay13 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MonthDay monthDay15 = monthDay13.withChronologyRetainFields(chronology14);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = monthDay13.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property18 = monthDay11.property(dateTimeFieldType17);
        int int19 = property18.get();
        org.joda.time.MonthDay monthDay21 = property18.addWrapFieldToCopy((int) (short) 1);
        boolean boolean22 = monthDay1.isBefore((org.joda.time.ReadablePartial) monthDay21);
        org.joda.time.MonthDay monthDay24 = monthDay21.minusMonths((int) (byte) 100);
        int int25 = monthDay24.getMonthOfYear();
        org.joda.time.MonthDay monthDay27 = monthDay24.withMonthOfYear(1);
        int int28 = monthDay27.getMonthOfYear();
        org.joda.time.MonthDay monthDay30 = monthDay27.withMonthOfYear((int) (short) 1);
        org.joda.time.MonthDay monthDay32 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.MonthDay monthDay34 = monthDay32.withChronologyRetainFields(chronology33);
        org.joda.time.MonthDay monthDay36 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.MonthDay monthDay38 = monthDay36.withChronologyRetainFields(chronology37);
        org.joda.time.DateTimeFieldType dateTimeFieldType40 = monthDay36.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property41 = monthDay34.property(dateTimeFieldType40);
        org.joda.time.MonthDay.Property property42 = monthDay34.monthOfYear();
        org.joda.time.DurationField durationField43 = property42.getRangeDurationField();
        org.joda.time.MonthDay monthDay45 = property42.setCopy("1");
        org.joda.time.MonthDay monthDay47 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.MonthDay monthDay49 = monthDay47.withChronologyRetainFields(chronology48);
        org.joda.time.DateTimeFieldType dateTimeFieldType51 = monthDay47.getFieldType((int) (byte) 1);
        int int52 = monthDay45.indexOf(dateTimeFieldType51);
        org.joda.time.MonthDay.Property property53 = monthDay30.property(dateTimeFieldType51);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(monthDay9);
        org.junit.Assert.assertNotNull(monthDay11);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 9 + "'", int25 == 9);
        org.junit.Assert.assertNotNull(monthDay27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(monthDay30);
        org.junit.Assert.assertNotNull(monthDay32);
        org.junit.Assert.assertNotNull(monthDay34);
        org.junit.Assert.assertNotNull(monthDay36);
        org.junit.Assert.assertNotNull(monthDay38);
        org.junit.Assert.assertNotNull(dateTimeFieldType40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(durationField43);
        org.junit.Assert.assertNotNull(monthDay45);
        org.junit.Assert.assertNotNull(monthDay47);
        org.junit.Assert.assertNotNull(monthDay49);
        org.junit.Assert.assertNotNull(dateTimeFieldType51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertNotNull(property53);
    }

    @Test
    public void test0860() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0860");
        org.joda.time.MonthDay monthDay2 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MonthDay monthDay4 = monthDay2.withChronologyRetainFields(chronology3);
        org.joda.time.MonthDay monthDay6 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MonthDay monthDay8 = monthDay6.withChronologyRetainFields(chronology7);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = monthDay6.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property11 = monthDay6.dayOfMonth();
        org.joda.time.Chronology chronology12 = monthDay6.getChronology();
        org.joda.time.MonthDay monthDay13 = org.joda.time.MonthDay.now(chronology12);
        org.joda.time.MonthDay monthDay14 = monthDay4.withChronologyRetainFields(chronology12);
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.MonthDay monthDay16 = monthDay4.minus(readablePeriod15);
        org.joda.time.MonthDay monthDay18 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MonthDay monthDay20 = monthDay18.withChronologyRetainFields(chronology19);
        org.joda.time.MonthDay monthDay22 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MonthDay monthDay24 = monthDay22.withChronologyRetainFields(chronology23);
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = monthDay22.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property27 = monthDay20.property(dateTimeFieldType26);
        int int28 = property27.get();
        int int29 = property27.getMaximumValue();
        org.joda.time.MonthDay monthDay31 = property27.setCopy((int) (short) 1);
        org.joda.time.MonthDay monthDay33 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MonthDay monthDay35 = monthDay33.withChronologyRetainFields(chronology34);
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = monthDay33.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod38 = null;
        org.joda.time.MonthDay monthDay39 = monthDay33.plus(readablePeriod38);
        int int40 = monthDay33.getDayOfMonth();
        int int41 = property27.compareTo((org.joda.time.ReadablePartial) monthDay33);
        boolean boolean42 = monthDay16.isBefore((org.joda.time.ReadablePartial) monthDay33);
        org.joda.time.Chronology chronology43 = monthDay33.getChronology();
        org.joda.time.MonthDay monthDay44 = new org.joda.time.MonthDay((long) 2, chronology43);
        org.joda.time.MonthDay monthDay46 = monthDay44.minusMonths((int) (byte) 1);
        org.joda.time.MonthDay.Property property47 = monthDay44.dayOfMonth();
        int int48 = property47.getMaximumValue();
        org.junit.Assert.assertNotNull(monthDay2);
        org.junit.Assert.assertNotNull(monthDay4);
        org.junit.Assert.assertNotNull(monthDay6);
        org.junit.Assert.assertNotNull(monthDay8);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(monthDay18);
        org.junit.Assert.assertNotNull(monthDay20);
        org.junit.Assert.assertNotNull(monthDay22);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 31 + "'", int29 == 31);
        org.junit.Assert.assertNotNull(monthDay31);
        org.junit.Assert.assertNotNull(monthDay33);
        org.junit.Assert.assertNotNull(monthDay35);
        org.junit.Assert.assertNotNull(dateTimeFieldType37);
        org.junit.Assert.assertNotNull(monthDay39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(monthDay46);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 31 + "'", int48 == 31);
    }

    @Test
    public void test0861() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0861");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay2 = new org.joda.time.MonthDay(3, (int) '4');
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 52 for dayOfMonth must not be larger than 31");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0862() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0862");
        org.joda.time.MonthDay monthDay2 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MonthDay monthDay4 = monthDay2.withChronologyRetainFields(chronology3);
        org.joda.time.MonthDay monthDay6 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MonthDay monthDay8 = monthDay6.withChronologyRetainFields(chronology7);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = monthDay6.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property11 = monthDay4.property(dateTimeFieldType10);
        org.joda.time.MonthDay.Property property12 = monthDay4.monthOfYear();
        int int13 = monthDay4.getDayOfMonth();
        org.joda.time.MonthDay.Property property14 = monthDay4.dayOfMonth();
        int int15 = monthDay4.getDayOfMonth();
        org.joda.time.MonthDay monthDay17 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.MonthDay monthDay19 = monthDay17.withChronologyRetainFields(chronology18);
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = monthDay17.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property22 = monthDay17.dayOfMonth();
        org.joda.time.Chronology chronology23 = monthDay17.getChronology();
        org.joda.time.MonthDay monthDay24 = monthDay4.withChronologyRetainFields(chronology23);
        org.joda.time.MonthDay monthDay25 = new org.joda.time.MonthDay(chronology23);
        org.joda.time.MonthDay monthDay26 = new org.joda.time.MonthDay(chronology23);
        org.joda.time.MonthDay monthDay27 = org.joda.time.MonthDay.now(chronology23);
        org.joda.time.MonthDay monthDay28 = new org.joda.time.MonthDay(chronology23);
        org.joda.time.MonthDay monthDay29 = new org.joda.time.MonthDay((long) 10, chronology23);
        org.junit.Assert.assertNotNull(monthDay2);
        org.junit.Assert.assertNotNull(monthDay4);
        org.junit.Assert.assertNotNull(monthDay6);
        org.junit.Assert.assertNotNull(monthDay8);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(monthDay17);
        org.junit.Assert.assertNotNull(monthDay19);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertNotNull(monthDay27);
    }

    @Test
    public void test0863() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0863");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        java.util.Locale locale11 = null;
        int int12 = property10.getMaximumTextLength(locale11);
        org.joda.time.MonthDay monthDay14 = property10.addWrapFieldToCopy((int) (byte) 0);
        org.joda.time.MonthDay monthDay15 = new org.joda.time.MonthDay((java.lang.Object) monthDay14);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay17 = monthDay14.withMonthOfYear(30);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 30 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertNotNull(monthDay14);
    }

    @Test
    public void test0864() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0864");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.MonthDay monthDay4 = monthDay1.withPeriodAdded(readablePeriod2, 1);
        org.joda.time.MonthDay monthDay6 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MonthDay monthDay8 = monthDay6.withChronologyRetainFields(chronology7);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = monthDay6.getFieldType((int) (byte) 1);
        int int11 = monthDay4.indexOf(dateTimeFieldType10);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MonthDay monthDay13 = monthDay4.withChronologyRetainFields(chronology12);
        org.joda.time.MonthDay.Property property14 = monthDay13.dayOfMonth();
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = property14.getFieldType();
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = property14.getFieldType();
        int int17 = property14.get();
        int int18 = property14.get();
        java.lang.String str19 = property14.getName();
        int int20 = property14.get();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay4);
        org.junit.Assert.assertNotNull(monthDay6);
        org.junit.Assert.assertNotNull(monthDay8);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "dayOfMonth" + "'", str19, "dayOfMonth");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
    }

    @Test
    public void test0865() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0865");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        int int11 = property10.get();
        org.joda.time.DurationField durationField12 = property10.getDurationField();
        org.joda.time.MonthDay monthDay14 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MonthDay monthDay16 = monthDay14.withChronologyRetainFields(chronology15);
        org.joda.time.MonthDay monthDay18 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MonthDay monthDay20 = monthDay18.withChronologyRetainFields(chronology19);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = monthDay18.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property23 = monthDay16.property(dateTimeFieldType22);
        boolean boolean24 = property10.equals((java.lang.Object) monthDay16);
        java.util.Locale locale25 = null;
        java.lang.String str26 = property10.getAsShortText(locale25);
        java.lang.String str27 = property10.getAsShortText();
        java.lang.String str28 = property10.toString();
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = property10.getFieldType();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay31 = property10.setCopy((int) ' ');
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 32 for dayOfMonth must be in the range [1,31]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(monthDay18);
        org.junit.Assert.assertNotNull(monthDay20);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "1" + "'", str26, "1");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "1" + "'", str27, "1");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Property[dayOfMonth]" + "'", str28, "Property[dayOfMonth]");
        org.junit.Assert.assertNotNull(dateTimeFieldType29);
    }

    @Test
    public void test0866() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0866");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property6 = monthDay1.dayOfMonth();
        org.joda.time.MonthDay monthDay8 = property6.addWrapFieldToCopy(1);
        org.joda.time.MonthDay monthDay10 = property6.addWrapFieldToCopy(0);
        org.joda.time.MonthDay monthDay12 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MonthDay monthDay14 = monthDay12.withChronologyRetainFields(chronology13);
        org.joda.time.MonthDay monthDay16 = monthDay12.minusMonths((int) (byte) -1);
        boolean boolean17 = property6.equals((java.lang.Object) monthDay16);
        java.lang.String str18 = property6.getAsShortText();
        org.joda.time.DateTimeField dateTimeField19 = property6.getField();
        org.joda.time.MonthDay monthDay21 = org.joda.time.MonthDay.parse("");
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.MonthDay monthDay24 = monthDay21.withPeriodAdded(readablePeriod22, 1);
        org.joda.time.MonthDay monthDay26 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.MonthDay monthDay28 = monthDay26.withChronologyRetainFields(chronology27);
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = monthDay26.getFieldType((int) (byte) 1);
        int int31 = monthDay24.indexOf(dateTimeFieldType30);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.MonthDay monthDay33 = monthDay24.withChronologyRetainFields(chronology32);
        int int34 = property6.compareTo((org.joda.time.ReadablePartial) monthDay24);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField36 = monthDay24.getField((int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 100");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(monthDay8);
        org.junit.Assert.assertNotNull(monthDay10);
        org.junit.Assert.assertNotNull(monthDay12);
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "1" + "'", str18, "1");
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertNotNull(monthDay26);
        org.junit.Assert.assertNotNull(monthDay28);
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertNotNull(monthDay33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
    }

    @Test
    public void test0867() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0867");
        org.joda.time.MonthDay monthDay2 = org.joda.time.MonthDay.parse("");
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        org.joda.time.MonthDay monthDay5 = monthDay2.withPeriodAdded(readablePeriod3, 1);
        org.joda.time.MonthDay monthDay7 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MonthDay monthDay9 = monthDay7.withChronologyRetainFields(chronology8);
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = monthDay7.getFieldType((int) (byte) 1);
        int int12 = monthDay5.indexOf(dateTimeFieldType11);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MonthDay monthDay14 = monthDay5.withChronologyRetainFields(chronology13);
        org.joda.time.MonthDay monthDay16 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MonthDay monthDay18 = monthDay16.withChronologyRetainFields(chronology17);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = monthDay16.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.MonthDay monthDay22 = monthDay16.plus(readablePeriod21);
        org.joda.time.MonthDay monthDay24 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MonthDay monthDay26 = monthDay24.withChronologyRetainFields(chronology25);
        org.joda.time.MonthDay monthDay28 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MonthDay monthDay30 = monthDay28.withChronologyRetainFields(chronology29);
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = monthDay28.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property33 = monthDay26.property(dateTimeFieldType32);
        int int34 = property33.get();
        org.joda.time.MonthDay monthDay36 = property33.addWrapFieldToCopy((int) (short) 1);
        boolean boolean37 = monthDay16.isBefore((org.joda.time.ReadablePartial) monthDay36);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.MonthDay monthDay39 = monthDay16.withChronologyRetainFields(chronology38);
        org.joda.time.Chronology chronology40 = monthDay39.getChronology();
        org.joda.time.MonthDay monthDay41 = monthDay14.withChronologyRetainFields(chronology40);
        org.joda.time.MonthDay monthDay42 = new org.joda.time.MonthDay((long) 9, chronology40);
        org.joda.time.MonthDay monthDay43 = new org.joda.time.MonthDay((java.lang.Object) monthDay42);
        org.joda.time.DurationFieldType durationFieldType44 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay46 = monthDay43.withFieldAdded(durationFieldType44, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay2);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(monthDay9);
        org.junit.Assert.assertNotNull(dateTimeFieldType11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(monthDay18);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertNotNull(monthDay22);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertNotNull(monthDay26);
        org.junit.Assert.assertNotNull(monthDay28);
        org.junit.Assert.assertNotNull(monthDay30);
        org.junit.Assert.assertNotNull(dateTimeFieldType32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(monthDay36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(monthDay39);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(monthDay41);
    }

    @Test
    public void test0868() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0868");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        java.util.Locale locale11 = null;
        int int12 = property10.getMaximumTextLength(locale11);
        java.util.Locale locale13 = null;
        int int14 = property10.getMaximumShortTextLength(locale13);
        org.joda.time.DateTimeField dateTimeField15 = property10.getField();
        int int16 = property10.getMaximumValue();
        org.joda.time.MonthDay monthDay17 = property10.getMonthDay();
        int int18 = property10.getMinimumValue();
        org.joda.time.MonthDay monthDay20 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.MonthDay monthDay22 = monthDay20.withChronologyRetainFields(chronology21);
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = monthDay20.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property25 = monthDay20.dayOfMonth();
        org.joda.time.Chronology chronology26 = monthDay20.getChronology();
        org.joda.time.Chronology chronology27 = monthDay20.getChronology();
        org.joda.time.ReadableInstant readableInstant28 = null;
        org.joda.time.DateTime dateTime29 = monthDay20.toDateTime(readableInstant28);
        org.joda.time.MonthDay monthDay31 = monthDay20.plusMonths((int) ' ');
        int int32 = property10.compareTo((org.joda.time.ReadablePartial) monthDay20);
        boolean boolean34 = property10.equals((java.lang.Object) 30);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 31 + "'", int16 == 31);
        org.junit.Assert.assertNotNull(monthDay17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(monthDay20);
        org.junit.Assert.assertNotNull(monthDay22);
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(monthDay31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test0869() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0869");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        int int11 = property10.get();
        int int12 = property10.getMaximumValueOverall();
        java.util.Locale locale13 = null;
        int int14 = property10.getMaximumShortTextLength(locale13);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 31 + "'", int12 == 31);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
    }

    @Test
    public void test0870() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0870");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.MonthDay monthDay4 = monthDay1.withPeriodAdded(readablePeriod2, 1);
        org.joda.time.MonthDay monthDay6 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MonthDay monthDay8 = monthDay6.withChronologyRetainFields(chronology7);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = monthDay6.getFieldType((int) (byte) 1);
        int int11 = monthDay4.indexOf(dateTimeFieldType10);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MonthDay monthDay13 = monthDay4.withChronologyRetainFields(chronology12);
        org.joda.time.MonthDay monthDay15 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MonthDay monthDay17 = monthDay15.withChronologyRetainFields(chronology16);
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = monthDay15.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property20 = monthDay15.dayOfMonth();
        org.joda.time.Chronology chronology21 = monthDay15.getChronology();
        org.joda.time.Chronology chronology22 = monthDay15.getChronology();
        boolean boolean23 = monthDay4.isEqual((org.joda.time.ReadablePartial) monthDay15);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter24 = null;
        java.lang.String str25 = monthDay15.toString(dateTimeFormatter24);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MonthDay monthDay27 = monthDay15.withChronologyRetainFields(chronology26);
        int int28 = monthDay15.getDayOfMonth();
        java.lang.Class<?> wildcardClass29 = monthDay15.getClass();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay4);
        org.junit.Assert.assertNotNull(monthDay6);
        org.junit.Assert.assertNotNull(monthDay8);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(monthDay17);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "--01-01" + "'", str25, "--01-01");
        org.junit.Assert.assertNotNull(monthDay27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(wildcardClass29);
    }

    @Test
    public void test0871() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0871");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        int int11 = property10.get();
        org.joda.time.MonthDay monthDay13 = property10.addWrapFieldToCopy((int) (short) 1);
        org.joda.time.MonthDay.Property property14 = monthDay13.dayOfMonth();
        int int15 = property14.getMaximumValue();
        java.lang.String str16 = property14.getAsText();
        java.util.Locale locale17 = null;
        java.lang.String str18 = property14.getAsShortText(locale17);
        org.joda.time.MonthDay monthDay20 = property14.addToCopy((int) (short) 1);
        java.util.Locale locale22 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay23 = property14.setCopy("--01-31", locale22);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"--01-31\" for dayOfMonth is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 31 + "'", int15 == 31);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "2" + "'", str16, "2");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "2" + "'", str18, "2");
        org.junit.Assert.assertNotNull(monthDay20);
    }

    @Test
    public void test0872() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0872");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        int int11 = property10.get();
        org.joda.time.MonthDay monthDay13 = property10.addToCopy((int) (short) 0);
        int int14 = property10.getMinimumValueOverall();
        java.lang.String str15 = property10.getName();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "dayOfMonth" + "'", str15, "dayOfMonth");
    }

    @Test
    public void test0873() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0873");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay1.plus(readablePeriod6);
        org.joda.time.MonthDay monthDay9 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MonthDay monthDay11 = monthDay9.withChronologyRetainFields(chronology10);
        org.joda.time.MonthDay monthDay13 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MonthDay monthDay15 = monthDay13.withChronologyRetainFields(chronology14);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = monthDay13.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property18 = monthDay11.property(dateTimeFieldType17);
        int int19 = property18.get();
        org.joda.time.MonthDay monthDay21 = property18.addWrapFieldToCopy((int) (short) 1);
        boolean boolean22 = monthDay1.isBefore((org.joda.time.ReadablePartial) monthDay21);
        org.joda.time.MonthDay monthDay24 = monthDay21.minusMonths((int) (byte) 100);
        org.joda.time.MonthDay monthDay26 = monthDay24.plusMonths(1);
        int int27 = monthDay26.getDayOfMonth();
        org.joda.time.DateTimeField[] dateTimeFieldArray28 = monthDay26.getFields();
        org.joda.time.MonthDay monthDay30 = monthDay26.withMonthOfYear((int) (byte) 1);
        org.joda.time.Chronology chronology31 = monthDay30.getChronology();
        org.joda.time.MonthDay monthDay32 = new org.joda.time.MonthDay(chronology31);
        org.joda.time.MonthDay monthDay34 = monthDay32.withDayOfMonth(4);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(monthDay9);
        org.junit.Assert.assertNotNull(monthDay11);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertNotNull(monthDay26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2 + "'", int27 == 2);
        org.junit.Assert.assertNotNull(dateTimeFieldArray28);
        org.junit.Assert.assertNotNull(monthDay30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(monthDay34);
    }

    @Test
    public void test0874() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0874");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.MonthDay monthDay3 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MonthDay monthDay5 = monthDay3.withChronologyRetainFields(chronology4);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = monthDay3.getFieldType((int) (byte) 1);
        boolean boolean8 = monthDay1.isSupported(dateTimeFieldType7);
        org.joda.time.MonthDay monthDay10 = org.joda.time.MonthDay.parse("");
        org.joda.time.MonthDay monthDay12 = monthDay10.minusDays((int) '#');
        org.joda.time.MonthDay monthDay14 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MonthDay monthDay16 = monthDay14.withChronologyRetainFields(chronology15);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = monthDay14.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property19 = monthDay14.dayOfMonth();
        org.joda.time.Chronology chronology20 = monthDay14.getChronology();
        org.joda.time.Chronology chronology21 = monthDay14.getChronology();
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.DateTime dateTime23 = monthDay14.toDateTime(readableInstant22);
        org.joda.time.MonthDay monthDay25 = monthDay14.plusMonths((int) ' ');
        boolean boolean26 = monthDay10.isAfter((org.joda.time.ReadablePartial) monthDay25);
        boolean boolean27 = monthDay1.isBefore((org.joda.time.ReadablePartial) monthDay25);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.MonthDay monthDay29 = monthDay1.minus(readablePeriod28);
        org.joda.time.MonthDay monthDay31 = monthDay29.withMonthOfYear((int) (short) 1);
        org.joda.time.MonthDay monthDay33 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MonthDay monthDay35 = monthDay33.withChronologyRetainFields(chronology34);
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = monthDay33.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod38 = null;
        org.joda.time.MonthDay monthDay39 = monthDay33.plus(readablePeriod38);
        org.joda.time.MonthDay monthDay41 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.MonthDay monthDay43 = monthDay41.withChronologyRetainFields(chronology42);
        org.joda.time.MonthDay monthDay45 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.MonthDay monthDay47 = monthDay45.withChronologyRetainFields(chronology46);
        org.joda.time.DateTimeFieldType dateTimeFieldType49 = monthDay45.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property50 = monthDay43.property(dateTimeFieldType49);
        int int51 = property50.get();
        org.joda.time.MonthDay monthDay53 = property50.addWrapFieldToCopy((int) (short) 1);
        boolean boolean54 = monthDay33.isBefore((org.joda.time.ReadablePartial) monthDay53);
        org.joda.time.MonthDay monthDay56 = monthDay53.minusMonths((int) (byte) 100);
        org.joda.time.MonthDay monthDay58 = monthDay56.minusDays(31);
        org.joda.time.MonthDay monthDay60 = monthDay58.plusDays((int) (byte) 10);
        org.joda.time.MonthDay monthDay62 = monthDay58.minusMonths(2);
        java.lang.String str63 = monthDay58.toString();
        boolean boolean64 = monthDay29.isAfter((org.joda.time.ReadablePartial) monthDay58);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(monthDay10);
        org.junit.Assert.assertNotNull(monthDay12);
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(monthDay25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(monthDay29);
        org.junit.Assert.assertNotNull(monthDay31);
        org.junit.Assert.assertNotNull(monthDay33);
        org.junit.Assert.assertNotNull(monthDay35);
        org.junit.Assert.assertNotNull(dateTimeFieldType37);
        org.junit.Assert.assertNotNull(monthDay39);
        org.junit.Assert.assertNotNull(monthDay41);
        org.junit.Assert.assertNotNull(monthDay43);
        org.junit.Assert.assertNotNull(monthDay45);
        org.junit.Assert.assertNotNull(monthDay47);
        org.junit.Assert.assertNotNull(dateTimeFieldType49);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertNotNull(monthDay53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(monthDay56);
        org.junit.Assert.assertNotNull(monthDay58);
        org.junit.Assert.assertNotNull(monthDay60);
        org.junit.Assert.assertNotNull(monthDay62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "--08-02" + "'", str63, "--08-02");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
    }

    @Test
    public void test0875() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0875");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        int int11 = property10.get();
        org.joda.time.MonthDay monthDay13 = property10.addWrapFieldToCopy((int) (short) 1);
        org.joda.time.MonthDay.Property property14 = monthDay13.dayOfMonth();
        int int15 = property14.getMaximumValueOverall();
        int int16 = property14.getMinimumValueOverall();
        java.util.Locale locale18 = null;
        org.joda.time.MonthDay monthDay19 = property14.setCopy("2", locale18);
        org.joda.time.MonthDay.Property property20 = monthDay19.monthOfYear();
        java.util.Locale locale21 = null;
        int int22 = property20.getMaximumShortTextLength(locale21);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 31 + "'", int15 == 31);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(monthDay19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 3 + "'", int22 == 3);
    }

    @Test
    public void test0876() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0876");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property6 = monthDay1.dayOfMonth();
        org.joda.time.MonthDay monthDay8 = property6.addWrapFieldToCopy(1);
        org.joda.time.MonthDay monthDay10 = property6.addWrapFieldToCopy(0);
        org.joda.time.MonthDay monthDay12 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MonthDay monthDay14 = monthDay12.withChronologyRetainFields(chronology13);
        org.joda.time.MonthDay monthDay16 = monthDay12.minusMonths((int) (byte) -1);
        boolean boolean17 = property6.equals((java.lang.Object) monthDay16);
        int int18 = property6.get();
        org.joda.time.DurationField durationField19 = property6.getRangeDurationField();
        org.joda.time.MonthDay monthDay21 = property6.addWrapFieldToCopy((int) (byte) 1);
        int int22 = property6.get();
        int int23 = property6.getMinimumValueOverall();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(monthDay8);
        org.junit.Assert.assertNotNull(monthDay10);
        org.junit.Assert.assertNotNull(monthDay12);
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
    }

    @Test
    public void test0877() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0877");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        int int11 = property10.get();
        org.joda.time.DurationField durationField12 = property10.getDurationField();
        org.joda.time.MonthDay monthDay14 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MonthDay monthDay16 = monthDay14.withChronologyRetainFields(chronology15);
        org.joda.time.MonthDay monthDay18 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MonthDay monthDay20 = monthDay18.withChronologyRetainFields(chronology19);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = monthDay18.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property23 = monthDay16.property(dateTimeFieldType22);
        boolean boolean24 = property10.equals((java.lang.Object) monthDay16);
        org.joda.time.MonthDay monthDay25 = new org.joda.time.MonthDay((java.lang.Object) monthDay16);
        org.joda.time.MonthDay monthDay27 = org.joda.time.MonthDay.parse("");
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.MonthDay monthDay30 = monthDay27.withPeriodAdded(readablePeriod28, 1);
        org.joda.time.MonthDay monthDay32 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.MonthDay monthDay34 = monthDay32.withChronologyRetainFields(chronology33);
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = monthDay32.getFieldType((int) (byte) 1);
        int int37 = monthDay30.indexOf(dateTimeFieldType36);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.MonthDay monthDay39 = monthDay30.withChronologyRetainFields(chronology38);
        boolean boolean40 = monthDay25.isBefore((org.joda.time.ReadablePartial) monthDay39);
        org.joda.time.MonthDay monthDay42 = org.joda.time.MonthDay.parse("");
        org.joda.time.MonthDay monthDay44 = monthDay42.minusDays((int) '#');
        org.joda.time.MonthDay monthDay46 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.MonthDay monthDay48 = monthDay46.withChronologyRetainFields(chronology47);
        org.joda.time.DateTimeFieldType dateTimeFieldType50 = monthDay46.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property51 = monthDay46.dayOfMonth();
        org.joda.time.Chronology chronology52 = monthDay46.getChronology();
        org.joda.time.Chronology chronology53 = monthDay46.getChronology();
        org.joda.time.ReadableInstant readableInstant54 = null;
        org.joda.time.DateTime dateTime55 = monthDay46.toDateTime(readableInstant54);
        org.joda.time.MonthDay monthDay57 = monthDay46.plusMonths((int) ' ');
        boolean boolean58 = monthDay42.isAfter((org.joda.time.ReadablePartial) monthDay57);
        org.joda.time.MonthDay monthDay60 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.MonthDay monthDay62 = monthDay60.withChronologyRetainFields(chronology61);
        org.joda.time.DateTimeFieldType dateTimeFieldType64 = monthDay60.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod65 = null;
        org.joda.time.MonthDay monthDay66 = monthDay60.plus(readablePeriod65);
        org.joda.time.MonthDay monthDay68 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology69 = null;
        org.joda.time.MonthDay monthDay70 = monthDay68.withChronologyRetainFields(chronology69);
        org.joda.time.MonthDay monthDay72 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology73 = null;
        org.joda.time.MonthDay monthDay74 = monthDay72.withChronologyRetainFields(chronology73);
        org.joda.time.DateTimeFieldType dateTimeFieldType76 = monthDay72.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property77 = monthDay70.property(dateTimeFieldType76);
        int int78 = property77.get();
        org.joda.time.MonthDay monthDay80 = property77.addWrapFieldToCopy((int) (short) 1);
        boolean boolean81 = monthDay60.isBefore((org.joda.time.ReadablePartial) monthDay80);
        org.joda.time.MonthDay monthDay83 = monthDay80.minusMonths((int) (byte) 100);
        org.joda.time.MonthDay monthDay85 = monthDay83.plusMonths(1);
        int int86 = monthDay57.compareTo((org.joda.time.ReadablePartial) monthDay83);
        int int87 = monthDay25.compareTo((org.joda.time.ReadablePartial) monthDay83);
        int int88 = monthDay83.getMonthOfYear();
        org.joda.time.MonthDay monthDay90 = monthDay83.plusDays(100);
        org.joda.time.MonthDay.Property property91 = monthDay90.dayOfMonth();
        int int92 = property91.getMinimumValueOverall();
        int int93 = property91.getMinimumValueOverall();
        java.util.Locale locale94 = null;
        int int95 = property91.getMaximumTextLength(locale94);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(monthDay18);
        org.junit.Assert.assertNotNull(monthDay20);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(monthDay27);
        org.junit.Assert.assertNotNull(monthDay30);
        org.junit.Assert.assertNotNull(monthDay32);
        org.junit.Assert.assertNotNull(monthDay34);
        org.junit.Assert.assertNotNull(dateTimeFieldType36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(monthDay39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(monthDay42);
        org.junit.Assert.assertNotNull(monthDay44);
        org.junit.Assert.assertNotNull(monthDay46);
        org.junit.Assert.assertNotNull(monthDay48);
        org.junit.Assert.assertNotNull(dateTimeFieldType50);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(monthDay57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(monthDay60);
        org.junit.Assert.assertNotNull(monthDay62);
        org.junit.Assert.assertNotNull(dateTimeFieldType64);
        org.junit.Assert.assertNotNull(monthDay66);
        org.junit.Assert.assertNotNull(monthDay68);
        org.junit.Assert.assertNotNull(monthDay70);
        org.junit.Assert.assertNotNull(monthDay72);
        org.junit.Assert.assertNotNull(monthDay74);
        org.junit.Assert.assertNotNull(dateTimeFieldType76);
        org.junit.Assert.assertNotNull(property77);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 1 + "'", int78 == 1);
        org.junit.Assert.assertNotNull(monthDay80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertNotNull(monthDay83);
        org.junit.Assert.assertNotNull(monthDay85);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + (-1) + "'", int86 == (-1));
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + (-1) + "'", int87 == (-1));
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 9 + "'", int88 == 9);
        org.junit.Assert.assertNotNull(monthDay90);
        org.junit.Assert.assertNotNull(property91);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 1 + "'", int92 == 1);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 1 + "'", int93 == 1);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 2 + "'", int95 == 2);
    }

    @Test
    public void test0878() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0878");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        int int11 = property10.get();
        int int12 = property10.getMaximumValue();
        org.joda.time.MonthDay monthDay14 = property10.setCopy((int) (short) 1);
        org.joda.time.MonthDay monthDay16 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MonthDay monthDay18 = monthDay16.withChronologyRetainFields(chronology17);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = monthDay16.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.MonthDay monthDay22 = monthDay16.plus(readablePeriod21);
        int int23 = monthDay16.getDayOfMonth();
        int int24 = property10.compareTo((org.joda.time.ReadablePartial) monthDay16);
        org.joda.time.DateTimeField[] dateTimeFieldArray25 = monthDay16.getFields();
        org.joda.time.MonthDay monthDay27 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MonthDay monthDay29 = monthDay27.withChronologyRetainFields(chronology28);
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = monthDay27.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property32 = monthDay27.dayOfMonth();
        org.joda.time.MonthDay monthDay34 = property32.addWrapFieldToCopy(1);
        boolean boolean35 = monthDay16.isEqual((org.joda.time.ReadablePartial) monthDay34);
        org.joda.time.MonthDay monthDay37 = monthDay34.minusDays(3);
        org.joda.time.MonthDay monthDay39 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.MonthDay monthDay41 = monthDay39.withChronologyRetainFields(chronology40);
        org.joda.time.DateTimeFieldType dateTimeFieldType43 = monthDay39.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property44 = monthDay39.dayOfMonth();
        org.joda.time.Chronology chronology45 = monthDay39.getChronology();
        org.joda.time.Chronology chronology46 = monthDay39.getChronology();
        org.joda.time.ReadableInstant readableInstant47 = null;
        org.joda.time.DateTime dateTime48 = monthDay39.toDateTime(readableInstant47);
        org.joda.time.MonthDay monthDay50 = monthDay39.plusMonths((int) ' ');
        org.joda.time.MonthDay monthDay52 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.MonthDay monthDay54 = monthDay52.withChronologyRetainFields(chronology53);
        org.joda.time.DateTimeFieldType dateTimeFieldType56 = monthDay52.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod57 = null;
        org.joda.time.MonthDay monthDay58 = monthDay52.plus(readablePeriod57);
        org.joda.time.MonthDay monthDay60 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.MonthDay monthDay62 = monthDay60.withChronologyRetainFields(chronology61);
        org.joda.time.MonthDay monthDay64 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.MonthDay monthDay66 = monthDay64.withChronologyRetainFields(chronology65);
        org.joda.time.DateTimeFieldType dateTimeFieldType68 = monthDay64.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property69 = monthDay62.property(dateTimeFieldType68);
        int int70 = property69.get();
        org.joda.time.MonthDay monthDay72 = property69.addWrapFieldToCopy((int) (short) 1);
        boolean boolean73 = monthDay52.isBefore((org.joda.time.ReadablePartial) monthDay72);
        org.joda.time.MonthDay monthDay75 = monthDay72.minusMonths((int) (byte) 100);
        org.joda.time.MonthDay monthDay77 = monthDay75.plusMonths(1);
        org.joda.time.ReadablePeriod readablePeriod78 = null;
        org.joda.time.MonthDay monthDay79 = monthDay75.minus(readablePeriod78);
        org.joda.time.DateTimeZone dateTimeZone80 = null;
        org.joda.time.MonthDay monthDay81 = new org.joda.time.MonthDay(dateTimeZone80);
        boolean boolean82 = monthDay79.isEqual((org.joda.time.ReadablePartial) monthDay81);
        boolean boolean83 = monthDay39.equals((java.lang.Object) monthDay79);
        org.joda.time.MonthDay.Property property84 = monthDay79.dayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod85 = null;
        org.joda.time.MonthDay monthDay86 = monthDay79.plus(readablePeriod85);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray87 = monthDay79.getFieldTypes();
        org.joda.time.MonthDay monthDay89 = monthDay79.minusDays((int) (byte) 100);
        boolean boolean90 = monthDay37.isEqual((org.joda.time.ReadablePartial) monthDay79);
        int int91 = monthDay37.getDayOfMonth();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 31 + "'", int12 == 31);
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(monthDay18);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertNotNull(monthDay22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldArray25);
        org.junit.Assert.assertNotNull(monthDay27);
        org.junit.Assert.assertNotNull(monthDay29);
        org.junit.Assert.assertNotNull(dateTimeFieldType31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(monthDay34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(monthDay37);
        org.junit.Assert.assertNotNull(monthDay39);
        org.junit.Assert.assertNotNull(monthDay41);
        org.junit.Assert.assertNotNull(dateTimeFieldType43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(monthDay50);
        org.junit.Assert.assertNotNull(monthDay52);
        org.junit.Assert.assertNotNull(monthDay54);
        org.junit.Assert.assertNotNull(dateTimeFieldType56);
        org.junit.Assert.assertNotNull(monthDay58);
        org.junit.Assert.assertNotNull(monthDay60);
        org.junit.Assert.assertNotNull(monthDay62);
        org.junit.Assert.assertNotNull(monthDay64);
        org.junit.Assert.assertNotNull(monthDay66);
        org.junit.Assert.assertNotNull(dateTimeFieldType68);
        org.junit.Assert.assertNotNull(property69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 1 + "'", int70 == 1);
        org.junit.Assert.assertNotNull(monthDay72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(monthDay75);
        org.junit.Assert.assertNotNull(monthDay77);
        org.junit.Assert.assertNotNull(monthDay79);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(property84);
        org.junit.Assert.assertNotNull(monthDay86);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray87);
        org.junit.Assert.assertNotNull(monthDay89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 30 + "'", int91 == 30);
    }

    @Test
    public void test0879() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0879");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        int int11 = property10.get();
        java.util.Locale locale12 = null;
        int int13 = property10.getMaximumTextLength(locale12);
        org.joda.time.MonthDay monthDay15 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MonthDay monthDay17 = monthDay15.withChronologyRetainFields(chronology16);
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = monthDay15.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.MonthDay monthDay21 = monthDay15.plus(readablePeriod20);
        org.joda.time.MonthDay monthDay23 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MonthDay monthDay25 = monthDay23.withChronologyRetainFields(chronology24);
        org.joda.time.MonthDay monthDay27 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MonthDay monthDay29 = monthDay27.withChronologyRetainFields(chronology28);
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = monthDay27.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property32 = monthDay25.property(dateTimeFieldType31);
        int int33 = property32.get();
        org.joda.time.MonthDay monthDay35 = property32.addWrapFieldToCopy((int) (short) 1);
        boolean boolean36 = monthDay15.isBefore((org.joda.time.ReadablePartial) monthDay35);
        org.joda.time.MonthDay monthDay38 = monthDay35.minusMonths((int) (byte) 100);
        org.joda.time.MonthDay monthDay40 = monthDay38.minusDays(31);
        org.joda.time.MonthDay monthDay42 = org.joda.time.MonthDay.parse("");
        org.joda.time.ReadablePeriod readablePeriod43 = null;
        org.joda.time.MonthDay monthDay45 = monthDay42.withPeriodAdded(readablePeriod43, 1);
        org.joda.time.MonthDay monthDay47 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.MonthDay monthDay49 = monthDay47.withChronologyRetainFields(chronology48);
        org.joda.time.DateTimeFieldType dateTimeFieldType51 = monthDay47.getFieldType((int) (byte) 1);
        int int52 = monthDay45.indexOf(dateTimeFieldType51);
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.MonthDay monthDay54 = monthDay45.withChronologyRetainFields(chronology53);
        org.joda.time.MonthDay monthDay56 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.MonthDay monthDay58 = monthDay56.withChronologyRetainFields(chronology57);
        org.joda.time.DateTimeFieldType dateTimeFieldType60 = monthDay56.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod61 = null;
        org.joda.time.MonthDay monthDay62 = monthDay56.plus(readablePeriod61);
        org.joda.time.MonthDay monthDay64 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.MonthDay monthDay66 = monthDay64.withChronologyRetainFields(chronology65);
        org.joda.time.MonthDay monthDay68 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology69 = null;
        org.joda.time.MonthDay monthDay70 = monthDay68.withChronologyRetainFields(chronology69);
        org.joda.time.DateTimeFieldType dateTimeFieldType72 = monthDay68.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property73 = monthDay66.property(dateTimeFieldType72);
        int int74 = property73.get();
        org.joda.time.MonthDay monthDay76 = property73.addWrapFieldToCopy((int) (short) 1);
        boolean boolean77 = monthDay56.isBefore((org.joda.time.ReadablePartial) monthDay76);
        org.joda.time.Chronology chronology78 = null;
        org.joda.time.MonthDay monthDay79 = monthDay56.withChronologyRetainFields(chronology78);
        org.joda.time.Chronology chronology80 = monthDay79.getChronology();
        org.joda.time.MonthDay monthDay81 = monthDay54.withChronologyRetainFields(chronology80);
        org.joda.time.MonthDay monthDay82 = monthDay40.withChronologyRetainFields(chronology80);
        org.joda.time.Chronology chronology83 = monthDay82.getChronology();
        boolean boolean84 = property10.equals((java.lang.Object) chronology83);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(monthDay17);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertNotNull(monthDay23);
        org.junit.Assert.assertNotNull(monthDay25);
        org.junit.Assert.assertNotNull(monthDay27);
        org.junit.Assert.assertNotNull(monthDay29);
        org.junit.Assert.assertNotNull(dateTimeFieldType31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(monthDay35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(monthDay38);
        org.junit.Assert.assertNotNull(monthDay40);
        org.junit.Assert.assertNotNull(monthDay42);
        org.junit.Assert.assertNotNull(monthDay45);
        org.junit.Assert.assertNotNull(monthDay47);
        org.junit.Assert.assertNotNull(monthDay49);
        org.junit.Assert.assertNotNull(dateTimeFieldType51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertNotNull(monthDay54);
        org.junit.Assert.assertNotNull(monthDay56);
        org.junit.Assert.assertNotNull(monthDay58);
        org.junit.Assert.assertNotNull(dateTimeFieldType60);
        org.junit.Assert.assertNotNull(monthDay62);
        org.junit.Assert.assertNotNull(monthDay64);
        org.junit.Assert.assertNotNull(monthDay66);
        org.junit.Assert.assertNotNull(monthDay68);
        org.junit.Assert.assertNotNull(monthDay70);
        org.junit.Assert.assertNotNull(dateTimeFieldType72);
        org.junit.Assert.assertNotNull(property73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 1 + "'", int74 == 1);
        org.junit.Assert.assertNotNull(monthDay76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(monthDay79);
        org.junit.Assert.assertNotNull(chronology80);
        org.junit.Assert.assertNotNull(monthDay81);
        org.junit.Assert.assertNotNull(monthDay82);
        org.junit.Assert.assertNotNull(chronology83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
    }

    @Test
    public void test0880() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0880");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay1.plus(readablePeriod6);
        org.joda.time.MonthDay monthDay9 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MonthDay monthDay11 = monthDay9.withChronologyRetainFields(chronology10);
        org.joda.time.MonthDay monthDay13 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MonthDay monthDay15 = monthDay13.withChronologyRetainFields(chronology14);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = monthDay13.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property18 = monthDay11.property(dateTimeFieldType17);
        int int19 = property18.get();
        org.joda.time.MonthDay monthDay21 = property18.addWrapFieldToCopy((int) (short) 1);
        boolean boolean22 = monthDay1.isBefore((org.joda.time.ReadablePartial) monthDay21);
        org.joda.time.MonthDay monthDay24 = monthDay21.minusMonths((int) (byte) 100);
        int int25 = monthDay24.getDayOfMonth();
        org.joda.time.MonthDay monthDay27 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MonthDay monthDay29 = monthDay27.withChronologyRetainFields(chronology28);
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = monthDay27.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property32 = monthDay27.dayOfMonth();
        org.joda.time.Chronology chronology33 = monthDay27.getChronology();
        org.joda.time.Chronology chronology34 = monthDay27.getChronology();
        org.joda.time.ReadableInstant readableInstant35 = null;
        org.joda.time.DateTime dateTime36 = monthDay27.toDateTime(readableInstant35);
        org.joda.time.MonthDay monthDay38 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.MonthDay monthDay40 = monthDay38.withChronologyRetainFields(chronology39);
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = monthDay38.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod43 = null;
        org.joda.time.MonthDay monthDay44 = monthDay38.plus(readablePeriod43);
        org.joda.time.MonthDay monthDay46 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.MonthDay monthDay48 = monthDay46.withChronologyRetainFields(chronology47);
        org.joda.time.MonthDay monthDay50 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.MonthDay monthDay52 = monthDay50.withChronologyRetainFields(chronology51);
        org.joda.time.DateTimeFieldType dateTimeFieldType54 = monthDay50.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property55 = monthDay48.property(dateTimeFieldType54);
        int int56 = property55.get();
        org.joda.time.MonthDay monthDay58 = property55.addWrapFieldToCopy((int) (short) 1);
        boolean boolean59 = monthDay38.isBefore((org.joda.time.ReadablePartial) monthDay58);
        org.joda.time.DateTimeFieldType dateTimeFieldType61 = monthDay38.getFieldType(0);
        int int62 = monthDay27.get(dateTimeFieldType61);
        org.joda.time.MonthDay.Property property63 = monthDay24.property(dateTimeFieldType61);
        java.util.Locale locale65 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay66 = property63.setCopy("hi!", locale65);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"hi!\" for monthOfYear is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(monthDay9);
        org.junit.Assert.assertNotNull(monthDay11);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2 + "'", int25 == 2);
        org.junit.Assert.assertNotNull(monthDay27);
        org.junit.Assert.assertNotNull(monthDay29);
        org.junit.Assert.assertNotNull(dateTimeFieldType31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(monthDay38);
        org.junit.Assert.assertNotNull(monthDay40);
        org.junit.Assert.assertNotNull(dateTimeFieldType42);
        org.junit.Assert.assertNotNull(monthDay44);
        org.junit.Assert.assertNotNull(monthDay46);
        org.junit.Assert.assertNotNull(monthDay48);
        org.junit.Assert.assertNotNull(monthDay50);
        org.junit.Assert.assertNotNull(monthDay52);
        org.junit.Assert.assertNotNull(dateTimeFieldType54);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertNotNull(monthDay58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertNotNull(property63);
    }

    @Test
    public void test0881() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0881");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        org.joda.time.MonthDay.Property property11 = monthDay3.monthOfYear();
        java.util.Locale locale12 = null;
        int int13 = property11.getMaximumTextLength(locale12);
        int int14 = property11.getMaximumValue();
        java.lang.String str15 = property11.getAsShortText();
        org.joda.time.DurationField durationField16 = property11.getDurationField();
        java.lang.String str17 = property11.getAsString();
        int int18 = property11.getMaximumValue();
        org.joda.time.MonthDay monthDay20 = property11.addWrapFieldToCopy(2);
        java.lang.String str21 = property11.getAsText();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 9 + "'", int13 == 9);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 12 + "'", int14 == 12);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Jan" + "'", str15, "Jan");
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "1" + "'", str17, "1");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 12 + "'", int18 == 12);
        org.junit.Assert.assertNotNull(monthDay20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "January" + "'", str21, "January");
    }

    @Test
    public void test0882() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0882");
        org.joda.time.MonthDay monthDay3 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MonthDay monthDay5 = monthDay3.withChronologyRetainFields(chronology4);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = monthDay3.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property8 = monthDay3.dayOfMonth();
        org.joda.time.Chronology chronology9 = monthDay3.getChronology();
        org.joda.time.Chronology chronology10 = monthDay3.getChronology();
        org.joda.time.MonthDay monthDay11 = org.joda.time.MonthDay.now(chronology10);
        org.joda.time.MonthDay monthDay12 = org.joda.time.MonthDay.now(chronology10);
        org.joda.time.MonthDay monthDay13 = new org.joda.time.MonthDay(chronology10);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay14 = new org.joda.time.MonthDay(30, 30, chronology10);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 30 for monthOfYear must not be larger than 12");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(monthDay11);
        org.junit.Assert.assertNotNull(monthDay12);
    }

    @Test
    public void test0883() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0883");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay1.plus(readablePeriod6);
        org.joda.time.MonthDay monthDay9 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MonthDay monthDay11 = monthDay9.withChronologyRetainFields(chronology10);
        org.joda.time.MonthDay monthDay13 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MonthDay monthDay15 = monthDay13.withChronologyRetainFields(chronology14);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = monthDay13.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property18 = monthDay11.property(dateTimeFieldType17);
        int int19 = property18.get();
        org.joda.time.MonthDay monthDay21 = property18.addWrapFieldToCopy((int) (short) 1);
        boolean boolean22 = monthDay1.isBefore((org.joda.time.ReadablePartial) monthDay21);
        org.joda.time.MonthDay monthDay24 = monthDay21.minusMonths((int) (byte) 100);
        java.lang.String str26 = monthDay24.toString("1");
        int int28 = monthDay24.getValue(0);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay30 = monthDay24.withDayOfMonth((int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 0 for dayOfMonth must be in the range [1,30]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(monthDay9);
        org.junit.Assert.assertNotNull(monthDay11);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "1" + "'", str26, "1");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 9 + "'", int28 == 9);
    }

    @Test
    public void test0884() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0884");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        org.joda.time.MonthDay monthDay12 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MonthDay monthDay14 = monthDay12.withChronologyRetainFields(chronology13);
        org.joda.time.MonthDay monthDay16 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MonthDay monthDay18 = monthDay16.withChronologyRetainFields(chronology17);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = monthDay16.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property21 = monthDay14.property(dateTimeFieldType20);
        int int22 = property21.get();
        int int23 = property21.getMaximumValue();
        org.joda.time.MonthDay monthDay25 = property21.setCopy((int) (short) 1);
        org.joda.time.MonthDay monthDay27 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MonthDay monthDay29 = monthDay27.withChronologyRetainFields(chronology28);
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = monthDay27.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod32 = null;
        org.joda.time.MonthDay monthDay33 = monthDay27.plus(readablePeriod32);
        int int34 = monthDay27.getDayOfMonth();
        int int35 = property21.compareTo((org.joda.time.ReadablePartial) monthDay27);
        org.joda.time.DateTimeField[] dateTimeFieldArray36 = monthDay27.getFields();
        org.joda.time.MonthDay monthDay38 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.MonthDay monthDay40 = monthDay38.withChronologyRetainFields(chronology39);
        org.joda.time.MonthDay monthDay42 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.MonthDay monthDay44 = monthDay42.withChronologyRetainFields(chronology43);
        org.joda.time.DateTimeFieldType dateTimeFieldType46 = monthDay42.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property47 = monthDay40.property(dateTimeFieldType46);
        int int48 = property47.get();
        org.joda.time.DurationField durationField49 = property47.getDurationField();
        org.joda.time.MonthDay monthDay51 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.MonthDay monthDay53 = monthDay51.withChronologyRetainFields(chronology52);
        org.joda.time.MonthDay monthDay55 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.MonthDay monthDay57 = monthDay55.withChronologyRetainFields(chronology56);
        org.joda.time.DateTimeFieldType dateTimeFieldType59 = monthDay55.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property60 = monthDay53.property(dateTimeFieldType59);
        boolean boolean61 = property47.equals((java.lang.Object) monthDay53);
        int int62 = property47.getMinimumValueOverall();
        org.joda.time.DateTimeFieldType dateTimeFieldType63 = property47.getFieldType();
        org.joda.time.MonthDay monthDay65 = monthDay27.withField(dateTimeFieldType63, (int) (short) 10);
        org.joda.time.MonthDay monthDay67 = monthDay27.minusDays((-1));
        boolean boolean68 = monthDay3.isAfter((org.joda.time.ReadablePartial) monthDay27);
        org.joda.time.MonthDay monthDay70 = monthDay27.minusMonths((int) (byte) 10);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(monthDay12);
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(monthDay18);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 31 + "'", int23 == 31);
        org.junit.Assert.assertNotNull(monthDay25);
        org.junit.Assert.assertNotNull(monthDay27);
        org.junit.Assert.assertNotNull(monthDay29);
        org.junit.Assert.assertNotNull(dateTimeFieldType31);
        org.junit.Assert.assertNotNull(monthDay33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldArray36);
        org.junit.Assert.assertNotNull(monthDay38);
        org.junit.Assert.assertNotNull(monthDay40);
        org.junit.Assert.assertNotNull(monthDay42);
        org.junit.Assert.assertNotNull(monthDay44);
        org.junit.Assert.assertNotNull(dateTimeFieldType46);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertNotNull(durationField49);
        org.junit.Assert.assertNotNull(monthDay51);
        org.junit.Assert.assertNotNull(monthDay53);
        org.junit.Assert.assertNotNull(monthDay55);
        org.junit.Assert.assertNotNull(monthDay57);
        org.junit.Assert.assertNotNull(dateTimeFieldType59);
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType63);
        org.junit.Assert.assertNotNull(monthDay65);
        org.junit.Assert.assertNotNull(monthDay67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(monthDay70);
    }

    @Test
    public void test0885() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0885");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        int int11 = property10.get();
        org.joda.time.DurationField durationField12 = property10.getDurationField();
        java.util.Locale locale13 = null;
        int int14 = property10.getMaximumTextLength(locale13);
        org.joda.time.MonthDay monthDay16 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MonthDay monthDay18 = monthDay16.withChronologyRetainFields(chronology17);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = monthDay16.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property21 = monthDay16.dayOfMonth();
        org.joda.time.Chronology chronology22 = monthDay16.getChronology();
        org.joda.time.Chronology chronology23 = monthDay16.getChronology();
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.DateTime dateTime25 = monthDay16.toDateTime(readableInstant24);
        int int26 = property10.compareTo((org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.MonthDay monthDay28 = property10.addWrapFieldToCopy((int) '4');
        org.joda.time.MonthDay monthDay29 = property10.getMonthDay();
        java.lang.String str30 = property10.toString();
        java.lang.String str31 = property10.getAsShortText();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(monthDay18);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(monthDay28);
        org.junit.Assert.assertNotNull(monthDay29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Property[dayOfMonth]" + "'", str30, "Property[dayOfMonth]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "1" + "'", str31, "1");
    }

    @Test
    public void test0886() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0886");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        int int11 = property10.get();
        org.joda.time.MonthDay monthDay13 = property10.addWrapFieldToCopy((int) (short) 1);
        org.joda.time.MonthDay.Property property14 = monthDay13.dayOfMonth();
        int int15 = property14.getMaximumValue();
        java.lang.String str16 = property14.getAsText();
        java.util.Locale locale17 = null;
        java.lang.String str18 = property14.getAsShortText(locale17);
        org.joda.time.MonthDay monthDay20 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.MonthDay monthDay22 = monthDay20.withChronologyRetainFields(chronology21);
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = monthDay20.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        org.joda.time.MonthDay monthDay26 = monthDay20.plus(readablePeriod25);
        org.joda.time.MonthDay monthDay28 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MonthDay monthDay30 = monthDay28.withChronologyRetainFields(chronology29);
        org.joda.time.MonthDay monthDay32 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.MonthDay monthDay34 = monthDay32.withChronologyRetainFields(chronology33);
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = monthDay32.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property37 = monthDay30.property(dateTimeFieldType36);
        int int38 = property37.get();
        org.joda.time.MonthDay monthDay40 = property37.addWrapFieldToCopy((int) (short) 1);
        boolean boolean41 = monthDay20.isBefore((org.joda.time.ReadablePartial) monthDay40);
        org.joda.time.MonthDay monthDay43 = monthDay40.minusMonths((int) (byte) 100);
        int int44 = monthDay43.getMonthOfYear();
        org.joda.time.MonthDay monthDay46 = monthDay43.withMonthOfYear(1);
        org.joda.time.ReadablePeriod readablePeriod47 = null;
        org.joda.time.MonthDay monthDay48 = monthDay43.plus(readablePeriod47);
        int int49 = property14.compareTo((org.joda.time.ReadablePartial) monthDay48);
        org.joda.time.MonthDay monthDay51 = property14.addWrapFieldToCopy((int) '#');
        org.joda.time.MonthDay monthDay53 = property14.addToCopy(3);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField55 = monthDay53.getField(9);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 9");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 31 + "'", int15 == 31);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "2" + "'", str16, "2");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "2" + "'", str18, "2");
        org.junit.Assert.assertNotNull(monthDay20);
        org.junit.Assert.assertNotNull(monthDay22);
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertNotNull(monthDay26);
        org.junit.Assert.assertNotNull(monthDay28);
        org.junit.Assert.assertNotNull(monthDay30);
        org.junit.Assert.assertNotNull(monthDay32);
        org.junit.Assert.assertNotNull(monthDay34);
        org.junit.Assert.assertNotNull(dateTimeFieldType36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(monthDay40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(monthDay43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 9 + "'", int44 == 9);
        org.junit.Assert.assertNotNull(monthDay46);
        org.junit.Assert.assertNotNull(monthDay48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(monthDay51);
        org.junit.Assert.assertNotNull(monthDay53);
    }

    @Test
    public void test0887() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0887");
        java.lang.Object obj0 = null;
        org.joda.time.MonthDay monthDay1 = new org.joda.time.MonthDay(obj0);
        org.joda.time.MonthDay monthDay3 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MonthDay monthDay5 = monthDay3.withChronologyRetainFields(chronology4);
        org.joda.time.MonthDay monthDay7 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MonthDay monthDay9 = monthDay7.withChronologyRetainFields(chronology8);
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = monthDay7.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property12 = monthDay5.property(dateTimeFieldType11);
        org.joda.time.MonthDay.Property property13 = monthDay5.monthOfYear();
        org.joda.time.MonthDay monthDay15 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MonthDay monthDay17 = monthDay15.withChronologyRetainFields(chronology16);
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = monthDay15.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property20 = monthDay15.dayOfMonth();
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = property20.getFieldType();
        org.joda.time.MonthDay.Property property22 = monthDay5.property(dateTimeFieldType21);
        java.lang.String str23 = property22.toString();
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = property22.getFieldType();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay26 = monthDay1.withField(dateTimeFieldType24, (int) ' ');
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 32 for dayOfMonth must be in the range [1,30]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(monthDay9);
        org.junit.Assert.assertNotNull(dateTimeFieldType11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(monthDay17);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Property[dayOfMonth]" + "'", str23, "Property[dayOfMonth]");
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
    }

    @Test
    public void test0888() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0888");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay2 = new org.joda.time.MonthDay((int) (short) 10, (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 0 for dayOfMonth must not be smaller than 1");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0889() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0889");
        org.joda.time.MonthDay monthDay2 = new org.joda.time.MonthDay(12, 9);
    }

    @Test
    public void test0890() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0890");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay1.plus(readablePeriod6);
        org.joda.time.MonthDay monthDay9 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MonthDay monthDay11 = monthDay9.withChronologyRetainFields(chronology10);
        org.joda.time.MonthDay monthDay13 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MonthDay monthDay15 = monthDay13.withChronologyRetainFields(chronology14);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = monthDay13.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property18 = monthDay11.property(dateTimeFieldType17);
        int int19 = property18.get();
        org.joda.time.MonthDay monthDay21 = property18.addWrapFieldToCopy((int) (short) 1);
        boolean boolean22 = monthDay1.isBefore((org.joda.time.ReadablePartial) monthDay21);
        org.joda.time.MonthDay monthDay24 = monthDay21.minusMonths((int) (byte) 100);
        org.joda.time.MonthDay monthDay26 = monthDay24.plusMonths(1);
        org.joda.time.MonthDay monthDay28 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MonthDay monthDay30 = monthDay28.withChronologyRetainFields(chronology29);
        boolean boolean31 = monthDay24.isBefore((org.joda.time.ReadablePartial) monthDay30);
        org.joda.time.MonthDay monthDay33 = monthDay24.minusMonths((int) (byte) 10);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(monthDay9);
        org.junit.Assert.assertNotNull(monthDay11);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertNotNull(monthDay26);
        org.junit.Assert.assertNotNull(monthDay28);
        org.junit.Assert.assertNotNull(monthDay30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(monthDay33);
    }

    @Test
    public void test0891() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0891");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        org.joda.time.MonthDay.Property property11 = monthDay3.monthOfYear();
        org.joda.time.MonthDay monthDay13 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MonthDay monthDay15 = monthDay13.withChronologyRetainFields(chronology14);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = monthDay13.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property18 = monthDay13.dayOfMonth();
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = property18.getFieldType();
        org.joda.time.MonthDay.Property property20 = monthDay3.property(dateTimeFieldType19);
        int int21 = monthDay3.getMonthOfYear();
        org.joda.time.MonthDay monthDay23 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MonthDay monthDay25 = monthDay23.withChronologyRetainFields(chronology24);
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = monthDay23.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.MonthDay monthDay29 = monthDay23.plus(readablePeriod28);
        org.joda.time.MonthDay monthDay31 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.MonthDay monthDay33 = monthDay31.withChronologyRetainFields(chronology32);
        org.joda.time.MonthDay monthDay35 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.MonthDay monthDay37 = monthDay35.withChronologyRetainFields(chronology36);
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = monthDay35.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property40 = monthDay33.property(dateTimeFieldType39);
        int int41 = property40.get();
        org.joda.time.MonthDay monthDay43 = property40.addWrapFieldToCopy((int) (short) 1);
        boolean boolean44 = monthDay23.isBefore((org.joda.time.ReadablePartial) monthDay43);
        org.joda.time.DateTimeField[] dateTimeFieldArray45 = monthDay23.getFields();
        org.joda.time.ReadablePeriod readablePeriod46 = null;
        org.joda.time.MonthDay monthDay47 = monthDay23.minus(readablePeriod46);
        org.joda.time.ReadablePeriod readablePeriod48 = null;
        org.joda.time.MonthDay monthDay50 = monthDay23.withPeriodAdded(readablePeriod48, (int) (byte) -1);
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.MonthDay monthDay53 = new org.joda.time.MonthDay((long) (short) 100, chronology52);
        org.joda.time.MonthDay monthDay55 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.MonthDay monthDay57 = monthDay55.withChronologyRetainFields(chronology56);
        org.joda.time.DateTimeFieldType dateTimeFieldType59 = monthDay55.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property60 = monthDay55.dayOfMonth();
        org.joda.time.Chronology chronology61 = monthDay55.getChronology();
        org.joda.time.Chronology chronology62 = monthDay55.getChronology();
        org.joda.time.ReadableInstant readableInstant63 = null;
        org.joda.time.DateTime dateTime64 = monthDay55.toDateTime(readableInstant63);
        org.joda.time.DateTime dateTime65 = monthDay53.toDateTime(readableInstant63);
        org.joda.time.DateTime dateTime66 = monthDay23.toDateTime((org.joda.time.ReadableInstant) dateTime65);
        org.joda.time.DateTime dateTime67 = monthDay3.toDateTime((org.joda.time.ReadableInstant) dateTime65);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(monthDay23);
        org.junit.Assert.assertNotNull(monthDay25);
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertNotNull(monthDay29);
        org.junit.Assert.assertNotNull(monthDay31);
        org.junit.Assert.assertNotNull(monthDay33);
        org.junit.Assert.assertNotNull(monthDay35);
        org.junit.Assert.assertNotNull(monthDay37);
        org.junit.Assert.assertNotNull(dateTimeFieldType39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertNotNull(monthDay43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldArray45);
        org.junit.Assert.assertNotNull(monthDay47);
        org.junit.Assert.assertNotNull(monthDay50);
        org.junit.Assert.assertNotNull(monthDay55);
        org.junit.Assert.assertNotNull(monthDay57);
        org.junit.Assert.assertNotNull(dateTimeFieldType59);
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertNotNull(chronology61);
        org.junit.Assert.assertNotNull(chronology62);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(dateTime67);
    }

    @Test
    public void test0892() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0892");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        org.joda.time.MonthDay.Property property11 = monthDay3.monthOfYear();
        java.util.Locale locale12 = null;
        int int13 = property11.getMaximumTextLength(locale12);
        int int14 = property11.getMaximumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = property11.getFieldType();
        org.joda.time.DurationField durationField16 = property11.getDurationField();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 9 + "'", int13 == 9);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 12 + "'", int14 == 12);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(durationField16);
    }

    @Test
    public void test0893() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0893");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay1.plus(readablePeriod6);
        org.joda.time.MonthDay monthDay9 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MonthDay monthDay11 = monthDay9.withChronologyRetainFields(chronology10);
        org.joda.time.MonthDay monthDay13 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MonthDay monthDay15 = monthDay13.withChronologyRetainFields(chronology14);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = monthDay13.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property18 = monthDay11.property(dateTimeFieldType17);
        int int19 = property18.get();
        org.joda.time.MonthDay monthDay21 = property18.addWrapFieldToCopy((int) (short) 1);
        boolean boolean22 = monthDay1.isBefore((org.joda.time.ReadablePartial) monthDay21);
        org.joda.time.MonthDay monthDay24 = monthDay21.minusMonths((int) (byte) 100);
        org.joda.time.MonthDay monthDay26 = monthDay24.plusMonths(1);
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.MonthDay monthDay28 = monthDay24.minus(readablePeriod27);
        org.joda.time.MonthDay monthDay30 = org.joda.time.MonthDay.parse("");
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        org.joda.time.MonthDay monthDay33 = monthDay30.withPeriodAdded(readablePeriod31, 1);
        org.joda.time.MonthDay monthDay35 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.MonthDay monthDay37 = monthDay35.withChronologyRetainFields(chronology36);
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = monthDay35.getFieldType((int) (byte) 1);
        int int40 = monthDay33.indexOf(dateTimeFieldType39);
        org.joda.time.MonthDay.Property property41 = monthDay28.property(dateTimeFieldType39);
        java.util.Locale locale42 = null;
        int int43 = property41.getMaximumShortTextLength(locale42);
        org.joda.time.MonthDay monthDay44 = property41.getMonthDay();
        org.joda.time.MonthDay monthDay46 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.MonthDay monthDay48 = monthDay46.withChronologyRetainFields(chronology47);
        org.joda.time.DateTimeFieldType dateTimeFieldType50 = monthDay46.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod51 = null;
        org.joda.time.MonthDay monthDay52 = monthDay46.plus(readablePeriod51);
        org.joda.time.MonthDay monthDay54 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.MonthDay monthDay56 = monthDay54.withChronologyRetainFields(chronology55);
        org.joda.time.MonthDay monthDay58 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.MonthDay monthDay60 = monthDay58.withChronologyRetainFields(chronology59);
        org.joda.time.DateTimeFieldType dateTimeFieldType62 = monthDay58.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property63 = monthDay56.property(dateTimeFieldType62);
        int int64 = property63.get();
        org.joda.time.MonthDay monthDay66 = property63.addWrapFieldToCopy((int) (short) 1);
        boolean boolean67 = monthDay46.isBefore((org.joda.time.ReadablePartial) monthDay66);
        org.joda.time.MonthDay monthDay69 = monthDay66.minusMonths((int) (byte) 100);
        int int70 = monthDay69.getMonthOfYear();
        org.joda.time.MonthDay monthDay72 = monthDay69.withMonthOfYear(1);
        org.joda.time.ReadablePeriod readablePeriod73 = null;
        org.joda.time.MonthDay monthDay74 = monthDay69.plus(readablePeriod73);
        org.joda.time.MonthDay monthDay76 = monthDay74.withDayOfMonth(1);
        int int77 = property41.compareTo((org.joda.time.ReadablePartial) monthDay76);
        org.joda.time.MonthDay monthDay79 = property41.addWrapFieldToCopy(100);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay80 = new org.joda.time.MonthDay((java.lang.Object) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: java.lang.Integer");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(monthDay9);
        org.junit.Assert.assertNotNull(monthDay11);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertNotNull(monthDay26);
        org.junit.Assert.assertNotNull(monthDay28);
        org.junit.Assert.assertNotNull(monthDay30);
        org.junit.Assert.assertNotNull(monthDay33);
        org.junit.Assert.assertNotNull(monthDay35);
        org.junit.Assert.assertNotNull(monthDay37);
        org.junit.Assert.assertNotNull(dateTimeFieldType39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2 + "'", int43 == 2);
        org.junit.Assert.assertNotNull(monthDay44);
        org.junit.Assert.assertNotNull(monthDay46);
        org.junit.Assert.assertNotNull(monthDay48);
        org.junit.Assert.assertNotNull(dateTimeFieldType50);
        org.junit.Assert.assertNotNull(monthDay52);
        org.junit.Assert.assertNotNull(monthDay54);
        org.junit.Assert.assertNotNull(monthDay56);
        org.junit.Assert.assertNotNull(monthDay58);
        org.junit.Assert.assertNotNull(monthDay60);
        org.junit.Assert.assertNotNull(dateTimeFieldType62);
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertNotNull(monthDay66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(monthDay69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 9 + "'", int70 == 9);
        org.junit.Assert.assertNotNull(monthDay72);
        org.junit.Assert.assertNotNull(monthDay74);
        org.junit.Assert.assertNotNull(monthDay76);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertNotNull(monthDay79);
    }

    @Test
    public void test0894() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0894");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        java.util.Locale locale11 = null;
        int int12 = property10.getMaximumTextLength(locale11);
        int int13 = property10.getMinimumValue();
        org.joda.time.MonthDay monthDay15 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MonthDay monthDay17 = monthDay15.withChronologyRetainFields(chronology16);
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = monthDay15.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay monthDay21 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.MonthDay monthDay23 = monthDay21.withChronologyRetainFields(chronology22);
        org.joda.time.MonthDay monthDay25 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MonthDay monthDay27 = monthDay25.withChronologyRetainFields(chronology26);
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = monthDay25.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property30 = monthDay23.property(dateTimeFieldType29);
        int int31 = monthDay15.indexOf(dateTimeFieldType29);
        org.joda.time.MonthDay monthDay33 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MonthDay monthDay35 = monthDay33.withChronologyRetainFields(chronology34);
        org.joda.time.MonthDay monthDay37 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.MonthDay monthDay39 = monthDay37.withChronologyRetainFields(chronology38);
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = monthDay37.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property42 = monthDay35.property(dateTimeFieldType41);
        int int43 = property42.get();
        org.joda.time.MonthDay monthDay45 = property42.addToCopy((int) (short) 0);
        org.joda.time.MonthDay monthDay47 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.MonthDay monthDay49 = monthDay47.withChronologyRetainFields(chronology48);
        org.joda.time.MonthDay monthDay51 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.MonthDay monthDay53 = monthDay51.withChronologyRetainFields(chronology52);
        org.joda.time.DateTimeFieldType dateTimeFieldType55 = monthDay51.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property56 = monthDay49.property(dateTimeFieldType55);
        int int57 = property56.get();
        org.joda.time.DurationField durationField58 = property56.getDurationField();
        java.util.Locale locale59 = null;
        int int60 = property56.getMaximumTextLength(locale59);
        org.joda.time.MonthDay monthDay62 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.MonthDay monthDay64 = monthDay62.withChronologyRetainFields(chronology63);
        org.joda.time.DateTimeFieldType dateTimeFieldType66 = monthDay62.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property67 = monthDay62.dayOfMonth();
        org.joda.time.Chronology chronology68 = monthDay62.getChronology();
        org.joda.time.Chronology chronology69 = monthDay62.getChronology();
        org.joda.time.ReadableInstant readableInstant70 = null;
        org.joda.time.DateTime dateTime71 = monthDay62.toDateTime(readableInstant70);
        int int72 = property56.compareTo((org.joda.time.ReadableInstant) dateTime71);
        int int73 = property42.compareTo((org.joda.time.ReadableInstant) dateTime71);
        org.joda.time.DateTime dateTime74 = monthDay15.toDateTime((org.joda.time.ReadableInstant) dateTime71);
        int int75 = property10.compareTo((org.joda.time.ReadableInstant) dateTime71);
        int int76 = property10.getMaximumValueOverall();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(monthDay17);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertNotNull(monthDay23);
        org.junit.Assert.assertNotNull(monthDay25);
        org.junit.Assert.assertNotNull(monthDay27);
        org.junit.Assert.assertNotNull(dateTimeFieldType29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertNotNull(monthDay33);
        org.junit.Assert.assertNotNull(monthDay35);
        org.junit.Assert.assertNotNull(monthDay37);
        org.junit.Assert.assertNotNull(monthDay39);
        org.junit.Assert.assertNotNull(dateTimeFieldType41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertNotNull(monthDay45);
        org.junit.Assert.assertNotNull(monthDay47);
        org.junit.Assert.assertNotNull(monthDay49);
        org.junit.Assert.assertNotNull(monthDay51);
        org.junit.Assert.assertNotNull(monthDay53);
        org.junit.Assert.assertNotNull(dateTimeFieldType55);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertNotNull(durationField58);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 2 + "'", int60 == 2);
        org.junit.Assert.assertNotNull(monthDay62);
        org.junit.Assert.assertNotNull(monthDay64);
        org.junit.Assert.assertNotNull(dateTimeFieldType66);
        org.junit.Assert.assertNotNull(property67);
        org.junit.Assert.assertNotNull(chronology68);
        org.junit.Assert.assertNotNull(chronology69);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 31 + "'", int76 == 31);
    }

    @Test
    public void test0895() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0895");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        int int11 = property10.get();
        int int12 = property10.getMaximumValue();
        org.joda.time.MonthDay monthDay14 = property10.setCopy((int) (short) 1);
        org.joda.time.MonthDay monthDay16 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MonthDay monthDay18 = monthDay16.withChronologyRetainFields(chronology17);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = monthDay16.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.MonthDay monthDay22 = monthDay16.plus(readablePeriod21);
        int int23 = monthDay16.getDayOfMonth();
        int int24 = property10.compareTo((org.joda.time.ReadablePartial) monthDay16);
        org.joda.time.DateTimeField[] dateTimeFieldArray25 = monthDay16.getFields();
        org.joda.time.MonthDay monthDay27 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MonthDay monthDay29 = monthDay27.withChronologyRetainFields(chronology28);
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = monthDay27.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property32 = monthDay27.dayOfMonth();
        org.joda.time.MonthDay monthDay34 = property32.addWrapFieldToCopy(1);
        boolean boolean35 = monthDay16.isEqual((org.joda.time.ReadablePartial) monthDay34);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str37 = monthDay16.toString("Jan");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: J");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 31 + "'", int12 == 31);
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(monthDay18);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertNotNull(monthDay22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldArray25);
        org.junit.Assert.assertNotNull(monthDay27);
        org.junit.Assert.assertNotNull(monthDay29);
        org.junit.Assert.assertNotNull(dateTimeFieldType31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(monthDay34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test0896() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0896");
        org.joda.time.MonthDay monthDay2 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MonthDay monthDay4 = monthDay2.withChronologyRetainFields(chronology3);
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = monthDay2.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.MonthDay monthDay8 = monthDay2.plus(readablePeriod7);
        org.joda.time.MonthDay monthDay10 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MonthDay monthDay12 = monthDay10.withChronologyRetainFields(chronology11);
        org.joda.time.MonthDay monthDay14 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MonthDay monthDay16 = monthDay14.withChronologyRetainFields(chronology15);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = monthDay14.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property19 = monthDay12.property(dateTimeFieldType18);
        int int20 = property19.get();
        org.joda.time.MonthDay monthDay22 = property19.addWrapFieldToCopy((int) (short) 1);
        boolean boolean23 = monthDay2.isBefore((org.joda.time.ReadablePartial) monthDay22);
        org.joda.time.MonthDay monthDay25 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MonthDay monthDay27 = monthDay25.withChronologyRetainFields(chronology26);
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = monthDay25.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.MonthDay monthDay31 = monthDay25.plus(readablePeriod30);
        org.joda.time.MonthDay monthDay33 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MonthDay monthDay35 = monthDay33.withChronologyRetainFields(chronology34);
        org.joda.time.MonthDay monthDay37 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.MonthDay monthDay39 = monthDay37.withChronologyRetainFields(chronology38);
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = monthDay37.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property42 = monthDay35.property(dateTimeFieldType41);
        int int43 = property42.get();
        org.joda.time.MonthDay monthDay45 = property42.addWrapFieldToCopy((int) (short) 1);
        boolean boolean46 = monthDay25.isBefore((org.joda.time.ReadablePartial) monthDay45);
        org.joda.time.MonthDay monthDay48 = monthDay45.minusMonths((int) (byte) 100);
        org.joda.time.MonthDay monthDay50 = monthDay48.plusMonths(1);
        int int51 = monthDay48.size();
        org.joda.time.MonthDay monthDay53 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.MonthDay monthDay55 = monthDay53.withChronologyRetainFields(chronology54);
        org.joda.time.MonthDay monthDay57 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.MonthDay monthDay59 = monthDay57.withChronologyRetainFields(chronology58);
        org.joda.time.DateTimeFieldType dateTimeFieldType61 = monthDay57.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property62 = monthDay55.property(dateTimeFieldType61);
        int int63 = property62.get();
        org.joda.time.DurationField durationField64 = property62.getDurationField();
        org.joda.time.MonthDay monthDay66 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.MonthDay monthDay68 = monthDay66.withChronologyRetainFields(chronology67);
        org.joda.time.MonthDay monthDay70 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology71 = null;
        org.joda.time.MonthDay monthDay72 = monthDay70.withChronologyRetainFields(chronology71);
        org.joda.time.DateTimeFieldType dateTimeFieldType74 = monthDay70.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property75 = monthDay68.property(dateTimeFieldType74);
        boolean boolean76 = property62.equals((java.lang.Object) monthDay68);
        int int77 = property62.getMinimumValueOverall();
        org.joda.time.DateTimeFieldType dateTimeFieldType78 = property62.getFieldType();
        org.joda.time.MonthDay monthDay80 = monthDay48.withField(dateTimeFieldType78, (int) (byte) 1);
        int int81 = monthDay2.indexOf(dateTimeFieldType78);
        org.joda.time.MonthDay monthDay83 = monthDay2.minusMonths((int) ' ');
        org.joda.time.Chronology chronology84 = monthDay2.getChronology();
        org.joda.time.MonthDay monthDay85 = new org.joda.time.MonthDay((long) ' ', chronology84);
        org.joda.time.MonthDay monthDay86 = org.joda.time.MonthDay.now(chronology84);
        org.junit.Assert.assertNotNull(monthDay2);
        org.junit.Assert.assertNotNull(monthDay4);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(monthDay8);
        org.junit.Assert.assertNotNull(monthDay10);
        org.junit.Assert.assertNotNull(monthDay12);
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(monthDay22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(monthDay25);
        org.junit.Assert.assertNotNull(monthDay27);
        org.junit.Assert.assertNotNull(dateTimeFieldType29);
        org.junit.Assert.assertNotNull(monthDay31);
        org.junit.Assert.assertNotNull(monthDay33);
        org.junit.Assert.assertNotNull(monthDay35);
        org.junit.Assert.assertNotNull(monthDay37);
        org.junit.Assert.assertNotNull(monthDay39);
        org.junit.Assert.assertNotNull(dateTimeFieldType41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertNotNull(monthDay45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(monthDay48);
        org.junit.Assert.assertNotNull(monthDay50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 2 + "'", int51 == 2);
        org.junit.Assert.assertNotNull(monthDay53);
        org.junit.Assert.assertNotNull(monthDay55);
        org.junit.Assert.assertNotNull(monthDay57);
        org.junit.Assert.assertNotNull(monthDay59);
        org.junit.Assert.assertNotNull(dateTimeFieldType61);
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1 + "'", int63 == 1);
        org.junit.Assert.assertNotNull(durationField64);
        org.junit.Assert.assertNotNull(monthDay66);
        org.junit.Assert.assertNotNull(monthDay68);
        org.junit.Assert.assertNotNull(monthDay70);
        org.junit.Assert.assertNotNull(monthDay72);
        org.junit.Assert.assertNotNull(dateTimeFieldType74);
        org.junit.Assert.assertNotNull(property75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType78);
        org.junit.Assert.assertNotNull(monthDay80);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 1 + "'", int81 == 1);
        org.junit.Assert.assertNotNull(monthDay83);
        org.junit.Assert.assertNotNull(chronology84);
        org.junit.Assert.assertNotNull(monthDay86);
    }

    @Test
    public void test0897() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0897");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.MonthDay monthDay4 = monthDay1.withPeriodAdded(readablePeriod2, 1);
        org.joda.time.MonthDay monthDay6 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MonthDay monthDay8 = monthDay6.withChronologyRetainFields(chronology7);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = monthDay6.getFieldType((int) (byte) 1);
        int int11 = monthDay4.indexOf(dateTimeFieldType10);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MonthDay monthDay13 = monthDay4.withChronologyRetainFields(chronology12);
        org.joda.time.MonthDay monthDay15 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MonthDay monthDay17 = monthDay15.withChronologyRetainFields(chronology16);
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = monthDay15.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.MonthDay monthDay21 = monthDay15.plus(readablePeriod20);
        org.joda.time.MonthDay monthDay23 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MonthDay monthDay25 = monthDay23.withChronologyRetainFields(chronology24);
        org.joda.time.MonthDay monthDay27 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MonthDay monthDay29 = monthDay27.withChronologyRetainFields(chronology28);
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = monthDay27.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property32 = monthDay25.property(dateTimeFieldType31);
        int int33 = property32.get();
        org.joda.time.MonthDay monthDay35 = property32.addWrapFieldToCopy((int) (short) 1);
        boolean boolean36 = monthDay15.isBefore((org.joda.time.ReadablePartial) monthDay35);
        org.joda.time.MonthDay monthDay38 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.MonthDay monthDay40 = monthDay38.withChronologyRetainFields(chronology39);
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = monthDay38.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod43 = null;
        org.joda.time.MonthDay monthDay44 = monthDay38.plus(readablePeriod43);
        org.joda.time.MonthDay monthDay46 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.MonthDay monthDay48 = monthDay46.withChronologyRetainFields(chronology47);
        org.joda.time.MonthDay monthDay50 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.MonthDay monthDay52 = monthDay50.withChronologyRetainFields(chronology51);
        org.joda.time.DateTimeFieldType dateTimeFieldType54 = monthDay50.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property55 = monthDay48.property(dateTimeFieldType54);
        int int56 = property55.get();
        org.joda.time.MonthDay monthDay58 = property55.addWrapFieldToCopy((int) (short) 1);
        boolean boolean59 = monthDay38.isBefore((org.joda.time.ReadablePartial) monthDay58);
        org.joda.time.MonthDay monthDay61 = monthDay58.minusMonths((int) (byte) 100);
        org.joda.time.MonthDay monthDay63 = monthDay61.plusMonths(1);
        int int64 = monthDay61.size();
        org.joda.time.MonthDay monthDay66 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.MonthDay monthDay68 = monthDay66.withChronologyRetainFields(chronology67);
        org.joda.time.MonthDay monthDay70 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology71 = null;
        org.joda.time.MonthDay monthDay72 = monthDay70.withChronologyRetainFields(chronology71);
        org.joda.time.DateTimeFieldType dateTimeFieldType74 = monthDay70.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property75 = monthDay68.property(dateTimeFieldType74);
        int int76 = property75.get();
        org.joda.time.DurationField durationField77 = property75.getDurationField();
        org.joda.time.MonthDay monthDay79 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology80 = null;
        org.joda.time.MonthDay monthDay81 = monthDay79.withChronologyRetainFields(chronology80);
        org.joda.time.MonthDay monthDay83 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology84 = null;
        org.joda.time.MonthDay monthDay85 = monthDay83.withChronologyRetainFields(chronology84);
        org.joda.time.DateTimeFieldType dateTimeFieldType87 = monthDay83.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property88 = monthDay81.property(dateTimeFieldType87);
        boolean boolean89 = property75.equals((java.lang.Object) monthDay81);
        int int90 = property75.getMinimumValueOverall();
        org.joda.time.DateTimeFieldType dateTimeFieldType91 = property75.getFieldType();
        org.joda.time.MonthDay monthDay93 = monthDay61.withField(dateTimeFieldType91, (int) (byte) 1);
        int int94 = monthDay15.indexOf(dateTimeFieldType91);
        org.joda.time.MonthDay monthDay96 = monthDay13.withField(dateTimeFieldType91, 11);
        org.joda.time.DurationFieldType durationFieldType97 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay99 = monthDay96.withFieldAdded(durationFieldType97, 11);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay4);
        org.junit.Assert.assertNotNull(monthDay6);
        org.junit.Assert.assertNotNull(monthDay8);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(monthDay17);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertNotNull(monthDay23);
        org.junit.Assert.assertNotNull(monthDay25);
        org.junit.Assert.assertNotNull(monthDay27);
        org.junit.Assert.assertNotNull(monthDay29);
        org.junit.Assert.assertNotNull(dateTimeFieldType31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(monthDay35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(monthDay38);
        org.junit.Assert.assertNotNull(monthDay40);
        org.junit.Assert.assertNotNull(dateTimeFieldType42);
        org.junit.Assert.assertNotNull(monthDay44);
        org.junit.Assert.assertNotNull(monthDay46);
        org.junit.Assert.assertNotNull(monthDay48);
        org.junit.Assert.assertNotNull(monthDay50);
        org.junit.Assert.assertNotNull(monthDay52);
        org.junit.Assert.assertNotNull(dateTimeFieldType54);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertNotNull(monthDay58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(monthDay61);
        org.junit.Assert.assertNotNull(monthDay63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 2 + "'", int64 == 2);
        org.junit.Assert.assertNotNull(monthDay66);
        org.junit.Assert.assertNotNull(monthDay68);
        org.junit.Assert.assertNotNull(monthDay70);
        org.junit.Assert.assertNotNull(monthDay72);
        org.junit.Assert.assertNotNull(dateTimeFieldType74);
        org.junit.Assert.assertNotNull(property75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 1 + "'", int76 == 1);
        org.junit.Assert.assertNotNull(durationField77);
        org.junit.Assert.assertNotNull(monthDay79);
        org.junit.Assert.assertNotNull(monthDay81);
        org.junit.Assert.assertNotNull(monthDay83);
        org.junit.Assert.assertNotNull(monthDay85);
        org.junit.Assert.assertNotNull(dateTimeFieldType87);
        org.junit.Assert.assertNotNull(property88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 1 + "'", int90 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType91);
        org.junit.Assert.assertNotNull(monthDay93);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 1 + "'", int94 == 1);
        org.junit.Assert.assertNotNull(monthDay96);
    }

    @Test
    public void test0898() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0898");
        org.joda.time.MonthDay monthDay2 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MonthDay monthDay4 = monthDay2.withChronologyRetainFields(chronology3);
        org.joda.time.MonthDay monthDay6 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MonthDay monthDay8 = monthDay6.withChronologyRetainFields(chronology7);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = monthDay6.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property11 = monthDay6.dayOfMonth();
        org.joda.time.Chronology chronology12 = monthDay6.getChronology();
        org.joda.time.MonthDay monthDay13 = org.joda.time.MonthDay.now(chronology12);
        org.joda.time.MonthDay monthDay14 = monthDay4.withChronologyRetainFields(chronology12);
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.MonthDay monthDay16 = monthDay4.minus(readablePeriod15);
        org.joda.time.MonthDay monthDay18 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MonthDay monthDay20 = monthDay18.withChronologyRetainFields(chronology19);
        org.joda.time.MonthDay monthDay22 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MonthDay monthDay24 = monthDay22.withChronologyRetainFields(chronology23);
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = monthDay22.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property27 = monthDay20.property(dateTimeFieldType26);
        int int28 = property27.get();
        int int29 = property27.getMaximumValue();
        org.joda.time.MonthDay monthDay31 = property27.setCopy((int) (short) 1);
        org.joda.time.MonthDay monthDay33 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MonthDay monthDay35 = monthDay33.withChronologyRetainFields(chronology34);
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = monthDay33.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod38 = null;
        org.joda.time.MonthDay monthDay39 = monthDay33.plus(readablePeriod38);
        int int40 = monthDay33.getDayOfMonth();
        int int41 = property27.compareTo((org.joda.time.ReadablePartial) monthDay33);
        boolean boolean42 = monthDay16.isBefore((org.joda.time.ReadablePartial) monthDay33);
        org.joda.time.Chronology chronology43 = monthDay33.getChronology();
        org.joda.time.MonthDay monthDay44 = new org.joda.time.MonthDay((long) 2, chronology43);
        org.joda.time.MonthDay monthDay46 = monthDay44.minusMonths((int) (byte) 1);
        org.joda.time.MonthDay monthDay47 = new org.joda.time.MonthDay((java.lang.Object) monthDay46);
        int int48 = monthDay47.size();
        org.junit.Assert.assertNotNull(monthDay2);
        org.junit.Assert.assertNotNull(monthDay4);
        org.junit.Assert.assertNotNull(monthDay6);
        org.junit.Assert.assertNotNull(monthDay8);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(monthDay18);
        org.junit.Assert.assertNotNull(monthDay20);
        org.junit.Assert.assertNotNull(monthDay22);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 31 + "'", int29 == 31);
        org.junit.Assert.assertNotNull(monthDay31);
        org.junit.Assert.assertNotNull(monthDay33);
        org.junit.Assert.assertNotNull(monthDay35);
        org.junit.Assert.assertNotNull(dateTimeFieldType37);
        org.junit.Assert.assertNotNull(monthDay39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(monthDay46);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 2 + "'", int48 == 2);
    }

    @Test
    public void test0899() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0899");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay1.plus(readablePeriod6);
        org.joda.time.MonthDay monthDay9 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MonthDay monthDay11 = monthDay9.withChronologyRetainFields(chronology10);
        org.joda.time.MonthDay monthDay13 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MonthDay monthDay15 = monthDay13.withChronologyRetainFields(chronology14);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = monthDay13.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property18 = monthDay11.property(dateTimeFieldType17);
        int int19 = property18.get();
        org.joda.time.MonthDay monthDay21 = property18.addWrapFieldToCopy((int) (short) 1);
        boolean boolean22 = monthDay1.isBefore((org.joda.time.ReadablePartial) monthDay21);
        org.joda.time.MonthDay monthDay24 = monthDay21.minusMonths((int) (byte) -1);
        org.joda.time.MonthDay.Property property25 = monthDay24.monthOfYear();
        int int26 = property25.getMaximumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = property25.getFieldType();
        java.lang.String str28 = property25.getAsText();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(monthDay9);
        org.junit.Assert.assertNotNull(monthDay11);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 12 + "'", int26 == 12);
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "February" + "'", str28, "February");
    }

    @Test
    public void test0900() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0900");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        org.joda.time.MonthDay.Property property11 = monthDay3.monthOfYear();
        java.util.Locale locale12 = null;
        int int13 = property11.getMaximumTextLength(locale12);
        int int14 = property11.getMaximumValue();
        org.joda.time.MonthDay monthDay16 = property11.addWrapFieldToCopy((int) '#');
        java.util.Locale locale17 = null;
        java.lang.String str18 = property11.getAsText(locale17);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 9 + "'", int13 == 9);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 12 + "'", int14 == 12);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "January" + "'", str18, "January");
    }

    @Test
    public void test0901() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0901");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        org.joda.time.MonthDay.Property property11 = monthDay3.monthOfYear();
        org.joda.time.MonthDay monthDay13 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MonthDay monthDay15 = monthDay13.withChronologyRetainFields(chronology14);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = monthDay13.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay monthDay19 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MonthDay monthDay21 = monthDay19.withChronologyRetainFields(chronology20);
        org.joda.time.MonthDay monthDay23 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MonthDay monthDay25 = monthDay23.withChronologyRetainFields(chronology24);
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = monthDay23.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property28 = monthDay21.property(dateTimeFieldType27);
        int int29 = monthDay13.indexOf(dateTimeFieldType27);
        boolean boolean30 = monthDay3.equals((java.lang.Object) int29);
        org.joda.time.MonthDay monthDay32 = monthDay3.withMonthOfYear(9);
        org.joda.time.MonthDay monthDay34 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.MonthDay monthDay36 = monthDay34.withChronologyRetainFields(chronology35);
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = monthDay34.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod39 = null;
        org.joda.time.MonthDay monthDay40 = monthDay34.plus(readablePeriod39);
        org.joda.time.MonthDay monthDay42 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.MonthDay monthDay44 = monthDay42.withChronologyRetainFields(chronology43);
        org.joda.time.MonthDay monthDay46 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.MonthDay monthDay48 = monthDay46.withChronologyRetainFields(chronology47);
        org.joda.time.DateTimeFieldType dateTimeFieldType50 = monthDay46.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property51 = monthDay44.property(dateTimeFieldType50);
        int int52 = property51.get();
        org.joda.time.MonthDay monthDay54 = property51.addWrapFieldToCopy((int) (short) 1);
        boolean boolean55 = monthDay34.isBefore((org.joda.time.ReadablePartial) monthDay54);
        org.joda.time.MonthDay monthDay57 = monthDay54.minusMonths((int) (byte) 100);
        org.joda.time.MonthDay monthDay59 = monthDay57.plusMonths(1);
        org.joda.time.MonthDay monthDay61 = org.joda.time.MonthDay.parse("");
        org.joda.time.MonthDay monthDay63 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.MonthDay monthDay65 = monthDay63.withChronologyRetainFields(chronology64);
        org.joda.time.DateTimeFieldType dateTimeFieldType67 = monthDay63.getFieldType((int) (byte) 1);
        boolean boolean68 = monthDay61.isSupported(dateTimeFieldType67);
        boolean boolean69 = monthDay57.isSupported(dateTimeFieldType67);
        org.joda.time.Chronology chronology70 = monthDay57.getChronology();
        org.joda.time.MonthDay monthDay71 = monthDay32.withChronologyRetainFields(chronology70);
        org.joda.time.MonthDay monthDay73 = monthDay71.withDayOfMonth((int) (byte) 1);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(monthDay19);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertNotNull(monthDay23);
        org.junit.Assert.assertNotNull(monthDay25);
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(monthDay32);
        org.junit.Assert.assertNotNull(monthDay34);
        org.junit.Assert.assertNotNull(monthDay36);
        org.junit.Assert.assertNotNull(dateTimeFieldType38);
        org.junit.Assert.assertNotNull(monthDay40);
        org.junit.Assert.assertNotNull(monthDay42);
        org.junit.Assert.assertNotNull(monthDay44);
        org.junit.Assert.assertNotNull(monthDay46);
        org.junit.Assert.assertNotNull(monthDay48);
        org.junit.Assert.assertNotNull(dateTimeFieldType50);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertNotNull(monthDay54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(monthDay57);
        org.junit.Assert.assertNotNull(monthDay59);
        org.junit.Assert.assertNotNull(monthDay61);
        org.junit.Assert.assertNotNull(monthDay63);
        org.junit.Assert.assertNotNull(monthDay65);
        org.junit.Assert.assertNotNull(dateTimeFieldType67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(chronology70);
        org.junit.Assert.assertNotNull(monthDay71);
        org.junit.Assert.assertNotNull(monthDay73);
    }

    @Test
    public void test0902() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0902");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.MonthDay monthDay4 = monthDay1.withPeriodAdded(readablePeriod2, 1);
        org.joda.time.MonthDay monthDay6 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MonthDay monthDay8 = monthDay6.withChronologyRetainFields(chronology7);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = monthDay6.getFieldType((int) (byte) 1);
        int int11 = monthDay4.indexOf(dateTimeFieldType10);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MonthDay monthDay13 = monthDay4.withChronologyRetainFields(chronology12);
        org.joda.time.MonthDay.Property property14 = monthDay13.dayOfMonth();
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = property14.getFieldType();
        java.lang.String str16 = property14.getAsString();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay4);
        org.junit.Assert.assertNotNull(monthDay6);
        org.junit.Assert.assertNotNull(monthDay8);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "1" + "'", str16, "1");
    }

    @Test
    public void test0903() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0903");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay1.plus(readablePeriod6);
        org.joda.time.MonthDay monthDay9 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MonthDay monthDay11 = monthDay9.withChronologyRetainFields(chronology10);
        org.joda.time.MonthDay monthDay13 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MonthDay monthDay15 = monthDay13.withChronologyRetainFields(chronology14);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = monthDay13.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property18 = monthDay11.property(dateTimeFieldType17);
        int int19 = property18.get();
        org.joda.time.MonthDay monthDay21 = property18.addWrapFieldToCopy((int) (short) 1);
        boolean boolean22 = monthDay1.isBefore((org.joda.time.ReadablePartial) monthDay21);
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = monthDay1.getFieldType(0);
        // The following exception was thrown during execution in test generation
        try {
            int int26 = monthDay1.getValue((int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 32");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(monthDay9);
        org.junit.Assert.assertNotNull(monthDay11);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
    }

    @Test
    public void test0904() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0904");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        java.util.Locale locale11 = null;
        int int12 = property10.getMaximumTextLength(locale11);
        int int13 = property10.getMinimumValue();
        java.lang.String str14 = property10.getAsText();
        org.joda.time.MonthDay monthDay16 = property10.addWrapFieldToCopy(9);
        org.joda.time.DurationField durationField17 = property10.getDurationField();
        org.joda.time.MonthDay monthDay18 = property10.getMonthDay();
        java.util.Locale locale20 = null;
        java.lang.String str21 = monthDay18.toString("--11-24", locale20);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "1" + "'", str14, "1");
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(monthDay18);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "--11-24" + "'", str21, "--11-24");
    }

    @Test
    public void test0905() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0905");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        int int11 = property10.get();
        org.joda.time.MonthDay monthDay13 = property10.addToCopy((int) (short) 0);
        int int14 = property10.getMaximumValue();
        org.joda.time.MonthDay monthDay15 = property10.getMonthDay();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 31 + "'", int14 == 31);
        org.junit.Assert.assertNotNull(monthDay15);
    }

    @Test
    public void test0906() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0906");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        int int11 = property10.get();
        org.joda.time.DurationField durationField12 = property10.getDurationField();
        org.joda.time.MonthDay monthDay14 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MonthDay monthDay16 = monthDay14.withChronologyRetainFields(chronology15);
        org.joda.time.MonthDay monthDay18 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MonthDay monthDay20 = monthDay18.withChronologyRetainFields(chronology19);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = monthDay18.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property23 = monthDay16.property(dateTimeFieldType22);
        boolean boolean24 = property10.equals((java.lang.Object) monthDay16);
        java.lang.String str25 = property10.getAsShortText();
        java.lang.String str26 = property10.toString();
        java.util.Locale locale27 = null;
        int int28 = property10.getMaximumShortTextLength(locale27);
        boolean boolean30 = property10.equals((java.lang.Object) 0.0d);
        org.joda.time.MonthDay monthDay32 = org.joda.time.MonthDay.parse("");
        org.joda.time.ReadablePeriod readablePeriod33 = null;
        org.joda.time.MonthDay monthDay35 = monthDay32.withPeriodAdded(readablePeriod33, 1);
        org.joda.time.MonthDay monthDay37 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.MonthDay monthDay39 = monthDay37.withChronologyRetainFields(chronology38);
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = monthDay37.getFieldType((int) (byte) 1);
        int int42 = monthDay35.indexOf(dateTimeFieldType41);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.MonthDay monthDay44 = monthDay35.withChronologyRetainFields(chronology43);
        org.joda.time.MonthDay.Property property45 = monthDay44.dayOfMonth();
        java.lang.String str46 = property45.toString();
        org.joda.time.MonthDay monthDay48 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.MonthDay monthDay50 = monthDay48.withChronologyRetainFields(chronology49);
        org.joda.time.DateTimeFieldType dateTimeFieldType52 = monthDay48.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod53 = null;
        org.joda.time.MonthDay monthDay54 = monthDay48.plus(readablePeriod53);
        org.joda.time.MonthDay monthDay56 = monthDay48.plusMonths((int) (byte) 1);
        org.joda.time.MonthDay monthDay58 = monthDay48.plusDays(31);
        int int59 = property45.compareTo((org.joda.time.ReadablePartial) monthDay58);
        int int60 = property10.compareTo((org.joda.time.ReadablePartial) monthDay58);
        org.joda.time.MonthDay monthDay62 = property10.addToCopy(0);
        java.lang.String str63 = property10.getAsText();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(monthDay18);
        org.junit.Assert.assertNotNull(monthDay20);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "1" + "'", str25, "1");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Property[dayOfMonth]" + "'", str26, "Property[dayOfMonth]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(monthDay32);
        org.junit.Assert.assertNotNull(monthDay35);
        org.junit.Assert.assertNotNull(monthDay37);
        org.junit.Assert.assertNotNull(monthDay39);
        org.junit.Assert.assertNotNull(dateTimeFieldType41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertNotNull(monthDay44);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "Property[dayOfMonth]" + "'", str46, "Property[dayOfMonth]");
        org.junit.Assert.assertNotNull(monthDay48);
        org.junit.Assert.assertNotNull(monthDay50);
        org.junit.Assert.assertNotNull(dateTimeFieldType52);
        org.junit.Assert.assertNotNull(monthDay54);
        org.junit.Assert.assertNotNull(monthDay56);
        org.junit.Assert.assertNotNull(monthDay58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(monthDay62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "1" + "'", str63, "1");
    }

    @Test
    public void test0907() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0907");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property6 = monthDay1.dayOfMonth();
        org.joda.time.MonthDay monthDay8 = property6.addWrapFieldToCopy(1);
        java.util.Locale locale9 = null;
        java.lang.String str10 = property6.getAsText(locale9);
        java.util.Locale locale11 = null;
        java.lang.String str12 = property6.getAsText(locale11);
        int int13 = property6.getMaximumValue();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay15 = property6.setCopy("Property[monthOfYear]");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"Property[monthOfYear]\" for dayOfMonth is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(monthDay8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1" + "'", str10, "1");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "1" + "'", str12, "1");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 31 + "'", int13 == 31);
    }

    @Test
    public void test0908() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0908");
        org.joda.time.MonthDay monthDay3 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MonthDay monthDay5 = monthDay3.withChronologyRetainFields(chronology4);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = monthDay3.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property8 = monthDay3.dayOfMonth();
        org.joda.time.Chronology chronology9 = monthDay3.getChronology();
        org.joda.time.MonthDay monthDay10 = org.joda.time.MonthDay.now(chronology9);
        org.joda.time.MonthDay monthDay11 = new org.joda.time.MonthDay(0L, chronology9);
        org.joda.time.MonthDay monthDay12 = new org.joda.time.MonthDay((long) 4, chronology9);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(monthDay10);
    }

    @Test
    public void test0909() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0909");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay monthDay7 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MonthDay monthDay9 = monthDay7.withChronologyRetainFields(chronology8);
        org.joda.time.MonthDay monthDay11 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MonthDay monthDay13 = monthDay11.withChronologyRetainFields(chronology12);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = monthDay11.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property16 = monthDay9.property(dateTimeFieldType15);
        int int17 = monthDay1.indexOf(dateTimeFieldType15);
        org.joda.time.MonthDay.Property property18 = monthDay1.dayOfMonth();
        org.joda.time.MonthDay monthDay20 = property18.addWrapFieldToCopy((int) 'a');
        org.joda.time.MonthDay monthDay22 = property18.addToCopy(2);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(monthDay9);
        org.junit.Assert.assertNotNull(monthDay11);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(monthDay20);
        org.junit.Assert.assertNotNull(monthDay22);
    }

    @Test
    public void test0910() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0910");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property6 = monthDay1.dayOfMonth();
        org.joda.time.MonthDay monthDay8 = property6.addWrapFieldToCopy(1);
        int int9 = property6.getMaximumValue();
        int int10 = property6.getMaximumValueOverall();
        java.util.Locale locale11 = null;
        int int12 = property6.getMaximumShortTextLength(locale11);
        org.joda.time.DurationField durationField13 = property6.getRangeDurationField();
        org.joda.time.DurationField durationField14 = property6.getRangeDurationField();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(monthDay8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 31 + "'", int9 == 31);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 31 + "'", int10 == 31);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(durationField14);
    }

    @Test
    public void test0911() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0911");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        org.joda.time.MonthDay.Property property11 = monthDay3.monthOfYear();
        java.util.Locale locale12 = null;
        int int13 = property11.getMaximumTextLength(locale12);
        int int14 = property11.getMaximumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = property11.getFieldType();
        java.lang.String str16 = property11.getName();
        org.joda.time.MonthDay monthDay18 = property11.addWrapFieldToCopy(25);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 9 + "'", int13 == 9);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 12 + "'", int14 == 12);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "monthOfYear" + "'", str16, "monthOfYear");
        org.junit.Assert.assertNotNull(monthDay18);
    }

    @Test
    public void test0912() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0912");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.MonthDay monthDay4 = monthDay1.withPeriodAdded(readablePeriod2, 1);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.MonthDay monthDay6 = monthDay1.plus(readablePeriod5);
        org.joda.time.MonthDay monthDay8 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MonthDay monthDay10 = monthDay8.withChronologyRetainFields(chronology9);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = monthDay8.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.MonthDay monthDay14 = monthDay8.plus(readablePeriod13);
        org.joda.time.MonthDay monthDay16 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MonthDay monthDay18 = monthDay16.withChronologyRetainFields(chronology17);
        org.joda.time.MonthDay monthDay20 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.MonthDay monthDay22 = monthDay20.withChronologyRetainFields(chronology21);
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = monthDay20.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property25 = monthDay18.property(dateTimeFieldType24);
        int int26 = property25.get();
        org.joda.time.MonthDay monthDay28 = property25.addWrapFieldToCopy((int) (short) 1);
        boolean boolean29 = monthDay8.isBefore((org.joda.time.ReadablePartial) monthDay28);
        org.joda.time.MonthDay monthDay31 = monthDay28.minusMonths((int) (byte) 100);
        org.joda.time.MonthDay monthDay33 = monthDay31.plusMonths(1);
        org.joda.time.MonthDay monthDay35 = org.joda.time.MonthDay.parse("");
        org.joda.time.MonthDay monthDay37 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.MonthDay monthDay39 = monthDay37.withChronologyRetainFields(chronology38);
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = monthDay37.getFieldType((int) (byte) 1);
        boolean boolean42 = monthDay35.isSupported(dateTimeFieldType41);
        boolean boolean43 = monthDay31.isSupported(dateTimeFieldType41);
        boolean boolean44 = monthDay6.isAfter((org.joda.time.ReadablePartial) monthDay31);
        org.joda.time.MonthDay monthDay45 = new org.joda.time.MonthDay((java.lang.Object) monthDay6);
        org.joda.time.DurationFieldType durationFieldType46 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay48 = monthDay6.withFieldAdded(durationFieldType46, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay4);
        org.junit.Assert.assertNotNull(monthDay6);
        org.junit.Assert.assertNotNull(monthDay8);
        org.junit.Assert.assertNotNull(monthDay10);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(monthDay18);
        org.junit.Assert.assertNotNull(monthDay20);
        org.junit.Assert.assertNotNull(monthDay22);
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(monthDay28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(monthDay31);
        org.junit.Assert.assertNotNull(monthDay33);
        org.junit.Assert.assertNotNull(monthDay35);
        org.junit.Assert.assertNotNull(monthDay37);
        org.junit.Assert.assertNotNull(monthDay39);
        org.junit.Assert.assertNotNull(dateTimeFieldType41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
    }

    @Test
    public void test0913() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0913");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        int int11 = property10.get();
        org.joda.time.MonthDay monthDay13 = property10.addWrapFieldToCopy((int) (short) 1);
        java.lang.String str14 = property10.getAsString();
        java.lang.String str15 = property10.getAsText();
        org.joda.time.MonthDay monthDay16 = property10.getMonthDay();
        int int18 = monthDay16.getValue(0);
        org.joda.time.Chronology chronology19 = monthDay16.getChronology();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "1" + "'", str14, "1");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "1" + "'", str15, "1");
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(chronology19);
    }

    @Test
    public void test0914() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0914");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        int int11 = property10.get();
        org.joda.time.MonthDay monthDay13 = property10.addWrapFieldToCopy((int) (short) 1);
        java.lang.String str14 = property10.getAsString();
        java.lang.String str15 = property10.getAsString();
        java.lang.String str16 = property10.toString();
        java.util.Locale locale17 = null;
        int int18 = property10.getMaximumTextLength(locale17);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "1" + "'", str14, "1");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "1" + "'", str15, "1");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Property[dayOfMonth]" + "'", str16, "Property[dayOfMonth]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2 + "'", int18 == 2);
    }

    @Test
    public void test0915() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0915");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        int int11 = property10.get();
        org.joda.time.DurationField durationField12 = property10.getDurationField();
        org.joda.time.MonthDay monthDay14 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MonthDay monthDay16 = monthDay14.withChronologyRetainFields(chronology15);
        org.joda.time.MonthDay monthDay18 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MonthDay monthDay20 = monthDay18.withChronologyRetainFields(chronology19);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = monthDay18.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property23 = monthDay16.property(dateTimeFieldType22);
        boolean boolean24 = property10.equals((java.lang.Object) monthDay16);
        java.util.Locale locale25 = null;
        java.lang.String str26 = property10.getAsShortText(locale25);
        java.lang.String str27 = property10.getAsShortText();
        java.lang.String str28 = property10.toString();
        java.util.Locale locale29 = null;
        java.lang.String str30 = property10.getAsText(locale29);
        int int31 = property10.getMinimumValue();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(monthDay18);
        org.junit.Assert.assertNotNull(monthDay20);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "1" + "'", str26, "1");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "1" + "'", str27, "1");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Property[dayOfMonth]" + "'", str28, "Property[dayOfMonth]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "1" + "'", str30, "1");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
    }

    @Test
    public void test0916() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0916");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay1.plus(readablePeriod6);
        org.joda.time.MonthDay monthDay9 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MonthDay monthDay11 = monthDay9.withChronologyRetainFields(chronology10);
        org.joda.time.MonthDay monthDay13 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MonthDay monthDay15 = monthDay13.withChronologyRetainFields(chronology14);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = monthDay13.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property18 = monthDay11.property(dateTimeFieldType17);
        int int19 = property18.get();
        org.joda.time.MonthDay monthDay21 = property18.addWrapFieldToCopy((int) (short) 1);
        boolean boolean22 = monthDay1.isBefore((org.joda.time.ReadablePartial) monthDay21);
        org.joda.time.MonthDay monthDay24 = monthDay21.minusMonths((int) (byte) 100);
        org.joda.time.MonthDay monthDay26 = monthDay24.plusMonths(1);
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.MonthDay monthDay28 = monthDay24.minus(readablePeriod27);
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.MonthDay monthDay30 = new org.joda.time.MonthDay(dateTimeZone29);
        boolean boolean31 = monthDay28.isEqual((org.joda.time.ReadablePartial) monthDay30);
        org.joda.time.MonthDay monthDay33 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MonthDay monthDay35 = monthDay33.withChronologyRetainFields(chronology34);
        org.joda.time.MonthDay monthDay37 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.MonthDay monthDay39 = monthDay37.withChronologyRetainFields(chronology38);
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = monthDay37.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property42 = monthDay35.property(dateTimeFieldType41);
        int int43 = property42.get();
        org.joda.time.MonthDay monthDay45 = property42.addWrapFieldToCopy((int) (short) 1);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray46 = monthDay45.getFieldTypes();
        int int47 = monthDay45.getMonthOfYear();
        org.joda.time.DateTimeField[] dateTimeFieldArray48 = monthDay45.getFields();
        boolean boolean49 = monthDay30.isAfter((org.joda.time.ReadablePartial) monthDay45);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(monthDay9);
        org.junit.Assert.assertNotNull(monthDay11);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertNotNull(monthDay26);
        org.junit.Assert.assertNotNull(monthDay28);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(monthDay33);
        org.junit.Assert.assertNotNull(monthDay35);
        org.junit.Assert.assertNotNull(monthDay37);
        org.junit.Assert.assertNotNull(monthDay39);
        org.junit.Assert.assertNotNull(dateTimeFieldType41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertNotNull(monthDay45);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldArray48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
    }

    @Test
    public void test0917() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0917");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        org.joda.time.MonthDay.Property property11 = monthDay3.monthOfYear();
        org.joda.time.MonthDay monthDay13 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MonthDay monthDay15 = monthDay13.withChronologyRetainFields(chronology14);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = monthDay13.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay monthDay19 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MonthDay monthDay21 = monthDay19.withChronologyRetainFields(chronology20);
        org.joda.time.MonthDay monthDay23 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MonthDay monthDay25 = monthDay23.withChronologyRetainFields(chronology24);
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = monthDay23.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property28 = monthDay21.property(dateTimeFieldType27);
        int int29 = monthDay13.indexOf(dateTimeFieldType27);
        boolean boolean30 = monthDay3.equals((java.lang.Object) int29);
        org.joda.time.MonthDay monthDay32 = monthDay3.withMonthOfYear(9);
        org.joda.time.MonthDay monthDay34 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.MonthDay monthDay36 = monthDay34.withChronologyRetainFields(chronology35);
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = monthDay34.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod39 = null;
        org.joda.time.MonthDay monthDay40 = monthDay34.plus(readablePeriod39);
        org.joda.time.MonthDay monthDay42 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.MonthDay monthDay44 = monthDay42.withChronologyRetainFields(chronology43);
        org.joda.time.MonthDay monthDay46 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.MonthDay monthDay48 = monthDay46.withChronologyRetainFields(chronology47);
        org.joda.time.DateTimeFieldType dateTimeFieldType50 = monthDay46.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property51 = monthDay44.property(dateTimeFieldType50);
        int int52 = property51.get();
        org.joda.time.MonthDay monthDay54 = property51.addWrapFieldToCopy((int) (short) 1);
        boolean boolean55 = monthDay34.isBefore((org.joda.time.ReadablePartial) monthDay54);
        org.joda.time.MonthDay monthDay57 = monthDay54.minusMonths((int) (byte) 100);
        org.joda.time.MonthDay monthDay59 = monthDay57.plusMonths(1);
        org.joda.time.MonthDay monthDay61 = org.joda.time.MonthDay.parse("");
        org.joda.time.MonthDay monthDay63 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.MonthDay monthDay65 = monthDay63.withChronologyRetainFields(chronology64);
        org.joda.time.DateTimeFieldType dateTimeFieldType67 = monthDay63.getFieldType((int) (byte) 1);
        boolean boolean68 = monthDay61.isSupported(dateTimeFieldType67);
        boolean boolean69 = monthDay57.isSupported(dateTimeFieldType67);
        org.joda.time.Chronology chronology70 = monthDay57.getChronology();
        org.joda.time.MonthDay monthDay71 = monthDay32.withChronologyRetainFields(chronology70);
        org.joda.time.MonthDay monthDay72 = org.joda.time.MonthDay.now(chronology70);
        java.lang.String str73 = monthDay72.toString();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(monthDay19);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertNotNull(monthDay23);
        org.junit.Assert.assertNotNull(monthDay25);
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(monthDay32);
        org.junit.Assert.assertNotNull(monthDay34);
        org.junit.Assert.assertNotNull(monthDay36);
        org.junit.Assert.assertNotNull(dateTimeFieldType38);
        org.junit.Assert.assertNotNull(monthDay40);
        org.junit.Assert.assertNotNull(monthDay42);
        org.junit.Assert.assertNotNull(monthDay44);
        org.junit.Assert.assertNotNull(monthDay46);
        org.junit.Assert.assertNotNull(monthDay48);
        org.junit.Assert.assertNotNull(dateTimeFieldType50);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertNotNull(monthDay54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(monthDay57);
        org.junit.Assert.assertNotNull(monthDay59);
        org.junit.Assert.assertNotNull(monthDay61);
        org.junit.Assert.assertNotNull(monthDay63);
        org.junit.Assert.assertNotNull(monthDay65);
        org.junit.Assert.assertNotNull(dateTimeFieldType67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(chronology70);
        org.junit.Assert.assertNotNull(monthDay71);
        org.junit.Assert.assertNotNull(monthDay72);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "--11-25" + "'", str73, "--11-25");
    }

    @Test
    public void test0918() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0918");
        org.joda.time.MonthDay monthDay2 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MonthDay monthDay4 = monthDay2.withChronologyRetainFields(chronology3);
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = monthDay2.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property7 = monthDay2.dayOfMonth();
        org.joda.time.Chronology chronology8 = monthDay2.getChronology();
        org.joda.time.MonthDay monthDay9 = new org.joda.time.MonthDay((-1L), chronology8);
        org.joda.time.MonthDay monthDay10 = new org.joda.time.MonthDay(chronology8);
        java.util.Locale locale12 = null;
        java.lang.String str13 = monthDay10.toString("--11-24", locale12);
        org.junit.Assert.assertNotNull(monthDay2);
        org.junit.Assert.assertNotNull(monthDay4);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "--11-24" + "'", str13, "--11-24");
    }

    @Test
    public void test0919() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0919");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay2 = org.joda.time.MonthDay.parse("--02-02", dateTimeFormatter1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0920() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0920");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property6 = monthDay1.dayOfMonth();
        org.joda.time.Chronology chronology7 = monthDay1.getChronology();
        org.joda.time.Chronology chronology8 = monthDay1.getChronology();
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.DateTime dateTime10 = monthDay1.toDateTime(readableInstant9);
        org.joda.time.MonthDay monthDay12 = monthDay1.plusMonths((int) ' ');
        org.joda.time.DateTimeField[] dateTimeFieldArray13 = monthDay12.getFields();
        org.joda.time.DateTimeField[] dateTimeFieldArray14 = monthDay12.getFields();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(monthDay12);
        org.junit.Assert.assertNotNull(dateTimeFieldArray13);
        org.junit.Assert.assertNotNull(dateTimeFieldArray14);
    }

    @Test
    public void test0921() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0921");
        org.joda.time.MonthDay monthDay3 = org.joda.time.MonthDay.parse("");
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        boolean boolean10 = monthDay3.isSupported(dateTimeFieldType9);
        org.joda.time.MonthDay monthDay12 = org.joda.time.MonthDay.parse("");
        org.joda.time.MonthDay monthDay14 = monthDay12.minusDays((int) '#');
        org.joda.time.MonthDay monthDay16 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MonthDay monthDay18 = monthDay16.withChronologyRetainFields(chronology17);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = monthDay16.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property21 = monthDay16.dayOfMonth();
        org.joda.time.Chronology chronology22 = monthDay16.getChronology();
        org.joda.time.Chronology chronology23 = monthDay16.getChronology();
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.DateTime dateTime25 = monthDay16.toDateTime(readableInstant24);
        org.joda.time.MonthDay monthDay27 = monthDay16.plusMonths((int) ' ');
        boolean boolean28 = monthDay12.isAfter((org.joda.time.ReadablePartial) monthDay27);
        boolean boolean29 = monthDay3.isBefore((org.joda.time.ReadablePartial) monthDay27);
        org.joda.time.Chronology chronology30 = monthDay27.getChronology();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay31 = new org.joda.time.MonthDay(28, 3, chronology30);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 28 for monthOfYear must not be larger than 12");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(monthDay12);
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(monthDay18);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(monthDay27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(chronology30);
    }

    @Test
    public void test0922() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0922");
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.MonthDay monthDay9 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MonthDay monthDay11 = monthDay9.withChronologyRetainFields(chronology10);
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = monthDay9.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property14 = monthDay9.dayOfMonth();
        org.joda.time.Chronology chronology15 = monthDay9.getChronology();
        org.joda.time.MonthDay monthDay16 = org.joda.time.MonthDay.now(chronology15);
        org.joda.time.MonthDay monthDay17 = monthDay7.withChronologyRetainFields(chronology15);
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        org.joda.time.MonthDay monthDay19 = monthDay7.minus(readablePeriod18);
        org.joda.time.MonthDay monthDay21 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.MonthDay monthDay23 = monthDay21.withChronologyRetainFields(chronology22);
        org.joda.time.MonthDay monthDay25 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MonthDay monthDay27 = monthDay25.withChronologyRetainFields(chronology26);
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = monthDay25.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property30 = monthDay23.property(dateTimeFieldType29);
        int int31 = property30.get();
        int int32 = property30.getMaximumValue();
        org.joda.time.MonthDay monthDay34 = property30.setCopy((int) (short) 1);
        org.joda.time.MonthDay monthDay36 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.MonthDay monthDay38 = monthDay36.withChronologyRetainFields(chronology37);
        org.joda.time.DateTimeFieldType dateTimeFieldType40 = monthDay36.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod41 = null;
        org.joda.time.MonthDay monthDay42 = monthDay36.plus(readablePeriod41);
        int int43 = monthDay36.getDayOfMonth();
        int int44 = property30.compareTo((org.joda.time.ReadablePartial) monthDay36);
        boolean boolean45 = monthDay19.isBefore((org.joda.time.ReadablePartial) monthDay36);
        org.joda.time.Chronology chronology46 = monthDay36.getChronology();
        org.joda.time.MonthDay monthDay47 = new org.joda.time.MonthDay((long) 2, chronology46);
        org.joda.time.MonthDay monthDay48 = new org.joda.time.MonthDay((long) 10, chronology46);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay49 = new org.joda.time.MonthDay(10, 0, chronology46);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 0 for dayOfMonth must not be smaller than 1");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(monthDay9);
        org.junit.Assert.assertNotNull(monthDay11);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(monthDay17);
        org.junit.Assert.assertNotNull(monthDay19);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertNotNull(monthDay23);
        org.junit.Assert.assertNotNull(monthDay25);
        org.junit.Assert.assertNotNull(monthDay27);
        org.junit.Assert.assertNotNull(dateTimeFieldType29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 31 + "'", int32 == 31);
        org.junit.Assert.assertNotNull(monthDay34);
        org.junit.Assert.assertNotNull(monthDay36);
        org.junit.Assert.assertNotNull(monthDay38);
        org.junit.Assert.assertNotNull(dateTimeFieldType40);
        org.junit.Assert.assertNotNull(monthDay42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(chronology46);
    }

    @Test
    public void test0923() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0923");
        org.joda.time.MonthDay monthDay2 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MonthDay monthDay4 = monthDay2.withChronologyRetainFields(chronology3);
        org.joda.time.MonthDay monthDay6 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MonthDay monthDay8 = monthDay6.withChronologyRetainFields(chronology7);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = monthDay6.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property11 = monthDay6.dayOfMonth();
        org.joda.time.Chronology chronology12 = monthDay6.getChronology();
        org.joda.time.MonthDay monthDay13 = org.joda.time.MonthDay.now(chronology12);
        org.joda.time.MonthDay monthDay14 = monthDay4.withChronologyRetainFields(chronology12);
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.MonthDay monthDay16 = monthDay4.minus(readablePeriod15);
        org.joda.time.MonthDay monthDay18 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MonthDay monthDay20 = monthDay18.withChronologyRetainFields(chronology19);
        org.joda.time.MonthDay monthDay22 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MonthDay monthDay24 = monthDay22.withChronologyRetainFields(chronology23);
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = monthDay22.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property27 = monthDay20.property(dateTimeFieldType26);
        int int28 = property27.get();
        int int29 = property27.getMaximumValue();
        org.joda.time.MonthDay monthDay31 = property27.setCopy((int) (short) 1);
        org.joda.time.MonthDay monthDay33 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MonthDay monthDay35 = monthDay33.withChronologyRetainFields(chronology34);
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = monthDay33.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod38 = null;
        org.joda.time.MonthDay monthDay39 = monthDay33.plus(readablePeriod38);
        int int40 = monthDay33.getDayOfMonth();
        int int41 = property27.compareTo((org.joda.time.ReadablePartial) monthDay33);
        boolean boolean42 = monthDay16.isBefore((org.joda.time.ReadablePartial) monthDay33);
        org.joda.time.Chronology chronology43 = monthDay33.getChronology();
        org.joda.time.MonthDay monthDay44 = new org.joda.time.MonthDay((long) 2, chronology43);
        org.joda.time.MonthDay monthDay46 = monthDay44.withMonthOfYear(10);
        org.joda.time.MonthDay monthDay48 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.MonthDay monthDay50 = monthDay48.withChronologyRetainFields(chronology49);
        org.joda.time.DateTimeFieldType dateTimeFieldType52 = monthDay48.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property53 = monthDay48.dayOfMonth();
        org.joda.time.Chronology chronology54 = monthDay48.getChronology();
        org.joda.time.MonthDay monthDay56 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.MonthDay monthDay58 = monthDay56.withChronologyRetainFields(chronology57);
        org.joda.time.MonthDay monthDay60 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.MonthDay monthDay62 = monthDay60.withChronologyRetainFields(chronology61);
        org.joda.time.DateTimeFieldType dateTimeFieldType64 = monthDay60.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property65 = monthDay58.property(dateTimeFieldType64);
        boolean boolean66 = monthDay48.isSupported(dateTimeFieldType64);
        org.joda.time.MonthDay.Property property67 = monthDay48.monthOfYear();
        org.joda.time.MonthDay monthDay69 = property67.setCopy(1);
        boolean boolean70 = monthDay46.isBefore((org.joda.time.ReadablePartial) monthDay69);
        org.junit.Assert.assertNotNull(monthDay2);
        org.junit.Assert.assertNotNull(monthDay4);
        org.junit.Assert.assertNotNull(monthDay6);
        org.junit.Assert.assertNotNull(monthDay8);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(monthDay18);
        org.junit.Assert.assertNotNull(monthDay20);
        org.junit.Assert.assertNotNull(monthDay22);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 31 + "'", int29 == 31);
        org.junit.Assert.assertNotNull(monthDay31);
        org.junit.Assert.assertNotNull(monthDay33);
        org.junit.Assert.assertNotNull(monthDay35);
        org.junit.Assert.assertNotNull(dateTimeFieldType37);
        org.junit.Assert.assertNotNull(monthDay39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(monthDay46);
        org.junit.Assert.assertNotNull(monthDay48);
        org.junit.Assert.assertNotNull(monthDay50);
        org.junit.Assert.assertNotNull(dateTimeFieldType52);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertNotNull(monthDay56);
        org.junit.Assert.assertNotNull(monthDay58);
        org.junit.Assert.assertNotNull(monthDay60);
        org.junit.Assert.assertNotNull(monthDay62);
        org.junit.Assert.assertNotNull(dateTimeFieldType64);
        org.junit.Assert.assertNotNull(property65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(property67);
        org.junit.Assert.assertNotNull(monthDay69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
    }

    @Test
    public void test0924() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0924");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        org.joda.time.MonthDay.Property property11 = monthDay3.monthOfYear();
        int int12 = monthDay3.getDayOfMonth();
        org.joda.time.MonthDay.Property property13 = monthDay3.dayOfMonth();
        int int14 = monthDay3.getDayOfMonth();
        org.joda.time.MonthDay monthDay16 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MonthDay monthDay18 = monthDay16.withChronologyRetainFields(chronology17);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = monthDay16.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property21 = monthDay16.dayOfMonth();
        org.joda.time.Chronology chronology22 = monthDay16.getChronology();
        org.joda.time.MonthDay monthDay23 = monthDay3.withChronologyRetainFields(chronology22);
        org.joda.time.MonthDay monthDay24 = new org.joda.time.MonthDay(chronology22);
        org.joda.time.MonthDay monthDay25 = new org.joda.time.MonthDay(chronology22);
        org.joda.time.MonthDay monthDay26 = org.joda.time.MonthDay.now(chronology22);
        org.joda.time.MonthDay monthDay27 = new org.joda.time.MonthDay(chronology22);
        org.joda.time.MonthDay monthDay29 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.MonthDay monthDay31 = monthDay29.withChronologyRetainFields(chronology30);
        org.joda.time.MonthDay monthDay33 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MonthDay monthDay35 = monthDay33.withChronologyRetainFields(chronology34);
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = monthDay33.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property38 = monthDay31.property(dateTimeFieldType37);
        org.joda.time.MonthDay.Property property39 = monthDay31.monthOfYear();
        java.lang.String str40 = property39.getAsShortText();
        int int41 = property39.getMinimumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = property39.getFieldType();
        org.joda.time.MonthDay monthDay44 = monthDay27.withField(dateTimeFieldType42, (int) (short) 1);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray45 = monthDay44.getFieldTypes();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(monthDay18);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(monthDay23);
        org.junit.Assert.assertNotNull(monthDay26);
        org.junit.Assert.assertNotNull(monthDay29);
        org.junit.Assert.assertNotNull(monthDay31);
        org.junit.Assert.assertNotNull(monthDay33);
        org.junit.Assert.assertNotNull(monthDay35);
        org.junit.Assert.assertNotNull(dateTimeFieldType37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "Jan" + "'", str40, "Jan");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType42);
        org.junit.Assert.assertNotNull(monthDay44);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray45);
    }

    @Test
    public void test0925() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0925");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay1.plus(readablePeriod6);
        org.joda.time.MonthDay monthDay9 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MonthDay monthDay11 = monthDay9.withChronologyRetainFields(chronology10);
        org.joda.time.MonthDay monthDay13 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MonthDay monthDay15 = monthDay13.withChronologyRetainFields(chronology14);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = monthDay13.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property18 = monthDay11.property(dateTimeFieldType17);
        int int19 = property18.get();
        org.joda.time.MonthDay monthDay21 = property18.addWrapFieldToCopy((int) (short) 1);
        boolean boolean22 = monthDay1.isBefore((org.joda.time.ReadablePartial) monthDay21);
        org.joda.time.MonthDay monthDay24 = monthDay21.minusMonths((int) (byte) 100);
        org.joda.time.MonthDay monthDay26 = monthDay24.minusDays(31);
        org.joda.time.MonthDay monthDay28 = monthDay26.plusDays((int) (byte) 10);
        org.joda.time.MonthDay monthDay30 = monthDay26.plusDays(8);
        org.joda.time.MonthDay monthDay31 = new org.joda.time.MonthDay((java.lang.Object) monthDay30);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(monthDay9);
        org.junit.Assert.assertNotNull(monthDay11);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertNotNull(monthDay26);
        org.junit.Assert.assertNotNull(monthDay28);
        org.junit.Assert.assertNotNull(monthDay30);
    }

    @Test
    public void test0926() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0926");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property6 = monthDay1.dayOfMonth();
        org.joda.time.Chronology chronology7 = monthDay1.getChronology();
        org.joda.time.Chronology chronology8 = monthDay1.getChronology();
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.DateTime dateTime10 = monthDay1.toDateTime(readableInstant9);
        org.joda.time.MonthDay monthDay12 = monthDay1.plusMonths((int) ' ');
        org.joda.time.MonthDay monthDay14 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MonthDay monthDay16 = monthDay14.withChronologyRetainFields(chronology15);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = monthDay14.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.MonthDay monthDay20 = monthDay14.plus(readablePeriod19);
        org.joda.time.MonthDay monthDay22 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MonthDay monthDay24 = monthDay22.withChronologyRetainFields(chronology23);
        org.joda.time.MonthDay monthDay26 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.MonthDay monthDay28 = monthDay26.withChronologyRetainFields(chronology27);
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = monthDay26.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property31 = monthDay24.property(dateTimeFieldType30);
        int int32 = property31.get();
        org.joda.time.MonthDay monthDay34 = property31.addWrapFieldToCopy((int) (short) 1);
        boolean boolean35 = monthDay14.isBefore((org.joda.time.ReadablePartial) monthDay34);
        org.joda.time.MonthDay monthDay37 = monthDay34.minusMonths((int) (byte) 100);
        org.joda.time.MonthDay monthDay39 = monthDay37.plusMonths(1);
        org.joda.time.ReadablePeriod readablePeriod40 = null;
        org.joda.time.MonthDay monthDay41 = monthDay37.minus(readablePeriod40);
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.MonthDay monthDay43 = new org.joda.time.MonthDay(dateTimeZone42);
        boolean boolean44 = monthDay41.isEqual((org.joda.time.ReadablePartial) monthDay43);
        boolean boolean45 = monthDay1.equals((java.lang.Object) monthDay41);
        org.joda.time.MonthDay.Property property46 = monthDay41.dayOfMonth();
        org.joda.time.DurationField durationField47 = property46.getRangeDurationField();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(monthDay12);
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(monthDay20);
        org.junit.Assert.assertNotNull(monthDay22);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertNotNull(monthDay26);
        org.junit.Assert.assertNotNull(monthDay28);
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(monthDay34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(monthDay37);
        org.junit.Assert.assertNotNull(monthDay39);
        org.junit.Assert.assertNotNull(monthDay41);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(durationField47);
    }

    @Test
    public void test0927() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0927");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        int int11 = property10.get();
        org.joda.time.MonthDay monthDay13 = property10.addWrapFieldToCopy((int) (short) 1);
        java.lang.String str14 = property10.getAsString();
        java.lang.String str15 = property10.getAsText();
        org.joda.time.MonthDay monthDay17 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.MonthDay monthDay19 = monthDay17.withChronologyRetainFields(chronology18);
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = monthDay17.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property22 = monthDay17.dayOfMonth();
        org.joda.time.Chronology chronology23 = monthDay17.getChronology();
        org.joda.time.Chronology chronology24 = monthDay17.getChronology();
        org.joda.time.MonthDay monthDay25 = org.joda.time.MonthDay.now(chronology24);
        org.joda.time.MonthDay monthDay26 = org.joda.time.MonthDay.now(chronology24);
        boolean boolean27 = property10.equals((java.lang.Object) monthDay26);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay29 = property10.setCopy("--02-01");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"--02-01\" for dayOfMonth is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "1" + "'", str14, "1");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "1" + "'", str15, "1");
        org.junit.Assert.assertNotNull(monthDay17);
        org.junit.Assert.assertNotNull(monthDay19);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(monthDay25);
        org.junit.Assert.assertNotNull(monthDay26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test0928() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0928");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        org.joda.time.MonthDay monthDay12 = property10.addWrapFieldToCopy(100);
        java.util.Locale locale13 = null;
        java.lang.String str14 = property10.getAsShortText(locale13);
        java.util.Locale locale16 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay17 = property10.setCopy("--01-01", locale16);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"--01-01\" for dayOfMonth is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(monthDay12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "1" + "'", str14, "1");
    }

    @Test
    public void test0929() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0929");
        org.joda.time.MonthDay monthDay1 = new org.joda.time.MonthDay(10L);
        int int2 = monthDay1.size();
        org.joda.time.MonthDay monthDay4 = monthDay1.minusDays((int) (byte) 1);
        org.joda.time.MonthDay monthDay6 = org.joda.time.MonthDay.parse("--01-01");
        org.joda.time.DateTimeField[] dateTimeFieldArray7 = monthDay6.getFields();
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.MonthDay monthDay10 = monthDay6.withPeriodAdded(readablePeriod8, (int) '4');
        org.joda.time.MonthDay monthDay12 = monthDay10.withDayOfMonth(8);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.MonthDay monthDay14 = new org.joda.time.MonthDay(dateTimeZone13);
        org.joda.time.MonthDay.Property property15 = monthDay14.dayOfMonth();
        int int16 = property15.getMaximumValue();
        java.util.Locale locale17 = null;
        int int18 = property15.getMaximumShortTextLength(locale17);
        org.joda.time.MonthDay monthDay20 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.MonthDay monthDay22 = monthDay20.withChronologyRetainFields(chronology21);
        org.joda.time.MonthDay monthDay24 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MonthDay monthDay26 = monthDay24.withChronologyRetainFields(chronology25);
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = monthDay24.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property29 = monthDay22.property(dateTimeFieldType28);
        int int30 = property29.get();
        org.joda.time.MonthDay monthDay32 = property29.addWrapFieldToCopy((int) (short) 1);
        java.lang.String str33 = property29.getAsString();
        org.joda.time.MonthDay monthDay35 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.MonthDay monthDay37 = monthDay35.withChronologyRetainFields(chronology36);
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = monthDay35.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay monthDay41 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.MonthDay monthDay43 = monthDay41.withChronologyRetainFields(chronology42);
        org.joda.time.MonthDay monthDay45 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.MonthDay monthDay47 = monthDay45.withChronologyRetainFields(chronology46);
        org.joda.time.DateTimeFieldType dateTimeFieldType49 = monthDay45.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property50 = monthDay43.property(dateTimeFieldType49);
        int int51 = monthDay35.indexOf(dateTimeFieldType49);
        org.joda.time.MonthDay monthDay53 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.MonthDay monthDay55 = monthDay53.withChronologyRetainFields(chronology54);
        org.joda.time.MonthDay monthDay57 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.MonthDay monthDay59 = monthDay57.withChronologyRetainFields(chronology58);
        org.joda.time.DateTimeFieldType dateTimeFieldType61 = monthDay57.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property62 = monthDay55.property(dateTimeFieldType61);
        int int63 = property62.get();
        org.joda.time.MonthDay monthDay65 = property62.addToCopy((int) (short) 0);
        org.joda.time.MonthDay monthDay67 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.MonthDay monthDay69 = monthDay67.withChronologyRetainFields(chronology68);
        org.joda.time.MonthDay monthDay71 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology72 = null;
        org.joda.time.MonthDay monthDay73 = monthDay71.withChronologyRetainFields(chronology72);
        org.joda.time.DateTimeFieldType dateTimeFieldType75 = monthDay71.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property76 = monthDay69.property(dateTimeFieldType75);
        int int77 = property76.get();
        org.joda.time.DurationField durationField78 = property76.getDurationField();
        java.util.Locale locale79 = null;
        int int80 = property76.getMaximumTextLength(locale79);
        org.joda.time.MonthDay monthDay82 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology83 = null;
        org.joda.time.MonthDay monthDay84 = monthDay82.withChronologyRetainFields(chronology83);
        org.joda.time.DateTimeFieldType dateTimeFieldType86 = monthDay82.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property87 = monthDay82.dayOfMonth();
        org.joda.time.Chronology chronology88 = monthDay82.getChronology();
        org.joda.time.Chronology chronology89 = monthDay82.getChronology();
        org.joda.time.ReadableInstant readableInstant90 = null;
        org.joda.time.DateTime dateTime91 = monthDay82.toDateTime(readableInstant90);
        int int92 = property76.compareTo((org.joda.time.ReadableInstant) dateTime91);
        int int93 = property62.compareTo((org.joda.time.ReadableInstant) dateTime91);
        org.joda.time.DateTime dateTime94 = monthDay35.toDateTime((org.joda.time.ReadableInstant) dateTime91);
        int int95 = property29.compareTo((org.joda.time.ReadableInstant) dateTime91);
        int int96 = property15.compareTo((org.joda.time.ReadableInstant) dateTime91);
        org.joda.time.DateTime dateTime97 = monthDay12.toDateTime((org.joda.time.ReadableInstant) dateTime91);
        org.joda.time.DateTime dateTime98 = monthDay4.toDateTime((org.joda.time.ReadableInstant) dateTime97);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 2 + "'", int2 == 2);
        org.junit.Assert.assertNotNull(monthDay4);
        org.junit.Assert.assertNotNull(monthDay6);
        org.junit.Assert.assertNotNull(dateTimeFieldArray7);
        org.junit.Assert.assertNotNull(monthDay10);
        org.junit.Assert.assertNotNull(monthDay12);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 30 + "'", int16 == 30);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2 + "'", int18 == 2);
        org.junit.Assert.assertNotNull(monthDay20);
        org.junit.Assert.assertNotNull(monthDay22);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertNotNull(monthDay26);
        org.junit.Assert.assertNotNull(dateTimeFieldType28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(monthDay32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "1" + "'", str33, "1");
        org.junit.Assert.assertNotNull(monthDay35);
        org.junit.Assert.assertNotNull(monthDay37);
        org.junit.Assert.assertNotNull(dateTimeFieldType39);
        org.junit.Assert.assertNotNull(monthDay41);
        org.junit.Assert.assertNotNull(monthDay43);
        org.junit.Assert.assertNotNull(monthDay45);
        org.junit.Assert.assertNotNull(monthDay47);
        org.junit.Assert.assertNotNull(dateTimeFieldType49);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertNotNull(monthDay53);
        org.junit.Assert.assertNotNull(monthDay55);
        org.junit.Assert.assertNotNull(monthDay57);
        org.junit.Assert.assertNotNull(monthDay59);
        org.junit.Assert.assertNotNull(dateTimeFieldType61);
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1 + "'", int63 == 1);
        org.junit.Assert.assertNotNull(monthDay65);
        org.junit.Assert.assertNotNull(monthDay67);
        org.junit.Assert.assertNotNull(monthDay69);
        org.junit.Assert.assertNotNull(monthDay71);
        org.junit.Assert.assertNotNull(monthDay73);
        org.junit.Assert.assertNotNull(dateTimeFieldType75);
        org.junit.Assert.assertNotNull(property76);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertNotNull(durationField78);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 2 + "'", int80 == 2);
        org.junit.Assert.assertNotNull(monthDay82);
        org.junit.Assert.assertNotNull(monthDay84);
        org.junit.Assert.assertNotNull(dateTimeFieldType86);
        org.junit.Assert.assertNotNull(property87);
        org.junit.Assert.assertNotNull(chronology88);
        org.junit.Assert.assertNotNull(chronology89);
        org.junit.Assert.assertNotNull(dateTime91);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 0 + "'", int93 == 0);
        org.junit.Assert.assertNotNull(dateTime94);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 0 + "'", int95 == 0);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 1 + "'", int96 == 1);
        org.junit.Assert.assertNotNull(dateTime97);
        org.junit.Assert.assertNotNull(dateTime98);
    }

    @Test
    public void test0930() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0930");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.MonthDay monthDay4 = monthDay1.withPeriodAdded(readablePeriod2, 1);
        org.joda.time.MonthDay monthDay6 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MonthDay monthDay8 = monthDay6.withChronologyRetainFields(chronology7);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = monthDay6.getFieldType((int) (byte) 1);
        int int11 = monthDay4.indexOf(dateTimeFieldType10);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MonthDay monthDay13 = monthDay4.withChronologyRetainFields(chronology12);
        org.joda.time.MonthDay.Property property14 = monthDay13.dayOfMonth();
        java.lang.String str15 = property14.toString();
        org.joda.time.MonthDay monthDay17 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.MonthDay monthDay19 = monthDay17.withChronologyRetainFields(chronology18);
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = monthDay17.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.MonthDay monthDay23 = monthDay17.plus(readablePeriod22);
        org.joda.time.MonthDay monthDay25 = monthDay17.plusMonths((int) (byte) 1);
        org.joda.time.MonthDay monthDay27 = monthDay17.plusDays(31);
        int int28 = property14.compareTo((org.joda.time.ReadablePartial) monthDay27);
        org.joda.time.MonthDay monthDay30 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MonthDay monthDay32 = monthDay30.withChronologyRetainFields(chronology31);
        org.joda.time.MonthDay monthDay34 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.MonthDay monthDay36 = monthDay34.withChronologyRetainFields(chronology35);
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = monthDay34.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property39 = monthDay32.property(dateTimeFieldType38);
        org.joda.time.MonthDay.Property property40 = monthDay32.monthOfYear();
        int int41 = monthDay32.getDayOfMonth();
        org.joda.time.MonthDay.Property property42 = monthDay32.dayOfMonth();
        int int43 = monthDay32.getDayOfMonth();
        org.joda.time.MonthDay monthDay45 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.MonthDay monthDay47 = monthDay45.withChronologyRetainFields(chronology46);
        org.joda.time.DateTimeFieldType dateTimeFieldType49 = monthDay45.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property50 = monthDay45.dayOfMonth();
        org.joda.time.Chronology chronology51 = monthDay45.getChronology();
        org.joda.time.MonthDay monthDay52 = monthDay32.withChronologyRetainFields(chronology51);
        org.joda.time.MonthDay monthDay53 = new org.joda.time.MonthDay(chronology51);
        org.joda.time.MonthDay monthDay54 = new org.joda.time.MonthDay(chronology51);
        org.joda.time.DateTimeZone dateTimeZone55 = null;
        org.joda.time.MonthDay monthDay56 = new org.joda.time.MonthDay(dateTimeZone55);
        org.joda.time.MonthDay monthDay58 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.MonthDay monthDay60 = monthDay58.withChronologyRetainFields(chronology59);
        org.joda.time.MonthDay monthDay62 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.MonthDay monthDay64 = monthDay62.withChronologyRetainFields(chronology63);
        org.joda.time.DateTimeFieldType dateTimeFieldType66 = monthDay62.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property67 = monthDay60.property(dateTimeFieldType66);
        int int68 = property67.get();
        int int69 = property67.getMaximumValue();
        org.joda.time.MonthDay monthDay71 = property67.setCopy((int) (short) 1);
        org.joda.time.MonthDay monthDay73 = org.joda.time.MonthDay.parse("");
        org.joda.time.ReadablePeriod readablePeriod74 = null;
        org.joda.time.MonthDay monthDay76 = monthDay73.withPeriodAdded(readablePeriod74, 1);
        org.joda.time.MonthDay monthDay78 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology79 = null;
        org.joda.time.MonthDay monthDay80 = monthDay78.withChronologyRetainFields(chronology79);
        org.joda.time.DateTimeFieldType dateTimeFieldType82 = monthDay78.getFieldType((int) (byte) 1);
        int int83 = monthDay76.indexOf(dateTimeFieldType82);
        boolean boolean84 = monthDay71.isSupported(dateTimeFieldType82);
        int int85 = monthDay56.get(dateTimeFieldType82);
        org.joda.time.MonthDay.Property property86 = monthDay54.property(dateTimeFieldType82);
        boolean boolean87 = monthDay27.isSupported(dateTimeFieldType82);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay4);
        org.junit.Assert.assertNotNull(monthDay6);
        org.junit.Assert.assertNotNull(monthDay8);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Property[dayOfMonth]" + "'", str15, "Property[dayOfMonth]");
        org.junit.Assert.assertNotNull(monthDay17);
        org.junit.Assert.assertNotNull(monthDay19);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertNotNull(monthDay23);
        org.junit.Assert.assertNotNull(monthDay25);
        org.junit.Assert.assertNotNull(monthDay27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(monthDay30);
        org.junit.Assert.assertNotNull(monthDay32);
        org.junit.Assert.assertNotNull(monthDay34);
        org.junit.Assert.assertNotNull(monthDay36);
        org.junit.Assert.assertNotNull(dateTimeFieldType38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertNotNull(monthDay45);
        org.junit.Assert.assertNotNull(monthDay47);
        org.junit.Assert.assertNotNull(dateTimeFieldType49);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(monthDay52);
        org.junit.Assert.assertNotNull(monthDay58);
        org.junit.Assert.assertNotNull(monthDay60);
        org.junit.Assert.assertNotNull(monthDay62);
        org.junit.Assert.assertNotNull(monthDay64);
        org.junit.Assert.assertNotNull(dateTimeFieldType66);
        org.junit.Assert.assertNotNull(property67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1 + "'", int68 == 1);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 31 + "'", int69 == 31);
        org.junit.Assert.assertNotNull(monthDay71);
        org.junit.Assert.assertNotNull(monthDay73);
        org.junit.Assert.assertNotNull(monthDay76);
        org.junit.Assert.assertNotNull(monthDay78);
        org.junit.Assert.assertNotNull(monthDay80);
        org.junit.Assert.assertNotNull(dateTimeFieldType82);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 1 + "'", int83 == 1);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 25 + "'", int85 == 25);
        org.junit.Assert.assertNotNull(property86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
    }

    @Test
    public void test0931() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0931");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        int int11 = property10.get();
        org.joda.time.MonthDay monthDay13 = property10.addWrapFieldToCopy((int) (short) 1);
        java.lang.String str14 = property10.getAsString();
        java.lang.String str15 = property10.getAsText();
        org.joda.time.DurationField durationField16 = property10.getRangeDurationField();
        int int17 = property10.getMinimumValue();
        org.joda.time.MonthDay monthDay19 = property10.addToCopy((int) (short) -1);
        int int20 = property10.getMaximumValueOverall();
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = property10.getFieldType();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "1" + "'", str14, "1");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "1" + "'", str15, "1");
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(monthDay19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 31 + "'", int20 == 31);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
    }

    @Test
    public void test0932() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0932");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.MonthDay monthDay3 = monthDay1.minusDays((int) '#');
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay5.dayOfMonth();
        org.joda.time.Chronology chronology11 = monthDay5.getChronology();
        org.joda.time.Chronology chronology12 = monthDay5.getChronology();
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.DateTime dateTime14 = monthDay5.toDateTime(readableInstant13);
        org.joda.time.MonthDay monthDay16 = monthDay5.plusMonths((int) ' ');
        boolean boolean17 = monthDay1.isAfter((org.joda.time.ReadablePartial) monthDay16);
        org.joda.time.MonthDay monthDay19 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MonthDay monthDay21 = monthDay19.withChronologyRetainFields(chronology20);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = monthDay19.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property24 = monthDay19.dayOfMonth();
        org.joda.time.MonthDay monthDay26 = property24.addWrapFieldToCopy(1);
        org.joda.time.MonthDay monthDay28 = property24.addWrapFieldToCopy(0);
        org.joda.time.MonthDay monthDay30 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MonthDay monthDay32 = monthDay30.withChronologyRetainFields(chronology31);
        org.joda.time.MonthDay monthDay34 = monthDay30.minusMonths((int) (byte) -1);
        boolean boolean35 = property24.equals((java.lang.Object) monthDay34);
        int int36 = property24.getMaximumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = property24.getFieldType();
        org.joda.time.MonthDay.Property property38 = monthDay16.property(dateTimeFieldType37);
        java.lang.String str39 = property38.getAsText();
        int int40 = property38.get();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(monthDay19);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(monthDay26);
        org.junit.Assert.assertNotNull(monthDay28);
        org.junit.Assert.assertNotNull(monthDay30);
        org.junit.Assert.assertNotNull(monthDay32);
        org.junit.Assert.assertNotNull(monthDay34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 31 + "'", int36 == 31);
        org.junit.Assert.assertNotNull(dateTimeFieldType37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "1" + "'", str39, "1");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
    }

    @Test
    public void test0933() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0933");
        org.joda.time.MonthDay monthDay2 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MonthDay monthDay4 = monthDay2.withChronologyRetainFields(chronology3);
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = monthDay2.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property7 = monthDay2.dayOfMonth();
        org.joda.time.Chronology chronology8 = monthDay2.getChronology();
        org.joda.time.MonthDay monthDay9 = new org.joda.time.MonthDay((-1L), chronology8);
        org.joda.time.MonthDay monthDay10 = new org.joda.time.MonthDay((java.lang.Object) monthDay9);
        org.joda.time.MonthDay monthDay12 = org.joda.time.MonthDay.parse("");
        org.joda.time.MonthDay monthDay14 = monthDay12.minusDays((int) '#');
        org.joda.time.MonthDay monthDay16 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MonthDay monthDay18 = monthDay16.withChronologyRetainFields(chronology17);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = monthDay16.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property21 = monthDay16.dayOfMonth();
        org.joda.time.Chronology chronology22 = monthDay16.getChronology();
        org.joda.time.Chronology chronology23 = monthDay16.getChronology();
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.DateTime dateTime25 = monthDay16.toDateTime(readableInstant24);
        org.joda.time.MonthDay monthDay27 = monthDay16.plusMonths((int) ' ');
        boolean boolean28 = monthDay12.isAfter((org.joda.time.ReadablePartial) monthDay27);
        org.joda.time.MonthDay monthDay30 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MonthDay monthDay32 = monthDay30.withChronologyRetainFields(chronology31);
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = monthDay30.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property35 = monthDay30.dayOfMonth();
        org.joda.time.MonthDay monthDay37 = property35.addWrapFieldToCopy(1);
        org.joda.time.MonthDay monthDay39 = property35.addWrapFieldToCopy(0);
        org.joda.time.MonthDay monthDay41 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.MonthDay monthDay43 = monthDay41.withChronologyRetainFields(chronology42);
        org.joda.time.MonthDay monthDay45 = monthDay41.minusMonths((int) (byte) -1);
        boolean boolean46 = property35.equals((java.lang.Object) monthDay45);
        int int47 = property35.getMaximumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType48 = property35.getFieldType();
        org.joda.time.MonthDay.Property property49 = monthDay27.property(dateTimeFieldType48);
        int int50 = monthDay10.indexOf(dateTimeFieldType48);
        org.joda.time.ReadablePeriod readablePeriod51 = null;
        org.joda.time.MonthDay monthDay52 = monthDay10.minus(readablePeriod51);
        org.joda.time.MonthDay monthDay54 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.MonthDay monthDay56 = monthDay54.withChronologyRetainFields(chronology55);
        org.joda.time.MonthDay monthDay58 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.MonthDay monthDay60 = monthDay58.withChronologyRetainFields(chronology59);
        org.joda.time.DateTimeFieldType dateTimeFieldType62 = monthDay58.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property63 = monthDay56.property(dateTimeFieldType62);
        java.util.Locale locale64 = null;
        int int65 = property63.getMaximumTextLength(locale64);
        org.joda.time.MonthDay monthDay67 = property63.addWrapFieldToCopy((int) (byte) 0);
        int int68 = monthDay10.compareTo((org.joda.time.ReadablePartial) monthDay67);
        org.junit.Assert.assertNotNull(monthDay2);
        org.junit.Assert.assertNotNull(monthDay4);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(monthDay12);
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(monthDay18);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(monthDay27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(monthDay30);
        org.junit.Assert.assertNotNull(monthDay32);
        org.junit.Assert.assertNotNull(dateTimeFieldType34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(monthDay37);
        org.junit.Assert.assertNotNull(monthDay39);
        org.junit.Assert.assertNotNull(monthDay41);
        org.junit.Assert.assertNotNull(monthDay43);
        org.junit.Assert.assertNotNull(monthDay45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 31 + "'", int47 == 31);
        org.junit.Assert.assertNotNull(dateTimeFieldType48);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertNotNull(monthDay52);
        org.junit.Assert.assertNotNull(monthDay54);
        org.junit.Assert.assertNotNull(monthDay56);
        org.junit.Assert.assertNotNull(monthDay58);
        org.junit.Assert.assertNotNull(monthDay60);
        org.junit.Assert.assertNotNull(dateTimeFieldType62);
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 2 + "'", int65 == 2);
        org.junit.Assert.assertNotNull(monthDay67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1 + "'", int68 == 1);
    }

    @Test
    public void test0934() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0934");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property6 = monthDay1.dayOfMonth();
        org.joda.time.Chronology chronology7 = monthDay1.getChronology();
        org.joda.time.Chronology chronology8 = monthDay1.getChronology();
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.DateTime dateTime10 = monthDay1.toDateTime(readableInstant9);
        org.joda.time.MonthDay monthDay12 = monthDay1.plusMonths((int) ' ');
        org.joda.time.MonthDay monthDay14 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MonthDay monthDay16 = monthDay14.withChronologyRetainFields(chronology15);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = monthDay14.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.MonthDay monthDay20 = monthDay14.plus(readablePeriod19);
        org.joda.time.MonthDay monthDay22 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MonthDay monthDay24 = monthDay22.withChronologyRetainFields(chronology23);
        org.joda.time.MonthDay monthDay26 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.MonthDay monthDay28 = monthDay26.withChronologyRetainFields(chronology27);
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = monthDay26.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property31 = monthDay24.property(dateTimeFieldType30);
        int int32 = property31.get();
        org.joda.time.MonthDay monthDay34 = property31.addWrapFieldToCopy((int) (short) 1);
        boolean boolean35 = monthDay14.isBefore((org.joda.time.ReadablePartial) monthDay34);
        org.joda.time.MonthDay monthDay37 = monthDay34.minusMonths((int) (byte) 100);
        org.joda.time.MonthDay monthDay39 = monthDay37.plusMonths(1);
        org.joda.time.ReadablePeriod readablePeriod40 = null;
        org.joda.time.MonthDay monthDay41 = monthDay37.minus(readablePeriod40);
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.MonthDay monthDay43 = new org.joda.time.MonthDay(dateTimeZone42);
        boolean boolean44 = monthDay41.isEqual((org.joda.time.ReadablePartial) monthDay43);
        boolean boolean45 = monthDay1.equals((java.lang.Object) monthDay41);
        org.joda.time.MonthDay.Property property46 = monthDay41.dayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod47 = null;
        org.joda.time.MonthDay monthDay48 = monthDay41.plus(readablePeriod47);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray49 = monthDay41.getFieldTypes();
        org.joda.time.MonthDay monthDay51 = monthDay41.minusDays((int) (byte) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType52 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay.Property property53 = monthDay41.property(dateTimeFieldType52);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(monthDay12);
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(monthDay20);
        org.junit.Assert.assertNotNull(monthDay22);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertNotNull(monthDay26);
        org.junit.Assert.assertNotNull(monthDay28);
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(monthDay34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(monthDay37);
        org.junit.Assert.assertNotNull(monthDay39);
        org.junit.Assert.assertNotNull(monthDay41);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(monthDay48);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray49);
        org.junit.Assert.assertNotNull(monthDay51);
    }

    @Test
    public void test0935() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0935");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property6 = monthDay1.dayOfMonth();
        org.joda.time.MonthDay monthDay8 = property6.addWrapFieldToCopy(1);
        org.joda.time.MonthDay monthDay10 = property6.addWrapFieldToCopy(0);
        org.joda.time.MonthDay monthDay12 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MonthDay monthDay14 = monthDay12.withChronologyRetainFields(chronology13);
        org.joda.time.MonthDay monthDay16 = monthDay12.minusMonths((int) (byte) -1);
        boolean boolean17 = property6.equals((java.lang.Object) monthDay16);
        int int18 = property6.get();
        org.joda.time.DurationField durationField19 = property6.getRangeDurationField();
        org.joda.time.MonthDay monthDay21 = property6.addWrapFieldToCopy((int) (byte) 1);
        java.util.Locale locale22 = null;
        int int23 = property6.getMaximumShortTextLength(locale22);
        int int24 = property6.get();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(monthDay8);
        org.junit.Assert.assertNotNull(monthDay10);
        org.junit.Assert.assertNotNull(monthDay12);
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2 + "'", int23 == 2);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
    }

    @Test
    public void test0936() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0936");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay1.plus(readablePeriod6);
        int[] intArray8 = monthDay7.getValues();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[1, 1]");
    }

    @Test
    public void test0937() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0937");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property6 = monthDay1.dayOfMonth();
        org.joda.time.Chronology chronology7 = monthDay1.getChronology();
        org.joda.time.Chronology chronology8 = monthDay1.getChronology();
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.DateTime dateTime10 = monthDay1.toDateTime(readableInstant9);
        org.joda.time.MonthDay monthDay12 = monthDay1.plusMonths((int) ' ');
        org.joda.time.MonthDay monthDay14 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MonthDay monthDay16 = monthDay14.withChronologyRetainFields(chronology15);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = monthDay14.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.MonthDay monthDay20 = monthDay14.plus(readablePeriod19);
        org.joda.time.MonthDay monthDay22 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MonthDay monthDay24 = monthDay22.withChronologyRetainFields(chronology23);
        org.joda.time.MonthDay monthDay26 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.MonthDay monthDay28 = monthDay26.withChronologyRetainFields(chronology27);
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = monthDay26.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property31 = monthDay24.property(dateTimeFieldType30);
        int int32 = property31.get();
        org.joda.time.MonthDay monthDay34 = property31.addWrapFieldToCopy((int) (short) 1);
        boolean boolean35 = monthDay14.isBefore((org.joda.time.ReadablePartial) monthDay34);
        org.joda.time.MonthDay monthDay37 = monthDay34.minusMonths((int) (byte) 100);
        org.joda.time.MonthDay monthDay39 = monthDay37.plusMonths(1);
        org.joda.time.ReadablePeriod readablePeriod40 = null;
        org.joda.time.MonthDay monthDay41 = monthDay37.minus(readablePeriod40);
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.MonthDay monthDay43 = new org.joda.time.MonthDay(dateTimeZone42);
        boolean boolean44 = monthDay41.isEqual((org.joda.time.ReadablePartial) monthDay43);
        boolean boolean45 = monthDay1.equals((java.lang.Object) monthDay41);
        org.joda.time.MonthDay.Property property46 = monthDay41.dayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod47 = null;
        org.joda.time.MonthDay monthDay48 = monthDay41.plus(readablePeriod47);
        org.joda.time.MonthDay monthDay50 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.MonthDay monthDay52 = monthDay50.withChronologyRetainFields(chronology51);
        org.joda.time.DateTimeFieldType dateTimeFieldType54 = monthDay50.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod55 = null;
        org.joda.time.MonthDay monthDay56 = monthDay50.plus(readablePeriod55);
        org.joda.time.MonthDay monthDay58 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.MonthDay monthDay60 = monthDay58.withChronologyRetainFields(chronology59);
        org.joda.time.MonthDay monthDay62 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.MonthDay monthDay64 = monthDay62.withChronologyRetainFields(chronology63);
        org.joda.time.DateTimeFieldType dateTimeFieldType66 = monthDay62.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property67 = monthDay60.property(dateTimeFieldType66);
        int int68 = property67.get();
        org.joda.time.MonthDay monthDay70 = property67.addWrapFieldToCopy((int) (short) 1);
        boolean boolean71 = monthDay50.isBefore((org.joda.time.ReadablePartial) monthDay70);
        org.joda.time.MonthDay monthDay73 = monthDay70.minusMonths((int) (byte) 100);
        int int74 = monthDay73.getMonthOfYear();
        org.joda.time.MonthDay monthDay76 = monthDay73.withMonthOfYear(1);
        org.joda.time.ReadablePeriod readablePeriod77 = null;
        org.joda.time.MonthDay monthDay78 = monthDay73.plus(readablePeriod77);
        org.joda.time.MonthDay monthDay80 = monthDay78.withMonthOfYear(9);
        boolean boolean81 = monthDay48.equals((java.lang.Object) monthDay80);
        java.lang.Class<?> wildcardClass82 = monthDay80.getClass();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(monthDay12);
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(monthDay20);
        org.junit.Assert.assertNotNull(monthDay22);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertNotNull(monthDay26);
        org.junit.Assert.assertNotNull(monthDay28);
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(monthDay34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(monthDay37);
        org.junit.Assert.assertNotNull(monthDay39);
        org.junit.Assert.assertNotNull(monthDay41);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(monthDay48);
        org.junit.Assert.assertNotNull(monthDay50);
        org.junit.Assert.assertNotNull(monthDay52);
        org.junit.Assert.assertNotNull(dateTimeFieldType54);
        org.junit.Assert.assertNotNull(monthDay56);
        org.junit.Assert.assertNotNull(monthDay58);
        org.junit.Assert.assertNotNull(monthDay60);
        org.junit.Assert.assertNotNull(monthDay62);
        org.junit.Assert.assertNotNull(monthDay64);
        org.junit.Assert.assertNotNull(dateTimeFieldType66);
        org.junit.Assert.assertNotNull(property67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1 + "'", int68 == 1);
        org.junit.Assert.assertNotNull(monthDay70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(monthDay73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 9 + "'", int74 == 9);
        org.junit.Assert.assertNotNull(monthDay76);
        org.junit.Assert.assertNotNull(monthDay78);
        org.junit.Assert.assertNotNull(monthDay80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertNotNull(wildcardClass82);
    }

    @Test
    public void test0938() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0938");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property6 = monthDay1.dayOfMonth();
        org.joda.time.MonthDay monthDay8 = property6.addWrapFieldToCopy(1);
        java.util.Locale locale9 = null;
        java.lang.String str10 = property6.getAsText(locale9);
        java.util.Locale locale11 = null;
        java.lang.String str12 = property6.getAsText(locale11);
        java.util.Locale locale13 = null;
        java.lang.String str14 = property6.getAsShortText(locale13);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay16 = property6.setCopy("--01-04");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"--01-04\" for dayOfMonth is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(monthDay8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1" + "'", str10, "1");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "1" + "'", str12, "1");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "1" + "'", str14, "1");
    }

    @Test
    public void test0939() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0939");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.MonthDay monthDay4 = monthDay1.withPeriodAdded(readablePeriod2, 1);
        org.joda.time.MonthDay monthDay6 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MonthDay monthDay8 = monthDay6.withChronologyRetainFields(chronology7);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = monthDay6.getFieldType((int) (byte) 1);
        int int11 = monthDay4.indexOf(dateTimeFieldType10);
        int int12 = monthDay4.getMonthOfYear();
        int int13 = monthDay4.getDayOfMonth();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay4);
        org.junit.Assert.assertNotNull(monthDay6);
        org.junit.Assert.assertNotNull(monthDay8);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
    }

    @Test
    public void test0940() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0940");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        int int11 = property10.get();
        org.joda.time.DurationField durationField12 = property10.getDurationField();
        org.joda.time.MonthDay monthDay14 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MonthDay monthDay16 = monthDay14.withChronologyRetainFields(chronology15);
        org.joda.time.MonthDay monthDay18 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MonthDay monthDay20 = monthDay18.withChronologyRetainFields(chronology19);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = monthDay18.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property23 = monthDay16.property(dateTimeFieldType22);
        boolean boolean24 = property10.equals((java.lang.Object) monthDay16);
        org.joda.time.DateTimeField dateTimeField25 = property10.getField();
        java.lang.String str26 = property10.getAsString();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(monthDay18);
        org.junit.Assert.assertNotNull(monthDay20);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "1" + "'", str26, "1");
    }

    @Test
    public void test0941() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0941");
        org.joda.time.MonthDay monthDay2 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MonthDay monthDay4 = monthDay2.withChronologyRetainFields(chronology3);
        org.joda.time.MonthDay monthDay6 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MonthDay monthDay8 = monthDay6.withChronologyRetainFields(chronology7);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = monthDay6.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property11 = monthDay6.dayOfMonth();
        org.joda.time.Chronology chronology12 = monthDay6.getChronology();
        org.joda.time.MonthDay monthDay13 = org.joda.time.MonthDay.now(chronology12);
        org.joda.time.MonthDay monthDay14 = monthDay4.withChronologyRetainFields(chronology12);
        org.joda.time.MonthDay monthDay15 = new org.joda.time.MonthDay(10L, chronology12);
        org.joda.time.MonthDay monthDay17 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.MonthDay monthDay19 = monthDay17.withChronologyRetainFields(chronology18);
        org.joda.time.MonthDay monthDay21 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.MonthDay monthDay23 = monthDay21.withChronologyRetainFields(chronology22);
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = monthDay21.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property26 = monthDay19.property(dateTimeFieldType25);
        int int27 = property26.get();
        org.joda.time.MonthDay monthDay29 = property26.addWrapFieldToCopy((int) (short) 1);
        org.joda.time.MonthDay.Property property30 = monthDay29.dayOfMonth();
        int int31 = property30.getMaximumValueOverall();
        org.joda.time.MonthDay monthDay33 = property30.addWrapFieldToCopy((int) (short) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = property30.getFieldType();
        org.joda.time.MonthDay monthDay36 = monthDay15.withField(dateTimeFieldType34, (int) (short) 10);
        org.joda.time.MonthDay monthDay38 = new org.joda.time.MonthDay((long) 10);
        org.joda.time.MonthDay monthDay40 = org.joda.time.MonthDay.parse("");
        org.joda.time.ReadablePeriod readablePeriod41 = null;
        org.joda.time.MonthDay monthDay43 = monthDay40.withPeriodAdded(readablePeriod41, 1);
        org.joda.time.ReadablePeriod readablePeriod44 = null;
        org.joda.time.MonthDay monthDay45 = monthDay40.plus(readablePeriod44);
        int int46 = monthDay38.compareTo((org.joda.time.ReadablePartial) monthDay45);
        org.joda.time.ReadablePeriod readablePeriod47 = null;
        org.joda.time.MonthDay monthDay49 = monthDay45.withPeriodAdded(readablePeriod47, (int) (byte) 10);
        org.joda.time.MonthDay monthDay51 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.MonthDay monthDay53 = monthDay51.withChronologyRetainFields(chronology52);
        org.joda.time.DateTimeFieldType dateTimeFieldType55 = monthDay51.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property56 = monthDay51.dayOfMonth();
        org.joda.time.Chronology chronology57 = monthDay51.getChronology();
        org.joda.time.Chronology chronology58 = monthDay51.getChronology();
        org.joda.time.ReadableInstant readableInstant59 = null;
        org.joda.time.DateTime dateTime60 = monthDay51.toDateTime(readableInstant59);
        org.joda.time.DateTime dateTime61 = monthDay49.toDateTime(readableInstant59);
        int int62 = monthDay49.getDayOfMonth();
        boolean boolean63 = monthDay15.isBefore((org.joda.time.ReadablePartial) monthDay49);
        int[] intArray64 = monthDay49.getValues();
        org.junit.Assert.assertNotNull(monthDay2);
        org.junit.Assert.assertNotNull(monthDay4);
        org.junit.Assert.assertNotNull(monthDay6);
        org.junit.Assert.assertNotNull(monthDay8);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertNotNull(monthDay17);
        org.junit.Assert.assertNotNull(monthDay19);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertNotNull(monthDay23);
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(monthDay29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 31 + "'", int31 == 31);
        org.junit.Assert.assertNotNull(monthDay33);
        org.junit.Assert.assertNotNull(dateTimeFieldType34);
        org.junit.Assert.assertNotNull(monthDay36);
        org.junit.Assert.assertNotNull(monthDay40);
        org.junit.Assert.assertNotNull(monthDay43);
        org.junit.Assert.assertNotNull(monthDay45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(monthDay49);
        org.junit.Assert.assertNotNull(monthDay51);
        org.junit.Assert.assertNotNull(monthDay53);
        org.junit.Assert.assertNotNull(dateTimeFieldType55);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[1, 1]");
    }

    @Test
    public void test0942() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0942");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        int int11 = property10.get();
        org.joda.time.MonthDay monthDay13 = property10.addWrapFieldToCopy((int) (short) 1);
        java.lang.String str14 = property10.getAsString();
        java.util.Locale locale15 = null;
        java.lang.String str16 = property10.getAsShortText(locale15);
        java.lang.String str17 = property10.getName();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "1" + "'", str14, "1");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "1" + "'", str16, "1");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "dayOfMonth" + "'", str17, "dayOfMonth");
    }

    @Test
    public void test0943() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0943");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        int int11 = property10.get();
        org.joda.time.DurationField durationField12 = property10.getDurationField();
        org.joda.time.MonthDay monthDay14 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MonthDay monthDay16 = monthDay14.withChronologyRetainFields(chronology15);
        org.joda.time.MonthDay monthDay18 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MonthDay monthDay20 = monthDay18.withChronologyRetainFields(chronology19);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = monthDay18.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property23 = monthDay16.property(dateTimeFieldType22);
        boolean boolean24 = property10.equals((java.lang.Object) monthDay16);
        org.joda.time.DateTimeField dateTimeField25 = property10.getField();
        java.lang.String str26 = property10.getName();
        org.joda.time.DurationField durationField27 = property10.getDurationField();
        int int28 = property10.getMinimumValue();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(monthDay18);
        org.junit.Assert.assertNotNull(monthDay20);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "dayOfMonth" + "'", str26, "dayOfMonth");
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
    }

    @Test
    public void test0944() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0944");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.MonthDay monthDay1 = new org.joda.time.MonthDay(dateTimeZone0);
        org.joda.time.DateTimeField[] dateTimeFieldArray2 = monthDay1.getFields();
        org.joda.time.MonthDay monthDay4 = org.joda.time.MonthDay.parse("");
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.MonthDay monthDay7 = monthDay4.withPeriodAdded(readablePeriod5, 1);
        boolean boolean8 = monthDay1.isBefore((org.joda.time.ReadablePartial) monthDay4);
        org.joda.time.MonthDay monthDay10 = monthDay1.plusDays((int) (short) -1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = null;
        java.lang.String str12 = monthDay10.toString(dateTimeFormatter11);
        java.lang.Class<?> wildcardClass13 = monthDay10.getClass();
        org.junit.Assert.assertNotNull(dateTimeFieldArray2);
        org.junit.Assert.assertNotNull(monthDay4);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(monthDay10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "--11-24" + "'", str12, "--11-24");
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test0945() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0945");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        org.joda.time.MonthDay.Property property11 = monthDay3.monthOfYear();
        java.lang.String str12 = property11.getAsShortText();
        java.util.Locale locale13 = null;
        java.lang.String str14 = property11.getAsShortText(locale13);
        int int15 = property11.getMinimumValueOverall();
        org.joda.time.MonthDay monthDay17 = property11.addToCopy(2);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Jan" + "'", str12, "Jan");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Jan" + "'", str14, "Jan");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(monthDay17);
    }

    @Test
    public void test0946() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0946");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay1.plus(readablePeriod6);
        org.joda.time.MonthDay monthDay9 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MonthDay monthDay11 = monthDay9.withChronologyRetainFields(chronology10);
        org.joda.time.MonthDay monthDay13 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MonthDay monthDay15 = monthDay13.withChronologyRetainFields(chronology14);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = monthDay13.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property18 = monthDay11.property(dateTimeFieldType17);
        int int19 = property18.get();
        org.joda.time.MonthDay monthDay21 = property18.addWrapFieldToCopy((int) (short) 1);
        boolean boolean22 = monthDay1.isBefore((org.joda.time.ReadablePartial) monthDay21);
        org.joda.time.MonthDay monthDay24 = monthDay21.minusMonths((int) (byte) 100);
        int int25 = monthDay24.getDayOfMonth();
        org.joda.time.MonthDay monthDay27 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MonthDay monthDay29 = monthDay27.withChronologyRetainFields(chronology28);
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = monthDay27.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property32 = monthDay27.dayOfMonth();
        org.joda.time.Chronology chronology33 = monthDay27.getChronology();
        org.joda.time.Chronology chronology34 = monthDay27.getChronology();
        org.joda.time.ReadableInstant readableInstant35 = null;
        org.joda.time.DateTime dateTime36 = monthDay27.toDateTime(readableInstant35);
        org.joda.time.MonthDay monthDay38 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.MonthDay monthDay40 = monthDay38.withChronologyRetainFields(chronology39);
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = monthDay38.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod43 = null;
        org.joda.time.MonthDay monthDay44 = monthDay38.plus(readablePeriod43);
        org.joda.time.MonthDay monthDay46 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.MonthDay monthDay48 = monthDay46.withChronologyRetainFields(chronology47);
        org.joda.time.MonthDay monthDay50 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.MonthDay monthDay52 = monthDay50.withChronologyRetainFields(chronology51);
        org.joda.time.DateTimeFieldType dateTimeFieldType54 = monthDay50.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property55 = monthDay48.property(dateTimeFieldType54);
        int int56 = property55.get();
        org.joda.time.MonthDay monthDay58 = property55.addWrapFieldToCopy((int) (short) 1);
        boolean boolean59 = monthDay38.isBefore((org.joda.time.ReadablePartial) monthDay58);
        org.joda.time.DateTimeFieldType dateTimeFieldType61 = monthDay38.getFieldType(0);
        int int62 = monthDay27.get(dateTimeFieldType61);
        org.joda.time.MonthDay.Property property63 = monthDay24.property(dateTimeFieldType61);
        java.util.Locale locale64 = null;
        int int65 = property63.getMaximumTextLength(locale64);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(monthDay9);
        org.junit.Assert.assertNotNull(monthDay11);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2 + "'", int25 == 2);
        org.junit.Assert.assertNotNull(monthDay27);
        org.junit.Assert.assertNotNull(monthDay29);
        org.junit.Assert.assertNotNull(dateTimeFieldType31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(monthDay38);
        org.junit.Assert.assertNotNull(monthDay40);
        org.junit.Assert.assertNotNull(dateTimeFieldType42);
        org.junit.Assert.assertNotNull(monthDay44);
        org.junit.Assert.assertNotNull(monthDay46);
        org.junit.Assert.assertNotNull(monthDay48);
        org.junit.Assert.assertNotNull(monthDay50);
        org.junit.Assert.assertNotNull(monthDay52);
        org.junit.Assert.assertNotNull(dateTimeFieldType54);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertNotNull(monthDay58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 9 + "'", int65 == 9);
    }

    @Test
    public void test0947() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0947");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property6 = monthDay1.dayOfMonth();
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = property6.getFieldType();
        int int8 = property6.get();
        java.util.Locale locale10 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay11 = property6.setCopy("Property[dayOfMonth]", locale10);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"Property[dayOfMonth]\" for dayOfMonth is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
    }

    @Test
    public void test0948() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0948");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property6 = monthDay1.dayOfMonth();
        java.util.Locale locale7 = null;
        java.lang.String str8 = property6.getAsText(locale7);
        java.util.Locale locale9 = null;
        java.lang.String str10 = property6.getAsText(locale9);
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = property6.getFieldType();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "1" + "'", str8, "1");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1" + "'", str10, "1");
        org.junit.Assert.assertNotNull(dateTimeFieldType11);
    }

    @Test
    public void test0949() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0949");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        int int11 = property10.get();
        org.joda.time.MonthDay monthDay13 = property10.addWrapFieldToCopy((int) (short) 1);
        java.lang.String str14 = property10.getAsString();
        java.lang.String str15 = property10.getAsText();
        java.lang.String str16 = property10.getAsShortText();
        int int17 = property10.getMinimumValue();
        org.joda.time.MonthDay monthDay19 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MonthDay monthDay21 = monthDay19.withChronologyRetainFields(chronology20);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = monthDay19.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.MonthDay monthDay25 = monthDay19.plus(readablePeriod24);
        org.joda.time.MonthDay monthDay27 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MonthDay monthDay29 = monthDay27.withChronologyRetainFields(chronology28);
        org.joda.time.MonthDay monthDay31 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.MonthDay monthDay33 = monthDay31.withChronologyRetainFields(chronology32);
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = monthDay31.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property36 = monthDay29.property(dateTimeFieldType35);
        int int37 = property36.get();
        org.joda.time.MonthDay monthDay39 = property36.addWrapFieldToCopy((int) (short) 1);
        boolean boolean40 = monthDay19.isBefore((org.joda.time.ReadablePartial) monthDay39);
        org.joda.time.MonthDay monthDay42 = monthDay39.minusMonths((int) (byte) 100);
        int int43 = monthDay42.getMonthOfYear();
        java.util.Locale locale45 = null;
        java.lang.String str46 = monthDay42.toString("--01-01", locale45);
        org.joda.time.MonthDay monthDay48 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.MonthDay monthDay50 = monthDay48.withChronologyRetainFields(chronology49);
        org.joda.time.MonthDay monthDay52 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.MonthDay monthDay54 = monthDay52.withChronologyRetainFields(chronology53);
        org.joda.time.DateTimeFieldType dateTimeFieldType56 = monthDay52.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property57 = monthDay50.property(dateTimeFieldType56);
        org.joda.time.MonthDay.Property property58 = monthDay50.monthOfYear();
        java.lang.String str60 = monthDay50.toString("--11-24");
        boolean boolean61 = monthDay42.isAfter((org.joda.time.ReadablePartial) monthDay50);
        boolean boolean62 = property10.equals((java.lang.Object) monthDay42);
        org.joda.time.ReadablePartial readablePartial63 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int64 = property10.compareTo(readablePartial63);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The instant must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "1" + "'", str14, "1");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "1" + "'", str15, "1");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "1" + "'", str16, "1");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(monthDay19);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertNotNull(monthDay25);
        org.junit.Assert.assertNotNull(monthDay27);
        org.junit.Assert.assertNotNull(monthDay29);
        org.junit.Assert.assertNotNull(monthDay31);
        org.junit.Assert.assertNotNull(monthDay33);
        org.junit.Assert.assertNotNull(dateTimeFieldType35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(monthDay39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(monthDay42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 9 + "'", int43 == 9);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "--01-01" + "'", str46, "--01-01");
        org.junit.Assert.assertNotNull(monthDay48);
        org.junit.Assert.assertNotNull(monthDay50);
        org.junit.Assert.assertNotNull(monthDay52);
        org.junit.Assert.assertNotNull(monthDay54);
        org.junit.Assert.assertNotNull(dateTimeFieldType56);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "--11-24" + "'", str60, "--11-24");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
    }

    @Test
    public void test0950() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0950");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        org.joda.time.MonthDay monthDay12 = property10.addWrapFieldToCopy(1);
        org.joda.time.MonthDay monthDay14 = property10.setCopy((int) (short) 1);
        java.lang.String str15 = property10.getAsShortText();
        java.lang.String str16 = property10.getName();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(monthDay12);
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "1" + "'", str15, "1");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "dayOfMonth" + "'", str16, "dayOfMonth");
    }

    @Test
    public void test0951() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0951");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        org.joda.time.MonthDay.Property property11 = monthDay3.monthOfYear();
        org.joda.time.MonthDay monthDay13 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MonthDay monthDay15 = monthDay13.withChronologyRetainFields(chronology14);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = monthDay13.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay monthDay19 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MonthDay monthDay21 = monthDay19.withChronologyRetainFields(chronology20);
        org.joda.time.MonthDay monthDay23 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MonthDay monthDay25 = monthDay23.withChronologyRetainFields(chronology24);
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = monthDay23.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property28 = monthDay21.property(dateTimeFieldType27);
        int int29 = monthDay13.indexOf(dateTimeFieldType27);
        boolean boolean30 = monthDay3.equals((java.lang.Object) int29);
        org.joda.time.MonthDay monthDay32 = monthDay3.withMonthOfYear(9);
        org.joda.time.MonthDay monthDay34 = monthDay32.plusDays(3);
        org.joda.time.MonthDay monthDay36 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.MonthDay monthDay38 = monthDay36.withChronologyRetainFields(chronology37);
        org.joda.time.MonthDay monthDay40 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.MonthDay monthDay42 = monthDay40.withChronologyRetainFields(chronology41);
        org.joda.time.DateTimeFieldType dateTimeFieldType44 = monthDay40.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property45 = monthDay38.property(dateTimeFieldType44);
        int int46 = property45.get();
        int int47 = property45.getMaximumValue();
        boolean boolean48 = monthDay32.equals((java.lang.Object) property45);
        org.joda.time.DateTimeField dateTimeField49 = property45.getField();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(monthDay19);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertNotNull(monthDay23);
        org.junit.Assert.assertNotNull(monthDay25);
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(monthDay32);
        org.junit.Assert.assertNotNull(monthDay34);
        org.junit.Assert.assertNotNull(monthDay36);
        org.junit.Assert.assertNotNull(monthDay38);
        org.junit.Assert.assertNotNull(monthDay40);
        org.junit.Assert.assertNotNull(monthDay42);
        org.junit.Assert.assertNotNull(dateTimeFieldType44);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 31 + "'", int47 == 31);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(dateTimeField49);
    }

    @Test
    public void test0952() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0952");
        org.joda.time.MonthDay monthDay1 = new org.joda.time.MonthDay((long) 10);
        org.joda.time.MonthDay monthDay3 = org.joda.time.MonthDay.parse("");
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.MonthDay monthDay6 = monthDay3.withPeriodAdded(readablePeriod4, 1);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.MonthDay monthDay8 = monthDay3.plus(readablePeriod7);
        int int9 = monthDay1.compareTo((org.joda.time.ReadablePartial) monthDay8);
        org.joda.time.DurationFieldType durationFieldType10 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay12 = monthDay8.withFieldAdded(durationFieldType10, (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay6);
        org.junit.Assert.assertNotNull(monthDay8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
    }

    @Test
    public void test0953() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0953");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay1.plus(readablePeriod6);
        org.joda.time.MonthDay monthDay9 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MonthDay monthDay11 = monthDay9.withChronologyRetainFields(chronology10);
        org.joda.time.MonthDay monthDay13 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MonthDay monthDay15 = monthDay13.withChronologyRetainFields(chronology14);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = monthDay13.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property18 = monthDay11.property(dateTimeFieldType17);
        int int19 = property18.get();
        org.joda.time.MonthDay monthDay21 = property18.addWrapFieldToCopy((int) (short) 1);
        boolean boolean22 = monthDay1.isBefore((org.joda.time.ReadablePartial) monthDay21);
        org.joda.time.MonthDay monthDay24 = monthDay21.minusMonths((int) (byte) 100);
        org.joda.time.MonthDay monthDay26 = monthDay24.plusMonths(1);
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.MonthDay monthDay28 = monthDay24.minus(readablePeriod27);
        org.joda.time.MonthDay monthDay30 = org.joda.time.MonthDay.parse("");
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        org.joda.time.MonthDay monthDay33 = monthDay30.withPeriodAdded(readablePeriod31, 1);
        org.joda.time.MonthDay monthDay35 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.MonthDay monthDay37 = monthDay35.withChronologyRetainFields(chronology36);
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = monthDay35.getFieldType((int) (byte) 1);
        int int40 = monthDay33.indexOf(dateTimeFieldType39);
        org.joda.time.MonthDay.Property property41 = monthDay28.property(dateTimeFieldType39);
        java.util.Locale locale42 = null;
        int int43 = property41.getMaximumShortTextLength(locale42);
        java.lang.String str44 = property41.getAsShortText();
        java.util.Locale locale45 = null;
        int int46 = property41.getMaximumTextLength(locale45);
        org.joda.time.MonthDay monthDay48 = property41.setCopy("25");
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(monthDay9);
        org.junit.Assert.assertNotNull(monthDay11);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertNotNull(monthDay26);
        org.junit.Assert.assertNotNull(monthDay28);
        org.junit.Assert.assertNotNull(monthDay30);
        org.junit.Assert.assertNotNull(monthDay33);
        org.junit.Assert.assertNotNull(monthDay35);
        org.junit.Assert.assertNotNull(monthDay37);
        org.junit.Assert.assertNotNull(dateTimeFieldType39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2 + "'", int43 == 2);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "2" + "'", str44, "2");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2 + "'", int46 == 2);
        org.junit.Assert.assertNotNull(monthDay48);
    }

    @Test
    public void test0954() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0954");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        int int11 = property10.get();
        org.joda.time.MonthDay monthDay13 = property10.addWrapFieldToCopy((int) (short) 1);
        org.joda.time.MonthDay.Property property14 = monthDay13.dayOfMonth();
        int int15 = property14.getMaximumValueOverall();
        int int16 = property14.getMinimumValueOverall();
        int int17 = property14.getMinimumValueOverall();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 31 + "'", int15 == 31);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
    }

    @Test
    public void test0955() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0955");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        int int11 = property10.get();
        org.joda.time.MonthDay monthDay13 = property10.addWrapFieldToCopy((int) (short) 1);
        org.joda.time.MonthDay.Property property14 = monthDay13.dayOfMonth();
        int int15 = property14.getMaximumValueOverall();
        java.util.Locale locale17 = null;
        org.joda.time.MonthDay monthDay18 = property14.setCopy("1", locale17);
        org.joda.time.MonthDay monthDay19 = new org.joda.time.MonthDay();
        boolean boolean20 = property14.equals((java.lang.Object) monthDay19);
        org.joda.time.MonthDay monthDay22 = org.joda.time.MonthDay.parse("");
        org.joda.time.MonthDay monthDay24 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MonthDay monthDay26 = monthDay24.withChronologyRetainFields(chronology25);
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = monthDay24.getFieldType((int) (byte) 1);
        boolean boolean29 = monthDay22.isSupported(dateTimeFieldType28);
        org.joda.time.MonthDay monthDay31 = org.joda.time.MonthDay.parse("");
        org.joda.time.MonthDay monthDay33 = monthDay31.minusDays((int) '#');
        org.joda.time.MonthDay monthDay35 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.MonthDay monthDay37 = monthDay35.withChronologyRetainFields(chronology36);
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = monthDay35.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property40 = monthDay35.dayOfMonth();
        org.joda.time.Chronology chronology41 = monthDay35.getChronology();
        org.joda.time.Chronology chronology42 = monthDay35.getChronology();
        org.joda.time.ReadableInstant readableInstant43 = null;
        org.joda.time.DateTime dateTime44 = monthDay35.toDateTime(readableInstant43);
        org.joda.time.MonthDay monthDay46 = monthDay35.plusMonths((int) ' ');
        boolean boolean47 = monthDay31.isAfter((org.joda.time.ReadablePartial) monthDay46);
        boolean boolean48 = monthDay22.isBefore((org.joda.time.ReadablePartial) monthDay46);
        org.joda.time.Chronology chronology49 = monthDay46.getChronology();
        org.joda.time.MonthDay monthDay50 = new org.joda.time.MonthDay(chronology49);
        org.joda.time.MonthDay monthDay52 = org.joda.time.MonthDay.parse("");
        org.joda.time.MonthDay monthDay54 = monthDay52.minusDays((int) '#');
        org.joda.time.MonthDay monthDay56 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.MonthDay monthDay58 = monthDay56.withChronologyRetainFields(chronology57);
        org.joda.time.DateTimeFieldType dateTimeFieldType60 = monthDay56.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property61 = monthDay56.dayOfMonth();
        org.joda.time.Chronology chronology62 = monthDay56.getChronology();
        org.joda.time.Chronology chronology63 = monthDay56.getChronology();
        org.joda.time.ReadableInstant readableInstant64 = null;
        org.joda.time.DateTime dateTime65 = monthDay56.toDateTime(readableInstant64);
        org.joda.time.MonthDay monthDay67 = monthDay56.plusMonths((int) ' ');
        boolean boolean68 = monthDay52.isAfter((org.joda.time.ReadablePartial) monthDay67);
        org.joda.time.MonthDay monthDay70 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology71 = null;
        org.joda.time.MonthDay monthDay72 = monthDay70.withChronologyRetainFields(chronology71);
        org.joda.time.DateTimeFieldType dateTimeFieldType74 = monthDay70.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property75 = monthDay70.dayOfMonth();
        org.joda.time.MonthDay monthDay77 = property75.addWrapFieldToCopy(1);
        org.joda.time.MonthDay monthDay79 = property75.addWrapFieldToCopy(0);
        org.joda.time.MonthDay monthDay81 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology82 = null;
        org.joda.time.MonthDay monthDay83 = monthDay81.withChronologyRetainFields(chronology82);
        org.joda.time.MonthDay monthDay85 = monthDay81.minusMonths((int) (byte) -1);
        boolean boolean86 = property75.equals((java.lang.Object) monthDay85);
        int int87 = property75.getMaximumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType88 = property75.getFieldType();
        org.joda.time.MonthDay.Property property89 = monthDay67.property(dateTimeFieldType88);
        boolean boolean90 = monthDay50.isSupported(dateTimeFieldType88);
        org.joda.time.MonthDay.Property property91 = monthDay19.property(dateTimeFieldType88);
        org.joda.time.DateTimeFieldType dateTimeFieldType92 = property91.getFieldType();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 31 + "'", int15 == 31);
        org.junit.Assert.assertNotNull(monthDay18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(monthDay22);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertNotNull(monthDay26);
        org.junit.Assert.assertNotNull(dateTimeFieldType28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(monthDay31);
        org.junit.Assert.assertNotNull(monthDay33);
        org.junit.Assert.assertNotNull(monthDay35);
        org.junit.Assert.assertNotNull(monthDay37);
        org.junit.Assert.assertNotNull(dateTimeFieldType39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(monthDay46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(monthDay52);
        org.junit.Assert.assertNotNull(monthDay54);
        org.junit.Assert.assertNotNull(monthDay56);
        org.junit.Assert.assertNotNull(monthDay58);
        org.junit.Assert.assertNotNull(dateTimeFieldType60);
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertNotNull(chronology62);
        org.junit.Assert.assertNotNull(chronology63);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(monthDay67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(monthDay70);
        org.junit.Assert.assertNotNull(monthDay72);
        org.junit.Assert.assertNotNull(dateTimeFieldType74);
        org.junit.Assert.assertNotNull(property75);
        org.junit.Assert.assertNotNull(monthDay77);
        org.junit.Assert.assertNotNull(monthDay79);
        org.junit.Assert.assertNotNull(monthDay81);
        org.junit.Assert.assertNotNull(monthDay83);
        org.junit.Assert.assertNotNull(monthDay85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 31 + "'", int87 == 31);
        org.junit.Assert.assertNotNull(dateTimeFieldType88);
        org.junit.Assert.assertNotNull(property89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertNotNull(property91);
        org.junit.Assert.assertNotNull(dateTimeFieldType92);
    }

    @Test
    public void test0956() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0956");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay1.plus(readablePeriod6);
        org.joda.time.MonthDay monthDay9 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MonthDay monthDay11 = monthDay9.withChronologyRetainFields(chronology10);
        org.joda.time.MonthDay monthDay13 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MonthDay monthDay15 = monthDay13.withChronologyRetainFields(chronology14);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = monthDay13.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property18 = monthDay11.property(dateTimeFieldType17);
        int int19 = property18.get();
        org.joda.time.MonthDay monthDay21 = property18.addWrapFieldToCopy((int) (short) 1);
        boolean boolean22 = monthDay1.isBefore((org.joda.time.ReadablePartial) monthDay21);
        org.joda.time.MonthDay monthDay24 = monthDay21.minusMonths((int) (byte) 100);
        org.joda.time.MonthDay monthDay26 = monthDay24.plusMonths(1);
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.MonthDay monthDay28 = monthDay24.minus(readablePeriod27);
        org.joda.time.MonthDay monthDay30 = org.joda.time.MonthDay.parse("");
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        org.joda.time.MonthDay monthDay33 = monthDay30.withPeriodAdded(readablePeriod31, 1);
        org.joda.time.MonthDay monthDay35 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.MonthDay monthDay37 = monthDay35.withChronologyRetainFields(chronology36);
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = monthDay35.getFieldType((int) (byte) 1);
        int int40 = monthDay33.indexOf(dateTimeFieldType39);
        org.joda.time.MonthDay.Property property41 = monthDay28.property(dateTimeFieldType39);
        org.joda.time.MonthDay monthDay43 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.MonthDay monthDay45 = monthDay43.withChronologyRetainFields(chronology44);
        org.joda.time.MonthDay monthDay47 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.MonthDay monthDay49 = monthDay47.withChronologyRetainFields(chronology48);
        org.joda.time.DateTimeFieldType dateTimeFieldType51 = monthDay47.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property52 = monthDay45.property(dateTimeFieldType51);
        int int53 = property52.get();
        int int54 = property52.getMaximumValue();
        org.joda.time.MonthDay monthDay56 = property52.setCopy((int) (short) 1);
        org.joda.time.MonthDay monthDay58 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.MonthDay monthDay60 = monthDay58.withChronologyRetainFields(chronology59);
        org.joda.time.DateTimeFieldType dateTimeFieldType62 = monthDay58.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod63 = null;
        org.joda.time.MonthDay monthDay64 = monthDay58.plus(readablePeriod63);
        int int65 = monthDay58.getDayOfMonth();
        int int66 = property52.compareTo((org.joda.time.ReadablePartial) monthDay58);
        org.joda.time.DateTimeField[] dateTimeFieldArray67 = monthDay58.getFields();
        org.joda.time.MonthDay monthDay69 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology70 = null;
        org.joda.time.MonthDay monthDay71 = monthDay69.withChronologyRetainFields(chronology70);
        org.joda.time.DateTimeFieldType dateTimeFieldType73 = monthDay69.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property74 = monthDay69.dayOfMonth();
        org.joda.time.MonthDay monthDay76 = property74.addWrapFieldToCopy(1);
        boolean boolean77 = monthDay58.isEqual((org.joda.time.ReadablePartial) monthDay76);
        java.lang.String str78 = monthDay58.toString();
        boolean boolean79 = monthDay28.isEqual((org.joda.time.ReadablePartial) monthDay58);
        org.joda.time.MonthDay monthDay81 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology82 = null;
        org.joda.time.MonthDay monthDay83 = monthDay81.withChronologyRetainFields(chronology82);
        org.joda.time.MonthDay monthDay85 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology86 = null;
        org.joda.time.MonthDay monthDay87 = monthDay85.withChronologyRetainFields(chronology86);
        org.joda.time.DateTimeFieldType dateTimeFieldType89 = monthDay85.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property90 = monthDay85.dayOfMonth();
        org.joda.time.Chronology chronology91 = monthDay85.getChronology();
        org.joda.time.MonthDay monthDay92 = org.joda.time.MonthDay.now(chronology91);
        org.joda.time.MonthDay monthDay93 = monthDay83.withChronologyRetainFields(chronology91);
        org.joda.time.MonthDay monthDay94 = org.joda.time.MonthDay.now(chronology91);
        org.joda.time.MonthDay monthDay95 = monthDay28.withChronologyRetainFields(chronology91);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(monthDay9);
        org.junit.Assert.assertNotNull(monthDay11);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertNotNull(monthDay26);
        org.junit.Assert.assertNotNull(monthDay28);
        org.junit.Assert.assertNotNull(monthDay30);
        org.junit.Assert.assertNotNull(monthDay33);
        org.junit.Assert.assertNotNull(monthDay35);
        org.junit.Assert.assertNotNull(monthDay37);
        org.junit.Assert.assertNotNull(dateTimeFieldType39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(monthDay43);
        org.junit.Assert.assertNotNull(monthDay45);
        org.junit.Assert.assertNotNull(monthDay47);
        org.junit.Assert.assertNotNull(monthDay49);
        org.junit.Assert.assertNotNull(dateTimeFieldType51);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 31 + "'", int54 == 31);
        org.junit.Assert.assertNotNull(monthDay56);
        org.junit.Assert.assertNotNull(monthDay58);
        org.junit.Assert.assertNotNull(monthDay60);
        org.junit.Assert.assertNotNull(dateTimeFieldType62);
        org.junit.Assert.assertNotNull(monthDay64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldArray67);
        org.junit.Assert.assertNotNull(monthDay69);
        org.junit.Assert.assertNotNull(monthDay71);
        org.junit.Assert.assertNotNull(dateTimeFieldType73);
        org.junit.Assert.assertNotNull(property74);
        org.junit.Assert.assertNotNull(monthDay76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "--01-01" + "'", str78, "--01-01");
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(monthDay81);
        org.junit.Assert.assertNotNull(monthDay83);
        org.junit.Assert.assertNotNull(monthDay85);
        org.junit.Assert.assertNotNull(monthDay87);
        org.junit.Assert.assertNotNull(dateTimeFieldType89);
        org.junit.Assert.assertNotNull(property90);
        org.junit.Assert.assertNotNull(chronology91);
        org.junit.Assert.assertNotNull(monthDay92);
        org.junit.Assert.assertNotNull(monthDay93);
        org.junit.Assert.assertNotNull(monthDay94);
        org.junit.Assert.assertNotNull(monthDay95);
    }

    @Test
    public void test0957() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0957");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        org.joda.time.MonthDay.Property property11 = monthDay3.monthOfYear();
        java.lang.String str12 = property11.getAsShortText();
        int int13 = property11.getMinimumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = property11.getFieldType();
        java.util.Locale locale15 = null;
        int int16 = property11.getMaximumTextLength(locale15);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay18 = property11.setCopy("--08-02");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"--08-02\" for monthOfYear is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Jan" + "'", str12, "Jan");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 9 + "'", int16 == 9);
    }

    @Test
    public void test0958() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0958");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        org.joda.time.MonthDay monthDay12 = property10.addWrapFieldToCopy(1);
        org.joda.time.MonthDay monthDay14 = property10.setCopy((int) (short) 1);
        org.joda.time.MonthDay monthDay16 = property10.addToCopy(11);
        java.util.Locale locale17 = null;
        java.lang.String str18 = property10.getAsShortText(locale17);
        org.joda.time.MonthDay monthDay20 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.MonthDay monthDay22 = monthDay20.withChronologyRetainFields(chronology21);
        org.joda.time.MonthDay monthDay24 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MonthDay monthDay26 = monthDay24.withChronologyRetainFields(chronology25);
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = monthDay24.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property29 = monthDay22.property(dateTimeFieldType28);
        int int30 = property29.get();
        org.joda.time.DurationField durationField31 = property29.getDurationField();
        java.util.Locale locale32 = null;
        int int33 = property29.getMaximumTextLength(locale32);
        org.joda.time.MonthDay monthDay35 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.MonthDay monthDay37 = monthDay35.withChronologyRetainFields(chronology36);
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = monthDay35.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property40 = monthDay35.dayOfMonth();
        org.joda.time.Chronology chronology41 = monthDay35.getChronology();
        org.joda.time.Chronology chronology42 = monthDay35.getChronology();
        org.joda.time.ReadableInstant readableInstant43 = null;
        org.joda.time.DateTime dateTime44 = monthDay35.toDateTime(readableInstant43);
        int int45 = property29.compareTo((org.joda.time.ReadableInstant) dateTime44);
        boolean boolean46 = property10.equals((java.lang.Object) dateTime44);
        java.util.Locale locale48 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay49 = property10.setCopy("--11-24", locale48);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"--11-24\" for dayOfMonth is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(monthDay12);
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "1" + "'", str18, "1");
        org.junit.Assert.assertNotNull(monthDay20);
        org.junit.Assert.assertNotNull(monthDay22);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertNotNull(monthDay26);
        org.junit.Assert.assertNotNull(dateTimeFieldType28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2 + "'", int33 == 2);
        org.junit.Assert.assertNotNull(monthDay35);
        org.junit.Assert.assertNotNull(monthDay37);
        org.junit.Assert.assertNotNull(dateTimeFieldType39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
    }

    @Test
    public void test0959() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0959");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        int int11 = property10.get();
        org.joda.time.MonthDay monthDay13 = property10.addWrapFieldToCopy((int) (short) 1);
        org.joda.time.MonthDay.Property property14 = monthDay13.dayOfMonth();
        int int15 = property14.getMaximumValueOverall();
        int int16 = property14.getMinimumValueOverall();
        org.joda.time.MonthDay monthDay18 = property14.addWrapFieldToCopy((int) (byte) 1);
        java.lang.String str19 = property14.getAsText();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 31 + "'", int15 == 31);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(monthDay18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "2" + "'", str19, "2");
    }

    @Test
    public void test0960() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0960");
        org.joda.time.MonthDay monthDay2 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MonthDay monthDay4 = monthDay2.withChronologyRetainFields(chronology3);
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = monthDay2.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.MonthDay monthDay8 = monthDay2.plus(readablePeriod7);
        org.joda.time.MonthDay monthDay10 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MonthDay monthDay12 = monthDay10.withChronologyRetainFields(chronology11);
        org.joda.time.MonthDay monthDay14 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MonthDay monthDay16 = monthDay14.withChronologyRetainFields(chronology15);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = monthDay14.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property19 = monthDay12.property(dateTimeFieldType18);
        int int20 = property19.get();
        org.joda.time.MonthDay monthDay22 = property19.addWrapFieldToCopy((int) (short) 1);
        boolean boolean23 = monthDay2.isBefore((org.joda.time.ReadablePartial) monthDay22);
        org.joda.time.MonthDay monthDay25 = monthDay22.minusMonths((int) (byte) 100);
        org.joda.time.MonthDay monthDay27 = monthDay25.plusMonths(1);
        org.joda.time.MonthDay monthDay29 = org.joda.time.MonthDay.parse("");
        org.joda.time.MonthDay monthDay31 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.MonthDay monthDay33 = monthDay31.withChronologyRetainFields(chronology32);
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = monthDay31.getFieldType((int) (byte) 1);
        boolean boolean36 = monthDay29.isSupported(dateTimeFieldType35);
        boolean boolean37 = monthDay25.isSupported(dateTimeFieldType35);
        org.joda.time.Chronology chronology38 = monthDay25.getChronology();
        org.joda.time.MonthDay monthDay39 = org.joda.time.MonthDay.now(chronology38);
        org.joda.time.MonthDay monthDay40 = new org.joda.time.MonthDay(100L, chronology38);
        org.joda.time.ReadablePeriod readablePeriod41 = null;
        org.joda.time.MonthDay monthDay42 = monthDay40.plus(readablePeriod41);
        org.junit.Assert.assertNotNull(monthDay2);
        org.junit.Assert.assertNotNull(monthDay4);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(monthDay8);
        org.junit.Assert.assertNotNull(monthDay10);
        org.junit.Assert.assertNotNull(monthDay12);
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(monthDay22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(monthDay25);
        org.junit.Assert.assertNotNull(monthDay27);
        org.junit.Assert.assertNotNull(monthDay29);
        org.junit.Assert.assertNotNull(monthDay31);
        org.junit.Assert.assertNotNull(monthDay33);
        org.junit.Assert.assertNotNull(dateTimeFieldType35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(monthDay39);
        org.junit.Assert.assertNotNull(monthDay42);
    }

    @Test
    public void test0961() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0961");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.MonthDay monthDay3 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MonthDay monthDay5 = monthDay3.withChronologyRetainFields(chronology4);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = monthDay3.getFieldType((int) (byte) 1);
        boolean boolean8 = monthDay1.isSupported(dateTimeFieldType7);
        org.joda.time.MonthDay monthDay10 = org.joda.time.MonthDay.parse("");
        org.joda.time.MonthDay monthDay12 = monthDay10.minusDays((int) '#');
        org.joda.time.MonthDay monthDay14 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MonthDay monthDay16 = monthDay14.withChronologyRetainFields(chronology15);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = monthDay14.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property19 = monthDay14.dayOfMonth();
        org.joda.time.Chronology chronology20 = monthDay14.getChronology();
        org.joda.time.Chronology chronology21 = monthDay14.getChronology();
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.DateTime dateTime23 = monthDay14.toDateTime(readableInstant22);
        org.joda.time.MonthDay monthDay25 = monthDay14.plusMonths((int) ' ');
        boolean boolean26 = monthDay10.isAfter((org.joda.time.ReadablePartial) monthDay25);
        boolean boolean27 = monthDay1.isBefore((org.joda.time.ReadablePartial) monthDay25);
        int int28 = monthDay1.getMonthOfYear();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray29 = monthDay1.getFieldTypes();
        org.joda.time.MonthDay monthDay31 = monthDay1.plusMonths(9);
        org.joda.time.MonthDay monthDay33 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MonthDay monthDay35 = monthDay33.withChronologyRetainFields(chronology34);
        org.joda.time.MonthDay monthDay37 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.MonthDay monthDay39 = monthDay37.withChronologyRetainFields(chronology38);
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = monthDay37.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property42 = monthDay35.property(dateTimeFieldType41);
        org.joda.time.MonthDay.Property property43 = monthDay35.monthOfYear();
        int[] intArray44 = monthDay35.getValues();
        boolean boolean45 = monthDay1.equals((java.lang.Object) intArray44);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(monthDay10);
        org.junit.Assert.assertNotNull(monthDay12);
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(monthDay25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray29);
        org.junit.Assert.assertNotNull(monthDay31);
        org.junit.Assert.assertNotNull(monthDay33);
        org.junit.Assert.assertNotNull(monthDay35);
        org.junit.Assert.assertNotNull(monthDay37);
        org.junit.Assert.assertNotNull(monthDay39);
        org.junit.Assert.assertNotNull(dateTimeFieldType41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[1, 1]");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
    }

    @Test
    public void test0962() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0962");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("--01-01");
        org.joda.time.DateTimeField[] dateTimeFieldArray2 = monthDay1.getFields();
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        org.joda.time.MonthDay monthDay5 = monthDay1.withPeriodAdded(readablePeriod3, (int) '4');
        org.joda.time.MonthDay monthDay7 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MonthDay monthDay9 = monthDay7.withChronologyRetainFields(chronology8);
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = monthDay7.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.MonthDay monthDay13 = monthDay7.plus(readablePeriod12);
        org.joda.time.MonthDay monthDay15 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MonthDay monthDay17 = monthDay15.withChronologyRetainFields(chronology16);
        org.joda.time.MonthDay monthDay19 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MonthDay monthDay21 = monthDay19.withChronologyRetainFields(chronology20);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = monthDay19.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property24 = monthDay17.property(dateTimeFieldType23);
        int int25 = property24.get();
        org.joda.time.MonthDay monthDay27 = property24.addWrapFieldToCopy((int) (short) 1);
        boolean boolean28 = monthDay7.isBefore((org.joda.time.ReadablePartial) monthDay27);
        org.joda.time.MonthDay monthDay30 = monthDay27.minusMonths((int) (byte) 100);
        org.joda.time.MonthDay monthDay32 = monthDay30.plusMonths(1);
        org.joda.time.MonthDay monthDay34 = org.joda.time.MonthDay.parse("");
        org.joda.time.MonthDay monthDay36 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.MonthDay monthDay38 = monthDay36.withChronologyRetainFields(chronology37);
        org.joda.time.DateTimeFieldType dateTimeFieldType40 = monthDay36.getFieldType((int) (byte) 1);
        boolean boolean41 = monthDay34.isSupported(dateTimeFieldType40);
        boolean boolean42 = monthDay30.isSupported(dateTimeFieldType40);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay44 = monthDay5.withField(dateTimeFieldType40, (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 0 for dayOfMonth must be in the range [1,31]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(dateTimeFieldArray2);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(monthDay9);
        org.junit.Assert.assertNotNull(dateTimeFieldType11);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(monthDay17);
        org.junit.Assert.assertNotNull(monthDay19);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(monthDay27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(monthDay30);
        org.junit.Assert.assertNotNull(monthDay32);
        org.junit.Assert.assertNotNull(monthDay34);
        org.junit.Assert.assertNotNull(monthDay36);
        org.junit.Assert.assertNotNull(monthDay38);
        org.junit.Assert.assertNotNull(dateTimeFieldType40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
    }

    @Test
    public void test0963() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0963");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.MonthDay monthDay4 = monthDay1.withPeriodAdded(readablePeriod2, 1);
        org.joda.time.MonthDay monthDay6 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MonthDay monthDay8 = monthDay6.withChronologyRetainFields(chronology7);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = monthDay6.getFieldType((int) (byte) 1);
        int int11 = monthDay4.indexOf(dateTimeFieldType10);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MonthDay monthDay13 = monthDay4.withChronologyRetainFields(chronology12);
        org.joda.time.MonthDay.Property property14 = monthDay13.dayOfMonth();
        int int15 = property14.getMinimumValue();
        int int16 = property14.getMaximumValueOverall();
        java.util.Locale locale17 = null;
        int int18 = property14.getMaximumShortTextLength(locale17);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay4);
        org.junit.Assert.assertNotNull(monthDay6);
        org.junit.Assert.assertNotNull(monthDay8);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 31 + "'", int16 == 31);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2 + "'", int18 == 2);
    }

    @Test
    public void test0964() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0964");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        int int11 = property10.get();
        org.joda.time.MonthDay monthDay13 = property10.addWrapFieldToCopy((int) (short) 1);
        org.joda.time.MonthDay.Property property14 = monthDay13.dayOfMonth();
        int int15 = property14.getMaximumValue();
        java.lang.String str16 = property14.getAsText();
        java.util.Locale locale17 = null;
        java.lang.String str18 = property14.getAsShortText(locale17);
        org.joda.time.MonthDay monthDay20 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.MonthDay monthDay22 = monthDay20.withChronologyRetainFields(chronology21);
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = monthDay20.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        org.joda.time.MonthDay monthDay26 = monthDay20.plus(readablePeriod25);
        org.joda.time.MonthDay monthDay28 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MonthDay monthDay30 = monthDay28.withChronologyRetainFields(chronology29);
        org.joda.time.MonthDay monthDay32 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.MonthDay monthDay34 = monthDay32.withChronologyRetainFields(chronology33);
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = monthDay32.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property37 = monthDay30.property(dateTimeFieldType36);
        int int38 = property37.get();
        org.joda.time.MonthDay monthDay40 = property37.addWrapFieldToCopy((int) (short) 1);
        boolean boolean41 = monthDay20.isBefore((org.joda.time.ReadablePartial) monthDay40);
        org.joda.time.MonthDay monthDay43 = monthDay40.minusMonths((int) (byte) 100);
        int int44 = monthDay43.getMonthOfYear();
        org.joda.time.MonthDay monthDay46 = monthDay43.withMonthOfYear(1);
        org.joda.time.ReadablePeriod readablePeriod47 = null;
        org.joda.time.MonthDay monthDay48 = monthDay43.plus(readablePeriod47);
        int int49 = property14.compareTo((org.joda.time.ReadablePartial) monthDay48);
        org.joda.time.MonthDay monthDay51 = property14.addWrapFieldToCopy((int) '#');
        org.joda.time.MonthDay monthDay53 = property14.addToCopy(3);
        java.util.Locale locale54 = null;
        int int55 = property14.getMaximumTextLength(locale54);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 31 + "'", int15 == 31);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "2" + "'", str16, "2");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "2" + "'", str18, "2");
        org.junit.Assert.assertNotNull(monthDay20);
        org.junit.Assert.assertNotNull(monthDay22);
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertNotNull(monthDay26);
        org.junit.Assert.assertNotNull(monthDay28);
        org.junit.Assert.assertNotNull(monthDay30);
        org.junit.Assert.assertNotNull(monthDay32);
        org.junit.Assert.assertNotNull(monthDay34);
        org.junit.Assert.assertNotNull(dateTimeFieldType36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(monthDay40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(monthDay43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 9 + "'", int44 == 9);
        org.junit.Assert.assertNotNull(monthDay46);
        org.junit.Assert.assertNotNull(monthDay48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(monthDay51);
        org.junit.Assert.assertNotNull(monthDay53);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 2 + "'", int55 == 2);
    }

    @Test
    public void test0965() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0965");
        org.joda.time.MonthDay monthDay2 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MonthDay monthDay4 = monthDay2.withChronologyRetainFields(chronology3);
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = monthDay2.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property7 = monthDay2.dayOfMonth();
        org.joda.time.Chronology chronology8 = monthDay2.getChronology();
        org.joda.time.MonthDay monthDay9 = new org.joda.time.MonthDay((-1L), chronology8);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = null;
        java.lang.String str11 = monthDay9.toString(dateTimeFormatter10);
        org.junit.Assert.assertNotNull(monthDay2);
        org.junit.Assert.assertNotNull(monthDay4);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "--12-31" + "'", str11, "--12-31");
    }

    @Test
    public void test0966() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0966");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay5.dayOfMonth();
        org.joda.time.Chronology chronology11 = monthDay5.getChronology();
        org.joda.time.MonthDay monthDay12 = org.joda.time.MonthDay.now(chronology11);
        org.joda.time.MonthDay monthDay13 = monthDay3.withChronologyRetainFields(chronology11);
        org.joda.time.Chronology chronology14 = monthDay3.getChronology();
        org.joda.time.MonthDay monthDay15 = new org.joda.time.MonthDay((java.lang.Object) monthDay3);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType17 = monthDay3.getFieldType(4);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 4");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(monthDay12);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(chronology14);
    }

    @Test
    public void test0967() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0967");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        int int11 = property10.get();
        java.lang.String str12 = property10.toString();
        org.joda.time.MonthDay monthDay14 = property10.addWrapFieldToCopy((int) (short) -1);
        org.joda.time.MonthDay monthDay16 = monthDay14.minusDays((int) (byte) 10);
        java.util.Locale locale18 = null;
        java.lang.String str19 = monthDay16.toString("2", locale18);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Property[dayOfMonth]" + "'", str12, "Property[dayOfMonth]");
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "2" + "'", str19, "2");
    }

    @Test
    public void test0968() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0968");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay1.plus(readablePeriod6);
        org.joda.time.MonthDay monthDay9 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MonthDay monthDay11 = monthDay9.withChronologyRetainFields(chronology10);
        org.joda.time.MonthDay monthDay13 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MonthDay monthDay15 = monthDay13.withChronologyRetainFields(chronology14);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = monthDay13.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property18 = monthDay11.property(dateTimeFieldType17);
        int int19 = property18.get();
        org.joda.time.MonthDay monthDay21 = property18.addWrapFieldToCopy((int) (short) 1);
        boolean boolean22 = monthDay1.isBefore((org.joda.time.ReadablePartial) monthDay21);
        org.joda.time.MonthDay monthDay24 = monthDay21.minusMonths((int) (byte) 100);
        org.joda.time.MonthDay monthDay26 = monthDay24.minusDays(31);
        org.joda.time.MonthDay monthDay28 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MonthDay monthDay30 = monthDay28.withChronologyRetainFields(chronology29);
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = monthDay28.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod33 = null;
        org.joda.time.MonthDay monthDay34 = monthDay28.plus(readablePeriod33);
        org.joda.time.MonthDay monthDay36 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.MonthDay monthDay38 = monthDay36.withChronologyRetainFields(chronology37);
        org.joda.time.MonthDay monthDay40 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.MonthDay monthDay42 = monthDay40.withChronologyRetainFields(chronology41);
        org.joda.time.DateTimeFieldType dateTimeFieldType44 = monthDay40.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property45 = monthDay38.property(dateTimeFieldType44);
        int int46 = property45.get();
        org.joda.time.MonthDay monthDay48 = property45.addWrapFieldToCopy((int) (short) 1);
        boolean boolean49 = monthDay28.isBefore((org.joda.time.ReadablePartial) monthDay48);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.MonthDay monthDay51 = monthDay28.withChronologyRetainFields(chronology50);
        org.joda.time.Chronology chronology52 = monthDay51.getChronology();
        int[] intArray53 = monthDay51.getValues();
        org.joda.time.MonthDay monthDay55 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.MonthDay monthDay57 = monthDay55.withChronologyRetainFields(chronology56);
        org.joda.time.DateTimeFieldType dateTimeFieldType59 = monthDay55.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay monthDay61 = monthDay51.withField(dateTimeFieldType59, 10);
        org.joda.time.MonthDay monthDay63 = monthDay26.withField(dateTimeFieldType59, 31);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(monthDay9);
        org.junit.Assert.assertNotNull(monthDay11);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertNotNull(monthDay26);
        org.junit.Assert.assertNotNull(monthDay28);
        org.junit.Assert.assertNotNull(monthDay30);
        org.junit.Assert.assertNotNull(dateTimeFieldType32);
        org.junit.Assert.assertNotNull(monthDay34);
        org.junit.Assert.assertNotNull(monthDay36);
        org.junit.Assert.assertNotNull(monthDay38);
        org.junit.Assert.assertNotNull(monthDay40);
        org.junit.Assert.assertNotNull(monthDay42);
        org.junit.Assert.assertNotNull(dateTimeFieldType44);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertNotNull(monthDay48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(monthDay51);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[1, 1]");
        org.junit.Assert.assertNotNull(monthDay55);
        org.junit.Assert.assertNotNull(monthDay57);
        org.junit.Assert.assertNotNull(dateTimeFieldType59);
        org.junit.Assert.assertNotNull(monthDay61);
        org.junit.Assert.assertNotNull(monthDay63);
    }

    @Test
    public void test0969() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0969");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        org.joda.time.MonthDay.Property property11 = monthDay3.monthOfYear();
        java.lang.String str12 = property11.getAsShortText();
        org.joda.time.MonthDay monthDay15 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MonthDay monthDay17 = monthDay15.withChronologyRetainFields(chronology16);
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = monthDay15.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.MonthDay monthDay21 = monthDay15.plus(readablePeriod20);
        org.joda.time.MonthDay monthDay23 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MonthDay monthDay25 = monthDay23.withChronologyRetainFields(chronology24);
        org.joda.time.MonthDay monthDay27 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MonthDay monthDay29 = monthDay27.withChronologyRetainFields(chronology28);
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = monthDay27.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property32 = monthDay25.property(dateTimeFieldType31);
        int int33 = property32.get();
        org.joda.time.MonthDay monthDay35 = property32.addWrapFieldToCopy((int) (short) 1);
        boolean boolean36 = monthDay15.isBefore((org.joda.time.ReadablePartial) monthDay35);
        org.joda.time.MonthDay monthDay38 = monthDay35.minusMonths((int) (byte) 100);
        org.joda.time.MonthDay monthDay40 = monthDay38.minusDays(31);
        org.joda.time.MonthDay monthDay42 = org.joda.time.MonthDay.parse("");
        org.joda.time.ReadablePeriod readablePeriod43 = null;
        org.joda.time.MonthDay monthDay45 = monthDay42.withPeriodAdded(readablePeriod43, 1);
        org.joda.time.MonthDay monthDay47 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.MonthDay monthDay49 = monthDay47.withChronologyRetainFields(chronology48);
        org.joda.time.DateTimeFieldType dateTimeFieldType51 = monthDay47.getFieldType((int) (byte) 1);
        int int52 = monthDay45.indexOf(dateTimeFieldType51);
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.MonthDay monthDay54 = monthDay45.withChronologyRetainFields(chronology53);
        org.joda.time.MonthDay monthDay56 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.MonthDay monthDay58 = monthDay56.withChronologyRetainFields(chronology57);
        org.joda.time.DateTimeFieldType dateTimeFieldType60 = monthDay56.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod61 = null;
        org.joda.time.MonthDay monthDay62 = monthDay56.plus(readablePeriod61);
        org.joda.time.MonthDay monthDay64 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.MonthDay monthDay66 = monthDay64.withChronologyRetainFields(chronology65);
        org.joda.time.MonthDay monthDay68 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology69 = null;
        org.joda.time.MonthDay monthDay70 = monthDay68.withChronologyRetainFields(chronology69);
        org.joda.time.DateTimeFieldType dateTimeFieldType72 = monthDay68.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property73 = monthDay66.property(dateTimeFieldType72);
        int int74 = property73.get();
        org.joda.time.MonthDay monthDay76 = property73.addWrapFieldToCopy((int) (short) 1);
        boolean boolean77 = monthDay56.isBefore((org.joda.time.ReadablePartial) monthDay76);
        org.joda.time.Chronology chronology78 = null;
        org.joda.time.MonthDay monthDay79 = monthDay56.withChronologyRetainFields(chronology78);
        org.joda.time.Chronology chronology80 = monthDay79.getChronology();
        org.joda.time.MonthDay monthDay81 = monthDay54.withChronologyRetainFields(chronology80);
        org.joda.time.MonthDay monthDay82 = monthDay40.withChronologyRetainFields(chronology80);
        org.joda.time.Chronology chronology83 = monthDay82.getChronology();
        org.joda.time.MonthDay monthDay84 = org.joda.time.MonthDay.now(chronology83);
        org.joda.time.MonthDay monthDay85 = new org.joda.time.MonthDay((long) (byte) 0, chronology83);
        int int86 = property11.compareTo((org.joda.time.ReadablePartial) monthDay85);
        org.joda.time.DateTimeField dateTimeField88 = monthDay85.getField((int) (byte) 1);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Jan" + "'", str12, "Jan");
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(monthDay17);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertNotNull(monthDay23);
        org.junit.Assert.assertNotNull(monthDay25);
        org.junit.Assert.assertNotNull(monthDay27);
        org.junit.Assert.assertNotNull(monthDay29);
        org.junit.Assert.assertNotNull(dateTimeFieldType31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(monthDay35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(monthDay38);
        org.junit.Assert.assertNotNull(monthDay40);
        org.junit.Assert.assertNotNull(monthDay42);
        org.junit.Assert.assertNotNull(monthDay45);
        org.junit.Assert.assertNotNull(monthDay47);
        org.junit.Assert.assertNotNull(monthDay49);
        org.junit.Assert.assertNotNull(dateTimeFieldType51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertNotNull(monthDay54);
        org.junit.Assert.assertNotNull(monthDay56);
        org.junit.Assert.assertNotNull(monthDay58);
        org.junit.Assert.assertNotNull(dateTimeFieldType60);
        org.junit.Assert.assertNotNull(monthDay62);
        org.junit.Assert.assertNotNull(monthDay64);
        org.junit.Assert.assertNotNull(monthDay66);
        org.junit.Assert.assertNotNull(monthDay68);
        org.junit.Assert.assertNotNull(monthDay70);
        org.junit.Assert.assertNotNull(dateTimeFieldType72);
        org.junit.Assert.assertNotNull(property73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 1 + "'", int74 == 1);
        org.junit.Assert.assertNotNull(monthDay76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(monthDay79);
        org.junit.Assert.assertNotNull(chronology80);
        org.junit.Assert.assertNotNull(monthDay81);
        org.junit.Assert.assertNotNull(monthDay82);
        org.junit.Assert.assertNotNull(chronology83);
        org.junit.Assert.assertNotNull(monthDay84);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertNotNull(dateTimeField88);
    }

    @Test
    public void test0970() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0970");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay1.plus(readablePeriod6);
        org.joda.time.MonthDay monthDay9 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MonthDay monthDay11 = monthDay9.withChronologyRetainFields(chronology10);
        org.joda.time.MonthDay monthDay13 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MonthDay monthDay15 = monthDay13.withChronologyRetainFields(chronology14);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = monthDay13.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property18 = monthDay11.property(dateTimeFieldType17);
        int int19 = property18.get();
        org.joda.time.MonthDay monthDay21 = property18.addWrapFieldToCopy((int) (short) 1);
        boolean boolean22 = monthDay1.isBefore((org.joda.time.ReadablePartial) monthDay21);
        org.joda.time.MonthDay.Property property23 = monthDay1.monthOfYear();
        int int24 = property23.getMinimumValueOverall();
        org.joda.time.MonthDay monthDay26 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.MonthDay monthDay28 = monthDay26.withChronologyRetainFields(chronology27);
        org.joda.time.MonthDay monthDay30 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MonthDay monthDay32 = monthDay30.withChronologyRetainFields(chronology31);
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = monthDay30.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property35 = monthDay28.property(dateTimeFieldType34);
        int int36 = property35.get();
        org.joda.time.DurationField durationField37 = property35.getDurationField();
        org.joda.time.MonthDay monthDay39 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.MonthDay monthDay41 = monthDay39.withChronologyRetainFields(chronology40);
        org.joda.time.MonthDay monthDay43 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.MonthDay monthDay45 = monthDay43.withChronologyRetainFields(chronology44);
        org.joda.time.DateTimeFieldType dateTimeFieldType47 = monthDay43.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property48 = monthDay41.property(dateTimeFieldType47);
        boolean boolean49 = property35.equals((java.lang.Object) monthDay41);
        java.lang.String str50 = property35.getAsShortText();
        java.lang.String str51 = property35.toString();
        java.util.Locale locale52 = null;
        int int53 = property35.getMaximumShortTextLength(locale52);
        boolean boolean55 = property35.equals((java.lang.Object) 0.0d);
        org.joda.time.MonthDay monthDay57 = org.joda.time.MonthDay.parse("");
        org.joda.time.ReadablePeriod readablePeriod58 = null;
        org.joda.time.MonthDay monthDay60 = monthDay57.withPeriodAdded(readablePeriod58, 1);
        org.joda.time.MonthDay monthDay62 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.MonthDay monthDay64 = monthDay62.withChronologyRetainFields(chronology63);
        org.joda.time.DateTimeFieldType dateTimeFieldType66 = monthDay62.getFieldType((int) (byte) 1);
        int int67 = monthDay60.indexOf(dateTimeFieldType66);
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.MonthDay monthDay69 = monthDay60.withChronologyRetainFields(chronology68);
        org.joda.time.MonthDay.Property property70 = monthDay69.dayOfMonth();
        java.lang.String str71 = property70.toString();
        org.joda.time.MonthDay monthDay73 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology74 = null;
        org.joda.time.MonthDay monthDay75 = monthDay73.withChronologyRetainFields(chronology74);
        org.joda.time.DateTimeFieldType dateTimeFieldType77 = monthDay73.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod78 = null;
        org.joda.time.MonthDay monthDay79 = monthDay73.plus(readablePeriod78);
        org.joda.time.MonthDay monthDay81 = monthDay73.plusMonths((int) (byte) 1);
        org.joda.time.MonthDay monthDay83 = monthDay73.plusDays(31);
        int int84 = property70.compareTo((org.joda.time.ReadablePartial) monthDay83);
        int int85 = property35.compareTo((org.joda.time.ReadablePartial) monthDay83);
        org.joda.time.MonthDay monthDay87 = property35.addToCopy(0);
        java.util.Locale locale88 = null;
        java.lang.String str89 = property35.getAsText(locale88);
        boolean boolean90 = property23.equals((java.lang.Object) property35);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(monthDay9);
        org.junit.Assert.assertNotNull(monthDay11);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(monthDay26);
        org.junit.Assert.assertNotNull(monthDay28);
        org.junit.Assert.assertNotNull(monthDay30);
        org.junit.Assert.assertNotNull(monthDay32);
        org.junit.Assert.assertNotNull(dateTimeFieldType34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(durationField37);
        org.junit.Assert.assertNotNull(monthDay39);
        org.junit.Assert.assertNotNull(monthDay41);
        org.junit.Assert.assertNotNull(monthDay43);
        org.junit.Assert.assertNotNull(monthDay45);
        org.junit.Assert.assertNotNull(dateTimeFieldType47);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "1" + "'", str50, "1");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "Property[dayOfMonth]" + "'", str51, "Property[dayOfMonth]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 2 + "'", int53 == 2);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(monthDay57);
        org.junit.Assert.assertNotNull(monthDay60);
        org.junit.Assert.assertNotNull(monthDay62);
        org.junit.Assert.assertNotNull(monthDay64);
        org.junit.Assert.assertNotNull(dateTimeFieldType66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1 + "'", int67 == 1);
        org.junit.Assert.assertNotNull(monthDay69);
        org.junit.Assert.assertNotNull(property70);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "Property[dayOfMonth]" + "'", str71, "Property[dayOfMonth]");
        org.junit.Assert.assertNotNull(monthDay73);
        org.junit.Assert.assertNotNull(monthDay75);
        org.junit.Assert.assertNotNull(dateTimeFieldType77);
        org.junit.Assert.assertNotNull(monthDay79);
        org.junit.Assert.assertNotNull(monthDay81);
        org.junit.Assert.assertNotNull(monthDay83);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertNotNull(monthDay87);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "1" + "'", str89, "1");
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
    }

    @Test
    public void test0971() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0971");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay5.dayOfMonth();
        org.joda.time.Chronology chronology11 = monthDay5.getChronology();
        org.joda.time.MonthDay monthDay12 = org.joda.time.MonthDay.now(chronology11);
        org.joda.time.MonthDay monthDay13 = monthDay3.withChronologyRetainFields(chronology11);
        org.joda.time.MonthDay monthDay14 = new org.joda.time.MonthDay(chronology11);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay15 = new org.joda.time.MonthDay((java.lang.Object) chronology11);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: org.joda.time.chrono.ISOChronology");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(monthDay12);
        org.junit.Assert.assertNotNull(monthDay13);
    }

    @Test
    public void test0972() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0972");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property6 = monthDay1.dayOfMonth();
        org.joda.time.MonthDay monthDay8 = property6.addWrapFieldToCopy(1);
        java.util.Locale locale9 = null;
        java.lang.String str10 = property6.getAsText(locale9);
        java.util.Locale locale11 = null;
        java.lang.String str12 = property6.getAsText(locale11);
        int int13 = property6.getMaximumValue();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay15 = property6.setCopy("--11-25");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"--11-25\" for dayOfMonth is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(monthDay8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1" + "'", str10, "1");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "1" + "'", str12, "1");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 31 + "'", int13 == 31);
    }

    @Test
    public void test0973() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0973");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        org.joda.time.MonthDay.Property property11 = monthDay3.monthOfYear();
        org.joda.time.MonthDay monthDay13 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MonthDay monthDay15 = monthDay13.withChronologyRetainFields(chronology14);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = monthDay13.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay monthDay19 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MonthDay monthDay21 = monthDay19.withChronologyRetainFields(chronology20);
        org.joda.time.MonthDay monthDay23 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MonthDay monthDay25 = monthDay23.withChronologyRetainFields(chronology24);
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = monthDay23.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property28 = monthDay21.property(dateTimeFieldType27);
        int int29 = monthDay13.indexOf(dateTimeFieldType27);
        boolean boolean30 = monthDay3.equals((java.lang.Object) int29);
        org.joda.time.MonthDay monthDay32 = monthDay3.withMonthOfYear(9);
        int int34 = monthDay32.getValue((int) (byte) 0);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray35 = monthDay32.getFieldTypes();
        org.joda.time.MonthDay monthDay37 = monthDay32.plusMonths((int) (short) 100);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType39 = monthDay37.getFieldType((int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 100");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(monthDay19);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertNotNull(monthDay23);
        org.junit.Assert.assertNotNull(monthDay25);
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(monthDay32);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 9 + "'", int34 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray35);
        org.junit.Assert.assertNotNull(monthDay37);
    }

    @Test
    public void test0974() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0974");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.MonthDay monthDay4 = monthDay1.withPeriodAdded(readablePeriod2, 1);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.MonthDay monthDay6 = monthDay1.plus(readablePeriod5);
        org.joda.time.MonthDay monthDay8 = monthDay6.minusDays((int) (byte) 0);
        int int9 = monthDay8.size();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay4);
        org.junit.Assert.assertNotNull(monthDay6);
        org.junit.Assert.assertNotNull(monthDay8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2 + "'", int9 == 2);
    }

    @Test
    public void test0975() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0975");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        int int11 = property10.get();
        org.joda.time.MonthDay monthDay13 = property10.addWrapFieldToCopy((int) (short) 1);
        org.joda.time.MonthDay.Property property14 = monthDay13.dayOfMonth();
        int int15 = property14.getMaximumValueOverall();
        int int16 = property14.getMinimumValueOverall();
        org.joda.time.MonthDay monthDay17 = property14.getMonthDay();
        java.util.Locale locale18 = null;
        java.lang.String str19 = property14.getAsText(locale18);
        org.joda.time.MonthDay monthDay21 = new org.joda.time.MonthDay((long) (short) 1);
        org.joda.time.MonthDay monthDay23 = monthDay21.withDayOfMonth(1);
        java.lang.Class<?> wildcardClass24 = monthDay23.getClass();
        org.joda.time.MonthDay monthDay26 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.MonthDay monthDay28 = monthDay26.withChronologyRetainFields(chronology27);
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = monthDay26.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property31 = monthDay26.dayOfMonth();
        org.joda.time.MonthDay monthDay33 = property31.addWrapFieldToCopy(1);
        org.joda.time.MonthDay monthDay35 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.MonthDay monthDay37 = monthDay35.withChronologyRetainFields(chronology36);
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = monthDay35.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod40 = null;
        org.joda.time.MonthDay monthDay41 = monthDay35.plus(readablePeriod40);
        org.joda.time.MonthDay monthDay43 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.MonthDay monthDay45 = monthDay43.withChronologyRetainFields(chronology44);
        org.joda.time.MonthDay monthDay47 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.MonthDay monthDay49 = monthDay47.withChronologyRetainFields(chronology48);
        org.joda.time.DateTimeFieldType dateTimeFieldType51 = monthDay47.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property52 = monthDay45.property(dateTimeFieldType51);
        int int53 = property52.get();
        org.joda.time.MonthDay monthDay55 = property52.addWrapFieldToCopy((int) (short) 1);
        boolean boolean56 = monthDay35.isBefore((org.joda.time.ReadablePartial) monthDay55);
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.MonthDay monthDay58 = monthDay35.withChronologyRetainFields(chronology57);
        org.joda.time.Chronology chronology59 = monthDay58.getChronology();
        org.joda.time.MonthDay monthDay60 = org.joda.time.MonthDay.now(chronology59);
        org.joda.time.MonthDay monthDay61 = new org.joda.time.MonthDay((java.lang.Object) monthDay33, chronology59);
        org.joda.time.MonthDay monthDay62 = new org.joda.time.MonthDay((java.lang.Object) monthDay23, chronology59);
        org.joda.time.MonthDay monthDay63 = new org.joda.time.MonthDay((java.lang.Object) str19, chronology59);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 31 + "'", int15 == 31);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(monthDay17);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "2" + "'", str19, "2");
        org.junit.Assert.assertNotNull(monthDay23);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertNotNull(monthDay26);
        org.junit.Assert.assertNotNull(monthDay28);
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(monthDay33);
        org.junit.Assert.assertNotNull(monthDay35);
        org.junit.Assert.assertNotNull(monthDay37);
        org.junit.Assert.assertNotNull(dateTimeFieldType39);
        org.junit.Assert.assertNotNull(monthDay41);
        org.junit.Assert.assertNotNull(monthDay43);
        org.junit.Assert.assertNotNull(monthDay45);
        org.junit.Assert.assertNotNull(monthDay47);
        org.junit.Assert.assertNotNull(monthDay49);
        org.junit.Assert.assertNotNull(dateTimeFieldType51);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertNotNull(monthDay55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(monthDay58);
        org.junit.Assert.assertNotNull(chronology59);
        org.junit.Assert.assertNotNull(monthDay60);
    }

    @Test
    public void test0976() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0976");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay1.plus(readablePeriod6);
        org.joda.time.MonthDay monthDay9 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MonthDay monthDay11 = monthDay9.withChronologyRetainFields(chronology10);
        org.joda.time.MonthDay monthDay13 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MonthDay monthDay15 = monthDay13.withChronologyRetainFields(chronology14);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = monthDay13.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property18 = monthDay11.property(dateTimeFieldType17);
        int int19 = property18.get();
        org.joda.time.MonthDay monthDay21 = property18.addWrapFieldToCopy((int) (short) 1);
        boolean boolean22 = monthDay1.isBefore((org.joda.time.ReadablePartial) monthDay21);
        org.joda.time.MonthDay monthDay24 = monthDay21.minusMonths((int) (byte) 100);
        org.joda.time.MonthDay monthDay26 = monthDay24.plusMonths(1);
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.MonthDay monthDay28 = monthDay24.minus(readablePeriod27);
        org.joda.time.MonthDay monthDay30 = org.joda.time.MonthDay.parse("");
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        org.joda.time.MonthDay monthDay33 = monthDay30.withPeriodAdded(readablePeriod31, 1);
        org.joda.time.MonthDay monthDay35 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.MonthDay monthDay37 = monthDay35.withChronologyRetainFields(chronology36);
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = monthDay35.getFieldType((int) (byte) 1);
        int int40 = monthDay33.indexOf(dateTimeFieldType39);
        org.joda.time.MonthDay.Property property41 = monthDay28.property(dateTimeFieldType39);
        java.util.Locale locale42 = null;
        int int43 = property41.getMaximumShortTextLength(locale42);
        org.joda.time.MonthDay monthDay44 = property41.getMonthDay();
        org.joda.time.MonthDay monthDay46 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.MonthDay monthDay48 = monthDay46.withChronologyRetainFields(chronology47);
        org.joda.time.DateTimeFieldType dateTimeFieldType50 = monthDay46.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod51 = null;
        org.joda.time.MonthDay monthDay52 = monthDay46.plus(readablePeriod51);
        org.joda.time.MonthDay monthDay54 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.MonthDay monthDay56 = monthDay54.withChronologyRetainFields(chronology55);
        org.joda.time.MonthDay monthDay58 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.MonthDay monthDay60 = monthDay58.withChronologyRetainFields(chronology59);
        org.joda.time.DateTimeFieldType dateTimeFieldType62 = monthDay58.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property63 = monthDay56.property(dateTimeFieldType62);
        int int64 = property63.get();
        org.joda.time.MonthDay monthDay66 = property63.addWrapFieldToCopy((int) (short) 1);
        boolean boolean67 = monthDay46.isBefore((org.joda.time.ReadablePartial) monthDay66);
        org.joda.time.MonthDay monthDay69 = monthDay66.minusMonths((int) (byte) 100);
        int int70 = monthDay69.getMonthOfYear();
        org.joda.time.MonthDay monthDay72 = monthDay69.withMonthOfYear(1);
        org.joda.time.ReadablePeriod readablePeriod73 = null;
        org.joda.time.MonthDay monthDay74 = monthDay69.plus(readablePeriod73);
        org.joda.time.MonthDay monthDay76 = monthDay74.withDayOfMonth(1);
        int int77 = property41.compareTo((org.joda.time.ReadablePartial) monthDay76);
        org.joda.time.MonthDay monthDay79 = property41.addWrapFieldToCopy(100);
        int int80 = monthDay79.getMonthOfYear();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(monthDay9);
        org.junit.Assert.assertNotNull(monthDay11);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertNotNull(monthDay26);
        org.junit.Assert.assertNotNull(monthDay28);
        org.junit.Assert.assertNotNull(monthDay30);
        org.junit.Assert.assertNotNull(monthDay33);
        org.junit.Assert.assertNotNull(monthDay35);
        org.junit.Assert.assertNotNull(monthDay37);
        org.junit.Assert.assertNotNull(dateTimeFieldType39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2 + "'", int43 == 2);
        org.junit.Assert.assertNotNull(monthDay44);
        org.junit.Assert.assertNotNull(monthDay46);
        org.junit.Assert.assertNotNull(monthDay48);
        org.junit.Assert.assertNotNull(dateTimeFieldType50);
        org.junit.Assert.assertNotNull(monthDay52);
        org.junit.Assert.assertNotNull(monthDay54);
        org.junit.Assert.assertNotNull(monthDay56);
        org.junit.Assert.assertNotNull(monthDay58);
        org.junit.Assert.assertNotNull(monthDay60);
        org.junit.Assert.assertNotNull(dateTimeFieldType62);
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertNotNull(monthDay66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(monthDay69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 9 + "'", int70 == 9);
        org.junit.Assert.assertNotNull(monthDay72);
        org.junit.Assert.assertNotNull(monthDay74);
        org.junit.Assert.assertNotNull(monthDay76);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertNotNull(monthDay79);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 9 + "'", int80 == 9);
    }

    @Test
    public void test0977() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0977");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property6 = monthDay1.dayOfMonth();
        int int7 = property6.getMaximumValueOverall();
        java.lang.String str8 = property6.getAsText();
        org.joda.time.MonthDay monthDay10 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MonthDay monthDay12 = monthDay10.withChronologyRetainFields(chronology11);
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = monthDay10.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay monthDay16 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MonthDay monthDay18 = monthDay16.withChronologyRetainFields(chronology17);
        org.joda.time.MonthDay monthDay20 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.MonthDay monthDay22 = monthDay20.withChronologyRetainFields(chronology21);
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = monthDay20.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property25 = monthDay18.property(dateTimeFieldType24);
        int int26 = monthDay10.indexOf(dateTimeFieldType24);
        org.joda.time.MonthDay monthDay28 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MonthDay monthDay30 = monthDay28.withChronologyRetainFields(chronology29);
        org.joda.time.MonthDay monthDay32 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.MonthDay monthDay34 = monthDay32.withChronologyRetainFields(chronology33);
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = monthDay32.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property37 = monthDay30.property(dateTimeFieldType36);
        int int38 = property37.get();
        org.joda.time.MonthDay monthDay40 = property37.addToCopy((int) (short) 0);
        org.joda.time.MonthDay monthDay42 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.MonthDay monthDay44 = monthDay42.withChronologyRetainFields(chronology43);
        org.joda.time.MonthDay monthDay46 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.MonthDay monthDay48 = monthDay46.withChronologyRetainFields(chronology47);
        org.joda.time.DateTimeFieldType dateTimeFieldType50 = monthDay46.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property51 = monthDay44.property(dateTimeFieldType50);
        int int52 = property51.get();
        org.joda.time.DurationField durationField53 = property51.getDurationField();
        java.util.Locale locale54 = null;
        int int55 = property51.getMaximumTextLength(locale54);
        org.joda.time.MonthDay monthDay57 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.MonthDay monthDay59 = monthDay57.withChronologyRetainFields(chronology58);
        org.joda.time.DateTimeFieldType dateTimeFieldType61 = monthDay57.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property62 = monthDay57.dayOfMonth();
        org.joda.time.Chronology chronology63 = monthDay57.getChronology();
        org.joda.time.Chronology chronology64 = monthDay57.getChronology();
        org.joda.time.ReadableInstant readableInstant65 = null;
        org.joda.time.DateTime dateTime66 = monthDay57.toDateTime(readableInstant65);
        int int67 = property51.compareTo((org.joda.time.ReadableInstant) dateTime66);
        int int68 = property37.compareTo((org.joda.time.ReadableInstant) dateTime66);
        org.joda.time.DateTime dateTime69 = monthDay10.toDateTime((org.joda.time.ReadableInstant) dateTime66);
        int int70 = property6.compareTo((org.joda.time.ReadableInstant) dateTime69);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 31 + "'", int7 == 31);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "1" + "'", str8, "1");
        org.junit.Assert.assertNotNull(monthDay10);
        org.junit.Assert.assertNotNull(monthDay12);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(monthDay18);
        org.junit.Assert.assertNotNull(monthDay20);
        org.junit.Assert.assertNotNull(monthDay22);
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(monthDay28);
        org.junit.Assert.assertNotNull(monthDay30);
        org.junit.Assert.assertNotNull(monthDay32);
        org.junit.Assert.assertNotNull(monthDay34);
        org.junit.Assert.assertNotNull(dateTimeFieldType36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(monthDay40);
        org.junit.Assert.assertNotNull(monthDay42);
        org.junit.Assert.assertNotNull(monthDay44);
        org.junit.Assert.assertNotNull(monthDay46);
        org.junit.Assert.assertNotNull(monthDay48);
        org.junit.Assert.assertNotNull(dateTimeFieldType50);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertNotNull(durationField53);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 2 + "'", int55 == 2);
        org.junit.Assert.assertNotNull(monthDay57);
        org.junit.Assert.assertNotNull(monthDay59);
        org.junit.Assert.assertNotNull(dateTimeFieldType61);
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertNotNull(chronology63);
        org.junit.Assert.assertNotNull(chronology64);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
    }

    @Test
    public void test0978() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0978");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay1.plus(readablePeriod6);
        org.joda.time.MonthDay monthDay9 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MonthDay monthDay11 = monthDay9.withChronologyRetainFields(chronology10);
        org.joda.time.MonthDay monthDay13 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MonthDay monthDay15 = monthDay13.withChronologyRetainFields(chronology14);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = monthDay13.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property18 = monthDay11.property(dateTimeFieldType17);
        int int19 = property18.get();
        org.joda.time.MonthDay monthDay21 = property18.addWrapFieldToCopy((int) (short) 1);
        boolean boolean22 = monthDay1.isBefore((org.joda.time.ReadablePartial) monthDay21);
        org.joda.time.MonthDay.Property property23 = monthDay1.monthOfYear();
        java.util.Locale locale24 = null;
        int int25 = property23.getMaximumTextLength(locale24);
        java.lang.String str26 = property23.getAsShortText();
        org.joda.time.MonthDay monthDay27 = property23.getMonthDay();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(monthDay9);
        org.junit.Assert.assertNotNull(monthDay11);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 9 + "'", int25 == 9);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Jan" + "'", str26, "Jan");
        org.junit.Assert.assertNotNull(monthDay27);
    }

    @Test
    public void test0979() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0979");
        org.joda.time.MonthDay monthDay1 = new org.joda.time.MonthDay((long) (short) 1);
        org.joda.time.MonthDay monthDay3 = monthDay1.withDayOfMonth(1);
        java.lang.Class<?> wildcardClass4 = monthDay3.getClass();
        org.joda.time.MonthDay monthDay6 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MonthDay monthDay8 = monthDay6.withChronologyRetainFields(chronology7);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = monthDay6.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property11 = monthDay6.dayOfMonth();
        org.joda.time.MonthDay monthDay13 = property11.addWrapFieldToCopy(1);
        org.joda.time.MonthDay monthDay15 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MonthDay monthDay17 = monthDay15.withChronologyRetainFields(chronology16);
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = monthDay15.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.MonthDay monthDay21 = monthDay15.plus(readablePeriod20);
        org.joda.time.MonthDay monthDay23 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MonthDay monthDay25 = monthDay23.withChronologyRetainFields(chronology24);
        org.joda.time.MonthDay monthDay27 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MonthDay monthDay29 = monthDay27.withChronologyRetainFields(chronology28);
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = monthDay27.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property32 = monthDay25.property(dateTimeFieldType31);
        int int33 = property32.get();
        org.joda.time.MonthDay monthDay35 = property32.addWrapFieldToCopy((int) (short) 1);
        boolean boolean36 = monthDay15.isBefore((org.joda.time.ReadablePartial) monthDay35);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.MonthDay monthDay38 = monthDay15.withChronologyRetainFields(chronology37);
        org.joda.time.Chronology chronology39 = monthDay38.getChronology();
        org.joda.time.MonthDay monthDay40 = org.joda.time.MonthDay.now(chronology39);
        org.joda.time.MonthDay monthDay41 = new org.joda.time.MonthDay((java.lang.Object) monthDay13, chronology39);
        org.joda.time.MonthDay monthDay42 = new org.joda.time.MonthDay((java.lang.Object) monthDay3, chronology39);
        org.joda.time.MonthDay monthDay43 = org.joda.time.MonthDay.now(chronology39);
        org.joda.time.MonthDay monthDay44 = new org.joda.time.MonthDay(chronology39);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(monthDay6);
        org.junit.Assert.assertNotNull(monthDay8);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(monthDay17);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertNotNull(monthDay23);
        org.junit.Assert.assertNotNull(monthDay25);
        org.junit.Assert.assertNotNull(monthDay27);
        org.junit.Assert.assertNotNull(monthDay29);
        org.junit.Assert.assertNotNull(dateTimeFieldType31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(monthDay35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(monthDay38);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(monthDay40);
        org.junit.Assert.assertNotNull(monthDay43);
    }

    @Test
    public void test0980() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0980");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        java.lang.String str11 = property10.getAsText();
        org.joda.time.MonthDay monthDay13 = property10.setCopy((int) (byte) 1);
        java.util.Locale locale14 = null;
        int int15 = property10.getMaximumTextLength(locale14);
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = property10.getFieldType();
        int int17 = property10.get();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "1" + "'", str11, "1");
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2 + "'", int15 == 2);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
    }

    @Test
    public void test0981() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0981");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        int int11 = property10.get();
        int int12 = property10.getMinimumValueOverall();
        java.util.Locale locale13 = null;
        int int14 = property10.getMaximumShortTextLength(locale13);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
    }

    @Test
    public void test0982() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0982");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        int int11 = property10.get();
        org.joda.time.MonthDay monthDay13 = property10.addWrapFieldToCopy((int) (short) 1);
        java.lang.String str14 = property10.getAsString();
        java.lang.String str15 = property10.getAsText();
        org.joda.time.DurationField durationField16 = property10.getRangeDurationField();
        int int17 = property10.getMinimumValue();
        org.joda.time.MonthDay monthDay19 = property10.addToCopy((int) (short) -1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter20 = null;
        java.lang.String str21 = monthDay19.toString(dateTimeFormatter20);
        org.joda.time.MonthDay monthDay23 = monthDay19.minusMonths((-1));
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "1" + "'", str14, "1");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "1" + "'", str15, "1");
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(monthDay19);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "--12-31" + "'", str21, "--12-31");
        org.junit.Assert.assertNotNull(monthDay23);
    }

    @Test
    public void test0983() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0983");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property6 = monthDay1.dayOfMonth();
        org.joda.time.Chronology chronology7 = monthDay1.getChronology();
        org.joda.time.Chronology chronology8 = monthDay1.getChronology();
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.DateTime dateTime10 = monthDay1.toDateTime(readableInstant9);
        org.joda.time.MonthDay monthDay12 = monthDay1.plusMonths((int) ' ');
        org.joda.time.MonthDay monthDay14 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MonthDay monthDay16 = monthDay14.withChronologyRetainFields(chronology15);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = monthDay14.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.MonthDay monthDay20 = monthDay14.plus(readablePeriod19);
        org.joda.time.MonthDay monthDay22 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MonthDay monthDay24 = monthDay22.withChronologyRetainFields(chronology23);
        org.joda.time.MonthDay monthDay26 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.MonthDay monthDay28 = monthDay26.withChronologyRetainFields(chronology27);
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = monthDay26.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property31 = monthDay24.property(dateTimeFieldType30);
        int int32 = property31.get();
        org.joda.time.MonthDay monthDay34 = property31.addWrapFieldToCopy((int) (short) 1);
        boolean boolean35 = monthDay14.isBefore((org.joda.time.ReadablePartial) monthDay34);
        org.joda.time.MonthDay monthDay37 = monthDay34.minusMonths((int) (byte) 100);
        org.joda.time.MonthDay monthDay39 = monthDay37.plusMonths(1);
        org.joda.time.ReadablePeriod readablePeriod40 = null;
        org.joda.time.MonthDay monthDay41 = monthDay37.minus(readablePeriod40);
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.MonthDay monthDay43 = new org.joda.time.MonthDay(dateTimeZone42);
        boolean boolean44 = monthDay41.isEqual((org.joda.time.ReadablePartial) monthDay43);
        boolean boolean45 = monthDay1.equals((java.lang.Object) monthDay41);
        org.joda.time.MonthDay.Property property46 = monthDay41.dayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod47 = null;
        org.joda.time.MonthDay monthDay48 = monthDay41.plus(readablePeriod47);
        org.joda.time.MonthDay.Property property49 = monthDay41.monthOfYear();
        org.joda.time.MonthDay monthDay50 = property49.getMonthDay();
        org.joda.time.MonthDay monthDay52 = monthDay50.minusMonths((int) (short) 0);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(monthDay12);
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(monthDay20);
        org.junit.Assert.assertNotNull(monthDay22);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertNotNull(monthDay26);
        org.junit.Assert.assertNotNull(monthDay28);
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(monthDay34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(monthDay37);
        org.junit.Assert.assertNotNull(monthDay39);
        org.junit.Assert.assertNotNull(monthDay41);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(monthDay48);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(monthDay50);
        org.junit.Assert.assertNotNull(monthDay52);
    }

    @Test
    public void test0984() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0984");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        int int11 = property10.get();
        org.joda.time.DurationField durationField12 = property10.getDurationField();
        org.joda.time.MonthDay monthDay14 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MonthDay monthDay16 = monthDay14.withChronologyRetainFields(chronology15);
        org.joda.time.MonthDay monthDay18 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MonthDay monthDay20 = monthDay18.withChronologyRetainFields(chronology19);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = monthDay18.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property23 = monthDay16.property(dateTimeFieldType22);
        boolean boolean24 = property10.equals((java.lang.Object) monthDay16);
        org.joda.time.DateTimeField dateTimeField25 = property10.getField();
        int int26 = property10.getMaximumValueOverall();
        int int27 = property10.get();
        java.lang.String str28 = property10.getAsShortText();
        java.lang.String str29 = property10.getAsShortText();
        org.joda.time.DurationField durationField30 = property10.getRangeDurationField();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(monthDay18);
        org.junit.Assert.assertNotNull(monthDay20);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 31 + "'", int26 == 31);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "1" + "'", str28, "1");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "1" + "'", str29, "1");
        org.junit.Assert.assertNotNull(durationField30);
    }

    @Test
    public void test0985() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0985");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay1.plus(readablePeriod6);
        org.joda.time.MonthDay monthDay9 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MonthDay monthDay11 = monthDay9.withChronologyRetainFields(chronology10);
        org.joda.time.MonthDay monthDay13 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MonthDay monthDay15 = monthDay13.withChronologyRetainFields(chronology14);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = monthDay13.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property18 = monthDay11.property(dateTimeFieldType17);
        int int19 = property18.get();
        org.joda.time.MonthDay monthDay21 = property18.addWrapFieldToCopy((int) (short) 1);
        boolean boolean22 = monthDay1.isBefore((org.joda.time.ReadablePartial) monthDay21);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MonthDay monthDay24 = monthDay1.withChronologyRetainFields(chronology23);
        org.joda.time.Chronology chronology25 = monthDay24.getChronology();
        int[] intArray26 = monthDay24.getValues();
        org.joda.time.MonthDay monthDay28 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MonthDay monthDay30 = monthDay28.withChronologyRetainFields(chronology29);
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = monthDay28.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay monthDay34 = monthDay24.withField(dateTimeFieldType32, 10);
        org.joda.time.MonthDay monthDay36 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.MonthDay monthDay38 = monthDay36.withChronologyRetainFields(chronology37);
        org.joda.time.MonthDay monthDay40 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.MonthDay monthDay42 = monthDay40.withChronologyRetainFields(chronology41);
        org.joda.time.DateTimeFieldType dateTimeFieldType44 = monthDay40.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property45 = monthDay40.dayOfMonth();
        org.joda.time.Chronology chronology46 = monthDay40.getChronology();
        org.joda.time.MonthDay monthDay47 = org.joda.time.MonthDay.now(chronology46);
        org.joda.time.MonthDay monthDay48 = monthDay38.withChronologyRetainFields(chronology46);
        org.joda.time.Chronology chronology49 = monthDay38.getChronology();
        org.joda.time.MonthDay monthDay50 = new org.joda.time.MonthDay((java.lang.Object) monthDay34, chronology49);
        // The following exception was thrown during execution in test generation
        try {
            int int52 = monthDay34.getValue((int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 10");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(monthDay9);
        org.junit.Assert.assertNotNull(monthDay11);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, 1]");
        org.junit.Assert.assertNotNull(monthDay28);
        org.junit.Assert.assertNotNull(monthDay30);
        org.junit.Assert.assertNotNull(dateTimeFieldType32);
        org.junit.Assert.assertNotNull(monthDay34);
        org.junit.Assert.assertNotNull(monthDay36);
        org.junit.Assert.assertNotNull(monthDay38);
        org.junit.Assert.assertNotNull(monthDay40);
        org.junit.Assert.assertNotNull(monthDay42);
        org.junit.Assert.assertNotNull(dateTimeFieldType44);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(monthDay47);
        org.junit.Assert.assertNotNull(monthDay48);
        org.junit.Assert.assertNotNull(chronology49);
    }

    @Test
    public void test0986() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0986");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay monthDay7 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MonthDay monthDay9 = monthDay7.withChronologyRetainFields(chronology8);
        org.joda.time.MonthDay monthDay11 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MonthDay monthDay13 = monthDay11.withChronologyRetainFields(chronology12);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = monthDay11.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property16 = monthDay9.property(dateTimeFieldType15);
        int int17 = monthDay1.indexOf(dateTimeFieldType15);
        org.joda.time.MonthDay.Property property18 = monthDay1.dayOfMonth();
        org.joda.time.MonthDay monthDay20 = property18.addWrapFieldToCopy((int) 'a');
        int int21 = property18.getMaximumValueOverall();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(monthDay9);
        org.junit.Assert.assertNotNull(monthDay11);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(monthDay20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 31 + "'", int21 == 31);
    }

    @Test
    public void test0987() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0987");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        int int11 = property10.get();
        org.joda.time.MonthDay monthDay13 = property10.addToCopy((int) (short) 0);
        int int14 = property10.getMaximumValue();
        org.joda.time.MonthDay monthDay16 = property10.addToCopy((int) 'a');
        org.joda.time.MonthDay monthDay18 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MonthDay monthDay20 = monthDay18.withChronologyRetainFields(chronology19);
        org.joda.time.MonthDay monthDay22 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MonthDay monthDay24 = monthDay22.withChronologyRetainFields(chronology23);
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = monthDay22.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property27 = monthDay20.property(dateTimeFieldType26);
        int int28 = property27.get();
        int int29 = property27.getMaximumValue();
        org.joda.time.MonthDay monthDay31 = property27.setCopy((int) (short) 1);
        org.joda.time.MonthDay monthDay33 = org.joda.time.MonthDay.parse("");
        org.joda.time.ReadablePeriod readablePeriod34 = null;
        org.joda.time.MonthDay monthDay36 = monthDay33.withPeriodAdded(readablePeriod34, 1);
        org.joda.time.MonthDay monthDay38 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.MonthDay monthDay40 = monthDay38.withChronologyRetainFields(chronology39);
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = monthDay38.getFieldType((int) (byte) 1);
        int int43 = monthDay36.indexOf(dateTimeFieldType42);
        boolean boolean44 = monthDay31.isSupported(dateTimeFieldType42);
        org.joda.time.MonthDay monthDay46 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.MonthDay monthDay48 = monthDay46.withChronologyRetainFields(chronology47);
        org.joda.time.MonthDay monthDay50 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.MonthDay monthDay52 = monthDay50.withChronologyRetainFields(chronology51);
        org.joda.time.DateTimeFieldType dateTimeFieldType54 = monthDay50.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property55 = monthDay48.property(dateTimeFieldType54);
        org.joda.time.MonthDay.Property property56 = monthDay48.monthOfYear();
        org.joda.time.MonthDay monthDay58 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.MonthDay monthDay60 = monthDay58.withChronologyRetainFields(chronology59);
        org.joda.time.DateTimeFieldType dateTimeFieldType62 = monthDay58.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property63 = monthDay58.dayOfMonth();
        org.joda.time.DateTimeFieldType dateTimeFieldType64 = property63.getFieldType();
        org.joda.time.MonthDay.Property property65 = monthDay48.property(dateTimeFieldType64);
        java.lang.String str66 = property65.toString();
        org.joda.time.DateTimeFieldType dateTimeFieldType67 = property65.getFieldType();
        int int68 = monthDay31.indexOf(dateTimeFieldType67);
        int int69 = monthDay16.get(dateTimeFieldType67);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 31 + "'", int14 == 31);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(monthDay18);
        org.junit.Assert.assertNotNull(monthDay20);
        org.junit.Assert.assertNotNull(monthDay22);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 31 + "'", int29 == 31);
        org.junit.Assert.assertNotNull(monthDay31);
        org.junit.Assert.assertNotNull(monthDay33);
        org.junit.Assert.assertNotNull(monthDay36);
        org.junit.Assert.assertNotNull(monthDay38);
        org.junit.Assert.assertNotNull(monthDay40);
        org.junit.Assert.assertNotNull(dateTimeFieldType42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(monthDay46);
        org.junit.Assert.assertNotNull(monthDay48);
        org.junit.Assert.assertNotNull(monthDay50);
        org.junit.Assert.assertNotNull(monthDay52);
        org.junit.Assert.assertNotNull(dateTimeFieldType54);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertNotNull(monthDay58);
        org.junit.Assert.assertNotNull(monthDay60);
        org.junit.Assert.assertNotNull(dateTimeFieldType62);
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertNotNull(dateTimeFieldType64);
        org.junit.Assert.assertNotNull(property65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "Property[dayOfMonth]" + "'", str66, "Property[dayOfMonth]");
        org.junit.Assert.assertNotNull(dateTimeFieldType67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1 + "'", int68 == 1);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 9 + "'", int69 == 9);
    }

    @Test
    public void test0988() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0988");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.MonthDay monthDay3 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MonthDay monthDay5 = monthDay3.withChronologyRetainFields(chronology4);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = monthDay3.getFieldType((int) (byte) 1);
        boolean boolean8 = monthDay1.isSupported(dateTimeFieldType7);
        org.joda.time.MonthDay monthDay10 = org.joda.time.MonthDay.parse("");
        org.joda.time.MonthDay monthDay12 = monthDay10.minusDays((int) '#');
        org.joda.time.MonthDay monthDay14 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MonthDay monthDay16 = monthDay14.withChronologyRetainFields(chronology15);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = monthDay14.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property19 = monthDay14.dayOfMonth();
        org.joda.time.Chronology chronology20 = monthDay14.getChronology();
        org.joda.time.Chronology chronology21 = monthDay14.getChronology();
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.DateTime dateTime23 = monthDay14.toDateTime(readableInstant22);
        org.joda.time.MonthDay monthDay25 = monthDay14.plusMonths((int) ' ');
        boolean boolean26 = monthDay10.isAfter((org.joda.time.ReadablePartial) monthDay25);
        boolean boolean27 = monthDay1.isBefore((org.joda.time.ReadablePartial) monthDay25);
        int int28 = monthDay1.getMonthOfYear();
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        org.joda.time.MonthDay monthDay31 = monthDay1.withPeriodAdded(readablePeriod29, 31);
        org.joda.time.MonthDay monthDay33 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MonthDay monthDay35 = monthDay33.withChronologyRetainFields(chronology34);
        org.joda.time.MonthDay monthDay37 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.MonthDay monthDay39 = monthDay37.withChronologyRetainFields(chronology38);
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = monthDay37.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property42 = monthDay35.property(dateTimeFieldType41);
        org.joda.time.MonthDay.Property property43 = monthDay1.property(dateTimeFieldType41);
        org.joda.time.DateTimeField[] dateTimeFieldArray44 = monthDay1.getFields();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(monthDay10);
        org.junit.Assert.assertNotNull(monthDay12);
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(monthDay25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(monthDay31);
        org.junit.Assert.assertNotNull(monthDay33);
        org.junit.Assert.assertNotNull(monthDay35);
        org.junit.Assert.assertNotNull(monthDay37);
        org.junit.Assert.assertNotNull(monthDay39);
        org.junit.Assert.assertNotNull(dateTimeFieldType41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(dateTimeFieldArray44);
    }

    @Test
    public void test0989() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0989");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property6 = monthDay1.dayOfMonth();
        org.joda.time.Chronology chronology7 = monthDay1.getChronology();
        org.joda.time.Chronology chronology8 = monthDay1.getChronology();
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.DateTime dateTime10 = monthDay1.toDateTime(readableInstant9);
        org.joda.time.MonthDay monthDay12 = monthDay1.plusMonths(0);
        org.joda.time.Chronology chronology13 = monthDay1.getChronology();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(monthDay12);
        org.junit.Assert.assertNotNull(chronology13);
    }

    @Test
    public void test0990() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0990");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay1.plus(readablePeriod6);
        org.joda.time.MonthDay monthDay9 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MonthDay monthDay11 = monthDay9.withChronologyRetainFields(chronology10);
        org.joda.time.MonthDay monthDay13 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MonthDay monthDay15 = monthDay13.withChronologyRetainFields(chronology14);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = monthDay13.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property18 = monthDay11.property(dateTimeFieldType17);
        int int19 = property18.get();
        org.joda.time.MonthDay monthDay21 = property18.addWrapFieldToCopy((int) (short) 1);
        boolean boolean22 = monthDay1.isBefore((org.joda.time.ReadablePartial) monthDay21);
        org.joda.time.MonthDay monthDay24 = monthDay21.minusMonths((int) (byte) 100);
        org.joda.time.MonthDay monthDay26 = monthDay24.plusMonths(1);
        int int27 = monthDay24.size();
        org.joda.time.MonthDay monthDay29 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.MonthDay monthDay31 = monthDay29.withChronologyRetainFields(chronology30);
        org.joda.time.MonthDay monthDay33 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MonthDay monthDay35 = monthDay33.withChronologyRetainFields(chronology34);
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = monthDay33.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property38 = monthDay31.property(dateTimeFieldType37);
        int int39 = property38.get();
        org.joda.time.DurationField durationField40 = property38.getDurationField();
        org.joda.time.MonthDay monthDay42 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.MonthDay monthDay44 = monthDay42.withChronologyRetainFields(chronology43);
        org.joda.time.MonthDay monthDay46 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.MonthDay monthDay48 = monthDay46.withChronologyRetainFields(chronology47);
        org.joda.time.DateTimeFieldType dateTimeFieldType50 = monthDay46.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property51 = monthDay44.property(dateTimeFieldType50);
        boolean boolean52 = property38.equals((java.lang.Object) monthDay44);
        int int53 = property38.getMinimumValueOverall();
        org.joda.time.DateTimeFieldType dateTimeFieldType54 = property38.getFieldType();
        org.joda.time.MonthDay monthDay56 = monthDay24.withField(dateTimeFieldType54, (int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod57 = null;
        org.joda.time.MonthDay monthDay59 = monthDay24.withPeriodAdded(readablePeriod57, 9);
        org.joda.time.MonthDay monthDay61 = monthDay24.plusDays(11);
        org.joda.time.DurationFieldType durationFieldType62 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay64 = monthDay61.withFieldAdded(durationFieldType62, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(monthDay9);
        org.junit.Assert.assertNotNull(monthDay11);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertNotNull(monthDay26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2 + "'", int27 == 2);
        org.junit.Assert.assertNotNull(monthDay29);
        org.junit.Assert.assertNotNull(monthDay31);
        org.junit.Assert.assertNotNull(monthDay33);
        org.junit.Assert.assertNotNull(monthDay35);
        org.junit.Assert.assertNotNull(dateTimeFieldType37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNotNull(durationField40);
        org.junit.Assert.assertNotNull(monthDay42);
        org.junit.Assert.assertNotNull(monthDay44);
        org.junit.Assert.assertNotNull(monthDay46);
        org.junit.Assert.assertNotNull(monthDay48);
        org.junit.Assert.assertNotNull(dateTimeFieldType50);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType54);
        org.junit.Assert.assertNotNull(monthDay56);
        org.junit.Assert.assertNotNull(monthDay59);
        org.junit.Assert.assertNotNull(monthDay61);
    }

    @Test
    public void test0991() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0991");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay5.dayOfMonth();
        org.joda.time.Chronology chronology11 = monthDay5.getChronology();
        org.joda.time.MonthDay monthDay12 = org.joda.time.MonthDay.now(chronology11);
        org.joda.time.MonthDay monthDay13 = monthDay3.withChronologyRetainFields(chronology11);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField15 = monthDay13.getField(8);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 8");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(monthDay12);
        org.junit.Assert.assertNotNull(monthDay13);
    }

    @Test
    public void test0992() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0992");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.MonthDay monthDay1 = new org.joda.time.MonthDay(dateTimeZone0);
        org.joda.time.MonthDay monthDay3 = monthDay1.minusDays(100);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.MonthDay monthDay5 = monthDay1.minus(readablePeriod4);
        org.joda.time.MonthDay monthDay7 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MonthDay monthDay9 = monthDay7.withChronologyRetainFields(chronology8);
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = monthDay7.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.MonthDay monthDay13 = monthDay7.plus(readablePeriod12);
        org.joda.time.MonthDay monthDay15 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MonthDay monthDay17 = monthDay15.withChronologyRetainFields(chronology16);
        org.joda.time.MonthDay monthDay19 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MonthDay monthDay21 = monthDay19.withChronologyRetainFields(chronology20);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = monthDay19.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property24 = monthDay17.property(dateTimeFieldType23);
        int int25 = property24.get();
        org.joda.time.MonthDay monthDay27 = property24.addWrapFieldToCopy((int) (short) 1);
        boolean boolean28 = monthDay7.isBefore((org.joda.time.ReadablePartial) monthDay27);
        org.joda.time.MonthDay monthDay30 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MonthDay monthDay32 = monthDay30.withChronologyRetainFields(chronology31);
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = monthDay30.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod35 = null;
        org.joda.time.MonthDay monthDay36 = monthDay30.plus(readablePeriod35);
        org.joda.time.MonthDay monthDay38 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.MonthDay monthDay40 = monthDay38.withChronologyRetainFields(chronology39);
        org.joda.time.MonthDay monthDay42 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.MonthDay monthDay44 = monthDay42.withChronologyRetainFields(chronology43);
        org.joda.time.DateTimeFieldType dateTimeFieldType46 = monthDay42.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property47 = monthDay40.property(dateTimeFieldType46);
        int int48 = property47.get();
        org.joda.time.MonthDay monthDay50 = property47.addWrapFieldToCopy((int) (short) 1);
        boolean boolean51 = monthDay30.isBefore((org.joda.time.ReadablePartial) monthDay50);
        org.joda.time.MonthDay monthDay53 = monthDay50.minusMonths((int) (byte) 100);
        org.joda.time.MonthDay monthDay55 = monthDay53.plusMonths(1);
        int int56 = monthDay53.size();
        org.joda.time.MonthDay monthDay58 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.MonthDay monthDay60 = monthDay58.withChronologyRetainFields(chronology59);
        org.joda.time.MonthDay monthDay62 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.MonthDay monthDay64 = monthDay62.withChronologyRetainFields(chronology63);
        org.joda.time.DateTimeFieldType dateTimeFieldType66 = monthDay62.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property67 = monthDay60.property(dateTimeFieldType66);
        int int68 = property67.get();
        org.joda.time.DurationField durationField69 = property67.getDurationField();
        org.joda.time.MonthDay monthDay71 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology72 = null;
        org.joda.time.MonthDay monthDay73 = monthDay71.withChronologyRetainFields(chronology72);
        org.joda.time.MonthDay monthDay75 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology76 = null;
        org.joda.time.MonthDay monthDay77 = monthDay75.withChronologyRetainFields(chronology76);
        org.joda.time.DateTimeFieldType dateTimeFieldType79 = monthDay75.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property80 = monthDay73.property(dateTimeFieldType79);
        boolean boolean81 = property67.equals((java.lang.Object) monthDay73);
        int int82 = property67.getMinimumValueOverall();
        org.joda.time.DateTimeFieldType dateTimeFieldType83 = property67.getFieldType();
        org.joda.time.MonthDay monthDay85 = monthDay53.withField(dateTimeFieldType83, (int) (byte) 1);
        int int86 = monthDay7.indexOf(dateTimeFieldType83);
        org.joda.time.MonthDay monthDay88 = monthDay7.minusMonths((int) ' ');
        org.joda.time.Chronology chronology89 = monthDay7.getChronology();
        org.joda.time.MonthDay monthDay90 = monthDay5.withChronologyRetainFields(chronology89);
        org.joda.time.MonthDay monthDay91 = org.joda.time.MonthDay.now(chronology89);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(monthDay9);
        org.junit.Assert.assertNotNull(dateTimeFieldType11);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(monthDay17);
        org.junit.Assert.assertNotNull(monthDay19);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(monthDay27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(monthDay30);
        org.junit.Assert.assertNotNull(monthDay32);
        org.junit.Assert.assertNotNull(dateTimeFieldType34);
        org.junit.Assert.assertNotNull(monthDay36);
        org.junit.Assert.assertNotNull(monthDay38);
        org.junit.Assert.assertNotNull(monthDay40);
        org.junit.Assert.assertNotNull(monthDay42);
        org.junit.Assert.assertNotNull(monthDay44);
        org.junit.Assert.assertNotNull(dateTimeFieldType46);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertNotNull(monthDay50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(monthDay53);
        org.junit.Assert.assertNotNull(monthDay55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 2 + "'", int56 == 2);
        org.junit.Assert.assertNotNull(monthDay58);
        org.junit.Assert.assertNotNull(monthDay60);
        org.junit.Assert.assertNotNull(monthDay62);
        org.junit.Assert.assertNotNull(monthDay64);
        org.junit.Assert.assertNotNull(dateTimeFieldType66);
        org.junit.Assert.assertNotNull(property67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1 + "'", int68 == 1);
        org.junit.Assert.assertNotNull(durationField69);
        org.junit.Assert.assertNotNull(monthDay71);
        org.junit.Assert.assertNotNull(monthDay73);
        org.junit.Assert.assertNotNull(monthDay75);
        org.junit.Assert.assertNotNull(monthDay77);
        org.junit.Assert.assertNotNull(dateTimeFieldType79);
        org.junit.Assert.assertNotNull(property80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 1 + "'", int82 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType83);
        org.junit.Assert.assertNotNull(monthDay85);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 1 + "'", int86 == 1);
        org.junit.Assert.assertNotNull(monthDay88);
        org.junit.Assert.assertNotNull(chronology89);
        org.junit.Assert.assertNotNull(monthDay90);
        org.junit.Assert.assertNotNull(monthDay91);
    }

    @Test
    public void test0993() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0993");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        int int11 = property10.get();
        org.joda.time.MonthDay monthDay13 = property10.addWrapFieldToCopy((int) (short) 1);
        java.lang.String str14 = property10.getAsString();
        java.lang.String str15 = property10.getAsText();
        org.joda.time.DurationField durationField16 = property10.getRangeDurationField();
        int int17 = property10.getMinimumValue();
        org.joda.time.MonthDay monthDay19 = property10.addWrapFieldToCopy((int) '4');
        int int20 = property10.getMaximumValueOverall();
        org.joda.time.MonthDay monthDay22 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MonthDay monthDay24 = monthDay22.withChronologyRetainFields(chronology23);
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = monthDay22.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.MonthDay monthDay28 = monthDay22.plus(readablePeriod27);
        org.joda.time.MonthDay monthDay30 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MonthDay monthDay32 = monthDay30.withChronologyRetainFields(chronology31);
        org.joda.time.MonthDay monthDay34 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.MonthDay monthDay36 = monthDay34.withChronologyRetainFields(chronology35);
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = monthDay34.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property39 = monthDay32.property(dateTimeFieldType38);
        int int40 = property39.get();
        org.joda.time.MonthDay monthDay42 = property39.addWrapFieldToCopy((int) (short) 1);
        boolean boolean43 = monthDay22.isBefore((org.joda.time.ReadablePartial) monthDay42);
        org.joda.time.MonthDay monthDay45 = monthDay42.minusMonths((int) (byte) 100);
        org.joda.time.MonthDay monthDay47 = monthDay45.minusDays(31);
        org.joda.time.MonthDay monthDay49 = org.joda.time.MonthDay.parse("");
        org.joda.time.ReadablePeriod readablePeriod50 = null;
        org.joda.time.MonthDay monthDay52 = monthDay49.withPeriodAdded(readablePeriod50, 1);
        org.joda.time.MonthDay monthDay54 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.MonthDay monthDay56 = monthDay54.withChronologyRetainFields(chronology55);
        org.joda.time.DateTimeFieldType dateTimeFieldType58 = monthDay54.getFieldType((int) (byte) 1);
        int int59 = monthDay52.indexOf(dateTimeFieldType58);
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.MonthDay monthDay61 = monthDay52.withChronologyRetainFields(chronology60);
        org.joda.time.MonthDay monthDay63 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.MonthDay monthDay65 = monthDay63.withChronologyRetainFields(chronology64);
        org.joda.time.DateTimeFieldType dateTimeFieldType67 = monthDay63.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod68 = null;
        org.joda.time.MonthDay monthDay69 = monthDay63.plus(readablePeriod68);
        org.joda.time.MonthDay monthDay71 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology72 = null;
        org.joda.time.MonthDay monthDay73 = monthDay71.withChronologyRetainFields(chronology72);
        org.joda.time.MonthDay monthDay75 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology76 = null;
        org.joda.time.MonthDay monthDay77 = monthDay75.withChronologyRetainFields(chronology76);
        org.joda.time.DateTimeFieldType dateTimeFieldType79 = monthDay75.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property80 = monthDay73.property(dateTimeFieldType79);
        int int81 = property80.get();
        org.joda.time.MonthDay monthDay83 = property80.addWrapFieldToCopy((int) (short) 1);
        boolean boolean84 = monthDay63.isBefore((org.joda.time.ReadablePartial) monthDay83);
        org.joda.time.Chronology chronology85 = null;
        org.joda.time.MonthDay monthDay86 = monthDay63.withChronologyRetainFields(chronology85);
        org.joda.time.Chronology chronology87 = monthDay86.getChronology();
        org.joda.time.MonthDay monthDay88 = monthDay61.withChronologyRetainFields(chronology87);
        org.joda.time.MonthDay monthDay89 = monthDay47.withChronologyRetainFields(chronology87);
        org.joda.time.MonthDay monthDay91 = monthDay89.minusDays(0);
        int int92 = property10.compareTo((org.joda.time.ReadablePartial) monthDay89);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay94 = property10.setCopy((int) '#');
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 35 for dayOfMonth must be in the range [1,31]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "1" + "'", str14, "1");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "1" + "'", str15, "1");
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(monthDay19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 31 + "'", int20 == 31);
        org.junit.Assert.assertNotNull(monthDay22);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertNotNull(monthDay28);
        org.junit.Assert.assertNotNull(monthDay30);
        org.junit.Assert.assertNotNull(monthDay32);
        org.junit.Assert.assertNotNull(monthDay34);
        org.junit.Assert.assertNotNull(monthDay36);
        org.junit.Assert.assertNotNull(dateTimeFieldType38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertNotNull(monthDay42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(monthDay45);
        org.junit.Assert.assertNotNull(monthDay47);
        org.junit.Assert.assertNotNull(monthDay49);
        org.junit.Assert.assertNotNull(monthDay52);
        org.junit.Assert.assertNotNull(monthDay54);
        org.junit.Assert.assertNotNull(monthDay56);
        org.junit.Assert.assertNotNull(dateTimeFieldType58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertNotNull(monthDay61);
        org.junit.Assert.assertNotNull(monthDay63);
        org.junit.Assert.assertNotNull(monthDay65);
        org.junit.Assert.assertNotNull(dateTimeFieldType67);
        org.junit.Assert.assertNotNull(monthDay69);
        org.junit.Assert.assertNotNull(monthDay71);
        org.junit.Assert.assertNotNull(monthDay73);
        org.junit.Assert.assertNotNull(monthDay75);
        org.junit.Assert.assertNotNull(monthDay77);
        org.junit.Assert.assertNotNull(dateTimeFieldType79);
        org.junit.Assert.assertNotNull(property80);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 1 + "'", int81 == 1);
        org.junit.Assert.assertNotNull(monthDay83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertNotNull(monthDay86);
        org.junit.Assert.assertNotNull(chronology87);
        org.junit.Assert.assertNotNull(monthDay88);
        org.junit.Assert.assertNotNull(monthDay89);
        org.junit.Assert.assertNotNull(monthDay91);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + (-1) + "'", int92 == (-1));
    }

    @Test
    public void test0994() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0994");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        org.joda.time.MonthDay.Property property11 = monthDay3.monthOfYear();
        org.joda.time.MonthDay monthDay13 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MonthDay monthDay15 = monthDay13.withChronologyRetainFields(chronology14);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = monthDay13.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay monthDay19 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MonthDay monthDay21 = monthDay19.withChronologyRetainFields(chronology20);
        org.joda.time.MonthDay monthDay23 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MonthDay monthDay25 = monthDay23.withChronologyRetainFields(chronology24);
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = monthDay23.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property28 = monthDay21.property(dateTimeFieldType27);
        int int29 = monthDay13.indexOf(dateTimeFieldType27);
        boolean boolean30 = monthDay3.equals((java.lang.Object) int29);
        org.joda.time.MonthDay monthDay32 = monthDay3.withMonthOfYear(9);
        int int34 = monthDay32.getValue((int) (byte) 0);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray35 = monthDay32.getFieldTypes();
        java.lang.String str37 = monthDay32.toString("--02-02");
        org.joda.time.ReadablePeriod readablePeriod38 = null;
        org.joda.time.MonthDay monthDay40 = monthDay32.withPeriodAdded(readablePeriod38, (int) (byte) 1);
        java.lang.String str41 = monthDay32.toString();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(monthDay19);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertNotNull(monthDay23);
        org.junit.Assert.assertNotNull(monthDay25);
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(monthDay32);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 9 + "'", int34 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray35);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "--02-02" + "'", str37, "--02-02");
        org.junit.Assert.assertNotNull(monthDay40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "--09-01" + "'", str41, "--09-01");
    }

    @Test
    public void test0995() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0995");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        java.util.Locale locale11 = null;
        int int12 = property10.getMaximumTextLength(locale11);
        java.util.Locale locale13 = null;
        int int14 = property10.getMaximumShortTextLength(locale13);
        org.joda.time.DateTimeField dateTimeField15 = property10.getField();
        java.lang.String str16 = property10.getAsShortText();
        java.util.Locale locale17 = null;
        java.lang.String str18 = property10.getAsShortText(locale17);
        java.util.Locale locale19 = null;
        int int20 = property10.getMaximumTextLength(locale19);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "1" + "'", str16, "1");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "1" + "'", str18, "1");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2 + "'", int20 == 2);
    }

    @Test
    public void test0996() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0996");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        int int11 = property10.get();
        org.joda.time.DurationField durationField12 = property10.getDurationField();
        java.util.Locale locale13 = null;
        int int14 = property10.getMaximumTextLength(locale13);
        org.joda.time.MonthDay monthDay16 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MonthDay monthDay18 = monthDay16.withChronologyRetainFields(chronology17);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = monthDay16.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property21 = monthDay16.dayOfMonth();
        org.joda.time.Chronology chronology22 = monthDay16.getChronology();
        org.joda.time.Chronology chronology23 = monthDay16.getChronology();
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.DateTime dateTime25 = monthDay16.toDateTime(readableInstant24);
        int int26 = property10.compareTo((org.joda.time.ReadableInstant) dateTime25);
        java.lang.String str27 = property10.toString();
        org.joda.time.MonthDay monthDay28 = property10.getMonthDay();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(monthDay18);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Property[dayOfMonth]" + "'", str27, "Property[dayOfMonth]");
        org.junit.Assert.assertNotNull(monthDay28);
    }

    @Test
    public void test0997() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0997");
        org.joda.time.MonthDay monthDay2 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MonthDay monthDay4 = monthDay2.withChronologyRetainFields(chronology3);
        org.joda.time.MonthDay monthDay6 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MonthDay monthDay8 = monthDay6.withChronologyRetainFields(chronology7);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = monthDay6.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property11 = monthDay4.property(dateTimeFieldType10);
        org.joda.time.MonthDay.Property property12 = monthDay4.monthOfYear();
        int int13 = monthDay4.getDayOfMonth();
        org.joda.time.MonthDay.Property property14 = monthDay4.dayOfMonth();
        int int15 = monthDay4.getDayOfMonth();
        org.joda.time.MonthDay monthDay17 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.MonthDay monthDay19 = monthDay17.withChronologyRetainFields(chronology18);
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = monthDay17.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property22 = monthDay17.dayOfMonth();
        org.joda.time.Chronology chronology23 = monthDay17.getChronology();
        org.joda.time.MonthDay monthDay24 = monthDay4.withChronologyRetainFields(chronology23);
        org.joda.time.MonthDay monthDay25 = new org.joda.time.MonthDay(chronology23);
        org.joda.time.MonthDay monthDay26 = new org.joda.time.MonthDay(chronology23);
        org.joda.time.MonthDay monthDay27 = org.joda.time.MonthDay.now(chronology23);
        org.joda.time.MonthDay monthDay28 = new org.joda.time.MonthDay(chronology23);
        org.joda.time.MonthDay monthDay29 = new org.joda.time.MonthDay((long) 'a', chronology23);
        org.junit.Assert.assertNotNull(monthDay2);
        org.junit.Assert.assertNotNull(monthDay4);
        org.junit.Assert.assertNotNull(monthDay6);
        org.junit.Assert.assertNotNull(monthDay8);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(monthDay17);
        org.junit.Assert.assertNotNull(monthDay19);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertNotNull(monthDay27);
    }

    @Test
    public void test0998() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0998");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay1.plus(readablePeriod6);
        org.joda.time.MonthDay monthDay9 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MonthDay monthDay11 = monthDay9.withChronologyRetainFields(chronology10);
        org.joda.time.MonthDay monthDay13 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MonthDay monthDay15 = monthDay13.withChronologyRetainFields(chronology14);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = monthDay13.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property18 = monthDay11.property(dateTimeFieldType17);
        int int19 = property18.get();
        org.joda.time.MonthDay monthDay21 = property18.addWrapFieldToCopy((int) (short) 1);
        boolean boolean22 = monthDay1.isBefore((org.joda.time.ReadablePartial) monthDay21);
        org.joda.time.DateTimeField[] dateTimeFieldArray23 = monthDay1.getFields();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str25 = monthDay1.toString("dayOfMonth");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: O");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(monthDay9);
        org.junit.Assert.assertNotNull(monthDay11);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldArray23);
    }

    @Test
    public void test0999() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0999");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.MonthDay monthDay4 = monthDay1.withPeriodAdded(readablePeriod2, 1);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.MonthDay monthDay6 = monthDay1.plus(readablePeriod5);
        org.joda.time.MonthDay monthDay8 = monthDay6.minusDays((int) (byte) 0);
        org.joda.time.DurationFieldType durationFieldType9 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay11 = monthDay6.withFieldAdded(durationFieldType9, 8);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay4);
        org.junit.Assert.assertNotNull(monthDay6);
        org.junit.Assert.assertNotNull(monthDay8);
    }

    @Test
    public void test1000() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test1000");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        int int11 = property10.get();
        int int12 = property10.getMaximumValue();
        org.joda.time.MonthDay monthDay14 = property10.setCopy((int) (short) 1);
        org.joda.time.MonthDay monthDay16 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MonthDay monthDay18 = monthDay16.withChronologyRetainFields(chronology17);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = monthDay16.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.MonthDay monthDay22 = monthDay16.plus(readablePeriod21);
        int int23 = monthDay16.getDayOfMonth();
        int int24 = property10.compareTo((org.joda.time.ReadablePartial) monthDay16);
        org.joda.time.DurationField durationField25 = property10.getDurationField();
        org.joda.time.MonthDay monthDay27 = property10.addToCopy((int) '#');
        org.joda.time.Chronology chronology28 = monthDay27.getChronology();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 31 + "'", int12 == 31);
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(monthDay18);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertNotNull(monthDay22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(monthDay27);
        org.junit.Assert.assertNotNull(chronology28);
    }
}


import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.Ignore;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest3 {

    public static boolean debug = false;

    @Test
    public void test1501() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1501");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        int int9 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl11 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl13 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray18 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl13.load(doubleArray18);
        double[] doubleArray20 = empiricalDistributionImpl13.getUpperBounds();
        empiricalDistributionImpl11.load(doubleArray20);
        empiricalDistributionImpl1.load(doubleArray20);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary23 = empiricalDistributionImpl1.getSampleStats();
        java.util.List list24 = empiricalDistributionImpl1.getBinStats();
        double[] doubleArray25 = empiricalDistributionImpl1.getUpperBounds();
        java.util.List list26 = empiricalDistributionImpl1.getBinStats();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(statisticalSummary23);
        org.junit.Assert.assertNotNull(list24);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.9714285714285715, 0.9714285714285715, 0.9714285714285715, 0.9714285714285715, 0.9714285714285715, 0.9714285714285715, 0.9714285714285715, 0.9714285714285715, 0.9714285714285715, 0.9714285714285715, 0.9714285714285715, 1.0]");
        org.junit.Assert.assertNotNull(list26);
    }

    @Test
    public void test1502() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1502");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int2 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray4 = new double[] { 100.0d };
        empiricalDistributionImpl1.load(doubleArray4);
        boolean boolean6 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary7 = empiricalDistributionImpl1.getSampleStats();
        int int8 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary9 = empiricalDistributionImpl1.getSampleStats();
        java.util.List list10 = empiricalDistributionImpl1.getBinStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary11 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl13 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl15 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int16 = empiricalDistributionImpl15.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary17 = empiricalDistributionImpl15.getSampleStats();
        double[] doubleArray21 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl15.load(doubleArray21);
        empiricalDistributionImpl13.load(doubleArray21);
        int int24 = empiricalDistributionImpl13.getBinCount();
        int int25 = empiricalDistributionImpl13.getBinCount();
        double double26 = empiricalDistributionImpl13.getNextValue();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl28 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl30 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int31 = empiricalDistributionImpl30.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary32 = empiricalDistributionImpl30.getSampleStats();
        double[] doubleArray36 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl30.load(doubleArray36);
        empiricalDistributionImpl28.load(doubleArray36);
        double[] doubleArray42 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl28.load(doubleArray42);
        double[] doubleArray44 = empiricalDistributionImpl28.getUpperBounds();
        empiricalDistributionImpl13.load(doubleArray44);
        empiricalDistributionImpl1.load(doubleArray44);
        java.lang.Class<?> wildcardClass47 = empiricalDistributionImpl1.getClass();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 35 + "'", int2 == 35);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(statisticalSummary7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 35 + "'", int8 == 35);
        org.junit.Assert.assertNotNull(statisticalSummary9);
        org.junit.Assert.assertNotNull(list10);
        org.junit.Assert.assertNotNull(statisticalSummary11);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 35 + "'", int16 == 35);
        org.junit.Assert.assertNull(statisticalSummary17);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 100 + "'", int24 == 100);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 100 + "'", int25 == 100);
// flaky:         org.junit.Assert.assertTrue("'" + double26 + "' != '" + 10.0d + "'", double26 == 10.0d);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 35 + "'", int31 == 35);
        org.junit.Assert.assertNull(statisticalSummary32);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(wildcardClass47);
    }

    @Test
    public void test1503() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1503");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int2 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray4 = new double[] { 100.0d };
        empiricalDistributionImpl1.load(doubleArray4);
        boolean boolean6 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary7 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary8 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl10 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl12 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int13 = empiricalDistributionImpl12.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary14 = empiricalDistributionImpl12.getSampleStats();
        double[] doubleArray18 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl12.load(doubleArray18);
        empiricalDistributionImpl10.load(doubleArray18);
        double[] doubleArray24 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl10.load(doubleArray24);
        empiricalDistributionImpl1.load(doubleArray24);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl28 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl30 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int31 = empiricalDistributionImpl30.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary32 = empiricalDistributionImpl30.getSampleStats();
        double[] doubleArray36 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl30.load(doubleArray36);
        empiricalDistributionImpl28.load(doubleArray36);
        empiricalDistributionImpl1.load(doubleArray36);
        java.util.List list40 = empiricalDistributionImpl1.getBinStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary41 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary42 = empiricalDistributionImpl1.getSampleStats();
        java.util.List list43 = empiricalDistributionImpl1.getBinStats();
        java.lang.Class<?> wildcardClass44 = empiricalDistributionImpl1.getClass();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 35 + "'", int2 == 35);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(statisticalSummary7);
        org.junit.Assert.assertNotNull(statisticalSummary8);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
        org.junit.Assert.assertNull(statisticalSummary14);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 35 + "'", int31 == 35);
        org.junit.Assert.assertNull(statisticalSummary32);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(list40);
        org.junit.Assert.assertNotNull(statisticalSummary41);
        org.junit.Assert.assertNotNull(statisticalSummary42);
        org.junit.Assert.assertNotNull(list43);
        org.junit.Assert.assertNotNull(wildcardClass44);
    }

    @Test
    public void test1504() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1504");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (short) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray8 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl3.load(doubleArray8);
        double[] doubleArray10 = empiricalDistributionImpl3.getUpperBounds();
        int int11 = empiricalDistributionImpl3.getBinCount();
        double[] doubleArray12 = empiricalDistributionImpl3.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray12);
        double[] doubleArray14 = empiricalDistributionImpl1.getUpperBounds();
        java.util.List list15 = empiricalDistributionImpl1.getBinStats();
        java.io.File file16 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(file16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 35 + "'", int11 == 35);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0]");
        org.junit.Assert.assertNotNull(list15);
    }

    @Test
    public void test1505() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1505");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl10 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl12 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int13 = empiricalDistributionImpl12.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary14 = empiricalDistributionImpl12.getSampleStats();
        double[] doubleArray18 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl12.load(doubleArray18);
        empiricalDistributionImpl10.load(doubleArray18);
        empiricalDistributionImpl1.load(doubleArray18);
        double double22 = empiricalDistributionImpl1.getNextValue();
        java.util.List list23 = empiricalDistributionImpl1.getBinStats();
        int int24 = empiricalDistributionImpl1.getBinCount();
        boolean boolean25 = empiricalDistributionImpl1.isLoaded();
        boolean boolean26 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl28 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl30 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int31 = empiricalDistributionImpl30.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary32 = empiricalDistributionImpl30.getSampleStats();
        double[] doubleArray36 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl30.load(doubleArray36);
        empiricalDistributionImpl28.load(doubleArray36);
        double[] doubleArray42 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl28.load(doubleArray42);
        double[] doubleArray44 = empiricalDistributionImpl28.getUpperBounds();
        double double45 = empiricalDistributionImpl28.getNextValue();
        boolean boolean46 = empiricalDistributionImpl28.isLoaded();
        int int47 = empiricalDistributionImpl28.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary48 = empiricalDistributionImpl28.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary49 = empiricalDistributionImpl28.getSampleStats();
        boolean boolean50 = empiricalDistributionImpl28.isLoaded();
        boolean boolean51 = empiricalDistributionImpl28.isLoaded();
        double[] doubleArray52 = empiricalDistributionImpl28.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
        org.junit.Assert.assertNull(statisticalSummary14);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double22 + "' != '" + 10.0d + "'", double22 == 10.0d);
        org.junit.Assert.assertNotNull(list23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 35 + "'", int24 == 35);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 35 + "'", int31 == 35);
        org.junit.Assert.assertNull(statisticalSummary32);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double45 + "' != '" + (-1.367936642242528d) + "'", double45 == (-1.367936642242528d));
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(statisticalSummary48);
        org.junit.Assert.assertNotNull(statisticalSummary49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0]");
    }

    @Test
    public void test1506() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1506");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        boolean boolean2 = empiricalDistributionImpl1.isLoaded();
        int int3 = empiricalDistributionImpl1.getBinCount();
        boolean boolean4 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl6 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl8 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int9 = empiricalDistributionImpl8.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary10 = empiricalDistributionImpl8.getSampleStats();
        double[] doubleArray14 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl8.load(doubleArray14);
        empiricalDistributionImpl6.load(doubleArray14);
        double[] doubleArray20 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl6.load(doubleArray20);
        double[] doubleArray22 = empiricalDistributionImpl6.getUpperBounds();
        double double23 = empiricalDistributionImpl6.getNextValue();
        boolean boolean24 = empiricalDistributionImpl6.isLoaded();
        double[] doubleArray25 = empiricalDistributionImpl6.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray25);
        double double27 = empiricalDistributionImpl1.getNextValue();
        double double28 = empiricalDistributionImpl1.getNextValue();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 35 + "'", int3 == 35);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertNull(statisticalSummary10);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double23 + "' != '" + (-1.0687378559963443d) + "'", double23 == (-1.0687378559963443d));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0]");
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 1.0d + "'", double27 == 1.0d);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 1.0d + "'", double28 == 1.0d);
    }

    @Test
    public void test1507() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1507");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) ' ');
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray8 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl3.load(doubleArray8);
        double[] doubleArray10 = empiricalDistributionImpl3.getUpperBounds();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl12 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl14 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int15 = empiricalDistributionImpl14.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary16 = empiricalDistributionImpl14.getSampleStats();
        double[] doubleArray20 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl14.load(doubleArray20);
        empiricalDistributionImpl12.load(doubleArray20);
        empiricalDistributionImpl3.load(doubleArray20);
        double double24 = empiricalDistributionImpl3.getNextValue();
        java.util.List list25 = empiricalDistributionImpl3.getBinStats();
        int int26 = empiricalDistributionImpl3.getBinCount();
        java.util.List list27 = empiricalDistributionImpl3.getBinStats();
        double double28 = empiricalDistributionImpl3.getNextValue();
        double[] doubleArray29 = empiricalDistributionImpl3.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray29);
        double double31 = empiricalDistributionImpl1.getNextValue();
        java.net.URL uRL32 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(uRL32);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 35 + "'", int15 == 35);
        org.junit.Assert.assertNull(statisticalSummary16);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double24 + "' != '" + 1.0d + "'", double24 == 1.0d);
        org.junit.Assert.assertNotNull(list25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 35 + "'", int26 == 35);
        org.junit.Assert.assertNotNull(list27);
// flaky:         org.junit.Assert.assertTrue("'" + double28 + "' != '" + 32.0d + "'", double28 == 32.0d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.6666666666666666d + "'", double31 == 0.6666666666666666d);
    }

    @Test
    public void test1508() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1508");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        double[] doubleArray15 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl1.load(doubleArray15);
        double[] doubleArray17 = empiricalDistributionImpl1.getUpperBounds();
        double double18 = empiricalDistributionImpl1.getNextValue();
        double double19 = empiricalDistributionImpl1.getNextValue();
        java.net.URL uRL20 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(uRL20);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double18 + "' != '" + (-0.29279799150333213d) + "'", double18 == (-0.29279799150333213d));
// flaky:         org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.37442802646930523d + "'", double19 == 0.37442802646930523d);
    }

    @Test
    public void test1509() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1509");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl(52);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl5 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int6 = empiricalDistributionImpl5.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary7 = empiricalDistributionImpl5.getSampleStats();
        double[] doubleArray11 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl5.load(doubleArray11);
        empiricalDistributionImpl3.load(doubleArray11);
        double[] doubleArray17 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl3.load(doubleArray17);
        double double19 = empiricalDistributionImpl3.getNextValue();
        boolean boolean20 = empiricalDistributionImpl3.isLoaded();
        boolean boolean21 = empiricalDistributionImpl3.isLoaded();
        double[] doubleArray22 = empiricalDistributionImpl3.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray22);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary24 = empiricalDistributionImpl1.getSampleStats();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 35 + "'", int6 == 35);
        org.junit.Assert.assertNull(statisticalSummary7);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[-1.0, 0.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double19 + "' != '" + (-0.5596927366984655d) + "'", double19 == (-0.5596927366984655d));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0]");
        org.junit.Assert.assertNotNull(statisticalSummary24);
    }

    @Test
    public void test1510() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1510");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        double[] doubleArray15 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl1.load(doubleArray15);
        double[] doubleArray17 = empiricalDistributionImpl1.getUpperBounds();
        double double18 = empiricalDistributionImpl1.getNextValue();
        boolean boolean19 = empiricalDistributionImpl1.isLoaded();
        int int20 = empiricalDistributionImpl1.getBinCount();
        java.util.List list21 = empiricalDistributionImpl1.getBinStats();
        java.util.List list22 = empiricalDistributionImpl1.getBinStats();
        double[] doubleArray23 = empiricalDistributionImpl1.getUpperBounds();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl25 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl27 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray32 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl27.load(doubleArray32);
        double[] doubleArray34 = empiricalDistributionImpl27.getUpperBounds();
        empiricalDistributionImpl25.load(doubleArray34);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl37 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int38 = empiricalDistributionImpl37.getBinCount();
        double[] doubleArray40 = new double[] { 100.0d };
        empiricalDistributionImpl37.load(doubleArray40);
        empiricalDistributionImpl25.load(doubleArray40);
        java.util.List list43 = empiricalDistributionImpl25.getBinStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary44 = empiricalDistributionImpl25.getSampleStats();
        double double45 = empiricalDistributionImpl25.getNextValue();
        java.util.List list46 = empiricalDistributionImpl25.getBinStats();
        int int47 = empiricalDistributionImpl25.getBinCount();
        boolean boolean48 = empiricalDistributionImpl25.isLoaded();
        double[] doubleArray49 = empiricalDistributionImpl25.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray49);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double18 + "' != '" + (-0.1954261022583433d) + "'", double18 == (-0.1954261022583433d));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(list21);
        org.junit.Assert.assertNotNull(list22);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 35 + "'", int38 == 35);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[100.0]");
        org.junit.Assert.assertNotNull(list43);
        org.junit.Assert.assertNotNull(statisticalSummary44);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 100.0d + "'", double45 == 100.0d);
        org.junit.Assert.assertNotNull(list46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 35 + "'", int47 == 35);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
    }

    @Test
    public void test1511() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1511");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) 'a');
        int int2 = empiricalDistributionImpl1.getBinCount();
        java.net.URL uRL3 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(uRL3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 97 + "'", int2 == 97);
    }

    @Test
    public void test1512() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1512");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl10 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl12 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int13 = empiricalDistributionImpl12.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary14 = empiricalDistributionImpl12.getSampleStats();
        double[] doubleArray18 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl12.load(doubleArray18);
        empiricalDistributionImpl10.load(doubleArray18);
        empiricalDistributionImpl1.load(doubleArray18);
        double double22 = empiricalDistributionImpl1.getNextValue();
        double double23 = empiricalDistributionImpl1.getNextValue();
        double[] doubleArray24 = empiricalDistributionImpl1.getUpperBounds();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary25 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary26 = empiricalDistributionImpl1.getSampleStats();
        int int27 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray28 = empiricalDistributionImpl1.getUpperBounds();
        java.util.List list29 = empiricalDistributionImpl1.getBinStats();
        int int30 = empiricalDistributionImpl1.getBinCount();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
        org.junit.Assert.assertNull(statisticalSummary14);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double22 + "' != '" + 32.0d + "'", double22 == 32.0d);
// flaky:         org.junit.Assert.assertTrue("'" + double23 + "' != '" + 10.0d + "'", double23 == 10.0d);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 1.0]");
        org.junit.Assert.assertNotNull(statisticalSummary25);
        org.junit.Assert.assertNotNull(statisticalSummary26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 35 + "'", int27 == 35);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 1.0]");
        org.junit.Assert.assertNotNull(list29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 35 + "'", int30 == 35);
    }

    @Test
    public void test1513() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1513");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        double[] doubleArray15 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl1.load(doubleArray15);
        double double17 = empiricalDistributionImpl1.getNextValue();
        boolean boolean18 = empiricalDistributionImpl1.isLoaded();
        boolean boolean19 = empiricalDistributionImpl1.isLoaded();
        double[] doubleArray20 = empiricalDistributionImpl1.getUpperBounds();
        java.util.List list21 = empiricalDistributionImpl1.getBinStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl23 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl25 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int26 = empiricalDistributionImpl25.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary27 = empiricalDistributionImpl25.getSampleStats();
        double[] doubleArray31 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl25.load(doubleArray31);
        empiricalDistributionImpl23.load(doubleArray31);
        double[] doubleArray37 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl23.load(doubleArray37);
        double double39 = empiricalDistributionImpl23.getNextValue();
        boolean boolean40 = empiricalDistributionImpl23.isLoaded();
        boolean boolean41 = empiricalDistributionImpl23.isLoaded();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl43 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        boolean boolean44 = empiricalDistributionImpl43.isLoaded();
        int int45 = empiricalDistributionImpl43.getBinCount();
        boolean boolean46 = empiricalDistributionImpl43.isLoaded();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl48 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int49 = empiricalDistributionImpl48.getBinCount();
        double[] doubleArray51 = new double[] { 100.0d };
        empiricalDistributionImpl48.load(doubleArray51);
        empiricalDistributionImpl43.load(doubleArray51);
        empiricalDistributionImpl23.load(doubleArray51);
        empiricalDistributionImpl1.load(doubleArray51);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary56 = empiricalDistributionImpl1.getSampleStats();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[-1.0, 0.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.004441642108735592d + "'", double17 == 0.004441642108735592d);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0]");
        org.junit.Assert.assertNotNull(list21);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 35 + "'", int26 == 35);
        org.junit.Assert.assertNull(statisticalSummary27);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[-1.0, 0.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.0022143681837180195d + "'", double39 == 0.0022143681837180195d);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 35 + "'", int45 == 35);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 35 + "'", int49 == 35);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[100.0]");
        org.junit.Assert.assertNotNull(statisticalSummary56);
    }

    @Test
    public void test1514() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1514");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        java.util.List list9 = empiricalDistributionImpl1.getBinStats();
        boolean boolean10 = empiricalDistributionImpl1.isLoaded();
        java.util.List list11 = empiricalDistributionImpl1.getBinStats();
        int int12 = empiricalDistributionImpl1.getBinCount();
        java.net.URL uRL13 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(uRL13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(list9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(list11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 35 + "'", int12 == 35);
    }

    @Test
    public void test1515() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1515");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        double double12 = empiricalDistributionImpl1.getNextValue();
        java.util.List list13 = empiricalDistributionImpl1.getBinStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl15 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray20 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl15.load(doubleArray20);
        double[] doubleArray22 = empiricalDistributionImpl15.getUpperBounds();
        java.util.List list23 = empiricalDistributionImpl15.getBinStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl25 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl27 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int28 = empiricalDistributionImpl27.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary29 = empiricalDistributionImpl27.getSampleStats();
        double[] doubleArray33 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl27.load(doubleArray33);
        empiricalDistributionImpl25.load(doubleArray33);
        double double36 = empiricalDistributionImpl25.getNextValue();
        double[] doubleArray37 = empiricalDistributionImpl25.getUpperBounds();
        double[] doubleArray38 = empiricalDistributionImpl25.getUpperBounds();
        empiricalDistributionImpl15.load(doubleArray38);
        java.util.List list40 = empiricalDistributionImpl15.getBinStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl42 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl44 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int45 = empiricalDistributionImpl44.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary46 = empiricalDistributionImpl44.getSampleStats();
        double[] doubleArray50 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl44.load(doubleArray50);
        empiricalDistributionImpl42.load(doubleArray50);
        boolean boolean53 = empiricalDistributionImpl42.isLoaded();
        boolean boolean54 = empiricalDistributionImpl42.isLoaded();
        double[] doubleArray55 = empiricalDistributionImpl42.getUpperBounds();
        double[] doubleArray56 = empiricalDistributionImpl42.getUpperBounds();
        empiricalDistributionImpl15.load(doubleArray56);
        empiricalDistributionImpl1.load(doubleArray56);
        int int59 = empiricalDistributionImpl1.getBinCount();
        java.io.File file60 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(file60);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double12 + "' != '" + 32.0d + "'", double12 == 32.0d);
        org.junit.Assert.assertNotNull(list13);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(list23);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 35 + "'", int28 == 35);
        org.junit.Assert.assertNull(statisticalSummary29);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double36 + "' != '" + 10.0d + "'", double36 == 10.0d);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(list40);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 35 + "'", int45 == 35);
        org.junit.Assert.assertNull(statisticalSummary46);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0]");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 100 + "'", int59 == 100);
    }

    @Test
    public void test1516() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1516");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl10 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl12 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int13 = empiricalDistributionImpl12.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary14 = empiricalDistributionImpl12.getSampleStats();
        double[] doubleArray18 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl12.load(doubleArray18);
        empiricalDistributionImpl10.load(doubleArray18);
        empiricalDistributionImpl1.load(doubleArray18);
        double double22 = empiricalDistributionImpl1.getNextValue();
        java.util.List list23 = empiricalDistributionImpl1.getBinStats();
        int int24 = empiricalDistributionImpl1.getBinCount();
        java.util.List list25 = empiricalDistributionImpl1.getBinStats();
        double double26 = empiricalDistributionImpl1.getNextValue();
        java.util.List list27 = empiricalDistributionImpl1.getBinStats();
        double[] doubleArray28 = empiricalDistributionImpl1.getUpperBounds();
        double[] doubleArray29 = empiricalDistributionImpl1.getUpperBounds();
        double[] doubleArray30 = empiricalDistributionImpl1.getUpperBounds();
        int int31 = empiricalDistributionImpl1.getBinCount();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
        org.junit.Assert.assertNull(statisticalSummary14);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double22 + "' != '" + 32.0d + "'", double22 == 32.0d);
        org.junit.Assert.assertNotNull(list23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 35 + "'", int24 == 35);
        org.junit.Assert.assertNotNull(list25);
// flaky:         org.junit.Assert.assertTrue("'" + double26 + "' != '" + 10.0d + "'", double26 == 10.0d);
        org.junit.Assert.assertNotNull(list27);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 1.0]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 35 + "'", int31 == 35);
    }

    @Test
    public void test1517() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1517");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        int int9 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray10 = empiricalDistributionImpl1.getUpperBounds();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary11 = empiricalDistributionImpl1.getSampleStats();
        int int12 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl14 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl16 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int17 = empiricalDistributionImpl16.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary18 = empiricalDistributionImpl16.getSampleStats();
        double[] doubleArray22 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl16.load(doubleArray22);
        empiricalDistributionImpl14.load(doubleArray22);
        double[] doubleArray28 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl14.load(doubleArray28);
        double double30 = empiricalDistributionImpl14.getNextValue();
        boolean boolean31 = empiricalDistributionImpl14.isLoaded();
        boolean boolean32 = empiricalDistributionImpl14.isLoaded();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl34 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        boolean boolean35 = empiricalDistributionImpl34.isLoaded();
        int int36 = empiricalDistributionImpl34.getBinCount();
        boolean boolean37 = empiricalDistributionImpl34.isLoaded();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl39 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int40 = empiricalDistributionImpl39.getBinCount();
        double[] doubleArray42 = new double[] { 100.0d };
        empiricalDistributionImpl39.load(doubleArray42);
        empiricalDistributionImpl34.load(doubleArray42);
        empiricalDistributionImpl14.load(doubleArray42);
        empiricalDistributionImpl1.load(doubleArray42);
        double[] doubleArray47 = empiricalDistributionImpl1.getUpperBounds();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(statisticalSummary11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 35 + "'", int12 == 35);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 35 + "'", int17 == 35);
        org.junit.Assert.assertNull(statisticalSummary18);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-1.0, 0.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.20402344806713563d + "'", double30 == 0.20402344806713563d);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 35 + "'", int36 == 35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 35 + "'", int40 == 35);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[100.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
    }

    @Test
    public void test1518() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1518");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        java.util.List list9 = empiricalDistributionImpl1.getBinStats();
        boolean boolean10 = empiricalDistributionImpl1.isLoaded();
        java.util.List list11 = empiricalDistributionImpl1.getBinStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary12 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary13 = empiricalDistributionImpl1.getSampleStats();
        int int14 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary15 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary16 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl18 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int19 = empiricalDistributionImpl18.getBinCount();
        double[] doubleArray21 = new double[] { 100.0d };
        empiricalDistributionImpl18.load(doubleArray21);
        boolean boolean23 = empiricalDistributionImpl18.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary24 = empiricalDistributionImpl18.getSampleStats();
        boolean boolean25 = empiricalDistributionImpl18.isLoaded();
        boolean boolean26 = empiricalDistributionImpl18.isLoaded();
        double double27 = empiricalDistributionImpl18.getNextValue();
        boolean boolean28 = empiricalDistributionImpl18.isLoaded();
        boolean boolean29 = empiricalDistributionImpl18.isLoaded();
        double[] doubleArray30 = empiricalDistributionImpl18.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray30);
        boolean boolean32 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl34 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl36 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int37 = empiricalDistributionImpl36.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary38 = empiricalDistributionImpl36.getSampleStats();
        double[] doubleArray42 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl36.load(doubleArray42);
        empiricalDistributionImpl34.load(doubleArray42);
        int int45 = empiricalDistributionImpl34.getBinCount();
        java.util.List list46 = empiricalDistributionImpl34.getBinStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary47 = empiricalDistributionImpl34.getSampleStats();
        boolean boolean48 = empiricalDistributionImpl34.isLoaded();
        int int49 = empiricalDistributionImpl34.getBinCount();
        boolean boolean50 = empiricalDistributionImpl34.isLoaded();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl52 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray57 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl52.load(doubleArray57);
        double[] doubleArray59 = empiricalDistributionImpl52.getUpperBounds();
        int int60 = empiricalDistributionImpl52.getBinCount();
        double[] doubleArray61 = empiricalDistributionImpl52.getUpperBounds();
        int int62 = empiricalDistributionImpl52.getBinCount();
        java.util.List list63 = empiricalDistributionImpl52.getBinStats();
        int int64 = empiricalDistributionImpl52.getBinCount();
        double double65 = empiricalDistributionImpl52.getNextValue();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl67 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int68 = empiricalDistributionImpl67.getBinCount();
        double[] doubleArray70 = new double[] { 100.0d };
        empiricalDistributionImpl67.load(doubleArray70);
        boolean boolean72 = empiricalDistributionImpl67.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary73 = empiricalDistributionImpl67.getSampleStats();
        boolean boolean74 = empiricalDistributionImpl67.isLoaded();
        boolean boolean75 = empiricalDistributionImpl67.isLoaded();
        double[] doubleArray76 = empiricalDistributionImpl67.getUpperBounds();
        empiricalDistributionImpl52.load(doubleArray76);
        empiricalDistributionImpl34.load(doubleArray76);
        empiricalDistributionImpl1.load(doubleArray76);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(list9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(list11);
        org.junit.Assert.assertNotNull(statisticalSummary12);
        org.junit.Assert.assertNotNull(statisticalSummary13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 35 + "'", int14 == 35);
        org.junit.Assert.assertNotNull(statisticalSummary15);
        org.junit.Assert.assertNotNull(statisticalSummary16);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 35 + "'", int19 == 35);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(statisticalSummary24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 100.0d + "'", double27 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 35 + "'", int37 == 35);
        org.junit.Assert.assertNull(statisticalSummary38);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 100 + "'", int45 == 100);
        org.junit.Assert.assertNotNull(list46);
        org.junit.Assert.assertNotNull(statisticalSummary47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 100 + "'", int49 == 100);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 35 + "'", int60 == 35);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 35 + "'", int62 == 35);
        org.junit.Assert.assertNotNull(list63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 35 + "'", int64 == 35);
// flaky:         org.junit.Assert.assertTrue("'" + double65 + "' != '" + 1.0d + "'", double65 == 1.0d);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 35 + "'", int68 == 35);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(statisticalSummary73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
    }

    @Test
    public void test1519() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1519");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        java.util.List list9 = empiricalDistributionImpl1.getBinStats();
        double double10 = empiricalDistributionImpl1.getNextValue();
        double[] doubleArray11 = empiricalDistributionImpl1.getUpperBounds();
        boolean boolean12 = empiricalDistributionImpl1.isLoaded();
        java.util.List list13 = empiricalDistributionImpl1.getBinStats();
        java.net.URL uRL14 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(uRL14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(list9);
// flaky:         org.junit.Assert.assertTrue("'" + double10 + "' != '" + (-1.0d) + "'", double10 == (-1.0d));
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(list13);
    }

    @Test
    public void test1520() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1520");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '4');
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary2 = empiricalDistributionImpl1.getSampleStats();
        java.util.List list3 = empiricalDistributionImpl1.getBinStats();
        org.junit.Assert.assertNull(statisticalSummary2);
        org.junit.Assert.assertNotNull(list3);
    }

    @Test
    public void test1521() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1521");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int2 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray4 = new double[] { 100.0d };
        empiricalDistributionImpl1.load(doubleArray4);
        boolean boolean6 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary7 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary8 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl10 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl12 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int13 = empiricalDistributionImpl12.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary14 = empiricalDistributionImpl12.getSampleStats();
        double[] doubleArray18 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl12.load(doubleArray18);
        empiricalDistributionImpl10.load(doubleArray18);
        double[] doubleArray24 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl10.load(doubleArray24);
        empiricalDistributionImpl1.load(doubleArray24);
        double[] doubleArray27 = empiricalDistributionImpl1.getUpperBounds();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl29 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl31 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int32 = empiricalDistributionImpl31.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary33 = empiricalDistributionImpl31.getSampleStats();
        double[] doubleArray37 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl31.load(doubleArray37);
        empiricalDistributionImpl29.load(doubleArray37);
        empiricalDistributionImpl1.load(doubleArray37);
        int int41 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary42 = empiricalDistributionImpl1.getSampleStats();
        double[] doubleArray43 = empiricalDistributionImpl1.getUpperBounds();
        boolean boolean44 = empiricalDistributionImpl1.isLoaded();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 35 + "'", int2 == 35);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(statisticalSummary7);
        org.junit.Assert.assertNotNull(statisticalSummary8);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
        org.junit.Assert.assertNull(statisticalSummary14);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 1.0]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 35 + "'", int32 == 35);
        org.junit.Assert.assertNull(statisticalSummary33);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 35 + "'", int41 == 35);
        org.junit.Assert.assertNotNull(statisticalSummary42);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
    }

    @Test
    public void test1522() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1522");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int2 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray4 = new double[] { 100.0d };
        empiricalDistributionImpl1.load(doubleArray4);
        boolean boolean6 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary7 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary8 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl10 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl12 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int13 = empiricalDistributionImpl12.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary14 = empiricalDistributionImpl12.getSampleStats();
        double[] doubleArray18 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl12.load(doubleArray18);
        empiricalDistributionImpl10.load(doubleArray18);
        double[] doubleArray24 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl10.load(doubleArray24);
        empiricalDistributionImpl1.load(doubleArray24);
        double[] doubleArray27 = empiricalDistributionImpl1.getUpperBounds();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl29 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl31 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int32 = empiricalDistributionImpl31.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary33 = empiricalDistributionImpl31.getSampleStats();
        double[] doubleArray37 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl31.load(doubleArray37);
        empiricalDistributionImpl29.load(doubleArray37);
        empiricalDistributionImpl1.load(doubleArray37);
        int int41 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary42 = empiricalDistributionImpl1.getSampleStats();
        double[] doubleArray43 = empiricalDistributionImpl1.getUpperBounds();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary44 = empiricalDistributionImpl1.getSampleStats();
        double double45 = empiricalDistributionImpl1.getNextValue();
        java.util.List list46 = empiricalDistributionImpl1.getBinStats();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 35 + "'", int2 == 35);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(statisticalSummary7);
        org.junit.Assert.assertNotNull(statisticalSummary8);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
        org.junit.Assert.assertNull(statisticalSummary14);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 1.0]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 35 + "'", int32 == 35);
        org.junit.Assert.assertNull(statisticalSummary33);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 35 + "'", int41 == 35);
        org.junit.Assert.assertNotNull(statisticalSummary42);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 1.0]");
        org.junit.Assert.assertNotNull(statisticalSummary44);
// flaky:         org.junit.Assert.assertTrue("'" + double45 + "' != '" + 1.0d + "'", double45 == 1.0d);
        org.junit.Assert.assertNotNull(list46);
    }

    @Test
    public void test1523() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1523");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int2 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray4 = new double[] { 100.0d };
        empiricalDistributionImpl1.load(doubleArray4);
        boolean boolean6 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary7 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary8 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary9 = empiricalDistributionImpl1.getSampleStats();
        double[] doubleArray10 = empiricalDistributionImpl1.getUpperBounds();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl12 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl14 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int15 = empiricalDistributionImpl14.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary16 = empiricalDistributionImpl14.getSampleStats();
        double[] doubleArray20 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl14.load(doubleArray20);
        empiricalDistributionImpl12.load(doubleArray20);
        double[] doubleArray26 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl12.load(doubleArray26);
        double double28 = empiricalDistributionImpl12.getNextValue();
        int int29 = empiricalDistributionImpl12.getBinCount();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl31 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        boolean boolean32 = empiricalDistributionImpl31.isLoaded();
        boolean boolean33 = empiricalDistributionImpl31.isLoaded();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl35 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl37 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int38 = empiricalDistributionImpl37.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary39 = empiricalDistributionImpl37.getSampleStats();
        double[] doubleArray43 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl37.load(doubleArray43);
        empiricalDistributionImpl35.load(doubleArray43);
        double[] doubleArray49 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl35.load(doubleArray49);
        empiricalDistributionImpl31.load(doubleArray49);
        empiricalDistributionImpl12.load(doubleArray49);
        empiricalDistributionImpl1.load(doubleArray49);
        java.util.List list54 = empiricalDistributionImpl1.getBinStats();
        double double55 = empiricalDistributionImpl1.getNextValue();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 35 + "'", int2 == 35);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(statisticalSummary7);
        org.junit.Assert.assertNotNull(statisticalSummary8);
        org.junit.Assert.assertNotNull(statisticalSummary9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 35 + "'", int15 == 35);
        org.junit.Assert.assertNull(statisticalSummary16);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[-1.0, 0.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double28 + "' != '" + (-0.03993209169231959d) + "'", double28 == (-0.03993209169231959d));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 35 + "'", int38 == 35);
        org.junit.Assert.assertNull(statisticalSummary39);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(list54);
// flaky:         org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.0d + "'", double55 == 0.0d);
    }

    @Test
    public void test1524() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1524");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        java.util.List list9 = empiricalDistributionImpl1.getBinStats();
        boolean boolean10 = empiricalDistributionImpl1.isLoaded();
        double[] doubleArray11 = empiricalDistributionImpl1.getUpperBounds();
        boolean boolean12 = empiricalDistributionImpl1.isLoaded();
        boolean boolean13 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl15 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray20 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl15.load(doubleArray20);
        double[] doubleArray22 = empiricalDistributionImpl15.getUpperBounds();
        int int23 = empiricalDistributionImpl15.getBinCount();
        double[] doubleArray24 = empiricalDistributionImpl15.getUpperBounds();
        int int25 = empiricalDistributionImpl15.getBinCount();
        java.util.List list26 = empiricalDistributionImpl15.getBinStats();
        int int27 = empiricalDistributionImpl15.getBinCount();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl29 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray34 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl29.load(doubleArray34);
        double[] doubleArray36 = empiricalDistributionImpl29.getUpperBounds();
        int int37 = empiricalDistributionImpl29.getBinCount();
        int int38 = empiricalDistributionImpl29.getBinCount();
        double[] doubleArray39 = empiricalDistributionImpl29.getUpperBounds();
        empiricalDistributionImpl15.load(doubleArray39);
        empiricalDistributionImpl1.load(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(list9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 35 + "'", int23 == 35);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 35 + "'", int25 == 35);
        org.junit.Assert.assertNotNull(list26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 35 + "'", int27 == 35);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 35 + "'", int37 == 35);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 35 + "'", int38 == 35);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
    }

    @Test
    public void test1525() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1525");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int2 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray4 = new double[] { 100.0d };
        empiricalDistributionImpl1.load(doubleArray4);
        boolean boolean6 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary7 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary8 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl10 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl12 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int13 = empiricalDistributionImpl12.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary14 = empiricalDistributionImpl12.getSampleStats();
        double[] doubleArray18 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl12.load(doubleArray18);
        empiricalDistributionImpl10.load(doubleArray18);
        double[] doubleArray24 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl10.load(doubleArray24);
        empiricalDistributionImpl1.load(doubleArray24);
        double[] doubleArray27 = empiricalDistributionImpl1.getUpperBounds();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl29 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl31 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int32 = empiricalDistributionImpl31.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary33 = empiricalDistributionImpl31.getSampleStats();
        double[] doubleArray37 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl31.load(doubleArray37);
        empiricalDistributionImpl29.load(doubleArray37);
        double double40 = empiricalDistributionImpl29.getNextValue();
        double[] doubleArray41 = empiricalDistributionImpl29.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray41);
        boolean boolean43 = empiricalDistributionImpl1.isLoaded();
        double[] doubleArray44 = empiricalDistributionImpl1.getUpperBounds();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary45 = empiricalDistributionImpl1.getSampleStats();
        java.util.List list46 = empiricalDistributionImpl1.getBinStats();
        double double47 = empiricalDistributionImpl1.getNextValue();
        java.lang.Class<?> wildcardClass48 = empiricalDistributionImpl1.getClass();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 35 + "'", int2 == 35);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(statisticalSummary7);
        org.junit.Assert.assertNotNull(statisticalSummary8);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
        org.junit.Assert.assertNull(statisticalSummary14);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 1.0]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 35 + "'", int32 == 35);
        org.junit.Assert.assertNull(statisticalSummary33);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double40 + "' != '" + 32.0d + "'", double40 == 32.0d);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 1.0]");
        org.junit.Assert.assertNotNull(statisticalSummary45);
        org.junit.Assert.assertNotNull(list46);
// flaky:         org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.3333333333333333d + "'", double47 == 0.3333333333333333d);
        org.junit.Assert.assertNotNull(wildcardClass48);
    }

    @Test
    public void test1526() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1526");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int2 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray4 = new double[] { 100.0d };
        empiricalDistributionImpl1.load(doubleArray4);
        boolean boolean6 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary7 = empiricalDistributionImpl1.getSampleStats();
        boolean boolean8 = empiricalDistributionImpl1.isLoaded();
        boolean boolean9 = empiricalDistributionImpl1.isLoaded();
        boolean boolean10 = empiricalDistributionImpl1.isLoaded();
        double[] doubleArray11 = empiricalDistributionImpl1.getUpperBounds();
        boolean boolean12 = empiricalDistributionImpl1.isLoaded();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 35 + "'", int2 == 35);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(statisticalSummary7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
    }

    @Test
    public void test1527() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1527");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 100);
        int int2 = empiricalDistributionImpl1.getBinCount();
        int int3 = empiricalDistributionImpl1.getBinCount();
        java.util.List list4 = empiricalDistributionImpl1.getBinStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl6 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl8 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int9 = empiricalDistributionImpl8.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary10 = empiricalDistributionImpl8.getSampleStats();
        double[] doubleArray14 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl8.load(doubleArray14);
        empiricalDistributionImpl6.load(doubleArray14);
        double[] doubleArray20 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl6.load(doubleArray20);
        double[] doubleArray22 = empiricalDistributionImpl6.getUpperBounds();
        double double23 = empiricalDistributionImpl6.getNextValue();
        boolean boolean24 = empiricalDistributionImpl6.isLoaded();
        double[] doubleArray25 = empiricalDistributionImpl6.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray25);
        double double27 = empiricalDistributionImpl1.getNextValue();
        java.util.List list28 = empiricalDistributionImpl1.getBinStats();
        double[] doubleArray29 = empiricalDistributionImpl1.getUpperBounds();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary30 = empiricalDistributionImpl1.getSampleStats();
        java.lang.Class<?> wildcardClass31 = empiricalDistributionImpl1.getClass();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 100 + "'", int2 == 100);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 100 + "'", int3 == 100);
        org.junit.Assert.assertNotNull(list4);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertNull(statisticalSummary10);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double23 + "' != '" + (-1.947478205006475d) + "'", double23 == (-1.947478205006475d));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0]");
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 1.0d + "'", double27 == 1.0d);
        org.junit.Assert.assertNotNull(list28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(statisticalSummary30);
        org.junit.Assert.assertNotNull(wildcardClass31);
    }

    @Test
    public void test1528() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1528");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) ' ');
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        double[] doubleArray6 = new double[] { 100.0d };
        empiricalDistributionImpl3.load(doubleArray6);
        boolean boolean8 = empiricalDistributionImpl3.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary9 = empiricalDistributionImpl3.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary10 = empiricalDistributionImpl3.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary11 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray12 = empiricalDistributionImpl3.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray12);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl15 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl17 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int18 = empiricalDistributionImpl17.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary19 = empiricalDistributionImpl17.getSampleStats();
        double[] doubleArray23 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl17.load(doubleArray23);
        empiricalDistributionImpl15.load(doubleArray23);
        int int26 = empiricalDistributionImpl15.getBinCount();
        java.util.List list27 = empiricalDistributionImpl15.getBinStats();
        java.util.List list28 = empiricalDistributionImpl15.getBinStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl30 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        boolean boolean31 = empiricalDistributionImpl30.isLoaded();
        boolean boolean32 = empiricalDistributionImpl30.isLoaded();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl34 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl36 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int37 = empiricalDistributionImpl36.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary38 = empiricalDistributionImpl36.getSampleStats();
        double[] doubleArray42 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl36.load(doubleArray42);
        empiricalDistributionImpl34.load(doubleArray42);
        double[] doubleArray48 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl34.load(doubleArray48);
        empiricalDistributionImpl30.load(doubleArray48);
        empiricalDistributionImpl15.load(doubleArray48);
        java.util.List list52 = empiricalDistributionImpl15.getBinStats();
        double double53 = empiricalDistributionImpl15.getNextValue();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl55 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int56 = empiricalDistributionImpl55.getBinCount();
        double[] doubleArray58 = new double[] { 100.0d };
        empiricalDistributionImpl55.load(doubleArray58);
        boolean boolean60 = empiricalDistributionImpl55.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary61 = empiricalDistributionImpl55.getSampleStats();
        int int62 = empiricalDistributionImpl55.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary63 = empiricalDistributionImpl55.getSampleStats();
        java.util.List list64 = empiricalDistributionImpl55.getBinStats();
        double double65 = empiricalDistributionImpl55.getNextValue();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl67 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int68 = empiricalDistributionImpl67.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary69 = empiricalDistributionImpl67.getSampleStats();
        double[] doubleArray73 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl67.load(doubleArray73);
        int int75 = empiricalDistributionImpl67.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary76 = empiricalDistributionImpl67.getSampleStats();
        double[] doubleArray77 = empiricalDistributionImpl67.getUpperBounds();
        empiricalDistributionImpl55.load(doubleArray77);
        empiricalDistributionImpl15.load(doubleArray77);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl81 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int82 = empiricalDistributionImpl81.getBinCount();
        double[] doubleArray84 = new double[] { 100.0d };
        empiricalDistributionImpl81.load(doubleArray84);
        boolean boolean86 = empiricalDistributionImpl81.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary87 = empiricalDistributionImpl81.getSampleStats();
        double[] doubleArray88 = empiricalDistributionImpl81.getUpperBounds();
        empiricalDistributionImpl15.load(doubleArray88);
        empiricalDistributionImpl1.load(doubleArray88);
        java.io.File file91 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(file91);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(statisticalSummary9);
        org.junit.Assert.assertNotNull(statisticalSummary10);
        org.junit.Assert.assertNotNull(statisticalSummary11);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 35 + "'", int18 == 35);
        org.junit.Assert.assertNull(statisticalSummary19);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 100 + "'", int26 == 100);
        org.junit.Assert.assertNotNull(list27);
        org.junit.Assert.assertNotNull(list28);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 35 + "'", int37 == 35);
        org.junit.Assert.assertNull(statisticalSummary38);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(list52);
// flaky:         org.junit.Assert.assertTrue("'" + double53 + "' != '" + (-1.0d) + "'", double53 == (-1.0d));
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 35 + "'", int56 == 35);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(statisticalSummary61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 35 + "'", int62 == 35);
        org.junit.Assert.assertNotNull(statisticalSummary63);
        org.junit.Assert.assertNotNull(list64);
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 100.0d + "'", double65 == 100.0d);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 35 + "'", int68 == 35);
        org.junit.Assert.assertNull(statisticalSummary69);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 35 + "'", int75 == 35);
        org.junit.Assert.assertNotNull(statisticalSummary76);
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 1.0]");
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 35 + "'", int82 == 35);
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertNotNull(statisticalSummary87);
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
    }

    @Test
    public void test1529() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1529");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl(0);
        int int2 = empiricalDistributionImpl1.getBinCount();
        java.util.List list3 = empiricalDistributionImpl1.getBinStats();
        int int4 = empiricalDistributionImpl1.getBinCount();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(list3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
    }

    @Test
    public void test1530() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1530");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        boolean boolean12 = empiricalDistributionImpl1.isLoaded();
        boolean boolean13 = empiricalDistributionImpl1.isLoaded();
        double double14 = empiricalDistributionImpl1.getNextValue();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
// flaky:         org.junit.Assert.assertTrue("'" + double14 + "' != '" + (-13.693191627840022d) + "'", double14 == (-13.693191627840022d));
    }

    @Test
    public void test1531() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1531");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        double[] doubleArray15 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl1.load(doubleArray15);
        double[] doubleArray17 = empiricalDistributionImpl1.getUpperBounds();
        double double18 = empiricalDistributionImpl1.getNextValue();
        double[] doubleArray19 = empiricalDistributionImpl1.getUpperBounds();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary20 = empiricalDistributionImpl1.getSampleStats();
        boolean boolean21 = empiricalDistributionImpl1.isLoaded();
        boolean boolean22 = empiricalDistributionImpl1.isLoaded();
        java.lang.Class<?> wildcardClass23 = empiricalDistributionImpl1.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double18 + "' != '" + (-0.35235959499281905d) + "'", double18 == (-0.35235959499281905d));
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0]");
        org.junit.Assert.assertNotNull(statisticalSummary20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(wildcardClass23);
    }

    @Test
    public void test1532() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1532");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        double double12 = empiricalDistributionImpl1.getNextValue();
        java.util.List list13 = empiricalDistributionImpl1.getBinStats();
        double double14 = empiricalDistributionImpl1.getNextValue();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl16 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl18 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int19 = empiricalDistributionImpl18.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary20 = empiricalDistributionImpl18.getSampleStats();
        double[] doubleArray24 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl18.load(doubleArray24);
        empiricalDistributionImpl16.load(doubleArray24);
        double double27 = empiricalDistributionImpl16.getNextValue();
        double[] doubleArray28 = empiricalDistributionImpl16.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray28);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary30 = empiricalDistributionImpl1.getSampleStats();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double12 + "' != '" + 1.0d + "'", double12 == 1.0d);
        org.junit.Assert.assertNotNull(list13);
// flaky:         org.junit.Assert.assertTrue("'" + double14 + "' != '" + 10.0d + "'", double14 == 10.0d);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 35 + "'", int19 == 35);
        org.junit.Assert.assertNull(statisticalSummary20);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double27 + "' != '" + 10.0d + "'", double27 == 10.0d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(statisticalSummary30);
    }

    @Test
    public void test1533() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1533");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        double[] doubleArray15 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl1.load(doubleArray15);
        double double17 = empiricalDistributionImpl1.getNextValue();
        boolean boolean18 = empiricalDistributionImpl1.isLoaded();
        boolean boolean19 = empiricalDistributionImpl1.isLoaded();
        double[] doubleArray20 = empiricalDistributionImpl1.getUpperBounds();
        java.util.List list21 = empiricalDistributionImpl1.getBinStats();
        double[] doubleArray22 = empiricalDistributionImpl1.getUpperBounds();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary23 = empiricalDistributionImpl1.getSampleStats();
        boolean boolean24 = empiricalDistributionImpl1.isLoaded();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[-1.0, 0.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double17 + "' != '" + (-0.15265669877329657d) + "'", double17 == (-0.15265669877329657d));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0]");
        org.junit.Assert.assertNotNull(list21);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0]");
        org.junit.Assert.assertNotNull(statisticalSummary23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
    }

    @Test
    public void test1534() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1534");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        int int9 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl11 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl13 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray18 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl13.load(doubleArray18);
        double[] doubleArray20 = empiricalDistributionImpl13.getUpperBounds();
        empiricalDistributionImpl11.load(doubleArray20);
        empiricalDistributionImpl1.load(doubleArray20);
        java.util.List list23 = empiricalDistributionImpl1.getBinStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary24 = empiricalDistributionImpl1.getSampleStats();
        double double25 = empiricalDistributionImpl1.getNextValue();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl27 = new org.apache.commons.math.random.EmpiricalDistributionImpl(10);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl29 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int30 = empiricalDistributionImpl29.getBinCount();
        double[] doubleArray32 = new double[] { 100.0d };
        empiricalDistributionImpl29.load(doubleArray32);
        boolean boolean34 = empiricalDistributionImpl29.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary35 = empiricalDistributionImpl29.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary36 = empiricalDistributionImpl29.getSampleStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl38 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl40 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int41 = empiricalDistributionImpl40.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary42 = empiricalDistributionImpl40.getSampleStats();
        double[] doubleArray46 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl40.load(doubleArray46);
        empiricalDistributionImpl38.load(doubleArray46);
        double[] doubleArray52 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl38.load(doubleArray52);
        empiricalDistributionImpl29.load(doubleArray52);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl56 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl58 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int59 = empiricalDistributionImpl58.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary60 = empiricalDistributionImpl58.getSampleStats();
        double[] doubleArray64 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl58.load(doubleArray64);
        empiricalDistributionImpl56.load(doubleArray64);
        empiricalDistributionImpl29.load(doubleArray64);
        empiricalDistributionImpl27.load(doubleArray64);
        double[] doubleArray69 = empiricalDistributionImpl27.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray69);
        int int71 = empiricalDistributionImpl1.getBinCount();
        int int72 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary73 = empiricalDistributionImpl1.getSampleStats();
        java.io.File file74 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(file74);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(list23);
        org.junit.Assert.assertNotNull(statisticalSummary24);
// flaky:         org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.75d + "'", double25 == 0.75d);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 35 + "'", int30 == 35);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(statisticalSummary35);
        org.junit.Assert.assertNotNull(statisticalSummary36);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 35 + "'", int41 == 35);
        org.junit.Assert.assertNull(statisticalSummary42);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 35 + "'", int59 == 35);
        org.junit.Assert.assertNull(statisticalSummary60);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[0.3333333333333333, 0.3333333333333333, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 1.0]");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 35 + "'", int71 == 35);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 35 + "'", int72 == 35);
        org.junit.Assert.assertNotNull(statisticalSummary73);
    }

    @Test
    public void test1535() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1535");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray8 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl3.load(doubleArray8);
        double[] doubleArray10 = empiricalDistributionImpl3.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray10);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl13 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int14 = empiricalDistributionImpl13.getBinCount();
        double[] doubleArray16 = new double[] { 100.0d };
        empiricalDistributionImpl13.load(doubleArray16);
        empiricalDistributionImpl1.load(doubleArray16);
        double[] doubleArray19 = empiricalDistributionImpl1.getUpperBounds();
        double double20 = empiricalDistributionImpl1.getNextValue();
        double double21 = empiricalDistributionImpl1.getNextValue();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl23 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int24 = empiricalDistributionImpl23.getBinCount();
        double[] doubleArray26 = new double[] { 100.0d };
        empiricalDistributionImpl23.load(doubleArray26);
        boolean boolean28 = empiricalDistributionImpl23.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary29 = empiricalDistributionImpl23.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary30 = empiricalDistributionImpl23.getSampleStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl32 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl34 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int35 = empiricalDistributionImpl34.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary36 = empiricalDistributionImpl34.getSampleStats();
        double[] doubleArray40 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl34.load(doubleArray40);
        empiricalDistributionImpl32.load(doubleArray40);
        double[] doubleArray46 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl32.load(doubleArray46);
        empiricalDistributionImpl23.load(doubleArray46);
        double[] doubleArray49 = empiricalDistributionImpl23.getUpperBounds();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl51 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl53 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int54 = empiricalDistributionImpl53.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary55 = empiricalDistributionImpl53.getSampleStats();
        double[] doubleArray59 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl53.load(doubleArray59);
        empiricalDistributionImpl51.load(doubleArray59);
        double double62 = empiricalDistributionImpl51.getNextValue();
        double[] doubleArray63 = empiricalDistributionImpl51.getUpperBounds();
        empiricalDistributionImpl23.load(doubleArray63);
        double[] doubleArray65 = empiricalDistributionImpl23.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray65);
        java.net.URL uRL67 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(uRL67);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 35 + "'", int14 == 35);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[100.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 100.0d + "'", double20 == 100.0d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 100.0d + "'", double21 == 100.0d);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 35 + "'", int24 == 35);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(statisticalSummary29);
        org.junit.Assert.assertNotNull(statisticalSummary30);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 35 + "'", int35 == 35);
        org.junit.Assert.assertNull(statisticalSummary36);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 1.0]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 35 + "'", int54 == 35);
        org.junit.Assert.assertNull(statisticalSummary55);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double62 + "' != '" + 1.0d + "'", double62 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 1.0]");
    }

    @Test
    public void test1536() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1536");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        double[] doubleArray15 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl1.load(doubleArray15);
        double[] doubleArray17 = empiricalDistributionImpl1.getUpperBounds();
        double double18 = empiricalDistributionImpl1.getNextValue();
        boolean boolean19 = empiricalDistributionImpl1.isLoaded();
        int int20 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary21 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary22 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl24 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (short) 10);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl26 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int27 = empiricalDistributionImpl26.getBinCount();
        double[] doubleArray29 = new double[] { 100.0d };
        empiricalDistributionImpl26.load(doubleArray29);
        boolean boolean31 = empiricalDistributionImpl26.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary32 = empiricalDistributionImpl26.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary33 = empiricalDistributionImpl26.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary34 = empiricalDistributionImpl26.getSampleStats();
        double[] doubleArray35 = empiricalDistributionImpl26.getUpperBounds();
        empiricalDistributionImpl24.load(doubleArray35);
        empiricalDistributionImpl1.load(doubleArray35);
        java.util.List list38 = empiricalDistributionImpl1.getBinStats();
        boolean boolean39 = empiricalDistributionImpl1.isLoaded();
        java.util.List list40 = empiricalDistributionImpl1.getBinStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary41 = empiricalDistributionImpl1.getSampleStats();
        int int42 = empiricalDistributionImpl1.getBinCount();
        int int43 = empiricalDistributionImpl1.getBinCount();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double18 + "' != '" + (-0.3449544715368248d) + "'", double18 == (-0.3449544715368248d));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(statisticalSummary21);
        org.junit.Assert.assertNotNull(statisticalSummary22);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 35 + "'", int27 == 35);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(statisticalSummary32);
        org.junit.Assert.assertNotNull(statisticalSummary33);
        org.junit.Assert.assertNotNull(statisticalSummary34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(list38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(list40);
        org.junit.Assert.assertNotNull(statisticalSummary41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
    }

    @Test
    public void test1537() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1537");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray8 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl3.load(doubleArray8);
        double[] doubleArray10 = empiricalDistributionImpl3.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray10);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl13 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int14 = empiricalDistributionImpl13.getBinCount();
        double[] doubleArray16 = new double[] { 100.0d };
        empiricalDistributionImpl13.load(doubleArray16);
        empiricalDistributionImpl1.load(doubleArray16);
        double[] doubleArray19 = empiricalDistributionImpl1.getUpperBounds();
        int int20 = empiricalDistributionImpl1.getBinCount();
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 35 + "'", int14 == 35);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[100.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 35 + "'", int20 == 35);
    }

    @Test
    public void test1538() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1538");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        java.util.List list9 = empiricalDistributionImpl1.getBinStats();
        boolean boolean10 = empiricalDistributionImpl1.isLoaded();
        boolean boolean11 = empiricalDistributionImpl1.isLoaded();
        double[] doubleArray12 = empiricalDistributionImpl1.getUpperBounds();
        double[] doubleArray13 = empiricalDistributionImpl1.getUpperBounds();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(list9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
    }

    @Test
    public void test1539() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1539");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl10 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray15 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl10.load(doubleArray15);
        double[] doubleArray17 = empiricalDistributionImpl10.getUpperBounds();
        int int18 = empiricalDistributionImpl10.getBinCount();
        double[] doubleArray19 = empiricalDistributionImpl10.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray19);
        java.lang.Class<?> wildcardClass21 = doubleArray19.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 35 + "'", int18 == 35);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(wildcardClass21);
    }

    @Test
    public void test1540() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1540");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        java.util.List list9 = empiricalDistributionImpl1.getBinStats();
        boolean boolean10 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary11 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl13 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int14 = empiricalDistributionImpl13.getBinCount();
        double[] doubleArray16 = new double[] { 100.0d };
        empiricalDistributionImpl13.load(doubleArray16);
        boolean boolean18 = empiricalDistributionImpl13.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary19 = empiricalDistributionImpl13.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary20 = empiricalDistributionImpl13.getSampleStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl22 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl24 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int25 = empiricalDistributionImpl24.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary26 = empiricalDistributionImpl24.getSampleStats();
        double[] doubleArray30 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl24.load(doubleArray30);
        empiricalDistributionImpl22.load(doubleArray30);
        double[] doubleArray36 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl22.load(doubleArray36);
        empiricalDistributionImpl13.load(doubleArray36);
        double[] doubleArray39 = empiricalDistributionImpl13.getUpperBounds();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl41 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl43 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int44 = empiricalDistributionImpl43.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary45 = empiricalDistributionImpl43.getSampleStats();
        double[] doubleArray49 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl43.load(doubleArray49);
        empiricalDistributionImpl41.load(doubleArray49);
        double double52 = empiricalDistributionImpl41.getNextValue();
        double[] doubleArray53 = empiricalDistributionImpl41.getUpperBounds();
        empiricalDistributionImpl13.load(doubleArray53);
        boolean boolean55 = empiricalDistributionImpl13.isLoaded();
        double[] doubleArray56 = empiricalDistributionImpl13.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray56);
        java.util.List list58 = empiricalDistributionImpl1.getBinStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary59 = empiricalDistributionImpl1.getSampleStats();
        double double60 = empiricalDistributionImpl1.getNextValue();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary61 = empiricalDistributionImpl1.getSampleStats();
        boolean boolean62 = empiricalDistributionImpl1.isLoaded();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(list9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(statisticalSummary11);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 35 + "'", int14 == 35);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(statisticalSummary19);
        org.junit.Assert.assertNotNull(statisticalSummary20);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 35 + "'", int25 == 35);
        org.junit.Assert.assertNull(statisticalSummary26);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 1.0]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 35 + "'", int44 == 35);
        org.junit.Assert.assertNull(statisticalSummary45);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double52 + "' != '" + 10.0d + "'", double52 == 10.0d);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 1.0]");
        org.junit.Assert.assertNotNull(list58);
        org.junit.Assert.assertNotNull(statisticalSummary59);
// flaky:         org.junit.Assert.assertTrue("'" + double60 + "' != '" + 0.9919259733571406d + "'", double60 == 0.9919259733571406d);
        org.junit.Assert.assertNotNull(statisticalSummary61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
    }

    @Test
    public void test1541() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1541");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl10 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl12 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int13 = empiricalDistributionImpl12.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary14 = empiricalDistributionImpl12.getSampleStats();
        double[] doubleArray18 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl12.load(doubleArray18);
        empiricalDistributionImpl10.load(doubleArray18);
        empiricalDistributionImpl1.load(doubleArray18);
        double double22 = empiricalDistributionImpl1.getNextValue();
        double double23 = empiricalDistributionImpl1.getNextValue();
        double[] doubleArray24 = empiricalDistributionImpl1.getUpperBounds();
        java.net.URL uRL25 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(uRL25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
        org.junit.Assert.assertNull(statisticalSummary14);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1.0d + "'", double22 == 1.0d);
// flaky:         org.junit.Assert.assertTrue("'" + double23 + "' != '" + 10.0d + "'", double23 == 10.0d);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 1.0]");
    }

    @Test
    public void test1542() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1542");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (short) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray8 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl3.load(doubleArray8);
        double[] doubleArray10 = empiricalDistributionImpl3.getUpperBounds();
        int int11 = empiricalDistributionImpl3.getBinCount();
        double[] doubleArray12 = empiricalDistributionImpl3.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray12);
        java.util.List list14 = empiricalDistributionImpl1.getBinStats();
        java.io.File file15 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(file15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 35 + "'", int11 == 35);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(list14);
    }

    @Test
    public void test1543() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1543");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        double double12 = empiricalDistributionImpl1.getNextValue();
        java.util.List list13 = empiricalDistributionImpl1.getBinStats();
        double double14 = empiricalDistributionImpl1.getNextValue();
        int int15 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary16 = empiricalDistributionImpl1.getSampleStats();
        boolean boolean17 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl19 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray24 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl19.load(doubleArray24);
        double[] doubleArray26 = empiricalDistributionImpl19.getUpperBounds();
        int int27 = empiricalDistributionImpl19.getBinCount();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl29 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray34 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl29.load(doubleArray34);
        double[] doubleArray36 = empiricalDistributionImpl29.getUpperBounds();
        empiricalDistributionImpl19.load(doubleArray36);
        double[] doubleArray38 = empiricalDistributionImpl19.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray38);
        java.util.List list40 = empiricalDistributionImpl1.getBinStats();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double12 + "' != '" + 1.0d + "'", double12 == 1.0d);
        org.junit.Assert.assertNotNull(list13);
// flaky:         org.junit.Assert.assertTrue("'" + double14 + "' != '" + 32.0d + "'", double14 == 32.0d);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 100 + "'", int15 == 100);
        org.junit.Assert.assertNotNull(statisticalSummary16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 35 + "'", int27 == 35);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.9714285714285715, 0.9714285714285715, 0.9714285714285715, 0.9714285714285715, 0.9714285714285715, 0.9714285714285715, 0.9714285714285715, 0.9714285714285715, 0.9714285714285715, 0.9714285714285715, 0.9714285714285715, 1.0]");
        org.junit.Assert.assertNotNull(list40);
    }

    @Test
    public void test1544() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1544");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        int int9 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray10 = empiricalDistributionImpl1.getUpperBounds();
        int int11 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl13 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (short) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl15 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray20 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl15.load(doubleArray20);
        double[] doubleArray22 = empiricalDistributionImpl15.getUpperBounds();
        int int23 = empiricalDistributionImpl15.getBinCount();
        double[] doubleArray24 = empiricalDistributionImpl15.getUpperBounds();
        empiricalDistributionImpl13.load(doubleArray24);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl27 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl29 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray34 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl29.load(doubleArray34);
        double[] doubleArray36 = empiricalDistributionImpl29.getUpperBounds();
        empiricalDistributionImpl27.load(doubleArray36);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl39 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int40 = empiricalDistributionImpl39.getBinCount();
        double[] doubleArray42 = new double[] { 100.0d };
        empiricalDistributionImpl39.load(doubleArray42);
        empiricalDistributionImpl27.load(doubleArray42);
        double[] doubleArray45 = empiricalDistributionImpl27.getUpperBounds();
        empiricalDistributionImpl13.load(doubleArray45);
        empiricalDistributionImpl1.load(doubleArray45);
        int int48 = empiricalDistributionImpl1.getBinCount();
        double double49 = empiricalDistributionImpl1.getNextValue();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 35 + "'", int11 == 35);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 35 + "'", int23 == 35);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 35 + "'", int40 == 35);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[100.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 35 + "'", int48 == 35);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 1.0d + "'", double49 == 1.0d);
    }

    @Test
    public void test1545() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1545");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl10 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl12 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int13 = empiricalDistributionImpl12.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary14 = empiricalDistributionImpl12.getSampleStats();
        double[] doubleArray18 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl12.load(doubleArray18);
        empiricalDistributionImpl10.load(doubleArray18);
        empiricalDistributionImpl1.load(doubleArray18);
        double double22 = empiricalDistributionImpl1.getNextValue();
        java.util.List list23 = empiricalDistributionImpl1.getBinStats();
        int int24 = empiricalDistributionImpl1.getBinCount();
        java.util.List list25 = empiricalDistributionImpl1.getBinStats();
        boolean boolean26 = empiricalDistributionImpl1.isLoaded();
        java.util.List list27 = empiricalDistributionImpl1.getBinStats();
        boolean boolean28 = empiricalDistributionImpl1.isLoaded();
        double double29 = empiricalDistributionImpl1.getNextValue();
        java.io.File file30 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(file30);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
        org.junit.Assert.assertNull(statisticalSummary14);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double22 + "' != '" + 32.0d + "'", double22 == 32.0d);
        org.junit.Assert.assertNotNull(list23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 35 + "'", int24 == 35);
        org.junit.Assert.assertNotNull(list25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(list27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
// flaky:         org.junit.Assert.assertTrue("'" + double29 + "' != '" + 32.0d + "'", double29 == 32.0d);
    }

    @Test
    public void test1546() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1546");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary9 = empiricalDistributionImpl1.getSampleStats();
        boolean boolean10 = empiricalDistributionImpl1.isLoaded();
        java.util.List list11 = empiricalDistributionImpl1.getBinStats();
        boolean boolean12 = empiricalDistributionImpl1.isLoaded();
        int int13 = empiricalDistributionImpl1.getBinCount();
        java.util.List list14 = empiricalDistributionImpl1.getBinStats();
        double[] doubleArray15 = empiricalDistributionImpl1.getUpperBounds();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary16 = empiricalDistributionImpl1.getSampleStats();
        double double17 = empiricalDistributionImpl1.getNextValue();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(statisticalSummary9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(list11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
        org.junit.Assert.assertNotNull(list14);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(statisticalSummary16);
// flaky:         org.junit.Assert.assertTrue("'" + double17 + "' != '" + 10.0d + "'", double17 == 10.0d);
    }

    @Test
    public void test1547() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1547");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int2 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray4 = new double[] { 100.0d };
        empiricalDistributionImpl1.load(doubleArray4);
        boolean boolean6 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary7 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary8 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl10 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl12 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int13 = empiricalDistributionImpl12.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary14 = empiricalDistributionImpl12.getSampleStats();
        double[] doubleArray18 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl12.load(doubleArray18);
        empiricalDistributionImpl10.load(doubleArray18);
        double[] doubleArray24 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl10.load(doubleArray24);
        empiricalDistributionImpl1.load(doubleArray24);
        double[] doubleArray27 = empiricalDistributionImpl1.getUpperBounds();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl29 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl31 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int32 = empiricalDistributionImpl31.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary33 = empiricalDistributionImpl31.getSampleStats();
        double[] doubleArray37 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl31.load(doubleArray37);
        empiricalDistributionImpl29.load(doubleArray37);
        double double40 = empiricalDistributionImpl29.getNextValue();
        double[] doubleArray41 = empiricalDistributionImpl29.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray41);
        double[] doubleArray43 = empiricalDistributionImpl1.getUpperBounds();
        double[] doubleArray44 = empiricalDistributionImpl1.getUpperBounds();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary45 = empiricalDistributionImpl1.getSampleStats();
        java.net.URL uRL46 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(uRL46);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 35 + "'", int2 == 35);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(statisticalSummary7);
        org.junit.Assert.assertNotNull(statisticalSummary8);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
        org.junit.Assert.assertNull(statisticalSummary14);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 1.0]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 35 + "'", int32 == 35);
        org.junit.Assert.assertNull(statisticalSummary33);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double40 + "' != '" + 32.0d + "'", double40 == 32.0d);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 1.0]");
        org.junit.Assert.assertNotNull(statisticalSummary45);
    }

    @Test
    public void test1548() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1548");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) ' ');
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary2 = empiricalDistributionImpl1.getSampleStats();
        int int3 = empiricalDistributionImpl1.getBinCount();
        int int4 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl1.getSampleStats();
        boolean boolean6 = empiricalDistributionImpl1.isLoaded();
        org.junit.Assert.assertNull(statisticalSummary2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 32 + "'", int3 == 32);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 32 + "'", int4 == 32);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test1549() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1549");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        int int9 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl11 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray16 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl11.load(doubleArray16);
        double[] doubleArray18 = empiricalDistributionImpl11.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray18);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary20 = empiricalDistributionImpl1.getSampleStats();
        java.lang.Class<?> wildcardClass21 = empiricalDistributionImpl1.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(statisticalSummary20);
        org.junit.Assert.assertNotNull(wildcardClass21);
    }

    @Test
    public void test1550() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1550");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        double[] doubleArray15 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl1.load(doubleArray15);
        double[] doubleArray17 = empiricalDistributionImpl1.getUpperBounds();
        double double18 = empiricalDistributionImpl1.getNextValue();
        boolean boolean19 = empiricalDistributionImpl1.isLoaded();
        double[] doubleArray20 = empiricalDistributionImpl1.getUpperBounds();
        double double21 = empiricalDistributionImpl1.getNextValue();
        double[] doubleArray22 = empiricalDistributionImpl1.getUpperBounds();
        java.util.List list23 = empiricalDistributionImpl1.getBinStats();
        java.util.List list24 = empiricalDistributionImpl1.getBinStats();
        double[] doubleArray25 = empiricalDistributionImpl1.getUpperBounds();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double18 + "' != '" + 2.0661909527429154d + "'", double18 == 2.0661909527429154d);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double21 + "' != '" + (-0.39472829424726613d) + "'", double21 == (-0.39472829424726613d));
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0]");
        org.junit.Assert.assertNotNull(list23);
        org.junit.Assert.assertNotNull(list24);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0]");
    }

    @Test
    public void test1551() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1551");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        java.util.List list9 = empiricalDistributionImpl1.getBinStats();
        boolean boolean10 = empiricalDistributionImpl1.isLoaded();
        java.util.List list11 = empiricalDistributionImpl1.getBinStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary12 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary13 = empiricalDistributionImpl1.getSampleStats();
        int int14 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary15 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary16 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl18 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int19 = empiricalDistributionImpl18.getBinCount();
        double[] doubleArray21 = new double[] { 100.0d };
        empiricalDistributionImpl18.load(doubleArray21);
        boolean boolean23 = empiricalDistributionImpl18.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary24 = empiricalDistributionImpl18.getSampleStats();
        boolean boolean25 = empiricalDistributionImpl18.isLoaded();
        boolean boolean26 = empiricalDistributionImpl18.isLoaded();
        double double27 = empiricalDistributionImpl18.getNextValue();
        boolean boolean28 = empiricalDistributionImpl18.isLoaded();
        boolean boolean29 = empiricalDistributionImpl18.isLoaded();
        double[] doubleArray30 = empiricalDistributionImpl18.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray30);
        boolean boolean32 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary33 = empiricalDistributionImpl1.getSampleStats();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(list9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(list11);
        org.junit.Assert.assertNotNull(statisticalSummary12);
        org.junit.Assert.assertNotNull(statisticalSummary13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 35 + "'", int14 == 35);
        org.junit.Assert.assertNotNull(statisticalSummary15);
        org.junit.Assert.assertNotNull(statisticalSummary16);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 35 + "'", int19 == 35);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(statisticalSummary24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 100.0d + "'", double27 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(statisticalSummary33);
    }

    @Test
    public void test1552() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1552");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int2 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray4 = new double[] { 100.0d };
        empiricalDistributionImpl1.load(doubleArray4);
        boolean boolean6 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary7 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary8 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl10 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl12 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int13 = empiricalDistributionImpl12.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary14 = empiricalDistributionImpl12.getSampleStats();
        double[] doubleArray18 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl12.load(doubleArray18);
        empiricalDistributionImpl10.load(doubleArray18);
        double[] doubleArray24 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl10.load(doubleArray24);
        empiricalDistributionImpl1.load(doubleArray24);
        double[] doubleArray27 = empiricalDistributionImpl1.getUpperBounds();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl29 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl31 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int32 = empiricalDistributionImpl31.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary33 = empiricalDistributionImpl31.getSampleStats();
        double[] doubleArray37 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl31.load(doubleArray37);
        empiricalDistributionImpl29.load(doubleArray37);
        empiricalDistributionImpl1.load(doubleArray37);
        int int41 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary42 = empiricalDistributionImpl1.getSampleStats();
        double double43 = empiricalDistributionImpl1.getNextValue();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary44 = empiricalDistributionImpl1.getSampleStats();
        int int45 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary46 = empiricalDistributionImpl1.getSampleStats();
        double[] doubleArray47 = empiricalDistributionImpl1.getUpperBounds();
        double[] doubleArray48 = empiricalDistributionImpl1.getUpperBounds();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 35 + "'", int2 == 35);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(statisticalSummary7);
        org.junit.Assert.assertNotNull(statisticalSummary8);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
        org.junit.Assert.assertNull(statisticalSummary14);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 1.0]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 35 + "'", int32 == 35);
        org.junit.Assert.assertNull(statisticalSummary33);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 35 + "'", int41 == 35);
        org.junit.Assert.assertNotNull(statisticalSummary42);
// flaky:         org.junit.Assert.assertTrue("'" + double43 + "' != '" + 10.0d + "'", double43 == 10.0d);
        org.junit.Assert.assertNotNull(statisticalSummary44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 35 + "'", int45 == 35);
        org.junit.Assert.assertNotNull(statisticalSummary46);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 1.0]");
    }

    @Test
    public void test1553() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1553");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        double double12 = empiricalDistributionImpl1.getNextValue();
        java.util.List list13 = empiricalDistributionImpl1.getBinStats();
        double double14 = empiricalDistributionImpl1.getNextValue();
        int int15 = empiricalDistributionImpl1.getBinCount();
        boolean boolean16 = empiricalDistributionImpl1.isLoaded();
        java.util.List list17 = empiricalDistributionImpl1.getBinStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary18 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary19 = empiricalDistributionImpl1.getSampleStats();
        java.util.List list20 = empiricalDistributionImpl1.getBinStats();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double12 + "' != '" + 32.0d + "'", double12 == 32.0d);
        org.junit.Assert.assertNotNull(list13);
// flaky:         org.junit.Assert.assertTrue("'" + double14 + "' != '" + 10.0d + "'", double14 == 10.0d);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 100 + "'", int15 == 100);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(list17);
        org.junit.Assert.assertNotNull(statisticalSummary18);
        org.junit.Assert.assertNotNull(statisticalSummary19);
        org.junit.Assert.assertNotNull(list20);
    }

    @Test
    public void test1554() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1554");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl10 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl12 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int13 = empiricalDistributionImpl12.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary14 = empiricalDistributionImpl12.getSampleStats();
        double[] doubleArray18 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl12.load(doubleArray18);
        empiricalDistributionImpl10.load(doubleArray18);
        empiricalDistributionImpl1.load(doubleArray18);
        double double22 = empiricalDistributionImpl1.getNextValue();
        double double23 = empiricalDistributionImpl1.getNextValue();
        int int24 = empiricalDistributionImpl1.getBinCount();
        boolean boolean25 = empiricalDistributionImpl1.isLoaded();
        java.net.URL uRL26 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(uRL26);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
        org.junit.Assert.assertNull(statisticalSummary14);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double22 + "' != '" + 32.0d + "'", double22 == 32.0d);
// flaky:         org.junit.Assert.assertTrue("'" + double23 + "' != '" + 1.0d + "'", double23 == 1.0d);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 35 + "'", int24 == 35);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
    }

    @Test
    public void test1555() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1555");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        double[] doubleArray15 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl1.load(doubleArray15);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary17 = empiricalDistributionImpl1.getSampleStats();
        int int18 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray19 = empiricalDistributionImpl1.getUpperBounds();
        double double20 = empiricalDistributionImpl1.getNextValue();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(statisticalSummary17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.07348724254214072d + "'", double20 == 0.07348724254214072d);
    }

    @Test
    public void test1556() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1556");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        boolean boolean2 = empiricalDistributionImpl1.isLoaded();
        int int3 = empiricalDistributionImpl1.getBinCount();
        boolean boolean4 = empiricalDistributionImpl1.isLoaded();
        java.util.List list5 = empiricalDistributionImpl1.getBinStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl7 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl9 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int10 = empiricalDistributionImpl9.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary11 = empiricalDistributionImpl9.getSampleStats();
        double[] doubleArray15 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl9.load(doubleArray15);
        empiricalDistributionImpl7.load(doubleArray15);
        double[] doubleArray21 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl7.load(doubleArray21);
        empiricalDistributionImpl1.load(doubleArray21);
        boolean boolean24 = empiricalDistributionImpl1.isLoaded();
        int int25 = empiricalDistributionImpl1.getBinCount();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 35 + "'", int3 == 35);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(list5);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 35 + "'", int10 == 35);
        org.junit.Assert.assertNull(statisticalSummary11);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 35 + "'", int25 == 35);
    }

    @Test
    public void test1557() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1557");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double double8 = empiricalDistributionImpl1.getNextValue();
        double double9 = empiricalDistributionImpl1.getNextValue();
        java.lang.Class<?> wildcardClass10 = empiricalDistributionImpl1.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double8 + "' != '" + 10.0d + "'", double8 == 10.0d);
// flaky:         org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test1558() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1558");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl(10);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        double[] doubleArray6 = new double[] { 100.0d };
        empiricalDistributionImpl3.load(doubleArray6);
        boolean boolean8 = empiricalDistributionImpl3.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary9 = empiricalDistributionImpl3.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary10 = empiricalDistributionImpl3.getSampleStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl12 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl14 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int15 = empiricalDistributionImpl14.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary16 = empiricalDistributionImpl14.getSampleStats();
        double[] doubleArray20 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl14.load(doubleArray20);
        empiricalDistributionImpl12.load(doubleArray20);
        double[] doubleArray26 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl12.load(doubleArray26);
        empiricalDistributionImpl3.load(doubleArray26);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl30 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl32 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int33 = empiricalDistributionImpl32.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary34 = empiricalDistributionImpl32.getSampleStats();
        double[] doubleArray38 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl32.load(doubleArray38);
        empiricalDistributionImpl30.load(doubleArray38);
        empiricalDistributionImpl3.load(doubleArray38);
        empiricalDistributionImpl1.load(doubleArray38);
        int int43 = empiricalDistributionImpl1.getBinCount();
        double double44 = empiricalDistributionImpl1.getNextValue();
        java.net.URL uRL45 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(uRL45);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(statisticalSummary9);
        org.junit.Assert.assertNotNull(statisticalSummary10);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 35 + "'", int15 == 35);
        org.junit.Assert.assertNull(statisticalSummary16);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 35 + "'", int33 == 35);
        org.junit.Assert.assertNull(statisticalSummary34);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 10 + "'", int43 == 10);
// flaky:         org.junit.Assert.assertTrue("'" + double44 + "' != '" + 32.0d + "'", double44 == 32.0d);
    }

    @Test
    public void test1559() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1559");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray8 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl3.load(doubleArray8);
        double[] doubleArray10 = empiricalDistributionImpl3.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray10);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl13 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int14 = empiricalDistributionImpl13.getBinCount();
        double[] doubleArray16 = new double[] { 100.0d };
        empiricalDistributionImpl13.load(doubleArray16);
        empiricalDistributionImpl1.load(doubleArray16);
        double[] doubleArray19 = empiricalDistributionImpl1.getUpperBounds();
        double double20 = empiricalDistributionImpl1.getNextValue();
        double double21 = empiricalDistributionImpl1.getNextValue();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl23 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int24 = empiricalDistributionImpl23.getBinCount();
        double[] doubleArray26 = new double[] { 100.0d };
        empiricalDistributionImpl23.load(doubleArray26);
        boolean boolean28 = empiricalDistributionImpl23.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary29 = empiricalDistributionImpl23.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary30 = empiricalDistributionImpl23.getSampleStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl32 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl34 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int35 = empiricalDistributionImpl34.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary36 = empiricalDistributionImpl34.getSampleStats();
        double[] doubleArray40 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl34.load(doubleArray40);
        empiricalDistributionImpl32.load(doubleArray40);
        double[] doubleArray46 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl32.load(doubleArray46);
        empiricalDistributionImpl23.load(doubleArray46);
        double[] doubleArray49 = empiricalDistributionImpl23.getUpperBounds();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl51 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl53 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int54 = empiricalDistributionImpl53.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary55 = empiricalDistributionImpl53.getSampleStats();
        double[] doubleArray59 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl53.load(doubleArray59);
        empiricalDistributionImpl51.load(doubleArray59);
        double double62 = empiricalDistributionImpl51.getNextValue();
        double[] doubleArray63 = empiricalDistributionImpl51.getUpperBounds();
        empiricalDistributionImpl23.load(doubleArray63);
        double[] doubleArray65 = empiricalDistributionImpl23.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray65);
        double[] doubleArray67 = empiricalDistributionImpl1.getUpperBounds();
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 35 + "'", int14 == 35);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[100.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 100.0d + "'", double20 == 100.0d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 100.0d + "'", double21 == 100.0d);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 35 + "'", int24 == 35);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(statisticalSummary29);
        org.junit.Assert.assertNotNull(statisticalSummary30);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 35 + "'", int35 == 35);
        org.junit.Assert.assertNull(statisticalSummary36);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 1.0]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 35 + "'", int54 == 35);
        org.junit.Assert.assertNull(statisticalSummary55);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double62 + "' != '" + 1.0d + "'", double62 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[0.4857142857142857, 0.4857142857142857, 0.4857142857142857, 0.4857142857142857, 0.4857142857142857, 0.4857142857142857, 0.4857142857142857, 0.4857142857142857, 0.4857142857142857, 0.4857142857142857, 0.4857142857142857, 0.4857142857142857, 0.4857142857142857, 0.4857142857142857, 0.4857142857142857, 0.4857142857142857, 0.4857142857142857, 0.4857142857142857, 0.4857142857142857, 0.4857142857142857, 0.4857142857142857, 0.4857142857142857, 0.4857142857142857, 0.4857142857142857, 0.4857142857142857, 0.4857142857142857, 0.4857142857142857, 0.4857142857142857, 0.4857142857142857, 0.4857142857142857, 0.4857142857142857, 0.4857142857142857, 0.4857142857142857, 0.4857142857142857, 1.0]");
    }

    @Test
    public void test1560() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1560");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        double[] doubleArray15 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl1.load(doubleArray15);
        double[] doubleArray17 = empiricalDistributionImpl1.getUpperBounds();
        double double18 = empiricalDistributionImpl1.getNextValue();
        boolean boolean19 = empiricalDistributionImpl1.isLoaded();
        int int20 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary21 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary22 = empiricalDistributionImpl1.getSampleStats();
        boolean boolean23 = empiricalDistributionImpl1.isLoaded();
        boolean boolean24 = empiricalDistributionImpl1.isLoaded();
        double[] doubleArray25 = empiricalDistributionImpl1.getUpperBounds();
        boolean boolean26 = empiricalDistributionImpl1.isLoaded();
        int int27 = empiricalDistributionImpl1.getBinCount();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.6155876484830916d + "'", double18 == 0.6155876484830916d);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(statisticalSummary21);
        org.junit.Assert.assertNotNull(statisticalSummary22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0]");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
    }

    @Test
    public void test1561() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1561");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int2 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray4 = new double[] { 100.0d };
        empiricalDistributionImpl1.load(doubleArray4);
        boolean boolean6 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary7 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary8 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary9 = empiricalDistributionImpl1.getSampleStats();
        java.util.List list10 = empiricalDistributionImpl1.getBinStats();
        java.util.List list11 = empiricalDistributionImpl1.getBinStats();
        java.net.URL uRL12 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(uRL12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 35 + "'", int2 == 35);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(statisticalSummary7);
        org.junit.Assert.assertNotNull(statisticalSummary8);
        org.junit.Assert.assertNotNull(statisticalSummary9);
        org.junit.Assert.assertNotNull(list10);
        org.junit.Assert.assertNotNull(list11);
    }

    @Test
    public void test1562() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1562");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int2 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray4 = new double[] { 100.0d };
        empiricalDistributionImpl1.load(doubleArray4);
        boolean boolean6 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary7 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary8 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary9 = empiricalDistributionImpl1.getSampleStats();
        double[] doubleArray10 = empiricalDistributionImpl1.getUpperBounds();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl12 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl14 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int15 = empiricalDistributionImpl14.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary16 = empiricalDistributionImpl14.getSampleStats();
        double[] doubleArray20 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl14.load(doubleArray20);
        empiricalDistributionImpl12.load(doubleArray20);
        double[] doubleArray26 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl12.load(doubleArray26);
        double double28 = empiricalDistributionImpl12.getNextValue();
        int int29 = empiricalDistributionImpl12.getBinCount();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl31 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        boolean boolean32 = empiricalDistributionImpl31.isLoaded();
        boolean boolean33 = empiricalDistributionImpl31.isLoaded();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl35 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl37 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int38 = empiricalDistributionImpl37.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary39 = empiricalDistributionImpl37.getSampleStats();
        double[] doubleArray43 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl37.load(doubleArray43);
        empiricalDistributionImpl35.load(doubleArray43);
        double[] doubleArray49 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl35.load(doubleArray49);
        empiricalDistributionImpl31.load(doubleArray49);
        empiricalDistributionImpl12.load(doubleArray49);
        empiricalDistributionImpl1.load(doubleArray49);
        double[] doubleArray54 = empiricalDistributionImpl1.getUpperBounds();
        double double55 = empiricalDistributionImpl1.getNextValue();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 35 + "'", int2 == 35);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(statisticalSummary7);
        org.junit.Assert.assertNotNull(statisticalSummary8);
        org.junit.Assert.assertNotNull(statisticalSummary9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 35 + "'", int15 == 35);
        org.junit.Assert.assertNull(statisticalSummary16);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[-1.0, 0.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double28 + "' != '" + (-0.01749974373730167d) + "'", double28 == (-0.01749974373730167d));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 35 + "'", int38 == 35);
        org.junit.Assert.assertNull(statisticalSummary39);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double55 + "' != '" + 1.0d + "'", double55 == 1.0d);
    }

    @Test
    public void test1563() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1563");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        double[] doubleArray15 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl1.load(doubleArray15);
        double[] doubleArray17 = empiricalDistributionImpl1.getUpperBounds();
        double double18 = empiricalDistributionImpl1.getNextValue();
        boolean boolean19 = empiricalDistributionImpl1.isLoaded();
        double[] doubleArray20 = empiricalDistributionImpl1.getUpperBounds();
        int int21 = empiricalDistributionImpl1.getBinCount();
        double double22 = empiricalDistributionImpl1.getNextValue();
        java.io.File file23 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(file23);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double18 + "' != '" + (-0.13031423845555262d) + "'", double18 == (-0.13031423845555262d));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
// flaky:         org.junit.Assert.assertTrue("'" + double22 + "' != '" + (-0.7003414733482967d) + "'", double22 == (-0.7003414733482967d));
    }

    @Test
    public void test1564() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1564");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl10 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl12 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int13 = empiricalDistributionImpl12.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary14 = empiricalDistributionImpl12.getSampleStats();
        double[] doubleArray18 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl12.load(doubleArray18);
        empiricalDistributionImpl10.load(doubleArray18);
        empiricalDistributionImpl1.load(doubleArray18);
        double double22 = empiricalDistributionImpl1.getNextValue();
        double double23 = empiricalDistributionImpl1.getNextValue();
        double[] doubleArray24 = empiricalDistributionImpl1.getUpperBounds();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary25 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary26 = empiricalDistributionImpl1.getSampleStats();
        double[] doubleArray27 = empiricalDistributionImpl1.getUpperBounds();
        java.util.List list28 = empiricalDistributionImpl1.getBinStats();
        double[] doubleArray29 = empiricalDistributionImpl1.getUpperBounds();
        java.lang.Class<?> wildcardClass30 = doubleArray29.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
        org.junit.Assert.assertNull(statisticalSummary14);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1.0d + "'", double22 == 1.0d);
// flaky:         org.junit.Assert.assertTrue("'" + double23 + "' != '" + 32.0d + "'", double23 == 32.0d);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 1.0]");
        org.junit.Assert.assertNotNull(statisticalSummary25);
        org.junit.Assert.assertNotNull(statisticalSummary26);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 1.0]");
        org.junit.Assert.assertNotNull(list28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 1.0]");
        org.junit.Assert.assertNotNull(wildcardClass30);
    }

    @Test
    public void test1565() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1565");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 100);
        int int2 = empiricalDistributionImpl1.getBinCount();
        int int3 = empiricalDistributionImpl1.getBinCount();
        java.util.List list4 = empiricalDistributionImpl1.getBinStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl6 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl8 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int9 = empiricalDistributionImpl8.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary10 = empiricalDistributionImpl8.getSampleStats();
        double[] doubleArray14 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl8.load(doubleArray14);
        empiricalDistributionImpl6.load(doubleArray14);
        double[] doubleArray20 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl6.load(doubleArray20);
        double[] doubleArray22 = empiricalDistributionImpl6.getUpperBounds();
        double double23 = empiricalDistributionImpl6.getNextValue();
        boolean boolean24 = empiricalDistributionImpl6.isLoaded();
        double[] doubleArray25 = empiricalDistributionImpl6.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray25);
        double double27 = empiricalDistributionImpl1.getNextValue();
        boolean boolean28 = empiricalDistributionImpl1.isLoaded();
        double double29 = empiricalDistributionImpl1.getNextValue();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl31 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 10);
        int int32 = empiricalDistributionImpl31.getBinCount();
        int int33 = empiricalDistributionImpl31.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary34 = empiricalDistributionImpl31.getSampleStats();
        java.util.List list35 = empiricalDistributionImpl31.getBinStats();
        boolean boolean36 = empiricalDistributionImpl31.isLoaded();
        java.util.List list37 = empiricalDistributionImpl31.getBinStats();
        int int38 = empiricalDistributionImpl31.getBinCount();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl40 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl42 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray47 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl42.load(doubleArray47);
        double[] doubleArray49 = empiricalDistributionImpl42.getUpperBounds();
        empiricalDistributionImpl40.load(doubleArray49);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl52 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int53 = empiricalDistributionImpl52.getBinCount();
        double[] doubleArray55 = new double[] { 100.0d };
        empiricalDistributionImpl52.load(doubleArray55);
        empiricalDistributionImpl40.load(doubleArray55);
        double[] doubleArray58 = empiricalDistributionImpl40.getUpperBounds();
        java.util.List list59 = empiricalDistributionImpl40.getBinStats();
        double[] doubleArray60 = empiricalDistributionImpl40.getUpperBounds();
        empiricalDistributionImpl31.load(doubleArray60);
        empiricalDistributionImpl1.load(doubleArray60);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 100 + "'", int2 == 100);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 100 + "'", int3 == 100);
        org.junit.Assert.assertNotNull(list4);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertNull(statisticalSummary10);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double23 + "' != '" + (-0.06840362939153233d) + "'", double23 == (-0.06840362939153233d));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0]");
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 1.0d + "'", double27 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 1.0d + "'", double29 == 1.0d);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 10 + "'", int32 == 10);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 10 + "'", int33 == 10);
        org.junit.Assert.assertNull(statisticalSummary34);
        org.junit.Assert.assertNotNull(list35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(list37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 10 + "'", int38 == 10);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 35 + "'", int53 == 35);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[100.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(list59);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
    }

    @Test
    public void test1566() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1566");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 100);
        int int2 = empiricalDistributionImpl1.getBinCount();
        int int3 = empiricalDistributionImpl1.getBinCount();
        java.util.List list4 = empiricalDistributionImpl1.getBinStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl1.getSampleStats();
        java.io.File file6 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(file6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 100 + "'", int2 == 100);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 100 + "'", int3 == 100);
        org.junit.Assert.assertNotNull(list4);
        org.junit.Assert.assertNull(statisticalSummary5);
    }

    @Test
    public void test1567() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1567");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        int int9 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray10 = empiricalDistributionImpl1.getUpperBounds();
        double double11 = empiricalDistributionImpl1.getNextValue();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl13 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray18 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl13.load(doubleArray18);
        double[] doubleArray20 = empiricalDistributionImpl13.getUpperBounds();
        int int21 = empiricalDistributionImpl13.getBinCount();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl23 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl25 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray30 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl25.load(doubleArray30);
        double[] doubleArray32 = empiricalDistributionImpl25.getUpperBounds();
        empiricalDistributionImpl23.load(doubleArray32);
        empiricalDistributionImpl13.load(doubleArray32);
        java.util.List list35 = empiricalDistributionImpl13.getBinStats();
        double[] doubleArray36 = empiricalDistributionImpl13.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray36);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl39 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl41 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int42 = empiricalDistributionImpl41.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary43 = empiricalDistributionImpl41.getSampleStats();
        double[] doubleArray47 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl41.load(doubleArray47);
        empiricalDistributionImpl39.load(doubleArray47);
        double[] doubleArray53 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl39.load(doubleArray53);
        double double55 = empiricalDistributionImpl39.getNextValue();
        boolean boolean56 = empiricalDistributionImpl39.isLoaded();
        boolean boolean57 = empiricalDistributionImpl39.isLoaded();
        double[] doubleArray58 = empiricalDistributionImpl39.getUpperBounds();
        java.util.List list59 = empiricalDistributionImpl39.getBinStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl61 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl63 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int64 = empiricalDistributionImpl63.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary65 = empiricalDistributionImpl63.getSampleStats();
        double[] doubleArray69 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl63.load(doubleArray69);
        empiricalDistributionImpl61.load(doubleArray69);
        boolean boolean72 = empiricalDistributionImpl61.isLoaded();
        boolean boolean73 = empiricalDistributionImpl61.isLoaded();
        double[] doubleArray74 = empiricalDistributionImpl61.getUpperBounds();
        empiricalDistributionImpl39.load(doubleArray74);
        empiricalDistributionImpl1.load(doubleArray74);
        int int77 = empiricalDistributionImpl1.getBinCount();
        java.util.List list78 = empiricalDistributionImpl1.getBinStats();
        java.util.List list79 = empiricalDistributionImpl1.getBinStats();
        java.io.File file80 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(file80);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double11 + "' != '" + 10.0d + "'", double11 == 10.0d);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 35 + "'", int21 == 35);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(list35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.9714285714285715, 0.9714285714285715, 0.9714285714285715, 0.9714285714285715, 0.9714285714285715, 0.9714285714285715, 0.9714285714285715, 0.9714285714285715, 0.9714285714285715, 0.9714285714285715, 0.9714285714285715, 1.0]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 35 + "'", int42 == 35);
        org.junit.Assert.assertNull(statisticalSummary43);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[-1.0, 0.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double55 + "' != '" + (-0.5339641887383663d) + "'", double55 == (-0.5339641887383663d));
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0]");
        org.junit.Assert.assertNotNull(list59);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 35 + "'", int64 == 35);
        org.junit.Assert.assertNull(statisticalSummary65);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[1.0]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 35 + "'", int77 == 35);
        org.junit.Assert.assertNotNull(list78);
        org.junit.Assert.assertNotNull(list79);
    }

    @Test
    public void test1568() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1568");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray8 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl3.load(doubleArray8);
        double[] doubleArray10 = empiricalDistributionImpl3.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray10);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl13 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int14 = empiricalDistributionImpl13.getBinCount();
        double[] doubleArray16 = new double[] { 100.0d };
        empiricalDistributionImpl13.load(doubleArray16);
        empiricalDistributionImpl1.load(doubleArray16);
        double[] doubleArray19 = empiricalDistributionImpl1.getUpperBounds();
        double double20 = empiricalDistributionImpl1.getNextValue();
        double double21 = empiricalDistributionImpl1.getNextValue();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl23 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int24 = empiricalDistributionImpl23.getBinCount();
        double[] doubleArray26 = new double[] { 100.0d };
        empiricalDistributionImpl23.load(doubleArray26);
        boolean boolean28 = empiricalDistributionImpl23.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary29 = empiricalDistributionImpl23.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary30 = empiricalDistributionImpl23.getSampleStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl32 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl34 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int35 = empiricalDistributionImpl34.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary36 = empiricalDistributionImpl34.getSampleStats();
        double[] doubleArray40 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl34.load(doubleArray40);
        empiricalDistributionImpl32.load(doubleArray40);
        double[] doubleArray46 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl32.load(doubleArray46);
        empiricalDistributionImpl23.load(doubleArray46);
        double[] doubleArray49 = empiricalDistributionImpl23.getUpperBounds();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl51 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl53 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int54 = empiricalDistributionImpl53.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary55 = empiricalDistributionImpl53.getSampleStats();
        double[] doubleArray59 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl53.load(doubleArray59);
        empiricalDistributionImpl51.load(doubleArray59);
        double double62 = empiricalDistributionImpl51.getNextValue();
        double[] doubleArray63 = empiricalDistributionImpl51.getUpperBounds();
        empiricalDistributionImpl23.load(doubleArray63);
        double[] doubleArray65 = empiricalDistributionImpl23.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray65);
        boolean boolean67 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary68 = empiricalDistributionImpl1.getSampleStats();
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 35 + "'", int14 == 35);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[100.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 100.0d + "'", double20 == 100.0d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 100.0d + "'", double21 == 100.0d);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 35 + "'", int24 == 35);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(statisticalSummary29);
        org.junit.Assert.assertNotNull(statisticalSummary30);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 35 + "'", int35 == 35);
        org.junit.Assert.assertNull(statisticalSummary36);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 1.0]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 35 + "'", int54 == 35);
        org.junit.Assert.assertNull(statisticalSummary55);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double62 + "' != '" + 10.0d + "'", double62 == 10.0d);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(statisticalSummary68);
    }

    @Test
    public void test1569() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1569");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int2 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray4 = new double[] { 100.0d };
        empiricalDistributionImpl1.load(doubleArray4);
        boolean boolean6 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary7 = empiricalDistributionImpl1.getSampleStats();
        boolean boolean8 = empiricalDistributionImpl1.isLoaded();
        boolean boolean9 = empiricalDistributionImpl1.isLoaded();
        boolean boolean10 = empiricalDistributionImpl1.isLoaded();
        double[] doubleArray11 = empiricalDistributionImpl1.getUpperBounds();
        int int12 = empiricalDistributionImpl1.getBinCount();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 35 + "'", int2 == 35);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(statisticalSummary7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 35 + "'", int12 == 35);
    }

    @Test
    public void test1570() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1570");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl10 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl12 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int13 = empiricalDistributionImpl12.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary14 = empiricalDistributionImpl12.getSampleStats();
        double[] doubleArray18 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl12.load(doubleArray18);
        empiricalDistributionImpl10.load(doubleArray18);
        empiricalDistributionImpl1.load(doubleArray18);
        double double22 = empiricalDistributionImpl1.getNextValue();
        double double23 = empiricalDistributionImpl1.getNextValue();
        int int24 = empiricalDistributionImpl1.getBinCount();
        boolean boolean25 = empiricalDistributionImpl1.isLoaded();
        java.io.File file26 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(file26);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
        org.junit.Assert.assertNull(statisticalSummary14);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double22 + "' != '" + 32.0d + "'", double22 == 32.0d);
// flaky:         org.junit.Assert.assertTrue("'" + double23 + "' != '" + 1.0d + "'", double23 == 1.0d);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 35 + "'", int24 == 35);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
    }

    @Test
    public void test1571() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1571");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int2 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray4 = new double[] { 100.0d };
        empiricalDistributionImpl1.load(doubleArray4);
        boolean boolean6 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary7 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary8 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary9 = empiricalDistributionImpl1.getSampleStats();
        java.util.List list10 = empiricalDistributionImpl1.getBinStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl12 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 10);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl14 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray19 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl14.load(doubleArray19);
        double[] doubleArray21 = empiricalDistributionImpl14.getUpperBounds();
        int int22 = empiricalDistributionImpl14.getBinCount();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl24 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl26 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray31 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl26.load(doubleArray31);
        double[] doubleArray33 = empiricalDistributionImpl26.getUpperBounds();
        empiricalDistributionImpl24.load(doubleArray33);
        empiricalDistributionImpl14.load(doubleArray33);
        java.util.List list36 = empiricalDistributionImpl14.getBinStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl38 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int39 = empiricalDistributionImpl38.getBinCount();
        double[] doubleArray41 = new double[] { 100.0d };
        empiricalDistributionImpl38.load(doubleArray41);
        boolean boolean43 = empiricalDistributionImpl38.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary44 = empiricalDistributionImpl38.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary45 = empiricalDistributionImpl38.getSampleStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl47 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl49 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int50 = empiricalDistributionImpl49.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary51 = empiricalDistributionImpl49.getSampleStats();
        double[] doubleArray55 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl49.load(doubleArray55);
        empiricalDistributionImpl47.load(doubleArray55);
        double[] doubleArray61 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl47.load(doubleArray61);
        empiricalDistributionImpl38.load(doubleArray61);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl65 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl67 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int68 = empiricalDistributionImpl67.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary69 = empiricalDistributionImpl67.getSampleStats();
        double[] doubleArray73 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl67.load(doubleArray73);
        empiricalDistributionImpl65.load(doubleArray73);
        empiricalDistributionImpl38.load(doubleArray73);
        empiricalDistributionImpl14.load(doubleArray73);
        empiricalDistributionImpl12.load(doubleArray73);
        empiricalDistributionImpl1.load(doubleArray73);
        int int80 = empiricalDistributionImpl1.getBinCount();
        java.util.List list81 = empiricalDistributionImpl1.getBinStats();
        double[] doubleArray82 = empiricalDistributionImpl1.getUpperBounds();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 35 + "'", int2 == 35);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(statisticalSummary7);
        org.junit.Assert.assertNotNull(statisticalSummary8);
        org.junit.Assert.assertNotNull(statisticalSummary9);
        org.junit.Assert.assertNotNull(list10);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 35 + "'", int22 == 35);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(list36);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 35 + "'", int39 == 35);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(statisticalSummary44);
        org.junit.Assert.assertNotNull(statisticalSummary45);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 35 + "'", int50 == 35);
        org.junit.Assert.assertNull(statisticalSummary51);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 35 + "'", int68 == 35);
        org.junit.Assert.assertNull(statisticalSummary69);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 35 + "'", int80 == 35);
        org.junit.Assert.assertNotNull(list81);
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 1.0]");
    }

    @Test
    public void test1572() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1572");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray8 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl3.load(doubleArray8);
        double[] doubleArray10 = empiricalDistributionImpl3.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray10);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl13 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int14 = empiricalDistributionImpl13.getBinCount();
        double[] doubleArray16 = new double[] { 100.0d };
        empiricalDistributionImpl13.load(doubleArray16);
        empiricalDistributionImpl1.load(doubleArray16);
        java.util.List list19 = empiricalDistributionImpl1.getBinStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary20 = empiricalDistributionImpl1.getSampleStats();
        double double21 = empiricalDistributionImpl1.getNextValue();
        double double22 = empiricalDistributionImpl1.getNextValue();
        int int23 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray24 = empiricalDistributionImpl1.getUpperBounds();
        java.io.File file25 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(file25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 35 + "'", int14 == 35);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[100.0]");
        org.junit.Assert.assertNotNull(list19);
        org.junit.Assert.assertNotNull(statisticalSummary20);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 100.0d + "'", double21 == 100.0d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 100.0d + "'", double22 == 100.0d);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 35 + "'", int23 == 35);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
    }

    @Test
    public void test1573() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1573");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int2 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray4 = new double[] { 100.0d };
        empiricalDistributionImpl1.load(doubleArray4);
        boolean boolean6 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary7 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary8 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary9 = empiricalDistributionImpl1.getSampleStats();
        java.util.List list10 = empiricalDistributionImpl1.getBinStats();
        java.util.List list11 = empiricalDistributionImpl1.getBinStats();
        boolean boolean12 = empiricalDistributionImpl1.isLoaded();
        int int13 = empiricalDistributionImpl1.getBinCount();
        int int14 = empiricalDistributionImpl1.getBinCount();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 35 + "'", int2 == 35);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(statisticalSummary7);
        org.junit.Assert.assertNotNull(statisticalSummary8);
        org.junit.Assert.assertNotNull(statisticalSummary9);
        org.junit.Assert.assertNotNull(list10);
        org.junit.Assert.assertNotNull(list11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 35 + "'", int14 == 35);
    }

    @Test
    public void test1574() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1574");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        double double12 = empiricalDistributionImpl1.getNextValue();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl14 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl16 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int17 = empiricalDistributionImpl16.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary18 = empiricalDistributionImpl16.getSampleStats();
        double[] doubleArray22 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl16.load(doubleArray22);
        empiricalDistributionImpl14.load(doubleArray22);
        double double25 = empiricalDistributionImpl14.getNextValue();
        double[] doubleArray26 = empiricalDistributionImpl14.getUpperBounds();
        double[] doubleArray27 = empiricalDistributionImpl14.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray27);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary29 = empiricalDistributionImpl1.getSampleStats();
        double double30 = empiricalDistributionImpl1.getNextValue();
        double double31 = empiricalDistributionImpl1.getNextValue();
        java.util.List list32 = empiricalDistributionImpl1.getBinStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary33 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary34 = empiricalDistributionImpl1.getSampleStats();
        int int35 = empiricalDistributionImpl1.getBinCount();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 35 + "'", int17 == 35);
        org.junit.Assert.assertNull(statisticalSummary18);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double25 + "' != '" + 1.0d + "'", double25 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertNotNull(statisticalSummary29);
// flaky:         org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.3333333333333333d + "'", double30 == 0.3333333333333333d);
// flaky:         org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.6666666666666666d + "'", double31 == 0.6666666666666666d);
        org.junit.Assert.assertNotNull(list32);
        org.junit.Assert.assertNotNull(statisticalSummary33);
        org.junit.Assert.assertNotNull(statisticalSummary34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 100 + "'", int35 == 100);
    }

    @Test
    public void test1575() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1575");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) ' ');
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray8 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl3.load(doubleArray8);
        double[] doubleArray10 = empiricalDistributionImpl3.getUpperBounds();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl12 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl14 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int15 = empiricalDistributionImpl14.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary16 = empiricalDistributionImpl14.getSampleStats();
        double[] doubleArray20 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl14.load(doubleArray20);
        empiricalDistributionImpl12.load(doubleArray20);
        empiricalDistributionImpl3.load(doubleArray20);
        double double24 = empiricalDistributionImpl3.getNextValue();
        java.util.List list25 = empiricalDistributionImpl3.getBinStats();
        int int26 = empiricalDistributionImpl3.getBinCount();
        java.util.List list27 = empiricalDistributionImpl3.getBinStats();
        double double28 = empiricalDistributionImpl3.getNextValue();
        double[] doubleArray29 = empiricalDistributionImpl3.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray29);
        double double31 = empiricalDistributionImpl1.getNextValue();
        double double32 = empiricalDistributionImpl1.getNextValue();
        java.util.List list33 = empiricalDistributionImpl1.getBinStats();
        java.io.File file34 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(file34);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 35 + "'", int15 == 35);
        org.junit.Assert.assertNull(statisticalSummary16);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double24 + "' != '" + 1.0d + "'", double24 == 1.0d);
        org.junit.Assert.assertNotNull(list25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 35 + "'", int26 == 35);
        org.junit.Assert.assertNotNull(list27);
// flaky:         org.junit.Assert.assertTrue("'" + double28 + "' != '" + 1.0d + "'", double28 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.6666666666666666d + "'", double31 == 0.6666666666666666d);
// flaky:         org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.6666666666666666d + "'", double32 == 0.6666666666666666d);
        org.junit.Assert.assertNotNull(list33);
    }

    @Test
    public void test1576() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1576");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl10 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl12 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int13 = empiricalDistributionImpl12.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary14 = empiricalDistributionImpl12.getSampleStats();
        double[] doubleArray18 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl12.load(doubleArray18);
        empiricalDistributionImpl10.load(doubleArray18);
        empiricalDistributionImpl1.load(doubleArray18);
        double double22 = empiricalDistributionImpl1.getNextValue();
        double double23 = empiricalDistributionImpl1.getNextValue();
        double[] doubleArray24 = empiricalDistributionImpl1.getUpperBounds();
        boolean boolean25 = empiricalDistributionImpl1.isLoaded();
        double[] doubleArray26 = empiricalDistributionImpl1.getUpperBounds();
        java.io.File file27 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(file27);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
        org.junit.Assert.assertNull(statisticalSummary14);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1.0d + "'", double22 == 1.0d);
// flaky:         org.junit.Assert.assertTrue("'" + double23 + "' != '" + 1.0d + "'", double23 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 1.0]");
    }

    @Test
    public void test1577() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1577");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (short) 100);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary2 = empiricalDistributionImpl1.getSampleStats();
        boolean boolean3 = empiricalDistributionImpl1.isLoaded();
        int int4 = empiricalDistributionImpl1.getBinCount();
        java.lang.Class<?> wildcardClass5 = empiricalDistributionImpl1.getClass();
        org.junit.Assert.assertNull(statisticalSummary2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 100 + "'", int4 == 100);
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test1578() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1578");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        java.util.List list9 = empiricalDistributionImpl1.getBinStats();
        boolean boolean10 = empiricalDistributionImpl1.isLoaded();
        double[] doubleArray11 = empiricalDistributionImpl1.getUpperBounds();
        boolean boolean12 = empiricalDistributionImpl1.isLoaded();
        int int13 = empiricalDistributionImpl1.getBinCount();
        boolean boolean14 = empiricalDistributionImpl1.isLoaded();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(list9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
    }

    @Test
    public void test1579() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1579");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        boolean boolean2 = empiricalDistributionImpl1.isLoaded();
        boolean boolean3 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl5 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl7 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int8 = empiricalDistributionImpl7.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary9 = empiricalDistributionImpl7.getSampleStats();
        double[] doubleArray13 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl7.load(doubleArray13);
        empiricalDistributionImpl5.load(doubleArray13);
        double[] doubleArray19 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl5.load(doubleArray19);
        empiricalDistributionImpl1.load(doubleArray19);
        int int22 = empiricalDistributionImpl1.getBinCount();
        java.net.URL uRL23 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(uRL23);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 35 + "'", int8 == 35);
        org.junit.Assert.assertNull(statisticalSummary9);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 35 + "'", int22 == 35);
    }

    @Test
    public void test1580() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1580");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        double double12 = empiricalDistributionImpl1.getNextValue();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl14 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl16 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int17 = empiricalDistributionImpl16.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary18 = empiricalDistributionImpl16.getSampleStats();
        double[] doubleArray22 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl16.load(doubleArray22);
        empiricalDistributionImpl14.load(doubleArray22);
        double double25 = empiricalDistributionImpl14.getNextValue();
        double[] doubleArray26 = empiricalDistributionImpl14.getUpperBounds();
        double[] doubleArray27 = empiricalDistributionImpl14.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray27);
        boolean boolean29 = empiricalDistributionImpl1.isLoaded();
        int int30 = empiricalDistributionImpl1.getBinCount();
        int int31 = empiricalDistributionImpl1.getBinCount();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double12 + "' != '" + 32.0d + "'", double12 == 32.0d);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 35 + "'", int17 == 35);
        org.junit.Assert.assertNull(statisticalSummary18);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double25 + "' != '" + 10.0d + "'", double25 == 10.0d);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 100 + "'", int30 == 100);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 100 + "'", int31 == 100);
    }

    @Test
    public void test1581() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1581");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl10 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl12 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int13 = empiricalDistributionImpl12.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary14 = empiricalDistributionImpl12.getSampleStats();
        double[] doubleArray18 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl12.load(doubleArray18);
        empiricalDistributionImpl10.load(doubleArray18);
        empiricalDistributionImpl1.load(doubleArray18);
        double double22 = empiricalDistributionImpl1.getNextValue();
        java.util.List list23 = empiricalDistributionImpl1.getBinStats();
        int int24 = empiricalDistributionImpl1.getBinCount();
        java.util.List list25 = empiricalDistributionImpl1.getBinStats();
        boolean boolean26 = empiricalDistributionImpl1.isLoaded();
        java.util.List list27 = empiricalDistributionImpl1.getBinStats();
        boolean boolean28 = empiricalDistributionImpl1.isLoaded();
        java.util.List list29 = empiricalDistributionImpl1.getBinStats();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
        org.junit.Assert.assertNull(statisticalSummary14);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double22 + "' != '" + 10.0d + "'", double22 == 10.0d);
        org.junit.Assert.assertNotNull(list23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 35 + "'", int24 == 35);
        org.junit.Assert.assertNotNull(list25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(list27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(list29);
    }

    @Test
    public void test1582() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1582");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int2 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray4 = new double[] { 100.0d };
        empiricalDistributionImpl1.load(doubleArray4);
        boolean boolean6 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary7 = empiricalDistributionImpl1.getSampleStats();
        boolean boolean8 = empiricalDistributionImpl1.isLoaded();
        int int9 = empiricalDistributionImpl1.getBinCount();
        java.util.List list10 = empiricalDistributionImpl1.getBinStats();
        int int11 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl13 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl15 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int16 = empiricalDistributionImpl15.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary17 = empiricalDistributionImpl15.getSampleStats();
        double[] doubleArray21 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl15.load(doubleArray21);
        empiricalDistributionImpl13.load(doubleArray21);
        double[] doubleArray27 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl13.load(doubleArray27);
        double double29 = empiricalDistributionImpl13.getNextValue();
        int int30 = empiricalDistributionImpl13.getBinCount();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl32 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        boolean boolean33 = empiricalDistributionImpl32.isLoaded();
        boolean boolean34 = empiricalDistributionImpl32.isLoaded();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl36 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl38 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int39 = empiricalDistributionImpl38.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary40 = empiricalDistributionImpl38.getSampleStats();
        double[] doubleArray44 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl38.load(doubleArray44);
        empiricalDistributionImpl36.load(doubleArray44);
        double[] doubleArray50 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl36.load(doubleArray50);
        empiricalDistributionImpl32.load(doubleArray50);
        empiricalDistributionImpl13.load(doubleArray50);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl55 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        boolean boolean56 = empiricalDistributionImpl55.isLoaded();
        boolean boolean57 = empiricalDistributionImpl55.isLoaded();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl59 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl61 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int62 = empiricalDistributionImpl61.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary63 = empiricalDistributionImpl61.getSampleStats();
        double[] doubleArray67 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl61.load(doubleArray67);
        empiricalDistributionImpl59.load(doubleArray67);
        double[] doubleArray73 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl59.load(doubleArray73);
        empiricalDistributionImpl55.load(doubleArray73);
        empiricalDistributionImpl13.load(doubleArray73);
        empiricalDistributionImpl1.load(doubleArray73);
        double double78 = empiricalDistributionImpl1.getNextValue();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 35 + "'", int2 == 35);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(statisticalSummary7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertNotNull(list10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 35 + "'", int11 == 35);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 35 + "'", int16 == 35);
        org.junit.Assert.assertNull(statisticalSummary17);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-1.0, 0.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double29 + "' != '" + (-0.566184819027354d) + "'", double29 == (-0.566184819027354d));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 35 + "'", int39 == 35);
        org.junit.Assert.assertNull(statisticalSummary40);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 35 + "'", int62 == 35);
        org.junit.Assert.assertNull(statisticalSummary63);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[-1.0, 0.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double78 + "' != '" + (-1.0d) + "'", double78 == (-1.0d));
    }

    @Test
    public void test1583() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1583");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        int int12 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray13 = empiricalDistributionImpl1.getUpperBounds();
        boolean boolean14 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl16 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray21 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl16.load(doubleArray21);
        double[] doubleArray23 = empiricalDistributionImpl16.getUpperBounds();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl25 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl27 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int28 = empiricalDistributionImpl27.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary29 = empiricalDistributionImpl27.getSampleStats();
        double[] doubleArray33 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl27.load(doubleArray33);
        empiricalDistributionImpl25.load(doubleArray33);
        empiricalDistributionImpl16.load(doubleArray33);
        double double37 = empiricalDistributionImpl16.getNextValue();
        java.util.List list38 = empiricalDistributionImpl16.getBinStats();
        int int39 = empiricalDistributionImpl16.getBinCount();
        java.util.List list40 = empiricalDistributionImpl16.getBinStats();
        double double41 = empiricalDistributionImpl16.getNextValue();
        double double42 = empiricalDistributionImpl16.getNextValue();
        int int43 = empiricalDistributionImpl16.getBinCount();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl45 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '4');
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary46 = empiricalDistributionImpl45.getSampleStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl48 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int49 = empiricalDistributionImpl48.getBinCount();
        double[] doubleArray51 = new double[] { 100.0d };
        empiricalDistributionImpl48.load(doubleArray51);
        boolean boolean53 = empiricalDistributionImpl48.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary54 = empiricalDistributionImpl48.getSampleStats();
        boolean boolean55 = empiricalDistributionImpl48.isLoaded();
        boolean boolean56 = empiricalDistributionImpl48.isLoaded();
        double[] doubleArray57 = empiricalDistributionImpl48.getUpperBounds();
        empiricalDistributionImpl45.load(doubleArray57);
        empiricalDistributionImpl16.load(doubleArray57);
        empiricalDistributionImpl1.load(doubleArray57);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 100 + "'", int12 == 100);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 35 + "'", int28 == 35);
        org.junit.Assert.assertNull(statisticalSummary29);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double37 + "' != '" + 32.0d + "'", double37 == 32.0d);
        org.junit.Assert.assertNotNull(list38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 35 + "'", int39 == 35);
        org.junit.Assert.assertNotNull(list40);
// flaky:         org.junit.Assert.assertTrue("'" + double41 + "' != '" + 10.0d + "'", double41 == 10.0d);
// flaky:         org.junit.Assert.assertTrue("'" + double42 + "' != '" + 10.0d + "'", double42 == 10.0d);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 35 + "'", int43 == 35);
        org.junit.Assert.assertNull(statisticalSummary46);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 35 + "'", int49 == 35);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(statisticalSummary54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
    }

    @Test
    public void test1584() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1584");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int2 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray4 = new double[] { 100.0d };
        empiricalDistributionImpl1.load(doubleArray4);
        boolean boolean6 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary7 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary8 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl10 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl12 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int13 = empiricalDistributionImpl12.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary14 = empiricalDistributionImpl12.getSampleStats();
        double[] doubleArray18 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl12.load(doubleArray18);
        empiricalDistributionImpl10.load(doubleArray18);
        double[] doubleArray24 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl10.load(doubleArray24);
        empiricalDistributionImpl1.load(doubleArray24);
        double[] doubleArray27 = empiricalDistributionImpl1.getUpperBounds();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl29 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl31 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int32 = empiricalDistributionImpl31.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary33 = empiricalDistributionImpl31.getSampleStats();
        double[] doubleArray37 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl31.load(doubleArray37);
        empiricalDistributionImpl29.load(doubleArray37);
        empiricalDistributionImpl1.load(doubleArray37);
        int int41 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray42 = empiricalDistributionImpl1.getUpperBounds();
        java.util.List list43 = empiricalDistributionImpl1.getBinStats();
        int int44 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray45 = empiricalDistributionImpl1.getUpperBounds();
        java.lang.Class<?> wildcardClass46 = empiricalDistributionImpl1.getClass();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 35 + "'", int2 == 35);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(statisticalSummary7);
        org.junit.Assert.assertNotNull(statisticalSummary8);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
        org.junit.Assert.assertNull(statisticalSummary14);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 1.0]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 35 + "'", int32 == 35);
        org.junit.Assert.assertNull(statisticalSummary33);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 35 + "'", int41 == 35);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 1.0]");
        org.junit.Assert.assertNotNull(list43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 35 + "'", int44 == 35);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 1.0]");
        org.junit.Assert.assertNotNull(wildcardClass46);
    }

    @Test
    public void test1585() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1585");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int2 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray4 = new double[] { 100.0d };
        empiricalDistributionImpl1.load(doubleArray4);
        double double6 = empiricalDistributionImpl1.getNextValue();
        double double7 = empiricalDistributionImpl1.getNextValue();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary8 = empiricalDistributionImpl1.getSampleStats();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 35 + "'", int2 == 35);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[100.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 100.0d + "'", double6 == 100.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 100.0d + "'", double7 == 100.0d);
        org.junit.Assert.assertNotNull(statisticalSummary8);
    }

    @Test
    public void test1586() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1586");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        int int9 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray10 = empiricalDistributionImpl1.getUpperBounds();
        int int11 = empiricalDistributionImpl1.getBinCount();
        java.util.List list12 = empiricalDistributionImpl1.getBinStats();
        int int13 = empiricalDistributionImpl1.getBinCount();
        double double14 = empiricalDistributionImpl1.getNextValue();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl16 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int17 = empiricalDistributionImpl16.getBinCount();
        double[] doubleArray19 = new double[] { 100.0d };
        empiricalDistributionImpl16.load(doubleArray19);
        boolean boolean21 = empiricalDistributionImpl16.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary22 = empiricalDistributionImpl16.getSampleStats();
        boolean boolean23 = empiricalDistributionImpl16.isLoaded();
        boolean boolean24 = empiricalDistributionImpl16.isLoaded();
        double[] doubleArray25 = empiricalDistributionImpl16.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray25);
        java.util.List list27 = empiricalDistributionImpl1.getBinStats();
        int int28 = empiricalDistributionImpl1.getBinCount();
        int int29 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray30 = empiricalDistributionImpl1.getUpperBounds();
        boolean boolean31 = empiricalDistributionImpl1.isLoaded();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 35 + "'", int11 == 35);
        org.junit.Assert.assertNotNull(list12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
// flaky:         org.junit.Assert.assertTrue("'" + double14 + "' != '" + 10.0d + "'", double14 == 10.0d);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 35 + "'", int17 == 35);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(statisticalSummary22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(list27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 35 + "'", int28 == 35);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 35 + "'", int29 == 35);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
    }

    @Test
    public void test1587() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1587");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int2 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray4 = new double[] { 100.0d };
        empiricalDistributionImpl1.load(doubleArray4);
        boolean boolean6 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary7 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary8 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl10 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl12 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int13 = empiricalDistributionImpl12.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary14 = empiricalDistributionImpl12.getSampleStats();
        double[] doubleArray18 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl12.load(doubleArray18);
        empiricalDistributionImpl10.load(doubleArray18);
        double[] doubleArray24 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl10.load(doubleArray24);
        empiricalDistributionImpl1.load(doubleArray24);
        double[] doubleArray27 = empiricalDistributionImpl1.getUpperBounds();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl29 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl31 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int32 = empiricalDistributionImpl31.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary33 = empiricalDistributionImpl31.getSampleStats();
        double[] doubleArray37 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl31.load(doubleArray37);
        empiricalDistributionImpl29.load(doubleArray37);
        empiricalDistributionImpl1.load(doubleArray37);
        int int41 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary42 = empiricalDistributionImpl1.getSampleStats();
        double[] doubleArray43 = empiricalDistributionImpl1.getUpperBounds();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary44 = empiricalDistributionImpl1.getSampleStats();
        double double45 = empiricalDistributionImpl1.getNextValue();
        int int46 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary47 = empiricalDistributionImpl1.getSampleStats();
        java.net.URL uRL48 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(uRL48);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 35 + "'", int2 == 35);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(statisticalSummary7);
        org.junit.Assert.assertNotNull(statisticalSummary8);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
        org.junit.Assert.assertNull(statisticalSummary14);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 1.0]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 35 + "'", int32 == 35);
        org.junit.Assert.assertNull(statisticalSummary33);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 35 + "'", int41 == 35);
        org.junit.Assert.assertNotNull(statisticalSummary42);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 1.0]");
        org.junit.Assert.assertNotNull(statisticalSummary44);
// flaky:         org.junit.Assert.assertTrue("'" + double45 + "' != '" + 1.0d + "'", double45 == 1.0d);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 35 + "'", int46 == 35);
        org.junit.Assert.assertNotNull(statisticalSummary47);
    }

    @Test
    public void test1588() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1588");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        java.util.List list9 = empiricalDistributionImpl1.getBinStats();
        boolean boolean10 = empiricalDistributionImpl1.isLoaded();
        java.util.List list11 = empiricalDistributionImpl1.getBinStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary12 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary13 = empiricalDistributionImpl1.getSampleStats();
        int int14 = empiricalDistributionImpl1.getBinCount();
        int int15 = empiricalDistributionImpl1.getBinCount();
        java.util.List list16 = empiricalDistributionImpl1.getBinStats();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(list9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(list11);
        org.junit.Assert.assertNotNull(statisticalSummary12);
        org.junit.Assert.assertNotNull(statisticalSummary13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 35 + "'", int14 == 35);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 35 + "'", int15 == 35);
        org.junit.Assert.assertNotNull(list16);
    }

    @Test
    public void test1589() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1589");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        double[] doubleArray15 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl1.load(doubleArray15);
        double double17 = empiricalDistributionImpl1.getNextValue();
        boolean boolean18 = empiricalDistributionImpl1.isLoaded();
        boolean boolean19 = empiricalDistributionImpl1.isLoaded();
        double[] doubleArray20 = empiricalDistributionImpl1.getUpperBounds();
        java.util.List list21 = empiricalDistributionImpl1.getBinStats();
        boolean boolean22 = empiricalDistributionImpl1.isLoaded();
        double double23 = empiricalDistributionImpl1.getNextValue();
        boolean boolean24 = empiricalDistributionImpl1.isLoaded();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[-1.0, 0.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.3080975647118948d + "'", double17 == 0.3080975647118948d);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0]");
        org.junit.Assert.assertNotNull(list21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
// flaky:         org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.9077898757354654d + "'", double23 == 0.9077898757354654d);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
    }

    @Test
    public void test1590() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1590");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl10 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl12 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int13 = empiricalDistributionImpl12.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary14 = empiricalDistributionImpl12.getSampleStats();
        double[] doubleArray18 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl12.load(doubleArray18);
        empiricalDistributionImpl10.load(doubleArray18);
        empiricalDistributionImpl1.load(doubleArray18);
        double double22 = empiricalDistributionImpl1.getNextValue();
        java.util.List list23 = empiricalDistributionImpl1.getBinStats();
        int int24 = empiricalDistributionImpl1.getBinCount();
        java.util.List list25 = empiricalDistributionImpl1.getBinStats();
        double double26 = empiricalDistributionImpl1.getNextValue();
        java.util.List list27 = empiricalDistributionImpl1.getBinStats();
        double[] doubleArray28 = empiricalDistributionImpl1.getUpperBounds();
        double[] doubleArray29 = empiricalDistributionImpl1.getUpperBounds();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl31 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        boolean boolean32 = empiricalDistributionImpl31.isLoaded();
        int int33 = empiricalDistributionImpl31.getBinCount();
        boolean boolean34 = empiricalDistributionImpl31.isLoaded();
        java.util.List list35 = empiricalDistributionImpl31.getBinStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl37 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl39 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int40 = empiricalDistributionImpl39.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary41 = empiricalDistributionImpl39.getSampleStats();
        double[] doubleArray45 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl39.load(doubleArray45);
        empiricalDistributionImpl37.load(doubleArray45);
        double[] doubleArray51 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl37.load(doubleArray51);
        empiricalDistributionImpl31.load(doubleArray51);
        empiricalDistributionImpl1.load(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
        org.junit.Assert.assertNull(statisticalSummary14);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double22 + "' != '" + 32.0d + "'", double22 == 32.0d);
        org.junit.Assert.assertNotNull(list23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 35 + "'", int24 == 35);
        org.junit.Assert.assertNotNull(list25);
// flaky:         org.junit.Assert.assertTrue("'" + double26 + "' != '" + 10.0d + "'", double26 == 10.0d);
        org.junit.Assert.assertNotNull(list27);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 35 + "'", int33 == 35);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(list35);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 35 + "'", int40 == 35);
        org.junit.Assert.assertNull(statisticalSummary41);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[-1.0, 0.0, 1.0]");
    }

    @Test
    public void test1591() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1591");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (short) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray8 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl3.load(doubleArray8);
        double[] doubleArray10 = empiricalDistributionImpl3.getUpperBounds();
        int int11 = empiricalDistributionImpl3.getBinCount();
        double[] doubleArray12 = empiricalDistributionImpl3.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray12);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl15 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray20 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl15.load(doubleArray20);
        double[] doubleArray22 = empiricalDistributionImpl15.getUpperBounds();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl24 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl26 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int27 = empiricalDistributionImpl26.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary28 = empiricalDistributionImpl26.getSampleStats();
        double[] doubleArray32 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl26.load(doubleArray32);
        empiricalDistributionImpl24.load(doubleArray32);
        empiricalDistributionImpl15.load(doubleArray32);
        double double36 = empiricalDistributionImpl15.getNextValue();
        java.util.List list37 = empiricalDistributionImpl15.getBinStats();
        java.util.List list38 = empiricalDistributionImpl15.getBinStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl40 = new org.apache.commons.math.random.EmpiricalDistributionImpl(10);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl42 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int43 = empiricalDistributionImpl42.getBinCount();
        double[] doubleArray45 = new double[] { 100.0d };
        empiricalDistributionImpl42.load(doubleArray45);
        boolean boolean47 = empiricalDistributionImpl42.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary48 = empiricalDistributionImpl42.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary49 = empiricalDistributionImpl42.getSampleStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl51 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl53 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int54 = empiricalDistributionImpl53.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary55 = empiricalDistributionImpl53.getSampleStats();
        double[] doubleArray59 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl53.load(doubleArray59);
        empiricalDistributionImpl51.load(doubleArray59);
        double[] doubleArray65 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl51.load(doubleArray65);
        empiricalDistributionImpl42.load(doubleArray65);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl69 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl71 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int72 = empiricalDistributionImpl71.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary73 = empiricalDistributionImpl71.getSampleStats();
        double[] doubleArray77 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl71.load(doubleArray77);
        empiricalDistributionImpl69.load(doubleArray77);
        empiricalDistributionImpl42.load(doubleArray77);
        empiricalDistributionImpl40.load(doubleArray77);
        double[] doubleArray82 = empiricalDistributionImpl40.getUpperBounds();
        empiricalDistributionImpl15.load(doubleArray82);
        empiricalDistributionImpl1.load(doubleArray82);
        boolean boolean85 = empiricalDistributionImpl1.isLoaded();
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 35 + "'", int11 == 35);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 35 + "'", int27 == 35);
        org.junit.Assert.assertNull(statisticalSummary28);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double36 + "' != '" + 10.0d + "'", double36 == 10.0d);
        org.junit.Assert.assertNotNull(list37);
        org.junit.Assert.assertNotNull(list38);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 35 + "'", int43 == 35);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(statisticalSummary48);
        org.junit.Assert.assertNotNull(statisticalSummary49);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 35 + "'", int54 == 35);
        org.junit.Assert.assertNull(statisticalSummary55);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 35 + "'", int72 == 35);
        org.junit.Assert.assertNull(statisticalSummary73);
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[0.3333333333333333, 0.3333333333333333, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
    }

    @Test
    public void test1592() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1592");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int2 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray4 = new double[] { 100.0d };
        empiricalDistributionImpl1.load(doubleArray4);
        boolean boolean6 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary7 = empiricalDistributionImpl1.getSampleStats();
        boolean boolean8 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary9 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary10 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl12 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl14 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int15 = empiricalDistributionImpl14.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary16 = empiricalDistributionImpl14.getSampleStats();
        double[] doubleArray20 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl14.load(doubleArray20);
        empiricalDistributionImpl12.load(doubleArray20);
        double[] doubleArray26 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl12.load(doubleArray26);
        empiricalDistributionImpl1.load(doubleArray26);
        java.net.URL uRL29 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(uRL29);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 35 + "'", int2 == 35);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(statisticalSummary7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(statisticalSummary9);
        org.junit.Assert.assertNotNull(statisticalSummary10);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 35 + "'", int15 == 35);
        org.junit.Assert.assertNull(statisticalSummary16);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[-1.0, 0.0, 1.0]");
    }

    @Test
    public void test1593() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1593");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int2 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray4 = new double[] { 100.0d };
        empiricalDistributionImpl1.load(doubleArray4);
        boolean boolean6 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary7 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary8 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary9 = empiricalDistributionImpl1.getSampleStats();
        java.util.List list10 = empiricalDistributionImpl1.getBinStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl12 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 10);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl14 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray19 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl14.load(doubleArray19);
        double[] doubleArray21 = empiricalDistributionImpl14.getUpperBounds();
        int int22 = empiricalDistributionImpl14.getBinCount();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl24 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl26 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray31 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl26.load(doubleArray31);
        double[] doubleArray33 = empiricalDistributionImpl26.getUpperBounds();
        empiricalDistributionImpl24.load(doubleArray33);
        empiricalDistributionImpl14.load(doubleArray33);
        java.util.List list36 = empiricalDistributionImpl14.getBinStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl38 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int39 = empiricalDistributionImpl38.getBinCount();
        double[] doubleArray41 = new double[] { 100.0d };
        empiricalDistributionImpl38.load(doubleArray41);
        boolean boolean43 = empiricalDistributionImpl38.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary44 = empiricalDistributionImpl38.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary45 = empiricalDistributionImpl38.getSampleStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl47 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl49 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int50 = empiricalDistributionImpl49.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary51 = empiricalDistributionImpl49.getSampleStats();
        double[] doubleArray55 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl49.load(doubleArray55);
        empiricalDistributionImpl47.load(doubleArray55);
        double[] doubleArray61 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl47.load(doubleArray61);
        empiricalDistributionImpl38.load(doubleArray61);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl65 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl67 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int68 = empiricalDistributionImpl67.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary69 = empiricalDistributionImpl67.getSampleStats();
        double[] doubleArray73 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl67.load(doubleArray73);
        empiricalDistributionImpl65.load(doubleArray73);
        empiricalDistributionImpl38.load(doubleArray73);
        empiricalDistributionImpl14.load(doubleArray73);
        empiricalDistributionImpl12.load(doubleArray73);
        empiricalDistributionImpl1.load(doubleArray73);
        int int80 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary81 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary82 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl84 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) ' ');
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl86 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int87 = empiricalDistributionImpl86.getBinCount();
        double[] doubleArray89 = new double[] { 100.0d };
        empiricalDistributionImpl86.load(doubleArray89);
        boolean boolean91 = empiricalDistributionImpl86.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary92 = empiricalDistributionImpl86.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary93 = empiricalDistributionImpl86.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary94 = empiricalDistributionImpl86.getSampleStats();
        double[] doubleArray95 = empiricalDistributionImpl86.getUpperBounds();
        empiricalDistributionImpl84.load(doubleArray95);
        empiricalDistributionImpl1.load(doubleArray95);
        java.net.URL uRL98 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(uRL98);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 35 + "'", int2 == 35);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(statisticalSummary7);
        org.junit.Assert.assertNotNull(statisticalSummary8);
        org.junit.Assert.assertNotNull(statisticalSummary9);
        org.junit.Assert.assertNotNull(list10);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 35 + "'", int22 == 35);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(list36);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 35 + "'", int39 == 35);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(statisticalSummary44);
        org.junit.Assert.assertNotNull(statisticalSummary45);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 35 + "'", int50 == 35);
        org.junit.Assert.assertNull(statisticalSummary51);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 35 + "'", int68 == 35);
        org.junit.Assert.assertNull(statisticalSummary69);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 35 + "'", int80 == 35);
        org.junit.Assert.assertNotNull(statisticalSummary81);
        org.junit.Assert.assertNotNull(statisticalSummary82);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 35 + "'", int87 == 35);
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray89), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
        org.junit.Assert.assertNotNull(statisticalSummary92);
        org.junit.Assert.assertNotNull(statisticalSummary93);
        org.junit.Assert.assertNotNull(statisticalSummary94);
        org.junit.Assert.assertNotNull(doubleArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray95), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
    }

    @Test
    public void test1594() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1594");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int2 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray4 = new double[] { 100.0d };
        empiricalDistributionImpl1.load(doubleArray4);
        boolean boolean6 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary7 = empiricalDistributionImpl1.getSampleStats();
        boolean boolean8 = empiricalDistributionImpl1.isLoaded();
        boolean boolean9 = empiricalDistributionImpl1.isLoaded();
        double[] doubleArray10 = empiricalDistributionImpl1.getUpperBounds();
        double[] doubleArray11 = empiricalDistributionImpl1.getUpperBounds();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary12 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl14 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl16 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int17 = empiricalDistributionImpl16.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary18 = empiricalDistributionImpl16.getSampleStats();
        double[] doubleArray22 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl16.load(doubleArray22);
        empiricalDistributionImpl14.load(doubleArray22);
        double[] doubleArray28 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl14.load(doubleArray28);
        double[] doubleArray30 = empiricalDistributionImpl14.getUpperBounds();
        double double31 = empiricalDistributionImpl14.getNextValue();
        boolean boolean32 = empiricalDistributionImpl14.isLoaded();
        int int33 = empiricalDistributionImpl14.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary34 = empiricalDistributionImpl14.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary35 = empiricalDistributionImpl14.getSampleStats();
        boolean boolean36 = empiricalDistributionImpl14.isLoaded();
        boolean boolean37 = empiricalDistributionImpl14.isLoaded();
        java.util.List list38 = empiricalDistributionImpl14.getBinStats();
        java.util.List list39 = empiricalDistributionImpl14.getBinStats();
        int int40 = empiricalDistributionImpl14.getBinCount();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl42 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        boolean boolean43 = empiricalDistributionImpl42.isLoaded();
        int int44 = empiricalDistributionImpl42.getBinCount();
        boolean boolean45 = empiricalDistributionImpl42.isLoaded();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl47 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int48 = empiricalDistributionImpl47.getBinCount();
        double[] doubleArray50 = new double[] { 100.0d };
        empiricalDistributionImpl47.load(doubleArray50);
        empiricalDistributionImpl42.load(doubleArray50);
        empiricalDistributionImpl14.load(doubleArray50);
        empiricalDistributionImpl1.load(doubleArray50);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 35 + "'", int2 == 35);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(statisticalSummary7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(statisticalSummary12);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 35 + "'", int17 == 35);
        org.junit.Assert.assertNull(statisticalSummary18);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.47661887612397724d + "'", double31 == 0.47661887612397724d);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(statisticalSummary34);
        org.junit.Assert.assertNotNull(statisticalSummary35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(list38);
        org.junit.Assert.assertNotNull(list39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 35 + "'", int44 == 35);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 35 + "'", int48 == 35);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[100.0]");
    }

    @Test
    public void test1595() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1595");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        double double12 = empiricalDistributionImpl1.getNextValue();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl14 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl16 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int17 = empiricalDistributionImpl16.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary18 = empiricalDistributionImpl16.getSampleStats();
        double[] doubleArray22 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl16.load(doubleArray22);
        empiricalDistributionImpl14.load(doubleArray22);
        double double25 = empiricalDistributionImpl14.getNextValue();
        double[] doubleArray26 = empiricalDistributionImpl14.getUpperBounds();
        double[] doubleArray27 = empiricalDistributionImpl14.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray27);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary29 = empiricalDistributionImpl1.getSampleStats();
        double double30 = empiricalDistributionImpl1.getNextValue();
        double double31 = empiricalDistributionImpl1.getNextValue();
        java.util.List list32 = empiricalDistributionImpl1.getBinStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary33 = empiricalDistributionImpl1.getSampleStats();
        double[] doubleArray34 = empiricalDistributionImpl1.getUpperBounds();
        java.io.File file35 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(file35);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 35 + "'", int17 == 35);
        org.junit.Assert.assertNull(statisticalSummary18);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double25 + "' != '" + 32.0d + "'", double25 == 32.0d);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertNotNull(statisticalSummary29);
// flaky:         org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.6666666666666666d + "'", double30 == 0.6666666666666666d);
// flaky:         org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.6666666666666666d + "'", double31 == 0.6666666666666666d);
        org.junit.Assert.assertNotNull(list32);
        org.junit.Assert.assertNotNull(statisticalSummary33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 1.0]");
    }

    @Test
    public void test1596() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1596");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int2 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray4 = new double[] { 100.0d };
        empiricalDistributionImpl1.load(doubleArray4);
        boolean boolean6 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary7 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary8 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl10 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl12 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int13 = empiricalDistributionImpl12.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary14 = empiricalDistributionImpl12.getSampleStats();
        double[] doubleArray18 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl12.load(doubleArray18);
        empiricalDistributionImpl10.load(doubleArray18);
        double[] doubleArray24 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl10.load(doubleArray24);
        empiricalDistributionImpl1.load(doubleArray24);
        double[] doubleArray27 = empiricalDistributionImpl1.getUpperBounds();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl29 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl31 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int32 = empiricalDistributionImpl31.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary33 = empiricalDistributionImpl31.getSampleStats();
        double[] doubleArray37 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl31.load(doubleArray37);
        empiricalDistributionImpl29.load(doubleArray37);
        empiricalDistributionImpl1.load(doubleArray37);
        int int41 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary42 = empiricalDistributionImpl1.getSampleStats();
        double double43 = empiricalDistributionImpl1.getNextValue();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary44 = empiricalDistributionImpl1.getSampleStats();
        int int45 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary46 = empiricalDistributionImpl1.getSampleStats();
        int int47 = empiricalDistributionImpl1.getBinCount();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 35 + "'", int2 == 35);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(statisticalSummary7);
        org.junit.Assert.assertNotNull(statisticalSummary8);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
        org.junit.Assert.assertNull(statisticalSummary14);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 1.0]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 35 + "'", int32 == 35);
        org.junit.Assert.assertNull(statisticalSummary33);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 35 + "'", int41 == 35);
        org.junit.Assert.assertNotNull(statisticalSummary42);
// flaky:         org.junit.Assert.assertTrue("'" + double43 + "' != '" + 32.0d + "'", double43 == 32.0d);
        org.junit.Assert.assertNotNull(statisticalSummary44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 35 + "'", int45 == 35);
        org.junit.Assert.assertNotNull(statisticalSummary46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 35 + "'", int47 == 35);
    }

    @Test
    public void test1597() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1597");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        boolean boolean2 = empiricalDistributionImpl1.isLoaded();
        int int3 = empiricalDistributionImpl1.getBinCount();
        boolean boolean4 = empiricalDistributionImpl1.isLoaded();
        java.util.List list5 = empiricalDistributionImpl1.getBinStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl7 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl9 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int10 = empiricalDistributionImpl9.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary11 = empiricalDistributionImpl9.getSampleStats();
        double[] doubleArray15 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl9.load(doubleArray15);
        empiricalDistributionImpl7.load(doubleArray15);
        double[] doubleArray21 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl7.load(doubleArray21);
        empiricalDistributionImpl1.load(doubleArray21);
        java.util.List list24 = empiricalDistributionImpl1.getBinStats();
        int int25 = empiricalDistributionImpl1.getBinCount();
        java.util.List list26 = empiricalDistributionImpl1.getBinStats();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 35 + "'", int3 == 35);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(list5);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 35 + "'", int10 == 35);
        org.junit.Assert.assertNull(statisticalSummary11);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(list24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 35 + "'", int25 == 35);
        org.junit.Assert.assertNotNull(list26);
    }

    @Test
    public void test1598() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1598");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int2 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray4 = new double[] { 100.0d };
        empiricalDistributionImpl1.load(doubleArray4);
        boolean boolean6 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary7 = empiricalDistributionImpl1.getSampleStats();
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        java.util.List list9 = empiricalDistributionImpl1.getBinStats();
        double double10 = empiricalDistributionImpl1.getNextValue();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 35 + "'", int2 == 35);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(statisticalSummary7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(list9);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 100.0d + "'", double10 == 100.0d);
    }

    @Test
    public void test1599() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1599");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        double double12 = empiricalDistributionImpl1.getNextValue();
        java.util.List list13 = empiricalDistributionImpl1.getBinStats();
        double[] doubleArray14 = empiricalDistributionImpl1.getUpperBounds();
        int int15 = empiricalDistributionImpl1.getBinCount();
        int int16 = empiricalDistributionImpl1.getBinCount();
        java.util.List list17 = empiricalDistributionImpl1.getBinStats();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double12 + "' != '" + 1.0d + "'", double12 == 1.0d);
        org.junit.Assert.assertNotNull(list13);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 100 + "'", int15 == 100);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 100 + "'", int16 == 100);
        org.junit.Assert.assertNotNull(list17);
    }

    @Test
    public void test1600() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1600");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        double[] doubleArray15 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl1.load(doubleArray15);
        double double17 = empiricalDistributionImpl1.getNextValue();
        java.util.List list18 = empiricalDistributionImpl1.getBinStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary19 = empiricalDistributionImpl1.getSampleStats();
        int int20 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl22 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray27 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl22.load(doubleArray27);
        double[] doubleArray29 = empiricalDistributionImpl22.getUpperBounds();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary30 = empiricalDistributionImpl22.getSampleStats();
        boolean boolean31 = empiricalDistributionImpl22.isLoaded();
        java.util.List list32 = empiricalDistributionImpl22.getBinStats();
        boolean boolean33 = empiricalDistributionImpl22.isLoaded();
        int int34 = empiricalDistributionImpl22.getBinCount();
        java.util.List list35 = empiricalDistributionImpl22.getBinStats();
        double[] doubleArray36 = empiricalDistributionImpl22.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray36);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[-1.0, 0.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.4549222315836509d + "'", double17 == 0.4549222315836509d);
        org.junit.Assert.assertNotNull(list18);
        org.junit.Assert.assertNotNull(statisticalSummary19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(statisticalSummary30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(list32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 35 + "'", int34 == 35);
        org.junit.Assert.assertNotNull(list35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
    }

    @Test
    public void test1601() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1601");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int2 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray4 = new double[] { 100.0d };
        empiricalDistributionImpl1.load(doubleArray4);
        boolean boolean6 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary7 = empiricalDistributionImpl1.getSampleStats();
        int int8 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary9 = empiricalDistributionImpl1.getSampleStats();
        java.util.List list10 = empiricalDistributionImpl1.getBinStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary11 = empiricalDistributionImpl1.getSampleStats();
        java.util.List list12 = empiricalDistributionImpl1.getBinStats();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 35 + "'", int2 == 35);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(statisticalSummary7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 35 + "'", int8 == 35);
        org.junit.Assert.assertNotNull(statisticalSummary9);
        org.junit.Assert.assertNotNull(list10);
        org.junit.Assert.assertNotNull(statisticalSummary11);
        org.junit.Assert.assertNotNull(list12);
    }

    @Test
    public void test1602() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1602");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '4');
        boolean boolean2 = empiricalDistributionImpl1.isLoaded();
        java.util.List list3 = empiricalDistributionImpl1.getBinStats();
        boolean boolean4 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl1.getSampleStats();
        // The following exception was thrown during execution in test generation
        try {
            double double6 = empiricalDistributionImpl1.getNextValue();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: distribution not loaded");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(list3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(statisticalSummary5);
    }

    @Test
    public void test1603() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1603");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        int int9 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl11 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl13 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray18 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl13.load(doubleArray18);
        double[] doubleArray20 = empiricalDistributionImpl13.getUpperBounds();
        empiricalDistributionImpl11.load(doubleArray20);
        empiricalDistributionImpl1.load(doubleArray20);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl24 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl26 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray31 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl26.load(doubleArray31);
        double[] doubleArray33 = empiricalDistributionImpl26.getUpperBounds();
        empiricalDistributionImpl24.load(doubleArray33);
        empiricalDistributionImpl1.load(doubleArray33);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary36 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary37 = empiricalDistributionImpl1.getSampleStats();
        java.util.List list38 = empiricalDistributionImpl1.getBinStats();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(statisticalSummary36);
        org.junit.Assert.assertNotNull(statisticalSummary37);
        org.junit.Assert.assertNotNull(list38);
    }

    @Test
    public void test1604() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1604");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 100);
        int int2 = empiricalDistributionImpl1.getBinCount();
        int int3 = empiricalDistributionImpl1.getBinCount();
        int int4 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl6 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (short) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl8 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray13 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl8.load(doubleArray13);
        double[] doubleArray15 = empiricalDistributionImpl8.getUpperBounds();
        int int16 = empiricalDistributionImpl8.getBinCount();
        double[] doubleArray17 = empiricalDistributionImpl8.getUpperBounds();
        empiricalDistributionImpl6.load(doubleArray17);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl20 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl22 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray27 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl22.load(doubleArray27);
        double[] doubleArray29 = empiricalDistributionImpl22.getUpperBounds();
        empiricalDistributionImpl20.load(doubleArray29);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl32 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int33 = empiricalDistributionImpl32.getBinCount();
        double[] doubleArray35 = new double[] { 100.0d };
        empiricalDistributionImpl32.load(doubleArray35);
        empiricalDistributionImpl20.load(doubleArray35);
        double[] doubleArray38 = empiricalDistributionImpl20.getUpperBounds();
        empiricalDistributionImpl6.load(doubleArray38);
        empiricalDistributionImpl1.load(doubleArray38);
        java.util.List list41 = empiricalDistributionImpl1.getBinStats();
        java.lang.Class<?> wildcardClass42 = empiricalDistributionImpl1.getClass();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 100 + "'", int2 == 100);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 100 + "'", int3 == 100);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 100 + "'", int4 == 100);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 35 + "'", int16 == 35);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 35 + "'", int33 == 35);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[100.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(list41);
        org.junit.Assert.assertNotNull(wildcardClass42);
    }

    @Test
    public void test1605() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1605");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int2 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray4 = new double[] { 100.0d };
        empiricalDistributionImpl1.load(doubleArray4);
        boolean boolean6 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary7 = empiricalDistributionImpl1.getSampleStats();
        boolean boolean8 = empiricalDistributionImpl1.isLoaded();
        boolean boolean9 = empiricalDistributionImpl1.isLoaded();
        double double10 = empiricalDistributionImpl1.getNextValue();
        boolean boolean11 = empiricalDistributionImpl1.isLoaded();
        boolean boolean12 = empiricalDistributionImpl1.isLoaded();
        java.io.File file13 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(file13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 35 + "'", int2 == 35);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(statisticalSummary7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 100.0d + "'", double10 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
    }

    @Test
    public void test1606() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1606");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        boolean boolean2 = empiricalDistributionImpl1.isLoaded();
        int int3 = empiricalDistributionImpl1.getBinCount();
        boolean boolean4 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl6 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl8 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int9 = empiricalDistributionImpl8.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary10 = empiricalDistributionImpl8.getSampleStats();
        double[] doubleArray14 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl8.load(doubleArray14);
        empiricalDistributionImpl6.load(doubleArray14);
        double[] doubleArray20 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl6.load(doubleArray20);
        double[] doubleArray22 = empiricalDistributionImpl6.getUpperBounds();
        double double23 = empiricalDistributionImpl6.getNextValue();
        boolean boolean24 = empiricalDistributionImpl6.isLoaded();
        double[] doubleArray25 = empiricalDistributionImpl6.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray25);
        double double27 = empiricalDistributionImpl1.getNextValue();
        int int28 = empiricalDistributionImpl1.getBinCount();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 35 + "'", int3 == 35);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertNull(statisticalSummary10);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double23 + "' != '" + (-0.13470056136960643d) + "'", double23 == (-0.13470056136960643d));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0]");
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 1.0d + "'", double27 == 1.0d);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 35 + "'", int28 == 35);
    }

    @Test
    public void test1607() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1607");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        int int9 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray10 = empiricalDistributionImpl1.getUpperBounds();
        int int11 = empiricalDistributionImpl1.getBinCount();
        java.util.List list12 = empiricalDistributionImpl1.getBinStats();
        boolean boolean13 = empiricalDistributionImpl1.isLoaded();
        double[] doubleArray14 = empiricalDistributionImpl1.getUpperBounds();
        int int15 = empiricalDistributionImpl1.getBinCount();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 35 + "'", int11 == 35);
        org.junit.Assert.assertNotNull(list12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 35 + "'", int15 == 35);
    }

    @Test
    public void test1608() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1608");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int2 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray4 = new double[] { 100.0d };
        empiricalDistributionImpl1.load(doubleArray4);
        double double6 = empiricalDistributionImpl1.getNextValue();
        boolean boolean7 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl9 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl11 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray16 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl11.load(doubleArray16);
        double[] doubleArray18 = empiricalDistributionImpl11.getUpperBounds();
        empiricalDistributionImpl9.load(doubleArray18);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl21 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int22 = empiricalDistributionImpl21.getBinCount();
        double[] doubleArray24 = new double[] { 100.0d };
        empiricalDistributionImpl21.load(doubleArray24);
        empiricalDistributionImpl9.load(doubleArray24);
        java.util.List list27 = empiricalDistributionImpl9.getBinStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary28 = empiricalDistributionImpl9.getSampleStats();
        double double29 = empiricalDistributionImpl9.getNextValue();
        java.util.List list30 = empiricalDistributionImpl9.getBinStats();
        int int31 = empiricalDistributionImpl9.getBinCount();
        boolean boolean32 = empiricalDistributionImpl9.isLoaded();
        double[] doubleArray33 = empiricalDistributionImpl9.getUpperBounds();
        double[] doubleArray34 = empiricalDistributionImpl9.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray34);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 35 + "'", int2 == 35);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[100.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 100.0d + "'", double6 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 35 + "'", int22 == 35);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[100.0]");
        org.junit.Assert.assertNotNull(list27);
        org.junit.Assert.assertNotNull(statisticalSummary28);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 100.0d + "'", double29 == 100.0d);
        org.junit.Assert.assertNotNull(list30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 35 + "'", int31 == 35);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
    }

    @Test
    public void test1609() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1609");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        double double12 = empiricalDistributionImpl1.getNextValue();
        java.util.List list13 = empiricalDistributionImpl1.getBinStats();
        int int14 = empiricalDistributionImpl1.getBinCount();
        double double15 = empiricalDistributionImpl1.getNextValue();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary16 = empiricalDistributionImpl1.getSampleStats();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double12 + "' != '" + 32.0d + "'", double12 == 32.0d);
        org.junit.Assert.assertNotNull(list13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 100 + "'", int14 == 100);
// flaky:         org.junit.Assert.assertTrue("'" + double15 + "' != '" + 1.0d + "'", double15 == 1.0d);
        org.junit.Assert.assertNotNull(statisticalSummary16);
    }

    @Test
    public void test1610() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1610");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int2 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray4 = new double[] { 100.0d };
        empiricalDistributionImpl1.load(doubleArray4);
        boolean boolean6 = empiricalDistributionImpl1.isLoaded();
        double[] doubleArray7 = empiricalDistributionImpl1.getUpperBounds();
        double double8 = empiricalDistributionImpl1.getNextValue();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary9 = empiricalDistributionImpl1.getSampleStats();
        java.io.File file10 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(file10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 35 + "'", int2 == 35);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 100.0d + "'", double8 == 100.0d);
        org.junit.Assert.assertNotNull(statisticalSummary9);
    }

    @Test
    public void test1611() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1611");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary9 = empiricalDistributionImpl1.getSampleStats();
        double double10 = empiricalDistributionImpl1.getNextValue();
        java.lang.Class<?> wildcardClass11 = empiricalDistributionImpl1.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(statisticalSummary9);
// flaky:         org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test1612() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1612");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        int int9 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl11 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl13 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray18 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl13.load(doubleArray18);
        double[] doubleArray20 = empiricalDistributionImpl13.getUpperBounds();
        empiricalDistributionImpl11.load(doubleArray20);
        empiricalDistributionImpl1.load(doubleArray20);
        java.util.List list23 = empiricalDistributionImpl1.getBinStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl25 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int26 = empiricalDistributionImpl25.getBinCount();
        double[] doubleArray28 = new double[] { 100.0d };
        empiricalDistributionImpl25.load(doubleArray28);
        boolean boolean30 = empiricalDistributionImpl25.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary31 = empiricalDistributionImpl25.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary32 = empiricalDistributionImpl25.getSampleStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl34 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl36 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int37 = empiricalDistributionImpl36.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary38 = empiricalDistributionImpl36.getSampleStats();
        double[] doubleArray42 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl36.load(doubleArray42);
        empiricalDistributionImpl34.load(doubleArray42);
        double[] doubleArray48 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl34.load(doubleArray48);
        empiricalDistributionImpl25.load(doubleArray48);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl52 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl54 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int55 = empiricalDistributionImpl54.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary56 = empiricalDistributionImpl54.getSampleStats();
        double[] doubleArray60 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl54.load(doubleArray60);
        empiricalDistributionImpl52.load(doubleArray60);
        empiricalDistributionImpl25.load(doubleArray60);
        empiricalDistributionImpl1.load(doubleArray60);
        double[] doubleArray69 = new double[] { 1.1354582769782435d, (short) 0, (-0.1362032819111886d), 10L };
        empiricalDistributionImpl1.load(doubleArray69);
        double double71 = empiricalDistributionImpl1.getNextValue();
        double double72 = empiricalDistributionImpl1.getNextValue();
        double double73 = empiricalDistributionImpl1.getNextValue();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(list23);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 35 + "'", int26 == 35);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(statisticalSummary31);
        org.junit.Assert.assertNotNull(statisticalSummary32);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 35 + "'", int37 == 35);
        org.junit.Assert.assertNull(statisticalSummary38);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 35 + "'", int55 == 35);
        org.junit.Assert.assertNull(statisticalSummary56);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[1.1354582769782435, 0.0, -0.1362032819111886, 10.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double71 + "' != '" + 1.1354582769782435d + "'", double71 == 1.1354582769782435d);
// flaky:         org.junit.Assert.assertTrue("'" + double72 + "' != '" + 10.0d + "'", double72 == 10.0d);
// flaky:         org.junit.Assert.assertTrue("'" + double73 + "' != '" + 1.1354582769782435d + "'", double73 == 1.1354582769782435d);
    }

    @Test
    public void test1613() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1613");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int2 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray4 = new double[] { 100.0d };
        empiricalDistributionImpl1.load(doubleArray4);
        boolean boolean6 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary7 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary8 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl10 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl12 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int13 = empiricalDistributionImpl12.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary14 = empiricalDistributionImpl12.getSampleStats();
        double[] doubleArray18 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl12.load(doubleArray18);
        empiricalDistributionImpl10.load(doubleArray18);
        double[] doubleArray24 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl10.load(doubleArray24);
        empiricalDistributionImpl1.load(doubleArray24);
        double[] doubleArray27 = empiricalDistributionImpl1.getUpperBounds();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl29 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl31 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int32 = empiricalDistributionImpl31.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary33 = empiricalDistributionImpl31.getSampleStats();
        double[] doubleArray37 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl31.load(doubleArray37);
        empiricalDistributionImpl29.load(doubleArray37);
        empiricalDistributionImpl1.load(doubleArray37);
        int int41 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary42 = empiricalDistributionImpl1.getSampleStats();
        double[] doubleArray43 = empiricalDistributionImpl1.getUpperBounds();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary44 = empiricalDistributionImpl1.getSampleStats();
        double double45 = empiricalDistributionImpl1.getNextValue();
        int int46 = empiricalDistributionImpl1.getBinCount();
        int int47 = empiricalDistributionImpl1.getBinCount();
        double double48 = empiricalDistributionImpl1.getNextValue();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary49 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary50 = empiricalDistributionImpl1.getSampleStats();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 35 + "'", int2 == 35);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(statisticalSummary7);
        org.junit.Assert.assertNotNull(statisticalSummary8);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
        org.junit.Assert.assertNull(statisticalSummary14);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 1.0]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 35 + "'", int32 == 35);
        org.junit.Assert.assertNull(statisticalSummary33);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 35 + "'", int41 == 35);
        org.junit.Assert.assertNotNull(statisticalSummary42);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 1.0]");
        org.junit.Assert.assertNotNull(statisticalSummary44);
// flaky:         org.junit.Assert.assertTrue("'" + double45 + "' != '" + 32.0d + "'", double45 == 32.0d);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 35 + "'", int46 == 35);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 35 + "'", int47 == 35);
// flaky:         org.junit.Assert.assertTrue("'" + double48 + "' != '" + 32.0d + "'", double48 == 32.0d);
        org.junit.Assert.assertNotNull(statisticalSummary49);
        org.junit.Assert.assertNotNull(statisticalSummary50);
    }

    @Test
    public void test1614() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1614");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        java.util.List list9 = empiricalDistributionImpl1.getBinStats();
        boolean boolean10 = empiricalDistributionImpl1.isLoaded();
        double[] doubleArray11 = empiricalDistributionImpl1.getUpperBounds();
        boolean boolean12 = empiricalDistributionImpl1.isLoaded();
        boolean boolean13 = empiricalDistributionImpl1.isLoaded();
        int int14 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary15 = empiricalDistributionImpl1.getSampleStats();
        double[] doubleArray16 = empiricalDistributionImpl1.getUpperBounds();
        java.util.List list17 = empiricalDistributionImpl1.getBinStats();
        double[] doubleArray18 = empiricalDistributionImpl1.getUpperBounds();
        java.net.URL uRL19 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(uRL19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(list9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 35 + "'", int14 == 35);
        org.junit.Assert.assertNotNull(statisticalSummary15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(list17);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
    }

    @Test
    public void test1615() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1615");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl10 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl12 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int13 = empiricalDistributionImpl12.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary14 = empiricalDistributionImpl12.getSampleStats();
        double[] doubleArray18 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl12.load(doubleArray18);
        empiricalDistributionImpl10.load(doubleArray18);
        empiricalDistributionImpl1.load(doubleArray18);
        double double22 = empiricalDistributionImpl1.getNextValue();
        java.util.List list23 = empiricalDistributionImpl1.getBinStats();
        int int24 = empiricalDistributionImpl1.getBinCount();
        java.util.List list25 = empiricalDistributionImpl1.getBinStats();
        double double26 = empiricalDistributionImpl1.getNextValue();
        double double27 = empiricalDistributionImpl1.getNextValue();
        int int28 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl30 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '4');
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary31 = empiricalDistributionImpl30.getSampleStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl33 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int34 = empiricalDistributionImpl33.getBinCount();
        double[] doubleArray36 = new double[] { 100.0d };
        empiricalDistributionImpl33.load(doubleArray36);
        boolean boolean38 = empiricalDistributionImpl33.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary39 = empiricalDistributionImpl33.getSampleStats();
        boolean boolean40 = empiricalDistributionImpl33.isLoaded();
        boolean boolean41 = empiricalDistributionImpl33.isLoaded();
        double[] doubleArray42 = empiricalDistributionImpl33.getUpperBounds();
        empiricalDistributionImpl30.load(doubleArray42);
        empiricalDistributionImpl1.load(doubleArray42);
        int int45 = empiricalDistributionImpl1.getBinCount();
        boolean boolean46 = empiricalDistributionImpl1.isLoaded();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
        org.junit.Assert.assertNull(statisticalSummary14);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double22 + "' != '" + 10.0d + "'", double22 == 10.0d);
        org.junit.Assert.assertNotNull(list23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 35 + "'", int24 == 35);
        org.junit.Assert.assertNotNull(list25);
// flaky:         org.junit.Assert.assertTrue("'" + double26 + "' != '" + 1.0d + "'", double26 == 1.0d);
// flaky:         org.junit.Assert.assertTrue("'" + double27 + "' != '" + 32.0d + "'", double27 == 32.0d);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 35 + "'", int28 == 35);
        org.junit.Assert.assertNull(statisticalSummary31);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 35 + "'", int34 == 35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(statisticalSummary39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 35 + "'", int45 == 35);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
    }

    @Test
    public void test1616() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1616");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl10 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl12 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int13 = empiricalDistributionImpl12.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary14 = empiricalDistributionImpl12.getSampleStats();
        double[] doubleArray18 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl12.load(doubleArray18);
        empiricalDistributionImpl10.load(doubleArray18);
        empiricalDistributionImpl1.load(doubleArray18);
        double double22 = empiricalDistributionImpl1.getNextValue();
        java.util.List list23 = empiricalDistributionImpl1.getBinStats();
        int int24 = empiricalDistributionImpl1.getBinCount();
        java.util.List list25 = empiricalDistributionImpl1.getBinStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl27 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl29 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int30 = empiricalDistributionImpl29.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary31 = empiricalDistributionImpl29.getSampleStats();
        double[] doubleArray35 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl29.load(doubleArray35);
        empiricalDistributionImpl27.load(doubleArray35);
        double[] doubleArray41 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl27.load(doubleArray41);
        empiricalDistributionImpl1.load(doubleArray41);
        double[] doubleArray44 = empiricalDistributionImpl1.getUpperBounds();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl46 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int47 = empiricalDistributionImpl46.getBinCount();
        double[] doubleArray49 = new double[] { 100.0d };
        empiricalDistributionImpl46.load(doubleArray49);
        double double51 = empiricalDistributionImpl46.getNextValue();
        boolean boolean52 = empiricalDistributionImpl46.isLoaded();
        double[] doubleArray53 = empiricalDistributionImpl46.getUpperBounds();
        int int54 = empiricalDistributionImpl46.getBinCount();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl56 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl58 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int59 = empiricalDistributionImpl58.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary60 = empiricalDistributionImpl58.getSampleStats();
        double[] doubleArray64 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl58.load(doubleArray64);
        empiricalDistributionImpl56.load(doubleArray64);
        empiricalDistributionImpl46.load(doubleArray64);
        boolean boolean68 = empiricalDistributionImpl46.isLoaded();
        double[] doubleArray69 = empiricalDistributionImpl46.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray69);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
        org.junit.Assert.assertNull(statisticalSummary14);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1.0d + "'", double22 == 1.0d);
        org.junit.Assert.assertNotNull(list23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 35 + "'", int24 == 35);
        org.junit.Assert.assertNotNull(list25);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 35 + "'", int30 == 35);
        org.junit.Assert.assertNull(statisticalSummary31);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 1.0]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 35 + "'", int47 == 35);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[100.0]");
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 100.0d + "'", double51 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 35 + "'", int54 == 35);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 35 + "'", int59 == 35);
        org.junit.Assert.assertNull(statisticalSummary60);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 1.0]");
    }

    @Test
    public void test1617() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1617");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        int int9 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray10 = empiricalDistributionImpl1.getUpperBounds();
        int int11 = empiricalDistributionImpl1.getBinCount();
        java.util.List list12 = empiricalDistributionImpl1.getBinStats();
        int int13 = empiricalDistributionImpl1.getBinCount();
        double double14 = empiricalDistributionImpl1.getNextValue();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl16 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int17 = empiricalDistributionImpl16.getBinCount();
        double[] doubleArray19 = new double[] { 100.0d };
        empiricalDistributionImpl16.load(doubleArray19);
        boolean boolean21 = empiricalDistributionImpl16.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary22 = empiricalDistributionImpl16.getSampleStats();
        boolean boolean23 = empiricalDistributionImpl16.isLoaded();
        boolean boolean24 = empiricalDistributionImpl16.isLoaded();
        double[] doubleArray25 = empiricalDistributionImpl16.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray25);
        java.util.List list27 = empiricalDistributionImpl1.getBinStats();
        double double28 = empiricalDistributionImpl1.getNextValue();
        double[] doubleArray29 = empiricalDistributionImpl1.getUpperBounds();
        java.net.URL uRL30 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(uRL30);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 35 + "'", int11 == 35);
        org.junit.Assert.assertNotNull(list12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
// flaky:         org.junit.Assert.assertTrue("'" + double14 + "' != '" + (-1.0d) + "'", double14 == (-1.0d));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 35 + "'", int17 == 35);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(statisticalSummary22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(list27);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 1.0d + "'", double28 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
    }

    @Test
    public void test1618() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1618");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        double[] doubleArray15 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl1.load(doubleArray15);
        double double17 = empiricalDistributionImpl1.getNextValue();
        boolean boolean18 = empiricalDistributionImpl1.isLoaded();
        boolean boolean19 = empiricalDistributionImpl1.isLoaded();
        double double20 = empiricalDistributionImpl1.getNextValue();
        double[] doubleArray21 = empiricalDistributionImpl1.getUpperBounds();
        int int22 = empiricalDistributionImpl1.getBinCount();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[-1.0, 0.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double17 + "' != '" + 1.6198701972753942d + "'", double17 == 1.6198701972753942d);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
// flaky:         org.junit.Assert.assertTrue("'" + double20 + "' != '" + (-0.4242460365356971d) + "'", double20 == (-0.4242460365356971d));
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
    }

    @Test
    public void test1619() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1619");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int2 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray4 = new double[] { 100.0d };
        empiricalDistributionImpl1.load(doubleArray4);
        boolean boolean6 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary7 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary8 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary9 = empiricalDistributionImpl1.getSampleStats();
        java.util.List list10 = empiricalDistributionImpl1.getBinStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl12 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 100);
        int int13 = empiricalDistributionImpl12.getBinCount();
        int int14 = empiricalDistributionImpl12.getBinCount();
        int int15 = empiricalDistributionImpl12.getBinCount();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl17 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (short) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl19 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray24 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl19.load(doubleArray24);
        double[] doubleArray26 = empiricalDistributionImpl19.getUpperBounds();
        int int27 = empiricalDistributionImpl19.getBinCount();
        double[] doubleArray28 = empiricalDistributionImpl19.getUpperBounds();
        empiricalDistributionImpl17.load(doubleArray28);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl31 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl33 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray38 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl33.load(doubleArray38);
        double[] doubleArray40 = empiricalDistributionImpl33.getUpperBounds();
        empiricalDistributionImpl31.load(doubleArray40);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl43 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int44 = empiricalDistributionImpl43.getBinCount();
        double[] doubleArray46 = new double[] { 100.0d };
        empiricalDistributionImpl43.load(doubleArray46);
        empiricalDistributionImpl31.load(doubleArray46);
        double[] doubleArray49 = empiricalDistributionImpl31.getUpperBounds();
        empiricalDistributionImpl17.load(doubleArray49);
        empiricalDistributionImpl12.load(doubleArray49);
        empiricalDistributionImpl1.load(doubleArray49);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 35 + "'", int2 == 35);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(statisticalSummary7);
        org.junit.Assert.assertNotNull(statisticalSummary8);
        org.junit.Assert.assertNotNull(statisticalSummary9);
        org.junit.Assert.assertNotNull(list10);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 100 + "'", int13 == 100);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 100 + "'", int14 == 100);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 100 + "'", int15 == 100);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 35 + "'", int27 == 35);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 35 + "'", int44 == 35);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[100.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
    }

    @Test
    public void test1620() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1620");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (short) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray8 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl3.load(doubleArray8);
        double[] doubleArray10 = empiricalDistributionImpl3.getUpperBounds();
        int int11 = empiricalDistributionImpl3.getBinCount();
        double[] doubleArray12 = empiricalDistributionImpl3.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray12);
        double[] doubleArray14 = empiricalDistributionImpl1.getUpperBounds();
        java.util.List list15 = empiricalDistributionImpl1.getBinStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl17 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl19 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int20 = empiricalDistributionImpl19.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary21 = empiricalDistributionImpl19.getSampleStats();
        double[] doubleArray25 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl19.load(doubleArray25);
        empiricalDistributionImpl17.load(doubleArray25);
        boolean boolean28 = empiricalDistributionImpl17.isLoaded();
        boolean boolean29 = empiricalDistributionImpl17.isLoaded();
        double[] doubleArray30 = empiricalDistributionImpl17.getUpperBounds();
        double[] doubleArray31 = empiricalDistributionImpl17.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 35 + "'", int11 == 35);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0]");
        org.junit.Assert.assertNotNull(list15);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 35 + "'", int20 == 35);
        org.junit.Assert.assertNull(statisticalSummary21);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
    }

    @Test
    public void test1621() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1621");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        boolean boolean2 = empiricalDistributionImpl1.isLoaded();
        int int3 = empiricalDistributionImpl1.getBinCount();
        boolean boolean4 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl6 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int7 = empiricalDistributionImpl6.getBinCount();
        double[] doubleArray9 = new double[] { 100.0d };
        empiricalDistributionImpl6.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        java.io.File file12 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(file12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 35 + "'", int3 == 35);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 35 + "'", int7 == 35);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[100.0]");
    }

    @Test
    public void test1622() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1622");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary9 = empiricalDistributionImpl1.getSampleStats();
        double double10 = empiricalDistributionImpl1.getNextValue();
        boolean boolean11 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl13 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray18 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl13.load(doubleArray18);
        double[] doubleArray20 = empiricalDistributionImpl13.getUpperBounds();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary21 = empiricalDistributionImpl13.getSampleStats();
        boolean boolean22 = empiricalDistributionImpl13.isLoaded();
        java.util.List list23 = empiricalDistributionImpl13.getBinStats();
        int int24 = empiricalDistributionImpl13.getBinCount();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl26 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl28 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int29 = empiricalDistributionImpl28.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary30 = empiricalDistributionImpl28.getSampleStats();
        double[] doubleArray34 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl28.load(doubleArray34);
        empiricalDistributionImpl26.load(doubleArray34);
        int int37 = empiricalDistributionImpl26.getBinCount();
        java.util.List list38 = empiricalDistributionImpl26.getBinStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary39 = empiricalDistributionImpl26.getSampleStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl41 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        boolean boolean42 = empiricalDistributionImpl41.isLoaded();
        int int43 = empiricalDistributionImpl41.getBinCount();
        boolean boolean44 = empiricalDistributionImpl41.isLoaded();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl46 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl48 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int49 = empiricalDistributionImpl48.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary50 = empiricalDistributionImpl48.getSampleStats();
        double[] doubleArray54 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl48.load(doubleArray54);
        empiricalDistributionImpl46.load(doubleArray54);
        double[] doubleArray60 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl46.load(doubleArray60);
        double[] doubleArray62 = empiricalDistributionImpl46.getUpperBounds();
        double double63 = empiricalDistributionImpl46.getNextValue();
        boolean boolean64 = empiricalDistributionImpl46.isLoaded();
        double[] doubleArray65 = empiricalDistributionImpl46.getUpperBounds();
        empiricalDistributionImpl41.load(doubleArray65);
        empiricalDistributionImpl26.load(doubleArray65);
        empiricalDistributionImpl13.load(doubleArray65);
        double[] doubleArray69 = empiricalDistributionImpl13.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray69);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(statisticalSummary9);
// flaky:         org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(statisticalSummary21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(list23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 35 + "'", int24 == 35);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 35 + "'", int29 == 35);
        org.junit.Assert.assertNull(statisticalSummary30);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 100 + "'", int37 == 100);
        org.junit.Assert.assertNotNull(list38);
        org.junit.Assert.assertNotNull(statisticalSummary39);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 35 + "'", int43 == 35);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 35 + "'", int49 == 35);
        org.junit.Assert.assertNull(statisticalSummary50);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double63 + "' != '" + 0.05322703887120628d + "'", double63 == 0.05322703887120628d);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
    }

    @Test
    public void test1623() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1623");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int2 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray4 = new double[] { 100.0d };
        empiricalDistributionImpl1.load(doubleArray4);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl7 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl9 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int10 = empiricalDistributionImpl9.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary11 = empiricalDistributionImpl9.getSampleStats();
        double[] doubleArray15 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl9.load(doubleArray15);
        empiricalDistributionImpl7.load(doubleArray15);
        double double18 = empiricalDistributionImpl7.getNextValue();
        java.util.List list19 = empiricalDistributionImpl7.getBinStats();
        double double20 = empiricalDistributionImpl7.getNextValue();
        int int21 = empiricalDistributionImpl7.getBinCount();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl23 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl25 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int26 = empiricalDistributionImpl25.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary27 = empiricalDistributionImpl25.getSampleStats();
        double[] doubleArray31 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl25.load(doubleArray31);
        empiricalDistributionImpl23.load(doubleArray31);
        double double34 = empiricalDistributionImpl23.getNextValue();
        java.util.List list35 = empiricalDistributionImpl23.getBinStats();
        double double36 = empiricalDistributionImpl23.getNextValue();
        int int37 = empiricalDistributionImpl23.getBinCount();
        double[] doubleArray38 = empiricalDistributionImpl23.getUpperBounds();
        empiricalDistributionImpl7.load(doubleArray38);
        empiricalDistributionImpl1.load(doubleArray38);
        int int41 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray42 = empiricalDistributionImpl1.getUpperBounds();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 35 + "'", int2 == 35);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[100.0]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 35 + "'", int10 == 35);
        org.junit.Assert.assertNull(statisticalSummary11);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double18 + "' != '" + 10.0d + "'", double18 == 10.0d);
        org.junit.Assert.assertNotNull(list19);
// flaky:         org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.0d + "'", double20 == 1.0d);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 100 + "'", int21 == 100);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 35 + "'", int26 == 35);
        org.junit.Assert.assertNull(statisticalSummary27);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double34 + "' != '" + 1.0d + "'", double34 == 1.0d);
        org.junit.Assert.assertNotNull(list35);
// flaky:         org.junit.Assert.assertTrue("'" + double36 + "' != '" + 1.0d + "'", double36 == 1.0d);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 100 + "'", int37 == 100);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 35 + "'", int41 == 35);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 1.0]");
    }

    @Test
    public void test1624() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1624");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        int int12 = empiricalDistributionImpl1.getBinCount();
        int int13 = empiricalDistributionImpl1.getBinCount();
        double double14 = empiricalDistributionImpl1.getNextValue();
        double double15 = empiricalDistributionImpl1.getNextValue();
        double double16 = empiricalDistributionImpl1.getNextValue();
        double double17 = empiricalDistributionImpl1.getNextValue();
        int int18 = empiricalDistributionImpl1.getBinCount();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 100 + "'", int12 == 100);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 100 + "'", int13 == 100);
// flaky:         org.junit.Assert.assertTrue("'" + double14 + "' != '" + 32.0d + "'", double14 == 32.0d);
// flaky:         org.junit.Assert.assertTrue("'" + double15 + "' != '" + 10.0d + "'", double15 == 10.0d);
// flaky:         org.junit.Assert.assertTrue("'" + double16 + "' != '" + 10.0d + "'", double16 == 10.0d);
// flaky:         org.junit.Assert.assertTrue("'" + double17 + "' != '" + 1.0d + "'", double17 == 1.0d);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 100 + "'", int18 == 100);
    }

    @Test
    public void test1625() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1625");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int2 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray4 = new double[] { 100.0d };
        empiricalDistributionImpl1.load(doubleArray4);
        boolean boolean6 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary7 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary8 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary9 = empiricalDistributionImpl1.getSampleStats();
        java.util.List list10 = empiricalDistributionImpl1.getBinStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl12 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 10);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl14 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray19 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl14.load(doubleArray19);
        double[] doubleArray21 = empiricalDistributionImpl14.getUpperBounds();
        int int22 = empiricalDistributionImpl14.getBinCount();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl24 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl26 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray31 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl26.load(doubleArray31);
        double[] doubleArray33 = empiricalDistributionImpl26.getUpperBounds();
        empiricalDistributionImpl24.load(doubleArray33);
        empiricalDistributionImpl14.load(doubleArray33);
        java.util.List list36 = empiricalDistributionImpl14.getBinStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl38 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int39 = empiricalDistributionImpl38.getBinCount();
        double[] doubleArray41 = new double[] { 100.0d };
        empiricalDistributionImpl38.load(doubleArray41);
        boolean boolean43 = empiricalDistributionImpl38.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary44 = empiricalDistributionImpl38.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary45 = empiricalDistributionImpl38.getSampleStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl47 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl49 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int50 = empiricalDistributionImpl49.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary51 = empiricalDistributionImpl49.getSampleStats();
        double[] doubleArray55 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl49.load(doubleArray55);
        empiricalDistributionImpl47.load(doubleArray55);
        double[] doubleArray61 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl47.load(doubleArray61);
        empiricalDistributionImpl38.load(doubleArray61);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl65 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl67 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int68 = empiricalDistributionImpl67.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary69 = empiricalDistributionImpl67.getSampleStats();
        double[] doubleArray73 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl67.load(doubleArray73);
        empiricalDistributionImpl65.load(doubleArray73);
        empiricalDistributionImpl38.load(doubleArray73);
        empiricalDistributionImpl14.load(doubleArray73);
        empiricalDistributionImpl12.load(doubleArray73);
        empiricalDistributionImpl1.load(doubleArray73);
        java.io.File file80 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(file80);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 35 + "'", int2 == 35);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(statisticalSummary7);
        org.junit.Assert.assertNotNull(statisticalSummary8);
        org.junit.Assert.assertNotNull(statisticalSummary9);
        org.junit.Assert.assertNotNull(list10);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 35 + "'", int22 == 35);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(list36);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 35 + "'", int39 == 35);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(statisticalSummary44);
        org.junit.Assert.assertNotNull(statisticalSummary45);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 35 + "'", int50 == 35);
        org.junit.Assert.assertNull(statisticalSummary51);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 35 + "'", int68 == 35);
        org.junit.Assert.assertNull(statisticalSummary69);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[10.0, 32.0, 1.0]");
    }

    @Test
    public void test1626() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1626");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        boolean boolean2 = empiricalDistributionImpl1.isLoaded();
        int int3 = empiricalDistributionImpl1.getBinCount();
        boolean boolean4 = empiricalDistributionImpl1.isLoaded();
        java.util.List list5 = empiricalDistributionImpl1.getBinStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl7 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl9 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int10 = empiricalDistributionImpl9.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary11 = empiricalDistributionImpl9.getSampleStats();
        double[] doubleArray15 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl9.load(doubleArray15);
        empiricalDistributionImpl7.load(doubleArray15);
        double[] doubleArray21 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl7.load(doubleArray21);
        empiricalDistributionImpl1.load(doubleArray21);
        double double24 = empiricalDistributionImpl1.getNextValue();
        int int25 = empiricalDistributionImpl1.getBinCount();
        java.io.File file26 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(file26);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 35 + "'", int3 == 35);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(list5);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 35 + "'", int10 == 35);
        org.junit.Assert.assertNull(statisticalSummary11);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[-1.0, 0.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double24 + "' != '" + (-1.0d) + "'", double24 == (-1.0d));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 35 + "'", int25 == 35);
    }

    @Test
    public void test1627() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1627");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        int int9 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl11 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl13 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray18 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl13.load(doubleArray18);
        double[] doubleArray20 = empiricalDistributionImpl13.getUpperBounds();
        empiricalDistributionImpl11.load(doubleArray20);
        empiricalDistributionImpl1.load(doubleArray20);
        java.util.List list23 = empiricalDistributionImpl1.getBinStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary24 = empiricalDistributionImpl1.getSampleStats();
        double double25 = empiricalDistributionImpl1.getNextValue();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl27 = new org.apache.commons.math.random.EmpiricalDistributionImpl(10);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl29 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int30 = empiricalDistributionImpl29.getBinCount();
        double[] doubleArray32 = new double[] { 100.0d };
        empiricalDistributionImpl29.load(doubleArray32);
        boolean boolean34 = empiricalDistributionImpl29.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary35 = empiricalDistributionImpl29.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary36 = empiricalDistributionImpl29.getSampleStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl38 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl40 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int41 = empiricalDistributionImpl40.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary42 = empiricalDistributionImpl40.getSampleStats();
        double[] doubleArray46 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl40.load(doubleArray46);
        empiricalDistributionImpl38.load(doubleArray46);
        double[] doubleArray52 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl38.load(doubleArray52);
        empiricalDistributionImpl29.load(doubleArray52);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl56 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl58 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int59 = empiricalDistributionImpl58.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary60 = empiricalDistributionImpl58.getSampleStats();
        double[] doubleArray64 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl58.load(doubleArray64);
        empiricalDistributionImpl56.load(doubleArray64);
        empiricalDistributionImpl29.load(doubleArray64);
        empiricalDistributionImpl27.load(doubleArray64);
        double[] doubleArray69 = empiricalDistributionImpl27.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray69);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl72 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl74 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int75 = empiricalDistributionImpl74.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary76 = empiricalDistributionImpl74.getSampleStats();
        double[] doubleArray80 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl74.load(doubleArray80);
        empiricalDistributionImpl72.load(doubleArray80);
        double[] doubleArray86 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl72.load(doubleArray86);
        double double88 = empiricalDistributionImpl72.getNextValue();
        boolean boolean89 = empiricalDistributionImpl72.isLoaded();
        boolean boolean90 = empiricalDistributionImpl72.isLoaded();
        double[] doubleArray91 = empiricalDistributionImpl72.getUpperBounds();
        java.util.List list92 = empiricalDistributionImpl72.getBinStats();
        double[] doubleArray93 = empiricalDistributionImpl72.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray93);
        java.util.List list95 = empiricalDistributionImpl1.getBinStats();
        int int96 = empiricalDistributionImpl1.getBinCount();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(list23);
        org.junit.Assert.assertNotNull(statisticalSummary24);
// flaky:         org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.75d + "'", double25 == 0.75d);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 35 + "'", int30 == 35);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(statisticalSummary35);
        org.junit.Assert.assertNotNull(statisticalSummary36);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 35 + "'", int41 == 35);
        org.junit.Assert.assertNull(statisticalSummary42);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 35 + "'", int59 == 35);
        org.junit.Assert.assertNull(statisticalSummary60);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[0.3333333333333333, 0.3333333333333333, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 1.0]");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 35 + "'", int75 == 35);
        org.junit.Assert.assertNull(statisticalSummary76);
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[-1.0, 0.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double88 + "' != '" + 0.725092781900493d + "'", double88 == 0.725092781900493d);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray91), "[1.0]");
        org.junit.Assert.assertNotNull(list92);
        org.junit.Assert.assertNotNull(doubleArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray93), "[1.0]");
        org.junit.Assert.assertNotNull(list95);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 35 + "'", int96 == 35);
    }

    @Test
    public void test1628() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1628");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int2 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary3 = empiricalDistributionImpl1.getSampleStats();
        double[] doubleArray7 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl1.load(doubleArray7);
        int int9 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary10 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary11 = empiricalDistributionImpl1.getSampleStats();
        double[] doubleArray12 = empiricalDistributionImpl1.getUpperBounds();
        boolean boolean13 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary14 = empiricalDistributionImpl1.getSampleStats();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 35 + "'", int2 == 35);
        org.junit.Assert.assertNull(statisticalSummary3);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertNotNull(statisticalSummary10);
        org.junit.Assert.assertNotNull(statisticalSummary11);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(statisticalSummary14);
    }

    @Test
    public void test1629() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1629");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 10);
        int int2 = empiricalDistributionImpl1.getBinCount();
        int int3 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary4 = empiricalDistributionImpl1.getSampleStats();
        java.util.List list5 = empiricalDistributionImpl1.getBinStats();
        boolean boolean6 = empiricalDistributionImpl1.isLoaded();
        java.util.List list7 = empiricalDistributionImpl1.getBinStats();
        boolean boolean8 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl10 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray15 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl10.load(doubleArray15);
        double[] doubleArray17 = empiricalDistributionImpl10.getUpperBounds();
        boolean boolean18 = empiricalDistributionImpl10.isLoaded();
        double double19 = empiricalDistributionImpl10.getNextValue();
        int int20 = empiricalDistributionImpl10.getBinCount();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl22 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (short) 100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl24 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int25 = empiricalDistributionImpl24.getBinCount();
        double[] doubleArray27 = new double[] { 100.0d };
        empiricalDistributionImpl24.load(doubleArray27);
        boolean boolean29 = empiricalDistributionImpl24.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary30 = empiricalDistributionImpl24.getSampleStats();
        boolean boolean31 = empiricalDistributionImpl24.isLoaded();
        boolean boolean32 = empiricalDistributionImpl24.isLoaded();
        java.util.List list33 = empiricalDistributionImpl24.getBinStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl35 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray40 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl35.load(doubleArray40);
        double[] doubleArray42 = empiricalDistributionImpl35.getUpperBounds();
        int int43 = empiricalDistributionImpl35.getBinCount();
        double[] doubleArray44 = empiricalDistributionImpl35.getUpperBounds();
        empiricalDistributionImpl24.load(doubleArray44);
        empiricalDistributionImpl22.load(doubleArray44);
        empiricalDistributionImpl10.load(doubleArray44);
        double[] doubleArray48 = empiricalDistributionImpl10.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray48);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 10 + "'", int2 == 10);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 10 + "'", int3 == 10);
        org.junit.Assert.assertNull(statisticalSummary4);
        org.junit.Assert.assertNotNull(list5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(list7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
// flaky:         org.junit.Assert.assertTrue("'" + double19 + "' != '" + (-1.0d) + "'", double19 == (-1.0d));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 35 + "'", int20 == 35);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 35 + "'", int25 == 35);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(statisticalSummary30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(list33);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 35 + "'", int43 == 35);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.9714285714285715, 0.9714285714285715, 0.9714285714285715, 0.9714285714285715, 0.9714285714285715, 0.9714285714285715, 0.9714285714285715, 0.9714285714285715, 0.9714285714285715, 0.9714285714285715, 0.9714285714285715, 1.0]");
    }

    @Test
    public void test1630() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1630");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int2 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray4 = new double[] { 100.0d };
        empiricalDistributionImpl1.load(doubleArray4);
        boolean boolean6 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary7 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary8 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl10 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl12 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int13 = empiricalDistributionImpl12.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary14 = empiricalDistributionImpl12.getSampleStats();
        double[] doubleArray18 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl12.load(doubleArray18);
        empiricalDistributionImpl10.load(doubleArray18);
        double[] doubleArray24 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl10.load(doubleArray24);
        empiricalDistributionImpl1.load(doubleArray24);
        double[] doubleArray27 = empiricalDistributionImpl1.getUpperBounds();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl29 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl31 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int32 = empiricalDistributionImpl31.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary33 = empiricalDistributionImpl31.getSampleStats();
        double[] doubleArray37 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl31.load(doubleArray37);
        empiricalDistributionImpl29.load(doubleArray37);
        double double40 = empiricalDistributionImpl29.getNextValue();
        double[] doubleArray41 = empiricalDistributionImpl29.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray41);
        double double43 = empiricalDistributionImpl1.getNextValue();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl45 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray50 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl45.load(doubleArray50);
        double[] doubleArray52 = empiricalDistributionImpl45.getUpperBounds();
        java.util.List list53 = empiricalDistributionImpl45.getBinStats();
        boolean boolean54 = empiricalDistributionImpl45.isLoaded();
        double[] doubleArray55 = empiricalDistributionImpl45.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray55);
        double[] doubleArray57 = empiricalDistributionImpl1.getUpperBounds();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 35 + "'", int2 == 35);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(statisticalSummary7);
        org.junit.Assert.assertNotNull(statisticalSummary8);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
        org.junit.Assert.assertNull(statisticalSummary14);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 1.0]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 35 + "'", int32 == 35);
        org.junit.Assert.assertNull(statisticalSummary33);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double40 + "' != '" + 1.0d + "'", double40 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray41);
// flaky:         org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.3333333333333333d + "'", double43 == 0.3333333333333333d);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(list53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.9714285714285715, 0.9714285714285715, 0.9714285714285715, 0.9714285714285715, 0.9714285714285715, 0.9714285714285715, 0.9714285714285715, 0.9714285714285715, 0.9714285714285715, 0.9714285714285715, 0.9714285714285715, 1.0]");
    }

    @Test
    public void test1631() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1631");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        double[] doubleArray15 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl1.load(doubleArray15);
        double double17 = empiricalDistributionImpl1.getNextValue();
        boolean boolean18 = empiricalDistributionImpl1.isLoaded();
        boolean boolean19 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl21 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        boolean boolean22 = empiricalDistributionImpl21.isLoaded();
        int int23 = empiricalDistributionImpl21.getBinCount();
        boolean boolean24 = empiricalDistributionImpl21.isLoaded();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl26 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int27 = empiricalDistributionImpl26.getBinCount();
        double[] doubleArray29 = new double[] { 100.0d };
        empiricalDistributionImpl26.load(doubleArray29);
        empiricalDistributionImpl21.load(doubleArray29);
        empiricalDistributionImpl1.load(doubleArray29);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl34 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray39 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl34.load(doubleArray39);
        double[] doubleArray41 = empiricalDistributionImpl34.getUpperBounds();
        int int42 = empiricalDistributionImpl34.getBinCount();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl44 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl46 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray51 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl46.load(doubleArray51);
        double[] doubleArray53 = empiricalDistributionImpl46.getUpperBounds();
        empiricalDistributionImpl44.load(doubleArray53);
        empiricalDistributionImpl34.load(doubleArray53);
        empiricalDistributionImpl1.load(doubleArray53);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl58 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int59 = empiricalDistributionImpl58.getBinCount();
        double[] doubleArray61 = new double[] { 100.0d };
        empiricalDistributionImpl58.load(doubleArray61);
        boolean boolean63 = empiricalDistributionImpl58.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary64 = empiricalDistributionImpl58.getSampleStats();
        boolean boolean65 = empiricalDistributionImpl58.isLoaded();
        boolean boolean66 = empiricalDistributionImpl58.isLoaded();
        double[] doubleArray67 = empiricalDistributionImpl58.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray67);
        java.io.File file69 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(file69);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[-1.0, 0.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.43715653725159015d + "'", double17 == 0.43715653725159015d);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 35 + "'", int23 == 35);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 35 + "'", int27 == 35);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[100.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 35 + "'", int42 == 35);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 35 + "'", int59 == 35);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(statisticalSummary64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
    }

    @Test
    public void test1632() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1632");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        double[] doubleArray15 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl1.load(doubleArray15);
        double double17 = empiricalDistributionImpl1.getNextValue();
        int int18 = empiricalDistributionImpl1.getBinCount();
        boolean boolean19 = empiricalDistributionImpl1.isLoaded();
        double[] doubleArray20 = empiricalDistributionImpl1.getUpperBounds();
        java.lang.Class<?> wildcardClass21 = empiricalDistributionImpl1.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[-1.0, 0.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.45655539058502226d + "'", double17 == 0.45655539058502226d);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0]");
        org.junit.Assert.assertNotNull(wildcardClass21);
    }

    @Test
    public void test1633() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1633");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        boolean boolean12 = empiricalDistributionImpl1.isLoaded();
        boolean boolean13 = empiricalDistributionImpl1.isLoaded();
        double[] doubleArray14 = empiricalDistributionImpl1.getUpperBounds();
        double[] doubleArray15 = empiricalDistributionImpl1.getUpperBounds();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary16 = empiricalDistributionImpl1.getSampleStats();
        double[] doubleArray17 = empiricalDistributionImpl1.getUpperBounds();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl19 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray24 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl19.load(doubleArray24);
        double[] doubleArray26 = empiricalDistributionImpl19.getUpperBounds();
        int int27 = empiricalDistributionImpl19.getBinCount();
        double[] doubleArray28 = empiricalDistributionImpl19.getUpperBounds();
        int int29 = empiricalDistributionImpl19.getBinCount();
        java.util.List list30 = empiricalDistributionImpl19.getBinStats();
        int int31 = empiricalDistributionImpl19.getBinCount();
        double double32 = empiricalDistributionImpl19.getNextValue();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl34 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int35 = empiricalDistributionImpl34.getBinCount();
        double[] doubleArray37 = new double[] { 100.0d };
        empiricalDistributionImpl34.load(doubleArray37);
        boolean boolean39 = empiricalDistributionImpl34.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary40 = empiricalDistributionImpl34.getSampleStats();
        boolean boolean41 = empiricalDistributionImpl34.isLoaded();
        boolean boolean42 = empiricalDistributionImpl34.isLoaded();
        double[] doubleArray43 = empiricalDistributionImpl34.getUpperBounds();
        empiricalDistributionImpl19.load(doubleArray43);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl46 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int47 = empiricalDistributionImpl46.getBinCount();
        double[] doubleArray49 = new double[] { 100.0d };
        empiricalDistributionImpl46.load(doubleArray49);
        boolean boolean51 = empiricalDistributionImpl46.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary52 = empiricalDistributionImpl46.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary53 = empiricalDistributionImpl46.getSampleStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl55 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl57 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int58 = empiricalDistributionImpl57.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary59 = empiricalDistributionImpl57.getSampleStats();
        double[] doubleArray63 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl57.load(doubleArray63);
        empiricalDistributionImpl55.load(doubleArray63);
        double[] doubleArray69 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl55.load(doubleArray69);
        empiricalDistributionImpl46.load(doubleArray69);
        double[] doubleArray72 = empiricalDistributionImpl46.getUpperBounds();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl74 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl76 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int77 = empiricalDistributionImpl76.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary78 = empiricalDistributionImpl76.getSampleStats();
        double[] doubleArray82 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl76.load(doubleArray82);
        empiricalDistributionImpl74.load(doubleArray82);
        empiricalDistributionImpl46.load(doubleArray82);
        empiricalDistributionImpl19.load(doubleArray82);
        double double87 = empiricalDistributionImpl19.getNextValue();
        double[] doubleArray88 = empiricalDistributionImpl19.getUpperBounds();
        double[] doubleArray89 = empiricalDistributionImpl19.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray89);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[1.0]");
        org.junit.Assert.assertNotNull(statisticalSummary16);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 35 + "'", int27 == 35);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 35 + "'", int29 == 35);
        org.junit.Assert.assertNotNull(list30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 35 + "'", int31 == 35);
// flaky:         org.junit.Assert.assertTrue("'" + double32 + "' != '" + (-1.0d) + "'", double32 == (-1.0d));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 35 + "'", int35 == 35);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(statisticalSummary40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 35 + "'", int47 == 35);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(statisticalSummary52);
        org.junit.Assert.assertNotNull(statisticalSummary53);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 35 + "'", int58 == 35);
        org.junit.Assert.assertNull(statisticalSummary59);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 1.0]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 35 + "'", int77 == 35);
        org.junit.Assert.assertNull(statisticalSummary78);
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double87 + "' != '" + 32.0d + "'", double87 == 32.0d);
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray89), "[0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 1.0]");
    }

    @Test
    public void test1634() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1634");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 10);
        int int2 = empiricalDistributionImpl1.getBinCount();
        int int3 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary4 = empiricalDistributionImpl1.getSampleStats();
        int int5 = empiricalDistributionImpl1.getBinCount();
        int int6 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl8 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray13 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl8.load(doubleArray13);
        double[] doubleArray15 = empiricalDistributionImpl8.getUpperBounds();
        int int16 = empiricalDistributionImpl8.getBinCount();
        double[] doubleArray17 = empiricalDistributionImpl8.getUpperBounds();
        int int18 = empiricalDistributionImpl8.getBinCount();
        java.util.List list19 = empiricalDistributionImpl8.getBinStats();
        int int20 = empiricalDistributionImpl8.getBinCount();
        double double21 = empiricalDistributionImpl8.getNextValue();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl23 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int24 = empiricalDistributionImpl23.getBinCount();
        double[] doubleArray26 = new double[] { 100.0d };
        empiricalDistributionImpl23.load(doubleArray26);
        boolean boolean28 = empiricalDistributionImpl23.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary29 = empiricalDistributionImpl23.getSampleStats();
        boolean boolean30 = empiricalDistributionImpl23.isLoaded();
        boolean boolean31 = empiricalDistributionImpl23.isLoaded();
        double[] doubleArray32 = empiricalDistributionImpl23.getUpperBounds();
        empiricalDistributionImpl8.load(doubleArray32);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl35 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int36 = empiricalDistributionImpl35.getBinCount();
        double[] doubleArray38 = new double[] { 100.0d };
        empiricalDistributionImpl35.load(doubleArray38);
        boolean boolean40 = empiricalDistributionImpl35.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary41 = empiricalDistributionImpl35.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary42 = empiricalDistributionImpl35.getSampleStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl44 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl46 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int47 = empiricalDistributionImpl46.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary48 = empiricalDistributionImpl46.getSampleStats();
        double[] doubleArray52 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl46.load(doubleArray52);
        empiricalDistributionImpl44.load(doubleArray52);
        double[] doubleArray58 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl44.load(doubleArray58);
        empiricalDistributionImpl35.load(doubleArray58);
        double[] doubleArray61 = empiricalDistributionImpl35.getUpperBounds();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl63 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl65 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int66 = empiricalDistributionImpl65.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary67 = empiricalDistributionImpl65.getSampleStats();
        double[] doubleArray71 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl65.load(doubleArray71);
        empiricalDistributionImpl63.load(doubleArray71);
        empiricalDistributionImpl35.load(doubleArray71);
        empiricalDistributionImpl8.load(doubleArray71);
        double double76 = empiricalDistributionImpl8.getNextValue();
        double[] doubleArray77 = empiricalDistributionImpl8.getUpperBounds();
        double[] doubleArray78 = empiricalDistributionImpl8.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray78);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 10 + "'", int2 == 10);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 10 + "'", int3 == 10);
        org.junit.Assert.assertNull(statisticalSummary4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 10 + "'", int5 == 10);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 10 + "'", int6 == 10);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 35 + "'", int16 == 35);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 35 + "'", int18 == 35);
        org.junit.Assert.assertNotNull(list19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 35 + "'", int20 == 35);
// flaky:         org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 35 + "'", int24 == 35);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(statisticalSummary29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 35 + "'", int36 == 35);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(statisticalSummary41);
        org.junit.Assert.assertNotNull(statisticalSummary42);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 35 + "'", int47 == 35);
        org.junit.Assert.assertNull(statisticalSummary48);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 1.0]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 35 + "'", int66 == 35);
        org.junit.Assert.assertNull(statisticalSummary67);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double76 + "' != '" + 10.0d + "'", double76 == 10.0d);
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 1.0]");
    }

    @Test
    public void test1635() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1635");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int2 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray4 = new double[] { 100.0d };
        empiricalDistributionImpl1.load(doubleArray4);
        boolean boolean6 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary7 = empiricalDistributionImpl1.getSampleStats();
        boolean boolean8 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary9 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary10 = empiricalDistributionImpl1.getSampleStats();
        double double11 = empiricalDistributionImpl1.getNextValue();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl13 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl15 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int16 = empiricalDistributionImpl15.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary17 = empiricalDistributionImpl15.getSampleStats();
        double[] doubleArray21 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl15.load(doubleArray21);
        empiricalDistributionImpl13.load(doubleArray21);
        double double24 = empiricalDistributionImpl13.getNextValue();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl26 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl28 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int29 = empiricalDistributionImpl28.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary30 = empiricalDistributionImpl28.getSampleStats();
        double[] doubleArray34 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl28.load(doubleArray34);
        empiricalDistributionImpl26.load(doubleArray34);
        double double37 = empiricalDistributionImpl26.getNextValue();
        double[] doubleArray38 = empiricalDistributionImpl26.getUpperBounds();
        double[] doubleArray39 = empiricalDistributionImpl26.getUpperBounds();
        empiricalDistributionImpl13.load(doubleArray39);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl42 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int43 = empiricalDistributionImpl42.getBinCount();
        double[] doubleArray45 = new double[] { 100.0d };
        empiricalDistributionImpl42.load(doubleArray45);
        boolean boolean47 = empiricalDistributionImpl42.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary48 = empiricalDistributionImpl42.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary49 = empiricalDistributionImpl42.getSampleStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl51 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl53 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int54 = empiricalDistributionImpl53.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary55 = empiricalDistributionImpl53.getSampleStats();
        double[] doubleArray59 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl53.load(doubleArray59);
        empiricalDistributionImpl51.load(doubleArray59);
        double[] doubleArray65 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl51.load(doubleArray65);
        empiricalDistributionImpl42.load(doubleArray65);
        double[] doubleArray68 = empiricalDistributionImpl42.getUpperBounds();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl70 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl72 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int73 = empiricalDistributionImpl72.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary74 = empiricalDistributionImpl72.getSampleStats();
        double[] doubleArray78 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl72.load(doubleArray78);
        empiricalDistributionImpl70.load(doubleArray78);
        double double81 = empiricalDistributionImpl70.getNextValue();
        double[] doubleArray82 = empiricalDistributionImpl70.getUpperBounds();
        empiricalDistributionImpl42.load(doubleArray82);
        boolean boolean84 = empiricalDistributionImpl42.isLoaded();
        double[] doubleArray85 = empiricalDistributionImpl42.getUpperBounds();
        empiricalDistributionImpl13.load(doubleArray85);
        empiricalDistributionImpl1.load(doubleArray85);
        java.util.List list88 = empiricalDistributionImpl1.getBinStats();
        java.lang.Class<?> wildcardClass89 = empiricalDistributionImpl1.getClass();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 35 + "'", int2 == 35);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(statisticalSummary7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(statisticalSummary9);
        org.junit.Assert.assertNotNull(statisticalSummary10);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 35 + "'", int16 == 35);
        org.junit.Assert.assertNull(statisticalSummary17);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double24 + "' != '" + 32.0d + "'", double24 == 32.0d);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 35 + "'", int29 == 35);
        org.junit.Assert.assertNull(statisticalSummary30);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double37 + "' != '" + 1.0d + "'", double37 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 35 + "'", int43 == 35);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(statisticalSummary48);
        org.junit.Assert.assertNotNull(statisticalSummary49);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 35 + "'", int54 == 35);
        org.junit.Assert.assertNull(statisticalSummary55);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 1.0]");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 35 + "'", int73 == 35);
        org.junit.Assert.assertNull(statisticalSummary74);
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double81 + "' != '" + 10.0d + "'", double81 == 10.0d);
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 1.0]");
        org.junit.Assert.assertNotNull(list88);
        org.junit.Assert.assertNotNull(wildcardClass89);
    }

    @Test
    public void test1636() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1636");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        int int9 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl11 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl13 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray18 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl13.load(doubleArray18);
        double[] doubleArray20 = empiricalDistributionImpl13.getUpperBounds();
        empiricalDistributionImpl11.load(doubleArray20);
        empiricalDistributionImpl1.load(doubleArray20);
        java.util.List list23 = empiricalDistributionImpl1.getBinStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl25 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int26 = empiricalDistributionImpl25.getBinCount();
        double[] doubleArray28 = new double[] { 100.0d };
        empiricalDistributionImpl25.load(doubleArray28);
        boolean boolean30 = empiricalDistributionImpl25.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary31 = empiricalDistributionImpl25.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary32 = empiricalDistributionImpl25.getSampleStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl34 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl36 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int37 = empiricalDistributionImpl36.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary38 = empiricalDistributionImpl36.getSampleStats();
        double[] doubleArray42 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl36.load(doubleArray42);
        empiricalDistributionImpl34.load(doubleArray42);
        double[] doubleArray48 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl34.load(doubleArray48);
        empiricalDistributionImpl25.load(doubleArray48);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl52 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl54 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int55 = empiricalDistributionImpl54.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary56 = empiricalDistributionImpl54.getSampleStats();
        double[] doubleArray60 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl54.load(doubleArray60);
        empiricalDistributionImpl52.load(doubleArray60);
        empiricalDistributionImpl25.load(doubleArray60);
        empiricalDistributionImpl1.load(doubleArray60);
        double[] doubleArray69 = new double[] { 1.1354582769782435d, (short) 0, (-0.1362032819111886d), 10L };
        empiricalDistributionImpl1.load(doubleArray69);
        double double71 = empiricalDistributionImpl1.getNextValue();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl73 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray78 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl73.load(doubleArray78);
        double[] doubleArray80 = empiricalDistributionImpl73.getUpperBounds();
        int int81 = empiricalDistributionImpl73.getBinCount();
        double[] doubleArray82 = empiricalDistributionImpl73.getUpperBounds();
        int int83 = empiricalDistributionImpl73.getBinCount();
        java.util.List list84 = empiricalDistributionImpl73.getBinStats();
        boolean boolean85 = empiricalDistributionImpl73.isLoaded();
        double[] doubleArray86 = empiricalDistributionImpl73.getUpperBounds();
        boolean boolean87 = empiricalDistributionImpl73.isLoaded();
        double[] doubleArray88 = empiricalDistributionImpl73.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray88);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary90 = empiricalDistributionImpl1.getSampleStats();
        java.util.List list91 = empiricalDistributionImpl1.getBinStats();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(list23);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 35 + "'", int26 == 35);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(statisticalSummary31);
        org.junit.Assert.assertNotNull(statisticalSummary32);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 35 + "'", int37 == 35);
        org.junit.Assert.assertNull(statisticalSummary38);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 35 + "'", int55 == 35);
        org.junit.Assert.assertNull(statisticalSummary56);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[1.1354582769782435, 0.0, -0.1362032819111886, 10.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double71 + "' != '" + 10.0d + "'", double71 == 10.0d);
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 35 + "'", int81 == 35);
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 35 + "'", int83 == 35);
        org.junit.Assert.assertNotNull(list84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(statisticalSummary90);
        org.junit.Assert.assertNotNull(list91);
    }

    @Test
    public void test1637() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1637");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        java.util.List list9 = empiricalDistributionImpl1.getBinStats();
        boolean boolean10 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary11 = empiricalDistributionImpl1.getSampleStats();
        int int12 = empiricalDistributionImpl1.getBinCount();
        boolean boolean13 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary14 = empiricalDistributionImpl1.getSampleStats();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(list9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(statisticalSummary11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 35 + "'", int12 == 35);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(statisticalSummary14);
    }

    @Test
    public void test1638() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1638");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray8 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl3.load(doubleArray8);
        double[] doubleArray10 = empiricalDistributionImpl3.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray10);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl13 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int14 = empiricalDistributionImpl13.getBinCount();
        double[] doubleArray16 = new double[] { 100.0d };
        empiricalDistributionImpl13.load(doubleArray16);
        empiricalDistributionImpl1.load(doubleArray16);
        java.util.List list19 = empiricalDistributionImpl1.getBinStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary20 = empiricalDistributionImpl1.getSampleStats();
        double double21 = empiricalDistributionImpl1.getNextValue();
        java.util.List list22 = empiricalDistributionImpl1.getBinStats();
        int int23 = empiricalDistributionImpl1.getBinCount();
        boolean boolean24 = empiricalDistributionImpl1.isLoaded();
        double[] doubleArray25 = empiricalDistributionImpl1.getUpperBounds();
        double[] doubleArray26 = empiricalDistributionImpl1.getUpperBounds();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary27 = empiricalDistributionImpl1.getSampleStats();
        java.lang.Class<?> wildcardClass28 = statisticalSummary27.getClass();
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 35 + "'", int14 == 35);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[100.0]");
        org.junit.Assert.assertNotNull(list19);
        org.junit.Assert.assertNotNull(statisticalSummary20);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 100.0d + "'", double21 == 100.0d);
        org.junit.Assert.assertNotNull(list22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 35 + "'", int23 == 35);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(statisticalSummary27);
        org.junit.Assert.assertNotNull(wildcardClass28);
    }

    @Test
    public void test1639() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1639");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        java.util.List list9 = empiricalDistributionImpl1.getBinStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl11 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl13 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int14 = empiricalDistributionImpl13.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary15 = empiricalDistributionImpl13.getSampleStats();
        double[] doubleArray19 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl13.load(doubleArray19);
        empiricalDistributionImpl11.load(doubleArray19);
        double double22 = empiricalDistributionImpl11.getNextValue();
        double[] doubleArray23 = empiricalDistributionImpl11.getUpperBounds();
        double[] doubleArray24 = empiricalDistributionImpl11.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray24);
        java.util.List list26 = empiricalDistributionImpl1.getBinStats();
        double double27 = empiricalDistributionImpl1.getNextValue();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(list9);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 35 + "'", int14 == 35);
        org.junit.Assert.assertNull(statisticalSummary15);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double22 + "' != '" + 32.0d + "'", double22 == 32.0d);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertNotNull(list26);
// flaky:         org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.6666666666666666d + "'", double27 == 0.6666666666666666d);
    }

    @Test
    public void test1640() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1640");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        int int9 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray10 = empiricalDistributionImpl1.getUpperBounds();
        int int11 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray12 = empiricalDistributionImpl1.getUpperBounds();
        double double13 = empiricalDistributionImpl1.getNextValue();
        double double14 = empiricalDistributionImpl1.getNextValue();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 35 + "'", int11 == 35);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double13 + "' != '" + (-1.0d) + "'", double13 == (-1.0d));
// flaky:         org.junit.Assert.assertTrue("'" + double14 + "' != '" + 10.0d + "'", double14 == 10.0d);
    }

    @Test
    public void test1641() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1641");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl10 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl12 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int13 = empiricalDistributionImpl12.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary14 = empiricalDistributionImpl12.getSampleStats();
        double[] doubleArray18 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl12.load(doubleArray18);
        empiricalDistributionImpl10.load(doubleArray18);
        empiricalDistributionImpl1.load(doubleArray18);
        double double22 = empiricalDistributionImpl1.getNextValue();
        java.util.List list23 = empiricalDistributionImpl1.getBinStats();
        int int24 = empiricalDistributionImpl1.getBinCount();
        java.util.List list25 = empiricalDistributionImpl1.getBinStats();
        double double26 = empiricalDistributionImpl1.getNextValue();
        java.util.List list27 = empiricalDistributionImpl1.getBinStats();
        double[] doubleArray28 = empiricalDistributionImpl1.getUpperBounds();
        boolean boolean29 = empiricalDistributionImpl1.isLoaded();
        java.io.File file30 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(file30);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
        org.junit.Assert.assertNull(statisticalSummary14);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double22 + "' != '" + 32.0d + "'", double22 == 32.0d);
        org.junit.Assert.assertNotNull(list23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 35 + "'", int24 == 35);
        org.junit.Assert.assertNotNull(list25);
// flaky:         org.junit.Assert.assertTrue("'" + double26 + "' != '" + 10.0d + "'", double26 == 10.0d);
        org.junit.Assert.assertNotNull(list27);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
    }

    @Test
    public void test1642() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1642");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        double double12 = empiricalDistributionImpl1.getNextValue();
        double double13 = empiricalDistributionImpl1.getNextValue();
        double[] doubleArray14 = empiricalDistributionImpl1.getUpperBounds();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double12 + "' != '" + 32.0d + "'", double12 == 32.0d);
// flaky:         org.junit.Assert.assertTrue("'" + double13 + "' != '" + 32.0d + "'", double13 == 32.0d);
        org.junit.Assert.assertNotNull(doubleArray14);
    }

    @Test
    public void test1643() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1643");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (short) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray8 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl3.load(doubleArray8);
        double[] doubleArray10 = empiricalDistributionImpl3.getUpperBounds();
        int int11 = empiricalDistributionImpl3.getBinCount();
        double[] doubleArray12 = empiricalDistributionImpl3.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray12);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl15 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl17 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray22 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl17.load(doubleArray22);
        double[] doubleArray24 = empiricalDistributionImpl17.getUpperBounds();
        empiricalDistributionImpl15.load(doubleArray24);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl27 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int28 = empiricalDistributionImpl27.getBinCount();
        double[] doubleArray30 = new double[] { 100.0d };
        empiricalDistributionImpl27.load(doubleArray30);
        empiricalDistributionImpl15.load(doubleArray30);
        double[] doubleArray33 = empiricalDistributionImpl15.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray33);
        int int35 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl37 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray42 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl37.load(doubleArray42);
        double[] doubleArray44 = empiricalDistributionImpl37.getUpperBounds();
        int int45 = empiricalDistributionImpl37.getBinCount();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl47 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl49 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray54 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl49.load(doubleArray54);
        double[] doubleArray56 = empiricalDistributionImpl49.getUpperBounds();
        empiricalDistributionImpl47.load(doubleArray56);
        empiricalDistributionImpl37.load(doubleArray56);
        java.util.List list59 = empiricalDistributionImpl37.getBinStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary60 = empiricalDistributionImpl37.getSampleStats();
        double double61 = empiricalDistributionImpl37.getNextValue();
        double[] doubleArray62 = empiricalDistributionImpl37.getUpperBounds();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl64 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray69 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl64.load(doubleArray69);
        double[] doubleArray71 = empiricalDistributionImpl64.getUpperBounds();
        double[] doubleArray72 = empiricalDistributionImpl64.getUpperBounds();
        empiricalDistributionImpl37.load(doubleArray72);
        empiricalDistributionImpl1.load(doubleArray72);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 35 + "'", int11 == 35);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 35 + "'", int28 == 35);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[100.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 35 + "'", int45 == 35);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(list59);
        org.junit.Assert.assertNotNull(statisticalSummary60);
// flaky:         org.junit.Assert.assertTrue("'" + double61 + "' != '" + 0.75d + "'", double61 == 0.75d);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.9714285714285715, 0.9714285714285715, 0.9714285714285715, 0.9714285714285715, 0.9714285714285715, 0.9714285714285715, 0.9714285714285715, 0.9714285714285715, 0.9714285714285715, 0.9714285714285715, 0.9714285714285715, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
    }

    @Test
    public void test1644() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1644");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 10);
        int int2 = empiricalDistributionImpl1.getBinCount();
        boolean boolean3 = empiricalDistributionImpl1.isLoaded();
        int int4 = empiricalDistributionImpl1.getBinCount();
        java.util.List list5 = empiricalDistributionImpl1.getBinStats();
        boolean boolean6 = empiricalDistributionImpl1.isLoaded();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 10 + "'", int2 == 10);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 10 + "'", int4 == 10);
        org.junit.Assert.assertNotNull(list5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test1645() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1645");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        int int9 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl11 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl13 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray18 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl13.load(doubleArray18);
        double[] doubleArray20 = empiricalDistributionImpl13.getUpperBounds();
        empiricalDistributionImpl11.load(doubleArray20);
        empiricalDistributionImpl1.load(doubleArray20);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl24 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl26 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray31 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl26.load(doubleArray31);
        double[] doubleArray33 = empiricalDistributionImpl26.getUpperBounds();
        empiricalDistributionImpl24.load(doubleArray33);
        empiricalDistributionImpl1.load(doubleArray33);
        double[] doubleArray36 = empiricalDistributionImpl1.getUpperBounds();
        double[] doubleArray37 = empiricalDistributionImpl1.getUpperBounds();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.9714285714285715, 0.9714285714285715, 0.9714285714285715, 0.9714285714285715, 0.9714285714285715, 0.9714285714285715, 0.9714285714285715, 0.9714285714285715, 0.9714285714285715, 0.9714285714285715, 0.9714285714285715, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.9714285714285715, 0.9714285714285715, 0.9714285714285715, 0.9714285714285715, 0.9714285714285715, 0.9714285714285715, 0.9714285714285715, 0.9714285714285715, 0.9714285714285715, 0.9714285714285715, 0.9714285714285715, 1.0]");
    }

    @Test
    public void test1646() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1646");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        double[] doubleArray15 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl1.load(doubleArray15);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary17 = empiricalDistributionImpl1.getSampleStats();
        int int18 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary19 = empiricalDistributionImpl1.getSampleStats();
        java.util.List list20 = empiricalDistributionImpl1.getBinStats();
        double double21 = empiricalDistributionImpl1.getNextValue();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(statisticalSummary17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(statisticalSummary19);
        org.junit.Assert.assertNotNull(list20);
// flaky:         org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.031810319282447d + "'", double21 == 1.031810319282447d);
    }

    @Test
    public void test1647() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1647");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (short) 0);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary2 = empiricalDistributionImpl1.getSampleStats();
        int int3 = empiricalDistributionImpl1.getBinCount();
        java.lang.Class<?> wildcardClass4 = empiricalDistributionImpl1.getClass();
        org.junit.Assert.assertNull(statisticalSummary2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test1648() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1648");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        double[] doubleArray15 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl1.load(doubleArray15);
        double[] doubleArray17 = empiricalDistributionImpl1.getUpperBounds();
        double double18 = empiricalDistributionImpl1.getNextValue();
        boolean boolean19 = empiricalDistributionImpl1.isLoaded();
        int int20 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary21 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary22 = empiricalDistributionImpl1.getSampleStats();
        boolean boolean23 = empiricalDistributionImpl1.isLoaded();
        boolean boolean24 = empiricalDistributionImpl1.isLoaded();
        java.util.List list25 = empiricalDistributionImpl1.getBinStats();
        java.util.List list26 = empiricalDistributionImpl1.getBinStats();
        int int27 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl29 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        boolean boolean30 = empiricalDistributionImpl29.isLoaded();
        int int31 = empiricalDistributionImpl29.getBinCount();
        boolean boolean32 = empiricalDistributionImpl29.isLoaded();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl34 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int35 = empiricalDistributionImpl34.getBinCount();
        double[] doubleArray37 = new double[] { 100.0d };
        empiricalDistributionImpl34.load(doubleArray37);
        empiricalDistributionImpl29.load(doubleArray37);
        empiricalDistributionImpl1.load(doubleArray37);
        java.net.URL uRL41 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(uRL41);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.8919612432033343d + "'", double18 == 0.8919612432033343d);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(statisticalSummary21);
        org.junit.Assert.assertNotNull(statisticalSummary22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(list25);
        org.junit.Assert.assertNotNull(list26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 35 + "'", int31 == 35);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 35 + "'", int35 == 35);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[100.0]");
    }

    @Test
    public void test1649() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1649");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray8 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl3.load(doubleArray8);
        double[] doubleArray10 = empiricalDistributionImpl3.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray10);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl13 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int14 = empiricalDistributionImpl13.getBinCount();
        double[] doubleArray16 = new double[] { 100.0d };
        empiricalDistributionImpl13.load(doubleArray16);
        empiricalDistributionImpl1.load(doubleArray16);
        java.util.List list19 = empiricalDistributionImpl1.getBinStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary20 = empiricalDistributionImpl1.getSampleStats();
        double double21 = empiricalDistributionImpl1.getNextValue();
        java.util.List list22 = empiricalDistributionImpl1.getBinStats();
        int int23 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray24 = empiricalDistributionImpl1.getUpperBounds();
        double[] doubleArray25 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(doubleArray25);
            org.junit.Assert.fail("Expected exception of type java.lang.RuntimeException; message: null");
        } catch (java.lang.RuntimeException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 35 + "'", int14 == 35);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[100.0]");
        org.junit.Assert.assertNotNull(list19);
        org.junit.Assert.assertNotNull(statisticalSummary20);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 100.0d + "'", double21 == 100.0d);
        org.junit.Assert.assertNotNull(list22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 35 + "'", int23 == 35);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
    }

    @Test
    public void test1650() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1650");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        double[] doubleArray15 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl1.load(doubleArray15);
        double[] doubleArray17 = empiricalDistributionImpl1.getUpperBounds();
        double double18 = empiricalDistributionImpl1.getNextValue();
        boolean boolean19 = empiricalDistributionImpl1.isLoaded();
        int int20 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary21 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary22 = empiricalDistributionImpl1.getSampleStats();
        boolean boolean23 = empiricalDistributionImpl1.isLoaded();
        boolean boolean24 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl26 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int27 = empiricalDistributionImpl26.getBinCount();
        double[] doubleArray29 = new double[] { 100.0d };
        empiricalDistributionImpl26.load(doubleArray29);
        boolean boolean31 = empiricalDistributionImpl26.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary32 = empiricalDistributionImpl26.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary33 = empiricalDistributionImpl26.getSampleStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl35 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl37 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int38 = empiricalDistributionImpl37.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary39 = empiricalDistributionImpl37.getSampleStats();
        double[] doubleArray43 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl37.load(doubleArray43);
        empiricalDistributionImpl35.load(doubleArray43);
        double[] doubleArray49 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl35.load(doubleArray49);
        empiricalDistributionImpl26.load(doubleArray49);
        double[] doubleArray52 = empiricalDistributionImpl26.getUpperBounds();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl54 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl56 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int57 = empiricalDistributionImpl56.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary58 = empiricalDistributionImpl56.getSampleStats();
        double[] doubleArray62 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl56.load(doubleArray62);
        empiricalDistributionImpl54.load(doubleArray62);
        empiricalDistributionImpl26.load(doubleArray62);
        int int66 = empiricalDistributionImpl26.getBinCount();
        double[] doubleArray67 = empiricalDistributionImpl26.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray67);
        double double69 = empiricalDistributionImpl1.getNextValue();
        double double70 = empiricalDistributionImpl1.getNextValue();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.8965731484668378d + "'", double18 == 0.8965731484668378d);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(statisticalSummary21);
        org.junit.Assert.assertNotNull(statisticalSummary22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 35 + "'", int27 == 35);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(statisticalSummary32);
        org.junit.Assert.assertNotNull(statisticalSummary33);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 35 + "'", int38 == 35);
        org.junit.Assert.assertNull(statisticalSummary39);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 1.0]");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 35 + "'", int57 == 35);
        org.junit.Assert.assertNull(statisticalSummary58);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 35 + "'", int66 == 35);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.4807014612468111d + "'", double69 == 0.4807014612468111d);
// flaky:         org.junit.Assert.assertTrue("'" + double70 + "' != '" + 0.32521547853135047d + "'", double70 == 0.32521547853135047d);
    }

    @Test
    public void test1651() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1651");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 10);
        int int2 = empiricalDistributionImpl1.getBinCount();
        int int3 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary4 = empiricalDistributionImpl1.getSampleStats();
        int int5 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary6 = empiricalDistributionImpl1.getSampleStats();
        int int7 = empiricalDistributionImpl1.getBinCount();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 10 + "'", int2 == 10);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 10 + "'", int3 == 10);
        org.junit.Assert.assertNull(statisticalSummary4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 10 + "'", int5 == 10);
        org.junit.Assert.assertNull(statisticalSummary6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
    }

    @Test
    public void test1652() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1652");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        double double12 = empiricalDistributionImpl1.getNextValue();
        java.util.List list13 = empiricalDistributionImpl1.getBinStats();
        double double14 = empiricalDistributionImpl1.getNextValue();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl16 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl18 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int19 = empiricalDistributionImpl18.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary20 = empiricalDistributionImpl18.getSampleStats();
        double[] doubleArray24 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl18.load(doubleArray24);
        empiricalDistributionImpl16.load(doubleArray24);
        double double27 = empiricalDistributionImpl16.getNextValue();
        double[] doubleArray28 = empiricalDistributionImpl16.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray28);
        java.lang.Class<?> wildcardClass30 = empiricalDistributionImpl1.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double12 + "' != '" + 1.0d + "'", double12 == 1.0d);
        org.junit.Assert.assertNotNull(list13);
// flaky:         org.junit.Assert.assertTrue("'" + double14 + "' != '" + 32.0d + "'", double14 == 32.0d);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 35 + "'", int19 == 35);
        org.junit.Assert.assertNull(statisticalSummary20);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double27 + "' != '" + 32.0d + "'", double27 == 32.0d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(wildcardClass30);
    }

    @Test
    public void test1653() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1653");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        int int9 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl11 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl13 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray18 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl13.load(doubleArray18);
        double[] doubleArray20 = empiricalDistributionImpl13.getUpperBounds();
        empiricalDistributionImpl11.load(doubleArray20);
        empiricalDistributionImpl1.load(doubleArray20);
        java.util.List list23 = empiricalDistributionImpl1.getBinStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary24 = empiricalDistributionImpl1.getSampleStats();
        double double25 = empiricalDistributionImpl1.getNextValue();
        double[] doubleArray26 = empiricalDistributionImpl1.getUpperBounds();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl28 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray33 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl28.load(doubleArray33);
        double[] doubleArray35 = empiricalDistributionImpl28.getUpperBounds();
        double[] doubleArray36 = empiricalDistributionImpl28.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray36);
        java.lang.Class<?> wildcardClass38 = doubleArray36.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(list23);
        org.junit.Assert.assertNotNull(statisticalSummary24);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.75d + "'", double25 == 0.75d);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.9714285714285715, 0.9714285714285715, 0.9714285714285715, 0.9714285714285715, 0.9714285714285715, 0.9714285714285715, 0.9714285714285715, 0.9714285714285715, 0.9714285714285715, 0.9714285714285715, 0.9714285714285715, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(wildcardClass38);
    }

    @Test
    public void test1654() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1654");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        double double12 = empiricalDistributionImpl1.getNextValue();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl14 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl16 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int17 = empiricalDistributionImpl16.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary18 = empiricalDistributionImpl16.getSampleStats();
        double[] doubleArray22 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl16.load(doubleArray22);
        empiricalDistributionImpl14.load(doubleArray22);
        double double25 = empiricalDistributionImpl14.getNextValue();
        double[] doubleArray26 = empiricalDistributionImpl14.getUpperBounds();
        double[] doubleArray27 = empiricalDistributionImpl14.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray27);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary29 = empiricalDistributionImpl1.getSampleStats();
        double double30 = empiricalDistributionImpl1.getNextValue();
        double double31 = empiricalDistributionImpl1.getNextValue();
        java.util.List list32 = empiricalDistributionImpl1.getBinStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary33 = empiricalDistributionImpl1.getSampleStats();
        java.io.File file34 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(file34);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 35 + "'", int17 == 35);
        org.junit.Assert.assertNull(statisticalSummary18);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double25 + "' != '" + 1.0d + "'", double25 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertNotNull(statisticalSummary29);
// flaky:         org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.6666666666666666d + "'", double30 == 0.6666666666666666d);
// flaky:         org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.6666666666666666d + "'", double31 == 0.6666666666666666d);
        org.junit.Assert.assertNotNull(list32);
        org.junit.Assert.assertNotNull(statisticalSummary33);
    }

    @Test
    public void test1655() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1655");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        int int9 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray10 = empiricalDistributionImpl1.getUpperBounds();
        int int11 = empiricalDistributionImpl1.getBinCount();
        java.util.List list12 = empiricalDistributionImpl1.getBinStats();
        int int13 = empiricalDistributionImpl1.getBinCount();
        boolean boolean14 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary15 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary16 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary17 = empiricalDistributionImpl1.getSampleStats();
        java.util.List list18 = empiricalDistributionImpl1.getBinStats();
        double double19 = empiricalDistributionImpl1.getNextValue();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 35 + "'", int11 == 35);
        org.junit.Assert.assertNotNull(list12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(statisticalSummary15);
        org.junit.Assert.assertNotNull(statisticalSummary16);
        org.junit.Assert.assertNotNull(statisticalSummary17);
        org.junit.Assert.assertNotNull(list18);
// flaky:         org.junit.Assert.assertTrue("'" + double19 + "' != '" + 1.0d + "'", double19 == 1.0d);
    }

    @Test
    public void test1656() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1656");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double double8 = empiricalDistributionImpl1.getNextValue();
        boolean boolean9 = empiricalDistributionImpl1.isLoaded();
        boolean boolean10 = empiricalDistributionImpl1.isLoaded();
        int int11 = empiricalDistributionImpl1.getBinCount();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double8 + "' != '" + (-1.0d) + "'", double8 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 35 + "'", int11 == 35);
    }

    @Test
    public void test1657() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1657");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (short) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray8 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl3.load(doubleArray8);
        double[] doubleArray10 = empiricalDistributionImpl3.getUpperBounds();
        int int11 = empiricalDistributionImpl3.getBinCount();
        double[] doubleArray12 = empiricalDistributionImpl3.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray12);
        double[] doubleArray14 = empiricalDistributionImpl1.getUpperBounds();
        double double15 = empiricalDistributionImpl1.getNextValue();
        boolean boolean16 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary17 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary18 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary19 = empiricalDistributionImpl1.getSampleStats();
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 35 + "'", int11 == 35);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.8044380461976002d + "'", double15 == 0.8044380461976002d);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(statisticalSummary17);
        org.junit.Assert.assertNotNull(statisticalSummary18);
        org.junit.Assert.assertNotNull(statisticalSummary19);
    }

    @Test
    public void test1658() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1658");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl10 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl12 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int13 = empiricalDistributionImpl12.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary14 = empiricalDistributionImpl12.getSampleStats();
        double[] doubleArray18 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl12.load(doubleArray18);
        empiricalDistributionImpl10.load(doubleArray18);
        empiricalDistributionImpl1.load(doubleArray18);
        double double22 = empiricalDistributionImpl1.getNextValue();
        java.util.List list23 = empiricalDistributionImpl1.getBinStats();
        java.util.List list24 = empiricalDistributionImpl1.getBinStats();
        int int25 = empiricalDistributionImpl1.getBinCount();
        java.util.List list26 = empiricalDistributionImpl1.getBinStats();
        double[] doubleArray27 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(doubleArray27);
            org.junit.Assert.fail("Expected exception of type java.lang.RuntimeException; message: null");
        } catch (java.lang.RuntimeException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
        org.junit.Assert.assertNull(statisticalSummary14);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double22 + "' != '" + 10.0d + "'", double22 == 10.0d);
        org.junit.Assert.assertNotNull(list23);
        org.junit.Assert.assertNotNull(list24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 35 + "'", int25 == 35);
        org.junit.Assert.assertNotNull(list26);
    }

    @Test
    public void test1659() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1659");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        double double12 = empiricalDistributionImpl1.getNextValue();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl14 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl16 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int17 = empiricalDistributionImpl16.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary18 = empiricalDistributionImpl16.getSampleStats();
        double[] doubleArray22 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl16.load(doubleArray22);
        empiricalDistributionImpl14.load(doubleArray22);
        double double25 = empiricalDistributionImpl14.getNextValue();
        double[] doubleArray26 = empiricalDistributionImpl14.getUpperBounds();
        double[] doubleArray27 = empiricalDistributionImpl14.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray27);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary29 = empiricalDistributionImpl1.getSampleStats();
        double double30 = empiricalDistributionImpl1.getNextValue();
        double double31 = empiricalDistributionImpl1.getNextValue();
        java.util.List list32 = empiricalDistributionImpl1.getBinStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary33 = empiricalDistributionImpl1.getSampleStats();
        boolean boolean34 = empiricalDistributionImpl1.isLoaded();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double12 + "' != '" + 32.0d + "'", double12 == 32.0d);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 35 + "'", int17 == 35);
        org.junit.Assert.assertNull(statisticalSummary18);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double25 + "' != '" + 1.0d + "'", double25 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertNotNull(statisticalSummary29);
// flaky:         org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.6666666666666666d + "'", double30 == 0.6666666666666666d);
// flaky:         org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.6666666666666666d + "'", double31 == 0.6666666666666666d);
        org.junit.Assert.assertNotNull(list32);
        org.junit.Assert.assertNotNull(statisticalSummary33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
    }

    @Test
    public void test1660() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1660");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 100);
        int int2 = empiricalDistributionImpl1.getBinCount();
        int int3 = empiricalDistributionImpl1.getBinCount();
        int int4 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl1.getSampleStats();
        int int6 = empiricalDistributionImpl1.getBinCount();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 100 + "'", int2 == 100);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 100 + "'", int3 == 100);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 100 + "'", int4 == 100);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 100 + "'", int6 == 100);
    }

    @Test
    public void test1661() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1661");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int2 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray4 = new double[] { 100.0d };
        empiricalDistributionImpl1.load(doubleArray4);
        boolean boolean6 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary7 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary8 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary9 = empiricalDistributionImpl1.getSampleStats();
        java.util.List list10 = empiricalDistributionImpl1.getBinStats();
        boolean boolean11 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary12 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary13 = empiricalDistributionImpl1.getSampleStats();
        java.net.URL uRL14 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(uRL14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 35 + "'", int2 == 35);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(statisticalSummary7);
        org.junit.Assert.assertNotNull(statisticalSummary8);
        org.junit.Assert.assertNotNull(statisticalSummary9);
        org.junit.Assert.assertNotNull(list10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(statisticalSummary12);
        org.junit.Assert.assertNotNull(statisticalSummary13);
    }

    @Test
    public void test1662() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1662");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        int int2 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl4 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        boolean boolean5 = empiricalDistributionImpl4.isLoaded();
        boolean boolean6 = empiricalDistributionImpl4.isLoaded();
        java.util.List list7 = empiricalDistributionImpl4.getBinStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl9 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl11 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int12 = empiricalDistributionImpl11.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary13 = empiricalDistributionImpl11.getSampleStats();
        double[] doubleArray17 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl11.load(doubleArray17);
        empiricalDistributionImpl9.load(doubleArray17);
        double double20 = empiricalDistributionImpl9.getNextValue();
        java.util.List list21 = empiricalDistributionImpl9.getBinStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl23 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray28 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl23.load(doubleArray28);
        double double30 = empiricalDistributionImpl23.getNextValue();
        double double31 = empiricalDistributionImpl23.getNextValue();
        int int32 = empiricalDistributionImpl23.getBinCount();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl34 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int35 = empiricalDistributionImpl34.getBinCount();
        double[] doubleArray37 = new double[] { 100.0d };
        empiricalDistributionImpl34.load(doubleArray37);
        double double39 = empiricalDistributionImpl34.getNextValue();
        boolean boolean40 = empiricalDistributionImpl34.isLoaded();
        double[] doubleArray41 = empiricalDistributionImpl34.getUpperBounds();
        empiricalDistributionImpl23.load(doubleArray41);
        empiricalDistributionImpl9.load(doubleArray41);
        empiricalDistributionImpl4.load(doubleArray41);
        empiricalDistributionImpl1.load(doubleArray41);
        double[] doubleArray46 = empiricalDistributionImpl1.getUpperBounds();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(list7);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 35 + "'", int12 == 35);
        org.junit.Assert.assertNull(statisticalSummary13);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.0d + "'", double20 == 1.0d);
        org.junit.Assert.assertNotNull(list21);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[10.0, -1.0, 1.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double30 + "' != '" + (-1.0d) + "'", double30 == (-1.0d));
// flaky:         org.junit.Assert.assertTrue("'" + double31 + "' != '" + (-1.0d) + "'", double31 == (-1.0d));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 35 + "'", int32 == 35);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 35 + "'", int35 == 35);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[100.0]");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 100.0d + "'", double39 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0]");
    }

    @Test
    public void test1663() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1663");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        int int9 = empiricalDistributionImpl1.getBinCount();
        boolean boolean10 = empiricalDistributionImpl1.isLoaded();
        double[] doubleArray11 = empiricalDistributionImpl1.getUpperBounds();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
    }

    @Test
    public void test1664() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1664");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray8 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl3.load(doubleArray8);
        double[] doubleArray10 = empiricalDistributionImpl3.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray10);
        double double12 = empiricalDistributionImpl1.getNextValue();
        int int13 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary14 = empiricalDistributionImpl1.getSampleStats();
        java.util.List list15 = empiricalDistributionImpl1.getBinStats();
        java.lang.Class<?> wildcardClass16 = list15.getClass();
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.75d + "'", double12 == 0.75d);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
        org.junit.Assert.assertNotNull(statisticalSummary14);
        org.junit.Assert.assertNotNull(list15);
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test1665() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1665");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        double double12 = empiricalDistributionImpl1.getNextValue();
        double[] doubleArray13 = empiricalDistributionImpl1.getUpperBounds();
        double double14 = empiricalDistributionImpl1.getNextValue();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl16 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray21 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl16.load(doubleArray21);
        double[] doubleArray23 = empiricalDistributionImpl16.getUpperBounds();
        java.util.List list24 = empiricalDistributionImpl16.getBinStats();
        boolean boolean25 = empiricalDistributionImpl16.isLoaded();
        double[] doubleArray26 = empiricalDistributionImpl16.getUpperBounds();
        boolean boolean27 = empiricalDistributionImpl16.isLoaded();
        boolean boolean28 = empiricalDistributionImpl16.isLoaded();
        int int29 = empiricalDistributionImpl16.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary30 = empiricalDistributionImpl16.getSampleStats();
        double[] doubleArray31 = empiricalDistributionImpl16.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray31);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary33 = empiricalDistributionImpl1.getSampleStats();
        boolean boolean34 = empiricalDistributionImpl1.isLoaded();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertNotNull(doubleArray13);
// flaky:         org.junit.Assert.assertTrue("'" + double14 + "' != '" + 10.0d + "'", double14 == 10.0d);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(list24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 35 + "'", int29 == 35);
        org.junit.Assert.assertNotNull(statisticalSummary30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(statisticalSummary33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
    }

    @Test
    public void test1666() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1666");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray8 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl3.load(doubleArray8);
        double[] doubleArray10 = empiricalDistributionImpl3.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray10);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl13 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int14 = empiricalDistributionImpl13.getBinCount();
        double[] doubleArray16 = new double[] { 100.0d };
        empiricalDistributionImpl13.load(doubleArray16);
        empiricalDistributionImpl1.load(doubleArray16);
        double[] doubleArray19 = empiricalDistributionImpl1.getUpperBounds();
        double double20 = empiricalDistributionImpl1.getNextValue();
        double double21 = empiricalDistributionImpl1.getNextValue();
        double[] doubleArray22 = empiricalDistributionImpl1.getUpperBounds();
        int int23 = empiricalDistributionImpl1.getBinCount();
        boolean boolean24 = empiricalDistributionImpl1.isLoaded();
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 35 + "'", int14 == 35);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[100.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 100.0d + "'", double20 == 100.0d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 100.0d + "'", double21 == 100.0d);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 35 + "'", int23 == 35);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
    }

    @Test
    public void test1667() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1667");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        boolean boolean2 = empiricalDistributionImpl1.isLoaded();
        int int3 = empiricalDistributionImpl1.getBinCount();
        boolean boolean4 = empiricalDistributionImpl1.isLoaded();
        int int5 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary6 = empiricalDistributionImpl1.getSampleStats();
        java.net.URL uRL7 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(uRL7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 35 + "'", int3 == 35);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 35 + "'", int5 == 35);
        org.junit.Assert.assertNull(statisticalSummary6);
    }

    @Test
    public void test1668() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1668");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int2 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray4 = new double[] { 100.0d };
        empiricalDistributionImpl1.load(doubleArray4);
        boolean boolean6 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary7 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary8 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl10 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl12 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int13 = empiricalDistributionImpl12.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary14 = empiricalDistributionImpl12.getSampleStats();
        double[] doubleArray18 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl12.load(doubleArray18);
        empiricalDistributionImpl10.load(doubleArray18);
        double[] doubleArray24 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl10.load(doubleArray24);
        empiricalDistributionImpl1.load(doubleArray24);
        double[] doubleArray27 = empiricalDistributionImpl1.getUpperBounds();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl29 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl31 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int32 = empiricalDistributionImpl31.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary33 = empiricalDistributionImpl31.getSampleStats();
        double[] doubleArray37 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl31.load(doubleArray37);
        empiricalDistributionImpl29.load(doubleArray37);
        double double40 = empiricalDistributionImpl29.getNextValue();
        double[] doubleArray41 = empiricalDistributionImpl29.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray41);
        double double43 = empiricalDistributionImpl1.getNextValue();
        double[] doubleArray44 = empiricalDistributionImpl1.getUpperBounds();
        double[] doubleArray45 = empiricalDistributionImpl1.getUpperBounds();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 35 + "'", int2 == 35);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(statisticalSummary7);
        org.junit.Assert.assertNotNull(statisticalSummary8);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
        org.junit.Assert.assertNull(statisticalSummary14);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 1.0]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 35 + "'", int32 == 35);
        org.junit.Assert.assertNull(statisticalSummary33);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double40 + "' != '" + 32.0d + "'", double40 == 32.0d);
        org.junit.Assert.assertNotNull(doubleArray41);
// flaky:         org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.6666666666666666d + "'", double43 == 0.6666666666666666d);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 1.0]");
    }

    @Test
    public void test1669() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1669");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl10 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl12 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int13 = empiricalDistributionImpl12.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary14 = empiricalDistributionImpl12.getSampleStats();
        double[] doubleArray18 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl12.load(doubleArray18);
        empiricalDistributionImpl10.load(doubleArray18);
        empiricalDistributionImpl1.load(doubleArray18);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl23 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl25 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray30 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl25.load(doubleArray30);
        double[] doubleArray32 = empiricalDistributionImpl25.getUpperBounds();
        empiricalDistributionImpl23.load(doubleArray32);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl35 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int36 = empiricalDistributionImpl35.getBinCount();
        double[] doubleArray38 = new double[] { 100.0d };
        empiricalDistributionImpl35.load(doubleArray38);
        empiricalDistributionImpl23.load(doubleArray38);
        empiricalDistributionImpl1.load(doubleArray38);
        int int42 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl44 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl46 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray51 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl46.load(doubleArray51);
        double[] doubleArray53 = empiricalDistributionImpl46.getUpperBounds();
        empiricalDistributionImpl44.load(doubleArray53);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl56 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int57 = empiricalDistributionImpl56.getBinCount();
        double[] doubleArray59 = new double[] { 100.0d };
        empiricalDistributionImpl56.load(doubleArray59);
        empiricalDistributionImpl44.load(doubleArray59);
        double[] doubleArray62 = empiricalDistributionImpl44.getUpperBounds();
        double double63 = empiricalDistributionImpl44.getNextValue();
        double double64 = empiricalDistributionImpl44.getNextValue();
        double[] doubleArray65 = empiricalDistributionImpl44.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray65);
        java.net.URL uRL67 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(uRL67);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
        org.junit.Assert.assertNull(statisticalSummary14);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 35 + "'", int36 == 35);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[100.0]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 35 + "'", int42 == 35);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 35 + "'", int57 == 35);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[100.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 100.0d + "'", double63 == 100.0d);
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 100.0d + "'", double64 == 100.0d);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
    }

    @Test
    public void test1670() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1670");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        int int12 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray13 = empiricalDistributionImpl1.getUpperBounds();
        double[] doubleArray14 = empiricalDistributionImpl1.getUpperBounds();
        java.util.List list15 = empiricalDistributionImpl1.getBinStats();
        double[] doubleArray16 = empiricalDistributionImpl1.getUpperBounds();
        java.io.File file17 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(file17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 100 + "'", int12 == 100);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(list15);
        org.junit.Assert.assertNotNull(doubleArray16);
    }

    @Test
    public void test1671() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1671");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        double[] doubleArray15 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl1.load(doubleArray15);
        double double17 = empiricalDistributionImpl1.getNextValue();
        boolean boolean18 = empiricalDistributionImpl1.isLoaded();
        boolean boolean19 = empiricalDistributionImpl1.isLoaded();
        double[] doubleArray20 = empiricalDistributionImpl1.getUpperBounds();
        java.util.List list21 = empiricalDistributionImpl1.getBinStats();
        double[] doubleArray22 = empiricalDistributionImpl1.getUpperBounds();
        java.lang.Class<?> wildcardClass23 = doubleArray22.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[-1.0, 0.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double17 + "' != '" + 2.5182073060313788d + "'", double17 == 2.5182073060313788d);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0]");
        org.junit.Assert.assertNotNull(list21);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0]");
        org.junit.Assert.assertNotNull(wildcardClass23);
    }

    @Test
    public void test1672() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1672");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        int int9 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray10 = empiricalDistributionImpl1.getUpperBounds();
        java.util.List list11 = empiricalDistributionImpl1.getBinStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary12 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary13 = empiricalDistributionImpl1.getSampleStats();
        int int14 = empiricalDistributionImpl1.getBinCount();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(list11);
        org.junit.Assert.assertNotNull(statisticalSummary12);
        org.junit.Assert.assertNotNull(statisticalSummary13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 35 + "'", int14 == 35);
    }

    @Test
    public void test1673() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1673");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        java.util.List list9 = empiricalDistributionImpl1.getBinStats();
        boolean boolean10 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary11 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary12 = empiricalDistributionImpl1.getSampleStats();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(list9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(statisticalSummary11);
        org.junit.Assert.assertNotNull(statisticalSummary12);
    }

    @Test
    public void test1674() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1674");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int2 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray4 = new double[] { 100.0d };
        empiricalDistributionImpl1.load(doubleArray4);
        boolean boolean6 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary7 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary8 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary9 = empiricalDistributionImpl1.getSampleStats();
        double[] doubleArray10 = empiricalDistributionImpl1.getUpperBounds();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl12 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl14 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int15 = empiricalDistributionImpl14.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary16 = empiricalDistributionImpl14.getSampleStats();
        double[] doubleArray20 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl14.load(doubleArray20);
        empiricalDistributionImpl12.load(doubleArray20);
        double[] doubleArray26 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl12.load(doubleArray26);
        double double28 = empiricalDistributionImpl12.getNextValue();
        int int29 = empiricalDistributionImpl12.getBinCount();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl31 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        boolean boolean32 = empiricalDistributionImpl31.isLoaded();
        boolean boolean33 = empiricalDistributionImpl31.isLoaded();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl35 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl37 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int38 = empiricalDistributionImpl37.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary39 = empiricalDistributionImpl37.getSampleStats();
        double[] doubleArray43 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl37.load(doubleArray43);
        empiricalDistributionImpl35.load(doubleArray43);
        double[] doubleArray49 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl35.load(doubleArray49);
        empiricalDistributionImpl31.load(doubleArray49);
        empiricalDistributionImpl12.load(doubleArray49);
        empiricalDistributionImpl1.load(doubleArray49);
        java.util.List list54 = empiricalDistributionImpl1.getBinStats();
        java.io.File file55 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(file55);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 35 + "'", int2 == 35);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(statisticalSummary7);
        org.junit.Assert.assertNotNull(statisticalSummary8);
        org.junit.Assert.assertNotNull(statisticalSummary9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 35 + "'", int15 == 35);
        org.junit.Assert.assertNull(statisticalSummary16);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[-1.0, 0.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double28 + "' != '" + 1.4266554397322087d + "'", double28 == 1.4266554397322087d);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 35 + "'", int38 == 35);
        org.junit.Assert.assertNull(statisticalSummary39);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(list54);
    }

    @Test
    public void test1675() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1675");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        int int9 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray10 = empiricalDistributionImpl1.getUpperBounds();
        int int11 = empiricalDistributionImpl1.getBinCount();
        java.util.List list12 = empiricalDistributionImpl1.getBinStats();
        boolean boolean13 = empiricalDistributionImpl1.isLoaded();
        double[] doubleArray14 = empiricalDistributionImpl1.getUpperBounds();
        boolean boolean15 = empiricalDistributionImpl1.isLoaded();
        java.util.List list16 = empiricalDistributionImpl1.getBinStats();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 35 + "'", int11 == 35);
        org.junit.Assert.assertNotNull(list12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(list16);
    }

    @Test
    public void test1676() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1676");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        double[] doubleArray15 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl1.load(doubleArray15);
        double[] doubleArray17 = empiricalDistributionImpl1.getUpperBounds();
        double double18 = empiricalDistributionImpl1.getNextValue();
        boolean boolean19 = empiricalDistributionImpl1.isLoaded();
        double[] doubleArray20 = empiricalDistributionImpl1.getUpperBounds();
        double double21 = empiricalDistributionImpl1.getNextValue();
        double[] doubleArray22 = empiricalDistributionImpl1.getUpperBounds();
        java.util.List list23 = empiricalDistributionImpl1.getBinStats();
        java.util.List list24 = empiricalDistributionImpl1.getBinStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary25 = empiricalDistributionImpl1.getSampleStats();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.42491044403890854d + "'", double18 == 0.42491044403890854d);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double21 + "' != '" + (-2.04301303624887d) + "'", double21 == (-2.04301303624887d));
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0]");
        org.junit.Assert.assertNotNull(list23);
        org.junit.Assert.assertNotNull(list24);
        org.junit.Assert.assertNotNull(statisticalSummary25);
    }

    @Test
    public void test1677() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1677");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        java.util.List list9 = empiricalDistributionImpl1.getBinStats();
        boolean boolean10 = empiricalDistributionImpl1.isLoaded();
        double[] doubleArray11 = empiricalDistributionImpl1.getUpperBounds();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl13 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray18 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl13.load(doubleArray18);
        double[] doubleArray20 = empiricalDistributionImpl13.getUpperBounds();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl22 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl24 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int25 = empiricalDistributionImpl24.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary26 = empiricalDistributionImpl24.getSampleStats();
        double[] doubleArray30 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl24.load(doubleArray30);
        empiricalDistributionImpl22.load(doubleArray30);
        empiricalDistributionImpl13.load(doubleArray30);
        double double34 = empiricalDistributionImpl13.getNextValue();
        java.util.List list35 = empiricalDistributionImpl13.getBinStats();
        int int36 = empiricalDistributionImpl13.getBinCount();
        java.util.List list37 = empiricalDistributionImpl13.getBinStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl39 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl41 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int42 = empiricalDistributionImpl41.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary43 = empiricalDistributionImpl41.getSampleStats();
        double[] doubleArray47 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl41.load(doubleArray47);
        empiricalDistributionImpl39.load(doubleArray47);
        double[] doubleArray53 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl39.load(doubleArray53);
        empiricalDistributionImpl13.load(doubleArray53);
        empiricalDistributionImpl1.load(doubleArray53);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary57 = empiricalDistributionImpl1.getSampleStats();
        double[] doubleArray58 = empiricalDistributionImpl1.getUpperBounds();
        double[] doubleArray59 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(doubleArray59);
            org.junit.Assert.fail("Expected exception of type java.lang.RuntimeException; message: null");
        } catch (java.lang.RuntimeException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(list9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 35 + "'", int25 == 35);
        org.junit.Assert.assertNull(statisticalSummary26);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double34 + "' != '" + 32.0d + "'", double34 == 32.0d);
        org.junit.Assert.assertNotNull(list35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 35 + "'", int36 == 35);
        org.junit.Assert.assertNotNull(list37);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 35 + "'", int42 == 35);
        org.junit.Assert.assertNull(statisticalSummary43);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(statisticalSummary57);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 1.0]");
    }

    @Test
    public void test1678() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1678");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        int int12 = empiricalDistributionImpl1.getBinCount();
        java.util.List list13 = empiricalDistributionImpl1.getBinStats();
        java.util.List list14 = empiricalDistributionImpl1.getBinStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl16 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        boolean boolean17 = empiricalDistributionImpl16.isLoaded();
        boolean boolean18 = empiricalDistributionImpl16.isLoaded();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl20 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl22 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int23 = empiricalDistributionImpl22.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary24 = empiricalDistributionImpl22.getSampleStats();
        double[] doubleArray28 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl22.load(doubleArray28);
        empiricalDistributionImpl20.load(doubleArray28);
        double[] doubleArray34 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl20.load(doubleArray34);
        empiricalDistributionImpl16.load(doubleArray34);
        empiricalDistributionImpl1.load(doubleArray34);
        java.util.List list38 = empiricalDistributionImpl1.getBinStats();
        double double39 = empiricalDistributionImpl1.getNextValue();
        java.util.List list40 = empiricalDistributionImpl1.getBinStats();
        double[] doubleArray41 = empiricalDistributionImpl1.getUpperBounds();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 100 + "'", int12 == 100);
        org.junit.Assert.assertNotNull(list13);
        org.junit.Assert.assertNotNull(list14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 35 + "'", int23 == 35);
        org.junit.Assert.assertNull(statisticalSummary24);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(list38);
// flaky:         org.junit.Assert.assertTrue("'" + double39 + "' != '" + (-1.0d) + "'", double39 == (-1.0d));
        org.junit.Assert.assertNotNull(list40);
        org.junit.Assert.assertNotNull(doubleArray41);
    }

    @Test
    public void test1679() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1679");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        int int9 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray10 = empiricalDistributionImpl1.getUpperBounds();
        int int11 = empiricalDistributionImpl1.getBinCount();
        java.util.List list12 = empiricalDistributionImpl1.getBinStats();
        boolean boolean13 = empiricalDistributionImpl1.isLoaded();
        double[] doubleArray14 = empiricalDistributionImpl1.getUpperBounds();
        boolean boolean15 = empiricalDistributionImpl1.isLoaded();
        boolean boolean16 = empiricalDistributionImpl1.isLoaded();
        double double17 = empiricalDistributionImpl1.getNextValue();
        double[] doubleArray18 = empiricalDistributionImpl1.getUpperBounds();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 35 + "'", int11 == 35);
        org.junit.Assert.assertNotNull(list12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
// flaky:         org.junit.Assert.assertTrue("'" + double17 + "' != '" + 10.0d + "'", double17 == 10.0d);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
    }

    @Test
    public void test1680() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1680");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int2 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray4 = new double[] { 100.0d };
        empiricalDistributionImpl1.load(doubleArray4);
        boolean boolean6 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary7 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary8 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary9 = empiricalDistributionImpl1.getSampleStats();
        java.util.List list10 = empiricalDistributionImpl1.getBinStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl12 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 10);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl14 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray19 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl14.load(doubleArray19);
        double[] doubleArray21 = empiricalDistributionImpl14.getUpperBounds();
        int int22 = empiricalDistributionImpl14.getBinCount();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl24 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl26 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray31 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl26.load(doubleArray31);
        double[] doubleArray33 = empiricalDistributionImpl26.getUpperBounds();
        empiricalDistributionImpl24.load(doubleArray33);
        empiricalDistributionImpl14.load(doubleArray33);
        java.util.List list36 = empiricalDistributionImpl14.getBinStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl38 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int39 = empiricalDistributionImpl38.getBinCount();
        double[] doubleArray41 = new double[] { 100.0d };
        empiricalDistributionImpl38.load(doubleArray41);
        boolean boolean43 = empiricalDistributionImpl38.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary44 = empiricalDistributionImpl38.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary45 = empiricalDistributionImpl38.getSampleStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl47 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl49 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int50 = empiricalDistributionImpl49.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary51 = empiricalDistributionImpl49.getSampleStats();
        double[] doubleArray55 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl49.load(doubleArray55);
        empiricalDistributionImpl47.load(doubleArray55);
        double[] doubleArray61 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl47.load(doubleArray61);
        empiricalDistributionImpl38.load(doubleArray61);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl65 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl67 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int68 = empiricalDistributionImpl67.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary69 = empiricalDistributionImpl67.getSampleStats();
        double[] doubleArray73 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl67.load(doubleArray73);
        empiricalDistributionImpl65.load(doubleArray73);
        empiricalDistributionImpl38.load(doubleArray73);
        empiricalDistributionImpl14.load(doubleArray73);
        empiricalDistributionImpl12.load(doubleArray73);
        empiricalDistributionImpl1.load(doubleArray73);
        int int80 = empiricalDistributionImpl1.getBinCount();
        double double81 = empiricalDistributionImpl1.getNextValue();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 35 + "'", int2 == 35);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(statisticalSummary7);
        org.junit.Assert.assertNotNull(statisticalSummary8);
        org.junit.Assert.assertNotNull(statisticalSummary9);
        org.junit.Assert.assertNotNull(list10);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 35 + "'", int22 == 35);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(list36);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 35 + "'", int39 == 35);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(statisticalSummary44);
        org.junit.Assert.assertNotNull(statisticalSummary45);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 35 + "'", int50 == 35);
        org.junit.Assert.assertNull(statisticalSummary51);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 35 + "'", int68 == 35);
        org.junit.Assert.assertNull(statisticalSummary69);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 35 + "'", int80 == 35);
// flaky:         org.junit.Assert.assertTrue("'" + double81 + "' != '" + 32.0d + "'", double81 == 32.0d);
    }

    @Test
    public void test1681() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1681");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        double[] doubleArray15 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl1.load(doubleArray15);
        double[] doubleArray17 = empiricalDistributionImpl1.getUpperBounds();
        double double18 = empiricalDistributionImpl1.getNextValue();
        boolean boolean19 = empiricalDistributionImpl1.isLoaded();
        int int20 = empiricalDistributionImpl1.getBinCount();
        java.util.List list21 = empiricalDistributionImpl1.getBinStats();
        boolean boolean22 = empiricalDistributionImpl1.isLoaded();
        boolean boolean23 = empiricalDistributionImpl1.isLoaded();
        boolean boolean24 = empiricalDistributionImpl1.isLoaded();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.42827587423123054d + "'", double18 == 0.42827587423123054d);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(list21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
    }

    @Test
    public void test1682() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1682");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        java.util.List list9 = empiricalDistributionImpl1.getBinStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl11 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl13 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int14 = empiricalDistributionImpl13.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary15 = empiricalDistributionImpl13.getSampleStats();
        double[] doubleArray19 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl13.load(doubleArray19);
        empiricalDistributionImpl11.load(doubleArray19);
        double double22 = empiricalDistributionImpl11.getNextValue();
        double[] doubleArray23 = empiricalDistributionImpl11.getUpperBounds();
        double[] doubleArray24 = empiricalDistributionImpl11.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray24);
        int int26 = empiricalDistributionImpl1.getBinCount();
        double double27 = empiricalDistributionImpl1.getNextValue();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(list9);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 35 + "'", int14 == 35);
        org.junit.Assert.assertNull(statisticalSummary15);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double22 + "' != '" + 32.0d + "'", double22 == 32.0d);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 35 + "'", int26 == 35);
// flaky:         org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.6666666666666666d + "'", double27 == 0.6666666666666666d);
    }

    @Test
    public void test1683() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1683");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        int int12 = empiricalDistributionImpl1.getBinCount();
        java.util.List list13 = empiricalDistributionImpl1.getBinStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary14 = empiricalDistributionImpl1.getSampleStats();
        boolean boolean15 = empiricalDistributionImpl1.isLoaded();
        int int16 = empiricalDistributionImpl1.getBinCount();
        boolean boolean17 = empiricalDistributionImpl1.isLoaded();
        double double18 = empiricalDistributionImpl1.getNextValue();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary19 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl21 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int22 = empiricalDistributionImpl21.getBinCount();
        double[] doubleArray24 = new double[] { 100.0d };
        empiricalDistributionImpl21.load(doubleArray24);
        boolean boolean26 = empiricalDistributionImpl21.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary27 = empiricalDistributionImpl21.getSampleStats();
        double[] doubleArray28 = empiricalDistributionImpl21.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray28);
        boolean boolean30 = empiricalDistributionImpl1.isLoaded();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 100 + "'", int12 == 100);
        org.junit.Assert.assertNotNull(list13);
        org.junit.Assert.assertNotNull(statisticalSummary14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 100 + "'", int16 == 100);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
// flaky:         org.junit.Assert.assertTrue("'" + double18 + "' != '" + 32.0d + "'", double18 == 32.0d);
        org.junit.Assert.assertNotNull(statisticalSummary19);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 35 + "'", int22 == 35);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(statisticalSummary27);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
    }

    @Test
    public void test1684() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1684");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        double double12 = empiricalDistributionImpl1.getNextValue();
        double[] doubleArray13 = empiricalDistributionImpl1.getUpperBounds();
        double double14 = empiricalDistributionImpl1.getNextValue();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl16 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray21 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl16.load(doubleArray21);
        double[] doubleArray23 = empiricalDistributionImpl16.getUpperBounds();
        java.util.List list24 = empiricalDistributionImpl16.getBinStats();
        boolean boolean25 = empiricalDistributionImpl16.isLoaded();
        double[] doubleArray26 = empiricalDistributionImpl16.getUpperBounds();
        boolean boolean27 = empiricalDistributionImpl16.isLoaded();
        boolean boolean28 = empiricalDistributionImpl16.isLoaded();
        int int29 = empiricalDistributionImpl16.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary30 = empiricalDistributionImpl16.getSampleStats();
        double[] doubleArray31 = empiricalDistributionImpl16.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray31);
        java.io.File file33 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(file33);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double12 + "' != '" + 32.0d + "'", double12 == 32.0d);
        org.junit.Assert.assertNotNull(doubleArray13);
// flaky:         org.junit.Assert.assertTrue("'" + double14 + "' != '" + 32.0d + "'", double14 == 32.0d);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(list24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 35 + "'", int29 == 35);
        org.junit.Assert.assertNotNull(statisticalSummary30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
    }

    @Test
    public void test1685() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1685");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        double[] doubleArray15 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl1.load(doubleArray15);
        double[] doubleArray17 = empiricalDistributionImpl1.getUpperBounds();
        double double18 = empiricalDistributionImpl1.getNextValue();
        boolean boolean19 = empiricalDistributionImpl1.isLoaded();
        int int20 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray21 = empiricalDistributionImpl1.getUpperBounds();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary22 = empiricalDistributionImpl1.getSampleStats();
        java.io.File file23 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(file23);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double18 + "' != '" + 1.4088912140641294d + "'", double18 == 1.4088912140641294d);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0]");
        org.junit.Assert.assertNotNull(statisticalSummary22);
    }

    @Test
    public void test1686() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1686");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        double[] doubleArray15 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl1.load(doubleArray15);
        double[] doubleArray17 = empiricalDistributionImpl1.getUpperBounds();
        double double18 = empiricalDistributionImpl1.getNextValue();
        boolean boolean19 = empiricalDistributionImpl1.isLoaded();
        double[] doubleArray20 = empiricalDistributionImpl1.getUpperBounds();
        int int21 = empiricalDistributionImpl1.getBinCount();
        java.lang.Class<?> wildcardClass22 = empiricalDistributionImpl1.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.768525225413312d + "'", double18 == 0.768525225413312d);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(wildcardClass22);
    }

    @Test
    public void test1687() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1687");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        int int9 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray10 = empiricalDistributionImpl1.getUpperBounds();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary11 = empiricalDistributionImpl1.getSampleStats();
        int int12 = empiricalDistributionImpl1.getBinCount();
        java.net.URL uRL13 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(uRL13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(statisticalSummary11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 35 + "'", int12 == 35);
    }

    @Test
    public void test1688() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1688");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        double double12 = empiricalDistributionImpl1.getNextValue();
        java.util.List list13 = empiricalDistributionImpl1.getBinStats();
        double double14 = empiricalDistributionImpl1.getNextValue();
        java.util.List list15 = empiricalDistributionImpl1.getBinStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl17 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int18 = empiricalDistributionImpl17.getBinCount();
        double[] doubleArray20 = new double[] { 100.0d };
        empiricalDistributionImpl17.load(doubleArray20);
        boolean boolean22 = empiricalDistributionImpl17.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary23 = empiricalDistributionImpl17.getSampleStats();
        boolean boolean24 = empiricalDistributionImpl17.isLoaded();
        boolean boolean25 = empiricalDistributionImpl17.isLoaded();
        boolean boolean26 = empiricalDistributionImpl17.isLoaded();
        int int27 = empiricalDistributionImpl17.getBinCount();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl29 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl31 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int32 = empiricalDistributionImpl31.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary33 = empiricalDistributionImpl31.getSampleStats();
        double[] doubleArray37 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl31.load(doubleArray37);
        empiricalDistributionImpl29.load(doubleArray37);
        double double40 = empiricalDistributionImpl29.getNextValue();
        java.util.List list41 = empiricalDistributionImpl29.getBinStats();
        double double42 = empiricalDistributionImpl29.getNextValue();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl44 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int45 = empiricalDistributionImpl44.getBinCount();
        double[] doubleArray47 = new double[] { 100.0d };
        empiricalDistributionImpl44.load(doubleArray47);
        boolean boolean49 = empiricalDistributionImpl44.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary50 = empiricalDistributionImpl44.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary51 = empiricalDistributionImpl44.getSampleStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl53 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl55 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int56 = empiricalDistributionImpl55.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary57 = empiricalDistributionImpl55.getSampleStats();
        double[] doubleArray61 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl55.load(doubleArray61);
        empiricalDistributionImpl53.load(doubleArray61);
        double[] doubleArray67 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl53.load(doubleArray67);
        empiricalDistributionImpl44.load(doubleArray67);
        double[] doubleArray70 = empiricalDistributionImpl44.getUpperBounds();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl72 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl74 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int75 = empiricalDistributionImpl74.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary76 = empiricalDistributionImpl74.getSampleStats();
        double[] doubleArray80 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl74.load(doubleArray80);
        empiricalDistributionImpl72.load(doubleArray80);
        empiricalDistributionImpl44.load(doubleArray80);
        int int84 = empiricalDistributionImpl44.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary85 = empiricalDistributionImpl44.getSampleStats();
        double[] doubleArray86 = empiricalDistributionImpl44.getUpperBounds();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary87 = empiricalDistributionImpl44.getSampleStats();
        double double88 = empiricalDistributionImpl44.getNextValue();
        double[] doubleArray89 = empiricalDistributionImpl44.getUpperBounds();
        empiricalDistributionImpl29.load(doubleArray89);
        empiricalDistributionImpl17.load(doubleArray89);
        empiricalDistributionImpl1.load(doubleArray89);
        double[] doubleArray93 = empiricalDistributionImpl1.getUpperBounds();
        boolean boolean94 = empiricalDistributionImpl1.isLoaded();
        java.net.URL uRL95 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(uRL95);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double12 + "' != '" + 32.0d + "'", double12 == 32.0d);
        org.junit.Assert.assertNotNull(list13);
// flaky:         org.junit.Assert.assertTrue("'" + double14 + "' != '" + 32.0d + "'", double14 == 32.0d);
        org.junit.Assert.assertNotNull(list15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 35 + "'", int18 == 35);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(statisticalSummary23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 35 + "'", int27 == 35);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 35 + "'", int32 == 35);
        org.junit.Assert.assertNull(statisticalSummary33);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double40 + "' != '" + 1.0d + "'", double40 == 1.0d);
        org.junit.Assert.assertNotNull(list41);
// flaky:         org.junit.Assert.assertTrue("'" + double42 + "' != '" + 32.0d + "'", double42 == 32.0d);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 35 + "'", int45 == 35);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(statisticalSummary50);
        org.junit.Assert.assertNotNull(statisticalSummary51);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 35 + "'", int56 == 35);
        org.junit.Assert.assertNull(statisticalSummary57);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 1.0]");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 35 + "'", int75 == 35);
        org.junit.Assert.assertNull(statisticalSummary76);
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 35 + "'", int84 == 35);
        org.junit.Assert.assertNotNull(statisticalSummary85);
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 1.0]");
        org.junit.Assert.assertNotNull(statisticalSummary87);
// flaky:         org.junit.Assert.assertTrue("'" + double88 + "' != '" + 32.0d + "'", double88 == 32.0d);
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray89), "[0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray93);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + true + "'", boolean94 == true);
    }

    @Test
    public void test1689() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1689");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (short) 0);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary2 = empiricalDistributionImpl1.getSampleStats();
        java.util.List list3 = empiricalDistributionImpl1.getBinStats();
        java.io.File file4 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(file4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(statisticalSummary2);
        org.junit.Assert.assertNotNull(list3);
    }

    @Test
    public void test1690() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1690");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        double[] doubleArray15 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl1.load(doubleArray15);
        double double17 = empiricalDistributionImpl1.getNextValue();
        int int18 = empiricalDistributionImpl1.getBinCount();
        boolean boolean19 = empiricalDistributionImpl1.isLoaded();
        double[] doubleArray20 = empiricalDistributionImpl1.getUpperBounds();
        int int21 = empiricalDistributionImpl1.getBinCount();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[-1.0, 0.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.7113365571559265d + "'", double17 == 0.7113365571559265d);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
    }

    @Test
    public void test1691() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1691");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        double[] doubleArray15 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl1.load(doubleArray15);
        double double17 = empiricalDistributionImpl1.getNextValue();
        boolean boolean18 = empiricalDistributionImpl1.isLoaded();
        boolean boolean19 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl21 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl23 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int24 = empiricalDistributionImpl23.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary25 = empiricalDistributionImpl23.getSampleStats();
        double[] doubleArray29 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl23.load(doubleArray29);
        empiricalDistributionImpl21.load(doubleArray29);
        double[] doubleArray35 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl21.load(doubleArray35);
        double[] doubleArray37 = empiricalDistributionImpl21.getUpperBounds();
        double double38 = empiricalDistributionImpl21.getNextValue();
        boolean boolean39 = empiricalDistributionImpl21.isLoaded();
        int int40 = empiricalDistributionImpl21.getBinCount();
        double[] doubleArray41 = empiricalDistributionImpl21.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray41);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[-1.0, 0.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.5936193561764905d + "'", double17 == 0.5936193561764905d);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 35 + "'", int24 == 35);
        org.junit.Assert.assertNull(statisticalSummary25);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.5936193561764905d + "'", double38 == 0.5936193561764905d);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0]");
    }

    @Test
    public void test1692() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1692");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        int int9 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl11 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl13 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray18 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl13.load(doubleArray18);
        double[] doubleArray20 = empiricalDistributionImpl13.getUpperBounds();
        empiricalDistributionImpl11.load(doubleArray20);
        empiricalDistributionImpl1.load(doubleArray20);
        java.util.List list23 = empiricalDistributionImpl1.getBinStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl25 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int26 = empiricalDistributionImpl25.getBinCount();
        double[] doubleArray28 = new double[] { 100.0d };
        empiricalDistributionImpl25.load(doubleArray28);
        boolean boolean30 = empiricalDistributionImpl25.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary31 = empiricalDistributionImpl25.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary32 = empiricalDistributionImpl25.getSampleStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl34 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl36 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int37 = empiricalDistributionImpl36.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary38 = empiricalDistributionImpl36.getSampleStats();
        double[] doubleArray42 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl36.load(doubleArray42);
        empiricalDistributionImpl34.load(doubleArray42);
        double[] doubleArray48 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl34.load(doubleArray48);
        empiricalDistributionImpl25.load(doubleArray48);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl52 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl54 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int55 = empiricalDistributionImpl54.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary56 = empiricalDistributionImpl54.getSampleStats();
        double[] doubleArray60 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl54.load(doubleArray60);
        empiricalDistributionImpl52.load(doubleArray60);
        empiricalDistributionImpl25.load(doubleArray60);
        empiricalDistributionImpl1.load(doubleArray60);
        int int65 = empiricalDistributionImpl1.getBinCount();
        double double66 = empiricalDistributionImpl1.getNextValue();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(list23);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 35 + "'", int26 == 35);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(statisticalSummary31);
        org.junit.Assert.assertNotNull(statisticalSummary32);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 35 + "'", int37 == 35);
        org.junit.Assert.assertNull(statisticalSummary38);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 35 + "'", int55 == 35);
        org.junit.Assert.assertNull(statisticalSummary56);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 35 + "'", int65 == 35);
// flaky:         org.junit.Assert.assertTrue("'" + double66 + "' != '" + 1.0d + "'", double66 == 1.0d);
    }

    @Test
    public void test1693() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1693");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        java.util.List list9 = empiricalDistributionImpl1.getBinStats();
        double double10 = empiricalDistributionImpl1.getNextValue();
        double[] doubleArray11 = empiricalDistributionImpl1.getUpperBounds();
        boolean boolean12 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary13 = empiricalDistributionImpl1.getSampleStats();
        java.lang.Class<?> wildcardClass14 = empiricalDistributionImpl1.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(list9);
// flaky:         org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(statisticalSummary13);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test1694() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1694");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) ' ');
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        double[] doubleArray6 = new double[] { 100.0d };
        empiricalDistributionImpl3.load(doubleArray6);
        boolean boolean8 = empiricalDistributionImpl3.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary9 = empiricalDistributionImpl3.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary10 = empiricalDistributionImpl3.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary11 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray12 = empiricalDistributionImpl3.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray12);
        java.lang.Class<?> wildcardClass14 = doubleArray12.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(statisticalSummary9);
        org.junit.Assert.assertNotNull(statisticalSummary10);
        org.junit.Assert.assertNotNull(statisticalSummary11);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test1695() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1695");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (short) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray8 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl3.load(doubleArray8);
        double[] doubleArray10 = empiricalDistributionImpl3.getUpperBounds();
        int int11 = empiricalDistributionImpl3.getBinCount();
        double[] doubleArray12 = empiricalDistributionImpl3.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray12);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl15 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl17 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray22 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl17.load(doubleArray22);
        double[] doubleArray24 = empiricalDistributionImpl17.getUpperBounds();
        empiricalDistributionImpl15.load(doubleArray24);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl27 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int28 = empiricalDistributionImpl27.getBinCount();
        double[] doubleArray30 = new double[] { 100.0d };
        empiricalDistributionImpl27.load(doubleArray30);
        empiricalDistributionImpl15.load(doubleArray30);
        double[] doubleArray33 = empiricalDistributionImpl15.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray33);
        int int35 = empiricalDistributionImpl1.getBinCount();
        boolean boolean36 = empiricalDistributionImpl1.isLoaded();
        java.lang.Class<?> wildcardClass37 = empiricalDistributionImpl1.getClass();
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 35 + "'", int11 == 35);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 35 + "'", int28 == 35);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[100.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(wildcardClass37);
    }

    @Test
    public void test1696() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1696");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int2 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary3 = empiricalDistributionImpl1.getSampleStats();
        double[] doubleArray7 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl1.load(doubleArray7);
        int int9 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary10 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary11 = empiricalDistributionImpl1.getSampleStats();
        java.net.URL uRL12 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(uRL12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 35 + "'", int2 == 35);
        org.junit.Assert.assertNull(statisticalSummary3);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertNotNull(statisticalSummary10);
        org.junit.Assert.assertNotNull(statisticalSummary11);
    }

    @Test
    public void test1697() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1697");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        double double12 = empiricalDistributionImpl1.getNextValue();
        java.util.List list13 = empiricalDistributionImpl1.getBinStats();
        double double14 = empiricalDistributionImpl1.getNextValue();
        int int15 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray16 = empiricalDistributionImpl1.getUpperBounds();
        int int17 = empiricalDistributionImpl1.getBinCount();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double12 + "' != '" + 1.0d + "'", double12 == 1.0d);
        org.junit.Assert.assertNotNull(list13);
// flaky:         org.junit.Assert.assertTrue("'" + double14 + "' != '" + 32.0d + "'", double14 == 32.0d);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 100 + "'", int15 == 100);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 100 + "'", int17 == 100);
    }

    @Test
    public void test1698() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1698");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int2 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray4 = new double[] { 100.0d };
        empiricalDistributionImpl1.load(doubleArray4);
        boolean boolean6 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary7 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary8 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl10 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl12 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int13 = empiricalDistributionImpl12.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary14 = empiricalDistributionImpl12.getSampleStats();
        double[] doubleArray18 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl12.load(doubleArray18);
        empiricalDistributionImpl10.load(doubleArray18);
        double[] doubleArray24 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl10.load(doubleArray24);
        empiricalDistributionImpl1.load(doubleArray24);
        double[] doubleArray27 = empiricalDistributionImpl1.getUpperBounds();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl29 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl31 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int32 = empiricalDistributionImpl31.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary33 = empiricalDistributionImpl31.getSampleStats();
        double[] doubleArray37 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl31.load(doubleArray37);
        empiricalDistributionImpl29.load(doubleArray37);
        empiricalDistributionImpl1.load(doubleArray37);
        int int41 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary42 = empiricalDistributionImpl1.getSampleStats();
        double double43 = empiricalDistributionImpl1.getNextValue();
        boolean boolean44 = empiricalDistributionImpl1.isLoaded();
        double[] doubleArray45 = empiricalDistributionImpl1.getUpperBounds();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 35 + "'", int2 == 35);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(statisticalSummary7);
        org.junit.Assert.assertNotNull(statisticalSummary8);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
        org.junit.Assert.assertNull(statisticalSummary14);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 1.0]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 35 + "'", int32 == 35);
        org.junit.Assert.assertNull(statisticalSummary33);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 35 + "'", int41 == 35);
        org.junit.Assert.assertNotNull(statisticalSummary42);
// flaky:         org.junit.Assert.assertTrue("'" + double43 + "' != '" + 32.0d + "'", double43 == 32.0d);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 1.0]");
    }

    @Test
    public void test1699() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1699");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        int int12 = empiricalDistributionImpl1.getBinCount();
        java.util.List list13 = empiricalDistributionImpl1.getBinStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary14 = empiricalDistributionImpl1.getSampleStats();
        boolean boolean15 = empiricalDistributionImpl1.isLoaded();
        int int16 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl18 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl20 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int21 = empiricalDistributionImpl20.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary22 = empiricalDistributionImpl20.getSampleStats();
        double[] doubleArray26 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl20.load(doubleArray26);
        empiricalDistributionImpl18.load(doubleArray26);
        double[] doubleArray32 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl18.load(doubleArray32);
        double[] doubleArray34 = empiricalDistributionImpl18.getUpperBounds();
        double double35 = empiricalDistributionImpl18.getNextValue();
        boolean boolean36 = empiricalDistributionImpl18.isLoaded();
        int int37 = empiricalDistributionImpl18.getBinCount();
        double[] doubleArray38 = empiricalDistributionImpl18.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray38);
        java.io.File file40 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(file40);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 100 + "'", int12 == 100);
        org.junit.Assert.assertNotNull(list13);
        org.junit.Assert.assertNotNull(statisticalSummary14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 100 + "'", int16 == 100);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 35 + "'", int21 == 35);
        org.junit.Assert.assertNull(statisticalSummary22);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double35 + "' != '" + (-0.12975977598750116d) + "'", double35 == (-0.12975977598750116d));
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
    }

    @Test
    public void test1700() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1700");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl10 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl12 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int13 = empiricalDistributionImpl12.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary14 = empiricalDistributionImpl12.getSampleStats();
        double[] doubleArray18 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl12.load(doubleArray18);
        empiricalDistributionImpl10.load(doubleArray18);
        empiricalDistributionImpl1.load(doubleArray18);
        double double22 = empiricalDistributionImpl1.getNextValue();
        double double23 = empiricalDistributionImpl1.getNextValue();
        int int24 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray30 = new double[] { (-1.6376554233261442d), 0.4411413943373417d, (-1.7557750258898799d), (-1.344045703089845d), 0L };
        empiricalDistributionImpl1.load(doubleArray30);
        java.io.File file32 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(file32);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
        org.junit.Assert.assertNull(statisticalSummary14);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1.0d + "'", double22 == 1.0d);
// flaky:         org.junit.Assert.assertTrue("'" + double23 + "' != '" + 10.0d + "'", double23 == 10.0d);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 35 + "'", int24 == 35);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[-1.6376554233261442, 0.4411413943373417, -1.7557750258898799, -1.344045703089845, 0.0]");
    }

    @Test
    public void test1701() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1701");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl10 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl12 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int13 = empiricalDistributionImpl12.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary14 = empiricalDistributionImpl12.getSampleStats();
        double[] doubleArray18 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl12.load(doubleArray18);
        empiricalDistributionImpl10.load(doubleArray18);
        empiricalDistributionImpl1.load(doubleArray18);
        double double22 = empiricalDistributionImpl1.getNextValue();
        java.util.List list23 = empiricalDistributionImpl1.getBinStats();
        java.util.List list24 = empiricalDistributionImpl1.getBinStats();
        int int25 = empiricalDistributionImpl1.getBinCount();
        java.util.List list26 = empiricalDistributionImpl1.getBinStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl28 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) ' ');
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl30 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray35 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl30.load(doubleArray35);
        double[] doubleArray37 = empiricalDistributionImpl30.getUpperBounds();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl39 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl41 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int42 = empiricalDistributionImpl41.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary43 = empiricalDistributionImpl41.getSampleStats();
        double[] doubleArray47 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl41.load(doubleArray47);
        empiricalDistributionImpl39.load(doubleArray47);
        empiricalDistributionImpl30.load(doubleArray47);
        double double51 = empiricalDistributionImpl30.getNextValue();
        java.util.List list52 = empiricalDistributionImpl30.getBinStats();
        int int53 = empiricalDistributionImpl30.getBinCount();
        java.util.List list54 = empiricalDistributionImpl30.getBinStats();
        double double55 = empiricalDistributionImpl30.getNextValue();
        double[] doubleArray56 = empiricalDistributionImpl30.getUpperBounds();
        empiricalDistributionImpl28.load(doubleArray56);
        empiricalDistributionImpl1.load(doubleArray56);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
        org.junit.Assert.assertNull(statisticalSummary14);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double22 + "' != '" + 10.0d + "'", double22 == 10.0d);
        org.junit.Assert.assertNotNull(list23);
        org.junit.Assert.assertNotNull(list24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 35 + "'", int25 == 35);
        org.junit.Assert.assertNotNull(list26);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 35 + "'", int42 == 35);
        org.junit.Assert.assertNull(statisticalSummary43);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double51 + "' != '" + 1.0d + "'", double51 == 1.0d);
        org.junit.Assert.assertNotNull(list52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 35 + "'", int53 == 35);
        org.junit.Assert.assertNotNull(list54);
// flaky:         org.junit.Assert.assertTrue("'" + double55 + "' != '" + 1.0d + "'", double55 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 1.0]");
    }

    @Test
    public void test1702() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1702");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        java.util.List list9 = empiricalDistributionImpl1.getBinStats();
        boolean boolean10 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary11 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl13 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int14 = empiricalDistributionImpl13.getBinCount();
        double[] doubleArray16 = new double[] { 100.0d };
        empiricalDistributionImpl13.load(doubleArray16);
        boolean boolean18 = empiricalDistributionImpl13.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary19 = empiricalDistributionImpl13.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary20 = empiricalDistributionImpl13.getSampleStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl22 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl24 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int25 = empiricalDistributionImpl24.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary26 = empiricalDistributionImpl24.getSampleStats();
        double[] doubleArray30 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl24.load(doubleArray30);
        empiricalDistributionImpl22.load(doubleArray30);
        double[] doubleArray36 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl22.load(doubleArray36);
        empiricalDistributionImpl13.load(doubleArray36);
        double[] doubleArray39 = empiricalDistributionImpl13.getUpperBounds();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl41 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl43 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int44 = empiricalDistributionImpl43.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary45 = empiricalDistributionImpl43.getSampleStats();
        double[] doubleArray49 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl43.load(doubleArray49);
        empiricalDistributionImpl41.load(doubleArray49);
        double double52 = empiricalDistributionImpl41.getNextValue();
        double[] doubleArray53 = empiricalDistributionImpl41.getUpperBounds();
        empiricalDistributionImpl13.load(doubleArray53);
        boolean boolean55 = empiricalDistributionImpl13.isLoaded();
        double[] doubleArray56 = empiricalDistributionImpl13.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray56);
        boolean boolean58 = empiricalDistributionImpl1.isLoaded();
        boolean boolean59 = empiricalDistributionImpl1.isLoaded();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(list9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(statisticalSummary11);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 35 + "'", int14 == 35);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(statisticalSummary19);
        org.junit.Assert.assertNotNull(statisticalSummary20);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 35 + "'", int25 == 35);
        org.junit.Assert.assertNull(statisticalSummary26);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 1.0]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 35 + "'", int44 == 35);
        org.junit.Assert.assertNull(statisticalSummary45);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double52 + "' != '" + 10.0d + "'", double52 == 10.0d);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
    }

    @Test
    public void test1703() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1703");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        java.util.List list9 = empiricalDistributionImpl1.getBinStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl11 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl13 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int14 = empiricalDistributionImpl13.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary15 = empiricalDistributionImpl13.getSampleStats();
        double[] doubleArray19 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl13.load(doubleArray19);
        empiricalDistributionImpl11.load(doubleArray19);
        double double22 = empiricalDistributionImpl11.getNextValue();
        double[] doubleArray23 = empiricalDistributionImpl11.getUpperBounds();
        double[] doubleArray24 = empiricalDistributionImpl11.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray24);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary26 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl28 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl30 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int31 = empiricalDistributionImpl30.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary32 = empiricalDistributionImpl30.getSampleStats();
        double[] doubleArray36 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl30.load(doubleArray36);
        empiricalDistributionImpl28.load(doubleArray36);
        empiricalDistributionImpl1.load(doubleArray36);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary40 = empiricalDistributionImpl1.getSampleStats();
        double[] doubleArray41 = empiricalDistributionImpl1.getUpperBounds();
        double[] doubleArray42 = empiricalDistributionImpl1.getUpperBounds();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(list9);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 35 + "'", int14 == 35);
        org.junit.Assert.assertNull(statisticalSummary15);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double22 + "' != '" + 32.0d + "'", double22 == 32.0d);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertNotNull(statisticalSummary26);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 35 + "'", int31 == 35);
        org.junit.Assert.assertNull(statisticalSummary32);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(statisticalSummary40);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 1.0]");
    }

    @Test
    public void test1704() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1704");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        double double12 = empiricalDistributionImpl1.getNextValue();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl14 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl16 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int17 = empiricalDistributionImpl16.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary18 = empiricalDistributionImpl16.getSampleStats();
        double[] doubleArray22 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl16.load(doubleArray22);
        empiricalDistributionImpl14.load(doubleArray22);
        double double25 = empiricalDistributionImpl14.getNextValue();
        double[] doubleArray26 = empiricalDistributionImpl14.getUpperBounds();
        double[] doubleArray27 = empiricalDistributionImpl14.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray27);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl30 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl32 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray37 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl32.load(doubleArray37);
        double[] doubleArray39 = empiricalDistributionImpl32.getUpperBounds();
        empiricalDistributionImpl30.load(doubleArray39);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl42 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int43 = empiricalDistributionImpl42.getBinCount();
        double[] doubleArray45 = new double[] { 100.0d };
        empiricalDistributionImpl42.load(doubleArray45);
        empiricalDistributionImpl30.load(doubleArray45);
        empiricalDistributionImpl1.load(doubleArray45);
        double double49 = empiricalDistributionImpl1.getNextValue();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary50 = empiricalDistributionImpl1.getSampleStats();
        double double51 = empiricalDistributionImpl1.getNextValue();
        java.util.List list52 = empiricalDistributionImpl1.getBinStats();
        java.net.URL uRL53 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(uRL53);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double12 + "' != '" + 1.0d + "'", double12 == 1.0d);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 35 + "'", int17 == 35);
        org.junit.Assert.assertNull(statisticalSummary18);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double25 + "' != '" + 32.0d + "'", double25 == 32.0d);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 35 + "'", int43 == 35);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[100.0]");
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 100.0d + "'", double49 == 100.0d);
        org.junit.Assert.assertNotNull(statisticalSummary50);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 100.0d + "'", double51 == 100.0d);
        org.junit.Assert.assertNotNull(list52);
    }

    @Test
    public void test1705() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1705");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int2 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray4 = new double[] { 100.0d };
        empiricalDistributionImpl1.load(doubleArray4);
        double double6 = empiricalDistributionImpl1.getNextValue();
        boolean boolean7 = empiricalDistributionImpl1.isLoaded();
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        int int9 = empiricalDistributionImpl1.getBinCount();
        java.io.File file10 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(file10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 35 + "'", int2 == 35);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[100.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 100.0d + "'", double6 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
    }

    @Test
    public void test1706() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1706");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl(1000);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary2 = empiricalDistributionImpl1.getSampleStats();
        org.junit.Assert.assertNull(statisticalSummary2);
    }

    @Test
    public void test1707() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1707");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int2 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray4 = new double[] { 100.0d };
        empiricalDistributionImpl1.load(doubleArray4);
        boolean boolean6 = empiricalDistributionImpl1.isLoaded();
        double[] doubleArray7 = empiricalDistributionImpl1.getUpperBounds();
        double double8 = empiricalDistributionImpl1.getNextValue();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary9 = empiricalDistributionImpl1.getSampleStats();
        int int10 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl12 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray17 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl12.load(doubleArray17);
        empiricalDistributionImpl1.load(doubleArray17);
        double double20 = empiricalDistributionImpl1.getNextValue();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 35 + "'", int2 == 35);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 100.0d + "'", double8 == 100.0d);
        org.junit.Assert.assertNotNull(statisticalSummary9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 35 + "'", int10 == 35);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[10.0, -1.0, 1.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.0d + "'", double20 == 1.0d);
    }

    @Test
    public void test1708() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1708");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        int int9 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl11 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl13 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray18 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl13.load(doubleArray18);
        double[] doubleArray20 = empiricalDistributionImpl13.getUpperBounds();
        empiricalDistributionImpl11.load(doubleArray20);
        empiricalDistributionImpl1.load(doubleArray20);
        java.util.List list23 = empiricalDistributionImpl1.getBinStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary24 = empiricalDistributionImpl1.getSampleStats();
        double double25 = empiricalDistributionImpl1.getNextValue();
        double[] doubleArray26 = empiricalDistributionImpl1.getUpperBounds();
        double[] doubleArray27 = empiricalDistributionImpl1.getUpperBounds();
        java.util.List list28 = empiricalDistributionImpl1.getBinStats();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(list23);
        org.junit.Assert.assertNotNull(statisticalSummary24);
// flaky:         org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.75d + "'", double25 == 0.75d);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.9714285714285715, 0.9714285714285715, 0.9714285714285715, 0.9714285714285715, 0.9714285714285715, 0.9714285714285715, 0.9714285714285715, 0.9714285714285715, 0.9714285714285715, 0.9714285714285715, 0.9714285714285715, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.9714285714285715, 0.9714285714285715, 0.9714285714285715, 0.9714285714285715, 0.9714285714285715, 0.9714285714285715, 0.9714285714285715, 0.9714285714285715, 0.9714285714285715, 0.9714285714285715, 0.9714285714285715, 1.0]");
        org.junit.Assert.assertNotNull(list28);
    }

    @Test
    public void test1709() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1709");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray8 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl3.load(doubleArray8);
        double[] doubleArray10 = empiricalDistributionImpl3.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray10);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl13 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int14 = empiricalDistributionImpl13.getBinCount();
        double[] doubleArray16 = new double[] { 100.0d };
        empiricalDistributionImpl13.load(doubleArray16);
        empiricalDistributionImpl1.load(doubleArray16);
        java.util.List list19 = empiricalDistributionImpl1.getBinStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary20 = empiricalDistributionImpl1.getSampleStats();
        double double21 = empiricalDistributionImpl1.getNextValue();
        java.util.List list22 = empiricalDistributionImpl1.getBinStats();
        int int23 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray24 = empiricalDistributionImpl1.getUpperBounds();
        double[] doubleArray25 = empiricalDistributionImpl1.getUpperBounds();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl27 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl29 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int30 = empiricalDistributionImpl29.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary31 = empiricalDistributionImpl29.getSampleStats();
        double[] doubleArray35 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl29.load(doubleArray35);
        empiricalDistributionImpl27.load(doubleArray35);
        double double38 = empiricalDistributionImpl27.getNextValue();
        java.util.List list39 = empiricalDistributionImpl27.getBinStats();
        double double40 = empiricalDistributionImpl27.getNextValue();
        int int41 = empiricalDistributionImpl27.getBinCount();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl43 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl45 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int46 = empiricalDistributionImpl45.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary47 = empiricalDistributionImpl45.getSampleStats();
        double[] doubleArray51 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl45.load(doubleArray51);
        empiricalDistributionImpl43.load(doubleArray51);
        double double54 = empiricalDistributionImpl43.getNextValue();
        java.util.List list55 = empiricalDistributionImpl43.getBinStats();
        double double56 = empiricalDistributionImpl43.getNextValue();
        int int57 = empiricalDistributionImpl43.getBinCount();
        double[] doubleArray58 = empiricalDistributionImpl43.getUpperBounds();
        empiricalDistributionImpl27.load(doubleArray58);
        empiricalDistributionImpl1.load(doubleArray58);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 35 + "'", int14 == 35);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[100.0]");
        org.junit.Assert.assertNotNull(list19);
        org.junit.Assert.assertNotNull(statisticalSummary20);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 100.0d + "'", double21 == 100.0d);
        org.junit.Assert.assertNotNull(list22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 35 + "'", int23 == 35);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 35 + "'", int30 == 35);
        org.junit.Assert.assertNull(statisticalSummary31);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double38 + "' != '" + 32.0d + "'", double38 == 32.0d);
        org.junit.Assert.assertNotNull(list39);
// flaky:         org.junit.Assert.assertTrue("'" + double40 + "' != '" + 10.0d + "'", double40 == 10.0d);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 100 + "'", int41 == 100);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 35 + "'", int46 == 35);
        org.junit.Assert.assertNull(statisticalSummary47);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double54 + "' != '" + 1.0d + "'", double54 == 1.0d);
        org.junit.Assert.assertNotNull(list55);
// flaky:         org.junit.Assert.assertTrue("'" + double56 + "' != '" + 1.0d + "'", double56 == 1.0d);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 100 + "'", int57 == 100);
        org.junit.Assert.assertNotNull(doubleArray58);
    }

    @Test
    public void test1710() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1710");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        int int12 = empiricalDistributionImpl1.getBinCount();
        java.util.List list13 = empiricalDistributionImpl1.getBinStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary14 = empiricalDistributionImpl1.getSampleStats();
        boolean boolean15 = empiricalDistributionImpl1.isLoaded();
        int int16 = empiricalDistributionImpl1.getBinCount();
        int int17 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray18 = empiricalDistributionImpl1.getUpperBounds();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 100 + "'", int12 == 100);
        org.junit.Assert.assertNotNull(list13);
        org.junit.Assert.assertNotNull(statisticalSummary14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 100 + "'", int16 == 100);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 100 + "'", int17 == 100);
        org.junit.Assert.assertNotNull(doubleArray18);
    }

    @Test
    public void test1711() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1711");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int2 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray4 = new double[] { 100.0d };
        empiricalDistributionImpl1.load(doubleArray4);
        boolean boolean6 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary7 = empiricalDistributionImpl1.getSampleStats();
        int int8 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary9 = empiricalDistributionImpl1.getSampleStats();
        java.util.List list10 = empiricalDistributionImpl1.getBinStats();
        double double11 = empiricalDistributionImpl1.getNextValue();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl13 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int14 = empiricalDistributionImpl13.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary15 = empiricalDistributionImpl13.getSampleStats();
        double[] doubleArray19 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl13.load(doubleArray19);
        int int21 = empiricalDistributionImpl13.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary22 = empiricalDistributionImpl13.getSampleStats();
        double[] doubleArray23 = empiricalDistributionImpl13.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray23);
        int int25 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl27 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray32 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl27.load(doubleArray32);
        double[] doubleArray34 = empiricalDistributionImpl27.getUpperBounds();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary35 = empiricalDistributionImpl27.getSampleStats();
        boolean boolean36 = empiricalDistributionImpl27.isLoaded();
        java.util.List list37 = empiricalDistributionImpl27.getBinStats();
        boolean boolean38 = empiricalDistributionImpl27.isLoaded();
        int int39 = empiricalDistributionImpl27.getBinCount();
        java.util.List list40 = empiricalDistributionImpl27.getBinStats();
        double[] doubleArray41 = empiricalDistributionImpl27.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray41);
        double double43 = empiricalDistributionImpl1.getNextValue();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 35 + "'", int2 == 35);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(statisticalSummary7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 35 + "'", int8 == 35);
        org.junit.Assert.assertNotNull(statisticalSummary9);
        org.junit.Assert.assertNotNull(list10);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 35 + "'", int14 == 35);
        org.junit.Assert.assertNull(statisticalSummary15);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 35 + "'", int21 == 35);
        org.junit.Assert.assertNotNull(statisticalSummary22);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 1.0]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 35 + "'", int25 == 35);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(statisticalSummary35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(list37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 35 + "'", int39 == 35);
        org.junit.Assert.assertNotNull(list40);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.75d + "'", double43 == 0.75d);
    }

    @Test
    public void test1712() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1712");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl10 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl12 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int13 = empiricalDistributionImpl12.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary14 = empiricalDistributionImpl12.getSampleStats();
        double[] doubleArray18 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl12.load(doubleArray18);
        empiricalDistributionImpl10.load(doubleArray18);
        empiricalDistributionImpl1.load(doubleArray18);
        double double22 = empiricalDistributionImpl1.getNextValue();
        java.util.List list23 = empiricalDistributionImpl1.getBinStats();
        int int24 = empiricalDistributionImpl1.getBinCount();
        java.util.List list25 = empiricalDistributionImpl1.getBinStats();
        double double26 = empiricalDistributionImpl1.getNextValue();
        double double27 = empiricalDistributionImpl1.getNextValue();
        int int28 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl30 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '4');
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary31 = empiricalDistributionImpl30.getSampleStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl33 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int34 = empiricalDistributionImpl33.getBinCount();
        double[] doubleArray36 = new double[] { 100.0d };
        empiricalDistributionImpl33.load(doubleArray36);
        boolean boolean38 = empiricalDistributionImpl33.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary39 = empiricalDistributionImpl33.getSampleStats();
        boolean boolean40 = empiricalDistributionImpl33.isLoaded();
        boolean boolean41 = empiricalDistributionImpl33.isLoaded();
        double[] doubleArray42 = empiricalDistributionImpl33.getUpperBounds();
        empiricalDistributionImpl30.load(doubleArray42);
        empiricalDistributionImpl1.load(doubleArray42);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl46 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl48 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int49 = empiricalDistributionImpl48.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary50 = empiricalDistributionImpl48.getSampleStats();
        double[] doubleArray54 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl48.load(doubleArray54);
        empiricalDistributionImpl46.load(doubleArray54);
        double double57 = empiricalDistributionImpl46.getNextValue();
        double[] doubleArray58 = empiricalDistributionImpl46.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray58);
        double double60 = empiricalDistributionImpl1.getNextValue();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
        org.junit.Assert.assertNull(statisticalSummary14);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double22 + "' != '" + 10.0d + "'", double22 == 10.0d);
        org.junit.Assert.assertNotNull(list23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 35 + "'", int24 == 35);
        org.junit.Assert.assertNotNull(list25);
// flaky:         org.junit.Assert.assertTrue("'" + double26 + "' != '" + 1.0d + "'", double26 == 1.0d);
// flaky:         org.junit.Assert.assertTrue("'" + double27 + "' != '" + 1.0d + "'", double27 == 1.0d);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 35 + "'", int28 == 35);
        org.junit.Assert.assertNull(statisticalSummary31);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 35 + "'", int34 == 35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(statisticalSummary39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 35 + "'", int49 == 35);
        org.junit.Assert.assertNull(statisticalSummary50);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double57 + "' != '" + 32.0d + "'", double57 == 32.0d);
        org.junit.Assert.assertNotNull(doubleArray58);
// flaky:         org.junit.Assert.assertTrue("'" + double60 + "' != '" + 0.6666666666666666d + "'", double60 == 0.6666666666666666d);
    }

    @Test
    public void test1713() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1713");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        int int9 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl11 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray16 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl11.load(doubleArray16);
        double[] doubleArray18 = empiricalDistributionImpl11.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray18);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary20 = empiricalDistributionImpl1.getSampleStats();
        java.lang.Class<?> wildcardClass21 = statisticalSummary20.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(statisticalSummary20);
        org.junit.Assert.assertNotNull(wildcardClass21);
    }

    @Test
    public void test1714() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1714");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        java.util.List list9 = empiricalDistributionImpl1.getBinStats();
        boolean boolean10 = empiricalDistributionImpl1.isLoaded();
        java.util.List list11 = empiricalDistributionImpl1.getBinStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary12 = empiricalDistributionImpl1.getSampleStats();
        double[] doubleArray13 = empiricalDistributionImpl1.getUpperBounds();
        boolean boolean14 = empiricalDistributionImpl1.isLoaded();
        int int15 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary16 = empiricalDistributionImpl1.getSampleStats();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(list9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(list11);
        org.junit.Assert.assertNotNull(statisticalSummary12);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 35 + "'", int15 == 35);
        org.junit.Assert.assertNotNull(statisticalSummary16);
    }

    @Test
    public void test1715() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1715");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        int int9 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray10 = empiricalDistributionImpl1.getUpperBounds();
        int int11 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray12 = empiricalDistributionImpl1.getUpperBounds();
        double double13 = empiricalDistributionImpl1.getNextValue();
        java.util.List list14 = empiricalDistributionImpl1.getBinStats();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 35 + "'", int11 == 35);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double13 + "' != '" + 1.0d + "'", double13 == 1.0d);
        org.junit.Assert.assertNotNull(list14);
    }

    @Test
    public void test1716() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1716");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 100);
        int int2 = empiricalDistributionImpl1.getBinCount();
        int int3 = empiricalDistributionImpl1.getBinCount();
        java.util.List list4 = empiricalDistributionImpl1.getBinStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl6 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl8 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int9 = empiricalDistributionImpl8.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary10 = empiricalDistributionImpl8.getSampleStats();
        double[] doubleArray14 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl8.load(doubleArray14);
        empiricalDistributionImpl6.load(doubleArray14);
        double[] doubleArray20 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl6.load(doubleArray20);
        double[] doubleArray22 = empiricalDistributionImpl6.getUpperBounds();
        double double23 = empiricalDistributionImpl6.getNextValue();
        boolean boolean24 = empiricalDistributionImpl6.isLoaded();
        double[] doubleArray25 = empiricalDistributionImpl6.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray25);
        double double27 = empiricalDistributionImpl1.getNextValue();
        boolean boolean28 = empiricalDistributionImpl1.isLoaded();
        boolean boolean29 = empiricalDistributionImpl1.isLoaded();
        java.util.List list30 = empiricalDistributionImpl1.getBinStats();
        double double31 = empiricalDistributionImpl1.getNextValue();
        double[] doubleArray32 = empiricalDistributionImpl1.getUpperBounds();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 100 + "'", int2 == 100);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 100 + "'", int3 == 100);
        org.junit.Assert.assertNotNull(list4);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertNull(statisticalSummary10);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.6990000654012234d + "'", double23 == 0.6990000654012234d);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0]");
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 1.0d + "'", double27 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(list30);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 1.0d + "'", double31 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
    }

    @Test
    public void test1717() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1717");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '4');
        boolean boolean2 = empiricalDistributionImpl1.isLoaded();
        java.util.List list3 = empiricalDistributionImpl1.getBinStats();
        int int4 = empiricalDistributionImpl1.getBinCount();
        java.util.List list5 = empiricalDistributionImpl1.getBinStats();
        int int6 = empiricalDistributionImpl1.getBinCount();
        boolean boolean7 = empiricalDistributionImpl1.isLoaded();
        java.net.URL uRL8 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(uRL8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(list3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(list5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 52 + "'", int6 == 52);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test1718() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1718");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        double[] doubleArray15 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl1.load(doubleArray15);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary17 = empiricalDistributionImpl1.getSampleStats();
        int int18 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray19 = empiricalDistributionImpl1.getUpperBounds();
        java.io.File file20 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(file20);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(statisticalSummary17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0]");
    }

    @Test
    public void test1719() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1719");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        double[] doubleArray15 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl1.load(doubleArray15);
        double double17 = empiricalDistributionImpl1.getNextValue();
        boolean boolean18 = empiricalDistributionImpl1.isLoaded();
        int int19 = empiricalDistributionImpl1.getBinCount();
        int int20 = empiricalDistributionImpl1.getBinCount();
        double double21 = empiricalDistributionImpl1.getNextValue();
        java.util.List list22 = empiricalDistributionImpl1.getBinStats();
        int int23 = empiricalDistributionImpl1.getBinCount();
        java.util.List list24 = empiricalDistributionImpl1.getBinStats();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[-1.0, 0.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.44773068048802356d + "'", double17 == 0.44773068048802356d);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
// flaky:         org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.20537595759928987d + "'", double21 == 0.20537595759928987d);
        org.junit.Assert.assertNotNull(list22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(list24);
    }

    @Test
    public void test1720() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1720");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        double double12 = empiricalDistributionImpl1.getNextValue();
        double[] doubleArray13 = empiricalDistributionImpl1.getUpperBounds();
        double double14 = empiricalDistributionImpl1.getNextValue();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl16 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray21 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl16.load(doubleArray21);
        double[] doubleArray23 = empiricalDistributionImpl16.getUpperBounds();
        java.util.List list24 = empiricalDistributionImpl16.getBinStats();
        boolean boolean25 = empiricalDistributionImpl16.isLoaded();
        double[] doubleArray26 = empiricalDistributionImpl16.getUpperBounds();
        boolean boolean27 = empiricalDistributionImpl16.isLoaded();
        boolean boolean28 = empiricalDistributionImpl16.isLoaded();
        int int29 = empiricalDistributionImpl16.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary30 = empiricalDistributionImpl16.getSampleStats();
        double[] doubleArray31 = empiricalDistributionImpl16.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray31);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary33 = empiricalDistributionImpl1.getSampleStats();
        java.util.List list34 = empiricalDistributionImpl1.getBinStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl36 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int37 = empiricalDistributionImpl36.getBinCount();
        double[] doubleArray39 = new double[] { 100.0d };
        empiricalDistributionImpl36.load(doubleArray39);
        boolean boolean41 = empiricalDistributionImpl36.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary42 = empiricalDistributionImpl36.getSampleStats();
        boolean boolean43 = empiricalDistributionImpl36.isLoaded();
        boolean boolean44 = empiricalDistributionImpl36.isLoaded();
        double[] doubleArray45 = empiricalDistributionImpl36.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray45);
        double double47 = empiricalDistributionImpl1.getNextValue();
        double double48 = empiricalDistributionImpl1.getNextValue();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertNotNull(doubleArray13);
// flaky:         org.junit.Assert.assertTrue("'" + double14 + "' != '" + 32.0d + "'", double14 == 32.0d);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(list24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 35 + "'", int29 == 35);
        org.junit.Assert.assertNotNull(statisticalSummary30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(statisticalSummary33);
        org.junit.Assert.assertNotNull(list34);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 35 + "'", int37 == 35);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(statisticalSummary42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 1.0d + "'", double47 == 1.0d);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 1.0d + "'", double48 == 1.0d);
    }

    @Test
    public void test1721() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1721");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int2 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray4 = new double[] { 100.0d };
        empiricalDistributionImpl1.load(doubleArray4);
        boolean boolean6 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary7 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary8 = empiricalDistributionImpl1.getSampleStats();
        java.net.URL uRL9 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(uRL9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 35 + "'", int2 == 35);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(statisticalSummary7);
        org.junit.Assert.assertNotNull(statisticalSummary8);
    }

    @Test
    public void test1722() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1722");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        int int12 = empiricalDistributionImpl1.getBinCount();
        java.util.List list13 = empiricalDistributionImpl1.getBinStats();
        java.util.List list14 = empiricalDistributionImpl1.getBinStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl16 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        boolean boolean17 = empiricalDistributionImpl16.isLoaded();
        boolean boolean18 = empiricalDistributionImpl16.isLoaded();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl20 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl22 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int23 = empiricalDistributionImpl22.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary24 = empiricalDistributionImpl22.getSampleStats();
        double[] doubleArray28 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl22.load(doubleArray28);
        empiricalDistributionImpl20.load(doubleArray28);
        double[] doubleArray34 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl20.load(doubleArray34);
        empiricalDistributionImpl16.load(doubleArray34);
        empiricalDistributionImpl1.load(doubleArray34);
        java.util.List list38 = empiricalDistributionImpl1.getBinStats();
        java.lang.Class<?> wildcardClass39 = empiricalDistributionImpl1.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 100 + "'", int12 == 100);
        org.junit.Assert.assertNotNull(list13);
        org.junit.Assert.assertNotNull(list14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 35 + "'", int23 == 35);
        org.junit.Assert.assertNull(statisticalSummary24);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(list38);
        org.junit.Assert.assertNotNull(wildcardClass39);
    }

    @Test
    public void test1723() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1723");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl5 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray10 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl5.load(doubleArray10);
        double[] doubleArray12 = empiricalDistributionImpl5.getUpperBounds();
        empiricalDistributionImpl3.load(doubleArray12);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl15 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int16 = empiricalDistributionImpl15.getBinCount();
        double[] doubleArray18 = new double[] { 100.0d };
        empiricalDistributionImpl15.load(doubleArray18);
        empiricalDistributionImpl3.load(doubleArray18);
        empiricalDistributionImpl1.load(doubleArray18);
        java.util.List list22 = empiricalDistributionImpl1.getBinStats();
        java.util.List list23 = empiricalDistributionImpl1.getBinStats();
        int int24 = empiricalDistributionImpl1.getBinCount();
        double double25 = empiricalDistributionImpl1.getNextValue();
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 35 + "'", int16 == 35);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[100.0]");
        org.junit.Assert.assertNotNull(list22);
        org.junit.Assert.assertNotNull(list23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 100 + "'", int24 == 100);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 100.0d + "'", double25 == 100.0d);
    }

    @Test
    public void test1724() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1724");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        double double12 = empiricalDistributionImpl1.getNextValue();
        java.util.List list13 = empiricalDistributionImpl1.getBinStats();
        double double14 = empiricalDistributionImpl1.getNextValue();
        int int15 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary16 = empiricalDistributionImpl1.getSampleStats();
        boolean boolean17 = empiricalDistributionImpl1.isLoaded();
        double double18 = empiricalDistributionImpl1.getNextValue();
        double double19 = empiricalDistributionImpl1.getNextValue();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertNotNull(list13);
// flaky:         org.junit.Assert.assertTrue("'" + double14 + "' != '" + 32.0d + "'", double14 == 32.0d);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 100 + "'", int15 == 100);
        org.junit.Assert.assertNotNull(statisticalSummary16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
// flaky:         org.junit.Assert.assertTrue("'" + double18 + "' != '" + 1.0d + "'", double18 == 1.0d);
// flaky:         org.junit.Assert.assertTrue("'" + double19 + "' != '" + 1.0d + "'", double19 == 1.0d);
    }

    @Test
    public void test1725() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1725");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int2 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray4 = new double[] { 100.0d };
        empiricalDistributionImpl1.load(doubleArray4);
        boolean boolean6 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary7 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary8 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl10 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl12 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int13 = empiricalDistributionImpl12.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary14 = empiricalDistributionImpl12.getSampleStats();
        double[] doubleArray18 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl12.load(doubleArray18);
        empiricalDistributionImpl10.load(doubleArray18);
        double[] doubleArray24 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl10.load(doubleArray24);
        empiricalDistributionImpl1.load(doubleArray24);
        double[] doubleArray27 = empiricalDistributionImpl1.getUpperBounds();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl29 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl31 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int32 = empiricalDistributionImpl31.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary33 = empiricalDistributionImpl31.getSampleStats();
        double[] doubleArray37 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl31.load(doubleArray37);
        empiricalDistributionImpl29.load(doubleArray37);
        empiricalDistributionImpl1.load(doubleArray37);
        int int41 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary42 = empiricalDistributionImpl1.getSampleStats();
        double[] doubleArray43 = empiricalDistributionImpl1.getUpperBounds();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary44 = empiricalDistributionImpl1.getSampleStats();
        double double45 = empiricalDistributionImpl1.getNextValue();
        double[] doubleArray46 = empiricalDistributionImpl1.getUpperBounds();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary47 = empiricalDistributionImpl1.getSampleStats();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 35 + "'", int2 == 35);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(statisticalSummary7);
        org.junit.Assert.assertNotNull(statisticalSummary8);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
        org.junit.Assert.assertNull(statisticalSummary14);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 1.0]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 35 + "'", int32 == 35);
        org.junit.Assert.assertNull(statisticalSummary33);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 35 + "'", int41 == 35);
        org.junit.Assert.assertNotNull(statisticalSummary42);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 1.0]");
        org.junit.Assert.assertNotNull(statisticalSummary44);
// flaky:         org.junit.Assert.assertTrue("'" + double45 + "' != '" + 10.0d + "'", double45 == 10.0d);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 1.0]");
        org.junit.Assert.assertNotNull(statisticalSummary47);
    }

    @Test
    public void test1726() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1726");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        int int12 = empiricalDistributionImpl1.getBinCount();
        java.util.List list13 = empiricalDistributionImpl1.getBinStats();
        int int14 = empiricalDistributionImpl1.getBinCount();
        int int15 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary16 = empiricalDistributionImpl1.getSampleStats();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 100 + "'", int12 == 100);
        org.junit.Assert.assertNotNull(list13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 100 + "'", int14 == 100);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 100 + "'", int15 == 100);
        org.junit.Assert.assertNotNull(statisticalSummary16);
    }

    @Test
    public void test1727() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1727");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 10);
        int int2 = empiricalDistributionImpl1.getBinCount();
        int int3 = empiricalDistributionImpl1.getBinCount();
        int int4 = empiricalDistributionImpl1.getBinCount();
        java.util.List list5 = empiricalDistributionImpl1.getBinStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary6 = empiricalDistributionImpl1.getSampleStats();
        int int7 = empiricalDistributionImpl1.getBinCount();
        java.io.File file8 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(file8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 10 + "'", int2 == 10);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 10 + "'", int3 == 10);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 10 + "'", int4 == 10);
        org.junit.Assert.assertNotNull(list5);
        org.junit.Assert.assertNull(statisticalSummary6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
    }

    @Test
    public void test1728() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1728");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        int int9 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl11 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl13 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray18 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl13.load(doubleArray18);
        double[] doubleArray20 = empiricalDistributionImpl13.getUpperBounds();
        empiricalDistributionImpl11.load(doubleArray20);
        empiricalDistributionImpl1.load(doubleArray20);
        java.util.List list23 = empiricalDistributionImpl1.getBinStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl25 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int26 = empiricalDistributionImpl25.getBinCount();
        double[] doubleArray28 = new double[] { 100.0d };
        empiricalDistributionImpl25.load(doubleArray28);
        boolean boolean30 = empiricalDistributionImpl25.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary31 = empiricalDistributionImpl25.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary32 = empiricalDistributionImpl25.getSampleStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl34 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl36 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int37 = empiricalDistributionImpl36.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary38 = empiricalDistributionImpl36.getSampleStats();
        double[] doubleArray42 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl36.load(doubleArray42);
        empiricalDistributionImpl34.load(doubleArray42);
        double[] doubleArray48 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl34.load(doubleArray48);
        empiricalDistributionImpl25.load(doubleArray48);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl52 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl54 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int55 = empiricalDistributionImpl54.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary56 = empiricalDistributionImpl54.getSampleStats();
        double[] doubleArray60 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl54.load(doubleArray60);
        empiricalDistributionImpl52.load(doubleArray60);
        empiricalDistributionImpl25.load(doubleArray60);
        empiricalDistributionImpl1.load(doubleArray60);
        double[] doubleArray69 = new double[] { 1.1354582769782435d, (short) 0, (-0.1362032819111886d), 10L };
        empiricalDistributionImpl1.load(doubleArray69);
        int int71 = empiricalDistributionImpl1.getBinCount();
        java.util.List list72 = empiricalDistributionImpl1.getBinStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl74 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray79 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl74.load(doubleArray79);
        double[] doubleArray81 = empiricalDistributionImpl74.getUpperBounds();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl83 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray88 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl83.load(doubleArray88);
        double[] doubleArray90 = empiricalDistributionImpl83.getUpperBounds();
        int int91 = empiricalDistributionImpl83.getBinCount();
        double[] doubleArray92 = empiricalDistributionImpl83.getUpperBounds();
        empiricalDistributionImpl74.load(doubleArray92);
        empiricalDistributionImpl1.load(doubleArray92);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary95 = empiricalDistributionImpl1.getSampleStats();
        double[] doubleArray96 = empiricalDistributionImpl1.getUpperBounds();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(list23);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 35 + "'", int26 == 35);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(statisticalSummary31);
        org.junit.Assert.assertNotNull(statisticalSummary32);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 35 + "'", int37 == 35);
        org.junit.Assert.assertNull(statisticalSummary38);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 35 + "'", int55 == 35);
        org.junit.Assert.assertNull(statisticalSummary56);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[1.1354582769782435, 0.0, -0.1362032819111886, 10.0]");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 35 + "'", int71 == 35);
        org.junit.Assert.assertNotNull(list72);
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray90), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 35 + "'", int91 == 35);
        org.junit.Assert.assertNotNull(doubleArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray92), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(statisticalSummary95);
        org.junit.Assert.assertNotNull(doubleArray96);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray96), "[0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.9714285714285715, 0.9714285714285715, 0.9714285714285715, 0.9714285714285715, 0.9714285714285715, 0.9714285714285715, 0.9714285714285715, 0.9714285714285715, 0.9714285714285715, 0.9714285714285715, 0.9714285714285715, 1.0]");
    }

    @Test
    public void test1729() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1729");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int2 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray4 = new double[] { 100.0d };
        empiricalDistributionImpl1.load(doubleArray4);
        boolean boolean6 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary7 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary8 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary9 = empiricalDistributionImpl1.getSampleStats();
        double[] doubleArray10 = empiricalDistributionImpl1.getUpperBounds();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl12 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl14 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int15 = empiricalDistributionImpl14.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary16 = empiricalDistributionImpl14.getSampleStats();
        double[] doubleArray20 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl14.load(doubleArray20);
        empiricalDistributionImpl12.load(doubleArray20);
        double[] doubleArray26 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl12.load(doubleArray26);
        double double28 = empiricalDistributionImpl12.getNextValue();
        int int29 = empiricalDistributionImpl12.getBinCount();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl31 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        boolean boolean32 = empiricalDistributionImpl31.isLoaded();
        boolean boolean33 = empiricalDistributionImpl31.isLoaded();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl35 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl37 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int38 = empiricalDistributionImpl37.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary39 = empiricalDistributionImpl37.getSampleStats();
        double[] doubleArray43 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl37.load(doubleArray43);
        empiricalDistributionImpl35.load(doubleArray43);
        double[] doubleArray49 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl35.load(doubleArray49);
        empiricalDistributionImpl31.load(doubleArray49);
        empiricalDistributionImpl12.load(doubleArray49);
        empiricalDistributionImpl1.load(doubleArray49);
        double double54 = empiricalDistributionImpl1.getNextValue();
        double[] doubleArray55 = empiricalDistributionImpl1.getUpperBounds();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl57 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl59 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int60 = empiricalDistributionImpl59.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary61 = empiricalDistributionImpl59.getSampleStats();
        double[] doubleArray65 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl59.load(doubleArray65);
        empiricalDistributionImpl57.load(doubleArray65);
        int int68 = empiricalDistributionImpl57.getBinCount();
        double[] doubleArray69 = empiricalDistributionImpl57.getUpperBounds();
        java.util.List list70 = empiricalDistributionImpl57.getBinStats();
        boolean boolean71 = empiricalDistributionImpl57.isLoaded();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl73 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl75 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int76 = empiricalDistributionImpl75.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary77 = empiricalDistributionImpl75.getSampleStats();
        double[] doubleArray81 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl75.load(doubleArray81);
        empiricalDistributionImpl73.load(doubleArray81);
        int int84 = empiricalDistributionImpl73.getBinCount();
        java.util.List list85 = empiricalDistributionImpl73.getBinStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary86 = empiricalDistributionImpl73.getSampleStats();
        boolean boolean87 = empiricalDistributionImpl73.isLoaded();
        int int88 = empiricalDistributionImpl73.getBinCount();
        boolean boolean89 = empiricalDistributionImpl73.isLoaded();
        double[] doubleArray90 = empiricalDistributionImpl73.getUpperBounds();
        empiricalDistributionImpl57.load(doubleArray90);
        empiricalDistributionImpl1.load(doubleArray90);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 35 + "'", int2 == 35);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(statisticalSummary7);
        org.junit.Assert.assertNotNull(statisticalSummary8);
        org.junit.Assert.assertNotNull(statisticalSummary9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 35 + "'", int15 == 35);
        org.junit.Assert.assertNull(statisticalSummary16);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[-1.0, 0.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.10833885627767256d + "'", double28 == 0.10833885627767256d);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 35 + "'", int38 == 35);
        org.junit.Assert.assertNull(statisticalSummary39);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[-1.0, 0.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.0d + "'", double54 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 1.0]");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 35 + "'", int60 == 35);
        org.junit.Assert.assertNull(statisticalSummary61);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 100 + "'", int68 == 100);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertNotNull(list70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 35 + "'", int76 == 35);
        org.junit.Assert.assertNull(statisticalSummary77);
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 100 + "'", int84 == 100);
        org.junit.Assert.assertNotNull(list85);
        org.junit.Assert.assertNotNull(statisticalSummary86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 100 + "'", int88 == 100);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertNotNull(doubleArray90);
    }

    @Test
    public void test1730() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1730");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 10);
        int int2 = empiricalDistributionImpl1.getBinCount();
        int int3 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary4 = empiricalDistributionImpl1.getSampleStats();
        boolean boolean5 = empiricalDistributionImpl1.isLoaded();
        java.util.List list6 = empiricalDistributionImpl1.getBinStats();
        boolean boolean7 = empiricalDistributionImpl1.isLoaded();
        int int8 = empiricalDistributionImpl1.getBinCount();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 10 + "'", int2 == 10);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 10 + "'", int3 == 10);
        org.junit.Assert.assertNull(statisticalSummary4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(list6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
    }

    @Test
    public void test1731() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1731");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        double[] doubleArray15 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl1.load(doubleArray15);
        double[] doubleArray17 = empiricalDistributionImpl1.getUpperBounds();
        double double18 = empiricalDistributionImpl1.getNextValue();
        boolean boolean19 = empiricalDistributionImpl1.isLoaded();
        int int20 = empiricalDistributionImpl1.getBinCount();
        java.util.List list21 = empiricalDistributionImpl1.getBinStats();
        java.util.List list22 = empiricalDistributionImpl1.getBinStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl24 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl26 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray31 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl26.load(doubleArray31);
        double[] doubleArray33 = empiricalDistributionImpl26.getUpperBounds();
        empiricalDistributionImpl24.load(doubleArray33);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl36 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int37 = empiricalDistributionImpl36.getBinCount();
        double[] doubleArray39 = new double[] { 100.0d };
        empiricalDistributionImpl36.load(doubleArray39);
        empiricalDistributionImpl24.load(doubleArray39);
        java.util.List list42 = empiricalDistributionImpl24.getBinStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary43 = empiricalDistributionImpl24.getSampleStats();
        double double44 = empiricalDistributionImpl24.getNextValue();
        double double45 = empiricalDistributionImpl24.getNextValue();
        int int46 = empiricalDistributionImpl24.getBinCount();
        double[] doubleArray47 = empiricalDistributionImpl24.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray47);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.33965174849375235d + "'", double18 == 0.33965174849375235d);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(list21);
        org.junit.Assert.assertNotNull(list22);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 35 + "'", int37 == 35);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[100.0]");
        org.junit.Assert.assertNotNull(list42);
        org.junit.Assert.assertNotNull(statisticalSummary43);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 100.0d + "'", double44 == 100.0d);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 100.0d + "'", double45 == 100.0d);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 35 + "'", int46 == 35);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
    }

    @Test
    public void test1732() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1732");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        int int9 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl11 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl13 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray18 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl13.load(doubleArray18);
        double[] doubleArray20 = empiricalDistributionImpl13.getUpperBounds();
        empiricalDistributionImpl11.load(doubleArray20);
        empiricalDistributionImpl1.load(doubleArray20);
        boolean boolean23 = empiricalDistributionImpl1.isLoaded();
        java.util.List list24 = empiricalDistributionImpl1.getBinStats();
        int int25 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl27 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl29 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int30 = empiricalDistributionImpl29.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary31 = empiricalDistributionImpl29.getSampleStats();
        double[] doubleArray35 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl29.load(doubleArray35);
        empiricalDistributionImpl27.load(doubleArray35);
        double[] doubleArray41 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl27.load(doubleArray41);
        double[] doubleArray43 = empiricalDistributionImpl27.getUpperBounds();
        double double44 = empiricalDistributionImpl27.getNextValue();
        boolean boolean45 = empiricalDistributionImpl27.isLoaded();
        int int46 = empiricalDistributionImpl27.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary47 = empiricalDistributionImpl27.getSampleStats();
        boolean boolean48 = empiricalDistributionImpl27.isLoaded();
        double[] doubleArray49 = empiricalDistributionImpl27.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(list24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 35 + "'", int25 == 35);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 35 + "'", int30 == 35);
        org.junit.Assert.assertNull(statisticalSummary31);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double44 + "' != '" + (-0.2715012466409675d) + "'", double44 == (-0.2715012466409675d));
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertNotNull(statisticalSummary47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0]");
    }

    @Test
    public void test1733() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1733");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        int int9 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl11 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl13 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray18 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl13.load(doubleArray18);
        double[] doubleArray20 = empiricalDistributionImpl13.getUpperBounds();
        empiricalDistributionImpl11.load(doubleArray20);
        empiricalDistributionImpl1.load(doubleArray20);
        java.util.List list23 = empiricalDistributionImpl1.getBinStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary24 = empiricalDistributionImpl1.getSampleStats();
        double double25 = empiricalDistributionImpl1.getNextValue();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl27 = new org.apache.commons.math.random.EmpiricalDistributionImpl(10);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl29 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int30 = empiricalDistributionImpl29.getBinCount();
        double[] doubleArray32 = new double[] { 100.0d };
        empiricalDistributionImpl29.load(doubleArray32);
        boolean boolean34 = empiricalDistributionImpl29.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary35 = empiricalDistributionImpl29.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary36 = empiricalDistributionImpl29.getSampleStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl38 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl40 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int41 = empiricalDistributionImpl40.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary42 = empiricalDistributionImpl40.getSampleStats();
        double[] doubleArray46 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl40.load(doubleArray46);
        empiricalDistributionImpl38.load(doubleArray46);
        double[] doubleArray52 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl38.load(doubleArray52);
        empiricalDistributionImpl29.load(doubleArray52);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl56 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl58 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int59 = empiricalDistributionImpl58.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary60 = empiricalDistributionImpl58.getSampleStats();
        double[] doubleArray64 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl58.load(doubleArray64);
        empiricalDistributionImpl56.load(doubleArray64);
        empiricalDistributionImpl29.load(doubleArray64);
        empiricalDistributionImpl27.load(doubleArray64);
        double[] doubleArray69 = empiricalDistributionImpl27.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray69);
        int int71 = empiricalDistributionImpl1.getBinCount();
        boolean boolean72 = empiricalDistributionImpl1.isLoaded();
        double double73 = empiricalDistributionImpl1.getNextValue();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(list23);
        org.junit.Assert.assertNotNull(statisticalSummary24);
// flaky:         org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.75d + "'", double25 == 0.75d);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 35 + "'", int30 == 35);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(statisticalSummary35);
        org.junit.Assert.assertNotNull(statisticalSummary36);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 35 + "'", int41 == 35);
        org.junit.Assert.assertNull(statisticalSummary42);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 35 + "'", int59 == 35);
        org.junit.Assert.assertNull(statisticalSummary60);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[0.3333333333333333, 0.3333333333333333, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 1.0]");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 35 + "'", int71 == 35);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
// flaky:         org.junit.Assert.assertTrue("'" + double73 + "' != '" + 0.6666666666666666d + "'", double73 == 0.6666666666666666d);
    }

    @Test
    public void test1734() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1734");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int2 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray4 = new double[] { 100.0d };
        empiricalDistributionImpl1.load(doubleArray4);
        boolean boolean6 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary7 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary8 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl10 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl12 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int13 = empiricalDistributionImpl12.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary14 = empiricalDistributionImpl12.getSampleStats();
        double[] doubleArray18 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl12.load(doubleArray18);
        empiricalDistributionImpl10.load(doubleArray18);
        double[] doubleArray24 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl10.load(doubleArray24);
        empiricalDistributionImpl1.load(doubleArray24);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary27 = empiricalDistributionImpl1.getSampleStats();
        int int28 = empiricalDistributionImpl1.getBinCount();
        boolean boolean29 = empiricalDistributionImpl1.isLoaded();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 35 + "'", int2 == 35);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(statisticalSummary7);
        org.junit.Assert.assertNotNull(statisticalSummary8);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
        org.junit.Assert.assertNull(statisticalSummary14);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(statisticalSummary27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 35 + "'", int28 == 35);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
    }

    @Test
    public void test1735() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1735");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl10 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl12 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int13 = empiricalDistributionImpl12.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary14 = empiricalDistributionImpl12.getSampleStats();
        double[] doubleArray18 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl12.load(doubleArray18);
        empiricalDistributionImpl10.load(doubleArray18);
        empiricalDistributionImpl1.load(doubleArray18);
        double double22 = empiricalDistributionImpl1.getNextValue();
        java.util.List list23 = empiricalDistributionImpl1.getBinStats();
        boolean boolean24 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary25 = empiricalDistributionImpl1.getSampleStats();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
        org.junit.Assert.assertNull(statisticalSummary14);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double22 + "' != '" + 32.0d + "'", double22 == 32.0d);
        org.junit.Assert.assertNotNull(list23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(statisticalSummary25);
    }

    @Test
    public void test1736() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1736");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary2 = empiricalDistributionImpl1.getSampleStats();
        java.util.List list3 = empiricalDistributionImpl1.getBinStats();
        java.io.File file4 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(file4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(statisticalSummary2);
        org.junit.Assert.assertNotNull(list3);
    }

    @Test
    public void test1737() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1737");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        double[] doubleArray15 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl1.load(doubleArray15);
        double double17 = empiricalDistributionImpl1.getNextValue();
        boolean boolean18 = empiricalDistributionImpl1.isLoaded();
        boolean boolean19 = empiricalDistributionImpl1.isLoaded();
        double[] doubleArray20 = empiricalDistributionImpl1.getUpperBounds();
        java.util.List list21 = empiricalDistributionImpl1.getBinStats();
        double[] doubleArray22 = empiricalDistributionImpl1.getUpperBounds();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary23 = empiricalDistributionImpl1.getSampleStats();
        java.lang.Class<?> wildcardClass24 = statisticalSummary23.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[-1.0, 0.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double17 + "' != '" + (-0.39894790658388807d) + "'", double17 == (-0.39894790658388807d));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0]");
        org.junit.Assert.assertNotNull(list21);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0]");
        org.junit.Assert.assertNotNull(statisticalSummary23);
        org.junit.Assert.assertNotNull(wildcardClass24);
    }

    @Test
    public void test1738() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1738");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl10 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl12 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int13 = empiricalDistributionImpl12.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary14 = empiricalDistributionImpl12.getSampleStats();
        double[] doubleArray18 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl12.load(doubleArray18);
        empiricalDistributionImpl10.load(doubleArray18);
        empiricalDistributionImpl1.load(doubleArray18);
        double double22 = empiricalDistributionImpl1.getNextValue();
        double double23 = empiricalDistributionImpl1.getNextValue();
        double[] doubleArray24 = empiricalDistributionImpl1.getUpperBounds();
        boolean boolean25 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl27 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int28 = empiricalDistributionImpl27.getBinCount();
        double[] doubleArray30 = new double[] { 100.0d };
        empiricalDistributionImpl27.load(doubleArray30);
        boolean boolean32 = empiricalDistributionImpl27.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary33 = empiricalDistributionImpl27.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary34 = empiricalDistributionImpl27.getSampleStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl36 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl38 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int39 = empiricalDistributionImpl38.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary40 = empiricalDistributionImpl38.getSampleStats();
        double[] doubleArray44 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl38.load(doubleArray44);
        empiricalDistributionImpl36.load(doubleArray44);
        double[] doubleArray50 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl36.load(doubleArray50);
        empiricalDistributionImpl27.load(doubleArray50);
        double[] doubleArray53 = empiricalDistributionImpl27.getUpperBounds();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl55 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl57 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int58 = empiricalDistributionImpl57.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary59 = empiricalDistributionImpl57.getSampleStats();
        double[] doubleArray63 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl57.load(doubleArray63);
        empiricalDistributionImpl55.load(doubleArray63);
        empiricalDistributionImpl27.load(doubleArray63);
        int int67 = empiricalDistributionImpl27.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary68 = empiricalDistributionImpl27.getSampleStats();
        double[] doubleArray69 = empiricalDistributionImpl27.getUpperBounds();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary70 = empiricalDistributionImpl27.getSampleStats();
        double double71 = empiricalDistributionImpl27.getNextValue();
        double[] doubleArray72 = empiricalDistributionImpl27.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray72);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
        org.junit.Assert.assertNull(statisticalSummary14);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1.0d + "'", double22 == 1.0d);
// flaky:         org.junit.Assert.assertTrue("'" + double23 + "' != '" + 10.0d + "'", double23 == 10.0d);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 35 + "'", int28 == 35);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(statisticalSummary33);
        org.junit.Assert.assertNotNull(statisticalSummary34);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 35 + "'", int39 == 35);
        org.junit.Assert.assertNull(statisticalSummary40);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 1.0]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 35 + "'", int58 == 35);
        org.junit.Assert.assertNull(statisticalSummary59);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 35 + "'", int67 == 35);
        org.junit.Assert.assertNotNull(statisticalSummary68);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 1.0]");
        org.junit.Assert.assertNotNull(statisticalSummary70);
// flaky:         org.junit.Assert.assertTrue("'" + double71 + "' != '" + 1.0d + "'", double71 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 1.0]");
    }

    @Test
    public void test1739() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1739");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (short) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray8 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl3.load(doubleArray8);
        double[] doubleArray10 = empiricalDistributionImpl3.getUpperBounds();
        int int11 = empiricalDistributionImpl3.getBinCount();
        double[] doubleArray12 = empiricalDistributionImpl3.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray12);
        double[] doubleArray14 = empiricalDistributionImpl1.getUpperBounds();
        double double15 = empiricalDistributionImpl1.getNextValue();
        boolean boolean16 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary17 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary18 = empiricalDistributionImpl1.getSampleStats();
        double[] doubleArray19 = empiricalDistributionImpl1.getUpperBounds();
        java.net.URL uRL20 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(uRL20);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 35 + "'", int11 == 35);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.4223328665219316d + "'", double15 == 0.4223328665219316d);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(statisticalSummary17);
        org.junit.Assert.assertNotNull(statisticalSummary18);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0]");
    }

    @Test
    @Ignore
  public void test1740() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1740");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        int int9 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl11 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray16 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl11.load(doubleArray16);
        double[] doubleArray18 = empiricalDistributionImpl11.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray18);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary20 = empiricalDistributionImpl1.getSampleStats();
        boolean boolean21 = empiricalDistributionImpl1.isLoaded();
        double double22 = empiricalDistributionImpl1.getNextValue();
        java.io.File file23 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(file23);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(statisticalSummary20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.75d + "'", double22 == 0.75d);
    }

    @Test
    public void test1741() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1741");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (short) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray8 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl3.load(doubleArray8);
        double[] doubleArray10 = empiricalDistributionImpl3.getUpperBounds();
        int int11 = empiricalDistributionImpl3.getBinCount();
        double[] doubleArray12 = empiricalDistributionImpl3.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray12);
        double[] doubleArray14 = empiricalDistributionImpl1.getUpperBounds();
        double double15 = empiricalDistributionImpl1.getNextValue();
        boolean boolean16 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary17 = empiricalDistributionImpl1.getSampleStats();
        java.util.List list18 = empiricalDistributionImpl1.getBinStats();
        java.lang.Class<?> wildcardClass19 = list18.getClass();
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 35 + "'", int11 == 35);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.09197148157801338d + "'", double15 == 0.09197148157801338d);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(statisticalSummary17);
        org.junit.Assert.assertNotNull(list18);
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test1742() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1742");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        int int12 = empiricalDistributionImpl1.getBinCount();
        java.util.List list13 = empiricalDistributionImpl1.getBinStats();
        double double14 = empiricalDistributionImpl1.getNextValue();
        java.lang.Class<?> wildcardClass15 = empiricalDistributionImpl1.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 100 + "'", int12 == 100);
        org.junit.Assert.assertNotNull(list13);
// flaky:         org.junit.Assert.assertTrue("'" + double14 + "' != '" + 32.0d + "'", double14 == 32.0d);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test1743() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1743");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary9 = empiricalDistributionImpl1.getSampleStats();
        boolean boolean10 = empiricalDistributionImpl1.isLoaded();
        java.util.List list11 = empiricalDistributionImpl1.getBinStats();
        double double12 = empiricalDistributionImpl1.getNextValue();
        double double13 = empiricalDistributionImpl1.getNextValue();
        boolean boolean14 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl16 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray21 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl16.load(doubleArray21);
        double[] doubleArray23 = empiricalDistributionImpl16.getUpperBounds();
        int int24 = empiricalDistributionImpl16.getBinCount();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl26 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray31 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl26.load(doubleArray31);
        double[] doubleArray33 = empiricalDistributionImpl26.getUpperBounds();
        empiricalDistributionImpl16.load(doubleArray33);
        empiricalDistributionImpl1.load(doubleArray33);
        java.io.File file36 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(file36);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(statisticalSummary9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(list11);
// flaky:         org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
// flaky:         org.junit.Assert.assertTrue("'" + double13 + "' != '" + 1.0d + "'", double13 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 35 + "'", int24 == 35);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
    }

    @Test
    public void test1744() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1744");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) 'a');
        int int2 = empiricalDistributionImpl1.getBinCount();
        boolean boolean3 = empiricalDistributionImpl1.isLoaded();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 97 + "'", int2 == 97);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test1745() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1745");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl5 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray10 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl5.load(doubleArray10);
        double[] doubleArray12 = empiricalDistributionImpl5.getUpperBounds();
        empiricalDistributionImpl3.load(doubleArray12);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl15 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int16 = empiricalDistributionImpl15.getBinCount();
        double[] doubleArray18 = new double[] { 100.0d };
        empiricalDistributionImpl15.load(doubleArray18);
        empiricalDistributionImpl3.load(doubleArray18);
        empiricalDistributionImpl1.load(doubleArray18);
        java.util.List list22 = empiricalDistributionImpl1.getBinStats();
        java.util.List list23 = empiricalDistributionImpl1.getBinStats();
        double double24 = empiricalDistributionImpl1.getNextValue();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary25 = empiricalDistributionImpl1.getSampleStats();
        double[] doubleArray26 = empiricalDistributionImpl1.getUpperBounds();
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 35 + "'", int16 == 35);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[100.0]");
        org.junit.Assert.assertNotNull(list22);
        org.junit.Assert.assertNotNull(list23);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 100.0d + "'", double24 == 100.0d);
        org.junit.Assert.assertNotNull(statisticalSummary25);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
    }

    @Test
    public void test1746() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1746");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int2 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray4 = new double[] { 100.0d };
        empiricalDistributionImpl1.load(doubleArray4);
        boolean boolean6 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary7 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary8 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl10 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl12 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int13 = empiricalDistributionImpl12.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary14 = empiricalDistributionImpl12.getSampleStats();
        double[] doubleArray18 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl12.load(doubleArray18);
        empiricalDistributionImpl10.load(doubleArray18);
        double[] doubleArray24 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl10.load(doubleArray24);
        empiricalDistributionImpl1.load(doubleArray24);
        double[] doubleArray27 = empiricalDistributionImpl1.getUpperBounds();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl29 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl31 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int32 = empiricalDistributionImpl31.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary33 = empiricalDistributionImpl31.getSampleStats();
        double[] doubleArray37 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl31.load(doubleArray37);
        empiricalDistributionImpl29.load(doubleArray37);
        empiricalDistributionImpl1.load(doubleArray37);
        int int41 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray42 = empiricalDistributionImpl1.getUpperBounds();
        java.util.List list43 = empiricalDistributionImpl1.getBinStats();
        int int44 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray45 = empiricalDistributionImpl1.getUpperBounds();
        int int46 = empiricalDistributionImpl1.getBinCount();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 35 + "'", int2 == 35);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(statisticalSummary7);
        org.junit.Assert.assertNotNull(statisticalSummary8);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
        org.junit.Assert.assertNull(statisticalSummary14);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 1.0]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 35 + "'", int32 == 35);
        org.junit.Assert.assertNull(statisticalSummary33);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 35 + "'", int41 == 35);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 1.0]");
        org.junit.Assert.assertNotNull(list43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 35 + "'", int44 == 35);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 1.0]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 35 + "'", int46 == 35);
    }

    @Test
    public void test1747() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1747");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int2 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray4 = new double[] { 100.0d };
        empiricalDistributionImpl1.load(doubleArray4);
        boolean boolean6 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary7 = empiricalDistributionImpl1.getSampleStats();
        boolean boolean8 = empiricalDistributionImpl1.isLoaded();
        boolean boolean9 = empiricalDistributionImpl1.isLoaded();
        boolean boolean10 = empiricalDistributionImpl1.isLoaded();
        double[] doubleArray11 = empiricalDistributionImpl1.getUpperBounds();
        double double12 = empiricalDistributionImpl1.getNextValue();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 35 + "'", int2 == 35);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(statisticalSummary7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 100.0d + "'", double12 == 100.0d);
    }

    @Test
    public void test1748() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1748");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (short) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray8 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl3.load(doubleArray8);
        double[] doubleArray10 = empiricalDistributionImpl3.getUpperBounds();
        int int11 = empiricalDistributionImpl3.getBinCount();
        double[] doubleArray12 = empiricalDistributionImpl3.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray12);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl15 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl17 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray22 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl17.load(doubleArray22);
        double[] doubleArray24 = empiricalDistributionImpl17.getUpperBounds();
        empiricalDistributionImpl15.load(doubleArray24);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl27 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int28 = empiricalDistributionImpl27.getBinCount();
        double[] doubleArray30 = new double[] { 100.0d };
        empiricalDistributionImpl27.load(doubleArray30);
        empiricalDistributionImpl15.load(doubleArray30);
        double[] doubleArray33 = empiricalDistributionImpl15.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray33);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl36 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray41 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl36.load(doubleArray41);
        double[] doubleArray43 = empiricalDistributionImpl36.getUpperBounds();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl45 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl47 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int48 = empiricalDistributionImpl47.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary49 = empiricalDistributionImpl47.getSampleStats();
        double[] doubleArray53 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl47.load(doubleArray53);
        empiricalDistributionImpl45.load(doubleArray53);
        empiricalDistributionImpl36.load(doubleArray53);
        double double57 = empiricalDistributionImpl36.getNextValue();
        java.util.List list58 = empiricalDistributionImpl36.getBinStats();
        java.util.List list59 = empiricalDistributionImpl36.getBinStats();
        int int60 = empiricalDistributionImpl36.getBinCount();
        java.util.List list61 = empiricalDistributionImpl36.getBinStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl63 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl65 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int66 = empiricalDistributionImpl65.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary67 = empiricalDistributionImpl65.getSampleStats();
        double[] doubleArray71 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl65.load(doubleArray71);
        empiricalDistributionImpl63.load(doubleArray71);
        double[] doubleArray77 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl63.load(doubleArray77);
        double double79 = empiricalDistributionImpl63.getNextValue();
        boolean boolean80 = empiricalDistributionImpl63.isLoaded();
        double double81 = empiricalDistributionImpl63.getNextValue();
        int int82 = empiricalDistributionImpl63.getBinCount();
        double[] doubleArray83 = empiricalDistributionImpl63.getUpperBounds();
        empiricalDistributionImpl36.load(doubleArray83);
        empiricalDistributionImpl1.load(doubleArray83);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 35 + "'", int11 == 35);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 35 + "'", int28 == 35);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[100.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 35 + "'", int48 == 35);
        org.junit.Assert.assertNull(statisticalSummary49);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double57 + "' != '" + 1.0d + "'", double57 == 1.0d);
        org.junit.Assert.assertNotNull(list58);
        org.junit.Assert.assertNotNull(list59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 35 + "'", int60 == 35);
        org.junit.Assert.assertNotNull(list61);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 35 + "'", int66 == 35);
        org.junit.Assert.assertNull(statisticalSummary67);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[-1.0, 0.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double79 + "' != '" + (-1.1016426173464844d) + "'", double79 == (-1.1016426173464844d));
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
// flaky:         org.junit.Assert.assertTrue("'" + double81 + "' != '" + 0.3111617384097988d + "'", double81 == 0.3111617384097988d);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 1 + "'", int82 == 1);
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[1.0]");
    }

    @Test
    public void test1749() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1749");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        java.util.List list9 = empiricalDistributionImpl1.getBinStats();
        boolean boolean10 = empiricalDistributionImpl1.isLoaded();
        double[] doubleArray11 = empiricalDistributionImpl1.getUpperBounds();
        boolean boolean12 = empiricalDistributionImpl1.isLoaded();
        boolean boolean13 = empiricalDistributionImpl1.isLoaded();
        int int14 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary15 = empiricalDistributionImpl1.getSampleStats();
        double[] doubleArray16 = empiricalDistributionImpl1.getUpperBounds();
        java.util.List list17 = empiricalDistributionImpl1.getBinStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl19 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl21 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int22 = empiricalDistributionImpl21.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary23 = empiricalDistributionImpl21.getSampleStats();
        double[] doubleArray27 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl21.load(doubleArray27);
        empiricalDistributionImpl19.load(doubleArray27);
        double[] doubleArray33 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl19.load(doubleArray33);
        double double35 = empiricalDistributionImpl19.getNextValue();
        boolean boolean36 = empiricalDistributionImpl19.isLoaded();
        int int37 = empiricalDistributionImpl19.getBinCount();
        int int38 = empiricalDistributionImpl19.getBinCount();
        double double39 = empiricalDistributionImpl19.getNextValue();
        java.util.List list40 = empiricalDistributionImpl19.getBinStats();
        int int41 = empiricalDistributionImpl19.getBinCount();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl43 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray48 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl43.load(doubleArray48);
        double[] doubleArray50 = empiricalDistributionImpl43.getUpperBounds();
        int int51 = empiricalDistributionImpl43.getBinCount();
        double[] doubleArray52 = empiricalDistributionImpl43.getUpperBounds();
        int int53 = empiricalDistributionImpl43.getBinCount();
        double[] doubleArray54 = empiricalDistributionImpl43.getUpperBounds();
        empiricalDistributionImpl19.load(doubleArray54);
        double[] doubleArray56 = empiricalDistributionImpl19.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray56);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(list9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 35 + "'", int14 == 35);
        org.junit.Assert.assertNotNull(statisticalSummary15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(list17);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 35 + "'", int22 == 35);
        org.junit.Assert.assertNull(statisticalSummary23);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[-1.0, 0.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.585153384754805d + "'", double35 == 0.585153384754805d);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
// flaky:         org.junit.Assert.assertTrue("'" + double39 + "' != '" + (-0.014810953245056175d) + "'", double39 == (-0.014810953245056175d));
        org.junit.Assert.assertNotNull(list40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 35 + "'", int51 == 35);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 35 + "'", int53 == 35);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0]");
    }

    @Test
    public void test1750() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1750");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        double double12 = empiricalDistributionImpl1.getNextValue();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl14 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl16 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int17 = empiricalDistributionImpl16.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary18 = empiricalDistributionImpl16.getSampleStats();
        double[] doubleArray22 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl16.load(doubleArray22);
        empiricalDistributionImpl14.load(doubleArray22);
        double double25 = empiricalDistributionImpl14.getNextValue();
        double[] doubleArray26 = empiricalDistributionImpl14.getUpperBounds();
        double[] doubleArray27 = empiricalDistributionImpl14.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray27);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary29 = empiricalDistributionImpl1.getSampleStats();
        double double30 = empiricalDistributionImpl1.getNextValue();
        double double31 = empiricalDistributionImpl1.getNextValue();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl33 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl35 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl37 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray42 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl37.load(doubleArray42);
        double[] doubleArray44 = empiricalDistributionImpl37.getUpperBounds();
        empiricalDistributionImpl35.load(doubleArray44);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl47 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int48 = empiricalDistributionImpl47.getBinCount();
        double[] doubleArray50 = new double[] { 100.0d };
        empiricalDistributionImpl47.load(doubleArray50);
        empiricalDistributionImpl35.load(doubleArray50);
        empiricalDistributionImpl33.load(doubleArray50);
        java.util.List list54 = empiricalDistributionImpl33.getBinStats();
        java.util.List list55 = empiricalDistributionImpl33.getBinStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl57 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl59 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray64 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl59.load(doubleArray64);
        double[] doubleArray66 = empiricalDistributionImpl59.getUpperBounds();
        empiricalDistributionImpl57.load(doubleArray66);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl69 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int70 = empiricalDistributionImpl69.getBinCount();
        double[] doubleArray72 = new double[] { 100.0d };
        empiricalDistributionImpl69.load(doubleArray72);
        empiricalDistributionImpl57.load(doubleArray72);
        java.util.List list75 = empiricalDistributionImpl57.getBinStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary76 = empiricalDistributionImpl57.getSampleStats();
        double double77 = empiricalDistributionImpl57.getNextValue();
        java.util.List list78 = empiricalDistributionImpl57.getBinStats();
        int int79 = empiricalDistributionImpl57.getBinCount();
        double[] doubleArray80 = empiricalDistributionImpl57.getUpperBounds();
        empiricalDistributionImpl33.load(doubleArray80);
        empiricalDistributionImpl1.load(doubleArray80);
        double[] doubleArray83 = empiricalDistributionImpl1.getUpperBounds();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 35 + "'", int17 == 35);
        org.junit.Assert.assertNull(statisticalSummary18);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double25 + "' != '" + 32.0d + "'", double25 == 32.0d);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertNotNull(statisticalSummary29);
// flaky:         org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.6666666666666666d + "'", double30 == 0.6666666666666666d);
// flaky:         org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.6666666666666666d + "'", double31 == 0.6666666666666666d);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 35 + "'", int48 == 35);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[100.0]");
        org.junit.Assert.assertNotNull(list54);
        org.junit.Assert.assertNotNull(list55);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 35 + "'", int70 == 35);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[100.0]");
        org.junit.Assert.assertNotNull(list75);
        org.junit.Assert.assertNotNull(statisticalSummary76);
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 100.0d + "'", double77 == 100.0d);
        org.junit.Assert.assertNotNull(list78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 35 + "'", int79 == 35);
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
    }

    @Test
    public void test1751() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1751");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        int int9 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl11 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray16 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl11.load(doubleArray16);
        double[] doubleArray18 = empiricalDistributionImpl11.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray18);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary20 = empiricalDistributionImpl1.getSampleStats();
        boolean boolean21 = empiricalDistributionImpl1.isLoaded();
        double double22 = empiricalDistributionImpl1.getNextValue();
        java.net.URL uRL23 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(uRL23);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(statisticalSummary20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
// flaky:         org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.25d + "'", double22 == 0.25d);
    }

    @Test
    public void test1752() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1752");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        int int9 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl11 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl13 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray18 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl13.load(doubleArray18);
        double[] doubleArray20 = empiricalDistributionImpl13.getUpperBounds();
        empiricalDistributionImpl11.load(doubleArray20);
        empiricalDistributionImpl1.load(doubleArray20);
        java.util.List list23 = empiricalDistributionImpl1.getBinStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl25 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int26 = empiricalDistributionImpl25.getBinCount();
        double[] doubleArray28 = new double[] { 100.0d };
        empiricalDistributionImpl25.load(doubleArray28);
        boolean boolean30 = empiricalDistributionImpl25.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary31 = empiricalDistributionImpl25.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary32 = empiricalDistributionImpl25.getSampleStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl34 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl36 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int37 = empiricalDistributionImpl36.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary38 = empiricalDistributionImpl36.getSampleStats();
        double[] doubleArray42 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl36.load(doubleArray42);
        empiricalDistributionImpl34.load(doubleArray42);
        double[] doubleArray48 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl34.load(doubleArray48);
        empiricalDistributionImpl25.load(doubleArray48);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl52 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl54 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int55 = empiricalDistributionImpl54.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary56 = empiricalDistributionImpl54.getSampleStats();
        double[] doubleArray60 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl54.load(doubleArray60);
        empiricalDistributionImpl52.load(doubleArray60);
        empiricalDistributionImpl25.load(doubleArray60);
        empiricalDistributionImpl1.load(doubleArray60);
        double double65 = empiricalDistributionImpl1.getNextValue();
        double double66 = empiricalDistributionImpl1.getNextValue();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(list23);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 35 + "'", int26 == 35);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(statisticalSummary31);
        org.junit.Assert.assertNotNull(statisticalSummary32);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 35 + "'", int37 == 35);
        org.junit.Assert.assertNull(statisticalSummary38);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 35 + "'", int55 == 35);
        org.junit.Assert.assertNull(statisticalSummary56);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double65 + "' != '" + 1.0d + "'", double65 == 1.0d);
// flaky:         org.junit.Assert.assertTrue("'" + double66 + "' != '" + 1.0d + "'", double66 == 1.0d);
    }

    @Test
    public void test1753() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1753");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) ' ');
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        double[] doubleArray6 = new double[] { 100.0d };
        empiricalDistributionImpl3.load(doubleArray6);
        boolean boolean8 = empiricalDistributionImpl3.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary9 = empiricalDistributionImpl3.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary10 = empiricalDistributionImpl3.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary11 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray12 = empiricalDistributionImpl3.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray12);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl15 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray20 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl15.load(doubleArray20);
        double[] doubleArray22 = empiricalDistributionImpl15.getUpperBounds();
        int int23 = empiricalDistributionImpl15.getBinCount();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl25 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl27 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray32 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl27.load(doubleArray32);
        double[] doubleArray34 = empiricalDistributionImpl27.getUpperBounds();
        empiricalDistributionImpl25.load(doubleArray34);
        empiricalDistributionImpl15.load(doubleArray34);
        java.util.List list37 = empiricalDistributionImpl15.getBinStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl39 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int40 = empiricalDistributionImpl39.getBinCount();
        double[] doubleArray42 = new double[] { 100.0d };
        empiricalDistributionImpl39.load(doubleArray42);
        boolean boolean44 = empiricalDistributionImpl39.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary45 = empiricalDistributionImpl39.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary46 = empiricalDistributionImpl39.getSampleStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl48 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl50 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int51 = empiricalDistributionImpl50.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary52 = empiricalDistributionImpl50.getSampleStats();
        double[] doubleArray56 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl50.load(doubleArray56);
        empiricalDistributionImpl48.load(doubleArray56);
        double[] doubleArray62 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl48.load(doubleArray62);
        empiricalDistributionImpl39.load(doubleArray62);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl66 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl68 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int69 = empiricalDistributionImpl68.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary70 = empiricalDistributionImpl68.getSampleStats();
        double[] doubleArray74 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl68.load(doubleArray74);
        empiricalDistributionImpl66.load(doubleArray74);
        empiricalDistributionImpl39.load(doubleArray74);
        empiricalDistributionImpl15.load(doubleArray74);
        double[] doubleArray83 = new double[] { 1.1354582769782435d, (short) 0, (-0.1362032819111886d), 10L };
        empiricalDistributionImpl15.load(doubleArray83);
        boolean boolean85 = empiricalDistributionImpl15.isLoaded();
        double[] doubleArray86 = empiricalDistributionImpl15.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray86);
        java.lang.Class<?> wildcardClass88 = empiricalDistributionImpl1.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(statisticalSummary9);
        org.junit.Assert.assertNotNull(statisticalSummary10);
        org.junit.Assert.assertNotNull(statisticalSummary11);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 35 + "'", int23 == 35);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(list37);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 35 + "'", int40 == 35);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(statisticalSummary45);
        org.junit.Assert.assertNotNull(statisticalSummary46);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 35 + "'", int51 == 35);
        org.junit.Assert.assertNull(statisticalSummary52);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 35 + "'", int69 == 35);
        org.junit.Assert.assertNull(statisticalSummary70);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[1.1354582769782435, 0.0, -0.1362032819111886, 10.0]");
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[0.5, 0.5, 0.5, 0.5, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(wildcardClass88);
    }

    @Test
    public void test1754() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1754");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        double[] doubleArray15 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl1.load(doubleArray15);
        double double17 = empiricalDistributionImpl1.getNextValue();
        java.util.List list18 = empiricalDistributionImpl1.getBinStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary19 = empiricalDistributionImpl1.getSampleStats();
        double[] doubleArray20 = empiricalDistributionImpl1.getUpperBounds();
        boolean boolean21 = empiricalDistributionImpl1.isLoaded();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[-1.0, 0.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double17 + "' != '" + (-0.05765665826164523d) + "'", double17 == (-0.05765665826164523d));
        org.junit.Assert.assertNotNull(list18);
        org.junit.Assert.assertNotNull(statisticalSummary19);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
    }

    @Test
    public void test1755() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1755");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int2 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray4 = new double[] { 100.0d };
        empiricalDistributionImpl1.load(doubleArray4);
        boolean boolean6 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary7 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary8 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary9 = empiricalDistributionImpl1.getSampleStats();
        java.util.List list10 = empiricalDistributionImpl1.getBinStats();
        boolean boolean11 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary12 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary13 = empiricalDistributionImpl1.getSampleStats();
        int int14 = empiricalDistributionImpl1.getBinCount();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 35 + "'", int2 == 35);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(statisticalSummary7);
        org.junit.Assert.assertNotNull(statisticalSummary8);
        org.junit.Assert.assertNotNull(statisticalSummary9);
        org.junit.Assert.assertNotNull(list10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(statisticalSummary12);
        org.junit.Assert.assertNotNull(statisticalSummary13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 35 + "'", int14 == 35);
    }

    @Test
    public void test1756() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1756");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        int int9 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray10 = empiricalDistributionImpl1.getUpperBounds();
        int int11 = empiricalDistributionImpl1.getBinCount();
        java.util.List list12 = empiricalDistributionImpl1.getBinStats();
        int int13 = empiricalDistributionImpl1.getBinCount();
        boolean boolean14 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary15 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary16 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary17 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary18 = empiricalDistributionImpl1.getSampleStats();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 35 + "'", int11 == 35);
        org.junit.Assert.assertNotNull(list12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(statisticalSummary15);
        org.junit.Assert.assertNotNull(statisticalSummary16);
        org.junit.Assert.assertNotNull(statisticalSummary17);
        org.junit.Assert.assertNotNull(statisticalSummary18);
    }

    @Test
    public void test1757() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1757");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int2 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray4 = new double[] { 100.0d };
        empiricalDistributionImpl1.load(doubleArray4);
        boolean boolean6 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary7 = empiricalDistributionImpl1.getSampleStats();
        boolean boolean8 = empiricalDistributionImpl1.isLoaded();
        boolean boolean9 = empiricalDistributionImpl1.isLoaded();
        java.util.List list10 = empiricalDistributionImpl1.getBinStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl12 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl14 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int15 = empiricalDistributionImpl14.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary16 = empiricalDistributionImpl14.getSampleStats();
        double[] doubleArray20 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl14.load(doubleArray20);
        empiricalDistributionImpl12.load(doubleArray20);
        int int23 = empiricalDistributionImpl12.getBinCount();
        double[] doubleArray24 = empiricalDistributionImpl12.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray24);
        double double26 = empiricalDistributionImpl1.getNextValue();
        java.util.List list27 = empiricalDistributionImpl1.getBinStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary28 = empiricalDistributionImpl1.getSampleStats();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 35 + "'", int2 == 35);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(statisticalSummary7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(list10);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 35 + "'", int15 == 35);
        org.junit.Assert.assertNull(statisticalSummary16);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 100 + "'", int23 == 100);
        org.junit.Assert.assertNotNull(doubleArray24);
// flaky:         org.junit.Assert.assertTrue("'" + double26 + "' != '" + 0.6666666666666666d + "'", double26 == 0.6666666666666666d);
        org.junit.Assert.assertNotNull(list27);
        org.junit.Assert.assertNotNull(statisticalSummary28);
    }

    @Test
    public void test1758() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1758");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        int int9 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray10 = empiricalDistributionImpl1.getUpperBounds();
        int int11 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray12 = empiricalDistributionImpl1.getUpperBounds();
        double[] doubleArray13 = empiricalDistributionImpl1.getUpperBounds();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary14 = empiricalDistributionImpl1.getSampleStats();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 35 + "'", int11 == 35);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(statisticalSummary14);
    }

    @Test
    public void test1759() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1759");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl10 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl12 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int13 = empiricalDistributionImpl12.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary14 = empiricalDistributionImpl12.getSampleStats();
        double[] doubleArray18 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl12.load(doubleArray18);
        empiricalDistributionImpl10.load(doubleArray18);
        empiricalDistributionImpl1.load(doubleArray18);
        boolean boolean22 = empiricalDistributionImpl1.isLoaded();
        double[] doubleArray23 = empiricalDistributionImpl1.getUpperBounds();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
        org.junit.Assert.assertNull(statisticalSummary14);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 1.0]");
    }

    @Test
    public void test1760() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1760");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        double[] doubleArray15 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl1.load(doubleArray15);
        double double17 = empiricalDistributionImpl1.getNextValue();
        boolean boolean18 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary19 = empiricalDistributionImpl1.getSampleStats();
        boolean boolean20 = empiricalDistributionImpl1.isLoaded();
        double[] doubleArray21 = empiricalDistributionImpl1.getUpperBounds();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[-1.0, 0.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.9514333460997002d + "'", double17 == 0.9514333460997002d);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(statisticalSummary19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0]");
    }

    @Test
    public void test1761() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1761");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int2 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray4 = new double[] { 100.0d };
        empiricalDistributionImpl1.load(doubleArray4);
        boolean boolean6 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary7 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary8 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary9 = empiricalDistributionImpl1.getSampleStats();
        java.util.List list10 = empiricalDistributionImpl1.getBinStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary11 = empiricalDistributionImpl1.getSampleStats();
        boolean boolean12 = empiricalDistributionImpl1.isLoaded();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 35 + "'", int2 == 35);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(statisticalSummary7);
        org.junit.Assert.assertNotNull(statisticalSummary8);
        org.junit.Assert.assertNotNull(statisticalSummary9);
        org.junit.Assert.assertNotNull(list10);
        org.junit.Assert.assertNotNull(statisticalSummary11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
    }

    @Test
    public void test1762() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1762");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        java.util.List list12 = empiricalDistributionImpl1.getBinStats();
        double double13 = empiricalDistributionImpl1.getNextValue();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl15 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray20 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl15.load(doubleArray20);
        double[] doubleArray22 = empiricalDistributionImpl15.getUpperBounds();
        int int23 = empiricalDistributionImpl15.getBinCount();
        double[] doubleArray24 = empiricalDistributionImpl15.getUpperBounds();
        int int25 = empiricalDistributionImpl15.getBinCount();
        java.util.List list26 = empiricalDistributionImpl15.getBinStats();
        boolean boolean27 = empiricalDistributionImpl15.isLoaded();
        double[] doubleArray28 = empiricalDistributionImpl15.getUpperBounds();
        boolean boolean29 = empiricalDistributionImpl15.isLoaded();
        double[] doubleArray30 = empiricalDistributionImpl15.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray30);
        boolean boolean32 = empiricalDistributionImpl1.isLoaded();
        java.util.List list33 = empiricalDistributionImpl1.getBinStats();
        double double34 = empiricalDistributionImpl1.getNextValue();
        java.io.File file35 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(file35);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(list12);
// flaky:         org.junit.Assert.assertTrue("'" + double13 + "' != '" + 1.0d + "'", double13 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 35 + "'", int23 == 35);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 35 + "'", int25 == 35);
        org.junit.Assert.assertNotNull(list26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(list33);
// flaky:         org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.25d + "'", double34 == 0.25d);
    }

    @Test
    public void test1763() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1763");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int2 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray4 = new double[] { 100.0d };
        empiricalDistributionImpl1.load(doubleArray4);
        boolean boolean6 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary7 = empiricalDistributionImpl1.getSampleStats();
        boolean boolean8 = empiricalDistributionImpl1.isLoaded();
        boolean boolean9 = empiricalDistributionImpl1.isLoaded();
        double double10 = empiricalDistributionImpl1.getNextValue();
        boolean boolean11 = empiricalDistributionImpl1.isLoaded();
        boolean boolean12 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl14 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 100);
        int int15 = empiricalDistributionImpl14.getBinCount();
        int int16 = empiricalDistributionImpl14.getBinCount();
        java.util.List list17 = empiricalDistributionImpl14.getBinStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl19 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl21 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int22 = empiricalDistributionImpl21.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary23 = empiricalDistributionImpl21.getSampleStats();
        double[] doubleArray27 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl21.load(doubleArray27);
        empiricalDistributionImpl19.load(doubleArray27);
        double[] doubleArray33 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl19.load(doubleArray33);
        double[] doubleArray35 = empiricalDistributionImpl19.getUpperBounds();
        double double36 = empiricalDistributionImpl19.getNextValue();
        boolean boolean37 = empiricalDistributionImpl19.isLoaded();
        double[] doubleArray38 = empiricalDistributionImpl19.getUpperBounds();
        empiricalDistributionImpl14.load(doubleArray38);
        double double40 = empiricalDistributionImpl14.getNextValue();
        boolean boolean41 = empiricalDistributionImpl14.isLoaded();
        double double42 = empiricalDistributionImpl14.getNextValue();
        double[] doubleArray43 = empiricalDistributionImpl14.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray43);
        java.lang.Class<?> wildcardClass45 = doubleArray43.getClass();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 35 + "'", int2 == 35);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(statisticalSummary7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 100.0d + "'", double10 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 100 + "'", int15 == 100);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 100 + "'", int16 == 100);
        org.junit.Assert.assertNotNull(list17);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 35 + "'", int22 == 35);
        org.junit.Assert.assertNull(statisticalSummary23);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double36 + "' != '" + 0.881045605022861d + "'", double36 == 0.881045605022861d);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 1.0d + "'", double40 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 1.0d + "'", double42 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(wildcardClass45);
    }

    @Test
    public void test1764() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1764");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl10 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl12 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int13 = empiricalDistributionImpl12.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary14 = empiricalDistributionImpl12.getSampleStats();
        double[] doubleArray18 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl12.load(doubleArray18);
        empiricalDistributionImpl10.load(doubleArray18);
        empiricalDistributionImpl1.load(doubleArray18);
        double double22 = empiricalDistributionImpl1.getNextValue();
        java.util.List list23 = empiricalDistributionImpl1.getBinStats();
        int int24 = empiricalDistributionImpl1.getBinCount();
        java.util.List list25 = empiricalDistributionImpl1.getBinStats();
        double double26 = empiricalDistributionImpl1.getNextValue();
        java.util.List list27 = empiricalDistributionImpl1.getBinStats();
        double[] doubleArray28 = empiricalDistributionImpl1.getUpperBounds();
        double[] doubleArray29 = empiricalDistributionImpl1.getUpperBounds();
        java.net.URL uRL30 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(uRL30);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
        org.junit.Assert.assertNull(statisticalSummary14);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1.0d + "'", double22 == 1.0d);
        org.junit.Assert.assertNotNull(list23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 35 + "'", int24 == 35);
        org.junit.Assert.assertNotNull(list25);
// flaky:         org.junit.Assert.assertTrue("'" + double26 + "' != '" + 32.0d + "'", double26 == 32.0d);
        org.junit.Assert.assertNotNull(list27);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 1.0]");
    }

    @Test
    public void test1765() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1765");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int2 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray4 = new double[] { 100.0d };
        empiricalDistributionImpl1.load(doubleArray4);
        boolean boolean6 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary7 = empiricalDistributionImpl1.getSampleStats();
        boolean boolean8 = empiricalDistributionImpl1.isLoaded();
        boolean boolean9 = empiricalDistributionImpl1.isLoaded();
        double[] doubleArray10 = empiricalDistributionImpl1.getUpperBounds();
        double double11 = empiricalDistributionImpl1.getNextValue();
        java.util.List list12 = empiricalDistributionImpl1.getBinStats();
        double double13 = empiricalDistributionImpl1.getNextValue();
        java.util.List list14 = empiricalDistributionImpl1.getBinStats();
        int int15 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl17 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl19 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int20 = empiricalDistributionImpl19.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary21 = empiricalDistributionImpl19.getSampleStats();
        double[] doubleArray25 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl19.load(doubleArray25);
        empiricalDistributionImpl17.load(doubleArray25);
        double[] doubleArray31 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl17.load(doubleArray31);
        double double33 = empiricalDistributionImpl17.getNextValue();
        int int34 = empiricalDistributionImpl17.getBinCount();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl36 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        boolean boolean37 = empiricalDistributionImpl36.isLoaded();
        boolean boolean38 = empiricalDistributionImpl36.isLoaded();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl40 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl42 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int43 = empiricalDistributionImpl42.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary44 = empiricalDistributionImpl42.getSampleStats();
        double[] doubleArray48 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl42.load(doubleArray48);
        empiricalDistributionImpl40.load(doubleArray48);
        double[] doubleArray54 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl40.load(doubleArray54);
        empiricalDistributionImpl36.load(doubleArray54);
        empiricalDistributionImpl17.load(doubleArray54);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl59 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        boolean boolean60 = empiricalDistributionImpl59.isLoaded();
        boolean boolean61 = empiricalDistributionImpl59.isLoaded();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl63 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl65 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int66 = empiricalDistributionImpl65.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary67 = empiricalDistributionImpl65.getSampleStats();
        double[] doubleArray71 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl65.load(doubleArray71);
        empiricalDistributionImpl63.load(doubleArray71);
        double[] doubleArray77 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl63.load(doubleArray77);
        empiricalDistributionImpl59.load(doubleArray77);
        empiricalDistributionImpl17.load(doubleArray77);
        empiricalDistributionImpl1.load(doubleArray77);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 35 + "'", int2 == 35);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(statisticalSummary7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertNotNull(list12);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 100.0d + "'", double13 == 100.0d);
        org.junit.Assert.assertNotNull(list14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 35 + "'", int15 == 35);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 35 + "'", int20 == 35);
        org.junit.Assert.assertNull(statisticalSummary21);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[-1.0, 0.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double33 + "' != '" + 1.530315372835547d + "'", double33 == 1.530315372835547d);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 35 + "'", int43 == 35);
        org.junit.Assert.assertNull(statisticalSummary44);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 35 + "'", int66 == 35);
        org.junit.Assert.assertNull(statisticalSummary67);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[-1.0, 0.0, 1.0]");
    }

    @Test
    public void test1766() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1766");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        double[] doubleArray15 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl1.load(doubleArray15);
        double[] doubleArray17 = empiricalDistributionImpl1.getUpperBounds();
        double double18 = empiricalDistributionImpl1.getNextValue();
        boolean boolean19 = empiricalDistributionImpl1.isLoaded();
        int int20 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary21 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary22 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl24 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (short) 10);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl26 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int27 = empiricalDistributionImpl26.getBinCount();
        double[] doubleArray29 = new double[] { 100.0d };
        empiricalDistributionImpl26.load(doubleArray29);
        boolean boolean31 = empiricalDistributionImpl26.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary32 = empiricalDistributionImpl26.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary33 = empiricalDistributionImpl26.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary34 = empiricalDistributionImpl26.getSampleStats();
        double[] doubleArray35 = empiricalDistributionImpl26.getUpperBounds();
        empiricalDistributionImpl24.load(doubleArray35);
        empiricalDistributionImpl1.load(doubleArray35);
        java.util.List list38 = empiricalDistributionImpl1.getBinStats();
        boolean boolean39 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl41 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray46 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl41.load(doubleArray46);
        double[] doubleArray48 = empiricalDistributionImpl41.getUpperBounds();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl50 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl52 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int53 = empiricalDistributionImpl52.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary54 = empiricalDistributionImpl52.getSampleStats();
        double[] doubleArray58 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl52.load(doubleArray58);
        empiricalDistributionImpl50.load(doubleArray58);
        int int61 = empiricalDistributionImpl50.getBinCount();
        double[] doubleArray62 = empiricalDistributionImpl50.getUpperBounds();
        empiricalDistributionImpl41.load(doubleArray62);
        empiricalDistributionImpl1.load(doubleArray62);
        java.lang.Class<?> wildcardClass65 = empiricalDistributionImpl1.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double18 + "' != '" + (-0.5811515798898422d) + "'", double18 == (-0.5811515798898422d));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(statisticalSummary21);
        org.junit.Assert.assertNotNull(statisticalSummary22);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 35 + "'", int27 == 35);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(statisticalSummary32);
        org.junit.Assert.assertNotNull(statisticalSummary33);
        org.junit.Assert.assertNotNull(statisticalSummary34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(list38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 35 + "'", int53 == 35);
        org.junit.Assert.assertNull(statisticalSummary54);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 100 + "'", int61 == 100);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertNotNull(wildcardClass65);
    }

    @Test
    public void test1767() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1767");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        double[] doubleArray15 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl1.load(doubleArray15);
        double double17 = empiricalDistributionImpl1.getNextValue();
        boolean boolean18 = empiricalDistributionImpl1.isLoaded();
        boolean boolean19 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl21 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        boolean boolean22 = empiricalDistributionImpl21.isLoaded();
        int int23 = empiricalDistributionImpl21.getBinCount();
        boolean boolean24 = empiricalDistributionImpl21.isLoaded();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl26 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int27 = empiricalDistributionImpl26.getBinCount();
        double[] doubleArray29 = new double[] { 100.0d };
        empiricalDistributionImpl26.load(doubleArray29);
        empiricalDistributionImpl21.load(doubleArray29);
        empiricalDistributionImpl1.load(doubleArray29);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary33 = empiricalDistributionImpl1.getSampleStats();
        boolean boolean34 = empiricalDistributionImpl1.isLoaded();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[-1.0, 0.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double17 + "' != '" + (-1.7251008268112535d) + "'", double17 == (-1.7251008268112535d));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 35 + "'", int23 == 35);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 35 + "'", int27 == 35);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[100.0]");
        org.junit.Assert.assertNotNull(statisticalSummary33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
    }

    @Test
    public void test1768() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1768");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        int int12 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray13 = empiricalDistributionImpl1.getUpperBounds();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary14 = empiricalDistributionImpl1.getSampleStats();
        java.lang.Class<?> wildcardClass15 = empiricalDistributionImpl1.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 100 + "'", int12 == 100);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(statisticalSummary14);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test1769() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1769");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int2 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray4 = new double[] { 100.0d };
        empiricalDistributionImpl1.load(doubleArray4);
        boolean boolean6 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary7 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary8 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl10 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl12 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int13 = empiricalDistributionImpl12.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary14 = empiricalDistributionImpl12.getSampleStats();
        double[] doubleArray18 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl12.load(doubleArray18);
        empiricalDistributionImpl10.load(doubleArray18);
        double[] doubleArray24 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl10.load(doubleArray24);
        empiricalDistributionImpl1.load(doubleArray24);
        double[] doubleArray27 = empiricalDistributionImpl1.getUpperBounds();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl29 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl31 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int32 = empiricalDistributionImpl31.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary33 = empiricalDistributionImpl31.getSampleStats();
        double[] doubleArray37 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl31.load(doubleArray37);
        empiricalDistributionImpl29.load(doubleArray37);
        empiricalDistributionImpl1.load(doubleArray37);
        int int41 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary42 = empiricalDistributionImpl1.getSampleStats();
        double[] doubleArray43 = empiricalDistributionImpl1.getUpperBounds();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary44 = empiricalDistributionImpl1.getSampleStats();
        double double45 = empiricalDistributionImpl1.getNextValue();
        int int46 = empiricalDistributionImpl1.getBinCount();
        boolean boolean47 = empiricalDistributionImpl1.isLoaded();
        boolean boolean48 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary49 = empiricalDistributionImpl1.getSampleStats();
        java.util.List list50 = empiricalDistributionImpl1.getBinStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl52 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray57 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl52.load(doubleArray57);
        double[] doubleArray59 = empiricalDistributionImpl52.getUpperBounds();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl61 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray66 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl61.load(doubleArray66);
        double[] doubleArray68 = empiricalDistributionImpl61.getUpperBounds();
        int int69 = empiricalDistributionImpl61.getBinCount();
        double[] doubleArray70 = empiricalDistributionImpl61.getUpperBounds();
        empiricalDistributionImpl52.load(doubleArray70);
        empiricalDistributionImpl1.load(doubleArray70);
        java.util.List list73 = empiricalDistributionImpl1.getBinStats();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 35 + "'", int2 == 35);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(statisticalSummary7);
        org.junit.Assert.assertNotNull(statisticalSummary8);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
        org.junit.Assert.assertNull(statisticalSummary14);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 1.0]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 35 + "'", int32 == 35);
        org.junit.Assert.assertNull(statisticalSummary33);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 35 + "'", int41 == 35);
        org.junit.Assert.assertNotNull(statisticalSummary42);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 1.0]");
        org.junit.Assert.assertNotNull(statisticalSummary44);
// flaky:         org.junit.Assert.assertTrue("'" + double45 + "' != '" + 1.0d + "'", double45 == 1.0d);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 35 + "'", int46 == 35);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(statisticalSummary49);
        org.junit.Assert.assertNotNull(list50);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 35 + "'", int69 == 35);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(list73);
    }

    @Test
    public void test1770() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1770");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl(10);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        double[] doubleArray6 = new double[] { 100.0d };
        empiricalDistributionImpl3.load(doubleArray6);
        boolean boolean8 = empiricalDistributionImpl3.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary9 = empiricalDistributionImpl3.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary10 = empiricalDistributionImpl3.getSampleStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl12 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl14 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int15 = empiricalDistributionImpl14.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary16 = empiricalDistributionImpl14.getSampleStats();
        double[] doubleArray20 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl14.load(doubleArray20);
        empiricalDistributionImpl12.load(doubleArray20);
        double[] doubleArray26 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl12.load(doubleArray26);
        empiricalDistributionImpl3.load(doubleArray26);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl30 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl32 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int33 = empiricalDistributionImpl32.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary34 = empiricalDistributionImpl32.getSampleStats();
        double[] doubleArray38 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl32.load(doubleArray38);
        empiricalDistributionImpl30.load(doubleArray38);
        empiricalDistributionImpl3.load(doubleArray38);
        empiricalDistributionImpl1.load(doubleArray38);
        double double43 = empiricalDistributionImpl1.getNextValue();
        boolean boolean44 = empiricalDistributionImpl1.isLoaded();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(statisticalSummary9);
        org.junit.Assert.assertNotNull(statisticalSummary10);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 35 + "'", int15 == 35);
        org.junit.Assert.assertNull(statisticalSummary16);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 35 + "'", int33 == 35);
        org.junit.Assert.assertNull(statisticalSummary34);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double43 + "' != '" + 10.0d + "'", double43 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
    }

    @Test
    public void test1771() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1771");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        double double12 = empiricalDistributionImpl1.getNextValue();
        double double13 = empiricalDistributionImpl1.getNextValue();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl15 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int16 = empiricalDistributionImpl15.getBinCount();
        double[] doubleArray18 = new double[] { 100.0d };
        empiricalDistributionImpl15.load(doubleArray18);
        boolean boolean20 = empiricalDistributionImpl15.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary21 = empiricalDistributionImpl15.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary22 = empiricalDistributionImpl15.getSampleStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl24 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl26 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int27 = empiricalDistributionImpl26.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary28 = empiricalDistributionImpl26.getSampleStats();
        double[] doubleArray32 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl26.load(doubleArray32);
        empiricalDistributionImpl24.load(doubleArray32);
        double[] doubleArray38 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl24.load(doubleArray38);
        empiricalDistributionImpl15.load(doubleArray38);
        double[] doubleArray41 = empiricalDistributionImpl15.getUpperBounds();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl43 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl45 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int46 = empiricalDistributionImpl45.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary47 = empiricalDistributionImpl45.getSampleStats();
        double[] doubleArray51 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl45.load(doubleArray51);
        empiricalDistributionImpl43.load(doubleArray51);
        empiricalDistributionImpl15.load(doubleArray51);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl56 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (short) 10);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl58 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int59 = empiricalDistributionImpl58.getBinCount();
        double[] doubleArray61 = new double[] { 100.0d };
        empiricalDistributionImpl58.load(doubleArray61);
        boolean boolean63 = empiricalDistributionImpl58.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary64 = empiricalDistributionImpl58.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary65 = empiricalDistributionImpl58.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary66 = empiricalDistributionImpl58.getSampleStats();
        double[] doubleArray67 = empiricalDistributionImpl58.getUpperBounds();
        empiricalDistributionImpl56.load(doubleArray67);
        empiricalDistributionImpl15.load(doubleArray67);
        empiricalDistributionImpl1.load(doubleArray67);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary71 = empiricalDistributionImpl1.getSampleStats();
        java.util.List list72 = empiricalDistributionImpl1.getBinStats();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double12 + "' != '" + 32.0d + "'", double12 == 32.0d);
// flaky:         org.junit.Assert.assertTrue("'" + double13 + "' != '" + 1.0d + "'", double13 == 1.0d);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 35 + "'", int16 == 35);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(statisticalSummary21);
        org.junit.Assert.assertNotNull(statisticalSummary22);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 35 + "'", int27 == 35);
        org.junit.Assert.assertNull(statisticalSummary28);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 1.0]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 35 + "'", int46 == 35);
        org.junit.Assert.assertNull(statisticalSummary47);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 35 + "'", int59 == 35);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(statisticalSummary64);
        org.junit.Assert.assertNotNull(statisticalSummary65);
        org.junit.Assert.assertNotNull(statisticalSummary66);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(statisticalSummary71);
        org.junit.Assert.assertNotNull(list72);
    }

    @Test
    public void test1772() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1772");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        java.util.List list9 = empiricalDistributionImpl1.getBinStats();
        boolean boolean10 = empiricalDistributionImpl1.isLoaded();
        boolean boolean11 = empiricalDistributionImpl1.isLoaded();
        double[] doubleArray12 = empiricalDistributionImpl1.getUpperBounds();
        java.util.List list13 = empiricalDistributionImpl1.getBinStats();
        double[] doubleArray14 = empiricalDistributionImpl1.getUpperBounds();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl16 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 100);
        int int17 = empiricalDistributionImpl16.getBinCount();
        int int18 = empiricalDistributionImpl16.getBinCount();
        java.util.List list19 = empiricalDistributionImpl16.getBinStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl21 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl23 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int24 = empiricalDistributionImpl23.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary25 = empiricalDistributionImpl23.getSampleStats();
        double[] doubleArray29 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl23.load(doubleArray29);
        empiricalDistributionImpl21.load(doubleArray29);
        double[] doubleArray35 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl21.load(doubleArray35);
        double[] doubleArray37 = empiricalDistributionImpl21.getUpperBounds();
        double double38 = empiricalDistributionImpl21.getNextValue();
        boolean boolean39 = empiricalDistributionImpl21.isLoaded();
        double[] doubleArray40 = empiricalDistributionImpl21.getUpperBounds();
        empiricalDistributionImpl16.load(doubleArray40);
        double double42 = empiricalDistributionImpl16.getNextValue();
        boolean boolean43 = empiricalDistributionImpl16.isLoaded();
        double double44 = empiricalDistributionImpl16.getNextValue();
        double[] doubleArray45 = empiricalDistributionImpl16.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray45);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(list9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(list13);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 100 + "'", int17 == 100);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 100 + "'", int18 == 100);
        org.junit.Assert.assertNotNull(list19);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 35 + "'", int24 == 35);
        org.junit.Assert.assertNull(statisticalSummary25);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double38 + "' != '" + (-1.1420449996013882d) + "'", double38 == (-1.1420449996013882d));
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 1.0d + "'", double42 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 1.0d + "'", double44 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
    }

    @Test
    public void test1773() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1773");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        double[] doubleArray15 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl1.load(doubleArray15);
        double[] doubleArray17 = empiricalDistributionImpl1.getUpperBounds();
        double double18 = empiricalDistributionImpl1.getNextValue();
        double[] doubleArray19 = empiricalDistributionImpl1.getUpperBounds();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary20 = empiricalDistributionImpl1.getSampleStats();
        boolean boolean21 = empiricalDistributionImpl1.isLoaded();
        java.net.URL uRL22 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(uRL22);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double18 + "' != '" + (-1.0481729535700144d) + "'", double18 == (-1.0481729535700144d));
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0]");
        org.junit.Assert.assertNotNull(statisticalSummary20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
    }

    @Test
    public void test1774() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1774");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        double[] doubleArray15 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl1.load(doubleArray15);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary17 = empiricalDistributionImpl1.getSampleStats();
        int int18 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary19 = empiricalDistributionImpl1.getSampleStats();
        java.util.List list20 = empiricalDistributionImpl1.getBinStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl22 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int23 = empiricalDistributionImpl22.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary24 = empiricalDistributionImpl22.getSampleStats();
        double[] doubleArray28 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl22.load(doubleArray28);
        empiricalDistributionImpl1.load(doubleArray28);
        double[] doubleArray31 = empiricalDistributionImpl1.getUpperBounds();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(statisticalSummary17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(statisticalSummary19);
        org.junit.Assert.assertNotNull(list20);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 35 + "'", int23 == 35);
        org.junit.Assert.assertNull(statisticalSummary24);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
    }

    @Test
    public void test1775() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1775");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        double[] doubleArray15 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl1.load(doubleArray15);
        double double17 = empiricalDistributionImpl1.getNextValue();
        int int18 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl20 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        boolean boolean21 = empiricalDistributionImpl20.isLoaded();
        boolean boolean22 = empiricalDistributionImpl20.isLoaded();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl24 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl26 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int27 = empiricalDistributionImpl26.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary28 = empiricalDistributionImpl26.getSampleStats();
        double[] doubleArray32 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl26.load(doubleArray32);
        empiricalDistributionImpl24.load(doubleArray32);
        double[] doubleArray38 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl24.load(doubleArray38);
        empiricalDistributionImpl20.load(doubleArray38);
        empiricalDistributionImpl1.load(doubleArray38);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl43 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        boolean boolean44 = empiricalDistributionImpl43.isLoaded();
        boolean boolean45 = empiricalDistributionImpl43.isLoaded();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl47 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl49 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int50 = empiricalDistributionImpl49.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary51 = empiricalDistributionImpl49.getSampleStats();
        double[] doubleArray55 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl49.load(doubleArray55);
        empiricalDistributionImpl47.load(doubleArray55);
        double[] doubleArray61 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl47.load(doubleArray61);
        empiricalDistributionImpl43.load(doubleArray61);
        empiricalDistributionImpl1.load(doubleArray61);
        java.net.URL uRL65 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(uRL65);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[-1.0, 0.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double17 + "' != '" + (-0.47768485188191423d) + "'", double17 == (-0.47768485188191423d));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 35 + "'", int27 == 35);
        org.junit.Assert.assertNull(statisticalSummary28);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 35 + "'", int50 == 35);
        org.junit.Assert.assertNull(statisticalSummary51);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[-1.0, 0.0, 1.0]");
    }

    @Test
    public void test1776() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1776");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) ' ');
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary2 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary3 = empiricalDistributionImpl1.getSampleStats();
        java.util.List list4 = empiricalDistributionImpl1.getBinStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl6 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray11 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl6.load(doubleArray11);
        double[] doubleArray13 = empiricalDistributionImpl6.getUpperBounds();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary14 = empiricalDistributionImpl6.getSampleStats();
        boolean boolean15 = empiricalDistributionImpl6.isLoaded();
        java.util.List list16 = empiricalDistributionImpl6.getBinStats();
        boolean boolean17 = empiricalDistributionImpl6.isLoaded();
        double[] doubleArray18 = empiricalDistributionImpl6.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray18);
        org.junit.Assert.assertNull(statisticalSummary2);
        org.junit.Assert.assertNull(statisticalSummary3);
        org.junit.Assert.assertNotNull(list4);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(statisticalSummary14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(list16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
    }

    @Test
    public void test1777() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1777");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        int int12 = empiricalDistributionImpl1.getBinCount();
        boolean boolean13 = empiricalDistributionImpl1.isLoaded();
        boolean boolean14 = empiricalDistributionImpl1.isLoaded();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 100 + "'", int12 == 100);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
    }

    @Test
    public void test1778() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1778");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        double double12 = empiricalDistributionImpl1.getNextValue();
        double double13 = empiricalDistributionImpl1.getNextValue();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl15 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int16 = empiricalDistributionImpl15.getBinCount();
        double[] doubleArray18 = new double[] { 100.0d };
        empiricalDistributionImpl15.load(doubleArray18);
        boolean boolean20 = empiricalDistributionImpl15.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary21 = empiricalDistributionImpl15.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary22 = empiricalDistributionImpl15.getSampleStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl24 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl26 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int27 = empiricalDistributionImpl26.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary28 = empiricalDistributionImpl26.getSampleStats();
        double[] doubleArray32 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl26.load(doubleArray32);
        empiricalDistributionImpl24.load(doubleArray32);
        double[] doubleArray38 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl24.load(doubleArray38);
        empiricalDistributionImpl15.load(doubleArray38);
        double[] doubleArray41 = empiricalDistributionImpl15.getUpperBounds();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl43 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl45 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int46 = empiricalDistributionImpl45.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary47 = empiricalDistributionImpl45.getSampleStats();
        double[] doubleArray51 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl45.load(doubleArray51);
        empiricalDistributionImpl43.load(doubleArray51);
        empiricalDistributionImpl15.load(doubleArray51);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl56 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (short) 10);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl58 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int59 = empiricalDistributionImpl58.getBinCount();
        double[] doubleArray61 = new double[] { 100.0d };
        empiricalDistributionImpl58.load(doubleArray61);
        boolean boolean63 = empiricalDistributionImpl58.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary64 = empiricalDistributionImpl58.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary65 = empiricalDistributionImpl58.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary66 = empiricalDistributionImpl58.getSampleStats();
        double[] doubleArray67 = empiricalDistributionImpl58.getUpperBounds();
        empiricalDistributionImpl56.load(doubleArray67);
        empiricalDistributionImpl15.load(doubleArray67);
        empiricalDistributionImpl1.load(doubleArray67);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary71 = empiricalDistributionImpl1.getSampleStats();
        double[] doubleArray72 = empiricalDistributionImpl1.getUpperBounds();
        int int73 = empiricalDistributionImpl1.getBinCount();
        int int74 = empiricalDistributionImpl1.getBinCount();
        java.io.File file75 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(file75);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double12 + "' != '" + 32.0d + "'", double12 == 32.0d);
// flaky:         org.junit.Assert.assertTrue("'" + double13 + "' != '" + 32.0d + "'", double13 == 32.0d);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 35 + "'", int16 == 35);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(statisticalSummary21);
        org.junit.Assert.assertNotNull(statisticalSummary22);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 35 + "'", int27 == 35);
        org.junit.Assert.assertNull(statisticalSummary28);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 1.0]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 35 + "'", int46 == 35);
        org.junit.Assert.assertNull(statisticalSummary47);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 35 + "'", int59 == 35);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(statisticalSummary64);
        org.junit.Assert.assertNotNull(statisticalSummary65);
        org.junit.Assert.assertNotNull(statisticalSummary66);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(statisticalSummary71);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 100 + "'", int73 == 100);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 100 + "'", int74 == 100);
    }

    @Test
    public void test1779() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1779");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        double double12 = empiricalDistributionImpl1.getNextValue();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl14 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl16 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int17 = empiricalDistributionImpl16.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary18 = empiricalDistributionImpl16.getSampleStats();
        double[] doubleArray22 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl16.load(doubleArray22);
        empiricalDistributionImpl14.load(doubleArray22);
        double double25 = empiricalDistributionImpl14.getNextValue();
        double[] doubleArray26 = empiricalDistributionImpl14.getUpperBounds();
        double[] doubleArray27 = empiricalDistributionImpl14.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray27);
        boolean boolean29 = empiricalDistributionImpl1.isLoaded();
        boolean boolean30 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary31 = empiricalDistributionImpl1.getSampleStats();
        int int32 = empiricalDistributionImpl1.getBinCount();
        java.net.URL uRL33 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(uRL33);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double12 + "' != '" + 32.0d + "'", double12 == 32.0d);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 35 + "'", int17 == 35);
        org.junit.Assert.assertNull(statisticalSummary18);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double25 + "' != '" + 10.0d + "'", double25 == 10.0d);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(statisticalSummary31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 100 + "'", int32 == 100);
    }

    @Test
    public void test1780() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1780");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int2 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray4 = new double[] { 100.0d };
        empiricalDistributionImpl1.load(doubleArray4);
        boolean boolean6 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary7 = empiricalDistributionImpl1.getSampleStats();
        boolean boolean8 = empiricalDistributionImpl1.isLoaded();
        int int9 = empiricalDistributionImpl1.getBinCount();
        java.util.List list10 = empiricalDistributionImpl1.getBinStats();
        int int11 = empiricalDistributionImpl1.getBinCount();
        java.util.List list12 = empiricalDistributionImpl1.getBinStats();
        java.net.URL uRL13 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(uRL13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 35 + "'", int2 == 35);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(statisticalSummary7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertNotNull(list10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 35 + "'", int11 == 35);
        org.junit.Assert.assertNotNull(list12);
    }

    @Test
    public void test1781() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1781");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        int int9 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl11 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl13 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray18 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl13.load(doubleArray18);
        double[] doubleArray20 = empiricalDistributionImpl13.getUpperBounds();
        empiricalDistributionImpl11.load(doubleArray20);
        empiricalDistributionImpl1.load(doubleArray20);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary23 = empiricalDistributionImpl1.getSampleStats();
        java.util.List list24 = empiricalDistributionImpl1.getBinStats();
        double double25 = empiricalDistributionImpl1.getNextValue();
        java.util.List list26 = empiricalDistributionImpl1.getBinStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary27 = empiricalDistributionImpl1.getSampleStats();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(statisticalSummary23);
        org.junit.Assert.assertNotNull(list24);
// flaky:         org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.75d + "'", double25 == 0.75d);
        org.junit.Assert.assertNotNull(list26);
        org.junit.Assert.assertNotNull(statisticalSummary27);
    }

    @Test
    public void test1782() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1782");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary9 = empiricalDistributionImpl1.getSampleStats();
        boolean boolean10 = empiricalDistributionImpl1.isLoaded();
        java.util.List list11 = empiricalDistributionImpl1.getBinStats();
        boolean boolean12 = empiricalDistributionImpl1.isLoaded();
        int int13 = empiricalDistributionImpl1.getBinCount();
        java.util.List list14 = empiricalDistributionImpl1.getBinStats();
        boolean boolean15 = empiricalDistributionImpl1.isLoaded();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(statisticalSummary9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(list11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
        org.junit.Assert.assertNotNull(list14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
    }

    @Test
    public void test1783() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1783");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int2 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray4 = new double[] { 100.0d };
        empiricalDistributionImpl1.load(doubleArray4);
        boolean boolean6 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary7 = empiricalDistributionImpl1.getSampleStats();
        boolean boolean8 = empiricalDistributionImpl1.isLoaded();
        boolean boolean9 = empiricalDistributionImpl1.isLoaded();
        double[] doubleArray10 = empiricalDistributionImpl1.getUpperBounds();
        double double11 = empiricalDistributionImpl1.getNextValue();
        java.util.List list12 = empiricalDistributionImpl1.getBinStats();
        java.net.URL uRL13 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(uRL13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 35 + "'", int2 == 35);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(statisticalSummary7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertNotNull(list12);
    }

    @Test
    public void test1784() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1784");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 100);
        int int2 = empiricalDistributionImpl1.getBinCount();
        int int3 = empiricalDistributionImpl1.getBinCount();
        boolean boolean4 = empiricalDistributionImpl1.isLoaded();
        boolean boolean5 = empiricalDistributionImpl1.isLoaded();
        java.util.List list6 = empiricalDistributionImpl1.getBinStats();
        // The following exception was thrown during execution in test generation
        try {
            double double7 = empiricalDistributionImpl1.getNextValue();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: distribution not loaded");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 100 + "'", int2 == 100);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 100 + "'", int3 == 100);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(list6);
    }

    @Test
    public void test1785() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1785");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int2 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray4 = new double[] { 100.0d };
        empiricalDistributionImpl1.load(doubleArray4);
        boolean boolean6 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary7 = empiricalDistributionImpl1.getSampleStats();
        boolean boolean8 = empiricalDistributionImpl1.isLoaded();
        int int9 = empiricalDistributionImpl1.getBinCount();
        java.util.List list10 = empiricalDistributionImpl1.getBinStats();
        int int11 = empiricalDistributionImpl1.getBinCount();
        java.util.List list12 = empiricalDistributionImpl1.getBinStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl14 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 100);
        int int15 = empiricalDistributionImpl14.getBinCount();
        int int16 = empiricalDistributionImpl14.getBinCount();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl18 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray23 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl18.load(doubleArray23);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl26 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl28 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int29 = empiricalDistributionImpl28.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary30 = empiricalDistributionImpl28.getSampleStats();
        double[] doubleArray34 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl28.load(doubleArray34);
        empiricalDistributionImpl26.load(doubleArray34);
        double[] doubleArray40 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl26.load(doubleArray40);
        double[] doubleArray42 = empiricalDistributionImpl26.getUpperBounds();
        double double43 = empiricalDistributionImpl26.getNextValue();
        boolean boolean44 = empiricalDistributionImpl26.isLoaded();
        double[] doubleArray45 = empiricalDistributionImpl26.getUpperBounds();
        double double46 = empiricalDistributionImpl26.getNextValue();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl48 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int49 = empiricalDistributionImpl48.getBinCount();
        double[] doubleArray51 = new double[] { 100.0d };
        empiricalDistributionImpl48.load(doubleArray51);
        boolean boolean53 = empiricalDistributionImpl48.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary54 = empiricalDistributionImpl48.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary55 = empiricalDistributionImpl48.getSampleStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl57 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl59 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int60 = empiricalDistributionImpl59.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary61 = empiricalDistributionImpl59.getSampleStats();
        double[] doubleArray65 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl59.load(doubleArray65);
        empiricalDistributionImpl57.load(doubleArray65);
        double[] doubleArray71 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl57.load(doubleArray71);
        empiricalDistributionImpl48.load(doubleArray71);
        double[] doubleArray74 = empiricalDistributionImpl48.getUpperBounds();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl76 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl78 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int79 = empiricalDistributionImpl78.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary80 = empiricalDistributionImpl78.getSampleStats();
        double[] doubleArray84 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl78.load(doubleArray84);
        empiricalDistributionImpl76.load(doubleArray84);
        double double87 = empiricalDistributionImpl76.getNextValue();
        double[] doubleArray88 = empiricalDistributionImpl76.getUpperBounds();
        empiricalDistributionImpl48.load(doubleArray88);
        boolean boolean90 = empiricalDistributionImpl48.isLoaded();
        double[] doubleArray91 = empiricalDistributionImpl48.getUpperBounds();
        empiricalDistributionImpl26.load(doubleArray91);
        empiricalDistributionImpl18.load(doubleArray91);
        empiricalDistributionImpl14.load(doubleArray91);
        empiricalDistributionImpl1.load(doubleArray91);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary96 = empiricalDistributionImpl1.getSampleStats();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 35 + "'", int2 == 35);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(statisticalSummary7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertNotNull(list10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 35 + "'", int11 == 35);
        org.junit.Assert.assertNotNull(list12);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 100 + "'", int15 == 100);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 100 + "'", int16 == 100);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 35 + "'", int29 == 35);
        org.junit.Assert.assertNull(statisticalSummary30);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double43 + "' != '" + (-1.0762590364359983d) + "'", double43 == (-1.0762590364359983d));
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.7078039541761865d + "'", double46 == 0.7078039541761865d);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 35 + "'", int49 == 35);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(statisticalSummary54);
        org.junit.Assert.assertNotNull(statisticalSummary55);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 35 + "'", int60 == 35);
        org.junit.Assert.assertNull(statisticalSummary61);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 1.0]");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 35 + "'", int79 == 35);
        org.junit.Assert.assertNull(statisticalSummary80);
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double87 + "' != '" + 32.0d + "'", double87 == 32.0d);
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray91), "[0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 1.0]");
        org.junit.Assert.assertNotNull(statisticalSummary96);
    }

    @Test
    public void test1786() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1786");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int2 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray4 = new double[] { 100.0d };
        empiricalDistributionImpl1.load(doubleArray4);
        boolean boolean6 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary7 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary8 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl10 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl12 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int13 = empiricalDistributionImpl12.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary14 = empiricalDistributionImpl12.getSampleStats();
        double[] doubleArray18 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl12.load(doubleArray18);
        empiricalDistributionImpl10.load(doubleArray18);
        double[] doubleArray24 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl10.load(doubleArray24);
        empiricalDistributionImpl1.load(doubleArray24);
        double[] doubleArray27 = empiricalDistributionImpl1.getUpperBounds();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl29 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl31 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int32 = empiricalDistributionImpl31.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary33 = empiricalDistributionImpl31.getSampleStats();
        double[] doubleArray37 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl31.load(doubleArray37);
        empiricalDistributionImpl29.load(doubleArray37);
        empiricalDistributionImpl1.load(doubleArray37);
        int int41 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary42 = empiricalDistributionImpl1.getSampleStats();
        double[] doubleArray43 = empiricalDistributionImpl1.getUpperBounds();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary44 = empiricalDistributionImpl1.getSampleStats();
        double double45 = empiricalDistributionImpl1.getNextValue();
        int int46 = empiricalDistributionImpl1.getBinCount();
        java.util.List list47 = empiricalDistributionImpl1.getBinStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl49 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray54 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl49.load(doubleArray54);
        double[] doubleArray56 = empiricalDistributionImpl49.getUpperBounds();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl58 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl60 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int61 = empiricalDistributionImpl60.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary62 = empiricalDistributionImpl60.getSampleStats();
        double[] doubleArray66 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl60.load(doubleArray66);
        empiricalDistributionImpl58.load(doubleArray66);
        empiricalDistributionImpl49.load(doubleArray66);
        empiricalDistributionImpl1.load(doubleArray66);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 35 + "'", int2 == 35);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(statisticalSummary7);
        org.junit.Assert.assertNotNull(statisticalSummary8);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
        org.junit.Assert.assertNull(statisticalSummary14);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 1.0]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 35 + "'", int32 == 35);
        org.junit.Assert.assertNull(statisticalSummary33);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 35 + "'", int41 == 35);
        org.junit.Assert.assertNotNull(statisticalSummary42);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 1.0]");
        org.junit.Assert.assertNotNull(statisticalSummary44);
// flaky:         org.junit.Assert.assertTrue("'" + double45 + "' != '" + 1.0d + "'", double45 == 1.0d);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 35 + "'", int46 == 35);
        org.junit.Assert.assertNotNull(list47);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 35 + "'", int61 == 35);
        org.junit.Assert.assertNull(statisticalSummary62);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[10.0, 32.0, 1.0]");
    }

    @Test
    public void test1787() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1787");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        double double12 = empiricalDistributionImpl1.getNextValue();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl14 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl16 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int17 = empiricalDistributionImpl16.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary18 = empiricalDistributionImpl16.getSampleStats();
        double[] doubleArray22 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl16.load(doubleArray22);
        empiricalDistributionImpl14.load(doubleArray22);
        double double25 = empiricalDistributionImpl14.getNextValue();
        double[] doubleArray26 = empiricalDistributionImpl14.getUpperBounds();
        double[] doubleArray27 = empiricalDistributionImpl14.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray27);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl30 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl32 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int33 = empiricalDistributionImpl32.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary34 = empiricalDistributionImpl32.getSampleStats();
        double[] doubleArray38 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl32.load(doubleArray38);
        empiricalDistributionImpl30.load(doubleArray38);
        double[] doubleArray44 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl30.load(doubleArray44);
        double[] doubleArray46 = empiricalDistributionImpl30.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray46);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl49 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray54 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl49.load(doubleArray54);
        double[] doubleArray56 = empiricalDistributionImpl49.getUpperBounds();
        java.util.List list57 = empiricalDistributionImpl49.getBinStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl59 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl61 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int62 = empiricalDistributionImpl61.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary63 = empiricalDistributionImpl61.getSampleStats();
        double[] doubleArray67 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl61.load(doubleArray67);
        empiricalDistributionImpl59.load(doubleArray67);
        double double70 = empiricalDistributionImpl59.getNextValue();
        double[] doubleArray71 = empiricalDistributionImpl59.getUpperBounds();
        double[] doubleArray72 = empiricalDistributionImpl59.getUpperBounds();
        empiricalDistributionImpl49.load(doubleArray72);
        empiricalDistributionImpl1.load(doubleArray72);
        int int75 = empiricalDistributionImpl1.getBinCount();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 35 + "'", int17 == 35);
        org.junit.Assert.assertNull(statisticalSummary18);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double25 + "' != '" + 10.0d + "'", double25 == 10.0d);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 35 + "'", int33 == 35);
        org.junit.Assert.assertNull(statisticalSummary34);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(list57);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 35 + "'", int62 == 35);
        org.junit.Assert.assertNull(statisticalSummary63);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double70 + "' != '" + 1.0d + "'", double70 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 100 + "'", int75 == 100);
    }

    @Test
    public void test1788() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1788");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        double[] doubleArray15 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl1.load(doubleArray15);
        double double17 = empiricalDistributionImpl1.getNextValue();
        boolean boolean18 = empiricalDistributionImpl1.isLoaded();
        boolean boolean19 = empiricalDistributionImpl1.isLoaded();
        double[] doubleArray20 = empiricalDistributionImpl1.getUpperBounds();
        java.util.List list21 = empiricalDistributionImpl1.getBinStats();
        java.util.List list22 = empiricalDistributionImpl1.getBinStats();
        double double23 = empiricalDistributionImpl1.getNextValue();
        java.util.List list24 = empiricalDistributionImpl1.getBinStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl26 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int27 = empiricalDistributionImpl26.getBinCount();
        double[] doubleArray29 = new double[] { 100.0d };
        empiricalDistributionImpl26.load(doubleArray29);
        boolean boolean31 = empiricalDistributionImpl26.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary32 = empiricalDistributionImpl26.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary33 = empiricalDistributionImpl26.getSampleStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl35 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl37 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int38 = empiricalDistributionImpl37.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary39 = empiricalDistributionImpl37.getSampleStats();
        double[] doubleArray43 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl37.load(doubleArray43);
        empiricalDistributionImpl35.load(doubleArray43);
        double[] doubleArray49 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl35.load(doubleArray49);
        empiricalDistributionImpl26.load(doubleArray49);
        double[] doubleArray52 = empiricalDistributionImpl26.getUpperBounds();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl54 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl56 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int57 = empiricalDistributionImpl56.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary58 = empiricalDistributionImpl56.getSampleStats();
        double[] doubleArray62 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl56.load(doubleArray62);
        empiricalDistributionImpl54.load(doubleArray62);
        double double65 = empiricalDistributionImpl54.getNextValue();
        double[] doubleArray66 = empiricalDistributionImpl54.getUpperBounds();
        empiricalDistributionImpl26.load(doubleArray66);
        boolean boolean68 = empiricalDistributionImpl26.isLoaded();
        double[] doubleArray69 = empiricalDistributionImpl26.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray69);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary71 = empiricalDistributionImpl1.getSampleStats();
        java.lang.Class<?> wildcardClass72 = empiricalDistributionImpl1.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[-1.0, 0.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double17 + "' != '" + (-0.6999694536541368d) + "'", double17 == (-0.6999694536541368d));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0]");
        org.junit.Assert.assertNotNull(list21);
        org.junit.Assert.assertNotNull(list22);
// flaky:         org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.07468073664390099d + "'", double23 == 0.07468073664390099d);
        org.junit.Assert.assertNotNull(list24);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 35 + "'", int27 == 35);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(statisticalSummary32);
        org.junit.Assert.assertNotNull(statisticalSummary33);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 35 + "'", int38 == 35);
        org.junit.Assert.assertNull(statisticalSummary39);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 1.0]");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 35 + "'", int57 == 35);
        org.junit.Assert.assertNull(statisticalSummary58);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double65 + "' != '" + 10.0d + "'", double65 == 10.0d);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 1.0]");
        org.junit.Assert.assertNotNull(statisticalSummary71);
        org.junit.Assert.assertNotNull(wildcardClass72);
    }

    @Test
    public void test1789() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1789");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        double[] doubleArray15 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl1.load(doubleArray15);
        double double17 = empiricalDistributionImpl1.getNextValue();
        boolean boolean18 = empiricalDistributionImpl1.isLoaded();
        int int19 = empiricalDistributionImpl1.getBinCount();
        int int20 = empiricalDistributionImpl1.getBinCount();
        double double21 = empiricalDistributionImpl1.getNextValue();
        double double22 = empiricalDistributionImpl1.getNextValue();
        java.util.List list23 = empiricalDistributionImpl1.getBinStats();
        double double24 = empiricalDistributionImpl1.getNextValue();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[-1.0, 0.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.2672420181779882d + "'", double17 == 0.2672420181779882d);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
// flaky:         org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.030679082574231242d + "'", double21 == 0.030679082574231242d);
// flaky:         org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.5091197893569227d + "'", double22 == 0.5091197893569227d);
        org.junit.Assert.assertNotNull(list23);
// flaky:         org.junit.Assert.assertTrue("'" + double24 + "' != '" + (-0.7019989931575003d) + "'", double24 == (-0.7019989931575003d));
    }

    @Test
    public void test1790() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1790");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl5 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray10 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl5.load(doubleArray10);
        double[] doubleArray12 = empiricalDistributionImpl5.getUpperBounds();
        empiricalDistributionImpl3.load(doubleArray12);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl15 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int16 = empiricalDistributionImpl15.getBinCount();
        double[] doubleArray18 = new double[] { 100.0d };
        empiricalDistributionImpl15.load(doubleArray18);
        empiricalDistributionImpl3.load(doubleArray18);
        empiricalDistributionImpl1.load(doubleArray18);
        java.util.List list22 = empiricalDistributionImpl1.getBinStats();
        java.util.List list23 = empiricalDistributionImpl1.getBinStats();
        int int24 = empiricalDistributionImpl1.getBinCount();
        boolean boolean25 = empiricalDistributionImpl1.isLoaded();
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 35 + "'", int16 == 35);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[100.0]");
        org.junit.Assert.assertNotNull(list22);
        org.junit.Assert.assertNotNull(list23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 100 + "'", int24 == 100);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
    }

    @Test
    public void test1791() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1791");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        double[] doubleArray15 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl1.load(doubleArray15);
        double[] doubleArray17 = empiricalDistributionImpl1.getUpperBounds();
        double double18 = empiricalDistributionImpl1.getNextValue();
        double[] doubleArray19 = empiricalDistributionImpl1.getUpperBounds();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary20 = empiricalDistributionImpl1.getSampleStats();
        boolean boolean21 = empiricalDistributionImpl1.isLoaded();
        boolean boolean22 = empiricalDistributionImpl1.isLoaded();
        java.net.URL uRL23 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(uRL23);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double18 + "' != '" + (-0.4463823051128729d) + "'", double18 == (-0.4463823051128729d));
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0]");
        org.junit.Assert.assertNotNull(statisticalSummary20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
    }

    @Test
    public void test1792() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1792");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        double[] doubleArray15 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl1.load(doubleArray15);
        double double17 = empiricalDistributionImpl1.getNextValue();
        boolean boolean18 = empiricalDistributionImpl1.isLoaded();
        double double19 = empiricalDistributionImpl1.getNextValue();
        int int20 = empiricalDistributionImpl1.getBinCount();
        int int21 = empiricalDistributionImpl1.getBinCount();
        int int22 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray23 = empiricalDistributionImpl1.getUpperBounds();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary24 = empiricalDistributionImpl1.getSampleStats();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[-1.0, 0.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double17 + "' != '" + (-1.1044177638216646d) + "'", double17 == (-1.1044177638216646d));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
// flaky:         org.junit.Assert.assertTrue("'" + double19 + "' != '" + 1.5650355374842144d + "'", double19 == 1.5650355374842144d);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0]");
        org.junit.Assert.assertNotNull(statisticalSummary24);
    }

    @Test
    public void test1793() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1793");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 100);
        int int2 = empiricalDistributionImpl1.getBinCount();
        int int3 = empiricalDistributionImpl1.getBinCount();
        java.util.List list4 = empiricalDistributionImpl1.getBinStats();
        java.io.File file5 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(file5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 100 + "'", int2 == 100);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 100 + "'", int3 == 100);
        org.junit.Assert.assertNotNull(list4);
    }

    @Test
    public void test1794() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1794");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int2 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray4 = new double[] { 100.0d };
        empiricalDistributionImpl1.load(doubleArray4);
        boolean boolean6 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary7 = empiricalDistributionImpl1.getSampleStats();
        boolean boolean8 = empiricalDistributionImpl1.isLoaded();
        boolean boolean9 = empiricalDistributionImpl1.isLoaded();
        double[] doubleArray10 = empiricalDistributionImpl1.getUpperBounds();
        java.util.List list11 = empiricalDistributionImpl1.getBinStats();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 35 + "'", int2 == 35);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(statisticalSummary7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(list11);
    }

    @Test
    public void test1795() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1795");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        double[] doubleArray15 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl1.load(doubleArray15);
        double double17 = empiricalDistributionImpl1.getNextValue();
        int int18 = empiricalDistributionImpl1.getBinCount();
        boolean boolean19 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary20 = empiricalDistributionImpl1.getSampleStats();
        double[] doubleArray21 = empiricalDistributionImpl1.getUpperBounds();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[-1.0, 0.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.11604795236392206d + "'", double17 == 0.11604795236392206d);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(statisticalSummary20);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0]");
    }

    @Test
    public void test1796() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1796");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int2 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray4 = new double[] { 100.0d };
        empiricalDistributionImpl1.load(doubleArray4);
        boolean boolean6 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary7 = empiricalDistributionImpl1.getSampleStats();
        boolean boolean8 = empiricalDistributionImpl1.isLoaded();
        int int9 = empiricalDistributionImpl1.getBinCount();
        java.util.List list10 = empiricalDistributionImpl1.getBinStats();
        java.util.List list11 = empiricalDistributionImpl1.getBinStats();
        int int12 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl14 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl16 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int17 = empiricalDistributionImpl16.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary18 = empiricalDistributionImpl16.getSampleStats();
        double[] doubleArray22 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl16.load(doubleArray22);
        empiricalDistributionImpl14.load(doubleArray22);
        int int25 = empiricalDistributionImpl14.getBinCount();
        java.util.List list26 = empiricalDistributionImpl14.getBinStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary27 = empiricalDistributionImpl14.getSampleStats();
        boolean boolean28 = empiricalDistributionImpl14.isLoaded();
        int int29 = empiricalDistributionImpl14.getBinCount();
        boolean boolean30 = empiricalDistributionImpl14.isLoaded();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl32 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray37 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl32.load(doubleArray37);
        double[] doubleArray39 = empiricalDistributionImpl32.getUpperBounds();
        int int40 = empiricalDistributionImpl32.getBinCount();
        double[] doubleArray41 = empiricalDistributionImpl32.getUpperBounds();
        int int42 = empiricalDistributionImpl32.getBinCount();
        java.util.List list43 = empiricalDistributionImpl32.getBinStats();
        int int44 = empiricalDistributionImpl32.getBinCount();
        double double45 = empiricalDistributionImpl32.getNextValue();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl47 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int48 = empiricalDistributionImpl47.getBinCount();
        double[] doubleArray50 = new double[] { 100.0d };
        empiricalDistributionImpl47.load(doubleArray50);
        boolean boolean52 = empiricalDistributionImpl47.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary53 = empiricalDistributionImpl47.getSampleStats();
        boolean boolean54 = empiricalDistributionImpl47.isLoaded();
        boolean boolean55 = empiricalDistributionImpl47.isLoaded();
        double[] doubleArray56 = empiricalDistributionImpl47.getUpperBounds();
        empiricalDistributionImpl32.load(doubleArray56);
        empiricalDistributionImpl14.load(doubleArray56);
        empiricalDistributionImpl1.load(doubleArray56);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary60 = empiricalDistributionImpl1.getSampleStats();
        java.util.List list61 = empiricalDistributionImpl1.getBinStats();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 35 + "'", int2 == 35);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(statisticalSummary7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertNotNull(list10);
        org.junit.Assert.assertNotNull(list11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 35 + "'", int12 == 35);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 35 + "'", int17 == 35);
        org.junit.Assert.assertNull(statisticalSummary18);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 100 + "'", int25 == 100);
        org.junit.Assert.assertNotNull(list26);
        org.junit.Assert.assertNotNull(statisticalSummary27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 100 + "'", int29 == 100);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 35 + "'", int40 == 35);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 35 + "'", int42 == 35);
        org.junit.Assert.assertNotNull(list43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 35 + "'", int44 == 35);
// flaky:         org.junit.Assert.assertTrue("'" + double45 + "' != '" + 1.0d + "'", double45 == 1.0d);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 35 + "'", int48 == 35);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(statisticalSummary53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(statisticalSummary60);
        org.junit.Assert.assertNotNull(list61);
    }

    @Test
    public void test1797() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1797");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        int int12 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray13 = empiricalDistributionImpl1.getUpperBounds();
        double[] doubleArray14 = empiricalDistributionImpl1.getUpperBounds();
        java.util.List list15 = empiricalDistributionImpl1.getBinStats();
        boolean boolean16 = empiricalDistributionImpl1.isLoaded();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 100 + "'", int12 == 100);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(list15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
    }

    @Test
    public void test1798() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1798");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        java.util.List list9 = empiricalDistributionImpl1.getBinStats();
        boolean boolean10 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary11 = empiricalDistributionImpl1.getSampleStats();
        int int12 = empiricalDistributionImpl1.getBinCount();
        int int13 = empiricalDistributionImpl1.getBinCount();
        java.util.List list14 = empiricalDistributionImpl1.getBinStats();
        java.io.File file15 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(file15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(list9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(statisticalSummary11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 35 + "'", int12 == 35);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
        org.junit.Assert.assertNotNull(list14);
    }

    @Test
    public void test1799() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1799");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int2 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray4 = new double[] { 100.0d };
        empiricalDistributionImpl1.load(doubleArray4);
        boolean boolean6 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary7 = empiricalDistributionImpl1.getSampleStats();
        boolean boolean8 = empiricalDistributionImpl1.isLoaded();
        boolean boolean9 = empiricalDistributionImpl1.isLoaded();
        double double10 = empiricalDistributionImpl1.getNextValue();
        boolean boolean11 = empiricalDistributionImpl1.isLoaded();
        double[] doubleArray12 = empiricalDistributionImpl1.getUpperBounds();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary13 = empiricalDistributionImpl1.getSampleStats();
        boolean boolean14 = empiricalDistributionImpl1.isLoaded();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 35 + "'", int2 == 35);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(statisticalSummary7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 100.0d + "'", double10 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(statisticalSummary13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
    }

    @Test
    public void test1800() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1800");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray8 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl3.load(doubleArray8);
        double[] doubleArray10 = empiricalDistributionImpl3.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray10);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl13 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int14 = empiricalDistributionImpl13.getBinCount();
        double[] doubleArray16 = new double[] { 100.0d };
        empiricalDistributionImpl13.load(doubleArray16);
        empiricalDistributionImpl1.load(doubleArray16);
        java.util.List list19 = empiricalDistributionImpl1.getBinStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary20 = empiricalDistributionImpl1.getSampleStats();
        double double21 = empiricalDistributionImpl1.getNextValue();
        java.util.List list22 = empiricalDistributionImpl1.getBinStats();
        int int23 = empiricalDistributionImpl1.getBinCount();
        java.util.List list24 = empiricalDistributionImpl1.getBinStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl26 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray31 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl26.load(doubleArray31);
        double[] doubleArray33 = empiricalDistributionImpl26.getUpperBounds();
        java.util.List list34 = empiricalDistributionImpl26.getBinStats();
        boolean boolean35 = empiricalDistributionImpl26.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary36 = empiricalDistributionImpl26.getSampleStats();
        int int37 = empiricalDistributionImpl26.getBinCount();
        boolean boolean38 = empiricalDistributionImpl26.isLoaded();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl40 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        boolean boolean41 = empiricalDistributionImpl40.isLoaded();
        boolean boolean42 = empiricalDistributionImpl40.isLoaded();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl44 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl46 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int47 = empiricalDistributionImpl46.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary48 = empiricalDistributionImpl46.getSampleStats();
        double[] doubleArray52 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl46.load(doubleArray52);
        empiricalDistributionImpl44.load(doubleArray52);
        double[] doubleArray58 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl44.load(doubleArray58);
        empiricalDistributionImpl40.load(doubleArray58);
        double[] doubleArray61 = empiricalDistributionImpl40.getUpperBounds();
        empiricalDistributionImpl26.load(doubleArray61);
        int int63 = empiricalDistributionImpl26.getBinCount();
        double[] doubleArray64 = empiricalDistributionImpl26.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray64);
        double double66 = empiricalDistributionImpl1.getNextValue();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl68 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        boolean boolean69 = empiricalDistributionImpl68.isLoaded();
        boolean boolean70 = empiricalDistributionImpl68.isLoaded();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl72 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl74 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int75 = empiricalDistributionImpl74.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary76 = empiricalDistributionImpl74.getSampleStats();
        double[] doubleArray80 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl74.load(doubleArray80);
        empiricalDistributionImpl72.load(doubleArray80);
        double[] doubleArray86 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl72.load(doubleArray86);
        empiricalDistributionImpl68.load(doubleArray86);
        empiricalDistributionImpl1.load(doubleArray86);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 35 + "'", int14 == 35);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[100.0]");
        org.junit.Assert.assertNotNull(list19);
        org.junit.Assert.assertNotNull(statisticalSummary20);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 100.0d + "'", double21 == 100.0d);
        org.junit.Assert.assertNotNull(list22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 35 + "'", int23 == 35);
        org.junit.Assert.assertNotNull(list24);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(list34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(statisticalSummary36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 35 + "'", int37 == 35);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 35 + "'", int47 == 35);
        org.junit.Assert.assertNull(statisticalSummary48);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 1.0]");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 35 + "'", int63 == 35);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[0.4857142857142857, 0.4857142857142857, 0.4857142857142857, 0.4857142857142857, 0.4857142857142857, 0.4857142857142857, 0.4857142857142857, 0.4857142857142857, 0.4857142857142857, 0.4857142857142857, 0.4857142857142857, 0.4857142857142857, 0.4857142857142857, 0.4857142857142857, 0.4857142857142857, 0.4857142857142857, 0.4857142857142857, 0.9714285714285714, 0.9714285714285714, 0.9714285714285714, 0.9714285714285714, 0.9714285714285714, 0.9714285714285714, 0.9714285714285714, 0.9714285714285714, 0.9714285714285714, 0.9714285714285714, 0.9714285714285714, 0.9714285714285714, 0.9714285714285714, 0.9714285714285714, 0.9714285714285714, 0.9714285714285714, 0.9714285714285714, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double66 + "' != '" + 0.4857142857142857d + "'", double66 == 0.4857142857142857d);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 35 + "'", int75 == 35);
        org.junit.Assert.assertNull(statisticalSummary76);
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[-1.0, 0.0, 1.0]");
    }

    @Test
    public void test1801() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1801");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (short) 100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        double[] doubleArray6 = new double[] { 100.0d };
        empiricalDistributionImpl3.load(doubleArray6);
        boolean boolean8 = empiricalDistributionImpl3.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary9 = empiricalDistributionImpl3.getSampleStats();
        boolean boolean10 = empiricalDistributionImpl3.isLoaded();
        boolean boolean11 = empiricalDistributionImpl3.isLoaded();
        java.util.List list12 = empiricalDistributionImpl3.getBinStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl14 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray19 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl14.load(doubleArray19);
        double[] doubleArray21 = empiricalDistributionImpl14.getUpperBounds();
        int int22 = empiricalDistributionImpl14.getBinCount();
        double[] doubleArray23 = empiricalDistributionImpl14.getUpperBounds();
        empiricalDistributionImpl3.load(doubleArray23);
        empiricalDistributionImpl1.load(doubleArray23);
        boolean boolean26 = empiricalDistributionImpl1.isLoaded();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(statisticalSummary9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(list12);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 35 + "'", int22 == 35);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
    }

    @Test
    public void test1802() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1802");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        double[] doubleArray15 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl1.load(doubleArray15);
        double[] doubleArray17 = empiricalDistributionImpl1.getUpperBounds();
        double double18 = empiricalDistributionImpl1.getNextValue();
        boolean boolean19 = empiricalDistributionImpl1.isLoaded();
        int int20 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary21 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary22 = empiricalDistributionImpl1.getSampleStats();
        double double23 = empiricalDistributionImpl1.getNextValue();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl25 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl27 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int28 = empiricalDistributionImpl27.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary29 = empiricalDistributionImpl27.getSampleStats();
        double[] doubleArray33 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl27.load(doubleArray33);
        empiricalDistributionImpl25.load(doubleArray33);
        double[] doubleArray39 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl25.load(doubleArray39);
        double[] doubleArray41 = empiricalDistributionImpl25.getUpperBounds();
        double double42 = empiricalDistributionImpl25.getNextValue();
        boolean boolean43 = empiricalDistributionImpl25.isLoaded();
        double[] doubleArray44 = empiricalDistributionImpl25.getUpperBounds();
        int int45 = empiricalDistributionImpl25.getBinCount();
        double[] doubleArray46 = empiricalDistributionImpl25.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray46);
        java.net.URL uRL48 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(uRL48);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double18 + "' != '" + (-1.3104389887890253d) + "'", double18 == (-1.3104389887890253d));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(statisticalSummary21);
        org.junit.Assert.assertNotNull(statisticalSummary22);
// flaky:         org.junit.Assert.assertTrue("'" + double23 + "' != '" + 1.26377209496786d + "'", double23 == 1.26377209496786d);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 35 + "'", int28 == 35);
        org.junit.Assert.assertNull(statisticalSummary29);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double42 + "' != '" + (-1.3104389887890253d) + "'", double42 == (-1.3104389887890253d));
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0]");
    }

    @Test
    public void test1803() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1803");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        double[] doubleArray15 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl1.load(doubleArray15);
        double[] doubleArray17 = empiricalDistributionImpl1.getUpperBounds();
        double double18 = empiricalDistributionImpl1.getNextValue();
        boolean boolean19 = empiricalDistributionImpl1.isLoaded();
        int int20 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary21 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary22 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl24 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (short) 10);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl26 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int27 = empiricalDistributionImpl26.getBinCount();
        double[] doubleArray29 = new double[] { 100.0d };
        empiricalDistributionImpl26.load(doubleArray29);
        boolean boolean31 = empiricalDistributionImpl26.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary32 = empiricalDistributionImpl26.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary33 = empiricalDistributionImpl26.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary34 = empiricalDistributionImpl26.getSampleStats();
        double[] doubleArray35 = empiricalDistributionImpl26.getUpperBounds();
        empiricalDistributionImpl24.load(doubleArray35);
        empiricalDistributionImpl1.load(doubleArray35);
        java.util.List list38 = empiricalDistributionImpl1.getBinStats();
        boolean boolean39 = empiricalDistributionImpl1.isLoaded();
        java.net.URL uRL40 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(uRL40);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double18 + "' != '" + (-1.6268966018304998d) + "'", double18 == (-1.6268966018304998d));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(statisticalSummary21);
        org.junit.Assert.assertNotNull(statisticalSummary22);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 35 + "'", int27 == 35);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(statisticalSummary32);
        org.junit.Assert.assertNotNull(statisticalSummary33);
        org.junit.Assert.assertNotNull(statisticalSummary34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(list38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
    }

    @Test
    public void test1804() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1804");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 100);
        int int2 = empiricalDistributionImpl1.getBinCount();
        int int3 = empiricalDistributionImpl1.getBinCount();
        int int4 = empiricalDistributionImpl1.getBinCount();
        // The following exception was thrown during execution in test generation
        try {
            double double5 = empiricalDistributionImpl1.getNextValue();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: distribution not loaded");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 100 + "'", int2 == 100);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 100 + "'", int3 == 100);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 100 + "'", int4 == 100);
    }

    @Test
    public void test1805() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1805");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 100);
        int int2 = empiricalDistributionImpl1.getBinCount();
        int int3 = empiricalDistributionImpl1.getBinCount();
        java.util.List list4 = empiricalDistributionImpl1.getBinStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl6 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl8 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int9 = empiricalDistributionImpl8.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary10 = empiricalDistributionImpl8.getSampleStats();
        double[] doubleArray14 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl8.load(doubleArray14);
        empiricalDistributionImpl6.load(doubleArray14);
        double[] doubleArray20 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl6.load(doubleArray20);
        double[] doubleArray22 = empiricalDistributionImpl6.getUpperBounds();
        double double23 = empiricalDistributionImpl6.getNextValue();
        boolean boolean24 = empiricalDistributionImpl6.isLoaded();
        double[] doubleArray25 = empiricalDistributionImpl6.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray25);
        double double27 = empiricalDistributionImpl1.getNextValue();
        boolean boolean28 = empiricalDistributionImpl1.isLoaded();
        boolean boolean29 = empiricalDistributionImpl1.isLoaded();
        java.net.URL uRL30 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(uRL30);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 100 + "'", int2 == 100);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 100 + "'", int3 == 100);
        org.junit.Assert.assertNotNull(list4);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertNull(statisticalSummary10);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double23 + "' != '" + (-0.15398650692444193d) + "'", double23 == (-0.15398650692444193d));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0]");
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 1.0d + "'", double27 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
    }

    @Test
    public void test1806() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1806");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        double[] doubleArray15 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl1.load(doubleArray15);
        double double17 = empiricalDistributionImpl1.getNextValue();
        boolean boolean18 = empiricalDistributionImpl1.isLoaded();
        boolean boolean19 = empiricalDistributionImpl1.isLoaded();
        double[] doubleArray20 = empiricalDistributionImpl1.getUpperBounds();
        java.util.List list21 = empiricalDistributionImpl1.getBinStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl23 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl25 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int26 = empiricalDistributionImpl25.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary27 = empiricalDistributionImpl25.getSampleStats();
        double[] doubleArray31 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl25.load(doubleArray31);
        empiricalDistributionImpl23.load(doubleArray31);
        boolean boolean34 = empiricalDistributionImpl23.isLoaded();
        boolean boolean35 = empiricalDistributionImpl23.isLoaded();
        double[] doubleArray36 = empiricalDistributionImpl23.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray36);
        java.lang.Class<?> wildcardClass38 = empiricalDistributionImpl1.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[-1.0, 0.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double17 + "' != '" + (-1.0371487212455435d) + "'", double17 == (-1.0371487212455435d));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0]");
        org.junit.Assert.assertNotNull(list21);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 35 + "'", int26 == 35);
        org.junit.Assert.assertNull(statisticalSummary27);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(wildcardClass38);
    }

    @Test
    public void test1807() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1807");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        double[] doubleArray15 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl1.load(doubleArray15);
        double double17 = empiricalDistributionImpl1.getNextValue();
        boolean boolean18 = empiricalDistributionImpl1.isLoaded();
        boolean boolean19 = empiricalDistributionImpl1.isLoaded();
        double[] doubleArray20 = empiricalDistributionImpl1.getUpperBounds();
        java.util.List list21 = empiricalDistributionImpl1.getBinStats();
        java.util.List list22 = empiricalDistributionImpl1.getBinStats();
        double double23 = empiricalDistributionImpl1.getNextValue();
        java.util.List list24 = empiricalDistributionImpl1.getBinStats();
        java.io.File file25 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(file25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[-1.0, 0.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double17 + "' != '" + (-0.09580335940298111d) + "'", double17 == (-0.09580335940298111d));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0]");
        org.junit.Assert.assertNotNull(list21);
        org.junit.Assert.assertNotNull(list22);
// flaky:         org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.21246832264376994d + "'", double23 == 0.21246832264376994d);
        org.junit.Assert.assertNotNull(list24);
    }

    @Test
    public void test1808() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1808");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        java.util.List list9 = empiricalDistributionImpl1.getBinStats();
        boolean boolean10 = empiricalDistributionImpl1.isLoaded();
        boolean boolean11 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary12 = empiricalDistributionImpl1.getSampleStats();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(list9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(statisticalSummary12);
    }

    @Test
    public void test1809() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1809");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        int int9 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl11 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl13 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray18 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl13.load(doubleArray18);
        double[] doubleArray20 = empiricalDistributionImpl13.getUpperBounds();
        empiricalDistributionImpl11.load(doubleArray20);
        empiricalDistributionImpl1.load(doubleArray20);
        boolean boolean23 = empiricalDistributionImpl1.isLoaded();
        double double24 = empiricalDistributionImpl1.getNextValue();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
// flaky:         org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.75d + "'", double24 == 0.75d);
    }

    @Test
    public void test1810() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1810");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        boolean boolean9 = empiricalDistributionImpl1.isLoaded();
        double[] doubleArray10 = empiricalDistributionImpl1.getUpperBounds();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
    }

    @Test
    public void test1811() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1811");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int2 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray4 = new double[] { 100.0d };
        empiricalDistributionImpl1.load(doubleArray4);
        boolean boolean6 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary7 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary8 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary9 = empiricalDistributionImpl1.getSampleStats();
        boolean boolean10 = empiricalDistributionImpl1.isLoaded();
        int int11 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary12 = empiricalDistributionImpl1.getSampleStats();
        java.util.List list13 = empiricalDistributionImpl1.getBinStats();
        java.net.URL uRL14 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(uRL14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 35 + "'", int2 == 35);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(statisticalSummary7);
        org.junit.Assert.assertNotNull(statisticalSummary8);
        org.junit.Assert.assertNotNull(statisticalSummary9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 35 + "'", int11 == 35);
        org.junit.Assert.assertNotNull(statisticalSummary12);
        org.junit.Assert.assertNotNull(list13);
    }

    @Test
    public void test1812() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1812");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl10 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl12 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int13 = empiricalDistributionImpl12.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary14 = empiricalDistributionImpl12.getSampleStats();
        double[] doubleArray18 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl12.load(doubleArray18);
        empiricalDistributionImpl10.load(doubleArray18);
        empiricalDistributionImpl1.load(doubleArray18);
        double double22 = empiricalDistributionImpl1.getNextValue();
        java.util.List list23 = empiricalDistributionImpl1.getBinStats();
        int int24 = empiricalDistributionImpl1.getBinCount();
        java.util.List list25 = empiricalDistributionImpl1.getBinStats();
        boolean boolean26 = empiricalDistributionImpl1.isLoaded();
        java.util.List list27 = empiricalDistributionImpl1.getBinStats();
        boolean boolean28 = empiricalDistributionImpl1.isLoaded();
        double double29 = empiricalDistributionImpl1.getNextValue();
        java.util.List list30 = empiricalDistributionImpl1.getBinStats();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
        org.junit.Assert.assertNull(statisticalSummary14);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double22 + "' != '" + 10.0d + "'", double22 == 10.0d);
        org.junit.Assert.assertNotNull(list23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 35 + "'", int24 == 35);
        org.junit.Assert.assertNotNull(list25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(list27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
// flaky:         org.junit.Assert.assertTrue("'" + double29 + "' != '" + 1.0d + "'", double29 == 1.0d);
        org.junit.Assert.assertNotNull(list30);
    }

    @Test
    public void test1813() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1813");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int2 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray4 = new double[] { 100.0d };
        empiricalDistributionImpl1.load(doubleArray4);
        boolean boolean6 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary7 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary8 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl10 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl12 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int13 = empiricalDistributionImpl12.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary14 = empiricalDistributionImpl12.getSampleStats();
        double[] doubleArray18 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl12.load(doubleArray18);
        empiricalDistributionImpl10.load(doubleArray18);
        double[] doubleArray24 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl10.load(doubleArray24);
        empiricalDistributionImpl1.load(doubleArray24);
        double[] doubleArray27 = empiricalDistributionImpl1.getUpperBounds();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl29 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl31 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int32 = empiricalDistributionImpl31.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary33 = empiricalDistributionImpl31.getSampleStats();
        double[] doubleArray37 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl31.load(doubleArray37);
        empiricalDistributionImpl29.load(doubleArray37);
        empiricalDistributionImpl1.load(doubleArray37);
        int int41 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary42 = empiricalDistributionImpl1.getSampleStats();
        double[] doubleArray43 = empiricalDistributionImpl1.getUpperBounds();
        double double44 = empiricalDistributionImpl1.getNextValue();
        boolean boolean45 = empiricalDistributionImpl1.isLoaded();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 35 + "'", int2 == 35);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(statisticalSummary7);
        org.junit.Assert.assertNotNull(statisticalSummary8);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
        org.junit.Assert.assertNull(statisticalSummary14);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 1.0]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 35 + "'", int32 == 35);
        org.junit.Assert.assertNull(statisticalSummary33);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 35 + "'", int41 == 35);
        org.junit.Assert.assertNotNull(statisticalSummary42);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double44 + "' != '" + 10.0d + "'", double44 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
    }

    @Test
    public void test1814() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1814");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int2 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray4 = new double[] { 100.0d };
        empiricalDistributionImpl1.load(doubleArray4);
        boolean boolean6 = empiricalDistributionImpl1.isLoaded();
        double[] doubleArray7 = empiricalDistributionImpl1.getUpperBounds();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary8 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl10 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (short) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl12 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray17 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl12.load(doubleArray17);
        double[] doubleArray19 = empiricalDistributionImpl12.getUpperBounds();
        int int20 = empiricalDistributionImpl12.getBinCount();
        double[] doubleArray21 = empiricalDistributionImpl12.getUpperBounds();
        empiricalDistributionImpl10.load(doubleArray21);
        double[] doubleArray23 = empiricalDistributionImpl10.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray23);
        int int25 = empiricalDistributionImpl1.getBinCount();
        java.lang.Class<?> wildcardClass26 = empiricalDistributionImpl1.getClass();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 35 + "'", int2 == 35);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(statisticalSummary8);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 35 + "'", int20 == 35);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 35 + "'", int25 == 35);
        org.junit.Assert.assertNotNull(wildcardClass26);
    }

    @Test
    public void test1815() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1815");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int2 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray4 = new double[] { 100.0d };
        empiricalDistributionImpl1.load(doubleArray4);
        boolean boolean6 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary7 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary8 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary9 = empiricalDistributionImpl1.getSampleStats();
        double[] doubleArray10 = empiricalDistributionImpl1.getUpperBounds();
        int int11 = empiricalDistributionImpl1.getBinCount();
        java.io.File file12 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(file12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 35 + "'", int2 == 35);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(statisticalSummary7);
        org.junit.Assert.assertNotNull(statisticalSummary8);
        org.junit.Assert.assertNotNull(statisticalSummary9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 35 + "'", int11 == 35);
    }

    @Test
    public void test1816() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1816");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        int int9 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl11 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl13 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray18 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl13.load(doubleArray18);
        double[] doubleArray20 = empiricalDistributionImpl13.getUpperBounds();
        empiricalDistributionImpl11.load(doubleArray20);
        empiricalDistributionImpl1.load(doubleArray20);
        java.util.List list23 = empiricalDistributionImpl1.getBinStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl25 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int26 = empiricalDistributionImpl25.getBinCount();
        double[] doubleArray28 = new double[] { 100.0d };
        empiricalDistributionImpl25.load(doubleArray28);
        boolean boolean30 = empiricalDistributionImpl25.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary31 = empiricalDistributionImpl25.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary32 = empiricalDistributionImpl25.getSampleStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl34 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl36 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int37 = empiricalDistributionImpl36.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary38 = empiricalDistributionImpl36.getSampleStats();
        double[] doubleArray42 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl36.load(doubleArray42);
        empiricalDistributionImpl34.load(doubleArray42);
        double[] doubleArray48 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl34.load(doubleArray48);
        empiricalDistributionImpl25.load(doubleArray48);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl52 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl54 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int55 = empiricalDistributionImpl54.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary56 = empiricalDistributionImpl54.getSampleStats();
        double[] doubleArray60 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl54.load(doubleArray60);
        empiricalDistributionImpl52.load(doubleArray60);
        empiricalDistributionImpl25.load(doubleArray60);
        empiricalDistributionImpl1.load(doubleArray60);
        double[] doubleArray69 = new double[] { 1.1354582769782435d, (short) 0, (-0.1362032819111886d), 10L };
        empiricalDistributionImpl1.load(doubleArray69);
        double double71 = empiricalDistributionImpl1.getNextValue();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl73 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray78 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl73.load(doubleArray78);
        double[] doubleArray80 = empiricalDistributionImpl73.getUpperBounds();
        int int81 = empiricalDistributionImpl73.getBinCount();
        double[] doubleArray82 = empiricalDistributionImpl73.getUpperBounds();
        int int83 = empiricalDistributionImpl73.getBinCount();
        java.util.List list84 = empiricalDistributionImpl73.getBinStats();
        boolean boolean85 = empiricalDistributionImpl73.isLoaded();
        double[] doubleArray86 = empiricalDistributionImpl73.getUpperBounds();
        boolean boolean87 = empiricalDistributionImpl73.isLoaded();
        double[] doubleArray88 = empiricalDistributionImpl73.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray88);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary90 = empiricalDistributionImpl1.getSampleStats();
        double double91 = empiricalDistributionImpl1.getNextValue();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(list23);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 35 + "'", int26 == 35);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(statisticalSummary31);
        org.junit.Assert.assertNotNull(statisticalSummary32);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 35 + "'", int37 == 35);
        org.junit.Assert.assertNull(statisticalSummary38);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 35 + "'", int55 == 35);
        org.junit.Assert.assertNull(statisticalSummary56);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[1.1354582769782435, 0.0, -0.1362032819111886, 10.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double71 + "' != '" + 1.1354582769782435d + "'", double71 == 1.1354582769782435d);
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 35 + "'", int81 == 35);
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 35 + "'", int83 == 35);
        org.junit.Assert.assertNotNull(list84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(statisticalSummary90);
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 0.75d + "'", double91 == 0.75d);
    }

    @Test
    public void test1817() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1817");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) ' ');
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        double[] doubleArray6 = new double[] { 100.0d };
        empiricalDistributionImpl3.load(doubleArray6);
        boolean boolean8 = empiricalDistributionImpl3.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary9 = empiricalDistributionImpl3.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary10 = empiricalDistributionImpl3.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary11 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray12 = empiricalDistributionImpl3.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray12);
        java.util.List list14 = empiricalDistributionImpl1.getBinStats();
        double[] doubleArray15 = empiricalDistributionImpl1.getUpperBounds();
        java.net.URL uRL16 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(uRL16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(statisticalSummary9);
        org.junit.Assert.assertNotNull(statisticalSummary10);
        org.junit.Assert.assertNotNull(statisticalSummary11);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(list14);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
    }

    @Test
    public void test1818() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1818");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        double[] doubleArray15 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl1.load(doubleArray15);
        double double17 = empiricalDistributionImpl1.getNextValue();
        boolean boolean18 = empiricalDistributionImpl1.isLoaded();
        boolean boolean19 = empiricalDistributionImpl1.isLoaded();
        double[] doubleArray20 = empiricalDistributionImpl1.getUpperBounds();
        java.util.List list21 = empiricalDistributionImpl1.getBinStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl23 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl25 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int26 = empiricalDistributionImpl25.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary27 = empiricalDistributionImpl25.getSampleStats();
        double[] doubleArray31 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl25.load(doubleArray31);
        empiricalDistributionImpl23.load(doubleArray31);
        boolean boolean34 = empiricalDistributionImpl23.isLoaded();
        boolean boolean35 = empiricalDistributionImpl23.isLoaded();
        double[] doubleArray36 = empiricalDistributionImpl23.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray36);
        java.util.List list38 = empiricalDistributionImpl1.getBinStats();
        boolean boolean39 = empiricalDistributionImpl1.isLoaded();
        java.net.URL uRL40 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(uRL40);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[-1.0, 0.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double17 + "' != '" + (-1.1601390716283564d) + "'", double17 == (-1.1601390716283564d));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0]");
        org.junit.Assert.assertNotNull(list21);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 35 + "'", int26 == 35);
        org.junit.Assert.assertNull(statisticalSummary27);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(list38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
    }

    @Test
    public void test1819() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1819");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        java.util.List list9 = empiricalDistributionImpl1.getBinStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl11 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl13 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int14 = empiricalDistributionImpl13.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary15 = empiricalDistributionImpl13.getSampleStats();
        double[] doubleArray19 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl13.load(doubleArray19);
        empiricalDistributionImpl11.load(doubleArray19);
        double double22 = empiricalDistributionImpl11.getNextValue();
        double[] doubleArray23 = empiricalDistributionImpl11.getUpperBounds();
        double[] doubleArray24 = empiricalDistributionImpl11.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray24);
        double double26 = empiricalDistributionImpl1.getNextValue();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(list9);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 35 + "'", int14 == 35);
        org.junit.Assert.assertNull(statisticalSummary15);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1.0d + "'", double22 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertNotNull(doubleArray24);
// flaky:         org.junit.Assert.assertTrue("'" + double26 + "' != '" + 0.6666666666666666d + "'", double26 == 0.6666666666666666d);
    }

    @Test
    public void test1820() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1820");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int2 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray4 = new double[] { 100.0d };
        empiricalDistributionImpl1.load(doubleArray4);
        boolean boolean6 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary7 = empiricalDistributionImpl1.getSampleStats();
        boolean boolean8 = empiricalDistributionImpl1.isLoaded();
        boolean boolean9 = empiricalDistributionImpl1.isLoaded();
        double double10 = empiricalDistributionImpl1.getNextValue();
        java.util.List list11 = empiricalDistributionImpl1.getBinStats();
        java.util.List list12 = empiricalDistributionImpl1.getBinStats();
        int int13 = empiricalDistributionImpl1.getBinCount();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 35 + "'", int2 == 35);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(statisticalSummary7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 100.0d + "'", double10 == 100.0d);
        org.junit.Assert.assertNotNull(list11);
        org.junit.Assert.assertNotNull(list12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
    }

    @Test
    public void test1821() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1821");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int2 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray4 = new double[] { 100.0d };
        empiricalDistributionImpl1.load(doubleArray4);
        boolean boolean6 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary7 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary8 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl10 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl12 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int13 = empiricalDistributionImpl12.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary14 = empiricalDistributionImpl12.getSampleStats();
        double[] doubleArray18 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl12.load(doubleArray18);
        empiricalDistributionImpl10.load(doubleArray18);
        double[] doubleArray24 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl10.load(doubleArray24);
        empiricalDistributionImpl1.load(doubleArray24);
        double[] doubleArray27 = empiricalDistributionImpl1.getUpperBounds();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl29 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl31 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int32 = empiricalDistributionImpl31.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary33 = empiricalDistributionImpl31.getSampleStats();
        double[] doubleArray37 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl31.load(doubleArray37);
        empiricalDistributionImpl29.load(doubleArray37);
        double double40 = empiricalDistributionImpl29.getNextValue();
        double[] doubleArray41 = empiricalDistributionImpl29.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray41);
        double[] doubleArray43 = empiricalDistributionImpl1.getUpperBounds();
        double[] doubleArray44 = empiricalDistributionImpl1.getUpperBounds();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary45 = empiricalDistributionImpl1.getSampleStats();
        java.io.File file46 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(file46);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 35 + "'", int2 == 35);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(statisticalSummary7);
        org.junit.Assert.assertNotNull(statisticalSummary8);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
        org.junit.Assert.assertNull(statisticalSummary14);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 1.0]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 35 + "'", int32 == 35);
        org.junit.Assert.assertNull(statisticalSummary33);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double40 + "' != '" + 1.0d + "'", double40 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 1.0]");
        org.junit.Assert.assertNotNull(statisticalSummary45);
    }

    @Test
    public void test1822() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1822");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        double[] doubleArray15 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl1.load(doubleArray15);
        double double17 = empiricalDistributionImpl1.getNextValue();
        boolean boolean18 = empiricalDistributionImpl1.isLoaded();
        boolean boolean19 = empiricalDistributionImpl1.isLoaded();
        double double20 = empiricalDistributionImpl1.getNextValue();
        java.util.List list21 = empiricalDistributionImpl1.getBinStats();
        double double22 = empiricalDistributionImpl1.getNextValue();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[-1.0, 0.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double17 + "' != '" + (-0.07157612198568608d) + "'", double17 == (-0.07157612198568608d));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
// flaky:         org.junit.Assert.assertTrue("'" + double20 + "' != '" + (-1.709272177002149d) + "'", double20 == (-1.709272177002149d));
        org.junit.Assert.assertNotNull(list21);
// flaky:         org.junit.Assert.assertTrue("'" + double22 + "' != '" + (-1.5477448454382674d) + "'", double22 == (-1.5477448454382674d));
    }

    @Test
    public void test1823() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1823");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray8 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl3.load(doubleArray8);
        double[] doubleArray10 = empiricalDistributionImpl3.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray10);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl13 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int14 = empiricalDistributionImpl13.getBinCount();
        double[] doubleArray16 = new double[] { 100.0d };
        empiricalDistributionImpl13.load(doubleArray16);
        empiricalDistributionImpl1.load(doubleArray16);
        double[] doubleArray19 = empiricalDistributionImpl1.getUpperBounds();
        java.util.List list20 = empiricalDistributionImpl1.getBinStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl22 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl24 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray29 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl24.load(doubleArray29);
        double[] doubleArray31 = empiricalDistributionImpl24.getUpperBounds();
        empiricalDistributionImpl22.load(doubleArray31);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl34 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int35 = empiricalDistributionImpl34.getBinCount();
        double[] doubleArray37 = new double[] { 100.0d };
        empiricalDistributionImpl34.load(doubleArray37);
        empiricalDistributionImpl22.load(doubleArray37);
        double[] doubleArray40 = empiricalDistributionImpl22.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray40);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl43 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray48 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl43.load(doubleArray48);
        double[] doubleArray50 = empiricalDistributionImpl43.getUpperBounds();
        int int51 = empiricalDistributionImpl43.getBinCount();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl53 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl55 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray60 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl55.load(doubleArray60);
        double[] doubleArray62 = empiricalDistributionImpl55.getUpperBounds();
        empiricalDistributionImpl53.load(doubleArray62);
        empiricalDistributionImpl43.load(doubleArray62);
        java.util.List list65 = empiricalDistributionImpl43.getBinStats();
        double[] doubleArray66 = empiricalDistributionImpl43.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray66);
        int int68 = empiricalDistributionImpl1.getBinCount();
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 35 + "'", int14 == 35);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[100.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(list20);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 35 + "'", int35 == 35);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[100.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 35 + "'", int51 == 35);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(list65);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.9714285714285715, 0.9714285714285715, 0.9714285714285715, 0.9714285714285715, 0.9714285714285715, 0.9714285714285715, 0.9714285714285715, 0.9714285714285715, 0.9714285714285715, 0.9714285714285715, 0.9714285714285715, 1.0]");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 35 + "'", int68 == 35);
    }

    @Test
    public void test1824() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1824");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        double double12 = empiricalDistributionImpl1.getNextValue();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl14 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl16 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int17 = empiricalDistributionImpl16.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary18 = empiricalDistributionImpl16.getSampleStats();
        double[] doubleArray22 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl16.load(doubleArray22);
        empiricalDistributionImpl14.load(doubleArray22);
        double double25 = empiricalDistributionImpl14.getNextValue();
        double[] doubleArray26 = empiricalDistributionImpl14.getUpperBounds();
        double[] doubleArray27 = empiricalDistributionImpl14.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray27);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl30 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl32 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int33 = empiricalDistributionImpl32.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary34 = empiricalDistributionImpl32.getSampleStats();
        double[] doubleArray38 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl32.load(doubleArray38);
        empiricalDistributionImpl30.load(doubleArray38);
        double[] doubleArray44 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl30.load(doubleArray44);
        double[] doubleArray46 = empiricalDistributionImpl30.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray46);
        java.lang.Class<?> wildcardClass48 = doubleArray46.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double12 + "' != '" + 32.0d + "'", double12 == 32.0d);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 35 + "'", int17 == 35);
        org.junit.Assert.assertNull(statisticalSummary18);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double25 + "' != '" + 32.0d + "'", double25 == 32.0d);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 35 + "'", int33 == 35);
        org.junit.Assert.assertNull(statisticalSummary34);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0]");
        org.junit.Assert.assertNotNull(wildcardClass48);
    }

    @Test
    public void test1825() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1825");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        int int9 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl11 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl13 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray18 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl13.load(doubleArray18);
        double[] doubleArray20 = empiricalDistributionImpl13.getUpperBounds();
        empiricalDistributionImpl11.load(doubleArray20);
        empiricalDistributionImpl1.load(doubleArray20);
        java.util.List list23 = empiricalDistributionImpl1.getBinStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl25 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int26 = empiricalDistributionImpl25.getBinCount();
        double[] doubleArray28 = new double[] { 100.0d };
        empiricalDistributionImpl25.load(doubleArray28);
        boolean boolean30 = empiricalDistributionImpl25.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary31 = empiricalDistributionImpl25.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary32 = empiricalDistributionImpl25.getSampleStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl34 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl36 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int37 = empiricalDistributionImpl36.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary38 = empiricalDistributionImpl36.getSampleStats();
        double[] doubleArray42 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl36.load(doubleArray42);
        empiricalDistributionImpl34.load(doubleArray42);
        double[] doubleArray48 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl34.load(doubleArray48);
        empiricalDistributionImpl25.load(doubleArray48);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl52 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl54 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int55 = empiricalDistributionImpl54.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary56 = empiricalDistributionImpl54.getSampleStats();
        double[] doubleArray60 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl54.load(doubleArray60);
        empiricalDistributionImpl52.load(doubleArray60);
        empiricalDistributionImpl25.load(doubleArray60);
        empiricalDistributionImpl1.load(doubleArray60);
        double[] doubleArray69 = new double[] { 1.1354582769782435d, (short) 0, (-0.1362032819111886d), 10L };
        empiricalDistributionImpl1.load(doubleArray69);
        int int71 = empiricalDistributionImpl1.getBinCount();
        java.util.List list72 = empiricalDistributionImpl1.getBinStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl74 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray79 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl74.load(doubleArray79);
        double[] doubleArray81 = empiricalDistributionImpl74.getUpperBounds();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl83 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray88 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl83.load(doubleArray88);
        double[] doubleArray90 = empiricalDistributionImpl83.getUpperBounds();
        int int91 = empiricalDistributionImpl83.getBinCount();
        double[] doubleArray92 = empiricalDistributionImpl83.getUpperBounds();
        empiricalDistributionImpl74.load(doubleArray92);
        empiricalDistributionImpl1.load(doubleArray92);
        int int95 = empiricalDistributionImpl1.getBinCount();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(list23);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 35 + "'", int26 == 35);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(statisticalSummary31);
        org.junit.Assert.assertNotNull(statisticalSummary32);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 35 + "'", int37 == 35);
        org.junit.Assert.assertNull(statisticalSummary38);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 35 + "'", int55 == 35);
        org.junit.Assert.assertNull(statisticalSummary56);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[1.1354582769782435, 0.0, -0.1362032819111886, 10.0]");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 35 + "'", int71 == 35);
        org.junit.Assert.assertNotNull(list72);
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray90), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 35 + "'", int91 == 35);
        org.junit.Assert.assertNotNull(doubleArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray92), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 35 + "'", int95 == 35);
    }

    @Test
    public void test1826() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1826");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        int int9 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray10 = empiricalDistributionImpl1.getUpperBounds();
        double double11 = empiricalDistributionImpl1.getNextValue();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl13 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray18 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl13.load(doubleArray18);
        double[] doubleArray20 = empiricalDistributionImpl13.getUpperBounds();
        int int21 = empiricalDistributionImpl13.getBinCount();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl23 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl25 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray30 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl25.load(doubleArray30);
        double[] doubleArray32 = empiricalDistributionImpl25.getUpperBounds();
        empiricalDistributionImpl23.load(doubleArray32);
        empiricalDistributionImpl13.load(doubleArray32);
        java.util.List list35 = empiricalDistributionImpl13.getBinStats();
        double[] doubleArray36 = empiricalDistributionImpl13.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray36);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl39 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl41 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int42 = empiricalDistributionImpl41.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary43 = empiricalDistributionImpl41.getSampleStats();
        double[] doubleArray47 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl41.load(doubleArray47);
        empiricalDistributionImpl39.load(doubleArray47);
        double[] doubleArray53 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl39.load(doubleArray53);
        double double55 = empiricalDistributionImpl39.getNextValue();
        boolean boolean56 = empiricalDistributionImpl39.isLoaded();
        boolean boolean57 = empiricalDistributionImpl39.isLoaded();
        double[] doubleArray58 = empiricalDistributionImpl39.getUpperBounds();
        java.util.List list59 = empiricalDistributionImpl39.getBinStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl61 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl63 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int64 = empiricalDistributionImpl63.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary65 = empiricalDistributionImpl63.getSampleStats();
        double[] doubleArray69 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl63.load(doubleArray69);
        empiricalDistributionImpl61.load(doubleArray69);
        boolean boolean72 = empiricalDistributionImpl61.isLoaded();
        boolean boolean73 = empiricalDistributionImpl61.isLoaded();
        double[] doubleArray74 = empiricalDistributionImpl61.getUpperBounds();
        empiricalDistributionImpl39.load(doubleArray74);
        empiricalDistributionImpl1.load(doubleArray74);
        java.lang.Class<?> wildcardClass77 = doubleArray74.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double11 + "' != '" + 1.0d + "'", double11 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 35 + "'", int21 == 35);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(list35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.9714285714285715, 0.9714285714285715, 0.9714285714285715, 0.9714285714285715, 0.9714285714285715, 0.9714285714285715, 0.9714285714285715, 0.9714285714285715, 0.9714285714285715, 0.9714285714285715, 0.9714285714285715, 1.0]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 35 + "'", int42 == 35);
        org.junit.Assert.assertNull(statisticalSummary43);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[-1.0, 0.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.08641165246265549d + "'", double55 == 0.08641165246265549d);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0]");
        org.junit.Assert.assertNotNull(list59);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 35 + "'", int64 == 35);
        org.junit.Assert.assertNull(statisticalSummary65);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[1.0]");
        org.junit.Assert.assertNotNull(wildcardClass77);
    }

    @Test
    public void test1827() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1827");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        double[] doubleArray15 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl1.load(doubleArray15);
        double double17 = empiricalDistributionImpl1.getNextValue();
        boolean boolean18 = empiricalDistributionImpl1.isLoaded();
        boolean boolean19 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl21 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        boolean boolean22 = empiricalDistributionImpl21.isLoaded();
        int int23 = empiricalDistributionImpl21.getBinCount();
        boolean boolean24 = empiricalDistributionImpl21.isLoaded();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl26 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int27 = empiricalDistributionImpl26.getBinCount();
        double[] doubleArray29 = new double[] { 100.0d };
        empiricalDistributionImpl26.load(doubleArray29);
        empiricalDistributionImpl21.load(doubleArray29);
        empiricalDistributionImpl1.load(doubleArray29);
        java.util.List list33 = empiricalDistributionImpl1.getBinStats();
        int int34 = empiricalDistributionImpl1.getBinCount();
        double double35 = empiricalDistributionImpl1.getNextValue();
        java.lang.Class<?> wildcardClass36 = empiricalDistributionImpl1.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[-1.0, 0.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.28171081779781204d + "'", double17 == 0.28171081779781204d);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 35 + "'", int23 == 35);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 35 + "'", int27 == 35);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[100.0]");
        org.junit.Assert.assertNotNull(list33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 100.0d + "'", double35 == 100.0d);
        org.junit.Assert.assertNotNull(wildcardClass36);
    }

    @Test
    public void test1828() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1828");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        double[] doubleArray15 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl1.load(doubleArray15);
        double double17 = empiricalDistributionImpl1.getNextValue();
        boolean boolean18 = empiricalDistributionImpl1.isLoaded();
        int int19 = empiricalDistributionImpl1.getBinCount();
        int int20 = empiricalDistributionImpl1.getBinCount();
        double double21 = empiricalDistributionImpl1.getNextValue();
        java.util.List list22 = empiricalDistributionImpl1.getBinStats();
        int int23 = empiricalDistributionImpl1.getBinCount();
        double double24 = empiricalDistributionImpl1.getNextValue();
        java.util.List list25 = empiricalDistributionImpl1.getBinStats();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[-1.0, 0.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.3371563532657247d + "'", double17 == 0.3371563532657247d);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
// flaky:         org.junit.Assert.assertTrue("'" + double21 + "' != '" + (-2.350185569133441d) + "'", double21 == (-2.350185569133441d));
        org.junit.Assert.assertNotNull(list22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
// flaky:         org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.31917790825693304d + "'", double24 == 0.31917790825693304d);
        org.junit.Assert.assertNotNull(list25);
    }

    @Test
    public void test1829() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1829");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray8 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl3.load(doubleArray8);
        double[] doubleArray10 = empiricalDistributionImpl3.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray10);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl13 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int14 = empiricalDistributionImpl13.getBinCount();
        double[] doubleArray16 = new double[] { 100.0d };
        empiricalDistributionImpl13.load(doubleArray16);
        empiricalDistributionImpl1.load(doubleArray16);
        java.util.List list19 = empiricalDistributionImpl1.getBinStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary20 = empiricalDistributionImpl1.getSampleStats();
        double double21 = empiricalDistributionImpl1.getNextValue();
        java.util.List list22 = empiricalDistributionImpl1.getBinStats();
        int int23 = empiricalDistributionImpl1.getBinCount();
        java.io.File file24 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(file24);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 35 + "'", int14 == 35);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[100.0]");
        org.junit.Assert.assertNotNull(list19);
        org.junit.Assert.assertNotNull(statisticalSummary20);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 100.0d + "'", double21 == 100.0d);
        org.junit.Assert.assertNotNull(list22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 35 + "'", int23 == 35);
    }

    @Test
    public void test1830() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1830");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        double double12 = empiricalDistributionImpl1.getNextValue();
        java.util.List list13 = empiricalDistributionImpl1.getBinStats();
        double double14 = empiricalDistributionImpl1.getNextValue();
        java.util.List list15 = empiricalDistributionImpl1.getBinStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl17 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int18 = empiricalDistributionImpl17.getBinCount();
        double[] doubleArray20 = new double[] { 100.0d };
        empiricalDistributionImpl17.load(doubleArray20);
        boolean boolean22 = empiricalDistributionImpl17.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary23 = empiricalDistributionImpl17.getSampleStats();
        boolean boolean24 = empiricalDistributionImpl17.isLoaded();
        boolean boolean25 = empiricalDistributionImpl17.isLoaded();
        boolean boolean26 = empiricalDistributionImpl17.isLoaded();
        int int27 = empiricalDistributionImpl17.getBinCount();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl29 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl31 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int32 = empiricalDistributionImpl31.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary33 = empiricalDistributionImpl31.getSampleStats();
        double[] doubleArray37 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl31.load(doubleArray37);
        empiricalDistributionImpl29.load(doubleArray37);
        double double40 = empiricalDistributionImpl29.getNextValue();
        java.util.List list41 = empiricalDistributionImpl29.getBinStats();
        double double42 = empiricalDistributionImpl29.getNextValue();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl44 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int45 = empiricalDistributionImpl44.getBinCount();
        double[] doubleArray47 = new double[] { 100.0d };
        empiricalDistributionImpl44.load(doubleArray47);
        boolean boolean49 = empiricalDistributionImpl44.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary50 = empiricalDistributionImpl44.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary51 = empiricalDistributionImpl44.getSampleStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl53 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl55 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int56 = empiricalDistributionImpl55.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary57 = empiricalDistributionImpl55.getSampleStats();
        double[] doubleArray61 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl55.load(doubleArray61);
        empiricalDistributionImpl53.load(doubleArray61);
        double[] doubleArray67 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl53.load(doubleArray67);
        empiricalDistributionImpl44.load(doubleArray67);
        double[] doubleArray70 = empiricalDistributionImpl44.getUpperBounds();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl72 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl74 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int75 = empiricalDistributionImpl74.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary76 = empiricalDistributionImpl74.getSampleStats();
        double[] doubleArray80 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl74.load(doubleArray80);
        empiricalDistributionImpl72.load(doubleArray80);
        empiricalDistributionImpl44.load(doubleArray80);
        int int84 = empiricalDistributionImpl44.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary85 = empiricalDistributionImpl44.getSampleStats();
        double[] doubleArray86 = empiricalDistributionImpl44.getUpperBounds();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary87 = empiricalDistributionImpl44.getSampleStats();
        double double88 = empiricalDistributionImpl44.getNextValue();
        double[] doubleArray89 = empiricalDistributionImpl44.getUpperBounds();
        empiricalDistributionImpl29.load(doubleArray89);
        empiricalDistributionImpl17.load(doubleArray89);
        empiricalDistributionImpl1.load(doubleArray89);
        double[] doubleArray93 = empiricalDistributionImpl1.getUpperBounds();
        boolean boolean94 = empiricalDistributionImpl1.isLoaded();
        double double95 = empiricalDistributionImpl1.getNextValue();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double12 + "' != '" + 1.0d + "'", double12 == 1.0d);
        org.junit.Assert.assertNotNull(list13);
// flaky:         org.junit.Assert.assertTrue("'" + double14 + "' != '" + 10.0d + "'", double14 == 10.0d);
        org.junit.Assert.assertNotNull(list15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 35 + "'", int18 == 35);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(statisticalSummary23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 35 + "'", int27 == 35);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 35 + "'", int32 == 35);
        org.junit.Assert.assertNull(statisticalSummary33);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double40 + "' != '" + 1.0d + "'", double40 == 1.0d);
        org.junit.Assert.assertNotNull(list41);
// flaky:         org.junit.Assert.assertTrue("'" + double42 + "' != '" + 1.0d + "'", double42 == 1.0d);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 35 + "'", int45 == 35);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(statisticalSummary50);
        org.junit.Assert.assertNotNull(statisticalSummary51);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 35 + "'", int56 == 35);
        org.junit.Assert.assertNull(statisticalSummary57);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 1.0]");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 35 + "'", int75 == 35);
        org.junit.Assert.assertNull(statisticalSummary76);
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 35 + "'", int84 == 35);
        org.junit.Assert.assertNotNull(statisticalSummary85);
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 1.0]");
        org.junit.Assert.assertNotNull(statisticalSummary87);
// flaky:         org.junit.Assert.assertTrue("'" + double88 + "' != '" + 10.0d + "'", double88 == 10.0d);
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray89), "[0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray93);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + true + "'", boolean94 == true);
// flaky:         org.junit.Assert.assertTrue("'" + double95 + "' != '" + 0.6666666666666666d + "'", double95 == 0.6666666666666666d);
    }

    @Test
    public void test1831() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1831");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        double[] doubleArray15 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl1.load(doubleArray15);
        double double17 = empiricalDistributionImpl1.getNextValue();
        boolean boolean18 = empiricalDistributionImpl1.isLoaded();
        boolean boolean19 = empiricalDistributionImpl1.isLoaded();
        double[] doubleArray20 = empiricalDistributionImpl1.getUpperBounds();
        int int21 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary22 = empiricalDistributionImpl1.getSampleStats();
        double double23 = empiricalDistributionImpl1.getNextValue();
        int int24 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary25 = empiricalDistributionImpl1.getSampleStats();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[-1.0, 0.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double17 + "' != '" + (-0.46578548094503375d) + "'", double17 == (-0.46578548094503375d));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(statisticalSummary22);
// flaky:         org.junit.Assert.assertTrue("'" + double23 + "' != '" + 2.0215200225181715d + "'", double23 == 2.0215200225181715d);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(statisticalSummary25);
    }

    @Test
    public void test1832() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1832");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) -1);
        java.util.List list2 = empiricalDistributionImpl1.getBinStats();
        java.lang.Class<?> wildcardClass3 = list2.getClass();
        org.junit.Assert.assertNotNull(list2);
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test1833() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1833");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        int int12 = empiricalDistributionImpl1.getBinCount();
        int int13 = empiricalDistributionImpl1.getBinCount();
        double double14 = empiricalDistributionImpl1.getNextValue();
        boolean boolean15 = empiricalDistributionImpl1.isLoaded();
        int int16 = empiricalDistributionImpl1.getBinCount();
        boolean boolean17 = empiricalDistributionImpl1.isLoaded();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 100 + "'", int12 == 100);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 100 + "'", int13 == 100);
// flaky:         org.junit.Assert.assertTrue("'" + double14 + "' != '" + 32.0d + "'", double14 == 32.0d);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 100 + "'", int16 == 100);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
    }

    @Test
    public void test1834() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1834");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        int int12 = empiricalDistributionImpl1.getBinCount();
        java.util.List list13 = empiricalDistributionImpl1.getBinStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary14 = empiricalDistributionImpl1.getSampleStats();
        boolean boolean15 = empiricalDistributionImpl1.isLoaded();
        int int16 = empiricalDistributionImpl1.getBinCount();
        boolean boolean17 = empiricalDistributionImpl1.isLoaded();
        boolean boolean18 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary19 = empiricalDistributionImpl1.getSampleStats();
        int int20 = empiricalDistributionImpl1.getBinCount();
        int int21 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray22 = empiricalDistributionImpl1.getUpperBounds();
        java.io.File file23 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(file23);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 100 + "'", int12 == 100);
        org.junit.Assert.assertNotNull(list13);
        org.junit.Assert.assertNotNull(statisticalSummary14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 100 + "'", int16 == 100);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(statisticalSummary19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 100 + "'", int20 == 100);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 100 + "'", int21 == 100);
        org.junit.Assert.assertNotNull(doubleArray22);
    }

    @Test
    public void test1835() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1835");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        double double12 = empiricalDistributionImpl1.getNextValue();
        double double13 = empiricalDistributionImpl1.getNextValue();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl15 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int16 = empiricalDistributionImpl15.getBinCount();
        double[] doubleArray18 = new double[] { 100.0d };
        empiricalDistributionImpl15.load(doubleArray18);
        boolean boolean20 = empiricalDistributionImpl15.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary21 = empiricalDistributionImpl15.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary22 = empiricalDistributionImpl15.getSampleStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl24 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl26 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int27 = empiricalDistributionImpl26.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary28 = empiricalDistributionImpl26.getSampleStats();
        double[] doubleArray32 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl26.load(doubleArray32);
        empiricalDistributionImpl24.load(doubleArray32);
        double[] doubleArray38 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl24.load(doubleArray38);
        empiricalDistributionImpl15.load(doubleArray38);
        double[] doubleArray41 = empiricalDistributionImpl15.getUpperBounds();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl43 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl45 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int46 = empiricalDistributionImpl45.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary47 = empiricalDistributionImpl45.getSampleStats();
        double[] doubleArray51 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl45.load(doubleArray51);
        empiricalDistributionImpl43.load(doubleArray51);
        empiricalDistributionImpl15.load(doubleArray51);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl56 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (short) 10);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl58 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int59 = empiricalDistributionImpl58.getBinCount();
        double[] doubleArray61 = new double[] { 100.0d };
        empiricalDistributionImpl58.load(doubleArray61);
        boolean boolean63 = empiricalDistributionImpl58.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary64 = empiricalDistributionImpl58.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary65 = empiricalDistributionImpl58.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary66 = empiricalDistributionImpl58.getSampleStats();
        double[] doubleArray67 = empiricalDistributionImpl58.getUpperBounds();
        empiricalDistributionImpl56.load(doubleArray67);
        empiricalDistributionImpl15.load(doubleArray67);
        empiricalDistributionImpl1.load(doubleArray67);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl72 = new org.apache.commons.math.random.EmpiricalDistributionImpl(52);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl74 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl76 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int77 = empiricalDistributionImpl76.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary78 = empiricalDistributionImpl76.getSampleStats();
        double[] doubleArray82 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl76.load(doubleArray82);
        empiricalDistributionImpl74.load(doubleArray82);
        double[] doubleArray88 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl74.load(doubleArray88);
        double double90 = empiricalDistributionImpl74.getNextValue();
        boolean boolean91 = empiricalDistributionImpl74.isLoaded();
        boolean boolean92 = empiricalDistributionImpl74.isLoaded();
        double[] doubleArray93 = empiricalDistributionImpl74.getUpperBounds();
        empiricalDistributionImpl72.load(doubleArray93);
        double[] doubleArray95 = empiricalDistributionImpl72.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray95);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double12 + "' != '" + 32.0d + "'", double12 == 32.0d);
// flaky:         org.junit.Assert.assertTrue("'" + double13 + "' != '" + 1.0d + "'", double13 == 1.0d);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 35 + "'", int16 == 35);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(statisticalSummary21);
        org.junit.Assert.assertNotNull(statisticalSummary22);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 35 + "'", int27 == 35);
        org.junit.Assert.assertNull(statisticalSummary28);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 1.0]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 35 + "'", int46 == 35);
        org.junit.Assert.assertNull(statisticalSummary47);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 35 + "'", int59 == 35);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(statisticalSummary64);
        org.junit.Assert.assertNotNull(statisticalSummary65);
        org.junit.Assert.assertNotNull(statisticalSummary66);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 35 + "'", int77 == 35);
        org.junit.Assert.assertNull(statisticalSummary78);
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[-1.0, 0.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double90 + "' != '" + (-2.3533670823546315d) + "'", double90 == (-2.3533670823546315d));
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
        org.junit.Assert.assertNotNull(doubleArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray93), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray95), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
    }

    @Test
    public void test1836() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1836");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        int int9 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl11 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl13 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray18 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl13.load(doubleArray18);
        double[] doubleArray20 = empiricalDistributionImpl13.getUpperBounds();
        empiricalDistributionImpl11.load(doubleArray20);
        empiricalDistributionImpl1.load(doubleArray20);
        java.util.List list23 = empiricalDistributionImpl1.getBinStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl25 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int26 = empiricalDistributionImpl25.getBinCount();
        double[] doubleArray28 = new double[] { 100.0d };
        empiricalDistributionImpl25.load(doubleArray28);
        boolean boolean30 = empiricalDistributionImpl25.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary31 = empiricalDistributionImpl25.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary32 = empiricalDistributionImpl25.getSampleStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl34 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl36 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int37 = empiricalDistributionImpl36.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary38 = empiricalDistributionImpl36.getSampleStats();
        double[] doubleArray42 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl36.load(doubleArray42);
        empiricalDistributionImpl34.load(doubleArray42);
        double[] doubleArray48 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl34.load(doubleArray48);
        empiricalDistributionImpl25.load(doubleArray48);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl52 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl54 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int55 = empiricalDistributionImpl54.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary56 = empiricalDistributionImpl54.getSampleStats();
        double[] doubleArray60 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl54.load(doubleArray60);
        empiricalDistributionImpl52.load(doubleArray60);
        empiricalDistributionImpl25.load(doubleArray60);
        empiricalDistributionImpl1.load(doubleArray60);
        double[] doubleArray69 = new double[] { 1.1354582769782435d, (short) 0, (-0.1362032819111886d), 10L };
        empiricalDistributionImpl1.load(doubleArray69);
        int int71 = empiricalDistributionImpl1.getBinCount();
        java.util.List list72 = empiricalDistributionImpl1.getBinStats();
        double double73 = empiricalDistributionImpl1.getNextValue();
        int int74 = empiricalDistributionImpl1.getBinCount();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(list23);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 35 + "'", int26 == 35);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(statisticalSummary31);
        org.junit.Assert.assertNotNull(statisticalSummary32);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 35 + "'", int37 == 35);
        org.junit.Assert.assertNull(statisticalSummary38);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 35 + "'", int55 == 35);
        org.junit.Assert.assertNull(statisticalSummary56);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[1.1354582769782435, 0.0, -0.1362032819111886, 10.0]");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 35 + "'", int71 == 35);
        org.junit.Assert.assertNotNull(list72);
// flaky:         org.junit.Assert.assertTrue("'" + double73 + "' != '" + (-0.07971697973920688d) + "'", double73 == (-0.07971697973920688d));
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 35 + "'", int74 == 35);
    }

    @Test
    public void test1837() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1837");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        double[] doubleArray15 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl1.load(doubleArray15);
        double double17 = empiricalDistributionImpl1.getNextValue();
        java.util.List list18 = empiricalDistributionImpl1.getBinStats();
        java.io.File file19 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(file19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[-1.0, 0.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double17 + "' != '" + (-2.3156985919759965d) + "'", double17 == (-2.3156985919759965d));
        org.junit.Assert.assertNotNull(list18);
    }

    @Test
    public void test1838() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1838");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        java.util.List list9 = empiricalDistributionImpl1.getBinStats();
        boolean boolean10 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary11 = empiricalDistributionImpl1.getSampleStats();
        int int12 = empiricalDistributionImpl1.getBinCount();
        boolean boolean13 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl15 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        boolean boolean16 = empiricalDistributionImpl15.isLoaded();
        boolean boolean17 = empiricalDistributionImpl15.isLoaded();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl19 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl21 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int22 = empiricalDistributionImpl21.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary23 = empiricalDistributionImpl21.getSampleStats();
        double[] doubleArray27 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl21.load(doubleArray27);
        empiricalDistributionImpl19.load(doubleArray27);
        double[] doubleArray33 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl19.load(doubleArray33);
        empiricalDistributionImpl15.load(doubleArray33);
        double[] doubleArray36 = empiricalDistributionImpl15.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray36);
        java.lang.Class<?> wildcardClass38 = doubleArray36.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(list9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(statisticalSummary11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 35 + "'", int12 == 35);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 35 + "'", int22 == 35);
        org.junit.Assert.assertNull(statisticalSummary23);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 1.0]");
        org.junit.Assert.assertNotNull(wildcardClass38);
    }

    @Test
    public void test1839() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1839");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 10);
        int int2 = empiricalDistributionImpl1.getBinCount();
        int int3 = empiricalDistributionImpl1.getBinCount();
        int int4 = empiricalDistributionImpl1.getBinCount();
        java.net.URL uRL5 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(uRL5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 10 + "'", int2 == 10);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 10 + "'", int3 == 10);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 10 + "'", int4 == 10);
    }

    @Test
    public void test1840() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1840");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary8 = empiricalDistributionImpl1.getSampleStats();
        int int9 = empiricalDistributionImpl1.getBinCount();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(statisticalSummary8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
    }

    @Test
    public void test1841() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1841");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int2 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray4 = new double[] { 100.0d };
        empiricalDistributionImpl1.load(doubleArray4);
        boolean boolean6 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary7 = empiricalDistributionImpl1.getSampleStats();
        boolean boolean8 = empiricalDistributionImpl1.isLoaded();
        double[] doubleArray9 = empiricalDistributionImpl1.getUpperBounds();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 35 + "'", int2 == 35);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(statisticalSummary7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
    }

    @Test
    public void test1842() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1842");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        double[] doubleArray15 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl1.load(doubleArray15);
        double double17 = empiricalDistributionImpl1.getNextValue();
        int int18 = empiricalDistributionImpl1.getBinCount();
        int int19 = empiricalDistributionImpl1.getBinCount();
        double double20 = empiricalDistributionImpl1.getNextValue();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[-1.0, 0.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double17 + "' != '" + (-0.16656455848604465d) + "'", double17 == (-0.16656455848604465d));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
// flaky:         org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.9755682147595616d + "'", double20 == 0.9755682147595616d);
    }

    @Test
    public void test1843() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1843");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray8 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl3.load(doubleArray8);
        double[] doubleArray10 = empiricalDistributionImpl3.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray10);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl13 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int14 = empiricalDistributionImpl13.getBinCount();
        double[] doubleArray16 = new double[] { 100.0d };
        empiricalDistributionImpl13.load(doubleArray16);
        empiricalDistributionImpl1.load(doubleArray16);
        double[] doubleArray19 = empiricalDistributionImpl1.getUpperBounds();
        double double20 = empiricalDistributionImpl1.getNextValue();
        double double21 = empiricalDistributionImpl1.getNextValue();
        double[] doubleArray22 = empiricalDistributionImpl1.getUpperBounds();
        int int23 = empiricalDistributionImpl1.getBinCount();
        double double24 = empiricalDistributionImpl1.getNextValue();
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 35 + "'", int14 == 35);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[100.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 100.0d + "'", double20 == 100.0d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 100.0d + "'", double21 == 100.0d);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 35 + "'", int23 == 35);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 100.0d + "'", double24 == 100.0d);
    }

    @Test
    public void test1844() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1844");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (short) 10);
        int int2 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary3 = empiricalDistributionImpl1.getSampleStats();
        boolean boolean4 = empiricalDistributionImpl1.isLoaded();
        boolean boolean5 = empiricalDistributionImpl1.isLoaded();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 10 + "'", int2 == 10);
        org.junit.Assert.assertNull(statisticalSummary3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test1845() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1845");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        int int9 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl11 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl13 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray18 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl13.load(doubleArray18);
        double[] doubleArray20 = empiricalDistributionImpl13.getUpperBounds();
        empiricalDistributionImpl11.load(doubleArray20);
        empiricalDistributionImpl1.load(doubleArray20);
        java.util.List list23 = empiricalDistributionImpl1.getBinStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary24 = empiricalDistributionImpl1.getSampleStats();
        double double25 = empiricalDistributionImpl1.getNextValue();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl27 = new org.apache.commons.math.random.EmpiricalDistributionImpl(10);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl29 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int30 = empiricalDistributionImpl29.getBinCount();
        double[] doubleArray32 = new double[] { 100.0d };
        empiricalDistributionImpl29.load(doubleArray32);
        boolean boolean34 = empiricalDistributionImpl29.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary35 = empiricalDistributionImpl29.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary36 = empiricalDistributionImpl29.getSampleStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl38 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl40 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int41 = empiricalDistributionImpl40.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary42 = empiricalDistributionImpl40.getSampleStats();
        double[] doubleArray46 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl40.load(doubleArray46);
        empiricalDistributionImpl38.load(doubleArray46);
        double[] doubleArray52 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl38.load(doubleArray52);
        empiricalDistributionImpl29.load(doubleArray52);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl56 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl58 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int59 = empiricalDistributionImpl58.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary60 = empiricalDistributionImpl58.getSampleStats();
        double[] doubleArray64 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl58.load(doubleArray64);
        empiricalDistributionImpl56.load(doubleArray64);
        empiricalDistributionImpl29.load(doubleArray64);
        empiricalDistributionImpl27.load(doubleArray64);
        double[] doubleArray69 = empiricalDistributionImpl27.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray69);
        int int71 = empiricalDistributionImpl1.getBinCount();
        boolean boolean72 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary73 = empiricalDistributionImpl1.getSampleStats();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(list23);
        org.junit.Assert.assertNotNull(statisticalSummary24);
// flaky:         org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.75d + "'", double25 == 0.75d);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 35 + "'", int30 == 35);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(statisticalSummary35);
        org.junit.Assert.assertNotNull(statisticalSummary36);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 35 + "'", int41 == 35);
        org.junit.Assert.assertNull(statisticalSummary42);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 35 + "'", int59 == 35);
        org.junit.Assert.assertNull(statisticalSummary60);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[0.3333333333333333, 0.3333333333333333, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 1.0]");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 35 + "'", int71 == 35);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(statisticalSummary73);
    }

    @Test
    public void test1846() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1846");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 10);
        int int2 = empiricalDistributionImpl1.getBinCount();
        int int3 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary4 = empiricalDistributionImpl1.getSampleStats();
        java.util.List list5 = empiricalDistributionImpl1.getBinStats();
        boolean boolean6 = empiricalDistributionImpl1.isLoaded();
        java.util.List list7 = empiricalDistributionImpl1.getBinStats();
        int int8 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary9 = empiricalDistributionImpl1.getSampleStats();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 10 + "'", int2 == 10);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 10 + "'", int3 == 10);
        org.junit.Assert.assertNull(statisticalSummary4);
        org.junit.Assert.assertNotNull(list5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(list7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
        org.junit.Assert.assertNull(statisticalSummary9);
    }

    @Test
    public void test1847() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1847");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        double[] doubleArray15 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl1.load(doubleArray15);
        double double17 = empiricalDistributionImpl1.getNextValue();
        boolean boolean18 = empiricalDistributionImpl1.isLoaded();
        int int19 = empiricalDistributionImpl1.getBinCount();
        int int20 = empiricalDistributionImpl1.getBinCount();
        java.net.URL uRL21 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(uRL21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[-1.0, 0.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double17 + "' != '" + (-0.6618547748205398d) + "'", double17 == (-0.6618547748205398d));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
    }

    @Test
    public void test1848() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1848");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 100);
        int int2 = empiricalDistributionImpl1.getBinCount();
        int int3 = empiricalDistributionImpl1.getBinCount();
        java.util.List list4 = empiricalDistributionImpl1.getBinStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl1.getSampleStats();
        int int6 = empiricalDistributionImpl1.getBinCount();
        java.util.List list7 = empiricalDistributionImpl1.getBinStats();
        int int8 = empiricalDistributionImpl1.getBinCount();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 100 + "'", int2 == 100);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 100 + "'", int3 == 100);
        org.junit.Assert.assertNotNull(list4);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 100 + "'", int6 == 100);
        org.junit.Assert.assertNotNull(list7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 100 + "'", int8 == 100);
    }

    @Test
    public void test1849() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1849");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 100);
        int int2 = empiricalDistributionImpl1.getBinCount();
        int int3 = empiricalDistributionImpl1.getBinCount();
        int int4 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl6 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (short) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl8 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray13 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl8.load(doubleArray13);
        double[] doubleArray15 = empiricalDistributionImpl8.getUpperBounds();
        int int16 = empiricalDistributionImpl8.getBinCount();
        double[] doubleArray17 = empiricalDistributionImpl8.getUpperBounds();
        empiricalDistributionImpl6.load(doubleArray17);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl20 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl22 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray27 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl22.load(doubleArray27);
        double[] doubleArray29 = empiricalDistributionImpl22.getUpperBounds();
        empiricalDistributionImpl20.load(doubleArray29);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl32 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int33 = empiricalDistributionImpl32.getBinCount();
        double[] doubleArray35 = new double[] { 100.0d };
        empiricalDistributionImpl32.load(doubleArray35);
        empiricalDistributionImpl20.load(doubleArray35);
        double[] doubleArray38 = empiricalDistributionImpl20.getUpperBounds();
        empiricalDistributionImpl6.load(doubleArray38);
        empiricalDistributionImpl1.load(doubleArray38);
        java.util.List list41 = empiricalDistributionImpl1.getBinStats();
        java.io.File file42 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(file42);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 100 + "'", int2 == 100);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 100 + "'", int3 == 100);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 100 + "'", int4 == 100);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 35 + "'", int16 == 35);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 35 + "'", int33 == 35);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[100.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(list41);
    }

    @Test
    public void test1850() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1850");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        java.util.List list9 = empiricalDistributionImpl1.getBinStats();
        boolean boolean10 = empiricalDistributionImpl1.isLoaded();
        double[] doubleArray11 = empiricalDistributionImpl1.getUpperBounds();
        boolean boolean12 = empiricalDistributionImpl1.isLoaded();
        boolean boolean13 = empiricalDistributionImpl1.isLoaded();
        int int14 = empiricalDistributionImpl1.getBinCount();
        double double15 = empiricalDistributionImpl1.getNextValue();
        java.util.List list16 = empiricalDistributionImpl1.getBinStats();
        double[] doubleArray17 = empiricalDistributionImpl1.getUpperBounds();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(list9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 35 + "'", int14 == 35);
// flaky:         org.junit.Assert.assertTrue("'" + double15 + "' != '" + (-1.0d) + "'", double15 == (-1.0d));
        org.junit.Assert.assertNotNull(list16);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
    }

    @Test
    public void test1851() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1851");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double double8 = empiricalDistributionImpl1.getNextValue();
        double double9 = empiricalDistributionImpl1.getNextValue();
        java.util.List list10 = empiricalDistributionImpl1.getBinStats();
        boolean boolean11 = empiricalDistributionImpl1.isLoaded();
        java.net.URL uRL12 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(uRL12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.0d + "'", double8 == 1.0d);
// flaky:         org.junit.Assert.assertTrue("'" + double9 + "' != '" + (-1.0d) + "'", double9 == (-1.0d));
        org.junit.Assert.assertNotNull(list10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
    }

    @Test
    public void test1852() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1852");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        int int9 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl11 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl13 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray18 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl13.load(doubleArray18);
        double[] doubleArray20 = empiricalDistributionImpl13.getUpperBounds();
        empiricalDistributionImpl11.load(doubleArray20);
        empiricalDistributionImpl1.load(doubleArray20);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary23 = empiricalDistributionImpl1.getSampleStats();
        java.util.List list24 = empiricalDistributionImpl1.getBinStats();
        java.util.List list25 = empiricalDistributionImpl1.getBinStats();
        java.util.List list26 = empiricalDistributionImpl1.getBinStats();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(statisticalSummary23);
        org.junit.Assert.assertNotNull(list24);
        org.junit.Assert.assertNotNull(list25);
        org.junit.Assert.assertNotNull(list26);
    }

    @Test
    public void test1853() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1853");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl10 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl12 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int13 = empiricalDistributionImpl12.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary14 = empiricalDistributionImpl12.getSampleStats();
        double[] doubleArray18 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl12.load(doubleArray18);
        empiricalDistributionImpl10.load(doubleArray18);
        empiricalDistributionImpl1.load(doubleArray18);
        double double22 = empiricalDistributionImpl1.getNextValue();
        java.util.List list23 = empiricalDistributionImpl1.getBinStats();
        int int24 = empiricalDistributionImpl1.getBinCount();
        java.util.List list25 = empiricalDistributionImpl1.getBinStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl27 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl29 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int30 = empiricalDistributionImpl29.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary31 = empiricalDistributionImpl29.getSampleStats();
        double[] doubleArray35 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl29.load(doubleArray35);
        empiricalDistributionImpl27.load(doubleArray35);
        double[] doubleArray41 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl27.load(doubleArray41);
        empiricalDistributionImpl1.load(doubleArray41);
        double[] doubleArray44 = empiricalDistributionImpl1.getUpperBounds();
        java.io.File file45 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(file45);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
        org.junit.Assert.assertNull(statisticalSummary14);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double22 + "' != '" + 10.0d + "'", double22 == 10.0d);
        org.junit.Assert.assertNotNull(list23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 35 + "'", int24 == 35);
        org.junit.Assert.assertNotNull(list25);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 35 + "'", int30 == 35);
        org.junit.Assert.assertNull(statisticalSummary31);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 1.0]");
    }

    @Test
    public void test1854() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1854");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        double double12 = empiricalDistributionImpl1.getNextValue();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl14 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl16 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int17 = empiricalDistributionImpl16.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary18 = empiricalDistributionImpl16.getSampleStats();
        double[] doubleArray22 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl16.load(doubleArray22);
        empiricalDistributionImpl14.load(doubleArray22);
        double double25 = empiricalDistributionImpl14.getNextValue();
        double[] doubleArray26 = empiricalDistributionImpl14.getUpperBounds();
        double[] doubleArray27 = empiricalDistributionImpl14.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray27);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl30 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl32 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray37 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl32.load(doubleArray37);
        double[] doubleArray39 = empiricalDistributionImpl32.getUpperBounds();
        empiricalDistributionImpl30.load(doubleArray39);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl42 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int43 = empiricalDistributionImpl42.getBinCount();
        double[] doubleArray45 = new double[] { 100.0d };
        empiricalDistributionImpl42.load(doubleArray45);
        empiricalDistributionImpl30.load(doubleArray45);
        empiricalDistributionImpl1.load(doubleArray45);
        double double49 = empiricalDistributionImpl1.getNextValue();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary50 = empiricalDistributionImpl1.getSampleStats();
        java.io.File file51 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(file51);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 35 + "'", int17 == 35);
        org.junit.Assert.assertNull(statisticalSummary18);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double25 + "' != '" + 1.0d + "'", double25 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 35 + "'", int43 == 35);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[100.0]");
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 100.0d + "'", double49 == 100.0d);
        org.junit.Assert.assertNotNull(statisticalSummary50);
    }

    @Test
    public void test1855() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1855");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        double[] doubleArray15 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl1.load(doubleArray15);
        double[] doubleArray17 = empiricalDistributionImpl1.getUpperBounds();
        double double18 = empiricalDistributionImpl1.getNextValue();
        boolean boolean19 = empiricalDistributionImpl1.isLoaded();
        int int20 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary21 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary22 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl24 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (short) 10);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl26 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int27 = empiricalDistributionImpl26.getBinCount();
        double[] doubleArray29 = new double[] { 100.0d };
        empiricalDistributionImpl26.load(doubleArray29);
        boolean boolean31 = empiricalDistributionImpl26.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary32 = empiricalDistributionImpl26.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary33 = empiricalDistributionImpl26.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary34 = empiricalDistributionImpl26.getSampleStats();
        double[] doubleArray35 = empiricalDistributionImpl26.getUpperBounds();
        empiricalDistributionImpl24.load(doubleArray35);
        empiricalDistributionImpl1.load(doubleArray35);
        java.util.List list38 = empiricalDistributionImpl1.getBinStats();
        java.util.List list39 = empiricalDistributionImpl1.getBinStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary40 = empiricalDistributionImpl1.getSampleStats();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double18 + "' != '" + (-0.5933597043546587d) + "'", double18 == (-0.5933597043546587d));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(statisticalSummary21);
        org.junit.Assert.assertNotNull(statisticalSummary22);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 35 + "'", int27 == 35);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(statisticalSummary32);
        org.junit.Assert.assertNotNull(statisticalSummary33);
        org.junit.Assert.assertNotNull(statisticalSummary34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(list38);
        org.junit.Assert.assertNotNull(list39);
        org.junit.Assert.assertNotNull(statisticalSummary40);
    }

    @Test
    public void test1856() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1856");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray8 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl3.load(doubleArray8);
        double[] doubleArray10 = empiricalDistributionImpl3.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray10);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl13 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int14 = empiricalDistributionImpl13.getBinCount();
        double[] doubleArray16 = new double[] { 100.0d };
        empiricalDistributionImpl13.load(doubleArray16);
        empiricalDistributionImpl1.load(doubleArray16);
        java.util.List list19 = empiricalDistributionImpl1.getBinStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary20 = empiricalDistributionImpl1.getSampleStats();
        double double21 = empiricalDistributionImpl1.getNextValue();
        java.util.List list22 = empiricalDistributionImpl1.getBinStats();
        int int23 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray24 = empiricalDistributionImpl1.getUpperBounds();
        boolean boolean25 = empiricalDistributionImpl1.isLoaded();
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 35 + "'", int14 == 35);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[100.0]");
        org.junit.Assert.assertNotNull(list19);
        org.junit.Assert.assertNotNull(statisticalSummary20);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 100.0d + "'", double21 == 100.0d);
        org.junit.Assert.assertNotNull(list22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 35 + "'", int23 == 35);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
    }

    @Test
    public void test1857() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1857");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        int int12 = empiricalDistributionImpl1.getBinCount();
        java.util.List list13 = empiricalDistributionImpl1.getBinStats();
        java.util.List list14 = empiricalDistributionImpl1.getBinStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl16 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        boolean boolean17 = empiricalDistributionImpl16.isLoaded();
        boolean boolean18 = empiricalDistributionImpl16.isLoaded();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl20 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl22 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int23 = empiricalDistributionImpl22.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary24 = empiricalDistributionImpl22.getSampleStats();
        double[] doubleArray28 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl22.load(doubleArray28);
        empiricalDistributionImpl20.load(doubleArray28);
        double[] doubleArray34 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl20.load(doubleArray34);
        empiricalDistributionImpl16.load(doubleArray34);
        empiricalDistributionImpl1.load(doubleArray34);
        java.util.List list38 = empiricalDistributionImpl1.getBinStats();
        double double39 = empiricalDistributionImpl1.getNextValue();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl41 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int42 = empiricalDistributionImpl41.getBinCount();
        double[] doubleArray44 = new double[] { 100.0d };
        empiricalDistributionImpl41.load(doubleArray44);
        boolean boolean46 = empiricalDistributionImpl41.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary47 = empiricalDistributionImpl41.getSampleStats();
        int int48 = empiricalDistributionImpl41.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary49 = empiricalDistributionImpl41.getSampleStats();
        java.util.List list50 = empiricalDistributionImpl41.getBinStats();
        double double51 = empiricalDistributionImpl41.getNextValue();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl53 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int54 = empiricalDistributionImpl53.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary55 = empiricalDistributionImpl53.getSampleStats();
        double[] doubleArray59 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl53.load(doubleArray59);
        int int61 = empiricalDistributionImpl53.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary62 = empiricalDistributionImpl53.getSampleStats();
        double[] doubleArray63 = empiricalDistributionImpl53.getUpperBounds();
        empiricalDistributionImpl41.load(doubleArray63);
        empiricalDistributionImpl1.load(doubleArray63);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl67 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int68 = empiricalDistributionImpl67.getBinCount();
        double[] doubleArray70 = new double[] { 100.0d };
        empiricalDistributionImpl67.load(doubleArray70);
        boolean boolean72 = empiricalDistributionImpl67.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary73 = empiricalDistributionImpl67.getSampleStats();
        double[] doubleArray74 = empiricalDistributionImpl67.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray74);
        java.io.File file76 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(file76);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 100 + "'", int12 == 100);
        org.junit.Assert.assertNotNull(list13);
        org.junit.Assert.assertNotNull(list14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 35 + "'", int23 == 35);
        org.junit.Assert.assertNull(statisticalSummary24);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(list38);
// flaky:         org.junit.Assert.assertTrue("'" + double39 + "' != '" + 1.0d + "'", double39 == 1.0d);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 35 + "'", int42 == 35);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(statisticalSummary47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 35 + "'", int48 == 35);
        org.junit.Assert.assertNotNull(statisticalSummary49);
        org.junit.Assert.assertNotNull(list50);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 100.0d + "'", double51 == 100.0d);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 35 + "'", int54 == 35);
        org.junit.Assert.assertNull(statisticalSummary55);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 35 + "'", int61 == 35);
        org.junit.Assert.assertNotNull(statisticalSummary62);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 1.0]");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 35 + "'", int68 == 35);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(statisticalSummary73);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
    }

    @Test
    public void test1858() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1858");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        double[] doubleArray15 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl1.load(doubleArray15);
        double double17 = empiricalDistributionImpl1.getNextValue();
        boolean boolean18 = empiricalDistributionImpl1.isLoaded();
        boolean boolean19 = empiricalDistributionImpl1.isLoaded();
        double[] doubleArray20 = empiricalDistributionImpl1.getUpperBounds();
        int int21 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl23 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl25 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int26 = empiricalDistributionImpl25.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary27 = empiricalDistributionImpl25.getSampleStats();
        double[] doubleArray31 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl25.load(doubleArray31);
        empiricalDistributionImpl23.load(doubleArray31);
        double[] doubleArray37 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl23.load(doubleArray37);
        double[] doubleArray39 = empiricalDistributionImpl23.getUpperBounds();
        double double40 = empiricalDistributionImpl23.getNextValue();
        double[] doubleArray41 = empiricalDistributionImpl23.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray41);
        double double43 = empiricalDistributionImpl1.getNextValue();
        java.net.URL uRL44 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(uRL44);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[-1.0, 0.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double17 + "' != '" + (-1.4895799927590947d) + "'", double17 == (-1.4895799927590947d));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 35 + "'", int26 == 35);
        org.junit.Assert.assertNull(statisticalSummary27);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double40 + "' != '" + (-1.4895799927590947d) + "'", double40 == (-1.4895799927590947d));
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0]");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 1.0d + "'", double43 == 1.0d);
    }

    @Test
    public void test1859() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1859");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        boolean boolean12 = empiricalDistributionImpl1.isLoaded();
        double[] doubleArray13 = empiricalDistributionImpl1.getUpperBounds();
        int int14 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl16 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl18 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int19 = empiricalDistributionImpl18.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary20 = empiricalDistributionImpl18.getSampleStats();
        double[] doubleArray24 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl18.load(doubleArray24);
        empiricalDistributionImpl16.load(doubleArray24);
        double[] doubleArray30 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl16.load(doubleArray30);
        double double32 = empiricalDistributionImpl16.getNextValue();
        boolean boolean33 = empiricalDistributionImpl16.isLoaded();
        boolean boolean34 = empiricalDistributionImpl16.isLoaded();
        double double35 = empiricalDistributionImpl16.getNextValue();
        double[] doubleArray36 = empiricalDistributionImpl16.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray36);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 35 + "'", int19 == 35);
        org.junit.Assert.assertNull(statisticalSummary20);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[-1.0, 0.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double32 + "' != '" + (-1.3189278916749827d) + "'", double32 == (-1.3189278916749827d));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
// flaky:         org.junit.Assert.assertTrue("'" + double35 + "' != '" + (-0.6656788046730419d) + "'", double35 == (-0.6656788046730419d));
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
    }

    @Test
    public void test1860() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1860");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        int int9 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray10 = empiricalDistributionImpl1.getUpperBounds();
        int int11 = empiricalDistributionImpl1.getBinCount();
        java.util.List list12 = empiricalDistributionImpl1.getBinStats();
        double double13 = empiricalDistributionImpl1.getNextValue();
        double double14 = empiricalDistributionImpl1.getNextValue();
        java.util.List list15 = empiricalDistributionImpl1.getBinStats();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 35 + "'", int11 == 35);
        org.junit.Assert.assertNotNull(list12);
// flaky:         org.junit.Assert.assertTrue("'" + double13 + "' != '" + 10.0d + "'", double13 == 10.0d);
// flaky:         org.junit.Assert.assertTrue("'" + double14 + "' != '" + 1.0d + "'", double14 == 1.0d);
        org.junit.Assert.assertNotNull(list15);
    }

    @Test
    public void test1861() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1861");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        double[] doubleArray15 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl1.load(doubleArray15);
        double double17 = empiricalDistributionImpl1.getNextValue();
        boolean boolean18 = empiricalDistributionImpl1.isLoaded();
        boolean boolean19 = empiricalDistributionImpl1.isLoaded();
        double[] doubleArray20 = empiricalDistributionImpl1.getUpperBounds();
        java.util.List list21 = empiricalDistributionImpl1.getBinStats();
        java.util.List list22 = empiricalDistributionImpl1.getBinStats();
        java.lang.Class<?> wildcardClass23 = empiricalDistributionImpl1.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[-1.0, 0.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.08117482684934743d + "'", double17 == 0.08117482684934743d);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0]");
        org.junit.Assert.assertNotNull(list21);
        org.junit.Assert.assertNotNull(list22);
        org.junit.Assert.assertNotNull(wildcardClass23);
    }

    @Test
    public void test1862() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1862");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray8 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl3.load(doubleArray8);
        double[] doubleArray10 = empiricalDistributionImpl3.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray10);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl13 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int14 = empiricalDistributionImpl13.getBinCount();
        double[] doubleArray16 = new double[] { 100.0d };
        empiricalDistributionImpl13.load(doubleArray16);
        empiricalDistributionImpl1.load(doubleArray16);
        double[] doubleArray19 = empiricalDistributionImpl1.getUpperBounds();
        double double20 = empiricalDistributionImpl1.getNextValue();
        boolean boolean21 = empiricalDistributionImpl1.isLoaded();
        double[] doubleArray22 = empiricalDistributionImpl1.getUpperBounds();
        double double23 = empiricalDistributionImpl1.getNextValue();
        int int24 = empiricalDistributionImpl1.getBinCount();
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 35 + "'", int14 == 35);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[100.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 100.0d + "'", double20 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 100.0d + "'", double23 == 100.0d);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 35 + "'", int24 == 35);
    }

    @Test
    public void test1863() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1863");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        java.util.List list9 = empiricalDistributionImpl1.getBinStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl11 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl13 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int14 = empiricalDistributionImpl13.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary15 = empiricalDistributionImpl13.getSampleStats();
        double[] doubleArray19 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl13.load(doubleArray19);
        empiricalDistributionImpl11.load(doubleArray19);
        double double22 = empiricalDistributionImpl11.getNextValue();
        double[] doubleArray23 = empiricalDistributionImpl11.getUpperBounds();
        double[] doubleArray24 = empiricalDistributionImpl11.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray24);
        boolean boolean26 = empiricalDistributionImpl1.isLoaded();
        int int27 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl29 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int30 = empiricalDistributionImpl29.getBinCount();
        double[] doubleArray32 = new double[] { 100.0d };
        empiricalDistributionImpl29.load(doubleArray32);
        boolean boolean34 = empiricalDistributionImpl29.isLoaded();
        double[] doubleArray35 = empiricalDistributionImpl29.getUpperBounds();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary36 = empiricalDistributionImpl29.getSampleStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl38 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (short) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl40 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray45 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl40.load(doubleArray45);
        double[] doubleArray47 = empiricalDistributionImpl40.getUpperBounds();
        int int48 = empiricalDistributionImpl40.getBinCount();
        double[] doubleArray49 = empiricalDistributionImpl40.getUpperBounds();
        empiricalDistributionImpl38.load(doubleArray49);
        double[] doubleArray51 = empiricalDistributionImpl38.getUpperBounds();
        empiricalDistributionImpl29.load(doubleArray51);
        empiricalDistributionImpl1.load(doubleArray51);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl55 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl57 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int58 = empiricalDistributionImpl57.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary59 = empiricalDistributionImpl57.getSampleStats();
        double[] doubleArray63 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl57.load(doubleArray63);
        empiricalDistributionImpl55.load(doubleArray63);
        double[] doubleArray69 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl55.load(doubleArray69);
        empiricalDistributionImpl1.load(doubleArray69);
        java.util.List list72 = empiricalDistributionImpl1.getBinStats();
        java.lang.Class<?> wildcardClass73 = empiricalDistributionImpl1.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(list9);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 35 + "'", int14 == 35);
        org.junit.Assert.assertNull(statisticalSummary15);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double22 + "' != '" + 10.0d + "'", double22 == 10.0d);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 35 + "'", int27 == 35);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 35 + "'", int30 == 35);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(statisticalSummary36);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 35 + "'", int48 == 35);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 35 + "'", int58 == 35);
        org.junit.Assert.assertNull(statisticalSummary59);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(list72);
        org.junit.Assert.assertNotNull(wildcardClass73);
    }

    @Test
    public void test1864() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1864");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) ' ');
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        double[] doubleArray6 = new double[] { 100.0d };
        empiricalDistributionImpl3.load(doubleArray6);
        boolean boolean8 = empiricalDistributionImpl3.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary9 = empiricalDistributionImpl3.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary10 = empiricalDistributionImpl3.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary11 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray12 = empiricalDistributionImpl3.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray12);
        java.util.List list14 = empiricalDistributionImpl1.getBinStats();
        double[] doubleArray15 = empiricalDistributionImpl1.getUpperBounds();
        double[] doubleArray16 = empiricalDistributionImpl1.getUpperBounds();
        java.lang.Class<?> wildcardClass17 = empiricalDistributionImpl1.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(statisticalSummary9);
        org.junit.Assert.assertNotNull(statisticalSummary10);
        org.junit.Assert.assertNotNull(statisticalSummary11);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(list14);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test1865() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1865");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        java.util.List list9 = empiricalDistributionImpl1.getBinStats();
        boolean boolean10 = empiricalDistributionImpl1.isLoaded();
        double[] doubleArray11 = empiricalDistributionImpl1.getUpperBounds();
        boolean boolean12 = empiricalDistributionImpl1.isLoaded();
        boolean boolean13 = empiricalDistributionImpl1.isLoaded();
        int int14 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary15 = empiricalDistributionImpl1.getSampleStats();
        double[] doubleArray16 = empiricalDistributionImpl1.getUpperBounds();
        double double17 = empiricalDistributionImpl1.getNextValue();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(list9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 35 + "'", int14 == 35);
        org.junit.Assert.assertNotNull(statisticalSummary15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double17 + "' != '" + 1.0d + "'", double17 == 1.0d);
    }

    @Test
    public void test1866() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1866");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int2 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray4 = new double[] { 100.0d };
        empiricalDistributionImpl1.load(doubleArray4);
        boolean boolean6 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary7 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary8 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl10 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl12 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int13 = empiricalDistributionImpl12.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary14 = empiricalDistributionImpl12.getSampleStats();
        double[] doubleArray18 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl12.load(doubleArray18);
        empiricalDistributionImpl10.load(doubleArray18);
        double[] doubleArray24 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl10.load(doubleArray24);
        empiricalDistributionImpl1.load(doubleArray24);
        double[] doubleArray27 = empiricalDistributionImpl1.getUpperBounds();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl29 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl31 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int32 = empiricalDistributionImpl31.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary33 = empiricalDistributionImpl31.getSampleStats();
        double[] doubleArray37 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl31.load(doubleArray37);
        empiricalDistributionImpl29.load(doubleArray37);
        empiricalDistributionImpl1.load(doubleArray37);
        int int41 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary42 = empiricalDistributionImpl1.getSampleStats();
        boolean boolean43 = empiricalDistributionImpl1.isLoaded();
        java.lang.Class<?> wildcardClass44 = empiricalDistributionImpl1.getClass();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 35 + "'", int2 == 35);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(statisticalSummary7);
        org.junit.Assert.assertNotNull(statisticalSummary8);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
        org.junit.Assert.assertNull(statisticalSummary14);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 1.0]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 35 + "'", int32 == 35);
        org.junit.Assert.assertNull(statisticalSummary33);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 35 + "'", int41 == 35);
        org.junit.Assert.assertNotNull(statisticalSummary42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(wildcardClass44);
    }

    @Test
    public void test1867() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1867");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        int int9 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl11 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl13 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray18 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl13.load(doubleArray18);
        double[] doubleArray20 = empiricalDistributionImpl13.getUpperBounds();
        empiricalDistributionImpl11.load(doubleArray20);
        empiricalDistributionImpl1.load(doubleArray20);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl24 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl26 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray31 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl26.load(doubleArray31);
        double[] doubleArray33 = empiricalDistributionImpl26.getUpperBounds();
        empiricalDistributionImpl24.load(doubleArray33);
        empiricalDistributionImpl1.load(doubleArray33);
        java.util.List list36 = empiricalDistributionImpl1.getBinStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl38 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray43 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl38.load(doubleArray43);
        double[] doubleArray45 = empiricalDistributionImpl38.getUpperBounds();
        int int46 = empiricalDistributionImpl38.getBinCount();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl48 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl50 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray55 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl50.load(doubleArray55);
        double[] doubleArray57 = empiricalDistributionImpl50.getUpperBounds();
        empiricalDistributionImpl48.load(doubleArray57);
        empiricalDistributionImpl38.load(doubleArray57);
        java.util.List list60 = empiricalDistributionImpl38.getBinStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary61 = empiricalDistributionImpl38.getSampleStats();
        double double62 = empiricalDistributionImpl38.getNextValue();
        double[] doubleArray63 = empiricalDistributionImpl38.getUpperBounds();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl65 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray70 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl65.load(doubleArray70);
        double[] doubleArray72 = empiricalDistributionImpl65.getUpperBounds();
        double[] doubleArray73 = empiricalDistributionImpl65.getUpperBounds();
        empiricalDistributionImpl38.load(doubleArray73);
        empiricalDistributionImpl1.load(doubleArray73);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary76 = empiricalDistributionImpl1.getSampleStats();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(list36);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 35 + "'", int46 == 35);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(list60);
        org.junit.Assert.assertNotNull(statisticalSummary61);
// flaky:         org.junit.Assert.assertTrue("'" + double62 + "' != '" + 0.75d + "'", double62 == 0.75d);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.9714285714285715, 0.9714285714285715, 0.9714285714285715, 0.9714285714285715, 0.9714285714285715, 0.9714285714285715, 0.9714285714285715, 0.9714285714285715, 0.9714285714285715, 0.9714285714285715, 0.9714285714285715, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(statisticalSummary76);
    }

    @Test
    public void test1868() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1868");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int2 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray4 = new double[] { 100.0d };
        empiricalDistributionImpl1.load(doubleArray4);
        boolean boolean6 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary7 = empiricalDistributionImpl1.getSampleStats();
        boolean boolean8 = empiricalDistributionImpl1.isLoaded();
        java.util.List list9 = empiricalDistributionImpl1.getBinStats();
        double[] doubleArray10 = empiricalDistributionImpl1.getUpperBounds();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl12 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl14 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int15 = empiricalDistributionImpl14.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary16 = empiricalDistributionImpl14.getSampleStats();
        double[] doubleArray20 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl14.load(doubleArray20);
        empiricalDistributionImpl12.load(doubleArray20);
        empiricalDistributionImpl1.load(doubleArray20);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 35 + "'", int2 == 35);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(statisticalSummary7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(list9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 35 + "'", int15 == 35);
        org.junit.Assert.assertNull(statisticalSummary16);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[10.0, 32.0, 1.0]");
    }

    @Test
    public void test1869() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1869");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        int int9 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl11 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl13 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray18 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl13.load(doubleArray18);
        double[] doubleArray20 = empiricalDistributionImpl13.getUpperBounds();
        empiricalDistributionImpl11.load(doubleArray20);
        empiricalDistributionImpl1.load(doubleArray20);
        java.util.List list23 = empiricalDistributionImpl1.getBinStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl25 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int26 = empiricalDistributionImpl25.getBinCount();
        double[] doubleArray28 = new double[] { 100.0d };
        empiricalDistributionImpl25.load(doubleArray28);
        boolean boolean30 = empiricalDistributionImpl25.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary31 = empiricalDistributionImpl25.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary32 = empiricalDistributionImpl25.getSampleStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl34 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl36 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int37 = empiricalDistributionImpl36.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary38 = empiricalDistributionImpl36.getSampleStats();
        double[] doubleArray42 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl36.load(doubleArray42);
        empiricalDistributionImpl34.load(doubleArray42);
        double[] doubleArray48 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl34.load(doubleArray48);
        empiricalDistributionImpl25.load(doubleArray48);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl52 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl54 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int55 = empiricalDistributionImpl54.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary56 = empiricalDistributionImpl54.getSampleStats();
        double[] doubleArray60 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl54.load(doubleArray60);
        empiricalDistributionImpl52.load(doubleArray60);
        empiricalDistributionImpl25.load(doubleArray60);
        empiricalDistributionImpl1.load(doubleArray60);
        double[] doubleArray69 = new double[] { 1.1354582769782435d, (short) 0, (-0.1362032819111886d), 10L };
        empiricalDistributionImpl1.load(doubleArray69);
        boolean boolean71 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary72 = empiricalDistributionImpl1.getSampleStats();
        boolean boolean73 = empiricalDistributionImpl1.isLoaded();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(list23);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 35 + "'", int26 == 35);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(statisticalSummary31);
        org.junit.Assert.assertNotNull(statisticalSummary32);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 35 + "'", int37 == 35);
        org.junit.Assert.assertNull(statisticalSummary38);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 35 + "'", int55 == 35);
        org.junit.Assert.assertNull(statisticalSummary56);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[1.1354582769782435, 0.0, -0.1362032819111886, 10.0]");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(statisticalSummary72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
    }

    @Test
    public void test1870() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1870");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        double[] doubleArray15 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl1.load(doubleArray15);
        double[] doubleArray17 = empiricalDistributionImpl1.getUpperBounds();
        double double18 = empiricalDistributionImpl1.getNextValue();
        boolean boolean19 = empiricalDistributionImpl1.isLoaded();
        int int20 = empiricalDistributionImpl1.getBinCount();
        int int21 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary22 = empiricalDistributionImpl1.getSampleStats();
        int int23 = empiricalDistributionImpl1.getBinCount();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double18 + "' != '" + (-0.30284791534556965d) + "'", double18 == (-0.30284791534556965d));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(statisticalSummary22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
    }

    @Test
    public void test1871() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1871");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        java.util.List list9 = empiricalDistributionImpl1.getBinStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl11 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl13 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int14 = empiricalDistributionImpl13.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary15 = empiricalDistributionImpl13.getSampleStats();
        double[] doubleArray19 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl13.load(doubleArray19);
        empiricalDistributionImpl11.load(doubleArray19);
        double double22 = empiricalDistributionImpl11.getNextValue();
        double[] doubleArray23 = empiricalDistributionImpl11.getUpperBounds();
        double[] doubleArray24 = empiricalDistributionImpl11.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray24);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary26 = empiricalDistributionImpl1.getSampleStats();
        double[] doubleArray27 = empiricalDistributionImpl1.getUpperBounds();
        double double28 = empiricalDistributionImpl1.getNextValue();
        double[] doubleArray29 = empiricalDistributionImpl1.getUpperBounds();
        int int30 = empiricalDistributionImpl1.getBinCount();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(list9);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 35 + "'", int14 == 35);
        org.junit.Assert.assertNull(statisticalSummary15);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double22 + "' != '" + 10.0d + "'", double22 == 10.0d);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertNotNull(statisticalSummary26);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.6666666666666666d + "'", double28 == 0.6666666666666666d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 1.0]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 35 + "'", int30 == 35);
    }

    @Test
    public void test1872() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1872");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        double[] doubleArray15 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl1.load(doubleArray15);
        double[] doubleArray17 = empiricalDistributionImpl1.getUpperBounds();
        double double18 = empiricalDistributionImpl1.getNextValue();
        boolean boolean19 = empiricalDistributionImpl1.isLoaded();
        int int20 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary21 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary22 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary23 = empiricalDistributionImpl1.getSampleStats();
        double[] doubleArray24 = empiricalDistributionImpl1.getUpperBounds();
        java.lang.Class<?> wildcardClass25 = empiricalDistributionImpl1.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double18 + "' != '" + (-0.729019003314208d) + "'", double18 == (-0.729019003314208d));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(statisticalSummary21);
        org.junit.Assert.assertNotNull(statisticalSummary22);
        org.junit.Assert.assertNotNull(statisticalSummary23);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[1.0]");
        org.junit.Assert.assertNotNull(wildcardClass25);
    }

    @Test
    public void test1873() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1873");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int2 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray4 = new double[] { 100.0d };
        empiricalDistributionImpl1.load(doubleArray4);
        boolean boolean6 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary7 = empiricalDistributionImpl1.getSampleStats();
        boolean boolean8 = empiricalDistributionImpl1.isLoaded();
        boolean boolean9 = empiricalDistributionImpl1.isLoaded();
        double[] doubleArray10 = empiricalDistributionImpl1.getUpperBounds();
        double double11 = empiricalDistributionImpl1.getNextValue();
        java.util.List list12 = empiricalDistributionImpl1.getBinStats();
        double double13 = empiricalDistributionImpl1.getNextValue();
        int int14 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray15 = empiricalDistributionImpl1.getUpperBounds();
        java.lang.Class<?> wildcardClass16 = empiricalDistributionImpl1.getClass();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 35 + "'", int2 == 35);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(statisticalSummary7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertNotNull(list12);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 100.0d + "'", double13 == 100.0d);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 35 + "'", int14 == 35);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test1874() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1874");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        java.util.List list12 = empiricalDistributionImpl1.getBinStats();
        double double13 = empiricalDistributionImpl1.getNextValue();
        java.io.File file14 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(file14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(list12);
// flaky:         org.junit.Assert.assertTrue("'" + double13 + "' != '" + 32.0d + "'", double13 == 32.0d);
    }

    @Test
    public void test1875() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1875");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int2 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray4 = new double[] { 100.0d };
        empiricalDistributionImpl1.load(doubleArray4);
        boolean boolean6 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary7 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary8 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl10 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl12 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int13 = empiricalDistributionImpl12.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary14 = empiricalDistributionImpl12.getSampleStats();
        double[] doubleArray18 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl12.load(doubleArray18);
        empiricalDistributionImpl10.load(doubleArray18);
        double[] doubleArray24 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl10.load(doubleArray24);
        empiricalDistributionImpl1.load(doubleArray24);
        double[] doubleArray27 = empiricalDistributionImpl1.getUpperBounds();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl29 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl31 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int32 = empiricalDistributionImpl31.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary33 = empiricalDistributionImpl31.getSampleStats();
        double[] doubleArray37 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl31.load(doubleArray37);
        empiricalDistributionImpl29.load(doubleArray37);
        empiricalDistributionImpl1.load(doubleArray37);
        int int41 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary42 = empiricalDistributionImpl1.getSampleStats();
        double[] doubleArray43 = empiricalDistributionImpl1.getUpperBounds();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary44 = empiricalDistributionImpl1.getSampleStats();
        double double45 = empiricalDistributionImpl1.getNextValue();
        double[] doubleArray46 = empiricalDistributionImpl1.getUpperBounds();
        double[] doubleArray47 = empiricalDistributionImpl1.getUpperBounds();
        java.util.List list48 = empiricalDistributionImpl1.getBinStats();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 35 + "'", int2 == 35);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(statisticalSummary7);
        org.junit.Assert.assertNotNull(statisticalSummary8);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
        org.junit.Assert.assertNull(statisticalSummary14);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 1.0]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 35 + "'", int32 == 35);
        org.junit.Assert.assertNull(statisticalSummary33);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 35 + "'", int41 == 35);
        org.junit.Assert.assertNotNull(statisticalSummary42);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 1.0]");
        org.junit.Assert.assertNotNull(statisticalSummary44);
// flaky:         org.junit.Assert.assertTrue("'" + double45 + "' != '" + 10.0d + "'", double45 == 10.0d);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 1.0]");
        org.junit.Assert.assertNotNull(list48);
    }

    @Test
    public void test1876() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1876");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        int int9 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray10 = empiricalDistributionImpl1.getUpperBounds();
        int int11 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl13 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (short) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl15 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray20 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl15.load(doubleArray20);
        double[] doubleArray22 = empiricalDistributionImpl15.getUpperBounds();
        int int23 = empiricalDistributionImpl15.getBinCount();
        double[] doubleArray24 = empiricalDistributionImpl15.getUpperBounds();
        empiricalDistributionImpl13.load(doubleArray24);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl27 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl29 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray34 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl29.load(doubleArray34);
        double[] doubleArray36 = empiricalDistributionImpl29.getUpperBounds();
        empiricalDistributionImpl27.load(doubleArray36);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl39 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int40 = empiricalDistributionImpl39.getBinCount();
        double[] doubleArray42 = new double[] { 100.0d };
        empiricalDistributionImpl39.load(doubleArray42);
        empiricalDistributionImpl27.load(doubleArray42);
        double[] doubleArray45 = empiricalDistributionImpl27.getUpperBounds();
        empiricalDistributionImpl13.load(doubleArray45);
        empiricalDistributionImpl1.load(doubleArray45);
        java.util.List list48 = empiricalDistributionImpl1.getBinStats();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 35 + "'", int11 == 35);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 35 + "'", int23 == 35);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 35 + "'", int40 == 35);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[100.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(list48);
    }

    @Test
    public void test1877() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1877");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray8 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl3.load(doubleArray8);
        double[] doubleArray10 = empiricalDistributionImpl3.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray10);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl13 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int14 = empiricalDistributionImpl13.getBinCount();
        double[] doubleArray16 = new double[] { 100.0d };
        empiricalDistributionImpl13.load(doubleArray16);
        empiricalDistributionImpl1.load(doubleArray16);
        double[] doubleArray19 = empiricalDistributionImpl1.getUpperBounds();
        java.util.List list20 = empiricalDistributionImpl1.getBinStats();
        double[] doubleArray21 = empiricalDistributionImpl1.getUpperBounds();
        int int22 = empiricalDistributionImpl1.getBinCount();
        java.lang.Class<?> wildcardClass23 = empiricalDistributionImpl1.getClass();
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 35 + "'", int14 == 35);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[100.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(list20);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 35 + "'", int22 == 35);
        org.junit.Assert.assertNotNull(wildcardClass23);
    }

    @Test
    public void test1878() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1878");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        java.util.List list9 = empiricalDistributionImpl1.getBinStats();
        boolean boolean10 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary11 = empiricalDistributionImpl1.getSampleStats();
        int int12 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl14 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl16 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int17 = empiricalDistributionImpl16.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary18 = empiricalDistributionImpl16.getSampleStats();
        double[] doubleArray22 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl16.load(doubleArray22);
        empiricalDistributionImpl14.load(doubleArray22);
        empiricalDistributionImpl1.load(doubleArray22);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary26 = empiricalDistributionImpl1.getSampleStats();
        int int27 = empiricalDistributionImpl1.getBinCount();
        java.util.List list28 = empiricalDistributionImpl1.getBinStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl30 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray35 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl30.load(doubleArray35);
        double[] doubleArray37 = empiricalDistributionImpl30.getUpperBounds();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl39 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl41 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int42 = empiricalDistributionImpl41.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary43 = empiricalDistributionImpl41.getSampleStats();
        double[] doubleArray47 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl41.load(doubleArray47);
        empiricalDistributionImpl39.load(doubleArray47);
        empiricalDistributionImpl30.load(doubleArray47);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl52 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl54 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray59 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl54.load(doubleArray59);
        double[] doubleArray61 = empiricalDistributionImpl54.getUpperBounds();
        empiricalDistributionImpl52.load(doubleArray61);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl64 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int65 = empiricalDistributionImpl64.getBinCount();
        double[] doubleArray67 = new double[] { 100.0d };
        empiricalDistributionImpl64.load(doubleArray67);
        empiricalDistributionImpl52.load(doubleArray67);
        empiricalDistributionImpl30.load(doubleArray67);
        empiricalDistributionImpl1.load(doubleArray67);
        double[] doubleArray72 = empiricalDistributionImpl1.getUpperBounds();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(list9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(statisticalSummary11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 35 + "'", int12 == 35);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 35 + "'", int17 == 35);
        org.junit.Assert.assertNull(statisticalSummary18);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(statisticalSummary26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 35 + "'", int27 == 35);
        org.junit.Assert.assertNotNull(list28);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 35 + "'", int42 == 35);
        org.junit.Assert.assertNull(statisticalSummary43);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 35 + "'", int65 == 35);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[100.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
    }

    @Test
    public void test1879() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1879");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl10 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl12 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int13 = empiricalDistributionImpl12.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary14 = empiricalDistributionImpl12.getSampleStats();
        double[] doubleArray18 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl12.load(doubleArray18);
        empiricalDistributionImpl10.load(doubleArray18);
        empiricalDistributionImpl1.load(doubleArray18);
        double double22 = empiricalDistributionImpl1.getNextValue();
        java.util.List list23 = empiricalDistributionImpl1.getBinStats();
        int int24 = empiricalDistributionImpl1.getBinCount();
        java.util.List list25 = empiricalDistributionImpl1.getBinStats();
        double double26 = empiricalDistributionImpl1.getNextValue();
        double double27 = empiricalDistributionImpl1.getNextValue();
        int int28 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl30 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '4');
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary31 = empiricalDistributionImpl30.getSampleStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl33 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int34 = empiricalDistributionImpl33.getBinCount();
        double[] doubleArray36 = new double[] { 100.0d };
        empiricalDistributionImpl33.load(doubleArray36);
        boolean boolean38 = empiricalDistributionImpl33.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary39 = empiricalDistributionImpl33.getSampleStats();
        boolean boolean40 = empiricalDistributionImpl33.isLoaded();
        boolean boolean41 = empiricalDistributionImpl33.isLoaded();
        double[] doubleArray42 = empiricalDistributionImpl33.getUpperBounds();
        empiricalDistributionImpl30.load(doubleArray42);
        empiricalDistributionImpl1.load(doubleArray42);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl46 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl48 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int49 = empiricalDistributionImpl48.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary50 = empiricalDistributionImpl48.getSampleStats();
        double[] doubleArray54 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl48.load(doubleArray54);
        empiricalDistributionImpl46.load(doubleArray54);
        double double57 = empiricalDistributionImpl46.getNextValue();
        double[] doubleArray58 = empiricalDistributionImpl46.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray58);
        boolean boolean60 = empiricalDistributionImpl1.isLoaded();
        java.util.List list61 = empiricalDistributionImpl1.getBinStats();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
        org.junit.Assert.assertNull(statisticalSummary14);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double22 + "' != '" + 10.0d + "'", double22 == 10.0d);
        org.junit.Assert.assertNotNull(list23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 35 + "'", int24 == 35);
        org.junit.Assert.assertNotNull(list25);
// flaky:         org.junit.Assert.assertTrue("'" + double26 + "' != '" + 10.0d + "'", double26 == 10.0d);
// flaky:         org.junit.Assert.assertTrue("'" + double27 + "' != '" + 1.0d + "'", double27 == 1.0d);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 35 + "'", int28 == 35);
        org.junit.Assert.assertNull(statisticalSummary31);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 35 + "'", int34 == 35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(statisticalSummary39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 35 + "'", int49 == 35);
        org.junit.Assert.assertNull(statisticalSummary50);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double57 + "' != '" + 32.0d + "'", double57 == 32.0d);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(list61);
    }

    @Test
    public void test1880() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1880");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        double double12 = empiricalDistributionImpl1.getNextValue();
        java.util.List list13 = empiricalDistributionImpl1.getBinStats();
        double[] doubleArray14 = empiricalDistributionImpl1.getUpperBounds();
        int int15 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary16 = empiricalDistributionImpl1.getSampleStats();
        boolean boolean17 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl19 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        boolean boolean20 = empiricalDistributionImpl19.isLoaded();
        int int21 = empiricalDistributionImpl19.getBinCount();
        boolean boolean22 = empiricalDistributionImpl19.isLoaded();
        java.util.List list23 = empiricalDistributionImpl19.getBinStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl25 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl27 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int28 = empiricalDistributionImpl27.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary29 = empiricalDistributionImpl27.getSampleStats();
        double[] doubleArray33 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl27.load(doubleArray33);
        empiricalDistributionImpl25.load(doubleArray33);
        double[] doubleArray39 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl25.load(doubleArray39);
        empiricalDistributionImpl19.load(doubleArray39);
        empiricalDistributionImpl1.load(doubleArray39);
        boolean boolean43 = empiricalDistributionImpl1.isLoaded();
        java.util.List list44 = empiricalDistributionImpl1.getBinStats();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertNotNull(list13);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 100 + "'", int15 == 100);
        org.junit.Assert.assertNotNull(statisticalSummary16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 35 + "'", int21 == 35);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(list23);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 35 + "'", int28 == 35);
        org.junit.Assert.assertNull(statisticalSummary29);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(list44);
    }

    @Test
    public void test1881() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1881");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        int int9 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray10 = empiricalDistributionImpl1.getUpperBounds();
        int int11 = empiricalDistributionImpl1.getBinCount();
        java.util.List list12 = empiricalDistributionImpl1.getBinStats();
        int int13 = empiricalDistributionImpl1.getBinCount();
        double double14 = empiricalDistributionImpl1.getNextValue();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl16 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int17 = empiricalDistributionImpl16.getBinCount();
        double[] doubleArray19 = new double[] { 100.0d };
        empiricalDistributionImpl16.load(doubleArray19);
        boolean boolean21 = empiricalDistributionImpl16.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary22 = empiricalDistributionImpl16.getSampleStats();
        boolean boolean23 = empiricalDistributionImpl16.isLoaded();
        boolean boolean24 = empiricalDistributionImpl16.isLoaded();
        double[] doubleArray25 = empiricalDistributionImpl16.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray25);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary27 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary28 = empiricalDistributionImpl1.getSampleStats();
        double double29 = empiricalDistributionImpl1.getNextValue();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 35 + "'", int11 == 35);
        org.junit.Assert.assertNotNull(list12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
// flaky:         org.junit.Assert.assertTrue("'" + double14 + "' != '" + 10.0d + "'", double14 == 10.0d);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 35 + "'", int17 == 35);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(statisticalSummary22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(statisticalSummary27);
        org.junit.Assert.assertNotNull(statisticalSummary28);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 1.0d + "'", double29 == 1.0d);
    }

    @Test
    public void test1882() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1882");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        int int12 = empiricalDistributionImpl1.getBinCount();
        java.util.List list13 = empiricalDistributionImpl1.getBinStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary14 = empiricalDistributionImpl1.getSampleStats();
        boolean boolean15 = empiricalDistributionImpl1.isLoaded();
        int int16 = empiricalDistributionImpl1.getBinCount();
        boolean boolean17 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl19 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray24 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl19.load(doubleArray24);
        double[] doubleArray26 = empiricalDistributionImpl19.getUpperBounds();
        int int27 = empiricalDistributionImpl19.getBinCount();
        double[] doubleArray28 = empiricalDistributionImpl19.getUpperBounds();
        int int29 = empiricalDistributionImpl19.getBinCount();
        java.util.List list30 = empiricalDistributionImpl19.getBinStats();
        int int31 = empiricalDistributionImpl19.getBinCount();
        double double32 = empiricalDistributionImpl19.getNextValue();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl34 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int35 = empiricalDistributionImpl34.getBinCount();
        double[] doubleArray37 = new double[] { 100.0d };
        empiricalDistributionImpl34.load(doubleArray37);
        boolean boolean39 = empiricalDistributionImpl34.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary40 = empiricalDistributionImpl34.getSampleStats();
        boolean boolean41 = empiricalDistributionImpl34.isLoaded();
        boolean boolean42 = empiricalDistributionImpl34.isLoaded();
        double[] doubleArray43 = empiricalDistributionImpl34.getUpperBounds();
        empiricalDistributionImpl19.load(doubleArray43);
        empiricalDistributionImpl1.load(doubleArray43);
        int int46 = empiricalDistributionImpl1.getBinCount();
        boolean boolean47 = empiricalDistributionImpl1.isLoaded();
        java.net.URL uRL48 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(uRL48);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 100 + "'", int12 == 100);
        org.junit.Assert.assertNotNull(list13);
        org.junit.Assert.assertNotNull(statisticalSummary14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 100 + "'", int16 == 100);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 35 + "'", int27 == 35);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 35 + "'", int29 == 35);
        org.junit.Assert.assertNotNull(list30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 35 + "'", int31 == 35);
// flaky:         org.junit.Assert.assertTrue("'" + double32 + "' != '" + 10.0d + "'", double32 == 10.0d);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 35 + "'", int35 == 35);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(statisticalSummary40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 100 + "'", int46 == 100);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
    }

    @Test
    public void test1883() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1883");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        int int9 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray10 = empiricalDistributionImpl1.getUpperBounds();
        int int11 = empiricalDistributionImpl1.getBinCount();
        java.util.List list12 = empiricalDistributionImpl1.getBinStats();
        boolean boolean13 = empiricalDistributionImpl1.isLoaded();
        double[] doubleArray14 = empiricalDistributionImpl1.getUpperBounds();
        boolean boolean15 = empiricalDistributionImpl1.isLoaded();
        boolean boolean16 = empiricalDistributionImpl1.isLoaded();
        double double17 = empiricalDistributionImpl1.getNextValue();
        int int18 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray19 = empiricalDistributionImpl1.getUpperBounds();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 35 + "'", int11 == 35);
        org.junit.Assert.assertNotNull(list12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
// flaky:         org.junit.Assert.assertTrue("'" + double17 + "' != '" + 1.0d + "'", double17 == 1.0d);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 35 + "'", int18 == 35);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
    }

    @Test
    public void test1884() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1884");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int2 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray4 = new double[] { 100.0d };
        empiricalDistributionImpl1.load(doubleArray4);
        boolean boolean6 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary7 = empiricalDistributionImpl1.getSampleStats();
        boolean boolean8 = empiricalDistributionImpl1.isLoaded();
        boolean boolean9 = empiricalDistributionImpl1.isLoaded();
        double double10 = empiricalDistributionImpl1.getNextValue();
        boolean boolean11 = empiricalDistributionImpl1.isLoaded();
        boolean boolean12 = empiricalDistributionImpl1.isLoaded();
        double[] doubleArray13 = empiricalDistributionImpl1.getUpperBounds();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary14 = empiricalDistributionImpl1.getSampleStats();
        double double15 = empiricalDistributionImpl1.getNextValue();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 35 + "'", int2 == 35);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(statisticalSummary7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 100.0d + "'", double10 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(statisticalSummary14);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 100.0d + "'", double15 == 100.0d);
    }

    @Test
    public void test1885() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1885");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int2 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray4 = new double[] { 100.0d };
        empiricalDistributionImpl1.load(doubleArray4);
        boolean boolean6 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary7 = empiricalDistributionImpl1.getSampleStats();
        boolean boolean8 = empiricalDistributionImpl1.isLoaded();
        boolean boolean9 = empiricalDistributionImpl1.isLoaded();
        boolean boolean10 = empiricalDistributionImpl1.isLoaded();
        int int11 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl13 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl15 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int16 = empiricalDistributionImpl15.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary17 = empiricalDistributionImpl15.getSampleStats();
        double[] doubleArray21 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl15.load(doubleArray21);
        empiricalDistributionImpl13.load(doubleArray21);
        double double24 = empiricalDistributionImpl13.getNextValue();
        java.util.List list25 = empiricalDistributionImpl13.getBinStats();
        double double26 = empiricalDistributionImpl13.getNextValue();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl28 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int29 = empiricalDistributionImpl28.getBinCount();
        double[] doubleArray31 = new double[] { 100.0d };
        empiricalDistributionImpl28.load(doubleArray31);
        boolean boolean33 = empiricalDistributionImpl28.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary34 = empiricalDistributionImpl28.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary35 = empiricalDistributionImpl28.getSampleStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl37 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl39 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int40 = empiricalDistributionImpl39.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary41 = empiricalDistributionImpl39.getSampleStats();
        double[] doubleArray45 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl39.load(doubleArray45);
        empiricalDistributionImpl37.load(doubleArray45);
        double[] doubleArray51 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl37.load(doubleArray51);
        empiricalDistributionImpl28.load(doubleArray51);
        double[] doubleArray54 = empiricalDistributionImpl28.getUpperBounds();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl56 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl58 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int59 = empiricalDistributionImpl58.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary60 = empiricalDistributionImpl58.getSampleStats();
        double[] doubleArray64 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl58.load(doubleArray64);
        empiricalDistributionImpl56.load(doubleArray64);
        empiricalDistributionImpl28.load(doubleArray64);
        int int68 = empiricalDistributionImpl28.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary69 = empiricalDistributionImpl28.getSampleStats();
        double[] doubleArray70 = empiricalDistributionImpl28.getUpperBounds();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary71 = empiricalDistributionImpl28.getSampleStats();
        double double72 = empiricalDistributionImpl28.getNextValue();
        double[] doubleArray73 = empiricalDistributionImpl28.getUpperBounds();
        empiricalDistributionImpl13.load(doubleArray73);
        empiricalDistributionImpl1.load(doubleArray73);
        java.util.List list76 = empiricalDistributionImpl1.getBinStats();
        double[] doubleArray77 = empiricalDistributionImpl1.getUpperBounds();
        java.io.File file78 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(file78);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 35 + "'", int2 == 35);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(statisticalSummary7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 35 + "'", int11 == 35);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 35 + "'", int16 == 35);
        org.junit.Assert.assertNull(statisticalSummary17);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double24 + "' != '" + 1.0d + "'", double24 == 1.0d);
        org.junit.Assert.assertNotNull(list25);
// flaky:         org.junit.Assert.assertTrue("'" + double26 + "' != '" + 10.0d + "'", double26 == 10.0d);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 35 + "'", int29 == 35);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(statisticalSummary34);
        org.junit.Assert.assertNotNull(statisticalSummary35);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 35 + "'", int40 == 35);
        org.junit.Assert.assertNull(statisticalSummary41);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 1.0]");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 35 + "'", int59 == 35);
        org.junit.Assert.assertNull(statisticalSummary60);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 35 + "'", int68 == 35);
        org.junit.Assert.assertNotNull(statisticalSummary69);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 1.0]");
        org.junit.Assert.assertNotNull(statisticalSummary71);
// flaky:         org.junit.Assert.assertTrue("'" + double72 + "' != '" + 10.0d + "'", double72 == 10.0d);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 1.0]");
        org.junit.Assert.assertNotNull(list76);
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[0.2857142857142857, 0.2857142857142857, 0.2857142857142857, 0.2857142857142857, 0.2857142857142857, 0.2857142857142857, 0.2857142857142857, 0.2857142857142857, 0.2857142857142857, 0.2857142857142857, 0.2857142857142857, 0.2857142857142857, 0.2857142857142857, 0.2857142857142857, 0.2857142857142857, 0.2857142857142857, 0.2857142857142857, 0.9714285714285714, 0.9714285714285714, 0.9714285714285714, 0.9714285714285714, 0.9714285714285714, 0.9714285714285714, 0.9714285714285714, 0.9714285714285714, 0.9714285714285714, 0.9714285714285714, 0.9714285714285714, 0.9714285714285714, 0.9714285714285714, 0.9714285714285714, 0.9714285714285714, 0.9714285714285714, 0.9714285714285714, 1.0]");
    }

    @Test
    public void test1886() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1886");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        double[] doubleArray15 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl1.load(doubleArray15);
        double[] doubleArray17 = empiricalDistributionImpl1.getUpperBounds();
        double double18 = empiricalDistributionImpl1.getNextValue();
        boolean boolean19 = empiricalDistributionImpl1.isLoaded();
        int int20 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray21 = empiricalDistributionImpl1.getUpperBounds();
        java.util.List list22 = empiricalDistributionImpl1.getBinStats();
        double double23 = empiricalDistributionImpl1.getNextValue();
        java.net.URL uRL24 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(uRL24);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double18 + "' != '" + (-0.9373757640075958d) + "'", double18 == (-0.9373757640075958d));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0]");
        org.junit.Assert.assertNotNull(list22);
// flaky:         org.junit.Assert.assertTrue("'" + double23 + "' != '" + 1.384152833667046d + "'", double23 == 1.384152833667046d);
    }

    @Test
    public void test1887() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1887");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl10 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl12 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int13 = empiricalDistributionImpl12.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary14 = empiricalDistributionImpl12.getSampleStats();
        double[] doubleArray18 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl12.load(doubleArray18);
        empiricalDistributionImpl10.load(doubleArray18);
        empiricalDistributionImpl1.load(doubleArray18);
        double double22 = empiricalDistributionImpl1.getNextValue();
        double double23 = empiricalDistributionImpl1.getNextValue();
        double[] doubleArray24 = empiricalDistributionImpl1.getUpperBounds();
        boolean boolean25 = empiricalDistributionImpl1.isLoaded();
        double double26 = empiricalDistributionImpl1.getNextValue();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
        org.junit.Assert.assertNull(statisticalSummary14);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double22 + "' != '" + 10.0d + "'", double22 == 10.0d);
// flaky:         org.junit.Assert.assertTrue("'" + double23 + "' != '" + 10.0d + "'", double23 == 10.0d);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
// flaky:         org.junit.Assert.assertTrue("'" + double26 + "' != '" + 10.0d + "'", double26 == 10.0d);
    }

    @Test
    public void test1888() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1888");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int2 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray4 = new double[] { 100.0d };
        empiricalDistributionImpl1.load(doubleArray4);
        boolean boolean6 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary7 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary8 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary9 = empiricalDistributionImpl1.getSampleStats();
        double[] doubleArray10 = empiricalDistributionImpl1.getUpperBounds();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl12 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl14 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int15 = empiricalDistributionImpl14.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary16 = empiricalDistributionImpl14.getSampleStats();
        double[] doubleArray20 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl14.load(doubleArray20);
        empiricalDistributionImpl12.load(doubleArray20);
        double[] doubleArray26 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl12.load(doubleArray26);
        double double28 = empiricalDistributionImpl12.getNextValue();
        int int29 = empiricalDistributionImpl12.getBinCount();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl31 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        boolean boolean32 = empiricalDistributionImpl31.isLoaded();
        boolean boolean33 = empiricalDistributionImpl31.isLoaded();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl35 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl37 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int38 = empiricalDistributionImpl37.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary39 = empiricalDistributionImpl37.getSampleStats();
        double[] doubleArray43 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl37.load(doubleArray43);
        empiricalDistributionImpl35.load(doubleArray43);
        double[] doubleArray49 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl35.load(doubleArray49);
        empiricalDistributionImpl31.load(doubleArray49);
        empiricalDistributionImpl12.load(doubleArray49);
        empiricalDistributionImpl1.load(doubleArray49);
        int int54 = empiricalDistributionImpl1.getBinCount();
        double double55 = empiricalDistributionImpl1.getNextValue();
        int int56 = empiricalDistributionImpl1.getBinCount();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 35 + "'", int2 == 35);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(statisticalSummary7);
        org.junit.Assert.assertNotNull(statisticalSummary8);
        org.junit.Assert.assertNotNull(statisticalSummary9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 35 + "'", int15 == 35);
        org.junit.Assert.assertNull(statisticalSummary16);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[-1.0, 0.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double28 + "' != '" + (-0.19689172840371785d) + "'", double28 == (-0.19689172840371785d));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 35 + "'", int38 == 35);
        org.junit.Assert.assertNull(statisticalSummary39);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 35 + "'", int54 == 35);
// flaky:         org.junit.Assert.assertTrue("'" + double55 + "' != '" + 1.0d + "'", double55 == 1.0d);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 35 + "'", int56 == 35);
    }

    @Test
    public void test1889() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1889");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        double double12 = empiricalDistributionImpl1.getNextValue();
        java.util.List list13 = empiricalDistributionImpl1.getBinStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary14 = empiricalDistributionImpl1.getSampleStats();
        java.lang.Class<?> wildcardClass15 = empiricalDistributionImpl1.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double12 + "' != '" + 32.0d + "'", double12 == 32.0d);
        org.junit.Assert.assertNotNull(list13);
        org.junit.Assert.assertNotNull(statisticalSummary14);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test1890() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1890");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int2 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray4 = new double[] { 100.0d };
        empiricalDistributionImpl1.load(doubleArray4);
        boolean boolean6 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary7 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary8 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl10 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl12 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int13 = empiricalDistributionImpl12.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary14 = empiricalDistributionImpl12.getSampleStats();
        double[] doubleArray18 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl12.load(doubleArray18);
        empiricalDistributionImpl10.load(doubleArray18);
        double[] doubleArray24 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl10.load(doubleArray24);
        empiricalDistributionImpl1.load(doubleArray24);
        double[] doubleArray27 = empiricalDistributionImpl1.getUpperBounds();
        java.io.File file28 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(file28);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 35 + "'", int2 == 35);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(statisticalSummary7);
        org.junit.Assert.assertNotNull(statisticalSummary8);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
        org.junit.Assert.assertNull(statisticalSummary14);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 1.0]");
    }

    @Test
    public void test1891() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1891");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (short) 100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        double[] doubleArray6 = new double[] { 100.0d };
        empiricalDistributionImpl3.load(doubleArray6);
        boolean boolean8 = empiricalDistributionImpl3.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary9 = empiricalDistributionImpl3.getSampleStats();
        boolean boolean10 = empiricalDistributionImpl3.isLoaded();
        boolean boolean11 = empiricalDistributionImpl3.isLoaded();
        java.util.List list12 = empiricalDistributionImpl3.getBinStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl14 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray19 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl14.load(doubleArray19);
        double[] doubleArray21 = empiricalDistributionImpl14.getUpperBounds();
        int int22 = empiricalDistributionImpl14.getBinCount();
        double[] doubleArray23 = empiricalDistributionImpl14.getUpperBounds();
        empiricalDistributionImpl3.load(doubleArray23);
        empiricalDistributionImpl1.load(doubleArray23);
        double double26 = empiricalDistributionImpl1.getNextValue();
        double double27 = empiricalDistributionImpl1.getNextValue();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary28 = empiricalDistributionImpl1.getSampleStats();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(statisticalSummary9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(list12);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 35 + "'", int22 == 35);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double26 + "' != '" + 0.75d + "'", double26 == 0.75d);
// flaky:         org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.75d + "'", double27 == 0.75d);
        org.junit.Assert.assertNotNull(statisticalSummary28);
    }

    @Test
    public void test1892() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1892");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary9 = empiricalDistributionImpl1.getSampleStats();
        boolean boolean10 = empiricalDistributionImpl1.isLoaded();
        java.util.List list11 = empiricalDistributionImpl1.getBinStats();
        boolean boolean12 = empiricalDistributionImpl1.isLoaded();
        int int13 = empiricalDistributionImpl1.getBinCount();
        java.util.List list14 = empiricalDistributionImpl1.getBinStats();
        java.util.List list15 = empiricalDistributionImpl1.getBinStats();
        boolean boolean16 = empiricalDistributionImpl1.isLoaded();
        double double17 = empiricalDistributionImpl1.getNextValue();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(statisticalSummary9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(list11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
        org.junit.Assert.assertNotNull(list14);
        org.junit.Assert.assertNotNull(list15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
// flaky:         org.junit.Assert.assertTrue("'" + double17 + "' != '" + 1.0d + "'", double17 == 1.0d);
    }

    @Test
    public void test1893() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1893");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int2 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray4 = new double[] { 100.0d };
        empiricalDistributionImpl1.load(doubleArray4);
        boolean boolean6 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary7 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary8 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl10 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl12 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int13 = empiricalDistributionImpl12.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary14 = empiricalDistributionImpl12.getSampleStats();
        double[] doubleArray18 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl12.load(doubleArray18);
        empiricalDistributionImpl10.load(doubleArray18);
        double[] doubleArray24 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl10.load(doubleArray24);
        empiricalDistributionImpl1.load(doubleArray24);
        double[] doubleArray27 = empiricalDistributionImpl1.getUpperBounds();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl29 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl31 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int32 = empiricalDistributionImpl31.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary33 = empiricalDistributionImpl31.getSampleStats();
        double[] doubleArray37 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl31.load(doubleArray37);
        empiricalDistributionImpl29.load(doubleArray37);
        empiricalDistributionImpl1.load(doubleArray37);
        int int41 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary42 = empiricalDistributionImpl1.getSampleStats();
        boolean boolean43 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl45 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int46 = empiricalDistributionImpl45.getBinCount();
        double[] doubleArray48 = new double[] { 100.0d };
        empiricalDistributionImpl45.load(doubleArray48);
        boolean boolean50 = empiricalDistributionImpl45.isLoaded();
        double[] doubleArray51 = empiricalDistributionImpl45.getUpperBounds();
        double double52 = empiricalDistributionImpl45.getNextValue();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary53 = empiricalDistributionImpl45.getSampleStats();
        int int54 = empiricalDistributionImpl45.getBinCount();
        double[] doubleArray55 = empiricalDistributionImpl45.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray55);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 35 + "'", int2 == 35);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(statisticalSummary7);
        org.junit.Assert.assertNotNull(statisticalSummary8);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
        org.junit.Assert.assertNull(statisticalSummary14);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 1.0]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 35 + "'", int32 == 35);
        org.junit.Assert.assertNull(statisticalSummary33);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 35 + "'", int41 == 35);
        org.junit.Assert.assertNotNull(statisticalSummary42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 35 + "'", int46 == 35);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 100.0d + "'", double52 == 100.0d);
        org.junit.Assert.assertNotNull(statisticalSummary53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 35 + "'", int54 == 35);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
    }

    @Test
    public void test1894() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1894");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        int int9 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl11 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl13 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray18 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl13.load(doubleArray18);
        double[] doubleArray20 = empiricalDistributionImpl13.getUpperBounds();
        empiricalDistributionImpl11.load(doubleArray20);
        empiricalDistributionImpl1.load(doubleArray20);
        boolean boolean23 = empiricalDistributionImpl1.isLoaded();
        java.net.URL uRL24 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(uRL24);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
    }

    @Test
    public void test1895() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1895");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        int int12 = empiricalDistributionImpl1.getBinCount();
        java.util.List list13 = empiricalDistributionImpl1.getBinStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl15 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray20 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl15.load(doubleArray20);
        double[] doubleArray22 = empiricalDistributionImpl15.getUpperBounds();
        java.util.List list23 = empiricalDistributionImpl15.getBinStats();
        boolean boolean24 = empiricalDistributionImpl15.isLoaded();
        java.util.List list25 = empiricalDistributionImpl15.getBinStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary26 = empiricalDistributionImpl15.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary27 = empiricalDistributionImpl15.getSampleStats();
        int int28 = empiricalDistributionImpl15.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary29 = empiricalDistributionImpl15.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary30 = empiricalDistributionImpl15.getSampleStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl32 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int33 = empiricalDistributionImpl32.getBinCount();
        double[] doubleArray35 = new double[] { 100.0d };
        empiricalDistributionImpl32.load(doubleArray35);
        boolean boolean37 = empiricalDistributionImpl32.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary38 = empiricalDistributionImpl32.getSampleStats();
        boolean boolean39 = empiricalDistributionImpl32.isLoaded();
        boolean boolean40 = empiricalDistributionImpl32.isLoaded();
        double double41 = empiricalDistributionImpl32.getNextValue();
        boolean boolean42 = empiricalDistributionImpl32.isLoaded();
        boolean boolean43 = empiricalDistributionImpl32.isLoaded();
        double[] doubleArray44 = empiricalDistributionImpl32.getUpperBounds();
        empiricalDistributionImpl15.load(doubleArray44);
        empiricalDistributionImpl1.load(doubleArray44);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 100 + "'", int12 == 100);
        org.junit.Assert.assertNotNull(list13);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(list23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(list25);
        org.junit.Assert.assertNotNull(statisticalSummary26);
        org.junit.Assert.assertNotNull(statisticalSummary27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 35 + "'", int28 == 35);
        org.junit.Assert.assertNotNull(statisticalSummary29);
        org.junit.Assert.assertNotNull(statisticalSummary30);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 35 + "'", int33 == 35);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(statisticalSummary38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 100.0d + "'", double41 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
    }

    @Test
    public void test1896() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1896");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int2 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray4 = new double[] { 100.0d };
        empiricalDistributionImpl1.load(doubleArray4);
        boolean boolean6 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary7 = empiricalDistributionImpl1.getSampleStats();
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        boolean boolean9 = empiricalDistributionImpl1.isLoaded();
        double double10 = empiricalDistributionImpl1.getNextValue();
        java.util.List list11 = empiricalDistributionImpl1.getBinStats();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 35 + "'", int2 == 35);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(statisticalSummary7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 100.0d + "'", double10 == 100.0d);
        org.junit.Assert.assertNotNull(list11);
    }

    @Test
    public void test1897() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1897");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int2 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray4 = new double[] { 100.0d };
        empiricalDistributionImpl1.load(doubleArray4);
        boolean boolean6 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary7 = empiricalDistributionImpl1.getSampleStats();
        boolean boolean8 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary9 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary10 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary11 = empiricalDistributionImpl1.getSampleStats();
        java.util.List list12 = empiricalDistributionImpl1.getBinStats();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 35 + "'", int2 == 35);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(statisticalSummary7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(statisticalSummary9);
        org.junit.Assert.assertNotNull(statisticalSummary10);
        org.junit.Assert.assertNotNull(statisticalSummary11);
        org.junit.Assert.assertNotNull(list12);
    }

    @Test
    public void test1898() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1898");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        double double12 = empiricalDistributionImpl1.getNextValue();
        java.util.List list13 = empiricalDistributionImpl1.getBinStats();
        double double14 = empiricalDistributionImpl1.getNextValue();
        int int15 = empiricalDistributionImpl1.getBinCount();
        boolean boolean16 = empiricalDistributionImpl1.isLoaded();
        boolean boolean17 = empiricalDistributionImpl1.isLoaded();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double12 + "' != '" + 32.0d + "'", double12 == 32.0d);
        org.junit.Assert.assertNotNull(list13);
// flaky:         org.junit.Assert.assertTrue("'" + double14 + "' != '" + 1.0d + "'", double14 == 1.0d);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 100 + "'", int15 == 100);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
    }

    @Test
    public void test1899() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1899");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int2 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray4 = new double[] { 100.0d };
        empiricalDistributionImpl1.load(doubleArray4);
        boolean boolean6 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary7 = empiricalDistributionImpl1.getSampleStats();
        boolean boolean8 = empiricalDistributionImpl1.isLoaded();
        boolean boolean9 = empiricalDistributionImpl1.isLoaded();
        double[] doubleArray10 = empiricalDistributionImpl1.getUpperBounds();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl12 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (short) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl14 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray19 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl14.load(doubleArray19);
        double[] doubleArray21 = empiricalDistributionImpl14.getUpperBounds();
        int int22 = empiricalDistributionImpl14.getBinCount();
        double[] doubleArray23 = empiricalDistributionImpl14.getUpperBounds();
        empiricalDistributionImpl12.load(doubleArray23);
        empiricalDistributionImpl1.load(doubleArray23);
        double double26 = empiricalDistributionImpl1.getNextValue();
        double double27 = empiricalDistributionImpl1.getNextValue();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 35 + "'", int2 == 35);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(statisticalSummary7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 35 + "'", int22 == 35);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double26 + "' != '" + 0.75d + "'", double26 == 0.75d);
// flaky:         org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.75d + "'", double27 == 0.75d);
    }

    @Test
    public void test1900() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1900");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) ' ');
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary2 = empiricalDistributionImpl1.getSampleStats();
        java.util.List list3 = empiricalDistributionImpl1.getBinStats();
        org.junit.Assert.assertNull(statisticalSummary2);
        org.junit.Assert.assertNotNull(list3);
    }

    @Test
    public void test1901() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1901");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        java.util.List list8 = empiricalDistributionImpl1.getBinStats();
        boolean boolean9 = empiricalDistributionImpl1.isLoaded();
        java.util.List list10 = empiricalDistributionImpl1.getBinStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary11 = empiricalDistributionImpl1.getSampleStats();
        double[] doubleArray12 = empiricalDistributionImpl1.getUpperBounds();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary13 = empiricalDistributionImpl1.getSampleStats();
        java.net.URL uRL14 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(uRL14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(list8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(list10);
        org.junit.Assert.assertNotNull(statisticalSummary11);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(statisticalSummary13);
    }

    @Test
    public void test1902() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1902");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int2 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray4 = new double[] { 100.0d };
        empiricalDistributionImpl1.load(doubleArray4);
        boolean boolean6 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary7 = empiricalDistributionImpl1.getSampleStats();
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary9 = empiricalDistributionImpl1.getSampleStats();
        double double10 = empiricalDistributionImpl1.getNextValue();
        double double11 = empiricalDistributionImpl1.getNextValue();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 35 + "'", int2 == 35);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(statisticalSummary7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(statisticalSummary9);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 100.0d + "'", double10 == 100.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
    }

    @Test
    public void test1903() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1903");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl10 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl12 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int13 = empiricalDistributionImpl12.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary14 = empiricalDistributionImpl12.getSampleStats();
        double[] doubleArray18 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl12.load(doubleArray18);
        empiricalDistributionImpl10.load(doubleArray18);
        empiricalDistributionImpl1.load(doubleArray18);
        double double22 = empiricalDistributionImpl1.getNextValue();
        java.util.List list23 = empiricalDistributionImpl1.getBinStats();
        java.util.List list24 = empiricalDistributionImpl1.getBinStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl26 = new org.apache.commons.math.random.EmpiricalDistributionImpl(10);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl28 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int29 = empiricalDistributionImpl28.getBinCount();
        double[] doubleArray31 = new double[] { 100.0d };
        empiricalDistributionImpl28.load(doubleArray31);
        boolean boolean33 = empiricalDistributionImpl28.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary34 = empiricalDistributionImpl28.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary35 = empiricalDistributionImpl28.getSampleStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl37 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl39 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int40 = empiricalDistributionImpl39.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary41 = empiricalDistributionImpl39.getSampleStats();
        double[] doubleArray45 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl39.load(doubleArray45);
        empiricalDistributionImpl37.load(doubleArray45);
        double[] doubleArray51 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl37.load(doubleArray51);
        empiricalDistributionImpl28.load(doubleArray51);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl55 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl57 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int58 = empiricalDistributionImpl57.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary59 = empiricalDistributionImpl57.getSampleStats();
        double[] doubleArray63 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl57.load(doubleArray63);
        empiricalDistributionImpl55.load(doubleArray63);
        empiricalDistributionImpl28.load(doubleArray63);
        empiricalDistributionImpl26.load(doubleArray63);
        double[] doubleArray68 = empiricalDistributionImpl26.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray68);
        java.util.List list70 = empiricalDistributionImpl1.getBinStats();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
        org.junit.Assert.assertNull(statisticalSummary14);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double22 + "' != '" + 32.0d + "'", double22 == 32.0d);
        org.junit.Assert.assertNotNull(list23);
        org.junit.Assert.assertNotNull(list24);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 35 + "'", int29 == 35);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(statisticalSummary34);
        org.junit.Assert.assertNotNull(statisticalSummary35);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 35 + "'", int40 == 35);
        org.junit.Assert.assertNull(statisticalSummary41);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 35 + "'", int58 == 35);
        org.junit.Assert.assertNull(statisticalSummary59);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[0.3333333333333333, 0.3333333333333333, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 1.0]");
        org.junit.Assert.assertNotNull(list70);
    }

    @Test
    public void test1904() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1904");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl10 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl12 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int13 = empiricalDistributionImpl12.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary14 = empiricalDistributionImpl12.getSampleStats();
        double[] doubleArray18 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl12.load(doubleArray18);
        empiricalDistributionImpl10.load(doubleArray18);
        empiricalDistributionImpl1.load(doubleArray18);
        double double22 = empiricalDistributionImpl1.getNextValue();
        java.util.List list23 = empiricalDistributionImpl1.getBinStats();
        int int24 = empiricalDistributionImpl1.getBinCount();
        java.util.List list25 = empiricalDistributionImpl1.getBinStats();
        double double26 = empiricalDistributionImpl1.getNextValue();
        java.util.List list27 = empiricalDistributionImpl1.getBinStats();
        java.util.List list28 = empiricalDistributionImpl1.getBinStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary29 = empiricalDistributionImpl1.getSampleStats();
        java.net.URL uRL30 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(uRL30);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
        org.junit.Assert.assertNull(statisticalSummary14);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double22 + "' != '" + 10.0d + "'", double22 == 10.0d);
        org.junit.Assert.assertNotNull(list23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 35 + "'", int24 == 35);
        org.junit.Assert.assertNotNull(list25);
// flaky:         org.junit.Assert.assertTrue("'" + double26 + "' != '" + 32.0d + "'", double26 == 32.0d);
        org.junit.Assert.assertNotNull(list27);
        org.junit.Assert.assertNotNull(list28);
        org.junit.Assert.assertNotNull(statisticalSummary29);
    }

    @Test
    public void test1905() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1905");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        java.util.List list9 = empiricalDistributionImpl1.getBinStats();
        boolean boolean10 = empiricalDistributionImpl1.isLoaded();
        double[] doubleArray11 = empiricalDistributionImpl1.getUpperBounds();
        boolean boolean12 = empiricalDistributionImpl1.isLoaded();
        boolean boolean13 = empiricalDistributionImpl1.isLoaded();
        int int14 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary15 = empiricalDistributionImpl1.getSampleStats();
        double[] doubleArray16 = empiricalDistributionImpl1.getUpperBounds();
        java.util.List list17 = empiricalDistributionImpl1.getBinStats();
        boolean boolean18 = empiricalDistributionImpl1.isLoaded();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(list9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 35 + "'", int14 == 35);
        org.junit.Assert.assertNotNull(statisticalSummary15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(list17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
    }

    @Test
    public void test1906() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1906");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        int int9 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray10 = empiricalDistributionImpl1.getUpperBounds();
        int int11 = empiricalDistributionImpl1.getBinCount();
        java.util.List list12 = empiricalDistributionImpl1.getBinStats();
        int int13 = empiricalDistributionImpl1.getBinCount();
        double double14 = empiricalDistributionImpl1.getNextValue();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl16 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int17 = empiricalDistributionImpl16.getBinCount();
        double[] doubleArray19 = new double[] { 100.0d };
        empiricalDistributionImpl16.load(doubleArray19);
        boolean boolean21 = empiricalDistributionImpl16.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary22 = empiricalDistributionImpl16.getSampleStats();
        boolean boolean23 = empiricalDistributionImpl16.isLoaded();
        boolean boolean24 = empiricalDistributionImpl16.isLoaded();
        double[] doubleArray25 = empiricalDistributionImpl16.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray25);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary27 = empiricalDistributionImpl1.getSampleStats();
        java.lang.Class<?> wildcardClass28 = statisticalSummary27.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 35 + "'", int11 == 35);
        org.junit.Assert.assertNotNull(list12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
// flaky:         org.junit.Assert.assertTrue("'" + double14 + "' != '" + 1.0d + "'", double14 == 1.0d);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 35 + "'", int17 == 35);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(statisticalSummary22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(statisticalSummary27);
        org.junit.Assert.assertNotNull(wildcardClass28);
    }

    @Test
    public void test1907() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1907");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        int int9 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl11 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl13 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray18 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl13.load(doubleArray18);
        double[] doubleArray20 = empiricalDistributionImpl13.getUpperBounds();
        empiricalDistributionImpl11.load(doubleArray20);
        empiricalDistributionImpl1.load(doubleArray20);
        java.util.List list23 = empiricalDistributionImpl1.getBinStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl25 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int26 = empiricalDistributionImpl25.getBinCount();
        double[] doubleArray28 = new double[] { 100.0d };
        empiricalDistributionImpl25.load(doubleArray28);
        boolean boolean30 = empiricalDistributionImpl25.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary31 = empiricalDistributionImpl25.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary32 = empiricalDistributionImpl25.getSampleStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl34 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl36 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int37 = empiricalDistributionImpl36.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary38 = empiricalDistributionImpl36.getSampleStats();
        double[] doubleArray42 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl36.load(doubleArray42);
        empiricalDistributionImpl34.load(doubleArray42);
        double[] doubleArray48 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl34.load(doubleArray48);
        empiricalDistributionImpl25.load(doubleArray48);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl52 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl54 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int55 = empiricalDistributionImpl54.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary56 = empiricalDistributionImpl54.getSampleStats();
        double[] doubleArray60 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl54.load(doubleArray60);
        empiricalDistributionImpl52.load(doubleArray60);
        empiricalDistributionImpl25.load(doubleArray60);
        empiricalDistributionImpl1.load(doubleArray60);
        double[] doubleArray69 = new double[] { 1.1354582769782435d, (short) 0, (-0.1362032819111886d), 10L };
        empiricalDistributionImpl1.load(doubleArray69);
        boolean boolean71 = empiricalDistributionImpl1.isLoaded();
        boolean boolean72 = empiricalDistributionImpl1.isLoaded();
        java.util.List list73 = empiricalDistributionImpl1.getBinStats();
        int int74 = empiricalDistributionImpl1.getBinCount();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(list23);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 35 + "'", int26 == 35);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(statisticalSummary31);
        org.junit.Assert.assertNotNull(statisticalSummary32);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 35 + "'", int37 == 35);
        org.junit.Assert.assertNull(statisticalSummary38);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 35 + "'", int55 == 35);
        org.junit.Assert.assertNull(statisticalSummary56);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[1.1354582769782435, 0.0, -0.1362032819111886, 10.0]");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(list73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 35 + "'", int74 == 35);
    }

    @Test
    public void test1908() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1908");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) ' ');
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary2 = empiricalDistributionImpl1.getSampleStats();
        int int3 = empiricalDistributionImpl1.getBinCount();
        int int4 = empiricalDistributionImpl1.getBinCount();
        java.lang.Class<?> wildcardClass5 = empiricalDistributionImpl1.getClass();
        org.junit.Assert.assertNull(statisticalSummary2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 32 + "'", int3 == 32);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 32 + "'", int4 == 32);
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test1909() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1909");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int2 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray4 = new double[] { 100.0d };
        empiricalDistributionImpl1.load(doubleArray4);
        boolean boolean6 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary7 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary8 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl10 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl12 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int13 = empiricalDistributionImpl12.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary14 = empiricalDistributionImpl12.getSampleStats();
        double[] doubleArray18 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl12.load(doubleArray18);
        empiricalDistributionImpl10.load(doubleArray18);
        double[] doubleArray24 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl10.load(doubleArray24);
        empiricalDistributionImpl1.load(doubleArray24);
        double[] doubleArray27 = empiricalDistributionImpl1.getUpperBounds();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl29 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl31 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int32 = empiricalDistributionImpl31.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary33 = empiricalDistributionImpl31.getSampleStats();
        double[] doubleArray37 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl31.load(doubleArray37);
        empiricalDistributionImpl29.load(doubleArray37);
        empiricalDistributionImpl1.load(doubleArray37);
        int int41 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary42 = empiricalDistributionImpl1.getSampleStats();
        double[] doubleArray43 = empiricalDistributionImpl1.getUpperBounds();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary44 = empiricalDistributionImpl1.getSampleStats();
        double double45 = empiricalDistributionImpl1.getNextValue();
        double[] doubleArray46 = empiricalDistributionImpl1.getUpperBounds();
        boolean boolean47 = empiricalDistributionImpl1.isLoaded();
        double[] doubleArray48 = empiricalDistributionImpl1.getUpperBounds();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 35 + "'", int2 == 35);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(statisticalSummary7);
        org.junit.Assert.assertNotNull(statisticalSummary8);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
        org.junit.Assert.assertNull(statisticalSummary14);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 1.0]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 35 + "'", int32 == 35);
        org.junit.Assert.assertNull(statisticalSummary33);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 35 + "'", int41 == 35);
        org.junit.Assert.assertNotNull(statisticalSummary42);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 1.0]");
        org.junit.Assert.assertNotNull(statisticalSummary44);
// flaky:         org.junit.Assert.assertTrue("'" + double45 + "' != '" + 1.0d + "'", double45 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 1.0]");
    }

    @Test
    public void test1910() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1910");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        double[] doubleArray15 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl1.load(doubleArray15);
        double double17 = empiricalDistributionImpl1.getNextValue();
        boolean boolean18 = empiricalDistributionImpl1.isLoaded();
        boolean boolean19 = empiricalDistributionImpl1.isLoaded();
        double[] doubleArray20 = empiricalDistributionImpl1.getUpperBounds();
        java.util.List list21 = empiricalDistributionImpl1.getBinStats();
        boolean boolean22 = empiricalDistributionImpl1.isLoaded();
        boolean boolean23 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl25 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 100);
        int int26 = empiricalDistributionImpl25.getBinCount();
        int int27 = empiricalDistributionImpl25.getBinCount();
        java.util.List list28 = empiricalDistributionImpl25.getBinStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl30 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl32 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int33 = empiricalDistributionImpl32.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary34 = empiricalDistributionImpl32.getSampleStats();
        double[] doubleArray38 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl32.load(doubleArray38);
        empiricalDistributionImpl30.load(doubleArray38);
        double[] doubleArray44 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl30.load(doubleArray44);
        double[] doubleArray46 = empiricalDistributionImpl30.getUpperBounds();
        double double47 = empiricalDistributionImpl30.getNextValue();
        boolean boolean48 = empiricalDistributionImpl30.isLoaded();
        double[] doubleArray49 = empiricalDistributionImpl30.getUpperBounds();
        empiricalDistributionImpl25.load(doubleArray49);
        empiricalDistributionImpl1.load(doubleArray49);
        double double52 = empiricalDistributionImpl1.getNextValue();
        double[] doubleArray53 = empiricalDistributionImpl1.getUpperBounds();
        boolean boolean54 = empiricalDistributionImpl1.isLoaded();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[-1.0, 0.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.05745907940588368d + "'", double17 == 0.05745907940588368d);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0]");
        org.junit.Assert.assertNotNull(list21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 100 + "'", int26 == 100);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 100 + "'", int27 == 100);
        org.junit.Assert.assertNotNull(list28);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 35 + "'", int33 == 35);
        org.junit.Assert.assertNull(statisticalSummary34);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.05745907940588368d + "'", double47 == 0.05745907940588368d);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0]");
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 1.0d + "'", double52 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0]");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
    }

    @Test
    public void test1911() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1911");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        double double12 = empiricalDistributionImpl1.getNextValue();
        java.util.List list13 = empiricalDistributionImpl1.getBinStats();
        double[] doubleArray14 = empiricalDistributionImpl1.getUpperBounds();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary15 = empiricalDistributionImpl1.getSampleStats();
        java.util.List list16 = empiricalDistributionImpl1.getBinStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl18 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int19 = empiricalDistributionImpl18.getBinCount();
        double[] doubleArray21 = new double[] { 100.0d };
        empiricalDistributionImpl18.load(doubleArray21);
        boolean boolean23 = empiricalDistributionImpl18.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary24 = empiricalDistributionImpl18.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary25 = empiricalDistributionImpl18.getSampleStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl27 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl29 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int30 = empiricalDistributionImpl29.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary31 = empiricalDistributionImpl29.getSampleStats();
        double[] doubleArray35 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl29.load(doubleArray35);
        empiricalDistributionImpl27.load(doubleArray35);
        double[] doubleArray41 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl27.load(doubleArray41);
        empiricalDistributionImpl18.load(doubleArray41);
        double[] doubleArray44 = empiricalDistributionImpl18.getUpperBounds();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl46 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl48 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int49 = empiricalDistributionImpl48.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary50 = empiricalDistributionImpl48.getSampleStats();
        double[] doubleArray54 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl48.load(doubleArray54);
        empiricalDistributionImpl46.load(doubleArray54);
        double double57 = empiricalDistributionImpl46.getNextValue();
        double[] doubleArray58 = empiricalDistributionImpl46.getUpperBounds();
        empiricalDistributionImpl18.load(doubleArray58);
        double[] doubleArray60 = empiricalDistributionImpl18.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray60);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertNotNull(list13);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(statisticalSummary15);
        org.junit.Assert.assertNotNull(list16);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 35 + "'", int19 == 35);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(statisticalSummary24);
        org.junit.Assert.assertNotNull(statisticalSummary25);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 35 + "'", int30 == 35);
        org.junit.Assert.assertNull(statisticalSummary31);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 1.0]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 35 + "'", int49 == 35);
        org.junit.Assert.assertNull(statisticalSummary50);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double57 + "' != '" + 10.0d + "'", double57 == 10.0d);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 1.0]");
    }

    @Test
    public void test1912() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1912");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        int int9 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl11 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl13 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray18 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl13.load(doubleArray18);
        double[] doubleArray20 = empiricalDistributionImpl13.getUpperBounds();
        empiricalDistributionImpl11.load(doubleArray20);
        empiricalDistributionImpl1.load(doubleArray20);
        java.util.List list23 = empiricalDistributionImpl1.getBinStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary24 = empiricalDistributionImpl1.getSampleStats();
        double double25 = empiricalDistributionImpl1.getNextValue();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl27 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 10);
        int int28 = empiricalDistributionImpl27.getBinCount();
        int int29 = empiricalDistributionImpl27.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary30 = empiricalDistributionImpl27.getSampleStats();
        java.util.List list31 = empiricalDistributionImpl27.getBinStats();
        boolean boolean32 = empiricalDistributionImpl27.isLoaded();
        java.util.List list33 = empiricalDistributionImpl27.getBinStats();
        int int34 = empiricalDistributionImpl27.getBinCount();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl36 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl38 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray43 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl38.load(doubleArray43);
        double[] doubleArray45 = empiricalDistributionImpl38.getUpperBounds();
        empiricalDistributionImpl36.load(doubleArray45);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl48 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int49 = empiricalDistributionImpl48.getBinCount();
        double[] doubleArray51 = new double[] { 100.0d };
        empiricalDistributionImpl48.load(doubleArray51);
        empiricalDistributionImpl36.load(doubleArray51);
        double[] doubleArray54 = empiricalDistributionImpl36.getUpperBounds();
        java.util.List list55 = empiricalDistributionImpl36.getBinStats();
        double[] doubleArray56 = empiricalDistributionImpl36.getUpperBounds();
        empiricalDistributionImpl27.load(doubleArray56);
        empiricalDistributionImpl1.load(doubleArray56);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(list23);
        org.junit.Assert.assertNotNull(statisticalSummary24);
// flaky:         org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.75d + "'", double25 == 0.75d);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 10 + "'", int28 == 10);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 10 + "'", int29 == 10);
        org.junit.Assert.assertNull(statisticalSummary30);
        org.junit.Assert.assertNotNull(list31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(list33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 10 + "'", int34 == 10);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 35 + "'", int49 == 35);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[100.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(list55);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
    }

    @Test
    public void test1913() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1913");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        int int9 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl11 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl13 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray18 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl13.load(doubleArray18);
        double[] doubleArray20 = empiricalDistributionImpl13.getUpperBounds();
        empiricalDistributionImpl11.load(doubleArray20);
        empiricalDistributionImpl1.load(doubleArray20);
        java.util.List list23 = empiricalDistributionImpl1.getBinStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary24 = empiricalDistributionImpl1.getSampleStats();
        double double25 = empiricalDistributionImpl1.getNextValue();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl27 = new org.apache.commons.math.random.EmpiricalDistributionImpl(10);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl29 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int30 = empiricalDistributionImpl29.getBinCount();
        double[] doubleArray32 = new double[] { 100.0d };
        empiricalDistributionImpl29.load(doubleArray32);
        boolean boolean34 = empiricalDistributionImpl29.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary35 = empiricalDistributionImpl29.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary36 = empiricalDistributionImpl29.getSampleStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl38 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl40 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int41 = empiricalDistributionImpl40.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary42 = empiricalDistributionImpl40.getSampleStats();
        double[] doubleArray46 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl40.load(doubleArray46);
        empiricalDistributionImpl38.load(doubleArray46);
        double[] doubleArray52 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl38.load(doubleArray52);
        empiricalDistributionImpl29.load(doubleArray52);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl56 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl58 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int59 = empiricalDistributionImpl58.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary60 = empiricalDistributionImpl58.getSampleStats();
        double[] doubleArray64 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl58.load(doubleArray64);
        empiricalDistributionImpl56.load(doubleArray64);
        empiricalDistributionImpl29.load(doubleArray64);
        empiricalDistributionImpl27.load(doubleArray64);
        double[] doubleArray69 = empiricalDistributionImpl27.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray69);
        boolean boolean71 = empiricalDistributionImpl1.isLoaded();
        java.util.List list72 = empiricalDistributionImpl1.getBinStats();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(list23);
        org.junit.Assert.assertNotNull(statisticalSummary24);
// flaky:         org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.75d + "'", double25 == 0.75d);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 35 + "'", int30 == 35);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(statisticalSummary35);
        org.junit.Assert.assertNotNull(statisticalSummary36);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 35 + "'", int41 == 35);
        org.junit.Assert.assertNull(statisticalSummary42);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 35 + "'", int59 == 35);
        org.junit.Assert.assertNull(statisticalSummary60);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[0.3333333333333333, 0.3333333333333333, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(list72);
    }

    @Test
    public void test1914() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1914");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        int int9 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl11 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl13 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray18 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl13.load(doubleArray18);
        double[] doubleArray20 = empiricalDistributionImpl13.getUpperBounds();
        empiricalDistributionImpl11.load(doubleArray20);
        empiricalDistributionImpl1.load(doubleArray20);
        java.util.List list23 = empiricalDistributionImpl1.getBinStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl25 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int26 = empiricalDistributionImpl25.getBinCount();
        double[] doubleArray28 = new double[] { 100.0d };
        empiricalDistributionImpl25.load(doubleArray28);
        boolean boolean30 = empiricalDistributionImpl25.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary31 = empiricalDistributionImpl25.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary32 = empiricalDistributionImpl25.getSampleStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl34 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl36 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int37 = empiricalDistributionImpl36.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary38 = empiricalDistributionImpl36.getSampleStats();
        double[] doubleArray42 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl36.load(doubleArray42);
        empiricalDistributionImpl34.load(doubleArray42);
        double[] doubleArray48 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl34.load(doubleArray48);
        empiricalDistributionImpl25.load(doubleArray48);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl52 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl54 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int55 = empiricalDistributionImpl54.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary56 = empiricalDistributionImpl54.getSampleStats();
        double[] doubleArray60 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl54.load(doubleArray60);
        empiricalDistributionImpl52.load(doubleArray60);
        empiricalDistributionImpl25.load(doubleArray60);
        empiricalDistributionImpl1.load(doubleArray60);
        double[] doubleArray69 = new double[] { 1.1354582769782435d, (short) 0, (-0.1362032819111886d), 10L };
        empiricalDistributionImpl1.load(doubleArray69);
        double double71 = empiricalDistributionImpl1.getNextValue();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl73 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray78 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl73.load(doubleArray78);
        double[] doubleArray80 = empiricalDistributionImpl73.getUpperBounds();
        int int81 = empiricalDistributionImpl73.getBinCount();
        double[] doubleArray82 = empiricalDistributionImpl73.getUpperBounds();
        int int83 = empiricalDistributionImpl73.getBinCount();
        java.util.List list84 = empiricalDistributionImpl73.getBinStats();
        boolean boolean85 = empiricalDistributionImpl73.isLoaded();
        double[] doubleArray86 = empiricalDistributionImpl73.getUpperBounds();
        boolean boolean87 = empiricalDistributionImpl73.isLoaded();
        double[] doubleArray88 = empiricalDistributionImpl73.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray88);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary90 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary91 = empiricalDistributionImpl1.getSampleStats();
        java.lang.Class<?> wildcardClass92 = empiricalDistributionImpl1.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(list23);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 35 + "'", int26 == 35);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(statisticalSummary31);
        org.junit.Assert.assertNotNull(statisticalSummary32);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 35 + "'", int37 == 35);
        org.junit.Assert.assertNull(statisticalSummary38);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 35 + "'", int55 == 35);
        org.junit.Assert.assertNull(statisticalSummary56);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[1.1354582769782435, 0.0, -0.1362032819111886, 10.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double71 + "' != '" + 10.0d + "'", double71 == 10.0d);
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 35 + "'", int81 == 35);
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 35 + "'", int83 == 35);
        org.junit.Assert.assertNotNull(list84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(statisticalSummary90);
        org.junit.Assert.assertNotNull(statisticalSummary91);
        org.junit.Assert.assertNotNull(wildcardClass92);
    }

    @Test
    public void test1915() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1915");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int2 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray4 = new double[] { 100.0d };
        empiricalDistributionImpl1.load(doubleArray4);
        boolean boolean6 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary7 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary8 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary9 = empiricalDistributionImpl1.getSampleStats();
        double[] doubleArray10 = empiricalDistributionImpl1.getUpperBounds();
        double double11 = empiricalDistributionImpl1.getNextValue();
        java.io.File file12 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(file12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 35 + "'", int2 == 35);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(statisticalSummary7);
        org.junit.Assert.assertNotNull(statisticalSummary8);
        org.junit.Assert.assertNotNull(statisticalSummary9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
    }

    @Test
    public void test1916() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1916");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        double[] doubleArray15 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl1.load(doubleArray15);
        double double17 = empiricalDistributionImpl1.getNextValue();
        boolean boolean18 = empiricalDistributionImpl1.isLoaded();
        boolean boolean19 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl21 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        boolean boolean22 = empiricalDistributionImpl21.isLoaded();
        int int23 = empiricalDistributionImpl21.getBinCount();
        boolean boolean24 = empiricalDistributionImpl21.isLoaded();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl26 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int27 = empiricalDistributionImpl26.getBinCount();
        double[] doubleArray29 = new double[] { 100.0d };
        empiricalDistributionImpl26.load(doubleArray29);
        empiricalDistributionImpl21.load(doubleArray29);
        empiricalDistributionImpl1.load(doubleArray29);
        java.util.List list33 = empiricalDistributionImpl1.getBinStats();
        double double34 = empiricalDistributionImpl1.getNextValue();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[-1.0, 0.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double17 + "' != '" + (-0.00590078406589914d) + "'", double17 == (-0.00590078406589914d));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 35 + "'", int23 == 35);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 35 + "'", int27 == 35);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[100.0]");
        org.junit.Assert.assertNotNull(list33);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 100.0d + "'", double34 == 100.0d);
    }

    @Test
    public void test1917() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1917");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        boolean boolean2 = empiricalDistributionImpl1.isLoaded();
        boolean boolean3 = empiricalDistributionImpl1.isLoaded();
        java.util.List list4 = empiricalDistributionImpl1.getBinStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl6 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl8 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int9 = empiricalDistributionImpl8.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary10 = empiricalDistributionImpl8.getSampleStats();
        double[] doubleArray14 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl8.load(doubleArray14);
        empiricalDistributionImpl6.load(doubleArray14);
        double double17 = empiricalDistributionImpl6.getNextValue();
        java.util.List list18 = empiricalDistributionImpl6.getBinStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl20 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray25 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl20.load(doubleArray25);
        double double27 = empiricalDistributionImpl20.getNextValue();
        double double28 = empiricalDistributionImpl20.getNextValue();
        int int29 = empiricalDistributionImpl20.getBinCount();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl31 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int32 = empiricalDistributionImpl31.getBinCount();
        double[] doubleArray34 = new double[] { 100.0d };
        empiricalDistributionImpl31.load(doubleArray34);
        double double36 = empiricalDistributionImpl31.getNextValue();
        boolean boolean37 = empiricalDistributionImpl31.isLoaded();
        double[] doubleArray38 = empiricalDistributionImpl31.getUpperBounds();
        empiricalDistributionImpl20.load(doubleArray38);
        empiricalDistributionImpl6.load(doubleArray38);
        empiricalDistributionImpl1.load(doubleArray38);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary42 = empiricalDistributionImpl1.getSampleStats();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(list4);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertNull(statisticalSummary10);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double17 + "' != '" + 10.0d + "'", double17 == 10.0d);
        org.junit.Assert.assertNotNull(list18);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[10.0, -1.0, 1.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double27 + "' != '" + 1.0d + "'", double27 == 1.0d);
// flaky:         org.junit.Assert.assertTrue("'" + double28 + "' != '" + (-1.0d) + "'", double28 == (-1.0d));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 35 + "'", int29 == 35);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 35 + "'", int32 == 35);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[100.0]");
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 100.0d + "'", double36 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(statisticalSummary42);
    }

    @Test
    public void test1918() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1918");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int2 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray4 = new double[] { 100.0d };
        empiricalDistributionImpl1.load(doubleArray4);
        boolean boolean6 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary7 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary8 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl10 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl12 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int13 = empiricalDistributionImpl12.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary14 = empiricalDistributionImpl12.getSampleStats();
        double[] doubleArray18 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl12.load(doubleArray18);
        empiricalDistributionImpl10.load(doubleArray18);
        double[] doubleArray24 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl10.load(doubleArray24);
        empiricalDistributionImpl1.load(doubleArray24);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary27 = empiricalDistributionImpl1.getSampleStats();
        boolean boolean28 = empiricalDistributionImpl1.isLoaded();
        java.util.List list29 = empiricalDistributionImpl1.getBinStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl31 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray36 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl31.load(doubleArray36);
        double[] doubleArray38 = empiricalDistributionImpl31.getUpperBounds();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary39 = empiricalDistributionImpl31.getSampleStats();
        boolean boolean40 = empiricalDistributionImpl31.isLoaded();
        java.util.List list41 = empiricalDistributionImpl31.getBinStats();
        double double42 = empiricalDistributionImpl31.getNextValue();
        double[] doubleArray43 = empiricalDistributionImpl31.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray43);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 35 + "'", int2 == 35);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(statisticalSummary7);
        org.junit.Assert.assertNotNull(statisticalSummary8);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
        org.junit.Assert.assertNull(statisticalSummary14);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(statisticalSummary27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(list29);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(statisticalSummary39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(list41);
// flaky:         org.junit.Assert.assertTrue("'" + double42 + "' != '" + 1.0d + "'", double42 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
    }

    @Test
    public void test1919() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1919");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        double[] doubleArray15 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl1.load(doubleArray15);
        double[] doubleArray17 = empiricalDistributionImpl1.getUpperBounds();
        double double18 = empiricalDistributionImpl1.getNextValue();
        boolean boolean19 = empiricalDistributionImpl1.isLoaded();
        int int20 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary21 = empiricalDistributionImpl1.getSampleStats();
        double double22 = empiricalDistributionImpl1.getNextValue();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl24 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        boolean boolean25 = empiricalDistributionImpl24.isLoaded();
        boolean boolean26 = empiricalDistributionImpl24.isLoaded();
        java.util.List list27 = empiricalDistributionImpl24.getBinStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl29 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl31 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int32 = empiricalDistributionImpl31.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary33 = empiricalDistributionImpl31.getSampleStats();
        double[] doubleArray37 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl31.load(doubleArray37);
        empiricalDistributionImpl29.load(doubleArray37);
        double double40 = empiricalDistributionImpl29.getNextValue();
        java.util.List list41 = empiricalDistributionImpl29.getBinStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl43 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray48 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl43.load(doubleArray48);
        double double50 = empiricalDistributionImpl43.getNextValue();
        double double51 = empiricalDistributionImpl43.getNextValue();
        int int52 = empiricalDistributionImpl43.getBinCount();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl54 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int55 = empiricalDistributionImpl54.getBinCount();
        double[] doubleArray57 = new double[] { 100.0d };
        empiricalDistributionImpl54.load(doubleArray57);
        double double59 = empiricalDistributionImpl54.getNextValue();
        boolean boolean60 = empiricalDistributionImpl54.isLoaded();
        double[] doubleArray61 = empiricalDistributionImpl54.getUpperBounds();
        empiricalDistributionImpl43.load(doubleArray61);
        empiricalDistributionImpl29.load(doubleArray61);
        empiricalDistributionImpl24.load(doubleArray61);
        empiricalDistributionImpl1.load(doubleArray61);
        java.io.File file66 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(file66);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.42706000628244384d + "'", double18 == 0.42706000628244384d);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(statisticalSummary21);
// flaky:         org.junit.Assert.assertTrue("'" + double22 + "' != '" + 2.7978126134156547d + "'", double22 == 2.7978126134156547d);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(list27);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 35 + "'", int32 == 35);
        org.junit.Assert.assertNull(statisticalSummary33);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double40 + "' != '" + 32.0d + "'", double40 == 32.0d);
        org.junit.Assert.assertNotNull(list41);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[10.0, -1.0, 1.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double50 + "' != '" + 10.0d + "'", double50 == 10.0d);
// flaky:         org.junit.Assert.assertTrue("'" + double51 + "' != '" + 1.0d + "'", double51 == 1.0d);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 35 + "'", int52 == 35);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 35 + "'", int55 == 35);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[100.0]");
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 100.0d + "'", double59 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
    }

    @Test
    public void test1920() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1920");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        int int9 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl11 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl13 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray18 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl13.load(doubleArray18);
        double[] doubleArray20 = empiricalDistributionImpl13.getUpperBounds();
        empiricalDistributionImpl11.load(doubleArray20);
        empiricalDistributionImpl1.load(doubleArray20);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary23 = empiricalDistributionImpl1.getSampleStats();
        java.util.List list24 = empiricalDistributionImpl1.getBinStats();
        boolean boolean25 = empiricalDistributionImpl1.isLoaded();
        double double26 = empiricalDistributionImpl1.getNextValue();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(statisticalSummary23);
        org.junit.Assert.assertNotNull(list24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
// flaky:         org.junit.Assert.assertTrue("'" + double26 + "' != '" + 0.75d + "'", double26 == 0.75d);
    }

    @Test
    public void test1921() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1921");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        double double12 = empiricalDistributionImpl1.getNextValue();
        double[] doubleArray13 = empiricalDistributionImpl1.getUpperBounds();
        int int14 = empiricalDistributionImpl1.getBinCount();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double12 + "' != '" + 32.0d + "'", double12 == 32.0d);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 100 + "'", int14 == 100);
    }

    @Test
    public void test1922() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1922");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int2 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray4 = new double[] { 100.0d };
        empiricalDistributionImpl1.load(doubleArray4);
        double double6 = empiricalDistributionImpl1.getNextValue();
        boolean boolean7 = empiricalDistributionImpl1.isLoaded();
        java.lang.Class<?> wildcardClass8 = empiricalDistributionImpl1.getClass();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 35 + "'", int2 == 35);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[100.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 100.0d + "'", double6 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test1923() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1923");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        double[] doubleArray15 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl1.load(doubleArray15);
        double[] doubleArray17 = empiricalDistributionImpl1.getUpperBounds();
        double double18 = empiricalDistributionImpl1.getNextValue();
        boolean boolean19 = empiricalDistributionImpl1.isLoaded();
        int int20 = empiricalDistributionImpl1.getBinCount();
        int int21 = empiricalDistributionImpl1.getBinCount();
        boolean boolean22 = empiricalDistributionImpl1.isLoaded();
        java.util.List list23 = empiricalDistributionImpl1.getBinStats();
        double double24 = empiricalDistributionImpl1.getNextValue();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double18 + "' != '" + (-1.5070212318090934d) + "'", double18 == (-1.5070212318090934d));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(list23);
// flaky:         org.junit.Assert.assertTrue("'" + double24 + "' != '" + 2.2965713116307342d + "'", double24 == 2.2965713116307342d);
    }

    @Test
    public void test1924() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1924");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 10);
        int int2 = empiricalDistributionImpl1.getBinCount();
        boolean boolean3 = empiricalDistributionImpl1.isLoaded();
        java.util.List list4 = empiricalDistributionImpl1.getBinStats();
        java.lang.Class<?> wildcardClass5 = empiricalDistributionImpl1.getClass();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 10 + "'", int2 == 10);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(list4);
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test1925() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1925");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary9 = empiricalDistributionImpl1.getSampleStats();
        boolean boolean10 = empiricalDistributionImpl1.isLoaded();
        java.util.List list11 = empiricalDistributionImpl1.getBinStats();
        int int12 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl14 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl16 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int17 = empiricalDistributionImpl16.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary18 = empiricalDistributionImpl16.getSampleStats();
        double[] doubleArray22 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl16.load(doubleArray22);
        empiricalDistributionImpl14.load(doubleArray22);
        int int25 = empiricalDistributionImpl14.getBinCount();
        java.util.List list26 = empiricalDistributionImpl14.getBinStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary27 = empiricalDistributionImpl14.getSampleStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl29 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        boolean boolean30 = empiricalDistributionImpl29.isLoaded();
        int int31 = empiricalDistributionImpl29.getBinCount();
        boolean boolean32 = empiricalDistributionImpl29.isLoaded();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl34 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl36 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int37 = empiricalDistributionImpl36.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary38 = empiricalDistributionImpl36.getSampleStats();
        double[] doubleArray42 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl36.load(doubleArray42);
        empiricalDistributionImpl34.load(doubleArray42);
        double[] doubleArray48 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl34.load(doubleArray48);
        double[] doubleArray50 = empiricalDistributionImpl34.getUpperBounds();
        double double51 = empiricalDistributionImpl34.getNextValue();
        boolean boolean52 = empiricalDistributionImpl34.isLoaded();
        double[] doubleArray53 = empiricalDistributionImpl34.getUpperBounds();
        empiricalDistributionImpl29.load(doubleArray53);
        empiricalDistributionImpl14.load(doubleArray53);
        empiricalDistributionImpl1.load(doubleArray53);
        java.lang.Class<?> wildcardClass57 = empiricalDistributionImpl1.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(statisticalSummary9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(list11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 35 + "'", int12 == 35);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 35 + "'", int17 == 35);
        org.junit.Assert.assertNull(statisticalSummary18);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 100 + "'", int25 == 100);
        org.junit.Assert.assertNotNull(list26);
        org.junit.Assert.assertNotNull(statisticalSummary27);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 35 + "'", int31 == 35);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 35 + "'", int37 == 35);
        org.junit.Assert.assertNull(statisticalSummary38);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double51 + "' != '" + (-0.07521717402513366d) + "'", double51 == (-0.07521717402513366d));
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0]");
        org.junit.Assert.assertNotNull(wildcardClass57);
    }

    @Test
    public void test1926() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1926");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int2 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray4 = new double[] { 100.0d };
        empiricalDistributionImpl1.load(doubleArray4);
        boolean boolean6 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary7 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary8 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary9 = empiricalDistributionImpl1.getSampleStats();
        java.util.List list10 = empiricalDistributionImpl1.getBinStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl12 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 10);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl14 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray19 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl14.load(doubleArray19);
        double[] doubleArray21 = empiricalDistributionImpl14.getUpperBounds();
        int int22 = empiricalDistributionImpl14.getBinCount();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl24 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl26 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray31 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl26.load(doubleArray31);
        double[] doubleArray33 = empiricalDistributionImpl26.getUpperBounds();
        empiricalDistributionImpl24.load(doubleArray33);
        empiricalDistributionImpl14.load(doubleArray33);
        java.util.List list36 = empiricalDistributionImpl14.getBinStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl38 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int39 = empiricalDistributionImpl38.getBinCount();
        double[] doubleArray41 = new double[] { 100.0d };
        empiricalDistributionImpl38.load(doubleArray41);
        boolean boolean43 = empiricalDistributionImpl38.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary44 = empiricalDistributionImpl38.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary45 = empiricalDistributionImpl38.getSampleStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl47 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl49 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int50 = empiricalDistributionImpl49.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary51 = empiricalDistributionImpl49.getSampleStats();
        double[] doubleArray55 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl49.load(doubleArray55);
        empiricalDistributionImpl47.load(doubleArray55);
        double[] doubleArray61 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl47.load(doubleArray61);
        empiricalDistributionImpl38.load(doubleArray61);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl65 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl67 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int68 = empiricalDistributionImpl67.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary69 = empiricalDistributionImpl67.getSampleStats();
        double[] doubleArray73 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl67.load(doubleArray73);
        empiricalDistributionImpl65.load(doubleArray73);
        empiricalDistributionImpl38.load(doubleArray73);
        empiricalDistributionImpl14.load(doubleArray73);
        empiricalDistributionImpl12.load(doubleArray73);
        empiricalDistributionImpl1.load(doubleArray73);
        int int80 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary81 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary82 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl84 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) ' ');
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl86 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int87 = empiricalDistributionImpl86.getBinCount();
        double[] doubleArray89 = new double[] { 100.0d };
        empiricalDistributionImpl86.load(doubleArray89);
        boolean boolean91 = empiricalDistributionImpl86.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary92 = empiricalDistributionImpl86.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary93 = empiricalDistributionImpl86.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary94 = empiricalDistributionImpl86.getSampleStats();
        double[] doubleArray95 = empiricalDistributionImpl86.getUpperBounds();
        empiricalDistributionImpl84.load(doubleArray95);
        empiricalDistributionImpl1.load(doubleArray95);
        double[] doubleArray98 = empiricalDistributionImpl1.getUpperBounds();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 35 + "'", int2 == 35);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(statisticalSummary7);
        org.junit.Assert.assertNotNull(statisticalSummary8);
        org.junit.Assert.assertNotNull(statisticalSummary9);
        org.junit.Assert.assertNotNull(list10);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 35 + "'", int22 == 35);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(list36);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 35 + "'", int39 == 35);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(statisticalSummary44);
        org.junit.Assert.assertNotNull(statisticalSummary45);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 35 + "'", int50 == 35);
        org.junit.Assert.assertNull(statisticalSummary51);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 35 + "'", int68 == 35);
        org.junit.Assert.assertNull(statisticalSummary69);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 35 + "'", int80 == 35);
        org.junit.Assert.assertNotNull(statisticalSummary81);
        org.junit.Assert.assertNotNull(statisticalSummary82);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 35 + "'", int87 == 35);
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray89), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
        org.junit.Assert.assertNotNull(statisticalSummary92);
        org.junit.Assert.assertNotNull(statisticalSummary93);
        org.junit.Assert.assertNotNull(statisticalSummary94);
        org.junit.Assert.assertNotNull(doubleArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray95), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray98);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray98), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
    }

    @Test
    public void test1927() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1927");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl10 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl12 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int13 = empiricalDistributionImpl12.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary14 = empiricalDistributionImpl12.getSampleStats();
        double[] doubleArray18 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl12.load(doubleArray18);
        empiricalDistributionImpl10.load(doubleArray18);
        empiricalDistributionImpl1.load(doubleArray18);
        double double22 = empiricalDistributionImpl1.getNextValue();
        java.util.List list23 = empiricalDistributionImpl1.getBinStats();
        int int24 = empiricalDistributionImpl1.getBinCount();
        java.util.List list25 = empiricalDistributionImpl1.getBinStats();
        double double26 = empiricalDistributionImpl1.getNextValue();
        double double27 = empiricalDistributionImpl1.getNextValue();
        int int28 = empiricalDistributionImpl1.getBinCount();
        boolean boolean29 = empiricalDistributionImpl1.isLoaded();
        int int30 = empiricalDistributionImpl1.getBinCount();
        boolean boolean31 = empiricalDistributionImpl1.isLoaded();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
        org.junit.Assert.assertNull(statisticalSummary14);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double22 + "' != '" + 10.0d + "'", double22 == 10.0d);
        org.junit.Assert.assertNotNull(list23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 35 + "'", int24 == 35);
        org.junit.Assert.assertNotNull(list25);
// flaky:         org.junit.Assert.assertTrue("'" + double26 + "' != '" + 32.0d + "'", double26 == 32.0d);
// flaky:         org.junit.Assert.assertTrue("'" + double27 + "' != '" + 32.0d + "'", double27 == 32.0d);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 35 + "'", int28 == 35);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 35 + "'", int30 == 35);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
    }

    @Test
    public void test1928() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1928");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (short) -1);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary2 = empiricalDistributionImpl1.getSampleStats();
        org.junit.Assert.assertNull(statisticalSummary2);
    }

    @Test
    public void test1929() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1929");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        boolean boolean2 = empiricalDistributionImpl1.isLoaded();
        boolean boolean3 = empiricalDistributionImpl1.isLoaded();
        java.util.List list4 = empiricalDistributionImpl1.getBinStats();
        boolean boolean5 = empiricalDistributionImpl1.isLoaded();
        boolean boolean6 = empiricalDistributionImpl1.isLoaded();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(list4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test1930() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1930");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int2 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray4 = new double[] { 100.0d };
        empiricalDistributionImpl1.load(doubleArray4);
        boolean boolean6 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary7 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary8 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl10 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl12 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int13 = empiricalDistributionImpl12.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary14 = empiricalDistributionImpl12.getSampleStats();
        double[] doubleArray18 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl12.load(doubleArray18);
        empiricalDistributionImpl10.load(doubleArray18);
        double[] doubleArray24 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl10.load(doubleArray24);
        empiricalDistributionImpl1.load(doubleArray24);
        double[] doubleArray27 = empiricalDistributionImpl1.getUpperBounds();
        double[] doubleArray28 = empiricalDistributionImpl1.getUpperBounds();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl30 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int31 = empiricalDistributionImpl30.getBinCount();
        double[] doubleArray33 = new double[] { 100.0d };
        empiricalDistributionImpl30.load(doubleArray33);
        boolean boolean35 = empiricalDistributionImpl30.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary36 = empiricalDistributionImpl30.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary37 = empiricalDistributionImpl30.getSampleStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl39 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl41 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int42 = empiricalDistributionImpl41.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary43 = empiricalDistributionImpl41.getSampleStats();
        double[] doubleArray47 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl41.load(doubleArray47);
        empiricalDistributionImpl39.load(doubleArray47);
        double[] doubleArray53 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl39.load(doubleArray53);
        empiricalDistributionImpl30.load(doubleArray53);
        java.util.List list56 = empiricalDistributionImpl30.getBinStats();
        double[] doubleArray57 = empiricalDistributionImpl30.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray57);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary59 = empiricalDistributionImpl1.getSampleStats();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 35 + "'", int2 == 35);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(statisticalSummary7);
        org.junit.Assert.assertNotNull(statisticalSummary8);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
        org.junit.Assert.assertNull(statisticalSummary14);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 1.0]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 35 + "'", int31 == 35);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(statisticalSummary36);
        org.junit.Assert.assertNotNull(statisticalSummary37);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 35 + "'", int42 == 35);
        org.junit.Assert.assertNull(statisticalSummary43);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(list56);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 1.0]");
        org.junit.Assert.assertNotNull(statisticalSummary59);
    }

    @Test
    public void test1931() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1931");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl10 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl12 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int13 = empiricalDistributionImpl12.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary14 = empiricalDistributionImpl12.getSampleStats();
        double[] doubleArray18 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl12.load(doubleArray18);
        empiricalDistributionImpl10.load(doubleArray18);
        empiricalDistributionImpl1.load(doubleArray18);
        double double22 = empiricalDistributionImpl1.getNextValue();
        double double23 = empiricalDistributionImpl1.getNextValue();
        double[] doubleArray24 = empiricalDistributionImpl1.getUpperBounds();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary25 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary26 = empiricalDistributionImpl1.getSampleStats();
        int int27 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray28 = empiricalDistributionImpl1.getUpperBounds();
        double[] doubleArray29 = empiricalDistributionImpl1.getUpperBounds();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary30 = empiricalDistributionImpl1.getSampleStats();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
        org.junit.Assert.assertNull(statisticalSummary14);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double22 + "' != '" + 32.0d + "'", double22 == 32.0d);
// flaky:         org.junit.Assert.assertTrue("'" + double23 + "' != '" + 32.0d + "'", double23 == 32.0d);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 1.0]");
        org.junit.Assert.assertNotNull(statisticalSummary25);
        org.junit.Assert.assertNotNull(statisticalSummary26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 35 + "'", int27 == 35);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 1.0]");
        org.junit.Assert.assertNotNull(statisticalSummary30);
    }

    @Test
    public void test1932() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1932");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray8 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl3.load(doubleArray8);
        double[] doubleArray10 = empiricalDistributionImpl3.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray10);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl13 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int14 = empiricalDistributionImpl13.getBinCount();
        double[] doubleArray16 = new double[] { 100.0d };
        empiricalDistributionImpl13.load(doubleArray16);
        empiricalDistributionImpl1.load(doubleArray16);
        double[] doubleArray19 = empiricalDistributionImpl1.getUpperBounds();
        double double20 = empiricalDistributionImpl1.getNextValue();
        double double21 = empiricalDistributionImpl1.getNextValue();
        double[] doubleArray22 = empiricalDistributionImpl1.getUpperBounds();
        java.util.List list23 = empiricalDistributionImpl1.getBinStats();
        boolean boolean24 = empiricalDistributionImpl1.isLoaded();
        int int25 = empiricalDistributionImpl1.getBinCount();
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 35 + "'", int14 == 35);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[100.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 100.0d + "'", double20 == 100.0d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 100.0d + "'", double21 == 100.0d);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(list23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 35 + "'", int25 == 35);
    }

    @Test
    public void test1933() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1933");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        boolean boolean2 = empiricalDistributionImpl1.isLoaded();
        boolean boolean3 = empiricalDistributionImpl1.isLoaded();
        java.util.List list4 = empiricalDistributionImpl1.getBinStats();
        boolean boolean5 = empiricalDistributionImpl1.isLoaded();
        // The following exception was thrown during execution in test generation
        try {
            double double6 = empiricalDistributionImpl1.getNextValue();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: distribution not loaded");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(list4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test1934() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1934");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int2 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray4 = new double[] { 100.0d };
        empiricalDistributionImpl1.load(doubleArray4);
        boolean boolean6 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary7 = empiricalDistributionImpl1.getSampleStats();
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        boolean boolean9 = empiricalDistributionImpl1.isLoaded();
        double[] doubleArray10 = empiricalDistributionImpl1.getUpperBounds();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 35 + "'", int2 == 35);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(statisticalSummary7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
    }

    @Test
    public void test1935() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1935");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        int int9 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl11 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl13 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray18 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl13.load(doubleArray18);
        double[] doubleArray20 = empiricalDistributionImpl13.getUpperBounds();
        empiricalDistributionImpl11.load(doubleArray20);
        empiricalDistributionImpl1.load(doubleArray20);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl24 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl26 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray31 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl26.load(doubleArray31);
        double[] doubleArray33 = empiricalDistributionImpl26.getUpperBounds();
        empiricalDistributionImpl24.load(doubleArray33);
        empiricalDistributionImpl1.load(doubleArray33);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary36 = empiricalDistributionImpl1.getSampleStats();
        double double37 = empiricalDistributionImpl1.getNextValue();
        boolean boolean38 = empiricalDistributionImpl1.isLoaded();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(statisticalSummary36);
// flaky:         org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.25d + "'", double37 == 0.25d);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
    }

    @Test
    public void test1936() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1936");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        java.util.List list9 = empiricalDistributionImpl1.getBinStats();
        boolean boolean10 = empiricalDistributionImpl1.isLoaded();
        java.util.List list11 = empiricalDistributionImpl1.getBinStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary12 = empiricalDistributionImpl1.getSampleStats();
        double[] doubleArray13 = empiricalDistributionImpl1.getUpperBounds();
        boolean boolean14 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl16 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int17 = empiricalDistributionImpl16.getBinCount();
        double[] doubleArray19 = new double[] { 100.0d };
        empiricalDistributionImpl16.load(doubleArray19);
        double double21 = empiricalDistributionImpl16.getNextValue();
        boolean boolean22 = empiricalDistributionImpl16.isLoaded();
        double[] doubleArray23 = empiricalDistributionImpl16.getUpperBounds();
        int int24 = empiricalDistributionImpl16.getBinCount();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl26 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl28 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int29 = empiricalDistributionImpl28.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary30 = empiricalDistributionImpl28.getSampleStats();
        double[] doubleArray34 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl28.load(doubleArray34);
        empiricalDistributionImpl26.load(doubleArray34);
        empiricalDistributionImpl16.load(doubleArray34);
        boolean boolean38 = empiricalDistributionImpl16.isLoaded();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl40 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray45 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl40.load(doubleArray45);
        double[] doubleArray47 = empiricalDistributionImpl40.getUpperBounds();
        int int48 = empiricalDistributionImpl40.getBinCount();
        int int49 = empiricalDistributionImpl40.getBinCount();
        double[] doubleArray50 = empiricalDistributionImpl40.getUpperBounds();
        empiricalDistributionImpl16.load(doubleArray50);
        empiricalDistributionImpl1.load(doubleArray50);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(list9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(list11);
        org.junit.Assert.assertNotNull(statisticalSummary12);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 35 + "'", int17 == 35);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[100.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 100.0d + "'", double21 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 35 + "'", int24 == 35);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 35 + "'", int29 == 35);
        org.junit.Assert.assertNull(statisticalSummary30);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 35 + "'", int48 == 35);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 35 + "'", int49 == 35);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
    }

    @Test
    public void test1937() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1937");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int2 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray4 = new double[] { 100.0d };
        empiricalDistributionImpl1.load(doubleArray4);
        boolean boolean6 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary7 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary8 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl10 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl12 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int13 = empiricalDistributionImpl12.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary14 = empiricalDistributionImpl12.getSampleStats();
        double[] doubleArray18 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl12.load(doubleArray18);
        empiricalDistributionImpl10.load(doubleArray18);
        double[] doubleArray24 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl10.load(doubleArray24);
        empiricalDistributionImpl1.load(doubleArray24);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary27 = empiricalDistributionImpl1.getSampleStats();
        double double28 = empiricalDistributionImpl1.getNextValue();
        boolean boolean29 = empiricalDistributionImpl1.isLoaded();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 35 + "'", int2 == 35);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(statisticalSummary7);
        org.junit.Assert.assertNotNull(statisticalSummary8);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
        org.junit.Assert.assertNull(statisticalSummary14);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(statisticalSummary27);
// flaky:         org.junit.Assert.assertTrue("'" + double28 + "' != '" + 1.0d + "'", double28 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
    }

    @Test
    public void test1938() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1938");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int2 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray4 = new double[] { 100.0d };
        empiricalDistributionImpl1.load(doubleArray4);
        boolean boolean6 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary7 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary8 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl10 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl12 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int13 = empiricalDistributionImpl12.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary14 = empiricalDistributionImpl12.getSampleStats();
        double[] doubleArray18 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl12.load(doubleArray18);
        empiricalDistributionImpl10.load(doubleArray18);
        double[] doubleArray24 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl10.load(doubleArray24);
        empiricalDistributionImpl1.load(doubleArray24);
        double[] doubleArray27 = empiricalDistributionImpl1.getUpperBounds();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl29 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl31 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int32 = empiricalDistributionImpl31.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary33 = empiricalDistributionImpl31.getSampleStats();
        double[] doubleArray37 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl31.load(doubleArray37);
        empiricalDistributionImpl29.load(doubleArray37);
        empiricalDistributionImpl1.load(doubleArray37);
        int int41 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary42 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl44 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int45 = empiricalDistributionImpl44.getBinCount();
        double[] doubleArray47 = new double[] { 100.0d };
        empiricalDistributionImpl44.load(doubleArray47);
        boolean boolean49 = empiricalDistributionImpl44.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary50 = empiricalDistributionImpl44.getSampleStats();
        boolean boolean51 = empiricalDistributionImpl44.isLoaded();
        boolean boolean52 = empiricalDistributionImpl44.isLoaded();
        java.util.List list53 = empiricalDistributionImpl44.getBinStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl55 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray60 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl55.load(doubleArray60);
        double[] doubleArray62 = empiricalDistributionImpl55.getUpperBounds();
        int int63 = empiricalDistributionImpl55.getBinCount();
        double[] doubleArray64 = empiricalDistributionImpl55.getUpperBounds();
        empiricalDistributionImpl44.load(doubleArray64);
        empiricalDistributionImpl1.load(doubleArray64);
        int int67 = empiricalDistributionImpl1.getBinCount();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 35 + "'", int2 == 35);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(statisticalSummary7);
        org.junit.Assert.assertNotNull(statisticalSummary8);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
        org.junit.Assert.assertNull(statisticalSummary14);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 1.0]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 35 + "'", int32 == 35);
        org.junit.Assert.assertNull(statisticalSummary33);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 35 + "'", int41 == 35);
        org.junit.Assert.assertNotNull(statisticalSummary42);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 35 + "'", int45 == 35);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(statisticalSummary50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(list53);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 35 + "'", int63 == 35);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 35 + "'", int67 == 35);
    }

    @Test
    public void test1939() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1939");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int2 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray4 = new double[] { 100.0d };
        empiricalDistributionImpl1.load(doubleArray4);
        boolean boolean6 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary7 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary8 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl10 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl12 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int13 = empiricalDistributionImpl12.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary14 = empiricalDistributionImpl12.getSampleStats();
        double[] doubleArray18 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl12.load(doubleArray18);
        empiricalDistributionImpl10.load(doubleArray18);
        double[] doubleArray24 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl10.load(doubleArray24);
        empiricalDistributionImpl1.load(doubleArray24);
        double[] doubleArray27 = empiricalDistributionImpl1.getUpperBounds();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl29 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl31 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int32 = empiricalDistributionImpl31.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary33 = empiricalDistributionImpl31.getSampleStats();
        double[] doubleArray37 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl31.load(doubleArray37);
        empiricalDistributionImpl29.load(doubleArray37);
        empiricalDistributionImpl1.load(doubleArray37);
        java.util.List list41 = empiricalDistributionImpl1.getBinStats();
        boolean boolean42 = empiricalDistributionImpl1.isLoaded();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 35 + "'", int2 == 35);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(statisticalSummary7);
        org.junit.Assert.assertNotNull(statisticalSummary8);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
        org.junit.Assert.assertNull(statisticalSummary14);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 1.0]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 35 + "'", int32 == 35);
        org.junit.Assert.assertNull(statisticalSummary33);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(list41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
    }

    @Test
    public void test1940() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1940");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary9 = empiricalDistributionImpl1.getSampleStats();
        boolean boolean10 = empiricalDistributionImpl1.isLoaded();
        java.util.List list11 = empiricalDistributionImpl1.getBinStats();
        boolean boolean12 = empiricalDistributionImpl1.isLoaded();
        int int13 = empiricalDistributionImpl1.getBinCount();
        java.util.List list14 = empiricalDistributionImpl1.getBinStats();
        java.util.List list15 = empiricalDistributionImpl1.getBinStats();
        boolean boolean16 = empiricalDistributionImpl1.isLoaded();
        double[] doubleArray17 = empiricalDistributionImpl1.getUpperBounds();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(statisticalSummary9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(list11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
        org.junit.Assert.assertNotNull(list14);
        org.junit.Assert.assertNotNull(list15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
    }

    @Test
    public void test1941() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1941");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int2 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray4 = new double[] { 100.0d };
        empiricalDistributionImpl1.load(doubleArray4);
        boolean boolean6 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary7 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary8 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl10 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl12 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int13 = empiricalDistributionImpl12.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary14 = empiricalDistributionImpl12.getSampleStats();
        double[] doubleArray18 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl12.load(doubleArray18);
        empiricalDistributionImpl10.load(doubleArray18);
        double[] doubleArray24 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl10.load(doubleArray24);
        empiricalDistributionImpl1.load(doubleArray24);
        double[] doubleArray27 = empiricalDistributionImpl1.getUpperBounds();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl29 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl31 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int32 = empiricalDistributionImpl31.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary33 = empiricalDistributionImpl31.getSampleStats();
        double[] doubleArray37 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl31.load(doubleArray37);
        empiricalDistributionImpl29.load(doubleArray37);
        empiricalDistributionImpl1.load(doubleArray37);
        int int41 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary42 = empiricalDistributionImpl1.getSampleStats();
        double[] doubleArray43 = empiricalDistributionImpl1.getUpperBounds();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary44 = empiricalDistributionImpl1.getSampleStats();
        double double45 = empiricalDistributionImpl1.getNextValue();
        double[] doubleArray46 = empiricalDistributionImpl1.getUpperBounds();
        double[] doubleArray47 = empiricalDistributionImpl1.getUpperBounds();
        double[] doubleArray48 = empiricalDistributionImpl1.getUpperBounds();
        java.io.File file49 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(file49);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 35 + "'", int2 == 35);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(statisticalSummary7);
        org.junit.Assert.assertNotNull(statisticalSummary8);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
        org.junit.Assert.assertNull(statisticalSummary14);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 1.0]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 35 + "'", int32 == 35);
        org.junit.Assert.assertNull(statisticalSummary33);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 35 + "'", int41 == 35);
        org.junit.Assert.assertNotNull(statisticalSummary42);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 1.0]");
        org.junit.Assert.assertNotNull(statisticalSummary44);
// flaky:         org.junit.Assert.assertTrue("'" + double45 + "' != '" + 10.0d + "'", double45 == 10.0d);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 1.0]");
    }

    @Test
    public void test1942() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1942");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        double[] doubleArray15 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl1.load(doubleArray15);
        double[] doubleArray17 = empiricalDistributionImpl1.getUpperBounds();
        double double18 = empiricalDistributionImpl1.getNextValue();
        int int19 = empiricalDistributionImpl1.getBinCount();
        java.util.List list20 = empiricalDistributionImpl1.getBinStats();
        boolean boolean21 = empiricalDistributionImpl1.isLoaded();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double18 + "' != '" + 1.6938311684349394d + "'", double18 == 1.6938311684349394d);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(list20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
    }

    @Test
    public void test1943() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1943");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary9 = empiricalDistributionImpl1.getSampleStats();
        boolean boolean10 = empiricalDistributionImpl1.isLoaded();
        java.util.List list11 = empiricalDistributionImpl1.getBinStats();
        boolean boolean12 = empiricalDistributionImpl1.isLoaded();
        int int13 = empiricalDistributionImpl1.getBinCount();
        java.util.List list14 = empiricalDistributionImpl1.getBinStats();
        java.util.List list15 = empiricalDistributionImpl1.getBinStats();
        java.lang.Class<?> wildcardClass16 = list15.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(statisticalSummary9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(list11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
        org.junit.Assert.assertNotNull(list14);
        org.junit.Assert.assertNotNull(list15);
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test1944() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1944");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        double[] doubleArray15 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl1.load(doubleArray15);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary17 = empiricalDistributionImpl1.getSampleStats();
        int int18 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray19 = empiricalDistributionImpl1.getUpperBounds();
        boolean boolean20 = empiricalDistributionImpl1.isLoaded();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(statisticalSummary17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
    }

    @Test
    public void test1945() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1945");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        double[] doubleArray15 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl1.load(doubleArray15);
        double double17 = empiricalDistributionImpl1.getNextValue();
        boolean boolean18 = empiricalDistributionImpl1.isLoaded();
        boolean boolean19 = empiricalDistributionImpl1.isLoaded();
        double[] doubleArray20 = empiricalDistributionImpl1.getUpperBounds();
        int int21 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary22 = empiricalDistributionImpl1.getSampleStats();
        double double23 = empiricalDistributionImpl1.getNextValue();
        int int24 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray25 = empiricalDistributionImpl1.getUpperBounds();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[-1.0, 0.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double17 + "' != '" + 1.0479768903207745d + "'", double17 == 1.0479768903207745d);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(statisticalSummary22);
// flaky:         org.junit.Assert.assertTrue("'" + double23 + "' != '" + 1.4529509043298765d + "'", double23 == 1.4529509043298765d);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0]");
    }

    @Test
    public void test1946() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1946");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl10 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl12 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int13 = empiricalDistributionImpl12.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary14 = empiricalDistributionImpl12.getSampleStats();
        double[] doubleArray18 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl12.load(doubleArray18);
        empiricalDistributionImpl10.load(doubleArray18);
        empiricalDistributionImpl1.load(doubleArray18);
        double double22 = empiricalDistributionImpl1.getNextValue();
        double double23 = empiricalDistributionImpl1.getNextValue();
        double[] doubleArray24 = empiricalDistributionImpl1.getUpperBounds();
        java.util.List list25 = empiricalDistributionImpl1.getBinStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary26 = empiricalDistributionImpl1.getSampleStats();
        double[] doubleArray28 = new double[] { 0.32521547853135047d };
        empiricalDistributionImpl1.load(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
        org.junit.Assert.assertNull(statisticalSummary14);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double22 + "' != '" + 32.0d + "'", double22 == 32.0d);
// flaky:         org.junit.Assert.assertTrue("'" + double23 + "' != '" + 10.0d + "'", double23 == 10.0d);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 1.0]");
        org.junit.Assert.assertNotNull(list25);
        org.junit.Assert.assertNotNull(statisticalSummary26);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[0.32521547853135047]");
    }

    @Test
    public void test1947() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1947");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        java.util.List list9 = empiricalDistributionImpl1.getBinStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl11 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl13 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int14 = empiricalDistributionImpl13.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary15 = empiricalDistributionImpl13.getSampleStats();
        double[] doubleArray19 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl13.load(doubleArray19);
        empiricalDistributionImpl11.load(doubleArray19);
        double double22 = empiricalDistributionImpl11.getNextValue();
        double[] doubleArray23 = empiricalDistributionImpl11.getUpperBounds();
        double[] doubleArray24 = empiricalDistributionImpl11.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray24);
        boolean boolean26 = empiricalDistributionImpl1.isLoaded();
        int int27 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl29 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int30 = empiricalDistributionImpl29.getBinCount();
        double[] doubleArray32 = new double[] { 100.0d };
        empiricalDistributionImpl29.load(doubleArray32);
        boolean boolean34 = empiricalDistributionImpl29.isLoaded();
        double[] doubleArray35 = empiricalDistributionImpl29.getUpperBounds();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary36 = empiricalDistributionImpl29.getSampleStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl38 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (short) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl40 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray45 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl40.load(doubleArray45);
        double[] doubleArray47 = empiricalDistributionImpl40.getUpperBounds();
        int int48 = empiricalDistributionImpl40.getBinCount();
        double[] doubleArray49 = empiricalDistributionImpl40.getUpperBounds();
        empiricalDistributionImpl38.load(doubleArray49);
        double[] doubleArray51 = empiricalDistributionImpl38.getUpperBounds();
        empiricalDistributionImpl29.load(doubleArray51);
        empiricalDistributionImpl1.load(doubleArray51);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl55 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl57 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int58 = empiricalDistributionImpl57.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary59 = empiricalDistributionImpl57.getSampleStats();
        double[] doubleArray63 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl57.load(doubleArray63);
        empiricalDistributionImpl55.load(doubleArray63);
        double[] doubleArray69 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl55.load(doubleArray69);
        empiricalDistributionImpl1.load(doubleArray69);
        java.util.List list72 = empiricalDistributionImpl1.getBinStats();
        boolean boolean73 = empiricalDistributionImpl1.isLoaded();
        double[] doubleArray74 = empiricalDistributionImpl1.getUpperBounds();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(list9);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 35 + "'", int14 == 35);
        org.junit.Assert.assertNull(statisticalSummary15);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double22 + "' != '" + 32.0d + "'", double22 == 32.0d);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 35 + "'", int27 == 35);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 35 + "'", int30 == 35);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(statisticalSummary36);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 35 + "'", int48 == 35);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 35 + "'", int58 == 35);
        org.junit.Assert.assertNull(statisticalSummary59);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(list72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 1.0]");
    }

    @Test
    public void test1948() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1948");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int2 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray4 = new double[] { 100.0d };
        empiricalDistributionImpl1.load(doubleArray4);
        boolean boolean6 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary7 = empiricalDistributionImpl1.getSampleStats();
        boolean boolean8 = empiricalDistributionImpl1.isLoaded();
        int int9 = empiricalDistributionImpl1.getBinCount();
        java.util.List list10 = empiricalDistributionImpl1.getBinStats();
        double double11 = empiricalDistributionImpl1.getNextValue();
        double[] doubleArray12 = empiricalDistributionImpl1.getUpperBounds();
        boolean boolean13 = empiricalDistributionImpl1.isLoaded();
        java.lang.Class<?> wildcardClass14 = empiricalDistributionImpl1.getClass();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 35 + "'", int2 == 35);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(statisticalSummary7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertNotNull(list10);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test1949() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1949");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        double[] doubleArray15 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl1.load(doubleArray15);
        double double17 = empiricalDistributionImpl1.getNextValue();
        boolean boolean18 = empiricalDistributionImpl1.isLoaded();
        boolean boolean19 = empiricalDistributionImpl1.isLoaded();
        double double20 = empiricalDistributionImpl1.getNextValue();
        double[] doubleArray21 = empiricalDistributionImpl1.getUpperBounds();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl23 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray28 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl23.load(doubleArray28);
        double[] doubleArray30 = empiricalDistributionImpl23.getUpperBounds();
        java.util.List list31 = empiricalDistributionImpl23.getBinStats();
        boolean boolean32 = empiricalDistributionImpl23.isLoaded();
        java.util.List list33 = empiricalDistributionImpl23.getBinStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary34 = empiricalDistributionImpl23.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary35 = empiricalDistributionImpl23.getSampleStats();
        int int36 = empiricalDistributionImpl23.getBinCount();
        int int37 = empiricalDistributionImpl23.getBinCount();
        int int38 = empiricalDistributionImpl23.getBinCount();
        double[] doubleArray39 = empiricalDistributionImpl23.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray39);
        double[] doubleArray41 = empiricalDistributionImpl1.getUpperBounds();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[-1.0, 0.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.7382948309156555d + "'", double17 == 0.7382948309156555d);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
// flaky:         org.junit.Assert.assertTrue("'" + double20 + "' != '" + (-1.3424696984773206d) + "'", double20 == (-1.3424696984773206d));
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(list31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(list33);
        org.junit.Assert.assertNotNull(statisticalSummary34);
        org.junit.Assert.assertNotNull(statisticalSummary35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 35 + "'", int36 == 35);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 35 + "'", int37 == 35);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 35 + "'", int38 == 35);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0]");
    }

    @Test
    public void test1950() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1950");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 10);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray8 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl3.load(doubleArray8);
        double[] doubleArray10 = empiricalDistributionImpl3.getUpperBounds();
        int int11 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl13 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl15 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray20 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl15.load(doubleArray20);
        double[] doubleArray22 = empiricalDistributionImpl15.getUpperBounds();
        empiricalDistributionImpl13.load(doubleArray22);
        empiricalDistributionImpl3.load(doubleArray22);
        java.util.List list25 = empiricalDistributionImpl3.getBinStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl27 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int28 = empiricalDistributionImpl27.getBinCount();
        double[] doubleArray30 = new double[] { 100.0d };
        empiricalDistributionImpl27.load(doubleArray30);
        boolean boolean32 = empiricalDistributionImpl27.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary33 = empiricalDistributionImpl27.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary34 = empiricalDistributionImpl27.getSampleStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl36 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl38 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int39 = empiricalDistributionImpl38.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary40 = empiricalDistributionImpl38.getSampleStats();
        double[] doubleArray44 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl38.load(doubleArray44);
        empiricalDistributionImpl36.load(doubleArray44);
        double[] doubleArray50 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl36.load(doubleArray50);
        empiricalDistributionImpl27.load(doubleArray50);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl54 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl56 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int57 = empiricalDistributionImpl56.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary58 = empiricalDistributionImpl56.getSampleStats();
        double[] doubleArray62 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl56.load(doubleArray62);
        empiricalDistributionImpl54.load(doubleArray62);
        empiricalDistributionImpl27.load(doubleArray62);
        empiricalDistributionImpl3.load(doubleArray62);
        empiricalDistributionImpl1.load(doubleArray62);
        java.util.List list68 = empiricalDistributionImpl1.getBinStats();
        java.util.List list69 = empiricalDistributionImpl1.getBinStats();
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 35 + "'", int11 == 35);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(list25);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 35 + "'", int28 == 35);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(statisticalSummary33);
        org.junit.Assert.assertNotNull(statisticalSummary34);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 35 + "'", int39 == 35);
        org.junit.Assert.assertNull(statisticalSummary40);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 35 + "'", int57 == 35);
        org.junit.Assert.assertNull(statisticalSummary58);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(list68);
        org.junit.Assert.assertNotNull(list69);
    }

    @Test
    public void test1951() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1951");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int2 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray4 = new double[] { 100.0d };
        empiricalDistributionImpl1.load(doubleArray4);
        boolean boolean6 = empiricalDistributionImpl1.isLoaded();
        double[] doubleArray7 = empiricalDistributionImpl1.getUpperBounds();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary8 = empiricalDistributionImpl1.getSampleStats();
        int int9 = empiricalDistributionImpl1.getBinCount();
        java.net.URL uRL10 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(uRL10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 35 + "'", int2 == 35);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(statisticalSummary8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
    }

    @Test
    public void test1952() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1952");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        int int12 = empiricalDistributionImpl1.getBinCount();
        java.util.List list13 = empiricalDistributionImpl1.getBinStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary14 = empiricalDistributionImpl1.getSampleStats();
        boolean boolean15 = empiricalDistributionImpl1.isLoaded();
        int int16 = empiricalDistributionImpl1.getBinCount();
        boolean boolean17 = empiricalDistributionImpl1.isLoaded();
        double double18 = empiricalDistributionImpl1.getNextValue();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary19 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl21 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int22 = empiricalDistributionImpl21.getBinCount();
        double[] doubleArray24 = new double[] { 100.0d };
        empiricalDistributionImpl21.load(doubleArray24);
        boolean boolean26 = empiricalDistributionImpl21.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary27 = empiricalDistributionImpl21.getSampleStats();
        double[] doubleArray28 = empiricalDistributionImpl21.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray28);
        java.lang.Class<?> wildcardClass30 = doubleArray28.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 100 + "'", int12 == 100);
        org.junit.Assert.assertNotNull(list13);
        org.junit.Assert.assertNotNull(statisticalSummary14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 100 + "'", int16 == 100);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
// flaky:         org.junit.Assert.assertTrue("'" + double18 + "' != '" + 32.0d + "'", double18 == 32.0d);
        org.junit.Assert.assertNotNull(statisticalSummary19);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 35 + "'", int22 == 35);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(statisticalSummary27);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(wildcardClass30);
    }

    @Test
    public void test1953() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1953");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray8 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl3.load(doubleArray8);
        double[] doubleArray10 = empiricalDistributionImpl3.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray10);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl13 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int14 = empiricalDistributionImpl13.getBinCount();
        double[] doubleArray16 = new double[] { 100.0d };
        empiricalDistributionImpl13.load(doubleArray16);
        empiricalDistributionImpl1.load(doubleArray16);
        double[] doubleArray19 = empiricalDistributionImpl1.getUpperBounds();
        double double20 = empiricalDistributionImpl1.getNextValue();
        boolean boolean21 = empiricalDistributionImpl1.isLoaded();
        boolean boolean22 = empiricalDistributionImpl1.isLoaded();
        int int23 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl25 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl27 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int28 = empiricalDistributionImpl27.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary29 = empiricalDistributionImpl27.getSampleStats();
        double[] doubleArray33 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl27.load(doubleArray33);
        empiricalDistributionImpl25.load(doubleArray33);
        double[] doubleArray39 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl25.load(doubleArray39);
        double double41 = empiricalDistributionImpl25.getNextValue();
        boolean boolean42 = empiricalDistributionImpl25.isLoaded();
        double double43 = empiricalDistributionImpl25.getNextValue();
        int int44 = empiricalDistributionImpl25.getBinCount();
        double[] doubleArray45 = empiricalDistributionImpl25.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray45);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 35 + "'", int14 == 35);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[100.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 100.0d + "'", double20 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 35 + "'", int23 == 35);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 35 + "'", int28 == 35);
        org.junit.Assert.assertNull(statisticalSummary29);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[-1.0, 0.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double41 + "' != '" + (-0.18048707446908388d) + "'", double41 == (-0.18048707446908388d));
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
// flaky:         org.junit.Assert.assertTrue("'" + double43 + "' != '" + 1.8069108890295462d + "'", double43 == 1.8069108890295462d);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0]");
    }

    @Test
    public void test1954() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1954");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray8 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl3.load(doubleArray8);
        double[] doubleArray10 = empiricalDistributionImpl3.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray10);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl13 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int14 = empiricalDistributionImpl13.getBinCount();
        double[] doubleArray16 = new double[] { 100.0d };
        empiricalDistributionImpl13.load(doubleArray16);
        empiricalDistributionImpl1.load(doubleArray16);
        double[] doubleArray19 = empiricalDistributionImpl1.getUpperBounds();
        double double20 = empiricalDistributionImpl1.getNextValue();
        double double21 = empiricalDistributionImpl1.getNextValue();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl23 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int24 = empiricalDistributionImpl23.getBinCount();
        double[] doubleArray26 = new double[] { 100.0d };
        empiricalDistributionImpl23.load(doubleArray26);
        boolean boolean28 = empiricalDistributionImpl23.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary29 = empiricalDistributionImpl23.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary30 = empiricalDistributionImpl23.getSampleStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl32 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl34 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int35 = empiricalDistributionImpl34.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary36 = empiricalDistributionImpl34.getSampleStats();
        double[] doubleArray40 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl34.load(doubleArray40);
        empiricalDistributionImpl32.load(doubleArray40);
        double[] doubleArray46 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl32.load(doubleArray46);
        empiricalDistributionImpl23.load(doubleArray46);
        double[] doubleArray49 = empiricalDistributionImpl23.getUpperBounds();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl51 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl53 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int54 = empiricalDistributionImpl53.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary55 = empiricalDistributionImpl53.getSampleStats();
        double[] doubleArray59 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl53.load(doubleArray59);
        empiricalDistributionImpl51.load(doubleArray59);
        double double62 = empiricalDistributionImpl51.getNextValue();
        double[] doubleArray63 = empiricalDistributionImpl51.getUpperBounds();
        empiricalDistributionImpl23.load(doubleArray63);
        double[] doubleArray65 = empiricalDistributionImpl23.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray65);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl68 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl70 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int71 = empiricalDistributionImpl70.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary72 = empiricalDistributionImpl70.getSampleStats();
        double[] doubleArray76 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl70.load(doubleArray76);
        empiricalDistributionImpl68.load(doubleArray76);
        double[] doubleArray82 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl68.load(doubleArray82);
        double double84 = empiricalDistributionImpl68.getNextValue();
        boolean boolean85 = empiricalDistributionImpl68.isLoaded();
        boolean boolean86 = empiricalDistributionImpl68.isLoaded();
        double[] doubleArray87 = empiricalDistributionImpl68.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray87);
        java.util.List list89 = empiricalDistributionImpl1.getBinStats();
        double double90 = empiricalDistributionImpl1.getNextValue();
        double double91 = empiricalDistributionImpl1.getNextValue();
        double double92 = empiricalDistributionImpl1.getNextValue();
        java.util.List list93 = empiricalDistributionImpl1.getBinStats();
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 35 + "'", int14 == 35);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[100.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 100.0d + "'", double20 == 100.0d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 100.0d + "'", double21 == 100.0d);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 35 + "'", int24 == 35);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(statisticalSummary29);
        org.junit.Assert.assertNotNull(statisticalSummary30);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 35 + "'", int35 == 35);
        org.junit.Assert.assertNull(statisticalSummary36);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 1.0]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 35 + "'", int54 == 35);
        org.junit.Assert.assertNull(statisticalSummary55);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double62 + "' != '" + 32.0d + "'", double62 == 32.0d);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 1.0]");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 35 + "'", int71 == 35);
        org.junit.Assert.assertNull(statisticalSummary72);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[-1.0, 0.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double84 + "' != '" + (-0.25415315750112355d) + "'", double84 == (-0.25415315750112355d));
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray87), "[1.0]");
        org.junit.Assert.assertNotNull(list89);
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + 1.0d + "'", double90 == 1.0d);
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 1.0d + "'", double91 == 1.0d);
        org.junit.Assert.assertTrue("'" + double92 + "' != '" + 1.0d + "'", double92 == 1.0d);
        org.junit.Assert.assertNotNull(list93);
    }

    @Test
    public void test1955() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1955");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        double double12 = empiricalDistributionImpl1.getNextValue();
        java.util.List list13 = empiricalDistributionImpl1.getBinStats();
        double double14 = empiricalDistributionImpl1.getNextValue();
        int int15 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl17 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl19 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int20 = empiricalDistributionImpl19.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary21 = empiricalDistributionImpl19.getSampleStats();
        double[] doubleArray25 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl19.load(doubleArray25);
        empiricalDistributionImpl17.load(doubleArray25);
        double double28 = empiricalDistributionImpl17.getNextValue();
        java.util.List list29 = empiricalDistributionImpl17.getBinStats();
        double double30 = empiricalDistributionImpl17.getNextValue();
        int int31 = empiricalDistributionImpl17.getBinCount();
        double[] doubleArray32 = empiricalDistributionImpl17.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray32);
        java.net.URL uRL34 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(uRL34);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double12 + "' != '" + 1.0d + "'", double12 == 1.0d);
        org.junit.Assert.assertNotNull(list13);
// flaky:         org.junit.Assert.assertTrue("'" + double14 + "' != '" + 1.0d + "'", double14 == 1.0d);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 100 + "'", int15 == 100);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 35 + "'", int20 == 35);
        org.junit.Assert.assertNull(statisticalSummary21);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double28 + "' != '" + 32.0d + "'", double28 == 32.0d);
        org.junit.Assert.assertNotNull(list29);
// flaky:         org.junit.Assert.assertTrue("'" + double30 + "' != '" + 1.0d + "'", double30 == 1.0d);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 100 + "'", int31 == 100);
        org.junit.Assert.assertNotNull(doubleArray32);
    }

    @Test
    public void test1956() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1956");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray8 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl3.load(doubleArray8);
        double[] doubleArray10 = empiricalDistributionImpl3.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray10);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl13 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int14 = empiricalDistributionImpl13.getBinCount();
        double[] doubleArray16 = new double[] { 100.0d };
        empiricalDistributionImpl13.load(doubleArray16);
        empiricalDistributionImpl1.load(doubleArray16);
        double[] doubleArray19 = empiricalDistributionImpl1.getUpperBounds();
        double double20 = empiricalDistributionImpl1.getNextValue();
        double double21 = empiricalDistributionImpl1.getNextValue();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl23 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int24 = empiricalDistributionImpl23.getBinCount();
        double[] doubleArray26 = new double[] { 100.0d };
        empiricalDistributionImpl23.load(doubleArray26);
        boolean boolean28 = empiricalDistributionImpl23.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary29 = empiricalDistributionImpl23.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary30 = empiricalDistributionImpl23.getSampleStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl32 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl34 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int35 = empiricalDistributionImpl34.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary36 = empiricalDistributionImpl34.getSampleStats();
        double[] doubleArray40 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl34.load(doubleArray40);
        empiricalDistributionImpl32.load(doubleArray40);
        double[] doubleArray46 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl32.load(doubleArray46);
        empiricalDistributionImpl23.load(doubleArray46);
        double[] doubleArray49 = empiricalDistributionImpl23.getUpperBounds();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl51 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl53 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int54 = empiricalDistributionImpl53.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary55 = empiricalDistributionImpl53.getSampleStats();
        double[] doubleArray59 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl53.load(doubleArray59);
        empiricalDistributionImpl51.load(doubleArray59);
        double double62 = empiricalDistributionImpl51.getNextValue();
        double[] doubleArray63 = empiricalDistributionImpl51.getUpperBounds();
        empiricalDistributionImpl23.load(doubleArray63);
        double[] doubleArray65 = empiricalDistributionImpl23.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray65);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl68 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl70 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int71 = empiricalDistributionImpl70.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary72 = empiricalDistributionImpl70.getSampleStats();
        double[] doubleArray76 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl70.load(doubleArray76);
        empiricalDistributionImpl68.load(doubleArray76);
        double[] doubleArray82 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl68.load(doubleArray82);
        double double84 = empiricalDistributionImpl68.getNextValue();
        boolean boolean85 = empiricalDistributionImpl68.isLoaded();
        boolean boolean86 = empiricalDistributionImpl68.isLoaded();
        double[] doubleArray87 = empiricalDistributionImpl68.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray87);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary89 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary90 = empiricalDistributionImpl1.getSampleStats();
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 35 + "'", int14 == 35);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[100.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 100.0d + "'", double20 == 100.0d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 100.0d + "'", double21 == 100.0d);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 35 + "'", int24 == 35);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(statisticalSummary29);
        org.junit.Assert.assertNotNull(statisticalSummary30);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 35 + "'", int35 == 35);
        org.junit.Assert.assertNull(statisticalSummary36);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 1.0]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 35 + "'", int54 == 35);
        org.junit.Assert.assertNull(statisticalSummary55);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double62 + "' != '" + 1.0d + "'", double62 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 1.0]");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 35 + "'", int71 == 35);
        org.junit.Assert.assertNull(statisticalSummary72);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[-1.0, 0.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double84 + "' != '" + (-0.09601745511107063d) + "'", double84 == (-0.09601745511107063d));
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray87), "[1.0]");
        org.junit.Assert.assertNotNull(statisticalSummary89);
        org.junit.Assert.assertNotNull(statisticalSummary90);
    }

    @Test
    public void test1957() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1957");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int2 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray4 = new double[] { 100.0d };
        empiricalDistributionImpl1.load(doubleArray4);
        boolean boolean6 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary7 = empiricalDistributionImpl1.getSampleStats();
        boolean boolean8 = empiricalDistributionImpl1.isLoaded();
        boolean boolean9 = empiricalDistributionImpl1.isLoaded();
        boolean boolean10 = empiricalDistributionImpl1.isLoaded();
        double[] doubleArray11 = empiricalDistributionImpl1.getUpperBounds();
        double[] doubleArray12 = empiricalDistributionImpl1.getUpperBounds();
        double[] doubleArray13 = empiricalDistributionImpl1.getUpperBounds();
        double double14 = empiricalDistributionImpl1.getNextValue();
        double double15 = empiricalDistributionImpl1.getNextValue();
        double double16 = empiricalDistributionImpl1.getNextValue();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 35 + "'", int2 == 35);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(statisticalSummary7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 100.0d + "'", double14 == 100.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 100.0d + "'", double15 == 100.0d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 100.0d + "'", double16 == 100.0d);
    }

    @Test
    public void test1958() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1958");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        java.util.List list9 = empiricalDistributionImpl1.getBinStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl11 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl13 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int14 = empiricalDistributionImpl13.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary15 = empiricalDistributionImpl13.getSampleStats();
        double[] doubleArray19 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl13.load(doubleArray19);
        empiricalDistributionImpl11.load(doubleArray19);
        double double22 = empiricalDistributionImpl11.getNextValue();
        double[] doubleArray23 = empiricalDistributionImpl11.getUpperBounds();
        double[] doubleArray24 = empiricalDistributionImpl11.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray24);
        boolean boolean26 = empiricalDistributionImpl1.isLoaded();
        boolean boolean27 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary28 = empiricalDistributionImpl1.getSampleStats();
        java.io.File file29 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(file29);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(list9);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 35 + "'", int14 == 35);
        org.junit.Assert.assertNull(statisticalSummary15);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double22 + "' != '" + 32.0d + "'", double22 == 32.0d);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(statisticalSummary28);
    }

    @Test
    public void test1959() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1959");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        int int9 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl11 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl13 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray18 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl13.load(doubleArray18);
        double[] doubleArray20 = empiricalDistributionImpl13.getUpperBounds();
        empiricalDistributionImpl11.load(doubleArray20);
        empiricalDistributionImpl1.load(doubleArray20);
        java.util.List list23 = empiricalDistributionImpl1.getBinStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl25 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int26 = empiricalDistributionImpl25.getBinCount();
        double[] doubleArray28 = new double[] { 100.0d };
        empiricalDistributionImpl25.load(doubleArray28);
        boolean boolean30 = empiricalDistributionImpl25.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary31 = empiricalDistributionImpl25.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary32 = empiricalDistributionImpl25.getSampleStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl34 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl36 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int37 = empiricalDistributionImpl36.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary38 = empiricalDistributionImpl36.getSampleStats();
        double[] doubleArray42 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl36.load(doubleArray42);
        empiricalDistributionImpl34.load(doubleArray42);
        double[] doubleArray48 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl34.load(doubleArray48);
        empiricalDistributionImpl25.load(doubleArray48);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl52 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl54 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int55 = empiricalDistributionImpl54.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary56 = empiricalDistributionImpl54.getSampleStats();
        double[] doubleArray60 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl54.load(doubleArray60);
        empiricalDistributionImpl52.load(doubleArray60);
        empiricalDistributionImpl25.load(doubleArray60);
        empiricalDistributionImpl1.load(doubleArray60);
        double[] doubleArray69 = new double[] { 1.1354582769782435d, (short) 0, (-0.1362032819111886d), 10L };
        empiricalDistributionImpl1.load(doubleArray69);
        int int71 = empiricalDistributionImpl1.getBinCount();
        java.util.List list72 = empiricalDistributionImpl1.getBinStats();
        double double73 = empiricalDistributionImpl1.getNextValue();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary74 = empiricalDistributionImpl1.getSampleStats();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(list23);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 35 + "'", int26 == 35);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(statisticalSummary31);
        org.junit.Assert.assertNotNull(statisticalSummary32);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 35 + "'", int37 == 35);
        org.junit.Assert.assertNull(statisticalSummary38);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 35 + "'", int55 == 35);
        org.junit.Assert.assertNull(statisticalSummary56);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[1.1354582769782435, 0.0, -0.1362032819111886, 10.0]");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 35 + "'", int71 == 35);
        org.junit.Assert.assertNotNull(list72);
// flaky:         org.junit.Assert.assertTrue("'" + double73 + "' != '" + (-0.0998100940109039d) + "'", double73 == (-0.0998100940109039d));
        org.junit.Assert.assertNotNull(statisticalSummary74);
    }

    @Test
    public void test1960() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1960");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        int int9 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl11 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl13 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray18 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl13.load(doubleArray18);
        double[] doubleArray20 = empiricalDistributionImpl13.getUpperBounds();
        empiricalDistributionImpl11.load(doubleArray20);
        empiricalDistributionImpl1.load(doubleArray20);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary23 = empiricalDistributionImpl1.getSampleStats();
        java.util.List list24 = empiricalDistributionImpl1.getBinStats();
        double double25 = empiricalDistributionImpl1.getNextValue();
        java.util.List list26 = empiricalDistributionImpl1.getBinStats();
        java.util.List list27 = empiricalDistributionImpl1.getBinStats();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(statisticalSummary23);
        org.junit.Assert.assertNotNull(list24);
// flaky:         org.junit.Assert.assertTrue("'" + double25 + "' != '" + 1.0d + "'", double25 == 1.0d);
        org.junit.Assert.assertNotNull(list26);
        org.junit.Assert.assertNotNull(list27);
    }

    @Test
    public void test1961() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1961");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 0);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary2 = empiricalDistributionImpl1.getSampleStats();
        java.util.List list3 = empiricalDistributionImpl1.getBinStats();
        java.util.List list4 = empiricalDistributionImpl1.getBinStats();
        int int5 = empiricalDistributionImpl1.getBinCount();
        java.lang.Class<?> wildcardClass6 = empiricalDistributionImpl1.getClass();
        org.junit.Assert.assertNull(statisticalSummary2);
        org.junit.Assert.assertNotNull(list3);
        org.junit.Assert.assertNotNull(list4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test1962() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1962");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        int int12 = empiricalDistributionImpl1.getBinCount();
        java.util.List list13 = empiricalDistributionImpl1.getBinStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary14 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl16 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        boolean boolean17 = empiricalDistributionImpl16.isLoaded();
        int int18 = empiricalDistributionImpl16.getBinCount();
        boolean boolean19 = empiricalDistributionImpl16.isLoaded();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl21 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl23 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int24 = empiricalDistributionImpl23.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary25 = empiricalDistributionImpl23.getSampleStats();
        double[] doubleArray29 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl23.load(doubleArray29);
        empiricalDistributionImpl21.load(doubleArray29);
        double[] doubleArray35 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl21.load(doubleArray35);
        double[] doubleArray37 = empiricalDistributionImpl21.getUpperBounds();
        double double38 = empiricalDistributionImpl21.getNextValue();
        boolean boolean39 = empiricalDistributionImpl21.isLoaded();
        double[] doubleArray40 = empiricalDistributionImpl21.getUpperBounds();
        empiricalDistributionImpl16.load(doubleArray40);
        empiricalDistributionImpl1.load(doubleArray40);
        double[] doubleArray43 = empiricalDistributionImpl1.getUpperBounds();
        java.io.File file44 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(file44);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 100 + "'", int12 == 100);
        org.junit.Assert.assertNotNull(list13);
        org.junit.Assert.assertNotNull(statisticalSummary14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 35 + "'", int18 == 35);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 35 + "'", int24 == 35);
        org.junit.Assert.assertNull(statisticalSummary25);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double38 + "' != '" + (-0.25568700398775884d) + "'", double38 == (-0.25568700398775884d));
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
    }

    @Test
    public void test1963() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1963");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        boolean boolean2 = empiricalDistributionImpl1.isLoaded();
        boolean boolean3 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl5 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl7 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int8 = empiricalDistributionImpl7.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary9 = empiricalDistributionImpl7.getSampleStats();
        double[] doubleArray13 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl7.load(doubleArray13);
        empiricalDistributionImpl5.load(doubleArray13);
        double[] doubleArray19 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl5.load(doubleArray19);
        empiricalDistributionImpl1.load(doubleArray19);
        boolean boolean22 = empiricalDistributionImpl1.isLoaded();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 35 + "'", int8 == 35);
        org.junit.Assert.assertNull(statisticalSummary9);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
    }

    @Test
    public void test1964() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1964");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        double double12 = empiricalDistributionImpl1.getNextValue();
        java.util.List list13 = empiricalDistributionImpl1.getBinStats();
        double double14 = empiricalDistributionImpl1.getNextValue();
        int int15 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary16 = empiricalDistributionImpl1.getSampleStats();
        boolean boolean17 = empiricalDistributionImpl1.isLoaded();
        double double18 = empiricalDistributionImpl1.getNextValue();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl20 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl22 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int23 = empiricalDistributionImpl22.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary24 = empiricalDistributionImpl22.getSampleStats();
        double[] doubleArray28 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl22.load(doubleArray28);
        empiricalDistributionImpl20.load(doubleArray28);
        double[] doubleArray34 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl20.load(doubleArray34);
        double double36 = empiricalDistributionImpl20.getNextValue();
        boolean boolean37 = empiricalDistributionImpl20.isLoaded();
        boolean boolean38 = empiricalDistributionImpl20.isLoaded();
        double[] doubleArray39 = empiricalDistributionImpl20.getUpperBounds();
        int int40 = empiricalDistributionImpl20.getBinCount();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl42 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl44 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int45 = empiricalDistributionImpl44.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary46 = empiricalDistributionImpl44.getSampleStats();
        double[] doubleArray50 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl44.load(doubleArray50);
        empiricalDistributionImpl42.load(doubleArray50);
        double[] doubleArray56 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl42.load(doubleArray56);
        double[] doubleArray58 = empiricalDistributionImpl42.getUpperBounds();
        double double59 = empiricalDistributionImpl42.getNextValue();
        double[] doubleArray60 = empiricalDistributionImpl42.getUpperBounds();
        empiricalDistributionImpl20.load(doubleArray60);
        empiricalDistributionImpl1.load(doubleArray60);
        java.net.URL uRL63 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(uRL63);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double12 + "' != '" + 32.0d + "'", double12 == 32.0d);
        org.junit.Assert.assertNotNull(list13);
// flaky:         org.junit.Assert.assertTrue("'" + double14 + "' != '" + 10.0d + "'", double14 == 10.0d);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 100 + "'", int15 == 100);
        org.junit.Assert.assertNotNull(statisticalSummary16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
// flaky:         org.junit.Assert.assertTrue("'" + double18 + "' != '" + 1.0d + "'", double18 == 1.0d);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 35 + "'", int23 == 35);
        org.junit.Assert.assertNull(statisticalSummary24);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[-1.0, 0.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double36 + "' != '" + (-1.2581232838360286d) + "'", double36 == (-1.2581232838360286d));
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 35 + "'", int45 == 35);
        org.junit.Assert.assertNull(statisticalSummary46);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double59 + "' != '" + (-1.2581232838360286d) + "'", double59 == (-1.2581232838360286d));
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0]");
    }

    @Test
    public void test1965() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1965");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        int int12 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray13 = empiricalDistributionImpl1.getUpperBounds();
        java.util.List list14 = empiricalDistributionImpl1.getBinStats();
        boolean boolean15 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl17 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl19 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int20 = empiricalDistributionImpl19.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary21 = empiricalDistributionImpl19.getSampleStats();
        double[] doubleArray25 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl19.load(doubleArray25);
        empiricalDistributionImpl17.load(doubleArray25);
        int int28 = empiricalDistributionImpl17.getBinCount();
        java.util.List list29 = empiricalDistributionImpl17.getBinStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary30 = empiricalDistributionImpl17.getSampleStats();
        boolean boolean31 = empiricalDistributionImpl17.isLoaded();
        int int32 = empiricalDistributionImpl17.getBinCount();
        boolean boolean33 = empiricalDistributionImpl17.isLoaded();
        double[] doubleArray34 = empiricalDistributionImpl17.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray34);
        int int36 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl38 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray43 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl38.load(doubleArray43);
        double[] doubleArray45 = empiricalDistributionImpl38.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray45);
        java.util.List list47 = empiricalDistributionImpl1.getBinStats();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 100 + "'", int12 == 100);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(list14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 35 + "'", int20 == 35);
        org.junit.Assert.assertNull(statisticalSummary21);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 100 + "'", int28 == 100);
        org.junit.Assert.assertNotNull(list29);
        org.junit.Assert.assertNotNull(statisticalSummary30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 100 + "'", int32 == 100);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 100 + "'", int36 == 100);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(list47);
    }

    @Test
    public void test1966() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1966");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        int int12 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray13 = empiricalDistributionImpl1.getUpperBounds();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary14 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary15 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary16 = empiricalDistributionImpl1.getSampleStats();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 100 + "'", int12 == 100);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(statisticalSummary14);
        org.junit.Assert.assertNotNull(statisticalSummary15);
        org.junit.Assert.assertNotNull(statisticalSummary16);
    }

    @Test
    public void test1967() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1967");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        double double12 = empiricalDistributionImpl1.getNextValue();
        java.util.List list13 = empiricalDistributionImpl1.getBinStats();
        double double14 = empiricalDistributionImpl1.getNextValue();
        int int15 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl17 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int18 = empiricalDistributionImpl17.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary19 = empiricalDistributionImpl17.getSampleStats();
        double[] doubleArray23 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl17.load(doubleArray23);
        int int25 = empiricalDistributionImpl17.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary26 = empiricalDistributionImpl17.getSampleStats();
        double[] doubleArray27 = empiricalDistributionImpl17.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray27);
        int int29 = empiricalDistributionImpl1.getBinCount();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double12 + "' != '" + 32.0d + "'", double12 == 32.0d);
        org.junit.Assert.assertNotNull(list13);
// flaky:         org.junit.Assert.assertTrue("'" + double14 + "' != '" + 1.0d + "'", double14 == 1.0d);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 100 + "'", int15 == 100);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 35 + "'", int18 == 35);
        org.junit.Assert.assertNull(statisticalSummary19);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 35 + "'", int25 == 35);
        org.junit.Assert.assertNotNull(statisticalSummary26);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 1.0]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 100 + "'", int29 == 100);
    }

    @Test
    public void test1968() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1968");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int2 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray4 = new double[] { 100.0d };
        empiricalDistributionImpl1.load(doubleArray4);
        boolean boolean6 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary7 = empiricalDistributionImpl1.getSampleStats();
        int int8 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary9 = empiricalDistributionImpl1.getSampleStats();
        double double10 = empiricalDistributionImpl1.getNextValue();
        boolean boolean11 = empiricalDistributionImpl1.isLoaded();
        java.util.List list12 = empiricalDistributionImpl1.getBinStats();
        boolean boolean13 = empiricalDistributionImpl1.isLoaded();
        java.util.List list14 = empiricalDistributionImpl1.getBinStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary15 = empiricalDistributionImpl1.getSampleStats();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 35 + "'", int2 == 35);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(statisticalSummary7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 35 + "'", int8 == 35);
        org.junit.Assert.assertNotNull(statisticalSummary9);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 100.0d + "'", double10 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(list12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(list14);
        org.junit.Assert.assertNotNull(statisticalSummary15);
    }

    @Test
    public void test1969() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1969");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray8 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl3.load(doubleArray8);
        double[] doubleArray10 = empiricalDistributionImpl3.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray10);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl13 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int14 = empiricalDistributionImpl13.getBinCount();
        double[] doubleArray16 = new double[] { 100.0d };
        empiricalDistributionImpl13.load(doubleArray16);
        empiricalDistributionImpl1.load(doubleArray16);
        java.util.List list19 = empiricalDistributionImpl1.getBinStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary20 = empiricalDistributionImpl1.getSampleStats();
        double double21 = empiricalDistributionImpl1.getNextValue();
        java.util.List list22 = empiricalDistributionImpl1.getBinStats();
        int int23 = empiricalDistributionImpl1.getBinCount();
        boolean boolean24 = empiricalDistributionImpl1.isLoaded();
        double[] doubleArray25 = empiricalDistributionImpl1.getUpperBounds();
        double[] doubleArray26 = empiricalDistributionImpl1.getUpperBounds();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary27 = empiricalDistributionImpl1.getSampleStats();
        java.util.List list28 = empiricalDistributionImpl1.getBinStats();
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 35 + "'", int14 == 35);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[100.0]");
        org.junit.Assert.assertNotNull(list19);
        org.junit.Assert.assertNotNull(statisticalSummary20);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 100.0d + "'", double21 == 100.0d);
        org.junit.Assert.assertNotNull(list22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 35 + "'", int23 == 35);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(statisticalSummary27);
        org.junit.Assert.assertNotNull(list28);
    }

    @Test
    public void test1970() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1970");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl10 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl12 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int13 = empiricalDistributionImpl12.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary14 = empiricalDistributionImpl12.getSampleStats();
        double[] doubleArray18 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl12.load(doubleArray18);
        empiricalDistributionImpl10.load(doubleArray18);
        empiricalDistributionImpl1.load(doubleArray18);
        double double22 = empiricalDistributionImpl1.getNextValue();
        java.util.List list23 = empiricalDistributionImpl1.getBinStats();
        int int24 = empiricalDistributionImpl1.getBinCount();
        int int25 = empiricalDistributionImpl1.getBinCount();
        int int26 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary27 = empiricalDistributionImpl1.getSampleStats();
        java.lang.Class<?> wildcardClass28 = statisticalSummary27.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
        org.junit.Assert.assertNull(statisticalSummary14);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1.0d + "'", double22 == 1.0d);
        org.junit.Assert.assertNotNull(list23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 35 + "'", int24 == 35);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 35 + "'", int25 == 35);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 35 + "'", int26 == 35);
        org.junit.Assert.assertNotNull(statisticalSummary27);
        org.junit.Assert.assertNotNull(wildcardClass28);
    }

    @Test
    public void test1971() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1971");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int2 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray4 = new double[] { 100.0d };
        empiricalDistributionImpl1.load(doubleArray4);
        boolean boolean6 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary7 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary8 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl10 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl12 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int13 = empiricalDistributionImpl12.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary14 = empiricalDistributionImpl12.getSampleStats();
        double[] doubleArray18 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl12.load(doubleArray18);
        empiricalDistributionImpl10.load(doubleArray18);
        double[] doubleArray24 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl10.load(doubleArray24);
        empiricalDistributionImpl1.load(doubleArray24);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary27 = empiricalDistributionImpl1.getSampleStats();
        double[] doubleArray28 = empiricalDistributionImpl1.getUpperBounds();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl30 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray35 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl30.load(doubleArray35);
        double[] doubleArray37 = empiricalDistributionImpl30.getUpperBounds();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl39 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl41 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int42 = empiricalDistributionImpl41.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary43 = empiricalDistributionImpl41.getSampleStats();
        double[] doubleArray47 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl41.load(doubleArray47);
        empiricalDistributionImpl39.load(doubleArray47);
        empiricalDistributionImpl30.load(doubleArray47);
        double double51 = empiricalDistributionImpl30.getNextValue();
        java.util.List list52 = empiricalDistributionImpl30.getBinStats();
        int int53 = empiricalDistributionImpl30.getBinCount();
        java.util.List list54 = empiricalDistributionImpl30.getBinStats();
        double double55 = empiricalDistributionImpl30.getNextValue();
        java.util.List list56 = empiricalDistributionImpl30.getBinStats();
        double[] doubleArray57 = empiricalDistributionImpl30.getUpperBounds();
        double[] doubleArray58 = empiricalDistributionImpl30.getUpperBounds();
        java.util.List list59 = empiricalDistributionImpl30.getBinStats();
        double[] doubleArray60 = empiricalDistributionImpl30.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray60);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 35 + "'", int2 == 35);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(statisticalSummary7);
        org.junit.Assert.assertNotNull(statisticalSummary8);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
        org.junit.Assert.assertNull(statisticalSummary14);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(statisticalSummary27);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 35 + "'", int42 == 35);
        org.junit.Assert.assertNull(statisticalSummary43);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double51 + "' != '" + 1.0d + "'", double51 == 1.0d);
        org.junit.Assert.assertNotNull(list52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 35 + "'", int53 == 35);
        org.junit.Assert.assertNotNull(list54);
// flaky:         org.junit.Assert.assertTrue("'" + double55 + "' != '" + 1.0d + "'", double55 == 1.0d);
        org.junit.Assert.assertNotNull(list56);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 1.0]");
        org.junit.Assert.assertNotNull(list59);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 1.0]");
    }

    @Test
    public void test1972() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1972");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int2 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray4 = new double[] { 100.0d };
        empiricalDistributionImpl1.load(doubleArray4);
        boolean boolean6 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary7 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary8 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl10 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl12 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int13 = empiricalDistributionImpl12.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary14 = empiricalDistributionImpl12.getSampleStats();
        double[] doubleArray18 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl12.load(doubleArray18);
        empiricalDistributionImpl10.load(doubleArray18);
        double[] doubleArray24 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl10.load(doubleArray24);
        empiricalDistributionImpl1.load(doubleArray24);
        double[] doubleArray27 = empiricalDistributionImpl1.getUpperBounds();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl29 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl31 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int32 = empiricalDistributionImpl31.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary33 = empiricalDistributionImpl31.getSampleStats();
        double[] doubleArray37 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl31.load(doubleArray37);
        empiricalDistributionImpl29.load(doubleArray37);
        double double40 = empiricalDistributionImpl29.getNextValue();
        double[] doubleArray41 = empiricalDistributionImpl29.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray41);
        java.net.URL uRL43 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(uRL43);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 35 + "'", int2 == 35);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(statisticalSummary7);
        org.junit.Assert.assertNotNull(statisticalSummary8);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
        org.junit.Assert.assertNull(statisticalSummary14);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 1.0]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 35 + "'", int32 == 35);
        org.junit.Assert.assertNull(statisticalSummary33);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double40 + "' != '" + 10.0d + "'", double40 == 10.0d);
        org.junit.Assert.assertNotNull(doubleArray41);
    }

    @Test
    public void test1973() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1973");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        double[] doubleArray15 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl1.load(doubleArray15);
        double[] doubleArray17 = empiricalDistributionImpl1.getUpperBounds();
        double double18 = empiricalDistributionImpl1.getNextValue();
        boolean boolean19 = empiricalDistributionImpl1.isLoaded();
        int int20 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary21 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary22 = empiricalDistributionImpl1.getSampleStats();
        boolean boolean23 = empiricalDistributionImpl1.isLoaded();
        boolean boolean24 = empiricalDistributionImpl1.isLoaded();
        java.util.List list25 = empiricalDistributionImpl1.getBinStats();
        java.util.List list26 = empiricalDistributionImpl1.getBinStats();
        int int27 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary28 = empiricalDistributionImpl1.getSampleStats();
        java.util.List list29 = empiricalDistributionImpl1.getBinStats();
        java.net.URL uRL30 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(uRL30);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double18 + "' != '" + 1.3826489035101142d + "'", double18 == 1.3826489035101142d);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(statisticalSummary21);
        org.junit.Assert.assertNotNull(statisticalSummary22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(list25);
        org.junit.Assert.assertNotNull(list26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(statisticalSummary28);
        org.junit.Assert.assertNotNull(list29);
    }

    @Test
    public void test1974() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1974");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        java.util.List list12 = empiricalDistributionImpl1.getBinStats();
        double double13 = empiricalDistributionImpl1.getNextValue();
        double double14 = empiricalDistributionImpl1.getNextValue();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary15 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary16 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary17 = empiricalDistributionImpl1.getSampleStats();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(list12);
// flaky:         org.junit.Assert.assertTrue("'" + double13 + "' != '" + 10.0d + "'", double13 == 10.0d);
// flaky:         org.junit.Assert.assertTrue("'" + double14 + "' != '" + 32.0d + "'", double14 == 32.0d);
        org.junit.Assert.assertNotNull(statisticalSummary15);
        org.junit.Assert.assertNotNull(statisticalSummary16);
        org.junit.Assert.assertNotNull(statisticalSummary17);
    }

    @Test
    public void test1975() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1975");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        double double12 = empiricalDistributionImpl1.getNextValue();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl14 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl16 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int17 = empiricalDistributionImpl16.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary18 = empiricalDistributionImpl16.getSampleStats();
        double[] doubleArray22 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl16.load(doubleArray22);
        empiricalDistributionImpl14.load(doubleArray22);
        double double25 = empiricalDistributionImpl14.getNextValue();
        double[] doubleArray26 = empiricalDistributionImpl14.getUpperBounds();
        double[] doubleArray27 = empiricalDistributionImpl14.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray27);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl30 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl32 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int33 = empiricalDistributionImpl32.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary34 = empiricalDistributionImpl32.getSampleStats();
        double[] doubleArray38 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl32.load(doubleArray38);
        empiricalDistributionImpl30.load(doubleArray38);
        double[] doubleArray44 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl30.load(doubleArray44);
        double[] doubleArray46 = empiricalDistributionImpl30.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray46);
        java.util.List list48 = empiricalDistributionImpl1.getBinStats();
        java.io.File file49 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(file49);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double12 + "' != '" + 1.0d + "'", double12 == 1.0d);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 35 + "'", int17 == 35);
        org.junit.Assert.assertNull(statisticalSummary18);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double25 + "' != '" + 1.0d + "'", double25 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 35 + "'", int33 == 35);
        org.junit.Assert.assertNull(statisticalSummary34);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0]");
        org.junit.Assert.assertNotNull(list48);
    }

    @Test
    public void test1976() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1976");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int2 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray4 = new double[] { 100.0d };
        empiricalDistributionImpl1.load(doubleArray4);
        boolean boolean6 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary7 = empiricalDistributionImpl1.getSampleStats();
        boolean boolean8 = empiricalDistributionImpl1.isLoaded();
        boolean boolean9 = empiricalDistributionImpl1.isLoaded();
        double double10 = empiricalDistributionImpl1.getNextValue();
        java.util.List list11 = empiricalDistributionImpl1.getBinStats();
        java.util.List list12 = empiricalDistributionImpl1.getBinStats();
        java.io.File file13 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(file13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 35 + "'", int2 == 35);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(statisticalSummary7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 100.0d + "'", double10 == 100.0d);
        org.junit.Assert.assertNotNull(list11);
        org.junit.Assert.assertNotNull(list12);
    }

    @Test
    public void test1977() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1977");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        double double12 = empiricalDistributionImpl1.getNextValue();
        java.util.List list13 = empiricalDistributionImpl1.getBinStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl15 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int16 = empiricalDistributionImpl15.getBinCount();
        double[] doubleArray18 = new double[] { 100.0d };
        empiricalDistributionImpl15.load(doubleArray18);
        boolean boolean20 = empiricalDistributionImpl15.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary21 = empiricalDistributionImpl15.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary22 = empiricalDistributionImpl15.getSampleStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl24 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl26 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int27 = empiricalDistributionImpl26.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary28 = empiricalDistributionImpl26.getSampleStats();
        double[] doubleArray32 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl26.load(doubleArray32);
        empiricalDistributionImpl24.load(doubleArray32);
        double[] doubleArray38 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl24.load(doubleArray38);
        empiricalDistributionImpl15.load(doubleArray38);
        double[] doubleArray41 = empiricalDistributionImpl15.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray41);
        java.io.File file43 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(file43);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertNotNull(list13);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 35 + "'", int16 == 35);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(statisticalSummary21);
        org.junit.Assert.assertNotNull(statisticalSummary22);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 35 + "'", int27 == 35);
        org.junit.Assert.assertNull(statisticalSummary28);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 1.0]");
    }

    @Test
    public void test1978() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1978");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        int int9 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray10 = empiricalDistributionImpl1.getUpperBounds();
        int int11 = empiricalDistributionImpl1.getBinCount();
        java.util.List list12 = empiricalDistributionImpl1.getBinStats();
        boolean boolean13 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary14 = empiricalDistributionImpl1.getSampleStats();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 35 + "'", int11 == 35);
        org.junit.Assert.assertNotNull(list12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(statisticalSummary14);
    }

    @Test
    public void test1979() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1979");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        int int9 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl11 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl13 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray18 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl13.load(doubleArray18);
        double[] doubleArray20 = empiricalDistributionImpl13.getUpperBounds();
        empiricalDistributionImpl11.load(doubleArray20);
        empiricalDistributionImpl1.load(doubleArray20);
        java.util.List list23 = empiricalDistributionImpl1.getBinStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl25 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int26 = empiricalDistributionImpl25.getBinCount();
        double[] doubleArray28 = new double[] { 100.0d };
        empiricalDistributionImpl25.load(doubleArray28);
        boolean boolean30 = empiricalDistributionImpl25.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary31 = empiricalDistributionImpl25.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary32 = empiricalDistributionImpl25.getSampleStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl34 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl36 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int37 = empiricalDistributionImpl36.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary38 = empiricalDistributionImpl36.getSampleStats();
        double[] doubleArray42 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl36.load(doubleArray42);
        empiricalDistributionImpl34.load(doubleArray42);
        double[] doubleArray48 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl34.load(doubleArray48);
        empiricalDistributionImpl25.load(doubleArray48);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl52 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl54 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int55 = empiricalDistributionImpl54.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary56 = empiricalDistributionImpl54.getSampleStats();
        double[] doubleArray60 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl54.load(doubleArray60);
        empiricalDistributionImpl52.load(doubleArray60);
        empiricalDistributionImpl25.load(doubleArray60);
        empiricalDistributionImpl1.load(doubleArray60);
        java.util.List list65 = empiricalDistributionImpl1.getBinStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl67 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl69 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int70 = empiricalDistributionImpl69.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary71 = empiricalDistributionImpl69.getSampleStats();
        double[] doubleArray75 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl69.load(doubleArray75);
        empiricalDistributionImpl67.load(doubleArray75);
        double double78 = empiricalDistributionImpl67.getNextValue();
        java.util.List list79 = empiricalDistributionImpl67.getBinStats();
        double double80 = empiricalDistributionImpl67.getNextValue();
        int int81 = empiricalDistributionImpl67.getBinCount();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl83 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int84 = empiricalDistributionImpl83.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary85 = empiricalDistributionImpl83.getSampleStats();
        double[] doubleArray89 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl83.load(doubleArray89);
        int int91 = empiricalDistributionImpl83.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary92 = empiricalDistributionImpl83.getSampleStats();
        double[] doubleArray93 = empiricalDistributionImpl83.getUpperBounds();
        empiricalDistributionImpl67.load(doubleArray93);
        empiricalDistributionImpl1.load(doubleArray93);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(list23);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 35 + "'", int26 == 35);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(statisticalSummary31);
        org.junit.Assert.assertNotNull(statisticalSummary32);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 35 + "'", int37 == 35);
        org.junit.Assert.assertNull(statisticalSummary38);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 35 + "'", int55 == 35);
        org.junit.Assert.assertNull(statisticalSummary56);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(list65);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 35 + "'", int70 == 35);
        org.junit.Assert.assertNull(statisticalSummary71);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double78 + "' != '" + 32.0d + "'", double78 == 32.0d);
        org.junit.Assert.assertNotNull(list79);
// flaky:         org.junit.Assert.assertTrue("'" + double80 + "' != '" + 1.0d + "'", double80 == 1.0d);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 100 + "'", int81 == 100);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 35 + "'", int84 == 35);
        org.junit.Assert.assertNull(statisticalSummary85);
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray89), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 35 + "'", int91 == 35);
        org.junit.Assert.assertNotNull(statisticalSummary92);
        org.junit.Assert.assertNotNull(doubleArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray93), "[0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 1.0]");
    }

    @Test
    public void test1980() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1980");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 100);
        int int2 = empiricalDistributionImpl1.getBinCount();
        int int3 = empiricalDistributionImpl1.getBinCount();
        boolean boolean4 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl1.getSampleStats();
        java.util.List list6 = empiricalDistributionImpl1.getBinStats();
        // The following exception was thrown during execution in test generation
        try {
            double double7 = empiricalDistributionImpl1.getNextValue();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: distribution not loaded");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 100 + "'", int2 == 100);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 100 + "'", int3 == 100);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(list6);
    }

    @Test
    public void test1981() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1981");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray8 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl3.load(doubleArray8);
        double[] doubleArray10 = empiricalDistributionImpl3.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray10);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl13 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int14 = empiricalDistributionImpl13.getBinCount();
        double[] doubleArray16 = new double[] { 100.0d };
        empiricalDistributionImpl13.load(doubleArray16);
        empiricalDistributionImpl1.load(doubleArray16);
        double[] doubleArray19 = empiricalDistributionImpl1.getUpperBounds();
        double double20 = empiricalDistributionImpl1.getNextValue();
        double double21 = empiricalDistributionImpl1.getNextValue();
        boolean boolean22 = empiricalDistributionImpl1.isLoaded();
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 35 + "'", int14 == 35);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[100.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 100.0d + "'", double20 == 100.0d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 100.0d + "'", double21 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
    }

    @Test
    public void test1982() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1982");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        boolean boolean12 = empiricalDistributionImpl1.isLoaded();
        boolean boolean13 = empiricalDistributionImpl1.isLoaded();
        java.util.List list14 = empiricalDistributionImpl1.getBinStats();
        java.util.List list15 = empiricalDistributionImpl1.getBinStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl17 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray22 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl17.load(doubleArray22);
        double double24 = empiricalDistributionImpl17.getNextValue();
        double double25 = empiricalDistributionImpl17.getNextValue();
        java.util.List list26 = empiricalDistributionImpl17.getBinStats();
        double double27 = empiricalDistributionImpl17.getNextValue();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl29 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl31 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int32 = empiricalDistributionImpl31.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary33 = empiricalDistributionImpl31.getSampleStats();
        double[] doubleArray37 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl31.load(doubleArray37);
        empiricalDistributionImpl29.load(doubleArray37);
        double double40 = empiricalDistributionImpl29.getNextValue();
        java.util.List list41 = empiricalDistributionImpl29.getBinStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl43 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray48 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl43.load(doubleArray48);
        double double50 = empiricalDistributionImpl43.getNextValue();
        double double51 = empiricalDistributionImpl43.getNextValue();
        int int52 = empiricalDistributionImpl43.getBinCount();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl54 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int55 = empiricalDistributionImpl54.getBinCount();
        double[] doubleArray57 = new double[] { 100.0d };
        empiricalDistributionImpl54.load(doubleArray57);
        double double59 = empiricalDistributionImpl54.getNextValue();
        boolean boolean60 = empiricalDistributionImpl54.isLoaded();
        double[] doubleArray61 = empiricalDistributionImpl54.getUpperBounds();
        empiricalDistributionImpl43.load(doubleArray61);
        empiricalDistributionImpl29.load(doubleArray61);
        empiricalDistributionImpl17.load(doubleArray61);
        empiricalDistributionImpl1.load(doubleArray61);
        java.util.List list66 = empiricalDistributionImpl1.getBinStats();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(list14);
        org.junit.Assert.assertNotNull(list15);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[10.0, -1.0, 1.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double24 + "' != '" + (-1.0d) + "'", double24 == (-1.0d));
// flaky:         org.junit.Assert.assertTrue("'" + double25 + "' != '" + 1.0d + "'", double25 == 1.0d);
        org.junit.Assert.assertNotNull(list26);
// flaky:         org.junit.Assert.assertTrue("'" + double27 + "' != '" + 10.0d + "'", double27 == 10.0d);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 35 + "'", int32 == 35);
        org.junit.Assert.assertNull(statisticalSummary33);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double40 + "' != '" + 32.0d + "'", double40 == 32.0d);
        org.junit.Assert.assertNotNull(list41);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[10.0, -1.0, 1.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double50 + "' != '" + 1.0d + "'", double50 == 1.0d);
// flaky:         org.junit.Assert.assertTrue("'" + double51 + "' != '" + 1.0d + "'", double51 == 1.0d);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 35 + "'", int52 == 35);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 35 + "'", int55 == 35);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[100.0]");
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 100.0d + "'", double59 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(list66);
    }
}

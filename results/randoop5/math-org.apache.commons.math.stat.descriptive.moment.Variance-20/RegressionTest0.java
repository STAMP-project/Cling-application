import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest0 {

    public static boolean debug = false;

    @Test
    public void test0001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0001");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = null;
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment1);
        // The following exception was thrown during execution in test generation
        try {
            long long3 = variance2.getN();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0002");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = null;
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment4 = null;
        org.apache.commons.math.stat.descriptive.moment.Variance variance5 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment4);
        double[] doubleArray6 = new double[] {};
        double double9 = variance5.evaluate(doubleArray6, 0, 0);
        // The following exception was thrown during execution in test generation
        try {
            double double13 = variance2.evaluate(doubleArray6, (double) (short) 10, (int) (short) 0, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double9));
    }

    @Test
    public void test0003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0003");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray2 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double6 = variance1.evaluate(doubleArray2, (double) 1, (int) (byte) 0, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: input value array is null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0004");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray8 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double9 = variance1.evaluate(doubleArray8);
        variance1.setBiasCorrected(true);
        long long12 = variance1.getN();
        double[] doubleArray13 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double14 = variance1.evaluate(doubleArray13);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: input values array is null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 2168.222222222222d + "'", double9 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
    }

    @Test
    public void test0005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0005");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray6 = new double[] { 1.0f, (-1.0d), 100L, 0.0f };
        // The following exception was thrown during execution in test generation
        try {
            variance1.incrementAll(doubleArray6, (int) (byte) 100, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, -1.0, 100.0, 0.0]");
    }

    @Test
    public void test0006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0006");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = null;
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment1);
        double[] doubleArray3 = new double[] {};
        double double6 = variance2.evaluate(doubleArray3, 0, 0);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment8 = null;
        org.apache.commons.math.stat.descriptive.moment.Variance variance9 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment8);
        double[] doubleArray10 = new double[] {};
        double double13 = variance9.evaluate(doubleArray10, 0, 0);
        // The following exception was thrown during execution in test generation
        try {
            double double17 = variance2.evaluate(doubleArray10, (double) 0, (int) (short) 0, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double13));
    }

    @Test
    public void test0007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0007");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray8 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double9 = variance1.evaluate(doubleArray8);
        long long10 = variance1.getN();
        java.lang.Class<?> wildcardClass11 = variance1.getClass();
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 2168.222222222222d + "'", double9 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test0008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0008");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        variance1.clear();
        double[] doubleArray6 = new double[] { (-1), 10L, (short) 0 };
        // The following exception was thrown during execution in test generation
        try {
            variance1.incrementAll(doubleArray6, (int) '#', (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: length cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[-1.0, 10.0, 0.0]");
    }

    @Test
    public void test0009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0009");
        org.apache.commons.math.stat.descriptive.moment.Variance variance0 = new org.apache.commons.math.stat.descriptive.moment.Variance();
        long long1 = variance0.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment3 = null;
        org.apache.commons.math.stat.descriptive.moment.Variance variance4 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment3);
        variance4.clear();
        double[] doubleArray6 = new double[] {};
        variance4.incrementAll(doubleArray6);
        // The following exception was thrown during execution in test generation
        try {
            double double11 = variance0.evaluate(doubleArray6, 16.566666666666663d, (int) 'a', 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[]");
    }

    @Test
    public void test0010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0010");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray8 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double9 = variance1.evaluate(doubleArray8);
        long long10 = variance1.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance12 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray19 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double20 = variance12.evaluate(doubleArray19);
        variance12.setBiasCorrected(true);
        boolean boolean23 = variance12.isBiasCorrected();
        double[] doubleArray30 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double31 = variance12.evaluate(doubleArray30);
        // The following exception was thrown during execution in test generation
        try {
            double double35 = variance1.evaluate(doubleArray30, (double) (byte) 10, (int) ' ', (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 2168.222222222222d + "'", double9 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 2168.222222222222d + "'", double20 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 16.566666666666663d + "'", double31 == 16.566666666666663d);
    }

    @Test
    public void test0011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0011");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment3 = null;
        org.apache.commons.math.stat.descriptive.moment.Variance variance4 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment3);
        variance4.clear();
        double[] doubleArray6 = new double[] {};
        variance4.incrementAll(doubleArray6);
        // The following exception was thrown during execution in test generation
        try {
            variance1.incrementAll(doubleArray6, (int) (byte) 1, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: length cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[]");
    }

    @Test
    public void test0012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0012");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment3 = null;
        org.apache.commons.math.stat.descriptive.moment.Variance variance4 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment3);
        double[] doubleArray5 = new double[] {};
        double double8 = variance4.evaluate(doubleArray5, 0, 0);
        variance4.setBiasCorrected(true);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean11 = variance1.equals((java.lang.Object) variance4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double8));
    }

    @Test
    public void test0013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0013");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray8 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double9 = variance1.evaluate(doubleArray8);
        double[] doubleArray13 = new double[] { (byte) 1, (byte) 100, 1L };
        double double14 = variance1.evaluate(doubleArray13);
        java.lang.Class<?> wildcardClass15 = doubleArray13.getClass();
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 2168.222222222222d + "'", double9 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, 100.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 2178.0d + "'", double14 == 2178.0d);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test0014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0014");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray8 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double9 = variance1.evaluate(doubleArray8);
        variance1.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance13 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray20 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double21 = variance13.evaluate(doubleArray20);
        variance1.incrementAll(doubleArray20);
        java.lang.Class<?> wildcardClass23 = doubleArray20.getClass();
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 2168.222222222222d + "'", double9 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 2168.222222222222d + "'", double21 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(wildcardClass23);
    }

    @Test
    public void test0015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0015");
        org.apache.commons.math.stat.descriptive.moment.Variance variance0 = new org.apache.commons.math.stat.descriptive.moment.Variance();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment2 = null;
        org.apache.commons.math.stat.descriptive.moment.Variance variance3 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment2);
        double[] doubleArray4 = new double[] {};
        double double7 = variance3.evaluate(doubleArray4, 0, 0);
        // The following exception was thrown during execution in test generation
        try {
            double double10 = variance0.evaluate(doubleArray4, (int) (byte) 0, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double7));
    }

    @Test
    public void test0016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0016");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray8 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double9 = variance1.evaluate(doubleArray8);
        variance1.setBiasCorrected(true);
        boolean boolean12 = variance1.isBiasCorrected();
        double[] doubleArray19 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double20 = variance1.evaluate(doubleArray19);
        java.lang.Class<?> wildcardClass21 = variance1.getClass();
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 2168.222222222222d + "'", double9 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 16.566666666666663d + "'", double20 == 16.566666666666663d);
        org.junit.Assert.assertNotNull(wildcardClass21);
    }

    @Test
    public void test0017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0017");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = null;
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment1);
        double[] doubleArray3 = new double[] {};
        double double6 = variance2.evaluate(doubleArray3, 0, 0);
        boolean boolean8 = variance2.equals((java.lang.Object) 10);
        // The following exception was thrown during execution in test generation
        try {
            long long9 = variance2.getN();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test0018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0018");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray8 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double9 = variance1.evaluate(doubleArray8);
        variance1.setBiasCorrected(true);
        boolean boolean12 = variance1.isBiasCorrected();
        double[] doubleArray19 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double20 = variance1.evaluate(doubleArray19);
        org.apache.commons.math.stat.descriptive.moment.Variance variance22 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray29 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double30 = variance22.evaluate(doubleArray29);
        variance22.setBiasCorrected(true);
        boolean boolean33 = variance22.isBiasCorrected();
        double[] doubleArray40 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double41 = variance22.evaluate(doubleArray40);
        double double44 = variance1.evaluate(doubleArray40, (int) (byte) 1, 0);
        java.lang.Class<?> wildcardClass45 = doubleArray40.getClass();
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 2168.222222222222d + "'", double9 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 16.566666666666663d + "'", double20 == 16.566666666666663d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 2168.222222222222d + "'", double30 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 16.566666666666663d + "'", double41 == 16.566666666666663d);
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertNotNull(wildcardClass45);
    }

    @Test
    public void test0019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0019");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = null;
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment1);
        variance2.increment(0.0d);
        variance2.clear();
        variance2.clear();
        java.lang.Class<?> wildcardClass7 = variance2.getClass();
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test0020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0020");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray8 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double9 = variance1.evaluate(doubleArray8);
        variance1.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance13 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray20 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double21 = variance13.evaluate(doubleArray20);
        double[] doubleArray25 = new double[] { (byte) 1, (byte) 100, 1L };
        double double26 = variance13.evaluate(doubleArray25);
        org.apache.commons.math.stat.descriptive.moment.Variance variance28 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray35 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double36 = variance28.evaluate(doubleArray35);
        variance28.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance40 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray47 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double48 = variance40.evaluate(doubleArray47);
        variance28.incrementAll(doubleArray47);
        variance13.incrementAll(doubleArray47);
        // The following exception was thrown during execution in test generation
        try {
            variance1.incrementAll(doubleArray47, 1, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: length cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 2168.222222222222d + "'", double9 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 2168.222222222222d + "'", double21 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, 100.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 2178.0d + "'", double26 == 2178.0d);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 2168.222222222222d + "'", double36 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 2168.222222222222d + "'", double48 == 2168.222222222222d);
    }

    @Test
    public void test0021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0021");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = null;
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        // The following exception was thrown during execution in test generation
        try {
            double double3 = variance2.getResult();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0022");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray8 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double9 = variance1.evaluate(doubleArray8);
        variance1.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance13 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray20 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double21 = variance13.evaluate(doubleArray20);
        variance1.incrementAll(doubleArray20);
        java.lang.Class<?> wildcardClass23 = variance1.getClass();
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 2168.222222222222d + "'", double9 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 2168.222222222222d + "'", double21 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(wildcardClass23);
    }

    @Test
    public void test0023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0023");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = null;
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment1);
        double[] doubleArray3 = new double[] {};
        double double6 = variance2.evaluate(doubleArray3, 0, 0);
        boolean boolean8 = variance2.equals((java.lang.Object) 10.0f);
        double[] doubleArray12 = new double[] { 10.0d, (byte) 1, Double.NaN };
        // The following exception was thrown during execution in test generation
        try {
            variance2.incrementAll(doubleArray12, 10, (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[10.0, 1.0, NaN]");
    }

    @Test
    public void test0024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0024");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray8 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double9 = variance1.evaluate(doubleArray8);
        variance1.setBiasCorrected(true);
        long long12 = variance1.getN();
        long long13 = variance1.getN();
        double double14 = variance1.getResult();
        variance1.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance17 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray24 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double25 = variance17.evaluate(doubleArray24);
        variance17.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance29 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray36 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double37 = variance29.evaluate(doubleArray36);
        variance29.setBiasCorrected(true);
        boolean boolean40 = variance29.isBiasCorrected();
        double[] doubleArray47 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double48 = variance29.evaluate(doubleArray47);
        double double51 = variance17.evaluate(doubleArray47, (int) (byte) 1, (int) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            double double54 = variance1.evaluate(doubleArray47, (int) (short) 100, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: length cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 2168.222222222222d + "'", double9 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 2168.222222222222d + "'", double25 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 2168.222222222222d + "'", double37 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 16.566666666666663d + "'", double48 == 16.566666666666663d);
        org.junit.Assert.assertTrue(Double.isNaN(double51));
    }

    @Test
    public void test0025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0025");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = null;
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment1);
        org.apache.commons.math.stat.descriptive.moment.Variance variance4 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray11 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double12 = variance4.evaluate(doubleArray11);
        variance4.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance16 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray23 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double24 = variance16.evaluate(doubleArray23);
        variance4.incrementAll(doubleArray23);
        // The following exception was thrown during execution in test generation
        try {
            variance2.incrementAll(doubleArray23, (int) 'a', (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 2168.222222222222d + "'", double12 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 2168.222222222222d + "'", double24 == 2168.222222222222d);
    }

    @Test
    public void test0026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0026");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = null;
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment1);
        double[] doubleArray3 = new double[] {};
        double double6 = variance2.evaluate(doubleArray3, 0, 0);
        variance2.setBiasCorrected(true);
        // The following exception was thrown during execution in test generation
        try {
            long long9 = variance2.getN();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double6));
    }

    @Test
    public void test0027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0027");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray8 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double9 = variance1.evaluate(doubleArray8);
        variance1.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance13 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray20 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double21 = variance13.evaluate(doubleArray20);
        variance1.incrementAll(doubleArray20);
        variance1.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance25 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray32 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double33 = variance25.evaluate(doubleArray32);
        variance25.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance37 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray44 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double45 = variance37.evaluate(doubleArray44);
        variance37.setBiasCorrected(true);
        boolean boolean48 = variance37.isBiasCorrected();
        double[] doubleArray55 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double56 = variance37.evaluate(doubleArray55);
        double double59 = variance25.evaluate(doubleArray55, (int) (byte) 1, (int) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            double double62 = variance1.evaluate(doubleArray55, (int) (short) 10, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 2168.222222222222d + "'", double9 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 2168.222222222222d + "'", double21 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 2168.222222222222d + "'", double33 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 2168.222222222222d + "'", double45 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 16.566666666666663d + "'", double56 == 16.566666666666663d);
        org.junit.Assert.assertTrue(Double.isNaN(double59));
    }

    @Test
    public void test0028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0028");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = null;
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment1);
        double[] doubleArray3 = new double[] {};
        double double6 = variance2.evaluate(doubleArray3, 0, 0);
        boolean boolean8 = variance2.equals((java.lang.Object) 10.0f);
        boolean boolean9 = variance2.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.Variance variance11 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray18 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double19 = variance11.evaluate(doubleArray18);
        variance11.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance23 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray30 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double31 = variance23.evaluate(doubleArray30);
        variance11.incrementAll(doubleArray30);
        // The following exception was thrown during execution in test generation
        try {
            double double36 = variance2.evaluate(doubleArray30, 16.566666666666663d, (int) (byte) 100, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 2168.222222222222d + "'", double19 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 2168.222222222222d + "'", double31 == 2168.222222222222d);
    }

    @Test
    public void test0029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0029");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray8 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double9 = variance1.evaluate(doubleArray8);
        double[] doubleArray13 = new double[] { (byte) 1, (byte) 100, 1L };
        double double14 = variance1.evaluate(doubleArray13);
        double[] doubleArray15 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double17 = variance1.evaluate(doubleArray15, (double) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 2168.222222222222d + "'", double9 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, 100.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 2178.0d + "'", double14 == 2178.0d);
    }

    @Test
    public void test0030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0030");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray8 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double9 = variance1.evaluate(doubleArray8);
        variance1.setBiasCorrected(true);
        boolean boolean12 = variance1.isBiasCorrected();
        double[] doubleArray19 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double20 = variance1.evaluate(doubleArray19);
        double double21 = variance1.getResult();
        variance1.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance25 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray32 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double33 = variance25.evaluate(doubleArray32);
        variance25.setBiasCorrected(true);
        long long36 = variance25.getN();
        long long37 = variance25.getN();
        double double38 = variance25.getResult();
        variance25.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance41 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray48 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double49 = variance41.evaluate(doubleArray48);
        double[] doubleArray53 = new double[] { (byte) 1, (byte) 100, 1L };
        double double54 = variance41.evaluate(doubleArray53);
        org.apache.commons.math.stat.descriptive.moment.Variance variance56 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray63 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double64 = variance56.evaluate(doubleArray63);
        variance56.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance68 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray75 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double76 = variance68.evaluate(doubleArray75);
        variance56.incrementAll(doubleArray75);
        variance41.incrementAll(doubleArray75);
        double double79 = variance25.evaluate(doubleArray75);
        // The following exception was thrown during execution in test generation
        try {
            variance1.incrementAll(doubleArray75, (int) ' ', (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 2168.222222222222d + "'", double9 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 16.566666666666663d + "'", double20 == 16.566666666666663d);
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 2168.222222222222d + "'", double33 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double38));
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 2168.222222222222d + "'", double49 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0, 100.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 2178.0d + "'", double54 == 2178.0d);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 2168.222222222222d + "'", double64 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 2168.222222222222d + "'", double76 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 2601.866666666667d + "'", double79 == 2601.866666666667d);
    }

    @Test
    public void test0031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0031");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = null;
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment1);
        double[] doubleArray3 = new double[] {};
        double double6 = variance2.evaluate(doubleArray3, 0, 0);
        boolean boolean8 = variance2.equals((java.lang.Object) 10.0f);
        boolean boolean9 = variance2.isBiasCorrected();
        variance2.clear();
        // The following exception was thrown during execution in test generation
        try {
            long long11 = variance2.getN();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void test0032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0032");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = null;
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment1);
        double[] doubleArray3 = new double[] {};
        double double6 = variance2.evaluate(doubleArray3, 0, 0);
        double[] doubleArray7 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double9 = variance2.evaluate(doubleArray7, (double) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double6));
    }

    @Test
    public void test0033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0033");
        org.apache.commons.math.stat.descriptive.moment.Variance variance0 = new org.apache.commons.math.stat.descriptive.moment.Variance();
        double[] doubleArray2 = new double[] { 100L };
        // The following exception was thrown during execution in test generation
        try {
            variance0.incrementAll(doubleArray2, (int) (byte) -1, 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: start position cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[100.0]");
    }

    @Test
    public void test0034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0034");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = null;
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment1);
        variance2.clear();
        double[] doubleArray4 = new double[] {};
        variance2.incrementAll(doubleArray4);
        org.apache.commons.math.stat.descriptive.moment.Variance variance7 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray14 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double15 = variance7.evaluate(doubleArray14);
        variance7.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance19 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray26 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double27 = variance19.evaluate(doubleArray26);
        variance19.setBiasCorrected(true);
        boolean boolean30 = variance19.isBiasCorrected();
        double[] doubleArray37 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double38 = variance19.evaluate(doubleArray37);
        org.apache.commons.math.stat.descriptive.moment.Variance variance40 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray47 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double48 = variance40.evaluate(doubleArray47);
        variance40.setBiasCorrected(true);
        boolean boolean51 = variance40.isBiasCorrected();
        double[] doubleArray58 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double59 = variance40.evaluate(doubleArray58);
        double double62 = variance19.evaluate(doubleArray58, (int) (byte) 1, 0);
        double double64 = variance7.evaluate(doubleArray58, 2178.0d);
        // The following exception was thrown during execution in test generation
        try {
            double double67 = variance2.evaluate(doubleArray58, (int) (short) -1, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: start position cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 2168.222222222222d + "'", double15 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 2168.222222222222d + "'", double27 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 16.566666666666663d + "'", double38 == 16.566666666666663d);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 2168.222222222222d + "'", double48 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 16.566666666666663d + "'", double59 == 16.566666666666663d);
        org.junit.Assert.assertTrue(Double.isNaN(double62));
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 16.566666666418314d + "'", double64 == 16.566666666418314d);
    }

    @Test
    public void test0035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0035");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = null;
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment1);
        double[] doubleArray3 = new double[] {};
        double double6 = variance2.evaluate(doubleArray3, 0, 0);
        variance2.setBiasCorrected(true);
        variance2.increment(Double.NaN);
        // The following exception was thrown during execution in test generation
        try {
            double double11 = variance2.getResult();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double6));
    }

    @Test
    public void test0036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0036");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = null;
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        java.lang.Class<?> wildcardClass3 = variance2.getClass();
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test0037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0037");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = null;
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment1);
        variance2.clear();
        variance2.setBiasCorrected(false);
        // The following exception was thrown during execution in test generation
        try {
            double double6 = variance2.getResult();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0038");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray8 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double9 = variance1.evaluate(doubleArray8);
        variance1.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance13 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray20 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double21 = variance13.evaluate(doubleArray20);
        variance13.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance25 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray32 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double33 = variance25.evaluate(doubleArray32);
        variance25.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance37 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray44 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double45 = variance37.evaluate(doubleArray44);
        variance37.setBiasCorrected(true);
        boolean boolean48 = variance37.isBiasCorrected();
        double[] doubleArray55 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double56 = variance37.evaluate(doubleArray55);
        double double59 = variance25.evaluate(doubleArray55, (int) (byte) 1, (int) (byte) 0);
        variance13.incrementAll(doubleArray55, (int) (byte) 1, 1);
        // The following exception was thrown during execution in test generation
        try {
            variance1.incrementAll(doubleArray55, (int) '#', (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 2168.222222222222d + "'", double9 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 2168.222222222222d + "'", double21 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 2168.222222222222d + "'", double33 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 2168.222222222222d + "'", double45 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 16.566666666666663d + "'", double56 == 16.566666666666663d);
        org.junit.Assert.assertTrue(Double.isNaN(double59));
    }

    @Test
    public void test0039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0039");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray8 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double9 = variance1.evaluate(doubleArray8);
        variance1.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance13 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray20 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double21 = variance13.evaluate(doubleArray20);
        variance13.setBiasCorrected(true);
        boolean boolean24 = variance13.isBiasCorrected();
        double[] doubleArray31 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double32 = variance13.evaluate(doubleArray31);
        double double35 = variance1.evaluate(doubleArray31, (int) (byte) 1, (int) (byte) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance37 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance39 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray46 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double47 = variance39.evaluate(doubleArray46);
        variance39.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance51 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray58 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double59 = variance51.evaluate(doubleArray58);
        variance51.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance63 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray70 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double71 = variance63.evaluate(doubleArray70);
        variance63.setBiasCorrected(true);
        boolean boolean74 = variance63.isBiasCorrected();
        double[] doubleArray81 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double82 = variance63.evaluate(doubleArray81);
        double double85 = variance51.evaluate(doubleArray81, (int) (byte) 1, (int) (byte) 0);
        variance39.incrementAll(doubleArray81, (int) (byte) 1, 1);
        double double89 = variance37.evaluate(doubleArray81);
        double double90 = variance1.evaluate(doubleArray81);
        java.lang.Class<?> wildcardClass91 = variance1.getClass();
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 2168.222222222222d + "'", double9 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 2168.222222222222d + "'", double21 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 16.566666666666663d + "'", double32 == 16.566666666666663d);
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 2168.222222222222d + "'", double47 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 2168.222222222222d + "'", double59 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 2168.222222222222d + "'", double71 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 16.566666666666663d + "'", double82 == 16.566666666666663d);
        org.junit.Assert.assertTrue(Double.isNaN(double85));
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + 13.805555555555552d + "'", double89 == 13.805555555555552d);
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + 16.566666666666663d + "'", double90 == 16.566666666666663d);
        org.junit.Assert.assertNotNull(wildcardClass91);
    }

    @Test
    public void test0040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0040");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray8 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double9 = variance1.evaluate(doubleArray8);
        variance1.clear();
        variance1.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray21 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double22 = variance14.evaluate(doubleArray21);
        variance14.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance26 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray33 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double34 = variance26.evaluate(doubleArray33);
        variance14.incrementAll(doubleArray33);
        variance14.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance38 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray45 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double46 = variance38.evaluate(doubleArray45);
        double[] doubleArray50 = new double[] { (byte) 1, (byte) 100, 1L };
        double double51 = variance38.evaluate(doubleArray50);
        variance14.incrementAll(doubleArray50, (int) (byte) 0, (int) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            double double58 = variance1.evaluate(doubleArray50, (double) (short) 0, 100, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: length cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 2168.222222222222d + "'", double9 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 2168.222222222222d + "'", double22 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 2168.222222222222d + "'", double34 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 2168.222222222222d + "'", double46 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0, 100.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 2178.0d + "'", double51 == 2178.0d);
    }

    @Test
    public void test0041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0041");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray8 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double9 = variance1.evaluate(doubleArray8);
        variance1.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance13 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray20 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double21 = variance13.evaluate(doubleArray20);
        variance1.incrementAll(doubleArray20);
        variance1.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance25 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray32 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double33 = variance25.evaluate(doubleArray32);
        double[] doubleArray37 = new double[] { (byte) 1, (byte) 100, 1L };
        double double38 = variance25.evaluate(doubleArray37);
        // The following exception was thrown during execution in test generation
        try {
            double double42 = variance1.evaluate(doubleArray37, (double) 1, (int) (byte) 1, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 2168.222222222222d + "'", double9 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 2168.222222222222d + "'", double21 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 2168.222222222222d + "'", double33 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0, 100.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 2178.0d + "'", double38 == 2178.0d);
    }

    @Test
    public void test0042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0042");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = null;
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        variance2.increment((double) (byte) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance6 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray13 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double14 = variance6.evaluate(doubleArray13);
        double[] doubleArray18 = new double[] { (byte) 1, (byte) 100, 1L };
        double double19 = variance6.evaluate(doubleArray18);
        // The following exception was thrown during execution in test generation
        try {
            variance2.incrementAll(doubleArray18, (-1), (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: start position cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 2168.222222222222d + "'", double14 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, 100.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 2178.0d + "'", double19 == 2178.0d);
    }

    @Test
    public void test0043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0043");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = null;
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment1);
        variance2.clear();
        double[] doubleArray4 = new double[] {};
        variance2.incrementAll(doubleArray4);
        variance2.increment(2178.0d);
        // The following exception was thrown during execution in test generation
        try {
            double double8 = variance2.getResult();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[]");
    }

    @Test
    public void test0044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0044");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray8 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double9 = variance1.evaluate(doubleArray8);
        variance1.setBiasCorrected(true);
        boolean boolean12 = variance1.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray21 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double22 = variance14.evaluate(doubleArray21);
        variance14.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance26 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray33 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double34 = variance26.evaluate(doubleArray33);
        variance14.incrementAll(doubleArray33);
        variance14.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance38 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray45 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double46 = variance38.evaluate(doubleArray45);
        double[] doubleArray50 = new double[] { (byte) 1, (byte) 100, 1L };
        double double51 = variance38.evaluate(doubleArray50);
        variance14.incrementAll(doubleArray50, (int) (byte) 0, (int) (byte) 1);
        double double56 = variance1.evaluate(doubleArray50, (double) '4');
        double[] doubleArray57 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double59 = variance1.evaluate(doubleArray57, (double) 100.0f);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 2168.222222222222d + "'", double9 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 2168.222222222222d + "'", double22 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 2168.222222222222d + "'", double34 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 2168.222222222222d + "'", double46 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0, 100.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 2178.0d + "'", double51 == 2178.0d);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 3267.0d + "'", double56 == 3267.0d);
    }

    @Test
    public void test0045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0045");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray8 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double9 = variance1.evaluate(doubleArray8);
        variance1.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance13 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray20 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double21 = variance13.evaluate(doubleArray20);
        variance1.incrementAll(doubleArray20);
        variance1.clear();
        java.lang.Class<?> wildcardClass24 = variance1.getClass();
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 2168.222222222222d + "'", double9 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 2168.222222222222d + "'", double21 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(wildcardClass24);
    }

    @Test
    public void test0046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0046");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = null;
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment1);
        variance2.clear();
        double[] doubleArray4 = new double[] {};
        variance2.incrementAll(doubleArray4);
        variance2.increment(2178.0d);
        variance2.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance10 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray17 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double18 = variance10.evaluate(doubleArray17);
        variance10.setBiasCorrected(true);
        boolean boolean21 = variance10.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.Variance variance23 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray30 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double31 = variance23.evaluate(doubleArray30);
        variance23.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance35 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray42 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double43 = variance35.evaluate(doubleArray42);
        variance23.incrementAll(doubleArray42);
        variance23.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance47 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray54 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double55 = variance47.evaluate(doubleArray54);
        double[] doubleArray59 = new double[] { (byte) 1, (byte) 100, 1L };
        double double60 = variance47.evaluate(doubleArray59);
        variance23.incrementAll(doubleArray59, (int) (byte) 0, (int) (byte) 1);
        double double65 = variance10.evaluate(doubleArray59, (double) '4');
        // The following exception was thrown during execution in test generation
        try {
            variance2.incrementAll(doubleArray59, 0, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: length cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 2168.222222222222d + "'", double18 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 2168.222222222222d + "'", double31 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 2168.222222222222d + "'", double43 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 2168.222222222222d + "'", double55 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0, 100.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 2178.0d + "'", double60 == 2178.0d);
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 3267.0d + "'", double65 == 3267.0d);
    }

    @Test
    public void test0047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0047");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = null;
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment1);
        double[] doubleArray3 = new double[] {};
        double double6 = variance2.evaluate(doubleArray3, 0, 0);
        // The following exception was thrown during execution in test generation
        try {
            double double7 = variance2.getResult();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double6));
    }

    @Test
    public void test0048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0048");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray8 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double9 = variance1.evaluate(doubleArray8);
        org.apache.commons.math.stat.descriptive.moment.Variance variance11 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray18 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double19 = variance11.evaluate(doubleArray18);
        variance11.setBiasCorrected(true);
        long long22 = variance11.getN();
        long long23 = variance11.getN();
        double double24 = variance11.getResult();
        variance11.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance27 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray34 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double35 = variance27.evaluate(doubleArray34);
        double[] doubleArray39 = new double[] { (byte) 1, (byte) 100, 1L };
        double double40 = variance27.evaluate(doubleArray39);
        org.apache.commons.math.stat.descriptive.moment.Variance variance42 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray49 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double50 = variance42.evaluate(doubleArray49);
        variance42.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance54 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray61 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double62 = variance54.evaluate(doubleArray61);
        variance42.incrementAll(doubleArray61);
        variance27.incrementAll(doubleArray61);
        double double65 = variance11.evaluate(doubleArray61);
        // The following exception was thrown during execution in test generation
        try {
            double double68 = variance1.evaluate(doubleArray61, (int) (byte) 10, (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 2168.222222222222d + "'", double9 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 2168.222222222222d + "'", double19 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 2168.222222222222d + "'", double35 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0, 100.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 2178.0d + "'", double40 == 2178.0d);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 2168.222222222222d + "'", double50 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 2168.222222222222d + "'", double62 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 2601.866666666667d + "'", double65 == 2601.866666666667d);
    }

    @Test
    public void test0049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0049");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = null;
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment1);
        variance2.increment(0.0d);
        variance2.clear();
        variance2.clear();
        // The following exception was thrown during execution in test generation
        try {
            double double7 = variance2.getResult();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0050");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = null;
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment1);
        double[] doubleArray3 = new double[] {};
        double double6 = variance2.evaluate(doubleArray3, 0, 0);
        boolean boolean8 = variance2.equals((java.lang.Object) 10.0f);
        boolean boolean9 = variance2.isBiasCorrected();
        variance2.clear();
        double[] doubleArray17 = new double[] { 1, (byte) 1, 16.566666666666663d, (-1.0d), ' ', 0.0d };
        // The following exception was thrown during execution in test generation
        try {
            variance2.incrementAll(doubleArray17, (int) (byte) 0, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 1.0, 16.566666666666663, -1.0, 32.0, 0.0]");
    }

    @Test
    public void test0051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0051");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = null;
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        org.apache.commons.math.stat.descriptive.moment.Variance variance4 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray11 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double12 = variance4.evaluate(doubleArray11);
        variance4.setBiasCorrected(true);
        boolean boolean15 = variance4.isBiasCorrected();
        double[] doubleArray22 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double23 = variance4.evaluate(doubleArray22);
        // The following exception was thrown during execution in test generation
        try {
            double double26 = variance2.evaluate(doubleArray22, (int) '#', (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 2168.222222222222d + "'", double12 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 16.566666666666663d + "'", double23 == 16.566666666666663d);
    }

    @Test
    public void test0052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0052");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray8 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double9 = variance1.evaluate(doubleArray8);
        variance1.setBiasCorrected(true);
        long long12 = variance1.getN();
        long long13 = variance1.getN();
        boolean boolean14 = variance1.isBiasCorrected();
        double[] doubleArray15 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double18 = variance1.evaluate(doubleArray15, (int) (byte) 10, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: input value array is null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 2168.222222222222d + "'", double9 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
    }

    @Test
    public void test0053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0053");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = null;
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        variance2.increment((double) (byte) 10);
        java.lang.Class<?> wildcardClass5 = variance2.getClass();
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test0054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0054");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray8 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double9 = variance1.evaluate(doubleArray8);
        variance1.setBiasCorrected(true);
        long long12 = variance1.getN();
        long long13 = variance1.getN();
        boolean boolean15 = variance1.equals((java.lang.Object) 16.566666666666663d);
        boolean boolean17 = variance1.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance19 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray26 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double27 = variance19.evaluate(doubleArray26);
        variance19.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance31 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray38 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double39 = variance31.evaluate(doubleArray38);
        variance31.setBiasCorrected(true);
        boolean boolean42 = variance31.isBiasCorrected();
        double[] doubleArray49 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double50 = variance31.evaluate(doubleArray49);
        double double53 = variance19.evaluate(doubleArray49, (int) (byte) 1, (int) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            variance1.incrementAll(doubleArray49, 0, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 2168.222222222222d + "'", double9 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 2168.222222222222d + "'", double27 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 2168.222222222222d + "'", double39 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 16.566666666666663d + "'", double50 == 16.566666666666663d);
        org.junit.Assert.assertTrue(Double.isNaN(double53));
    }

    @Test
    public void test0055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0055");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray8 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double9 = variance1.evaluate(doubleArray8);
        variance1.setBiasCorrected(true);
        double[] doubleArray12 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double13 = variance1.evaluate(doubleArray12);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: input values array is null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 2168.222222222222d + "'", double9 == 2168.222222222222d);
    }

    @Test
    public void test0056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0056");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = null;
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment1);
        variance2.clear();
        double[] doubleArray4 = new double[] {};
        variance2.incrementAll(doubleArray4);
        variance2.increment(2178.0d);
        variance2.clear();
        java.lang.Class<?> wildcardClass9 = variance2.getClass();
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[]");
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test0057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0057");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        variance1.setBiasCorrected(false);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment5 = null;
        org.apache.commons.math.stat.descriptive.moment.Variance variance6 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment5);
        variance6.increment(0.0d);
        variance6.clear();
        variance6.clear();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean11 = variance1.equals((java.lang.Object) variance6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0058");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = null;
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment1);
        variance2.clear();
        java.lang.Class<?> wildcardClass4 = variance2.getClass();
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test0059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0059");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray8 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double9 = variance1.evaluate(doubleArray8);
        variance1.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance13 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray20 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double21 = variance13.evaluate(doubleArray20);
        variance13.setBiasCorrected(true);
        boolean boolean24 = variance13.isBiasCorrected();
        double[] doubleArray31 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double32 = variance13.evaluate(doubleArray31);
        double double35 = variance1.evaluate(doubleArray31, (int) (byte) 1, (int) (byte) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance37 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance39 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray46 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double47 = variance39.evaluate(doubleArray46);
        variance39.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance51 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray58 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double59 = variance51.evaluate(doubleArray58);
        variance51.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance63 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray70 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double71 = variance63.evaluate(doubleArray70);
        variance63.setBiasCorrected(true);
        boolean boolean74 = variance63.isBiasCorrected();
        double[] doubleArray81 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double82 = variance63.evaluate(doubleArray81);
        double double85 = variance51.evaluate(doubleArray81, (int) (byte) 1, (int) (byte) 0);
        variance39.incrementAll(doubleArray81, (int) (byte) 1, 1);
        double double89 = variance37.evaluate(doubleArray81);
        double double90 = variance1.evaluate(doubleArray81);
        boolean boolean91 = variance1.isBiasCorrected();
        variance1.setBiasCorrected(false);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 2168.222222222222d + "'", double9 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 2168.222222222222d + "'", double21 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 16.566666666666663d + "'", double32 == 16.566666666666663d);
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 2168.222222222222d + "'", double47 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 2168.222222222222d + "'", double59 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 2168.222222222222d + "'", double71 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 16.566666666666663d + "'", double82 == 16.566666666666663d);
        org.junit.Assert.assertTrue(Double.isNaN(double85));
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + 13.805555555555552d + "'", double89 == 13.805555555555552d);
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + 16.566666666666663d + "'", double90 == 16.566666666666663d);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
    }

    @Test
    public void test0060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0060");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray8 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double9 = variance1.evaluate(doubleArray8);
        variance1.setBiasCorrected(true);
        long long12 = variance1.getN();
        long long13 = variance1.getN();
        double double14 = variance1.getResult();
        variance1.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance17 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        variance17.clear();
        boolean boolean19 = variance17.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.Variance variance21 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray28 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double29 = variance21.evaluate(doubleArray28);
        variance21.setBiasCorrected(true);
        long long32 = variance21.getN();
        long long33 = variance21.getN();
        double double34 = variance21.getResult();
        variance21.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance37 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray44 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double45 = variance37.evaluate(doubleArray44);
        double[] doubleArray49 = new double[] { (byte) 1, (byte) 100, 1L };
        double double50 = variance37.evaluate(doubleArray49);
        org.apache.commons.math.stat.descriptive.moment.Variance variance52 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray59 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double60 = variance52.evaluate(doubleArray59);
        variance52.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance64 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray71 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double72 = variance64.evaluate(doubleArray71);
        variance52.incrementAll(doubleArray71);
        variance37.incrementAll(doubleArray71);
        double double75 = variance21.evaluate(doubleArray71);
        double double76 = variance17.evaluate(doubleArray71);
        // The following exception was thrown during execution in test generation
        try {
            variance1.incrementAll(doubleArray71, (int) '4', (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: length cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 2168.222222222222d + "'", double9 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 2168.222222222222d + "'", double29 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 2168.222222222222d + "'", double45 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0, 100.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 2178.0d + "'", double50 == 2178.0d);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 2168.222222222222d + "'", double60 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 2168.222222222222d + "'", double72 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 2601.866666666667d + "'", double75 == 2601.866666666667d);
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 2168.222222222222d + "'", double76 == 2168.222222222222d);
    }

    @Test
    public void test0061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0061");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray8 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double9 = variance1.evaluate(doubleArray8);
        variance1.setBiasCorrected(true);
        boolean boolean12 = variance1.isBiasCorrected();
        double[] doubleArray19 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double20 = variance1.evaluate(doubleArray19);
        double double21 = variance1.getResult();
        variance1.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance25 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray32 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double33 = variance25.evaluate(doubleArray32);
        variance25.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance37 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray44 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double45 = variance37.evaluate(doubleArray44);
        variance37.setBiasCorrected(true);
        boolean boolean48 = variance37.isBiasCorrected();
        double[] doubleArray55 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double56 = variance37.evaluate(doubleArray55);
        org.apache.commons.math.stat.descriptive.moment.Variance variance58 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray65 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double66 = variance58.evaluate(doubleArray65);
        variance58.setBiasCorrected(true);
        boolean boolean69 = variance58.isBiasCorrected();
        double[] doubleArray76 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double77 = variance58.evaluate(doubleArray76);
        double double80 = variance37.evaluate(doubleArray76, (int) (byte) 1, 0);
        double double82 = variance25.evaluate(doubleArray76, 2178.0d);
        boolean boolean83 = variance1.equals((java.lang.Object) doubleArray76);
        java.lang.Class<?> wildcardClass84 = doubleArray76.getClass();
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 2168.222222222222d + "'", double9 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 16.566666666666663d + "'", double20 == 16.566666666666663d);
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 2168.222222222222d + "'", double33 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 2168.222222222222d + "'", double45 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 16.566666666666663d + "'", double56 == 16.566666666666663d);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 2168.222222222222d + "'", double66 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 16.566666666666663d + "'", double77 == 16.566666666666663d);
        org.junit.Assert.assertTrue(Double.isNaN(double80));
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 16.566666666418314d + "'", double82 == 16.566666666418314d);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(wildcardClass84);
    }

    @Test
    public void test0062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0062");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray8 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double9 = variance1.evaluate(doubleArray8);
        long long10 = variance1.getN();
        variance1.clear();
        java.lang.Class<?> wildcardClass12 = variance1.getClass();
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 2168.222222222222d + "'", double9 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test0063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0063");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = null;
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment1);
        variance2.clear();
        double[] doubleArray4 = new double[] {};
        variance2.incrementAll(doubleArray4);
        org.apache.commons.math.stat.descriptive.moment.Variance variance7 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray14 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double15 = variance7.evaluate(doubleArray14);
        variance7.setBiasCorrected(true);
        boolean boolean18 = variance7.isBiasCorrected();
        double[] doubleArray25 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double26 = variance7.evaluate(doubleArray25);
        boolean boolean28 = variance7.equals((java.lang.Object) 10.0d);
        boolean boolean29 = variance7.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.Variance variance31 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        boolean boolean32 = variance7.equals((java.lang.Object) false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance34 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray41 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double42 = variance34.evaluate(doubleArray41);
        variance34.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance46 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray53 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double54 = variance46.evaluate(doubleArray53);
        variance34.incrementAll(doubleArray53);
        double double57 = variance7.evaluate(doubleArray53, (double) 100.0f);
        // The following exception was thrown during execution in test generation
        try {
            double double61 = variance2.evaluate(doubleArray53, (double) 0L, (int) (byte) 100, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 2168.222222222222d + "'", double15 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 16.566666666666663d + "'", double26 == 16.566666666666663d);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 2168.222222222222d + "'", double42 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 2168.222222222222d + "'", double54 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 2601.8666666666663d + "'", double57 == 2601.8666666666663d);
    }

    @Test
    public void test0064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0064");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = null;
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        // The following exception was thrown during execution in test generation
        try {
            double double2 = variance1.getResult();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0065");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = null;
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment1);
        variance2.clear();
        double[] doubleArray4 = new double[] {};
        variance2.incrementAll(doubleArray4);
        variance2.increment(2178.0d);
        variance2.clear();
        // The following exception was thrown during execution in test generation
        try {
            long long9 = variance2.getN();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[]");
    }

    @Test
    public void test0066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0066");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray8 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double9 = variance1.evaluate(doubleArray8);
        variance1.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance13 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray20 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double21 = variance13.evaluate(doubleArray20);
        variance13.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance25 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray32 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double33 = variance25.evaluate(doubleArray32);
        variance25.setBiasCorrected(true);
        boolean boolean36 = variance25.isBiasCorrected();
        double[] doubleArray43 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double44 = variance25.evaluate(doubleArray43);
        double double47 = variance13.evaluate(doubleArray43, (int) (byte) 1, (int) (byte) 0);
        variance1.incrementAll(doubleArray43, (int) (byte) 1, 1);
        org.apache.commons.math.stat.descriptive.moment.Variance variance52 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray59 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double60 = variance52.evaluate(doubleArray59);
        double[] doubleArray64 = new double[] { (byte) 1, (byte) 100, 1L };
        double double65 = variance52.evaluate(doubleArray64);
        org.apache.commons.math.stat.descriptive.moment.Variance variance67 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray74 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double75 = variance67.evaluate(doubleArray74);
        variance67.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance79 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray86 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double87 = variance79.evaluate(doubleArray86);
        variance67.incrementAll(doubleArray86);
        variance52.incrementAll(doubleArray86);
        // The following exception was thrown during execution in test generation
        try {
            double double93 = variance1.evaluate(doubleArray86, (-1.0d), (int) (byte) 100, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 2168.222222222222d + "'", double9 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 2168.222222222222d + "'", double21 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 2168.222222222222d + "'", double33 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 16.566666666666663d + "'", double44 == 16.566666666666663d);
        org.junit.Assert.assertTrue(Double.isNaN(double47));
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 2168.222222222222d + "'", double60 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[1.0, 100.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 2178.0d + "'", double65 == 2178.0d);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 2168.222222222222d + "'", double75 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double87 + "' != '" + 2168.222222222222d + "'", double87 == 2168.222222222222d);
    }

    @Test
    public void test0067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0067");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray8 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double9 = variance1.evaluate(doubleArray8);
        variance1.setBiasCorrected(true);
        boolean boolean12 = variance1.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray21 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double22 = variance14.evaluate(doubleArray21);
        variance14.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance26 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray33 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double34 = variance26.evaluate(doubleArray33);
        variance14.incrementAll(doubleArray33);
        variance14.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance38 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray45 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double46 = variance38.evaluate(doubleArray45);
        double[] doubleArray50 = new double[] { (byte) 1, (byte) 100, 1L };
        double double51 = variance38.evaluate(doubleArray50);
        variance14.incrementAll(doubleArray50, (int) (byte) 0, (int) (byte) 1);
        double double56 = variance1.evaluate(doubleArray50, (double) '4');
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment58 = null;
        org.apache.commons.math.stat.descriptive.moment.Variance variance59 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment58);
        double[] doubleArray60 = new double[] {};
        double double63 = variance59.evaluate(doubleArray60, 0, 0);
        variance59.setBiasCorrected(true);
        variance59.increment((double) (byte) 0);
        java.lang.Class<?> wildcardClass68 = variance59.getClass();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean69 = variance1.equals((java.lang.Object) variance59);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 2168.222222222222d + "'", double9 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 2168.222222222222d + "'", double22 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 2168.222222222222d + "'", double34 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 2168.222222222222d + "'", double46 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0, 100.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 2178.0d + "'", double51 == 2178.0d);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 3267.0d + "'", double56 == 3267.0d);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double63));
        org.junit.Assert.assertNotNull(wildcardClass68);
    }

    @Test
    public void test0068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0068");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray8 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double9 = variance1.evaluate(doubleArray8);
        variance1.setBiasCorrected(true);
        boolean boolean12 = variance1.isBiasCorrected();
        double[] doubleArray19 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double20 = variance1.evaluate(doubleArray19);
        double double21 = variance1.getResult();
        java.lang.Class<?> wildcardClass22 = variance1.getClass();
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 2168.222222222222d + "'", double9 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 16.566666666666663d + "'", double20 == 16.566666666666663d);
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertNotNull(wildcardClass22);
    }

    @Test
    public void test0069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0069");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray8 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double9 = variance1.evaluate(doubleArray8);
        variance1.setBiasCorrected(true);
        long long12 = variance1.getN();
        long long13 = variance1.getN();
        boolean boolean15 = variance1.equals((java.lang.Object) 16.566666666666663d);
        boolean boolean17 = variance1.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance19 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray26 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double27 = variance19.evaluate(doubleArray26);
        variance19.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance31 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray38 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double39 = variance31.evaluate(doubleArray38);
        variance31.setBiasCorrected(true);
        boolean boolean42 = variance31.isBiasCorrected();
        double[] doubleArray49 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double50 = variance31.evaluate(doubleArray49);
        org.apache.commons.math.stat.descriptive.moment.Variance variance52 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray59 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double60 = variance52.evaluate(doubleArray59);
        variance52.setBiasCorrected(true);
        boolean boolean63 = variance52.isBiasCorrected();
        double[] doubleArray70 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double71 = variance52.evaluate(doubleArray70);
        double double74 = variance31.evaluate(doubleArray70, (int) (byte) 1, 0);
        double double76 = variance19.evaluate(doubleArray70, 2178.0d);
        double double77 = variance1.evaluate(doubleArray70);
        variance1.clear();
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 2168.222222222222d + "'", double9 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 2168.222222222222d + "'", double27 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 2168.222222222222d + "'", double39 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 16.566666666666663d + "'", double50 == 16.566666666666663d);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 2168.222222222222d + "'", double60 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 16.566666666666663d + "'", double71 == 16.566666666666663d);
        org.junit.Assert.assertTrue(Double.isNaN(double74));
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 16.566666666418314d + "'", double76 == 16.566666666418314d);
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 16.566666666666663d + "'", double77 == 16.566666666666663d);
    }

    @Test
    public void test0070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0070");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray8 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double9 = variance1.evaluate(doubleArray8);
        variance1.setBiasCorrected(true);
        boolean boolean12 = variance1.isBiasCorrected();
        double[] doubleArray19 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double20 = variance1.evaluate(doubleArray19);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment22 = null;
        org.apache.commons.math.stat.descriptive.moment.Variance variance23 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment22);
        double[] doubleArray24 = new double[] {};
        double double27 = variance23.evaluate(doubleArray24, 0, 0);
        // The following exception was thrown during execution in test generation
        try {
            variance1.incrementAll(doubleArray24, (int) (byte) 100, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 2168.222222222222d + "'", double9 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 16.566666666666663d + "'", double20 == 16.566666666666663d);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double27));
    }

    @Test
    public void test0071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0071");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        variance1.clear();
        boolean boolean3 = variance1.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.Variance variance5 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray12 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double13 = variance5.evaluate(doubleArray12);
        variance5.setBiasCorrected(true);
        long long16 = variance5.getN();
        long long17 = variance5.getN();
        double double18 = variance5.getResult();
        variance5.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance21 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray28 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double29 = variance21.evaluate(doubleArray28);
        double[] doubleArray33 = new double[] { (byte) 1, (byte) 100, 1L };
        double double34 = variance21.evaluate(doubleArray33);
        org.apache.commons.math.stat.descriptive.moment.Variance variance36 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray43 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double44 = variance36.evaluate(doubleArray43);
        variance36.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance48 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray55 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double56 = variance48.evaluate(doubleArray55);
        variance36.incrementAll(doubleArray55);
        variance21.incrementAll(doubleArray55);
        double double59 = variance5.evaluate(doubleArray55);
        double double60 = variance1.evaluate(doubleArray55);
        variance1.increment(16.566666666666663d);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 2168.222222222222d + "'", double13 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 2168.222222222222d + "'", double29 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0, 100.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 2178.0d + "'", double34 == 2178.0d);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 2168.222222222222d + "'", double44 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 2168.222222222222d + "'", double56 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 2601.866666666667d + "'", double59 == 2601.866666666667d);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 2168.222222222222d + "'", double60 == 2168.222222222222d);
    }

    @Test
    public void test0072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0072");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray8 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double9 = variance1.evaluate(doubleArray8);
        variance1.setBiasCorrected(true);
        long long12 = variance1.getN();
        long long13 = variance1.getN();
        boolean boolean15 = variance1.equals((java.lang.Object) 16.566666666666663d);
        boolean boolean17 = variance1.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance19 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray26 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double27 = variance19.evaluate(doubleArray26);
        variance19.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance31 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray38 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double39 = variance31.evaluate(doubleArray38);
        variance19.incrementAll(doubleArray38);
        double double41 = variance1.evaluate(doubleArray38);
        org.apache.commons.math.stat.descriptive.moment.Variance variance43 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray50 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double51 = variance43.evaluate(doubleArray50);
        variance43.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance55 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray62 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double63 = variance55.evaluate(doubleArray62);
        variance43.incrementAll(doubleArray62);
        // The following exception was thrown during execution in test generation
        try {
            double double67 = variance1.evaluate(doubleArray62, (int) ' ', (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: length cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 2168.222222222222d + "'", double9 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 2168.222222222222d + "'", double27 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 2168.222222222222d + "'", double39 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 2601.866666666667d + "'", double41 == 2601.866666666667d);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 2168.222222222222d + "'", double51 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 2168.222222222222d + "'", double63 == 2168.222222222222d);
    }

    @Test
    public void test0073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0073");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray8 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double9 = variance1.evaluate(doubleArray8);
        variance1.setBiasCorrected(true);
        boolean boolean12 = variance1.isBiasCorrected();
        double[] doubleArray19 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double20 = variance1.evaluate(doubleArray19);
        double double21 = variance1.getResult();
        long long22 = variance1.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance24 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray31 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double32 = variance24.evaluate(doubleArray31);
        variance24.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance36 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray43 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double44 = variance36.evaluate(doubleArray43);
        variance36.setBiasCorrected(true);
        boolean boolean47 = variance36.isBiasCorrected();
        double[] doubleArray54 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double55 = variance36.evaluate(doubleArray54);
        org.apache.commons.math.stat.descriptive.moment.Variance variance57 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray64 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double65 = variance57.evaluate(doubleArray64);
        variance57.setBiasCorrected(true);
        boolean boolean68 = variance57.isBiasCorrected();
        double[] doubleArray75 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double76 = variance57.evaluate(doubleArray75);
        double double79 = variance36.evaluate(doubleArray75, (int) (byte) 1, 0);
        double double81 = variance24.evaluate(doubleArray75, 2178.0d);
        variance1.incrementAll(doubleArray75);
        long long83 = variance1.getN();
        java.lang.Class<?> wildcardClass84 = variance1.getClass();
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 2168.222222222222d + "'", double9 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 16.566666666666663d + "'", double20 == 16.566666666666663d);
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 2168.222222222222d + "'", double32 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 2168.222222222222d + "'", double44 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 16.566666666666663d + "'", double55 == 16.566666666666663d);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 2168.222222222222d + "'", double65 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 16.566666666666663d + "'", double76 == 16.566666666666663d);
        org.junit.Assert.assertTrue(Double.isNaN(double79));
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 16.566666666418314d + "'", double81 == 16.566666666418314d);
        org.junit.Assert.assertTrue("'" + long83 + "' != '" + 6L + "'", long83 == 6L);
        org.junit.Assert.assertNotNull(wildcardClass84);
    }

    @Test
    public void test0074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0074");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double2 = variance1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance4 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray11 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double12 = variance4.evaluate(doubleArray11);
        variance4.setBiasCorrected(true);
        boolean boolean15 = variance4.isBiasCorrected();
        double[] doubleArray22 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double23 = variance4.evaluate(doubleArray22);
        boolean boolean25 = variance4.equals((java.lang.Object) 10.0d);
        boolean boolean26 = variance4.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.Variance variance28 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        boolean boolean29 = variance4.equals((java.lang.Object) false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance31 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray38 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double39 = variance31.evaluate(doubleArray38);
        variance31.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance43 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray50 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double51 = variance43.evaluate(doubleArray50);
        variance31.incrementAll(doubleArray50);
        double double54 = variance4.evaluate(doubleArray50, (double) 100.0f);
        // The following exception was thrown during execution in test generation
        try {
            double double57 = variance1.evaluate(doubleArray50, (int) (byte) 1, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 2168.222222222222d + "'", double12 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 16.566666666666663d + "'", double23 == 16.566666666666663d);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 2168.222222222222d + "'", double39 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 2168.222222222222d + "'", double51 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 2601.8666666666663d + "'", double54 == 2601.8666666666663d);
    }

    @Test
    public void test0075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0075");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = null;
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment1);
        double[] doubleArray3 = new double[] {};
        double double6 = variance2.evaluate(doubleArray3, 0, 0);
        boolean boolean8 = variance2.equals((java.lang.Object) 10.0f);
        boolean boolean9 = variance2.isBiasCorrected();
        variance2.setBiasCorrected(false);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void test0076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0076");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray8 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double9 = variance1.evaluate(doubleArray8);
        variance1.setBiasCorrected(true);
        boolean boolean12 = variance1.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray21 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double22 = variance14.evaluate(doubleArray21);
        variance14.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance26 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray33 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double34 = variance26.evaluate(doubleArray33);
        variance26.setBiasCorrected(true);
        boolean boolean37 = variance26.isBiasCorrected();
        double[] doubleArray44 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double45 = variance26.evaluate(doubleArray44);
        double double48 = variance14.evaluate(doubleArray44, (int) (byte) 1, (int) (byte) 0);
        double double51 = variance1.evaluate(doubleArray44, (int) (byte) 1, 0);
        variance1.setBiasCorrected(false);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment55 = null;
        org.apache.commons.math.stat.descriptive.moment.Variance variance56 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment55);
        double[] doubleArray57 = new double[] {};
        double double60 = variance56.evaluate(doubleArray57, 0, 0);
        boolean boolean62 = variance56.equals((java.lang.Object) 10.0f);
        boolean boolean63 = variance56.isBiasCorrected();
        variance56.clear();
        double[] doubleArray70 = new double[] { 10.0f, 10.0f, 1, 'a', (byte) 1 };
        double double71 = variance56.evaluate(doubleArray70);
        // The following exception was thrown during execution in test generation
        try {
            double double74 = variance1.evaluate(doubleArray70, 1, 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 2168.222222222222d + "'", double9 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 2168.222222222222d + "'", double22 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 2168.222222222222d + "'", double34 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 16.566666666666663d + "'", double45 == 16.566666666666663d);
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertTrue(Double.isNaN(double51));
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double60));
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[10.0, 10.0, 1.0, 97.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 1694.7000000000003d + "'", double71 == 1694.7000000000003d);
    }

    @Test
    public void test0077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0077");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray8 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double9 = variance1.evaluate(doubleArray8);
        variance1.setBiasCorrected(true);
        boolean boolean12 = variance1.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray21 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double22 = variance14.evaluate(doubleArray21);
        variance14.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance26 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray33 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double34 = variance26.evaluate(doubleArray33);
        variance26.setBiasCorrected(true);
        boolean boolean37 = variance26.isBiasCorrected();
        double[] doubleArray44 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double45 = variance26.evaluate(doubleArray44);
        double double48 = variance14.evaluate(doubleArray44, (int) (byte) 1, (int) (byte) 0);
        double double51 = variance1.evaluate(doubleArray44, (int) (byte) 1, 0);
        variance1.setBiasCorrected(false);
        java.lang.Class<?> wildcardClass54 = variance1.getClass();
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 2168.222222222222d + "'", double9 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 2168.222222222222d + "'", double22 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 2168.222222222222d + "'", double34 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 16.566666666666663d + "'", double45 == 16.566666666666663d);
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertTrue(Double.isNaN(double51));
        org.junit.Assert.assertNotNull(wildcardClass54);
    }

    @Test
    public void test0078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0078");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray8 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double9 = variance1.evaluate(doubleArray8);
        double[] doubleArray13 = new double[] { (byte) 1, (byte) 100, 1L };
        double double14 = variance1.evaluate(doubleArray13);
        org.apache.commons.math.stat.descriptive.moment.Variance variance16 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray23 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double24 = variance16.evaluate(doubleArray23);
        variance16.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance28 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray35 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double36 = variance28.evaluate(doubleArray35);
        variance16.incrementAll(doubleArray35);
        variance1.incrementAll(doubleArray35);
        boolean boolean39 = variance1.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.Variance variance41 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray48 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double49 = variance41.evaluate(doubleArray48);
        variance41.setBiasCorrected(true);
        boolean boolean52 = variance41.isBiasCorrected();
        double[] doubleArray59 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double60 = variance41.evaluate(doubleArray59);
        double double61 = variance41.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance63 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        variance63.clear();
        double double65 = variance63.getResult();
        double[] doubleArray70 = new double[] { (-1), 2168.222222222222d, 16.566666666418314d, 10.0d };
        variance63.incrementAll(doubleArray70);
        double double72 = variance41.evaluate(doubleArray70);
        // The following exception was thrown during execution in test generation
        try {
            double double76 = variance1.evaluate(doubleArray70, (double) (-1L), (int) 'a', (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 2168.222222222222d + "'", double9 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, 100.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 2178.0d + "'", double14 == 2178.0d);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 2168.222222222222d + "'", double24 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 2168.222222222222d + "'", double36 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 2168.222222222222d + "'", double49 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 16.566666666666663d + "'", double60 == 16.566666666666663d);
        org.junit.Assert.assertTrue(Double.isNaN(double61));
        org.junit.Assert.assertTrue(Double.isNaN(double65));
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[-1.0, 2168.222222222222, 16.566666666418314, 10.0]");
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 1166128.5457099646d + "'", double72 == 1166128.5457099646d);
    }

    @Test
    public void test0079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0079");
        org.apache.commons.math.stat.descriptive.moment.Variance variance0 = new org.apache.commons.math.stat.descriptive.moment.Variance();
        double double1 = variance0.getResult();
        java.lang.Class<?> wildcardClass2 = variance0.getClass();
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertNotNull(wildcardClass2);
    }

    @Test
    public void test0080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0080");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = null;
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        variance2.increment((double) (byte) 10);
        // The following exception was thrown during execution in test generation
        try {
            long long5 = variance2.getN();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0081");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray8 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double9 = variance1.evaluate(doubleArray8);
        variance1.clear();
        variance1.setBiasCorrected(false);
        variance1.increment(2178.0d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance16 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray23 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double24 = variance16.evaluate(doubleArray23);
        variance16.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance28 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray35 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double36 = variance28.evaluate(doubleArray35);
        variance16.incrementAll(doubleArray35);
        // The following exception was thrown during execution in test generation
        try {
            double double40 = variance1.evaluate(doubleArray35, (int) (short) 100, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 2168.222222222222d + "'", double9 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 2168.222222222222d + "'", double24 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 2168.222222222222d + "'", double36 == 2168.222222222222d);
    }

    @Test
    public void test0082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0082");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray8 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double9 = variance1.evaluate(doubleArray8);
        variance1.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance13 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray20 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double21 = variance13.evaluate(doubleArray20);
        variance1.incrementAll(doubleArray20);
        variance1.clear();
        boolean boolean24 = variance1.isBiasCorrected();
        variance1.increment(2601.866666666667d);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment28 = null;
        org.apache.commons.math.stat.descriptive.moment.Variance variance29 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment28);
        variance29.clear();
        double[] doubleArray31 = new double[] {};
        variance29.incrementAll(doubleArray31);
        // The following exception was thrown during execution in test generation
        try {
            double double36 = variance1.evaluate(doubleArray31, 16.566666666418314d, (int) '#', 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 2168.222222222222d + "'", double9 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 2168.222222222222d + "'", double21 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[]");
    }

    @Test
    public void test0083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0083");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray8 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double9 = variance1.evaluate(doubleArray8);
        variance1.setBiasCorrected(true);
        long long12 = variance1.getN();
        variance1.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance15 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray22 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double23 = variance15.evaluate(doubleArray22);
        double double24 = variance1.evaluate(doubleArray22);
        java.lang.Class<?> wildcardClass25 = doubleArray22.getClass();
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 2168.222222222222d + "'", double9 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 2168.222222222222d + "'", double23 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 2601.866666666667d + "'", double24 == 2601.866666666667d);
        org.junit.Assert.assertNotNull(wildcardClass25);
    }

    @Test
    public void test0084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0084");
        org.apache.commons.math.stat.descriptive.moment.Variance variance0 = new org.apache.commons.math.stat.descriptive.moment.Variance();
        long long1 = variance0.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance3 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray10 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double11 = variance3.evaluate(doubleArray10);
        variance3.setBiasCorrected(true);
        long long14 = variance3.getN();
        boolean boolean15 = variance0.equals((java.lang.Object) long14);
        org.apache.commons.math.stat.descriptive.moment.Variance variance17 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        variance17.clear();
        boolean boolean19 = variance17.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.Variance variance21 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray28 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double29 = variance21.evaluate(doubleArray28);
        variance21.setBiasCorrected(true);
        long long32 = variance21.getN();
        long long33 = variance21.getN();
        double double34 = variance21.getResult();
        variance21.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance37 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray44 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double45 = variance37.evaluate(doubleArray44);
        double[] doubleArray49 = new double[] { (byte) 1, (byte) 100, 1L };
        double double50 = variance37.evaluate(doubleArray49);
        org.apache.commons.math.stat.descriptive.moment.Variance variance52 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray59 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double60 = variance52.evaluate(doubleArray59);
        variance52.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance64 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray71 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double72 = variance64.evaluate(doubleArray71);
        variance52.incrementAll(doubleArray71);
        variance37.incrementAll(doubleArray71);
        double double75 = variance21.evaluate(doubleArray71);
        double double76 = variance17.evaluate(doubleArray71);
        // The following exception was thrown during execution in test generation
        try {
            double double79 = variance0.evaluate(doubleArray71, 10, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 2168.222222222222d + "'", double11 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 2168.222222222222d + "'", double29 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 2168.222222222222d + "'", double45 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0, 100.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 2178.0d + "'", double50 == 2178.0d);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 2168.222222222222d + "'", double60 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 2168.222222222222d + "'", double72 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 2601.866666666667d + "'", double75 == 2601.866666666667d);
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 2168.222222222222d + "'", double76 == 2168.222222222222d);
    }

    @Test
    public void test0085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0085");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray8 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double9 = variance1.evaluate(doubleArray8);
        variance1.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance13 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray20 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double21 = variance13.evaluate(doubleArray20);
        variance13.setBiasCorrected(true);
        boolean boolean24 = variance13.isBiasCorrected();
        double[] doubleArray31 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double32 = variance13.evaluate(doubleArray31);
        double double35 = variance1.evaluate(doubleArray31, (int) (byte) 1, (int) (byte) 0);
        java.lang.Class<?> wildcardClass36 = variance1.getClass();
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 2168.222222222222d + "'", double9 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 2168.222222222222d + "'", double21 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 16.566666666666663d + "'", double32 == 16.566666666666663d);
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertNotNull(wildcardClass36);
    }

    @Test
    public void test0086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0086");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray8 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double9 = variance1.evaluate(doubleArray8);
        variance1.setBiasCorrected(true);
        boolean boolean12 = variance1.isBiasCorrected();
        double[] doubleArray19 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double20 = variance1.evaluate(doubleArray19);
        org.apache.commons.math.stat.descriptive.moment.Variance variance22 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray29 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double30 = variance22.evaluate(doubleArray29);
        variance22.setBiasCorrected(true);
        boolean boolean33 = variance22.isBiasCorrected();
        double[] doubleArray40 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double41 = variance22.evaluate(doubleArray40);
        double double44 = variance1.evaluate(doubleArray40, (int) (byte) 1, 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance46 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray53 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double54 = variance46.evaluate(doubleArray53);
        variance46.clear();
        variance46.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance59 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        variance59.clear();
        double double61 = variance59.getResult();
        double[] doubleArray66 = new double[] { (-1), 2168.222222222222d, 16.566666666418314d, 10.0d };
        variance59.incrementAll(doubleArray66);
        boolean boolean68 = variance46.equals((java.lang.Object) doubleArray66);
        // The following exception was thrown during execution in test generation
        try {
            double double72 = variance1.evaluate(doubleArray66, (double) (byte) 100, 10, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 2168.222222222222d + "'", double9 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 16.566666666666663d + "'", double20 == 16.566666666666663d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 2168.222222222222d + "'", double30 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 16.566666666666663d + "'", double41 == 16.566666666666663d);
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 2168.222222222222d + "'", double54 == 2168.222222222222d);
        org.junit.Assert.assertTrue(Double.isNaN(double61));
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[-1.0, 2168.222222222222, 16.566666666418314, 10.0]");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
    }

    @Test
    public void test0087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0087");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = null;
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment1);
        double[] doubleArray3 = new double[] {};
        double double6 = variance2.evaluate(doubleArray3, 0, 0);
        boolean boolean8 = variance2.equals((java.lang.Object) 10.0f);
        boolean boolean9 = variance2.isBiasCorrected();
        variance2.clear();
        double[] doubleArray16 = new double[] { 10.0f, 10.0f, 1, 'a', (byte) 1 };
        double double17 = variance2.evaluate(doubleArray16);
        org.apache.commons.math.stat.descriptive.moment.Variance variance19 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray26 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double27 = variance19.evaluate(doubleArray26);
        variance19.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance31 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray38 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double39 = variance31.evaluate(doubleArray38);
        variance19.incrementAll(doubleArray38);
        variance19.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance43 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray50 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double51 = variance43.evaluate(doubleArray50);
        double[] doubleArray55 = new double[] { (byte) 1, (byte) 100, 1L };
        double double56 = variance43.evaluate(doubleArray55);
        variance19.incrementAll(doubleArray55, (int) (byte) 0, (int) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            variance2.incrementAll(doubleArray55, (int) (short) -1, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: start position cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[10.0, 10.0, 1.0, 97.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 1694.7000000000003d + "'", double17 == 1694.7000000000003d);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 2168.222222222222d + "'", double27 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 2168.222222222222d + "'", double39 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 2168.222222222222d + "'", double51 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0, 100.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 2178.0d + "'", double56 == 2178.0d);
    }

    @Test
    public void test0088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0088");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = null;
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment1);
        double[] doubleArray3 = new double[] {};
        double double6 = variance2.evaluate(doubleArray3, 0, 0);
        variance2.setBiasCorrected(true);
        variance2.increment((double) (byte) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance12 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray19 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double20 = variance12.evaluate(doubleArray19);
        variance12.setBiasCorrected(true);
        boolean boolean23 = variance12.isBiasCorrected();
        double[] doubleArray30 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double31 = variance12.evaluate(doubleArray30);
        double double32 = variance12.getResult();
        variance12.setBiasCorrected(true);
        long long35 = variance12.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance37 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray44 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double45 = variance37.evaluate(doubleArray44);
        variance37.setBiasCorrected(true);
        boolean boolean48 = variance37.isBiasCorrected();
        double[] doubleArray55 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double56 = variance37.evaluate(doubleArray55);
        boolean boolean58 = variance37.equals((java.lang.Object) 10.0d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance60 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray67 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double68 = variance60.evaluate(doubleArray67);
        variance60.setBiasCorrected(true);
        boolean boolean71 = variance60.isBiasCorrected();
        double[] doubleArray78 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double79 = variance60.evaluate(doubleArray78);
        double double81 = variance37.evaluate(doubleArray78, (double) 0.0f);
        variance12.incrementAll(doubleArray78);
        // The following exception was thrown during execution in test generation
        try {
            double double86 = variance2.evaluate(doubleArray78, (double) (-1.0f), (int) (byte) -1, (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: start position cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 2168.222222222222d + "'", double20 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 16.566666666666663d + "'", double31 == 16.566666666666663d);
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 2168.222222222222d + "'", double45 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 16.566666666666663d + "'", double56 == 16.566666666666663d);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 2168.222222222222d + "'", double68 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 16.566666666666663d + "'", double79 == 16.566666666666663d);
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 16.566666666666666d + "'", double81 == 16.566666666666666d);
    }

    @Test
    public void test0089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0089");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = null;
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment1);
        double[] doubleArray3 = new double[] {};
        double double6 = variance2.evaluate(doubleArray3, 0, 0);
        variance2.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance10 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray17 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double18 = variance10.evaluate(doubleArray17);
        variance10.setBiasCorrected(true);
        boolean boolean21 = variance10.isBiasCorrected();
        double[] doubleArray28 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double29 = variance10.evaluate(doubleArray28);
        // The following exception was thrown during execution in test generation
        try {
            double double33 = variance2.evaluate(doubleArray28, (double) 0.0f, (int) (byte) -1, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: start position cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 2168.222222222222d + "'", double18 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 16.566666666666663d + "'", double29 == 16.566666666666663d);
    }

    @Test
    public void test0090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0090");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray8 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double9 = variance1.evaluate(doubleArray8);
        variance1.clear();
        variance1.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray21 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double22 = variance14.evaluate(doubleArray21);
        variance14.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance26 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray33 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double34 = variance26.evaluate(doubleArray33);
        variance26.setBiasCorrected(true);
        boolean boolean37 = variance26.isBiasCorrected();
        double[] doubleArray44 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double45 = variance26.evaluate(doubleArray44);
        double double48 = variance14.evaluate(doubleArray44, (int) (byte) 1, (int) (byte) 0);
        variance1.incrementAll(doubleArray44);
        org.apache.commons.math.stat.descriptive.moment.Variance variance51 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray58 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double59 = variance51.evaluate(doubleArray58);
        double[] doubleArray63 = new double[] { (byte) 1, (byte) 100, 1L };
        double double64 = variance51.evaluate(doubleArray63);
        // The following exception was thrown during execution in test generation
        try {
            variance1.incrementAll(doubleArray63, (int) (short) -1, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: start position cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 2168.222222222222d + "'", double9 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 2168.222222222222d + "'", double22 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 2168.222222222222d + "'", double34 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 16.566666666666663d + "'", double45 == 16.566666666666663d);
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 2168.222222222222d + "'", double59 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0, 100.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 2178.0d + "'", double64 == 2178.0d);
    }

    @Test
    public void test0091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0091");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray8 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double9 = variance1.evaluate(doubleArray8);
        variance1.setBiasCorrected(true);
        long long12 = variance1.getN();
        long long13 = variance1.getN();
        variance1.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment17 = null;
        org.apache.commons.math.stat.descriptive.moment.Variance variance18 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment17);
        variance18.clear();
        double[] doubleArray20 = new double[] {};
        variance18.incrementAll(doubleArray20);
        // The following exception was thrown during execution in test generation
        try {
            double double24 = variance1.evaluate(doubleArray20, (int) ' ', (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 2168.222222222222d + "'", double9 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[]");
    }

    @Test
    public void test0092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0092");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray8 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double9 = variance1.evaluate(doubleArray8);
        variance1.setBiasCorrected(true);
        long long12 = variance1.getN();
        long long13 = variance1.getN();
        boolean boolean15 = variance1.equals((java.lang.Object) 16.566666666666663d);
        boolean boolean17 = variance1.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance19 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray26 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double27 = variance19.evaluate(doubleArray26);
        variance19.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance31 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray38 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double39 = variance31.evaluate(doubleArray38);
        variance31.setBiasCorrected(true);
        boolean boolean42 = variance31.isBiasCorrected();
        double[] doubleArray49 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double50 = variance31.evaluate(doubleArray49);
        org.apache.commons.math.stat.descriptive.moment.Variance variance52 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray59 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double60 = variance52.evaluate(doubleArray59);
        variance52.setBiasCorrected(true);
        boolean boolean63 = variance52.isBiasCorrected();
        double[] doubleArray70 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double71 = variance52.evaluate(doubleArray70);
        double double74 = variance31.evaluate(doubleArray70, (int) (byte) 1, 0);
        double double76 = variance19.evaluate(doubleArray70, 2178.0d);
        double double77 = variance1.evaluate(doubleArray70);
        java.lang.Class<?> wildcardClass78 = doubleArray70.getClass();
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 2168.222222222222d + "'", double9 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 2168.222222222222d + "'", double27 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 2168.222222222222d + "'", double39 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 16.566666666666663d + "'", double50 == 16.566666666666663d);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 2168.222222222222d + "'", double60 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 16.566666666666663d + "'", double71 == 16.566666666666663d);
        org.junit.Assert.assertTrue(Double.isNaN(double74));
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 16.566666666418314d + "'", double76 == 16.566666666418314d);
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 16.566666666666663d + "'", double77 == 16.566666666666663d);
        org.junit.Assert.assertNotNull(wildcardClass78);
    }

    @Test
    public void test0093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0093");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = null;
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment1);
        variance2.clear();
        double[] doubleArray4 = new double[] {};
        variance2.incrementAll(doubleArray4);
        variance2.increment(2178.0d);
        variance2.clear();
        variance2.clear();
        boolean boolean10 = variance2.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.Variance variance12 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray19 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double20 = variance12.evaluate(doubleArray19);
        variance12.setBiasCorrected(true);
        long long23 = variance12.getN();
        variance12.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance26 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray33 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double34 = variance26.evaluate(doubleArray33);
        double double35 = variance12.evaluate(doubleArray33);
        // The following exception was thrown during execution in test generation
        try {
            variance2.incrementAll(doubleArray33, (int) (short) 100, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 2168.222222222222d + "'", double20 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 2168.222222222222d + "'", double34 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 2601.866666666667d + "'", double35 == 2601.866666666667d);
    }

    @Test
    public void test0094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0094");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = null;
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment1);
        double[] doubleArray3 = new double[] {};
        double double6 = variance2.evaluate(doubleArray3, 0, 0);
        variance2.setBiasCorrected(true);
        variance2.increment(Double.NaN);
        // The following exception was thrown during execution in test generation
        try {
            long long11 = variance2.getN();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double6));
    }

    @Test
    public void test0095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0095");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray8 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double9 = variance1.evaluate(doubleArray8);
        variance1.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance13 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray20 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double21 = variance13.evaluate(doubleArray20);
        variance1.incrementAll(doubleArray20);
        variance1.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance25 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray32 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double33 = variance25.evaluate(doubleArray32);
        double[] doubleArray37 = new double[] { (byte) 1, (byte) 100, 1L };
        double double38 = variance25.evaluate(doubleArray37);
        variance1.incrementAll(doubleArray37, (int) (byte) 0, (int) (byte) 1);
        org.apache.commons.math.stat.descriptive.moment.Variance variance43 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray50 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double51 = variance43.evaluate(doubleArray50);
        variance43.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance55 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        variance55.clear();
        double double57 = variance55.getResult();
        double[] doubleArray62 = new double[] { (-1), 2168.222222222222d, 16.566666666418314d, 10.0d };
        variance55.incrementAll(doubleArray62);
        variance43.incrementAll(doubleArray62);
        // The following exception was thrown during execution in test generation
        try {
            double double68 = variance1.evaluate(doubleArray62, 1166128.5457099646d, (int) (short) 10, (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 2168.222222222222d + "'", double9 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 2168.222222222222d + "'", double21 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 2168.222222222222d + "'", double33 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0, 100.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 2178.0d + "'", double38 == 2178.0d);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 2168.222222222222d + "'", double51 == 2168.222222222222d);
        org.junit.Assert.assertTrue(Double.isNaN(double57));
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[-1.0, 2168.222222222222, 16.566666666418314, 10.0]");
    }

    @Test
    public void test0096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0096");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray8 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double9 = variance1.evaluate(doubleArray8);
        variance1.setBiasCorrected(true);
        boolean boolean12 = variance1.isBiasCorrected();
        double[] doubleArray19 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double20 = variance1.evaluate(doubleArray19);
        boolean boolean22 = variance1.equals((java.lang.Object) 10.0d);
        boolean boolean23 = variance1.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.Variance variance25 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance27 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray34 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double35 = variance27.evaluate(doubleArray34);
        variance27.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance39 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray46 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double47 = variance39.evaluate(doubleArray46);
        variance39.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance51 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray58 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double59 = variance51.evaluate(doubleArray58);
        variance51.setBiasCorrected(true);
        boolean boolean62 = variance51.isBiasCorrected();
        double[] doubleArray69 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double70 = variance51.evaluate(doubleArray69);
        double double73 = variance39.evaluate(doubleArray69, (int) (byte) 1, (int) (byte) 0);
        variance27.incrementAll(doubleArray69, (int) (byte) 1, 1);
        double double77 = variance25.evaluate(doubleArray69);
        // The following exception was thrown during execution in test generation
        try {
            variance1.incrementAll(doubleArray69, (int) ' ', (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 2168.222222222222d + "'", double9 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 16.566666666666663d + "'", double20 == 16.566666666666663d);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 2168.222222222222d + "'", double35 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 2168.222222222222d + "'", double47 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 2168.222222222222d + "'", double59 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 16.566666666666663d + "'", double70 == 16.566666666666663d);
        org.junit.Assert.assertTrue(Double.isNaN(double73));
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 13.805555555555552d + "'", double77 == 13.805555555555552d);
    }

    @Test
    public void test0097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0097");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray8 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double9 = variance1.evaluate(doubleArray8);
        variance1.setBiasCorrected(true);
        long long12 = variance1.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray21 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double22 = variance14.evaluate(doubleArray21);
        variance14.clear();
        variance14.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance27 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        variance27.clear();
        double double29 = variance27.getResult();
        double[] doubleArray34 = new double[] { (-1), 2168.222222222222d, 16.566666666418314d, 10.0d };
        variance27.incrementAll(doubleArray34);
        boolean boolean36 = variance14.equals((java.lang.Object) doubleArray34);
        variance1.incrementAll(doubleArray34);
        java.lang.Class<?> wildcardClass38 = doubleArray34.getClass();
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 2168.222222222222d + "'", double9 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 2168.222222222222d + "'", double22 == 2168.222222222222d);
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[-1.0, 2168.222222222222, 16.566666666418314, 10.0]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(wildcardClass38);
    }

    @Test
    public void test0098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0098");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray8 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double9 = variance1.evaluate(doubleArray8);
        double[] doubleArray13 = new double[] { (byte) 1, (byte) 100, 1L };
        double double14 = variance1.evaluate(doubleArray13);
        org.apache.commons.math.stat.descriptive.moment.Variance variance16 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray23 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double24 = variance16.evaluate(doubleArray23);
        variance16.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance28 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray35 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double36 = variance28.evaluate(doubleArray35);
        variance16.incrementAll(doubleArray35);
        variance1.incrementAll(doubleArray35);
        boolean boolean39 = variance1.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.Variance variance41 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray48 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double49 = variance41.evaluate(doubleArray48);
        variance41.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance53 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        variance53.clear();
        double double55 = variance53.getResult();
        double[] doubleArray60 = new double[] { (-1), 2168.222222222222d, 16.566666666418314d, 10.0d };
        variance53.incrementAll(doubleArray60);
        variance41.incrementAll(doubleArray60);
        // The following exception was thrown during execution in test generation
        try {
            double double66 = variance1.evaluate(doubleArray60, 2601.8666666666663d, (int) (short) 10, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 2168.222222222222d + "'", double9 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, 100.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 2178.0d + "'", double14 == 2178.0d);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 2168.222222222222d + "'", double24 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 2168.222222222222d + "'", double36 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 2168.222222222222d + "'", double49 == 2168.222222222222d);
        org.junit.Assert.assertTrue(Double.isNaN(double55));
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[-1.0, 2168.222222222222, 16.566666666418314, 10.0]");
    }

    @Test
    public void test0099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0099");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray8 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double9 = variance1.evaluate(doubleArray8);
        variance1.setBiasCorrected(true);
        boolean boolean12 = variance1.isBiasCorrected();
        double[] doubleArray19 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double20 = variance1.evaluate(doubleArray19);
        org.apache.commons.math.stat.descriptive.moment.Variance variance22 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray29 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double30 = variance22.evaluate(doubleArray29);
        variance22.setBiasCorrected(true);
        boolean boolean33 = variance22.isBiasCorrected();
        double[] doubleArray40 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double41 = variance22.evaluate(doubleArray40);
        double double44 = variance1.evaluate(doubleArray40, (int) (byte) 1, 0);
        variance1.setBiasCorrected(true);
        variance1.setBiasCorrected(true);
        double double49 = variance1.getResult();
        boolean boolean50 = variance1.isBiasCorrected();
        java.lang.Class<?> wildcardClass51 = variance1.getClass();
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 2168.222222222222d + "'", double9 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 16.566666666666663d + "'", double20 == 16.566666666666663d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 2168.222222222222d + "'", double30 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 16.566666666666663d + "'", double41 == 16.566666666666663d);
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertTrue(Double.isNaN(double49));
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(wildcardClass51);
    }

    @Test
    public void test0100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0100");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = null;
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment1);
        variance2.clear();
        double[] doubleArray4 = new double[] {};
        variance2.incrementAll(doubleArray4);
        variance2.increment(2178.0d);
        variance2.clear();
        variance2.increment(3267.0d);
        // The following exception was thrown during execution in test generation
        try {
            double double11 = variance2.getResult();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[]");
    }

    @Test
    public void test0101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0101");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray8 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double9 = variance1.evaluate(doubleArray8);
        variance1.setBiasCorrected(true);
        boolean boolean12 = variance1.isBiasCorrected();
        double[] doubleArray19 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double20 = variance1.evaluate(doubleArray19);
        double double21 = variance1.getResult();
        long long22 = variance1.getN();
        java.lang.Object obj23 = null;
        boolean boolean24 = variance1.equals(obj23);
        long long25 = variance1.getN();
        double[] doubleArray30 = new double[] { 13.805555555555506d, (-1), 100, 1.0d };
        // The following exception was thrown during execution in test generation
        try {
            double double34 = variance1.evaluate(doubleArray30, 874596.4092824734d, (int) (short) 10, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 2168.222222222222d + "'", double9 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 16.566666666666663d + "'", double20 == 16.566666666666663d);
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[13.805555555555506, -1.0, 100.0, 1.0]");
    }

    @Test
    public void test0102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0102");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray8 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double9 = variance1.evaluate(doubleArray8);
        variance1.setBiasCorrected(true);
        boolean boolean12 = variance1.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray21 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double22 = variance14.evaluate(doubleArray21);
        variance14.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance26 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray33 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double34 = variance26.evaluate(doubleArray33);
        variance14.incrementAll(doubleArray33);
        variance14.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance38 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray45 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double46 = variance38.evaluate(doubleArray45);
        double[] doubleArray50 = new double[] { (byte) 1, (byte) 100, 1L };
        double double51 = variance38.evaluate(doubleArray50);
        variance14.incrementAll(doubleArray50, (int) (byte) 0, (int) (byte) 1);
        double double56 = variance1.evaluate(doubleArray50, (double) '4');
        java.lang.Class<?> wildcardClass57 = variance1.getClass();
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 2168.222222222222d + "'", double9 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 2168.222222222222d + "'", double22 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 2168.222222222222d + "'", double34 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 2168.222222222222d + "'", double46 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0, 100.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 2178.0d + "'", double51 == 2178.0d);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 3267.0d + "'", double56 == 3267.0d);
        org.junit.Assert.assertNotNull(wildcardClass57);
    }

    @Test
    public void test0103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0103");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double2 = variance1.getResult();
        double double3 = variance1.getResult();
        variance1.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance6 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray13 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double14 = variance6.evaluate(doubleArray13);
        variance6.setBiasCorrected(true);
        boolean boolean17 = variance6.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.Variance variance19 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray26 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double27 = variance19.evaluate(doubleArray26);
        variance19.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance31 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray38 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double39 = variance31.evaluate(doubleArray38);
        variance19.incrementAll(doubleArray38);
        variance19.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance43 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray50 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double51 = variance43.evaluate(doubleArray50);
        double[] doubleArray55 = new double[] { (byte) 1, (byte) 100, 1L };
        double double56 = variance43.evaluate(doubleArray55);
        variance19.incrementAll(doubleArray55, (int) (byte) 0, (int) (byte) 1);
        double double61 = variance6.evaluate(doubleArray55, (double) '4');
        // The following exception was thrown during execution in test generation
        try {
            double double64 = variance1.evaluate(doubleArray55, 10, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 2168.222222222222d + "'", double14 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 2168.222222222222d + "'", double27 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 2168.222222222222d + "'", double39 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 2168.222222222222d + "'", double51 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0, 100.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 2178.0d + "'", double56 == 2178.0d);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 3267.0d + "'", double61 == 3267.0d);
    }

    @Test
    public void test0104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0104");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray8 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double9 = variance1.evaluate(doubleArray8);
        variance1.setBiasCorrected(true);
        boolean boolean12 = variance1.isBiasCorrected();
        double[] doubleArray19 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double20 = variance1.evaluate(doubleArray19);
        double double21 = variance1.getResult();
        variance1.setBiasCorrected(true);
        long long24 = variance1.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance26 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray33 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double34 = variance26.evaluate(doubleArray33);
        variance26.setBiasCorrected(true);
        boolean boolean37 = variance26.isBiasCorrected();
        double[] doubleArray44 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double45 = variance26.evaluate(doubleArray44);
        boolean boolean47 = variance26.equals((java.lang.Object) 10.0d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance49 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray56 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double57 = variance49.evaluate(doubleArray56);
        variance49.setBiasCorrected(true);
        boolean boolean60 = variance49.isBiasCorrected();
        double[] doubleArray67 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double68 = variance49.evaluate(doubleArray67);
        double double70 = variance26.evaluate(doubleArray67, (double) 0.0f);
        variance1.incrementAll(doubleArray67);
        double[] doubleArray72 = null;
        // The following exception was thrown during execution in test generation
        try {
            variance1.incrementAll(doubleArray72);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: input values array is null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 2168.222222222222d + "'", double9 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 16.566666666666663d + "'", double20 == 16.566666666666663d);
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 2168.222222222222d + "'", double34 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 16.566666666666663d + "'", double45 == 16.566666666666663d);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 2168.222222222222d + "'", double57 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 16.566666666666663d + "'", double68 == 16.566666666666663d);
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 16.566666666666666d + "'", double70 == 16.566666666666666d);
    }

    @Test
    public void test0105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0105");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray8 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double9 = variance1.evaluate(doubleArray8);
        variance1.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance12 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray19 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double20 = variance12.evaluate(doubleArray19);
        variance12.setBiasCorrected(true);
        boolean boolean23 = variance12.isBiasCorrected();
        double[] doubleArray30 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double31 = variance12.evaluate(doubleArray30);
        double double32 = variance12.getResult();
        long long33 = variance12.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance35 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray42 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double43 = variance35.evaluate(doubleArray42);
        variance35.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance47 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray54 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double55 = variance47.evaluate(doubleArray54);
        variance47.setBiasCorrected(true);
        boolean boolean58 = variance47.isBiasCorrected();
        double[] doubleArray65 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double66 = variance47.evaluate(doubleArray65);
        org.apache.commons.math.stat.descriptive.moment.Variance variance68 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray75 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double76 = variance68.evaluate(doubleArray75);
        variance68.setBiasCorrected(true);
        boolean boolean79 = variance68.isBiasCorrected();
        double[] doubleArray86 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double87 = variance68.evaluate(doubleArray86);
        double double90 = variance47.evaluate(doubleArray86, (int) (byte) 1, 0);
        double double92 = variance35.evaluate(doubleArray86, 2178.0d);
        variance12.incrementAll(doubleArray86);
        double double94 = variance1.evaluate(doubleArray86);
        variance1.increment((double) 0L);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 2168.222222222222d + "'", double9 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 2168.222222222222d + "'", double20 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 16.566666666666663d + "'", double31 == 16.566666666666663d);
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 2168.222222222222d + "'", double43 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 2168.222222222222d + "'", double55 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 16.566666666666663d + "'", double66 == 16.566666666666663d);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 2168.222222222222d + "'", double76 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double87 + "' != '" + 16.566666666666663d + "'", double87 == 16.566666666666663d);
        org.junit.Assert.assertTrue(Double.isNaN(double90));
        org.junit.Assert.assertTrue("'" + double92 + "' != '" + 16.566666666418314d + "'", double92 == 16.566666666418314d);
        org.junit.Assert.assertTrue("'" + double94 + "' != '" + 13.805555555555552d + "'", double94 == 13.805555555555552d);
    }

    @Test
    public void test0106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0106");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = null;
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment1);
        double[] doubleArray3 = new double[] {};
        double double6 = variance2.evaluate(doubleArray3, 0, 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance7 = new org.apache.commons.math.stat.descriptive.moment.Variance();
        long long8 = variance7.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance10 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray17 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double18 = variance10.evaluate(doubleArray17);
        variance10.setBiasCorrected(true);
        boolean boolean21 = variance10.isBiasCorrected();
        double[] doubleArray28 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double29 = variance10.evaluate(doubleArray28);
        boolean boolean31 = variance10.equals((java.lang.Object) 10.0d);
        boolean boolean32 = variance10.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.Variance variance34 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        boolean boolean35 = variance10.equals((java.lang.Object) false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance37 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray44 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double45 = variance37.evaluate(doubleArray44);
        variance37.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance49 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray56 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double57 = variance49.evaluate(doubleArray56);
        variance37.incrementAll(doubleArray56);
        double double60 = variance10.evaluate(doubleArray56, (double) 100.0f);
        variance7.incrementAll(doubleArray56, (int) (short) 1, (int) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            double double67 = variance2.evaluate(doubleArray56, (double) 0L, (int) (short) 10, (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 2168.222222222222d + "'", double18 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 16.566666666666663d + "'", double29 == 16.566666666666663d);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 2168.222222222222d + "'", double45 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 2168.222222222222d + "'", double57 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 2601.8666666666663d + "'", double60 == 2601.8666666666663d);
    }

    @Test
    public void test0107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0107");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray8 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double9 = variance1.evaluate(doubleArray8);
        variance1.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance13 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray20 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double21 = variance13.evaluate(doubleArray20);
        variance1.incrementAll(doubleArray20);
        variance1.clear();
        variance1.setBiasCorrected(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance27 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray34 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double35 = variance27.evaluate(doubleArray34);
        variance27.setBiasCorrected(true);
        long long38 = variance27.getN();
        long long39 = variance27.getN();
        boolean boolean41 = variance27.equals((java.lang.Object) 16.566666666666663d);
        boolean boolean43 = variance27.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance45 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray52 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double53 = variance45.evaluate(doubleArray52);
        variance45.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance57 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray64 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double65 = variance57.evaluate(doubleArray64);
        variance45.incrementAll(doubleArray64);
        double double67 = variance27.evaluate(doubleArray64);
        double double69 = variance1.evaluate(doubleArray64, (double) (byte) 100);
        java.lang.Class<?> wildcardClass70 = doubleArray64.getClass();
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 2168.222222222222d + "'", double9 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 2168.222222222222d + "'", double21 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 2168.222222222222d + "'", double35 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 2168.222222222222d + "'", double53 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 2168.222222222222d + "'", double65 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 2601.866666666667d + "'", double67 == 2601.866666666667d);
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 2168.222222222222d + "'", double69 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(wildcardClass70);
    }

    @Test
    public void test0108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0108");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = null;
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment1);
        double[] doubleArray3 = new double[] {};
        double double6 = variance2.evaluate(doubleArray3, 0, 0);
        variance2.setBiasCorrected(true);
        variance2.clear();
        variance2.setBiasCorrected(false);
        // The following exception was thrown during execution in test generation
        try {
            long long12 = variance2.getN();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double6));
    }

    @Test
    public void test0109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0109");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        variance1.clear();
        boolean boolean3 = variance1.isBiasCorrected();
        double double4 = variance1.getResult();
        java.lang.Class<?> wildcardClass5 = variance1.getClass();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test0110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0110");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray8 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double9 = variance1.evaluate(doubleArray8);
        variance1.clear();
        variance1.setBiasCorrected(false);
        variance1.increment(2178.0d);
        double[] doubleArray15 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double16 = variance1.evaluate(doubleArray15);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: input values array is null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 2168.222222222222d + "'", double9 == 2168.222222222222d);
    }

    @Test
    public void test0111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0111");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray8 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double9 = variance1.evaluate(doubleArray8);
        variance1.setBiasCorrected(true);
        boolean boolean12 = variance1.isBiasCorrected();
        double[] doubleArray19 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double20 = variance1.evaluate(doubleArray19);
        org.apache.commons.math.stat.descriptive.moment.Variance variance22 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray29 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double30 = variance22.evaluate(doubleArray29);
        variance22.setBiasCorrected(true);
        boolean boolean33 = variance22.isBiasCorrected();
        double[] doubleArray40 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double41 = variance22.evaluate(doubleArray40);
        double double44 = variance1.evaluate(doubleArray40, (int) (byte) 1, 0);
        double double45 = variance1.getResult();
        long long46 = variance1.getN();
        variance1.clear();
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 2168.222222222222d + "'", double9 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 16.566666666666663d + "'", double20 == 16.566666666666663d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 2168.222222222222d + "'", double30 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 16.566666666666663d + "'", double41 == 16.566666666666663d);
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertTrue(Double.isNaN(double45));
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 0L + "'", long46 == 0L);
    }

    @Test
    public void test0112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0112");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = null;
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment1);
        double[] doubleArray3 = new double[] {};
        double double6 = variance2.evaluate(doubleArray3, 0, 0);
        boolean boolean8 = variance2.equals((java.lang.Object) 10.0f);
        org.apache.commons.math.stat.descriptive.moment.Variance variance10 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray17 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double18 = variance10.evaluate(doubleArray17);
        variance10.setBiasCorrected(true);
        long long21 = variance10.getN();
        long long22 = variance10.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance24 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray31 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double32 = variance24.evaluate(doubleArray31);
        double[] doubleArray36 = new double[] { (byte) 1, (byte) 100, 1L };
        double double37 = variance24.evaluate(doubleArray36);
        double double39 = variance10.evaluate(doubleArray36, (double) 10.0f);
        org.apache.commons.math.stat.descriptive.moment.Variance variance41 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray48 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double49 = variance41.evaluate(doubleArray48);
        variance41.setBiasCorrected(true);
        long long52 = variance41.getN();
        long long53 = variance41.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance55 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray62 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double63 = variance55.evaluate(doubleArray62);
        double[] doubleArray67 = new double[] { (byte) 1, (byte) 100, 1L };
        double double68 = variance55.evaluate(doubleArray67);
        double double70 = variance41.evaluate(doubleArray67, (double) 10.0f);
        double double71 = variance10.evaluate(doubleArray67);
        // The following exception was thrown during execution in test generation
        try {
            double double75 = variance2.evaluate(doubleArray67, (double) (byte) 1, (int) (byte) 10, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 2168.222222222222d + "'", double18 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 2168.222222222222d + "'", double32 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0, 100.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 2178.0d + "'", double37 == 2178.0d);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 3267.0d + "'", double39 == 3267.0d);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 2168.222222222222d + "'", double49 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 0L + "'", long52 == 0L);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 0L + "'", long53 == 0L);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 2168.222222222222d + "'", double63 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[1.0, 100.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 2178.0d + "'", double68 == 2178.0d);
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 3267.0d + "'", double70 == 3267.0d);
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 3267.0d + "'", double71 == 3267.0d);
    }

    @Test
    public void test0113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0113");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray8 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double9 = variance1.evaluate(doubleArray8);
        variance1.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance13 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray20 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double21 = variance13.evaluate(doubleArray20);
        variance1.incrementAll(doubleArray20);
        variance1.clear();
        boolean boolean24 = variance1.isBiasCorrected();
        variance1.increment(2601.866666666667d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance28 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double29 = variance28.getResult();
        double double30 = variance28.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance32 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray39 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double40 = variance32.evaluate(doubleArray39);
        variance32.setBiasCorrected(true);
        long long43 = variance32.getN();
        variance32.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance46 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray53 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double54 = variance46.evaluate(doubleArray53);
        double double55 = variance32.evaluate(doubleArray53);
        variance28.incrementAll(doubleArray53);
        // The following exception was thrown during execution in test generation
        try {
            double double60 = variance1.evaluate(doubleArray53, (double) (byte) 1, (int) (byte) 10, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 2168.222222222222d + "'", double9 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 2168.222222222222d + "'", double21 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 2168.222222222222d + "'", double40 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 0L + "'", long43 == 0L);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 2168.222222222222d + "'", double54 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 2601.866666666667d + "'", double55 == 2601.866666666667d);
    }

    @Test
    public void test0114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0114");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = null;
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment1);
        double[] doubleArray3 = new double[] {};
        double double6 = variance2.evaluate(doubleArray3, 0, 0);
        boolean boolean8 = variance2.equals((java.lang.Object) 10.0f);
        boolean boolean9 = variance2.isBiasCorrected();
        // The following exception was thrown during execution in test generation
        try {
            long long10 = variance2.getN();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void test0115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0115");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = null;
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        java.lang.Class<?> wildcardClass2 = variance1.getClass();
        org.junit.Assert.assertNotNull(wildcardClass2);
    }

    @Test
    public void test0116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0116");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = null;
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment1);
        variance2.clear();
        double[] doubleArray4 = new double[] {};
        variance2.incrementAll(doubleArray4);
        variance2.increment((double) (byte) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance8 = new org.apache.commons.math.stat.descriptive.moment.Variance();
        long long9 = variance8.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance11 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray18 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double19 = variance11.evaluate(doubleArray18);
        variance11.setBiasCorrected(true);
        boolean boolean22 = variance11.isBiasCorrected();
        double[] doubleArray29 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double30 = variance11.evaluate(doubleArray29);
        boolean boolean32 = variance11.equals((java.lang.Object) 10.0d);
        boolean boolean33 = variance11.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.Variance variance35 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        boolean boolean36 = variance11.equals((java.lang.Object) false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance38 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray45 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double46 = variance38.evaluate(doubleArray45);
        variance38.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance50 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray57 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double58 = variance50.evaluate(doubleArray57);
        variance38.incrementAll(doubleArray57);
        double double61 = variance11.evaluate(doubleArray57, (double) 100.0f);
        variance8.incrementAll(doubleArray57, (int) (short) 1, (int) (byte) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance66 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray73 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double74 = variance66.evaluate(doubleArray73);
        variance66.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance78 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        variance78.clear();
        double double80 = variance78.getResult();
        double[] doubleArray85 = new double[] { (-1), 2168.222222222222d, 16.566666666418314d, 10.0d };
        variance78.incrementAll(doubleArray85);
        variance66.incrementAll(doubleArray85);
        variance8.incrementAll(doubleArray85);
        // The following exception was thrown during execution in test generation
        try {
            double double92 = variance2.evaluate(doubleArray85, 1166128.5457099646d, (int) '4', (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[]");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 2168.222222222222d + "'", double19 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 16.566666666666663d + "'", double30 == 16.566666666666663d);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 2168.222222222222d + "'", double46 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 2168.222222222222d + "'", double58 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 2601.8666666666663d + "'", double61 == 2601.8666666666663d);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 2168.222222222222d + "'", double74 == 2168.222222222222d);
        org.junit.Assert.assertTrue(Double.isNaN(double80));
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[-1.0, 2168.222222222222, 16.566666666418314, 10.0]");
    }

    @Test
    public void test0117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0117");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray8 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double9 = variance1.evaluate(doubleArray8);
        variance1.setBiasCorrected(true);
        boolean boolean12 = variance1.isBiasCorrected();
        double[] doubleArray19 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double20 = variance1.evaluate(doubleArray19);
        boolean boolean22 = variance1.equals((java.lang.Object) 10.0d);
        boolean boolean23 = variance1.isBiasCorrected();
        java.lang.Class<?> wildcardClass24 = variance1.getClass();
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 2168.222222222222d + "'", double9 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 16.566666666666663d + "'", double20 == 16.566666666666663d);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(wildcardClass24);
    }

    @Test
    public void test0118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0118");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray8 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double9 = variance1.evaluate(doubleArray8);
        variance1.setBiasCorrected(true);
        long long12 = variance1.getN();
        variance1.clear();
        double double14 = variance1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance16 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray23 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double24 = variance16.evaluate(doubleArray23);
        variance16.setBiasCorrected(true);
        boolean boolean27 = variance16.isBiasCorrected();
        double[] doubleArray34 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double35 = variance16.evaluate(doubleArray34);
        boolean boolean37 = variance16.equals((java.lang.Object) 10.0d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance39 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray46 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double47 = variance39.evaluate(doubleArray46);
        variance39.setBiasCorrected(true);
        boolean boolean50 = variance39.isBiasCorrected();
        double[] doubleArray57 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double58 = variance39.evaluate(doubleArray57);
        double double60 = variance16.evaluate(doubleArray57, (double) 0.0f);
        variance1.incrementAll(doubleArray57);
        java.lang.Class<?> wildcardClass62 = variance1.getClass();
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 2168.222222222222d + "'", double9 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 2168.222222222222d + "'", double24 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 16.566666666666663d + "'", double35 == 16.566666666666663d);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 2168.222222222222d + "'", double47 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 16.566666666666663d + "'", double58 == 16.566666666666663d);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 16.566666666666666d + "'", double60 == 16.566666666666666d);
        org.junit.Assert.assertNotNull(wildcardClass62);
    }

    @Test
    public void test0119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0119");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = null;
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment1);
        variance2.clear();
        double[] doubleArray4 = new double[] {};
        variance2.incrementAll(doubleArray4);
        variance2.increment(2178.0d);
        variance2.clear();
        variance2.increment((double) 10L);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment12 = null;
        org.apache.commons.math.stat.descriptive.moment.Variance variance13 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment12);
        double[] doubleArray14 = new double[] {};
        double double17 = variance13.evaluate(doubleArray14, 0, 0);
        // The following exception was thrown during execution in test generation
        try {
            double double20 = variance2.evaluate(doubleArray14, 1, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: length cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double17));
    }

    @Test
    public void test0120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0120");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = null;
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        boolean boolean3 = variance2.isBiasCorrected();
        // The following exception was thrown during execution in test generation
        try {
            long long4 = variance2.getN();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test0121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0121");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray8 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double9 = variance1.evaluate(doubleArray8);
        long long10 = variance1.getN();
        double double11 = variance1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance13 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray20 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double21 = variance13.evaluate(doubleArray20);
        variance13.setBiasCorrected(true);
        boolean boolean24 = variance13.isBiasCorrected();
        double[] doubleArray31 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double32 = variance13.evaluate(doubleArray31);
        // The following exception was thrown during execution in test generation
        try {
            double double36 = variance1.evaluate(doubleArray31, (double) 0.0f, (int) (byte) 100, 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 2168.222222222222d + "'", double9 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 2168.222222222222d + "'", double21 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 16.566666666666663d + "'", double32 == 16.566666666666663d);
    }

    @Test
    public void test0122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0122");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray8 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double9 = variance1.evaluate(doubleArray8);
        variance1.setBiasCorrected(true);
        long long12 = variance1.getN();
        long long13 = variance1.getN();
        double double14 = variance1.getResult();
        variance1.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance17 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray24 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double25 = variance17.evaluate(doubleArray24);
        variance17.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance29 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray36 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double37 = variance29.evaluate(doubleArray36);
        variance17.incrementAll(doubleArray36);
        variance17.clear();
        variance17.setBiasCorrected(false);
        java.lang.Class<?> wildcardClass42 = variance17.getClass();
        boolean boolean43 = variance1.equals((java.lang.Object) variance17);
        boolean boolean44 = variance17.isBiasCorrected();
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 2168.222222222222d + "'", double9 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 2168.222222222222d + "'", double25 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 2168.222222222222d + "'", double37 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(wildcardClass42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
    }

    @Test
    public void test0123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0123");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = null;
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment1);
        double[] doubleArray3 = new double[] {};
        double double6 = variance2.evaluate(doubleArray3, 0, 0);
        boolean boolean8 = variance2.equals((java.lang.Object) 10.0f);
        boolean boolean9 = variance2.isBiasCorrected();
        variance2.clear();
        double[] doubleArray16 = new double[] { 10.0f, 10.0f, 1, 'a', (byte) 1 };
        double double17 = variance2.evaluate(doubleArray16);
        // The following exception was thrown during execution in test generation
        try {
            long long18 = variance2.getN();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[10.0, 10.0, 1.0, 97.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 1694.7000000000003d + "'", double17 == 1694.7000000000003d);
    }

    @Test
    public void test0124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0124");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        variance1.clear();
        double double3 = variance1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance5 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray12 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double13 = variance5.evaluate(doubleArray12);
        variance5.setBiasCorrected(true);
        boolean boolean16 = variance5.isBiasCorrected();
        double[] doubleArray23 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double24 = variance5.evaluate(doubleArray23);
        double double25 = variance5.getResult();
        variance5.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance29 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray36 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double37 = variance29.evaluate(doubleArray36);
        variance29.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance41 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray48 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double49 = variance41.evaluate(doubleArray48);
        variance41.setBiasCorrected(true);
        boolean boolean52 = variance41.isBiasCorrected();
        double[] doubleArray59 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double60 = variance41.evaluate(doubleArray59);
        org.apache.commons.math.stat.descriptive.moment.Variance variance62 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray69 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double70 = variance62.evaluate(doubleArray69);
        variance62.setBiasCorrected(true);
        boolean boolean73 = variance62.isBiasCorrected();
        double[] doubleArray80 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double81 = variance62.evaluate(doubleArray80);
        double double84 = variance41.evaluate(doubleArray80, (int) (byte) 1, 0);
        double double86 = variance29.evaluate(doubleArray80, 2178.0d);
        boolean boolean87 = variance5.equals((java.lang.Object) doubleArray80);
        double double89 = variance1.evaluate(doubleArray80, (double) '#');
        long long90 = variance1.getN();
        variance1.increment((double) '4');
        double double93 = variance1.getResult();
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 2168.222222222222d + "'", double13 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 16.566666666666663d + "'", double24 == 16.566666666666663d);
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 2168.222222222222d + "'", double37 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 2168.222222222222d + "'", double49 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 16.566666666666663d + "'", double60 == 16.566666666666663d);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 2168.222222222222d + "'", double70 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 16.566666666666663d + "'", double81 == 16.566666666666663d);
        org.junit.Assert.assertTrue(Double.isNaN(double84));
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 16.566666666418314d + "'", double86 == 16.566666666418314d);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + 13.805555555555506d + "'", double89 == 13.805555555555506d);
        org.junit.Assert.assertTrue("'" + long90 + "' != '" + 0L + "'", long90 == 0L);
        org.junit.Assert.assertTrue("'" + double93 + "' != '" + 0.0d + "'", double93 == 0.0d);
    }

    @Test
    public void test0125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0125");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray8 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double9 = variance1.evaluate(doubleArray8);
        variance1.setBiasCorrected(true);
        variance1.increment((double) (byte) 0);
        double[] doubleArray16 = new double[] { 'a', 100L };
        double double18 = variance1.evaluate(doubleArray16, 0.0d);
        long long19 = variance1.getN();
        boolean boolean20 = variance1.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.Variance variance22 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        variance22.clear();
        double double24 = variance22.getResult();
        double[] doubleArray29 = new double[] { (-1), 2168.222222222222d, 16.566666666418314d, 10.0d };
        variance22.incrementAll(doubleArray29);
        // The following exception was thrown during execution in test generation
        try {
            double double33 = variance1.evaluate(doubleArray29, (int) (short) 100, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 2168.222222222222d + "'", double9 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[97.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 4.5d + "'", double18 == 4.5d);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 1L + "'", long19 == 1L);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[-1.0, 2168.222222222222, 16.566666666418314, 10.0]");
    }

    @Test
    public void test0126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0126");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray8 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double9 = variance1.evaluate(doubleArray8);
        variance1.setBiasCorrected(true);
        boolean boolean12 = variance1.isBiasCorrected();
        double[] doubleArray19 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double20 = variance1.evaluate(doubleArray19);
        boolean boolean22 = variance1.equals((java.lang.Object) 10.0d);
        boolean boolean23 = variance1.isBiasCorrected();
        variance1.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment26 = null;
        org.apache.commons.math.stat.descriptive.moment.Variance variance27 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment26);
        variance27.clear();
        double[] doubleArray29 = new double[] {};
        variance27.incrementAll(doubleArray29);
        // The following exception was thrown during execution in test generation
        try {
            double double33 = variance1.evaluate(doubleArray29, (int) (byte) 100, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 2168.222222222222d + "'", double9 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 16.566666666666663d + "'", double20 == 16.566666666666663d);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[]");
    }

    @Test
    public void test0127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0127");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = null;
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        variance2.increment((double) (byte) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance6 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray13 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double14 = variance6.evaluate(doubleArray13);
        long long15 = variance6.getN();
        variance6.increment((double) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean18 = variance2.equals((java.lang.Object) variance6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 2168.222222222222d + "'", double14 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
    }

    @Test
    public void test0128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0128");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = null;
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment1);
        variance2.clear();
        double[] doubleArray4 = new double[] {};
        variance2.incrementAll(doubleArray4);
        variance2.increment(2178.0d);
        variance2.clear();
        variance2.increment((double) 100);
        // The following exception was thrown during execution in test generation
        try {
            double double11 = variance2.getResult();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[]");
    }

    @Test
    public void test0129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0129");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray8 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double9 = variance1.evaluate(doubleArray8);
        variance1.setBiasCorrected(true);
        long long12 = variance1.getN();
        variance1.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance15 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray22 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double23 = variance15.evaluate(doubleArray22);
        double[] doubleArray27 = new double[] { (byte) 1, (byte) 100, 1L };
        double double28 = variance15.evaluate(doubleArray27);
        org.apache.commons.math.stat.descriptive.moment.Variance variance30 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray37 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double38 = variance30.evaluate(doubleArray37);
        variance30.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance42 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray49 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double50 = variance42.evaluate(doubleArray49);
        variance30.incrementAll(doubleArray49);
        variance15.incrementAll(doubleArray49);
        variance1.incrementAll(doubleArray49, (int) (byte) 1, (int) (short) 1);
        double[] doubleArray56 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double59 = variance1.evaluate(doubleArray56, 1, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: input value array is null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 2168.222222222222d + "'", double9 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 2168.222222222222d + "'", double23 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0, 100.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 2178.0d + "'", double28 == 2178.0d);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 2168.222222222222d + "'", double38 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 2168.222222222222d + "'", double50 == 2168.222222222222d);
    }

    @Test
    public void test0130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0130");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray8 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double9 = variance1.evaluate(doubleArray8);
        long long10 = variance1.getN();
        variance1.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance13 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray20 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double21 = variance13.evaluate(doubleArray20);
        variance13.setBiasCorrected(true);
        boolean boolean24 = variance13.isBiasCorrected();
        double[] doubleArray31 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double32 = variance13.evaluate(doubleArray31);
        double double33 = variance13.getResult();
        variance13.setBiasCorrected(true);
        long long36 = variance13.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance38 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray45 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double46 = variance38.evaluate(doubleArray45);
        variance38.setBiasCorrected(true);
        boolean boolean49 = variance38.isBiasCorrected();
        double[] doubleArray56 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double57 = variance38.evaluate(doubleArray56);
        boolean boolean59 = variance38.equals((java.lang.Object) 10.0d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance61 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray68 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double69 = variance61.evaluate(doubleArray68);
        variance61.setBiasCorrected(true);
        boolean boolean72 = variance61.isBiasCorrected();
        double[] doubleArray79 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double80 = variance61.evaluate(doubleArray79);
        double double82 = variance38.evaluate(doubleArray79, (double) 0.0f);
        variance13.incrementAll(doubleArray79);
        double double85 = variance1.evaluate(doubleArray79, (double) ' ');
        java.lang.Class<?> wildcardClass86 = doubleArray79.getClass();
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 2168.222222222222d + "'", double9 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 2168.222222222222d + "'", double21 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 16.566666666666663d + "'", double32 == 16.566666666666663d);
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 2168.222222222222d + "'", double46 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 16.566666666666663d + "'", double57 == 16.566666666666663d);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 2168.222222222222d + "'", double69 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 16.566666666666663d + "'", double80 == 16.566666666666663d);
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 16.566666666666666d + "'", double82 == 16.566666666666666d);
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 13.805555555555506d + "'", double85 == 13.805555555555506d);
        org.junit.Assert.assertNotNull(wildcardClass86);
    }

    @Test
    public void test0131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0131");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray8 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double9 = variance1.evaluate(doubleArray8);
        variance1.setBiasCorrected(true);
        long long12 = variance1.getN();
        long long13 = variance1.getN();
        boolean boolean14 = variance1.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.Variance variance16 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray23 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double24 = variance16.evaluate(doubleArray23);
        double[] doubleArray28 = new double[] { (byte) 1, (byte) 100, 1L };
        double double29 = variance16.evaluate(doubleArray28);
        variance1.incrementAll(doubleArray28, (int) (short) 1, 0);
        boolean boolean34 = variance1.equals((java.lang.Object) 1);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment36 = null;
        org.apache.commons.math.stat.descriptive.moment.Variance variance37 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment36);
        variance37.clear();
        double[] doubleArray39 = new double[] {};
        variance37.incrementAll(doubleArray39);
        // The following exception was thrown during execution in test generation
        try {
            double double44 = variance1.evaluate(doubleArray39, (double) (-1), (int) '#', 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 2168.222222222222d + "'", double9 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 2168.222222222222d + "'", double24 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, 100.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 2178.0d + "'", double29 == 2178.0d);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[]");
    }

    @Test
    public void test0132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0132");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray8 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double9 = variance1.evaluate(doubleArray8);
        variance1.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance13 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray20 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double21 = variance13.evaluate(doubleArray20);
        variance1.incrementAll(doubleArray20);
        variance1.clear();
        boolean boolean24 = variance1.isBiasCorrected();
        boolean boolean25 = variance1.isBiasCorrected();
        java.lang.Class<?> wildcardClass26 = variance1.getClass();
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 2168.222222222222d + "'", double9 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 2168.222222222222d + "'", double21 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(wildcardClass26);
    }

    @Test
    public void test0133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0133");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray8 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double9 = variance1.evaluate(doubleArray8);
        variance1.clear();
        variance1.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray21 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double22 = variance14.evaluate(doubleArray21);
        variance14.setBiasCorrected(true);
        variance14.increment((double) (byte) 0);
        double[] doubleArray29 = new double[] { 'a', 100L };
        double double31 = variance14.evaluate(doubleArray29, 0.0d);
        // The following exception was thrown during execution in test generation
        try {
            variance1.incrementAll(doubleArray29, (int) (short) 100, (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 2168.222222222222d + "'", double9 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 2168.222222222222d + "'", double22 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[97.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 4.5d + "'", double31 == 4.5d);
    }

    @Test
    public void test0134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0134");
        org.apache.commons.math.stat.descriptive.moment.Variance variance0 = new org.apache.commons.math.stat.descriptive.moment.Variance();
        long long1 = variance0.getN();
        variance0.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance5 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray12 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double13 = variance5.evaluate(doubleArray12);
        variance5.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance17 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray24 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double25 = variance17.evaluate(doubleArray24);
        variance17.setBiasCorrected(true);
        boolean boolean28 = variance17.isBiasCorrected();
        double[] doubleArray35 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double36 = variance17.evaluate(doubleArray35);
        org.apache.commons.math.stat.descriptive.moment.Variance variance38 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray45 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double46 = variance38.evaluate(doubleArray45);
        variance38.setBiasCorrected(true);
        boolean boolean49 = variance38.isBiasCorrected();
        double[] doubleArray56 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double57 = variance38.evaluate(doubleArray56);
        double double60 = variance17.evaluate(doubleArray56, (int) (byte) 1, 0);
        double double62 = variance5.evaluate(doubleArray56, 2178.0d);
        // The following exception was thrown during execution in test generation
        try {
            double double66 = variance0.evaluate(doubleArray56, 13.805555555555552d, (int) (short) -1, 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: start position cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 2168.222222222222d + "'", double13 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 2168.222222222222d + "'", double25 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 16.566666666666663d + "'", double36 == 16.566666666666663d);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 2168.222222222222d + "'", double46 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 16.566666666666663d + "'", double57 == 16.566666666666663d);
        org.junit.Assert.assertTrue(Double.isNaN(double60));
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 16.566666666418314d + "'", double62 == 16.566666666418314d);
    }

    @Test
    public void test0135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0135");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray8 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double9 = variance1.evaluate(doubleArray8);
        variance1.setBiasCorrected(true);
        boolean boolean12 = variance1.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray21 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double22 = variance14.evaluate(doubleArray21);
        variance14.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance26 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray33 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double34 = variance26.evaluate(doubleArray33);
        variance26.setBiasCorrected(true);
        boolean boolean37 = variance26.isBiasCorrected();
        double[] doubleArray44 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double45 = variance26.evaluate(doubleArray44);
        double double48 = variance14.evaluate(doubleArray44, (int) (byte) 1, (int) (byte) 0);
        double double51 = variance1.evaluate(doubleArray44, (int) (byte) 1, 0);
        variance1.clear();
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 2168.222222222222d + "'", double9 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 2168.222222222222d + "'", double22 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 2168.222222222222d + "'", double34 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 16.566666666666663d + "'", double45 == 16.566666666666663d);
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertTrue(Double.isNaN(double51));
    }

    @Test
    public void test0136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0136");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray8 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double9 = variance1.evaluate(doubleArray8);
        variance1.setBiasCorrected(true);
        boolean boolean12 = variance1.isBiasCorrected();
        variance1.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance15 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray22 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double23 = variance15.evaluate(doubleArray22);
        variance15.setBiasCorrected(true);
        boolean boolean26 = variance15.isBiasCorrected();
        double[] doubleArray33 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double34 = variance15.evaluate(doubleArray33);
        org.apache.commons.math.stat.descriptive.moment.Variance variance36 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray43 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double44 = variance36.evaluate(doubleArray43);
        variance36.setBiasCorrected(true);
        boolean boolean47 = variance36.isBiasCorrected();
        double[] doubleArray54 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double55 = variance36.evaluate(doubleArray54);
        double double58 = variance15.evaluate(doubleArray54, (int) (byte) 1, 0);
        variance15.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance62 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance64 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray71 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double72 = variance64.evaluate(doubleArray71);
        variance64.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance76 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        variance76.clear();
        double double78 = variance76.getResult();
        double[] doubleArray83 = new double[] { (-1), 2168.222222222222d, 16.566666666418314d, 10.0d };
        variance76.incrementAll(doubleArray83);
        variance64.incrementAll(doubleArray83);
        double double86 = variance62.evaluate(doubleArray83);
        double double87 = variance15.evaluate(doubleArray83);
        // The following exception was thrown during execution in test generation
        try {
            double double91 = variance1.evaluate(doubleArray83, 874596.4092824734d, (int) 'a', 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 2168.222222222222d + "'", double9 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 2168.222222222222d + "'", double23 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 16.566666666666663d + "'", double34 == 16.566666666666663d);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 2168.222222222222d + "'", double44 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 16.566666666666663d + "'", double55 == 16.566666666666663d);
        org.junit.Assert.assertTrue(Double.isNaN(double58));
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 2168.222222222222d + "'", double72 == 2168.222222222222d);
        org.junit.Assert.assertTrue(Double.isNaN(double78));
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[-1.0, 2168.222222222222, 16.566666666418314, 10.0]");
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 874596.4092824734d + "'", double86 == 874596.4092824734d);
        org.junit.Assert.assertTrue("'" + double87 + "' != '" + 1166128.5457099646d + "'", double87 == 1166128.5457099646d);
    }

    @Test
    public void test0137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0137");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray8 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double9 = variance1.evaluate(doubleArray8);
        variance1.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance13 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray20 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double21 = variance13.evaluate(doubleArray20);
        variance13.setBiasCorrected(true);
        boolean boolean24 = variance13.isBiasCorrected();
        double[] doubleArray31 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double32 = variance13.evaluate(doubleArray31);
        double double35 = variance1.evaluate(doubleArray31, (int) (byte) 1, (int) (byte) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance37 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance39 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray46 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double47 = variance39.evaluate(doubleArray46);
        variance39.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance51 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray58 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double59 = variance51.evaluate(doubleArray58);
        variance51.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance63 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray70 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double71 = variance63.evaluate(doubleArray70);
        variance63.setBiasCorrected(true);
        boolean boolean74 = variance63.isBiasCorrected();
        double[] doubleArray81 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double82 = variance63.evaluate(doubleArray81);
        double double85 = variance51.evaluate(doubleArray81, (int) (byte) 1, (int) (byte) 0);
        variance39.incrementAll(doubleArray81, (int) (byte) 1, 1);
        double double89 = variance37.evaluate(doubleArray81);
        double double90 = variance1.evaluate(doubleArray81);
        long long91 = variance1.getN();
        variance1.clear();
        java.lang.Class<?> wildcardClass93 = variance1.getClass();
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 2168.222222222222d + "'", double9 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 2168.222222222222d + "'", double21 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 16.566666666666663d + "'", double32 == 16.566666666666663d);
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 2168.222222222222d + "'", double47 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 2168.222222222222d + "'", double59 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 2168.222222222222d + "'", double71 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 16.566666666666663d + "'", double82 == 16.566666666666663d);
        org.junit.Assert.assertTrue(Double.isNaN(double85));
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + 13.805555555555552d + "'", double89 == 13.805555555555552d);
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + 16.566666666666663d + "'", double90 == 16.566666666666663d);
        org.junit.Assert.assertTrue("'" + long91 + "' != '" + 0L + "'", long91 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass93);
    }

    @Test
    public void test0138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0138");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = null;
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment1);
        variance2.clear();
        variance2.setBiasCorrected(false);
        boolean boolean6 = variance2.isBiasCorrected();
        variance2.increment(13.805555555555552d);
        boolean boolean9 = variance2.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.Variance variance11 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray18 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double19 = variance11.evaluate(doubleArray18);
        variance11.setBiasCorrected(true);
        long long22 = variance11.getN();
        variance11.clear();
        double double24 = variance11.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance26 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray33 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double34 = variance26.evaluate(doubleArray33);
        variance26.setBiasCorrected(true);
        boolean boolean37 = variance26.isBiasCorrected();
        double[] doubleArray44 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double45 = variance26.evaluate(doubleArray44);
        boolean boolean47 = variance26.equals((java.lang.Object) 10.0d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance49 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray56 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double57 = variance49.evaluate(doubleArray56);
        variance49.setBiasCorrected(true);
        boolean boolean60 = variance49.isBiasCorrected();
        double[] doubleArray67 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double68 = variance49.evaluate(doubleArray67);
        double double70 = variance26.evaluate(doubleArray67, (double) 0.0f);
        variance11.incrementAll(doubleArray67);
        // The following exception was thrown during execution in test generation
        try {
            double double75 = variance2.evaluate(doubleArray67, (double) (short) -1, 100, (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 2168.222222222222d + "'", double19 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 2168.222222222222d + "'", double34 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 16.566666666666663d + "'", double45 == 16.566666666666663d);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 2168.222222222222d + "'", double57 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 16.566666666666663d + "'", double68 == 16.566666666666663d);
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 16.566666666666666d + "'", double70 == 16.566666666666666d);
    }

    @Test
    public void test0139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0139");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray8 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double9 = variance1.evaluate(doubleArray8);
        variance1.setBiasCorrected(true);
        boolean boolean12 = variance1.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray21 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double22 = variance14.evaluate(doubleArray21);
        variance14.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance26 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray33 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double34 = variance26.evaluate(doubleArray33);
        variance14.incrementAll(doubleArray33);
        variance14.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance38 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray45 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double46 = variance38.evaluate(doubleArray45);
        double[] doubleArray50 = new double[] { (byte) 1, (byte) 100, 1L };
        double double51 = variance38.evaluate(doubleArray50);
        variance14.incrementAll(doubleArray50, (int) (byte) 0, (int) (byte) 1);
        double double56 = variance1.evaluate(doubleArray50, (double) '4');
        java.lang.Class<?> wildcardClass57 = doubleArray50.getClass();
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 2168.222222222222d + "'", double9 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 2168.222222222222d + "'", double22 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 2168.222222222222d + "'", double34 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 2168.222222222222d + "'", double46 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0, 100.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 2178.0d + "'", double51 == 2178.0d);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 3267.0d + "'", double56 == 3267.0d);
        org.junit.Assert.assertNotNull(wildcardClass57);
    }

    @Test
    public void test0140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0140");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = null;
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment1);
        double[] doubleArray3 = new double[] {};
        double double6 = variance2.evaluate(doubleArray3, 0, 0);
        boolean boolean8 = variance2.equals((java.lang.Object) 10.0f);
        // The following exception was thrown during execution in test generation
        try {
            double double9 = variance2.getResult();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test0141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0141");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = null;
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment1);
        variance2.clear();
        double[] doubleArray4 = new double[] {};
        variance2.incrementAll(doubleArray4);
        variance2.increment(2178.0d);
        variance2.clear();
        boolean boolean10 = variance2.equals((java.lang.Object) 1.0f);
        org.apache.commons.math.stat.descriptive.moment.Variance variance12 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray19 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double20 = variance12.evaluate(doubleArray19);
        variance12.setBiasCorrected(true);
        boolean boolean23 = variance12.isBiasCorrected();
        double[] doubleArray30 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double31 = variance12.evaluate(doubleArray30);
        org.apache.commons.math.stat.descriptive.moment.Variance variance33 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray40 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double41 = variance33.evaluate(doubleArray40);
        variance33.setBiasCorrected(true);
        boolean boolean44 = variance33.isBiasCorrected();
        double[] doubleArray51 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double52 = variance33.evaluate(doubleArray51);
        double double55 = variance12.evaluate(doubleArray51, (int) (byte) 1, 0);
        variance12.setBiasCorrected(true);
        variance12.setBiasCorrected(true);
        double double60 = variance12.getResult();
        boolean boolean61 = variance12.isBiasCorrected();
        boolean boolean62 = variance12.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.Variance variance64 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray71 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double72 = variance64.evaluate(doubleArray71);
        variance64.setBiasCorrected(true);
        boolean boolean75 = variance64.isBiasCorrected();
        double[] doubleArray82 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double83 = variance64.evaluate(doubleArray82);
        double double84 = variance12.evaluate(doubleArray82);
        // The following exception was thrown during execution in test generation
        try {
            double double88 = variance2.evaluate(doubleArray82, (double) 0L, (int) (short) 10, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 2168.222222222222d + "'", double20 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 16.566666666666663d + "'", double31 == 16.566666666666663d);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 2168.222222222222d + "'", double41 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 16.566666666666663d + "'", double52 == 16.566666666666663d);
        org.junit.Assert.assertTrue(Double.isNaN(double55));
        org.junit.Assert.assertTrue(Double.isNaN(double60));
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 2168.222222222222d + "'", double72 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 16.566666666666663d + "'", double83 == 16.566666666666663d);
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 16.566666666666663d + "'", double84 == 16.566666666666663d);
    }

    @Test
    public void test0142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0142");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray8 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double9 = variance1.evaluate(doubleArray8);
        variance1.setBiasCorrected(true);
        boolean boolean12 = variance1.isBiasCorrected();
        double[] doubleArray19 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double20 = variance1.evaluate(doubleArray19);
        boolean boolean22 = variance1.equals((java.lang.Object) 10.0d);
        long long23 = variance1.getN();
        long long24 = variance1.getN();
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 2168.222222222222d + "'", double9 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 16.566666666666663d + "'", double20 == 16.566666666666663d);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
    }

    @Test
    public void test0143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0143");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double2 = variance1.getResult();
        double double3 = variance1.getResult();
        java.lang.Class<?> wildcardClass4 = variance1.getClass();
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test0144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0144");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance3 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray10 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double11 = variance3.evaluate(doubleArray10);
        variance3.setBiasCorrected(true);
        long long14 = variance3.getN();
        variance3.clear();
        boolean boolean16 = variance3.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.Variance variance18 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray25 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double26 = variance18.evaluate(doubleArray25);
        long long27 = variance18.getN();
        variance18.increment((double) (byte) 1);
        variance18.increment((double) 6L);
        variance18.increment(2178.0d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance34 = new org.apache.commons.math.stat.descriptive.moment.Variance();
        long long35 = variance34.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance37 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray44 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double45 = variance37.evaluate(doubleArray44);
        variance37.setBiasCorrected(true);
        boolean boolean48 = variance37.isBiasCorrected();
        double[] doubleArray55 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double56 = variance37.evaluate(doubleArray55);
        boolean boolean58 = variance37.equals((java.lang.Object) 10.0d);
        boolean boolean59 = variance37.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.Variance variance61 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        boolean boolean62 = variance37.equals((java.lang.Object) false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance64 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray71 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double72 = variance64.evaluate(doubleArray71);
        variance64.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance76 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray83 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double84 = variance76.evaluate(doubleArray83);
        variance64.incrementAll(doubleArray83);
        double double87 = variance37.evaluate(doubleArray83, (double) 100.0f);
        variance34.incrementAll(doubleArray83, (int) (short) 1, (int) (byte) 0);
        variance18.incrementAll(doubleArray83);
        double double93 = variance3.evaluate(doubleArray83, (double) 10L);
        double double94 = variance1.evaluate(doubleArray83);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 2168.222222222222d + "'", double11 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 2168.222222222222d + "'", double26 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 2168.222222222222d + "'", double45 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 16.566666666666663d + "'", double56 == 16.566666666666663d);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 2168.222222222222d + "'", double72 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 2168.222222222222d + "'", double84 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + double87 + "' != '" + 2601.8666666666663d + "'", double87 == 2601.8666666666663d);
        org.junit.Assert.assertTrue("'" + double93 + "' != '" + 2601.866666666667d + "'", double93 == 2601.866666666667d);
        org.junit.Assert.assertTrue("'" + double94 + "' != '" + 2168.222222222222d + "'", double94 == 2168.222222222222d);
    }

    @Test
    public void test0145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0145");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray8 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double9 = variance1.evaluate(doubleArray8);
        variance1.setBiasCorrected(true);
        boolean boolean12 = variance1.isBiasCorrected();
        double[] doubleArray19 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double20 = variance1.evaluate(doubleArray19);
        double double21 = variance1.getResult();
        variance1.setBiasCorrected(true);
        boolean boolean24 = variance1.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.Variance variance26 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray33 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double34 = variance26.evaluate(doubleArray33);
        variance26.setBiasCorrected(true);
        variance26.increment((double) (byte) 0);
        double[] doubleArray41 = new double[] { 'a', 100L };
        double double43 = variance26.evaluate(doubleArray41, 0.0d);
        // The following exception was thrown during execution in test generation
        try {
            double double47 = variance1.evaluate(doubleArray41, (double) (-1), (int) '4', (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 2168.222222222222d + "'", double9 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 16.566666666666663d + "'", double20 == 16.566666666666663d);
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 2168.222222222222d + "'", double34 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[97.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 4.5d + "'", double43 == 4.5d);
    }

    @Test
    public void test0146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0146");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray8 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double9 = variance1.evaluate(doubleArray8);
        variance1.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance13 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray20 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double21 = variance13.evaluate(doubleArray20);
        variance13.setBiasCorrected(true);
        boolean boolean24 = variance13.isBiasCorrected();
        double[] doubleArray31 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double32 = variance13.evaluate(doubleArray31);
        double double35 = variance1.evaluate(doubleArray31, (int) (byte) 1, (int) (byte) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance37 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance39 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray46 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double47 = variance39.evaluate(doubleArray46);
        variance39.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance51 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray58 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double59 = variance51.evaluate(doubleArray58);
        variance51.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance63 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray70 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double71 = variance63.evaluate(doubleArray70);
        variance63.setBiasCorrected(true);
        boolean boolean74 = variance63.isBiasCorrected();
        double[] doubleArray81 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double82 = variance63.evaluate(doubleArray81);
        double double85 = variance51.evaluate(doubleArray81, (int) (byte) 1, (int) (byte) 0);
        variance39.incrementAll(doubleArray81, (int) (byte) 1, 1);
        double double89 = variance37.evaluate(doubleArray81);
        double double90 = variance1.evaluate(doubleArray81);
        boolean boolean91 = variance1.isBiasCorrected();
        variance1.setBiasCorrected(true);
        variance1.setBiasCorrected(false);
        java.lang.Class<?> wildcardClass96 = variance1.getClass();
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 2168.222222222222d + "'", double9 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 2168.222222222222d + "'", double21 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 16.566666666666663d + "'", double32 == 16.566666666666663d);
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 2168.222222222222d + "'", double47 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 2168.222222222222d + "'", double59 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 2168.222222222222d + "'", double71 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 16.566666666666663d + "'", double82 == 16.566666666666663d);
        org.junit.Assert.assertTrue(Double.isNaN(double85));
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + 13.805555555555552d + "'", double89 == 13.805555555555552d);
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + 16.566666666666663d + "'", double90 == 16.566666666666663d);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
        org.junit.Assert.assertNotNull(wildcardClass96);
    }

    @Test
    public void test0147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0147");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = null;
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment1);
        variance2.clear();
        // The following exception was thrown during execution in test generation
        try {
            long long4 = variance2.getN();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0148");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment(16.566666666418314d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance5 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double6 = variance5.getResult();
        double double7 = variance5.getResult();
        variance5.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance10 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray17 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double18 = variance10.evaluate(doubleArray17);
        variance10.setBiasCorrected(true);
        long long21 = variance10.getN();
        long long22 = variance10.getN();
        boolean boolean23 = variance10.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.Variance variance25 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray32 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double33 = variance25.evaluate(doubleArray32);
        double[] doubleArray37 = new double[] { (byte) 1, (byte) 100, 1L };
        double double38 = variance25.evaluate(doubleArray37);
        variance10.incrementAll(doubleArray37, (int) (short) 1, 0);
        variance5.incrementAll(doubleArray37);
        // The following exception was thrown during execution in test generation
        try {
            double double46 = variance1.evaluate(doubleArray37, 2601.8666666666663d, (int) (byte) 10, 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 2168.222222222222d + "'", double18 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 2168.222222222222d + "'", double33 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0, 100.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 2178.0d + "'", double38 == 2178.0d);
    }

    @Test
    public void test0149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0149");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray8 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double9 = variance1.evaluate(doubleArray8);
        long long10 = variance1.getN();
        variance1.increment((double) (byte) 1);
        variance1.increment((double) 6L);
        variance1.increment(2178.0d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance17 = new org.apache.commons.math.stat.descriptive.moment.Variance();
        long long18 = variance17.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance20 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray27 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double28 = variance20.evaluate(doubleArray27);
        variance20.setBiasCorrected(true);
        boolean boolean31 = variance20.isBiasCorrected();
        double[] doubleArray38 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double39 = variance20.evaluate(doubleArray38);
        boolean boolean41 = variance20.equals((java.lang.Object) 10.0d);
        boolean boolean42 = variance20.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.Variance variance44 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        boolean boolean45 = variance20.equals((java.lang.Object) false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance47 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray54 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double55 = variance47.evaluate(doubleArray54);
        variance47.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance59 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray66 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double67 = variance59.evaluate(doubleArray66);
        variance47.incrementAll(doubleArray66);
        double double70 = variance20.evaluate(doubleArray66, (double) 100.0f);
        variance17.incrementAll(doubleArray66, (int) (short) 1, (int) (byte) 0);
        variance1.incrementAll(doubleArray66);
        variance1.setBiasCorrected(true);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 2168.222222222222d + "'", double9 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 2168.222222222222d + "'", double28 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 16.566666666666663d + "'", double39 == 16.566666666666663d);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 2168.222222222222d + "'", double55 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 2168.222222222222d + "'", double67 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 2601.8666666666663d + "'", double70 == 2601.8666666666663d);
    }

    @Test
    public void test0150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0150");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance3 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray10 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double11 = variance3.evaluate(doubleArray10);
        variance3.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance15 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray22 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double23 = variance15.evaluate(doubleArray22);
        variance15.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance27 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray34 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double35 = variance27.evaluate(doubleArray34);
        variance27.setBiasCorrected(true);
        boolean boolean38 = variance27.isBiasCorrected();
        double[] doubleArray45 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double46 = variance27.evaluate(doubleArray45);
        double double49 = variance15.evaluate(doubleArray45, (int) (byte) 1, (int) (byte) 0);
        variance3.incrementAll(doubleArray45, (int) (byte) 1, 1);
        // The following exception was thrown during execution in test generation
        try {
            double double56 = variance1.evaluate(doubleArray45, (double) 'a', (int) (byte) -1, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: start position cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 2168.222222222222d + "'", double11 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 2168.222222222222d + "'", double23 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 2168.222222222222d + "'", double35 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 16.566666666666663d + "'", double46 == 16.566666666666663d);
        org.junit.Assert.assertTrue(Double.isNaN(double49));
    }

    @Test
    public void test0151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0151");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray8 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double9 = variance1.evaluate(doubleArray8);
        variance1.setBiasCorrected(true);
        long long12 = variance1.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray21 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double22 = variance14.evaluate(doubleArray21);
        variance14.clear();
        variance14.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance27 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        variance27.clear();
        double double29 = variance27.getResult();
        double[] doubleArray34 = new double[] { (-1), 2168.222222222222d, 16.566666666418314d, 10.0d };
        variance27.incrementAll(doubleArray34);
        boolean boolean36 = variance14.equals((java.lang.Object) doubleArray34);
        variance1.incrementAll(doubleArray34);
        org.apache.commons.math.stat.descriptive.moment.Variance variance39 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray46 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double47 = variance39.evaluate(doubleArray46);
        variance39.setBiasCorrected(true);
        long long50 = variance39.getN();
        long long51 = variance39.getN();
        boolean boolean53 = variance39.equals((java.lang.Object) 16.566666666666663d);
        boolean boolean54 = variance1.equals((java.lang.Object) variance39);
        org.apache.commons.math.stat.descriptive.moment.Variance variance56 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray63 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double64 = variance56.evaluate(doubleArray63);
        variance56.setBiasCorrected(true);
        variance56.increment((double) (byte) 0);
        double[] doubleArray71 = new double[] { 'a', 100L };
        double double73 = variance56.evaluate(doubleArray71, 0.0d);
        double double74 = variance39.evaluate(doubleArray71);
        java.lang.Class<?> wildcardClass75 = variance39.getClass();
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 2168.222222222222d + "'", double9 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 2168.222222222222d + "'", double22 == 2168.222222222222d);
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[-1.0, 2168.222222222222, 16.566666666418314, 10.0]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 2168.222222222222d + "'", double47 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 0L + "'", long50 == 0L);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 0L + "'", long51 == 0L);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 2168.222222222222d + "'", double64 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[97.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 4.5d + "'", double73 == 4.5d);
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 4.5d + "'", double74 == 4.5d);
        org.junit.Assert.assertNotNull(wildcardClass75);
    }

    @Test
    public void test0152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0152");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance3 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray10 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double11 = variance3.evaluate(doubleArray10);
        variance3.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance15 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray22 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double23 = variance15.evaluate(doubleArray22);
        variance15.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance27 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray34 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double35 = variance27.evaluate(doubleArray34);
        variance27.setBiasCorrected(true);
        boolean boolean38 = variance27.isBiasCorrected();
        double[] doubleArray45 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double46 = variance27.evaluate(doubleArray45);
        double double49 = variance15.evaluate(doubleArray45, (int) (byte) 1, (int) (byte) 0);
        variance3.incrementAll(doubleArray45, (int) (byte) 1, 1);
        double double53 = variance1.evaluate(doubleArray45);
        org.apache.commons.math.stat.descriptive.moment.Variance variance55 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray62 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double63 = variance55.evaluate(doubleArray62);
        variance55.setBiasCorrected(true);
        variance55.increment((double) (byte) 0);
        double[] doubleArray70 = new double[] { 'a', 100L };
        double double72 = variance55.evaluate(doubleArray70, 0.0d);
        // The following exception was thrown during execution in test generation
        try {
            variance1.incrementAll(doubleArray70, (int) (byte) 0, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 2168.222222222222d + "'", double11 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 2168.222222222222d + "'", double23 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 2168.222222222222d + "'", double35 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 16.566666666666663d + "'", double46 == 16.566666666666663d);
        org.junit.Assert.assertTrue(Double.isNaN(double49));
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 13.805555555555552d + "'", double53 == 13.805555555555552d);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 2168.222222222222d + "'", double63 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[97.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 4.5d + "'", double72 == 4.5d);
    }

    @Test
    public void test0153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0153");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        variance1.clear();
        double double3 = variance1.getResult();
        java.lang.Class<?> wildcardClass4 = variance1.getClass();
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test0154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0154");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = null;
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment1);
        variance2.increment(0.0d);
        variance2.clear();
        variance2.increment((double) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            double double8 = variance2.getResult();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0155");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray8 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double9 = variance1.evaluate(doubleArray8);
        variance1.setBiasCorrected(true);
        long long12 = variance1.getN();
        variance1.clear();
        double double14 = variance1.getResult();
        variance1.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment17 = null;
        org.apache.commons.math.stat.descriptive.moment.Variance variance18 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment17);
        variance18.clear();
        double[] doubleArray20 = new double[] {};
        variance18.incrementAll(doubleArray20);
        // The following exception was thrown during execution in test generation
        try {
            double double25 = variance1.evaluate(doubleArray20, (double) 0.0f, 10, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 2168.222222222222d + "'", double9 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[]");
    }

    @Test
    public void test0156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0156");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        variance1.setBiasCorrected(false);
        variance1.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance6 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray13 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double14 = variance6.evaluate(doubleArray13);
        variance6.setBiasCorrected(true);
        boolean boolean17 = variance6.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.Variance variance19 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        variance19.clear();
        boolean boolean21 = variance19.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.Variance variance23 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray30 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double31 = variance23.evaluate(doubleArray30);
        variance23.setBiasCorrected(true);
        long long34 = variance23.getN();
        long long35 = variance23.getN();
        double double36 = variance23.getResult();
        variance23.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance39 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray46 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double47 = variance39.evaluate(doubleArray46);
        double[] doubleArray51 = new double[] { (byte) 1, (byte) 100, 1L };
        double double52 = variance39.evaluate(doubleArray51);
        org.apache.commons.math.stat.descriptive.moment.Variance variance54 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray61 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double62 = variance54.evaluate(doubleArray61);
        variance54.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance66 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray73 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double74 = variance66.evaluate(doubleArray73);
        variance54.incrementAll(doubleArray73);
        variance39.incrementAll(doubleArray73);
        double double77 = variance23.evaluate(doubleArray73);
        double double78 = variance19.evaluate(doubleArray73);
        double double79 = variance6.evaluate(doubleArray73);
        // The following exception was thrown during execution in test generation
        try {
            double double83 = variance1.evaluate(doubleArray73, (double) 0.0f, (int) '4', (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 2168.222222222222d + "'", double14 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 2168.222222222222d + "'", double31 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 2168.222222222222d + "'", double47 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0, 100.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 2178.0d + "'", double52 == 2178.0d);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 2168.222222222222d + "'", double62 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 2168.222222222222d + "'", double74 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 2601.866666666667d + "'", double77 == 2601.866666666667d);
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 2168.222222222222d + "'", double78 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 2601.866666666667d + "'", double79 == 2601.866666666667d);
    }

    @Test
    public void test0157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0157");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = null;
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment1);
        variance2.increment(0.0d);
        java.lang.Class<?> wildcardClass5 = variance2.getClass();
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test0158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0158");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray8 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double9 = variance1.evaluate(doubleArray8);
        variance1.setBiasCorrected(true);
        variance1.increment((double) (byte) 0);
        double[] doubleArray16 = new double[] { 'a', 100L };
        double double18 = variance1.evaluate(doubleArray16, 0.0d);
        long long19 = variance1.getN();
        boolean boolean20 = variance1.isBiasCorrected();
        long long21 = variance1.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance23 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray30 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double31 = variance23.evaluate(doubleArray30);
        variance23.setBiasCorrected(true);
        boolean boolean34 = variance23.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.Variance variance36 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        variance36.clear();
        boolean boolean38 = variance36.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.Variance variance40 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray47 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double48 = variance40.evaluate(doubleArray47);
        variance40.setBiasCorrected(true);
        long long51 = variance40.getN();
        long long52 = variance40.getN();
        double double53 = variance40.getResult();
        variance40.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance56 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray63 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double64 = variance56.evaluate(doubleArray63);
        double[] doubleArray68 = new double[] { (byte) 1, (byte) 100, 1L };
        double double69 = variance56.evaluate(doubleArray68);
        org.apache.commons.math.stat.descriptive.moment.Variance variance71 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray78 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double79 = variance71.evaluate(doubleArray78);
        variance71.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance83 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray90 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double91 = variance83.evaluate(doubleArray90);
        variance71.incrementAll(doubleArray90);
        variance56.incrementAll(doubleArray90);
        double double94 = variance40.evaluate(doubleArray90);
        double double95 = variance36.evaluate(doubleArray90);
        double double96 = variance23.evaluate(doubleArray90);
        // The following exception was thrown during execution in test generation
        try {
            double double99 = variance1.evaluate(doubleArray90, (int) 'a', (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 2168.222222222222d + "'", double9 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[97.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 4.5d + "'", double18 == 4.5d);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 1L + "'", long19 == 1L);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 1L + "'", long21 == 1L);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 2168.222222222222d + "'", double31 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 2168.222222222222d + "'", double48 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 0L + "'", long51 == 0L);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 0L + "'", long52 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double53));
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 2168.222222222222d + "'", double64 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[1.0, 100.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 2178.0d + "'", double69 == 2178.0d);
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 2168.222222222222d + "'", double79 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray90), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 2168.222222222222d + "'", double91 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + double94 + "' != '" + 2601.866666666667d + "'", double94 == 2601.866666666667d);
        org.junit.Assert.assertTrue("'" + double95 + "' != '" + 2168.222222222222d + "'", double95 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + double96 + "' != '" + 2601.866666666667d + "'", double96 == 2601.866666666667d);
    }

    @Test
    public void test0159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0159");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray8 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double9 = variance1.evaluate(doubleArray8);
        variance1.setBiasCorrected(true);
        boolean boolean12 = variance1.isBiasCorrected();
        double[] doubleArray19 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double20 = variance1.evaluate(doubleArray19);
        org.apache.commons.math.stat.descriptive.moment.Variance variance22 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray29 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double30 = variance22.evaluate(doubleArray29);
        variance22.setBiasCorrected(true);
        boolean boolean33 = variance22.isBiasCorrected();
        double[] doubleArray40 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double41 = variance22.evaluate(doubleArray40);
        double double44 = variance1.evaluate(doubleArray40, (int) (byte) 1, 0);
        variance1.setBiasCorrected(true);
        variance1.setBiasCorrected(true);
        double double49 = variance1.getResult();
        boolean boolean50 = variance1.isBiasCorrected();
        boolean boolean51 = variance1.isBiasCorrected();
        long long52 = variance1.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance54 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray61 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double62 = variance54.evaluate(doubleArray61);
        variance54.setBiasCorrected(true);
        long long65 = variance54.getN();
        variance54.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance68 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray75 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double76 = variance68.evaluate(doubleArray75);
        double double77 = variance54.evaluate(doubleArray75);
        // The following exception was thrown during execution in test generation
        try {
            double double80 = variance1.evaluate(doubleArray75, 10, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 2168.222222222222d + "'", double9 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 16.566666666666663d + "'", double20 == 16.566666666666663d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 2168.222222222222d + "'", double30 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 16.566666666666663d + "'", double41 == 16.566666666666663d);
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertTrue(Double.isNaN(double49));
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 0L + "'", long52 == 0L);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 2168.222222222222d + "'", double62 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 0L + "'", long65 == 0L);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 2168.222222222222d + "'", double76 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 2601.866666666667d + "'", double77 == 2601.866666666667d);
    }

    @Test
    public void test0160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0160");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray8 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double9 = variance1.evaluate(doubleArray8);
        double[] doubleArray13 = new double[] { (byte) 1, (byte) 100, 1L };
        double double14 = variance1.evaluate(doubleArray13);
        double double15 = variance1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance17 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray24 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double25 = variance17.evaluate(doubleArray24);
        variance17.clear();
        variance17.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance30 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray37 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double38 = variance30.evaluate(doubleArray37);
        variance30.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance42 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray49 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double50 = variance42.evaluate(doubleArray49);
        variance42.setBiasCorrected(true);
        boolean boolean53 = variance42.isBiasCorrected();
        double[] doubleArray60 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double61 = variance42.evaluate(doubleArray60);
        double double64 = variance30.evaluate(doubleArray60, (int) (byte) 1, (int) (byte) 0);
        variance17.incrementAll(doubleArray60);
        // The following exception was thrown during execution in test generation
        try {
            double double68 = variance1.evaluate(doubleArray60, (int) (byte) -1, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: start position cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 2168.222222222222d + "'", double9 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, 100.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 2178.0d + "'", double14 == 2178.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 2168.222222222222d + "'", double25 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 2168.222222222222d + "'", double38 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 2168.222222222222d + "'", double50 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 16.566666666666663d + "'", double61 == 16.566666666666663d);
        org.junit.Assert.assertTrue(Double.isNaN(double64));
    }

    @Test
    public void test0161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0161");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray8 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double9 = variance1.evaluate(doubleArray8);
        variance1.setBiasCorrected(true);
        boolean boolean12 = variance1.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray21 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double22 = variance14.evaluate(doubleArray21);
        variance14.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance26 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray33 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double34 = variance26.evaluate(doubleArray33);
        variance26.setBiasCorrected(true);
        boolean boolean37 = variance26.isBiasCorrected();
        double[] doubleArray44 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double45 = variance26.evaluate(doubleArray44);
        double double48 = variance14.evaluate(doubleArray44, (int) (byte) 1, (int) (byte) 0);
        double double51 = variance1.evaluate(doubleArray44, (int) (byte) 1, 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance53 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray60 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double61 = variance53.evaluate(doubleArray60);
        variance53.clear();
        variance53.setBiasCorrected(true);
        boolean boolean65 = variance1.equals((java.lang.Object) variance53);
        org.apache.commons.math.stat.descriptive.moment.Variance variance67 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray74 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double75 = variance67.evaluate(doubleArray74);
        variance67.setBiasCorrected(true);
        boolean boolean78 = variance67.isBiasCorrected();
        double[] doubleArray85 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double86 = variance67.evaluate(doubleArray85);
        double double87 = variance67.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance89 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        variance89.clear();
        double double91 = variance89.getResult();
        double[] doubleArray96 = new double[] { (-1), 2168.222222222222d, 16.566666666418314d, 10.0d };
        variance89.incrementAll(doubleArray96);
        double double98 = variance67.evaluate(doubleArray96);
        double double99 = variance53.evaluate(doubleArray96);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 2168.222222222222d + "'", double9 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 2168.222222222222d + "'", double22 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 2168.222222222222d + "'", double34 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 16.566666666666663d + "'", double45 == 16.566666666666663d);
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertTrue(Double.isNaN(double51));
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 2168.222222222222d + "'", double61 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 2168.222222222222d + "'", double75 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 16.566666666666663d + "'", double86 == 16.566666666666663d);
        org.junit.Assert.assertTrue(Double.isNaN(double87));
        org.junit.Assert.assertTrue(Double.isNaN(double91));
        org.junit.Assert.assertNotNull(doubleArray96);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray96), "[-1.0, 2168.222222222222, 16.566666666418314, 10.0]");
        org.junit.Assert.assertTrue("'" + double98 + "' != '" + 1166128.5457099646d + "'", double98 == 1166128.5457099646d);
        org.junit.Assert.assertTrue("'" + double99 + "' != '" + 1166128.5457099646d + "'", double99 == 1166128.5457099646d);
    }

    @Test
    public void test0162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0162");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray8 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double9 = variance1.evaluate(doubleArray8);
        double[] doubleArray13 = new double[] { (byte) 1, (byte) 100, 1L };
        double double14 = variance1.evaluate(doubleArray13);
        double double15 = variance1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance17 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double18 = variance17.getResult();
        double double19 = variance17.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance21 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray28 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double29 = variance21.evaluate(doubleArray28);
        variance21.setBiasCorrected(true);
        long long32 = variance21.getN();
        variance21.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance35 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray42 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double43 = variance35.evaluate(doubleArray42);
        double double44 = variance21.evaluate(doubleArray42);
        variance17.incrementAll(doubleArray42);
        // The following exception was thrown during execution in test generation
        try {
            double double49 = variance1.evaluate(doubleArray42, (double) 0L, (int) (byte) -1, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: start position cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 2168.222222222222d + "'", double9 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, 100.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 2178.0d + "'", double14 == 2178.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 2168.222222222222d + "'", double29 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 2168.222222222222d + "'", double43 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 2601.866666666667d + "'", double44 == 2601.866666666667d);
    }

    @Test
    public void test0163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0163");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        variance1.clear();
        boolean boolean3 = variance1.isBiasCorrected();
        long long4 = variance1.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance6 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray13 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double14 = variance6.evaluate(doubleArray13);
        variance6.setBiasCorrected(true);
        boolean boolean17 = variance6.isBiasCorrected();
        double[] doubleArray24 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double25 = variance6.evaluate(doubleArray24);
        boolean boolean27 = variance6.equals((java.lang.Object) 10.0d);
        boolean boolean28 = variance6.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.Variance variance30 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        boolean boolean31 = variance6.equals((java.lang.Object) false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance33 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray40 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double41 = variance33.evaluate(doubleArray40);
        variance33.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance45 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray52 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double53 = variance45.evaluate(doubleArray52);
        variance33.incrementAll(doubleArray52);
        double double56 = variance6.evaluate(doubleArray52, (double) 100.0f);
        // The following exception was thrown during execution in test generation
        try {
            double double59 = variance1.evaluate(doubleArray52, (int) (short) 100, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: length cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 2168.222222222222d + "'", double14 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 16.566666666666663d + "'", double25 == 16.566666666666663d);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 2168.222222222222d + "'", double41 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 2168.222222222222d + "'", double53 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 2601.8666666666663d + "'", double56 == 2601.8666666666663d);
    }

    @Test
    public void test0164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0164");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray8 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double9 = variance1.evaluate(doubleArray8);
        variance1.setBiasCorrected(true);
        long long12 = variance1.getN();
        long long13 = variance1.getN();
        boolean boolean15 = variance1.equals((java.lang.Object) 16.566666666666663d);
        boolean boolean17 = variance1.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance19 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray26 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double27 = variance19.evaluate(doubleArray26);
        variance19.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance31 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray38 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double39 = variance31.evaluate(doubleArray38);
        variance19.incrementAll(doubleArray38);
        double double41 = variance1.evaluate(doubleArray38);
        boolean boolean42 = variance1.isBiasCorrected();
        java.lang.Class<?> wildcardClass43 = variance1.getClass();
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 2168.222222222222d + "'", double9 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 2168.222222222222d + "'", double27 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 2168.222222222222d + "'", double39 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 2601.866666666667d + "'", double41 == 2601.866666666667d);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(wildcardClass43);
    }

    @Test
    public void test0165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0165");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray8 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double9 = variance1.evaluate(doubleArray8);
        variance1.setBiasCorrected(true);
        boolean boolean12 = variance1.isBiasCorrected();
        double[] doubleArray19 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double20 = variance1.evaluate(doubleArray19);
        org.apache.commons.math.stat.descriptive.moment.Variance variance22 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray29 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double30 = variance22.evaluate(doubleArray29);
        variance22.setBiasCorrected(true);
        boolean boolean33 = variance22.isBiasCorrected();
        double[] doubleArray40 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double41 = variance22.evaluate(doubleArray40);
        double double44 = variance1.evaluate(doubleArray40, (int) (byte) 1, 0);
        variance1.setBiasCorrected(true);
        variance1.setBiasCorrected(true);
        double double49 = variance1.getResult();
        boolean boolean50 = variance1.isBiasCorrected();
        boolean boolean51 = variance1.isBiasCorrected();
        variance1.increment(0.0d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance55 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray62 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double63 = variance55.evaluate(doubleArray62);
        variance1.incrementAll(doubleArray62, (int) (byte) 0, 1);
        boolean boolean67 = variance1.isBiasCorrected();
        java.lang.Class<?> wildcardClass68 = variance1.getClass();
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 2168.222222222222d + "'", double9 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 16.566666666666663d + "'", double20 == 16.566666666666663d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 2168.222222222222d + "'", double30 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 16.566666666666663d + "'", double41 == 16.566666666666663d);
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertTrue(Double.isNaN(double49));
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 2168.222222222222d + "'", double63 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(wildcardClass68);
    }

    @Test
    public void test0166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0166");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray8 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double9 = variance1.evaluate(doubleArray8);
        variance1.setBiasCorrected(true);
        long long12 = variance1.getN();
        long long13 = variance1.getN();
        boolean boolean15 = variance1.equals((java.lang.Object) 16.566666666666663d);
        boolean boolean17 = variance1.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance19 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray26 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double27 = variance19.evaluate(doubleArray26);
        variance19.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance31 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray38 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double39 = variance31.evaluate(doubleArray38);
        variance19.incrementAll(doubleArray38);
        double double41 = variance1.evaluate(doubleArray38);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment43 = null;
        org.apache.commons.math.stat.descriptive.moment.Variance variance44 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment43);
        variance44.clear();
        variance44.setBiasCorrected(false);
        boolean boolean48 = variance44.isBiasCorrected();
        variance44.increment(13.805555555555552d);
        boolean boolean51 = variance44.isBiasCorrected();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean52 = variance1.equals((java.lang.Object) variance44);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 2168.222222222222d + "'", double9 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 2168.222222222222d + "'", double27 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 2168.222222222222d + "'", double39 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 2601.866666666667d + "'", double41 == 2601.866666666667d);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
    }

    @Test
    public void test0167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0167");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double2 = variance1.getResult();
        double double3 = variance1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance5 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray12 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double13 = variance5.evaluate(doubleArray12);
        variance5.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance17 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray24 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double25 = variance17.evaluate(doubleArray24);
        variance5.incrementAll(doubleArray24);
        variance5.clear();
        variance5.setBiasCorrected(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance31 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray38 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double39 = variance31.evaluate(doubleArray38);
        variance31.setBiasCorrected(true);
        long long42 = variance31.getN();
        long long43 = variance31.getN();
        boolean boolean45 = variance31.equals((java.lang.Object) 16.566666666666663d);
        boolean boolean47 = variance31.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance49 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray56 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double57 = variance49.evaluate(doubleArray56);
        variance49.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance61 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray68 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double69 = variance61.evaluate(doubleArray68);
        variance49.incrementAll(doubleArray68);
        double double71 = variance31.evaluate(doubleArray68);
        double double73 = variance5.evaluate(doubleArray68, (double) (byte) 100);
        double double75 = variance1.evaluate(doubleArray68, (double) (-1));
        java.lang.Class<?> wildcardClass76 = doubleArray68.getClass();
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 2168.222222222222d + "'", double13 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 2168.222222222222d + "'", double25 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 2168.222222222222d + "'", double39 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 0L + "'", long43 == 0L);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 2168.222222222222d + "'", double57 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 2168.222222222222d + "'", double69 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 2601.866666666667d + "'", double71 == 2601.866666666667d);
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 2168.222222222222d + "'", double73 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 2601.8666666666663d + "'", double75 == 2601.8666666666663d);
        org.junit.Assert.assertNotNull(wildcardClass76);
    }

    @Test
    public void test0168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0168");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray8 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double9 = variance1.evaluate(doubleArray8);
        variance1.setBiasCorrected(true);
        long long12 = variance1.getN();
        variance1.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance15 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray22 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double23 = variance15.evaluate(doubleArray22);
        variance15.setBiasCorrected(true);
        long long26 = variance15.getN();
        long long27 = variance15.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance29 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray36 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double37 = variance29.evaluate(doubleArray36);
        double[] doubleArray41 = new double[] { (byte) 1, (byte) 100, 1L };
        double double42 = variance29.evaluate(doubleArray41);
        double double44 = variance15.evaluate(doubleArray41, (double) 10.0f);
        // The following exception was thrown during execution in test generation
        try {
            variance1.incrementAll(doubleArray41, (int) (short) 0, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 2168.222222222222d + "'", double9 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 2168.222222222222d + "'", double23 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 2168.222222222222d + "'", double37 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, 100.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 2178.0d + "'", double42 == 2178.0d);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 3267.0d + "'", double44 == 3267.0d);
    }

    @Test
    public void test0169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0169");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray8 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double9 = variance1.evaluate(doubleArray8);
        variance1.setBiasCorrected(true);
        boolean boolean12 = variance1.isBiasCorrected();
        double[] doubleArray19 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double20 = variance1.evaluate(doubleArray19);
        org.apache.commons.math.stat.descriptive.moment.Variance variance22 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray29 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double30 = variance22.evaluate(doubleArray29);
        variance22.setBiasCorrected(true);
        boolean boolean33 = variance22.isBiasCorrected();
        double[] doubleArray40 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double41 = variance22.evaluate(doubleArray40);
        double double44 = variance1.evaluate(doubleArray40, (int) (byte) 1, 0);
        boolean boolean45 = variance1.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment47 = null;
        org.apache.commons.math.stat.descriptive.moment.Variance variance48 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment47);
        variance48.clear();
        double[] doubleArray50 = new double[] {};
        variance48.incrementAll(doubleArray50);
        // The following exception was thrown during execution in test generation
        try {
            variance1.incrementAll(doubleArray50, (int) (byte) -1, (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: start position cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 2168.222222222222d + "'", double9 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 16.566666666666663d + "'", double20 == 16.566666666666663d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 2168.222222222222d + "'", double30 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 16.566666666666663d + "'", double41 == 16.566666666666663d);
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[]");
    }

    @Test
    public void test0170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0170");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        variance1.clear();
        boolean boolean3 = variance1.isBiasCorrected();
        long long4 = variance1.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance6 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray13 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double14 = variance6.evaluate(doubleArray13);
        variance6.setBiasCorrected(true);
        boolean boolean17 = variance6.isBiasCorrected();
        double[] doubleArray24 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double25 = variance6.evaluate(doubleArray24);
        org.apache.commons.math.stat.descriptive.moment.Variance variance27 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray34 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double35 = variance27.evaluate(doubleArray34);
        variance27.setBiasCorrected(true);
        boolean boolean38 = variance27.isBiasCorrected();
        double[] doubleArray45 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double46 = variance27.evaluate(doubleArray45);
        double double49 = variance6.evaluate(doubleArray45, (int) (byte) 1, 0);
        variance6.setBiasCorrected(true);
        variance6.setBiasCorrected(true);
        double double54 = variance6.getResult();
        boolean boolean55 = variance6.isBiasCorrected();
        boolean boolean56 = variance6.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.Variance variance58 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray65 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double66 = variance58.evaluate(doubleArray65);
        variance58.setBiasCorrected(true);
        boolean boolean69 = variance58.isBiasCorrected();
        double[] doubleArray76 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double77 = variance58.evaluate(doubleArray76);
        double double78 = variance6.evaluate(doubleArray76);
        // The following exception was thrown during execution in test generation
        try {
            double double81 = variance1.evaluate(doubleArray76, (int) '#', (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 2168.222222222222d + "'", double14 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 16.566666666666663d + "'", double25 == 16.566666666666663d);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 2168.222222222222d + "'", double35 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 16.566666666666663d + "'", double46 == 16.566666666666663d);
        org.junit.Assert.assertTrue(Double.isNaN(double49));
        org.junit.Assert.assertTrue(Double.isNaN(double54));
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 2168.222222222222d + "'", double66 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 16.566666666666663d + "'", double77 == 16.566666666666663d);
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 16.566666666666663d + "'", double78 == 16.566666666666663d);
    }

    @Test
    public void test0171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0171");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = null;
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        variance2.setBiasCorrected(true);
        double[] doubleArray5 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double8 = variance2.evaluate(doubleArray5, (int) (short) 100, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: input value array is null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0172");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray8 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double9 = variance1.evaluate(doubleArray8);
        variance1.clear();
        variance1.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        variance14.clear();
        double double16 = variance14.getResult();
        double[] doubleArray21 = new double[] { (-1), 2168.222222222222d, 16.566666666418314d, 10.0d };
        variance14.incrementAll(doubleArray21);
        boolean boolean23 = variance1.equals((java.lang.Object) doubleArray21);
        java.lang.Class<?> wildcardClass24 = doubleArray21.getClass();
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 2168.222222222222d + "'", double9 == 2168.222222222222d);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[-1.0, 2168.222222222222, 16.566666666418314, 10.0]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(wildcardClass24);
    }

    @Test
    public void test0173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0173");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray8 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double9 = variance1.evaluate(doubleArray8);
        variance1.setBiasCorrected(true);
        long long12 = variance1.getN();
        long long13 = variance1.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance15 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray22 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double23 = variance15.evaluate(doubleArray22);
        double[] doubleArray27 = new double[] { (byte) 1, (byte) 100, 1L };
        double double28 = variance15.evaluate(doubleArray27);
        double double30 = variance1.evaluate(doubleArray27, (double) 10.0f);
        java.lang.Class<?> wildcardClass31 = doubleArray27.getClass();
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 2168.222222222222d + "'", double9 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 2168.222222222222d + "'", double23 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0, 100.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 2178.0d + "'", double28 == 2178.0d);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 3267.0d + "'", double30 == 3267.0d);
        org.junit.Assert.assertNotNull(wildcardClass31);
    }

    @Test
    public void test0174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0174");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = null;
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment1);
        variance2.increment(0.0d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance6 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray13 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double14 = variance6.evaluate(doubleArray13);
        variance6.setBiasCorrected(true);
        variance6.increment((double) (byte) 0);
        double[] doubleArray21 = new double[] { 'a', 100L };
        double double23 = variance6.evaluate(doubleArray21, 0.0d);
        // The following exception was thrown during execution in test generation
        try {
            double double27 = variance2.evaluate(doubleArray21, (double) (short) -1, (int) (short) 100, 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 2168.222222222222d + "'", double14 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[97.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 4.5d + "'", double23 == 4.5d);
    }

    @Test
    public void test0175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0175");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = null;
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        variance2.increment((double) (byte) 10);
        double[] doubleArray5 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double6 = variance2.evaluate(doubleArray5);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: input values array is null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0176");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray8 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double9 = variance1.evaluate(doubleArray8);
        variance1.setBiasCorrected(true);
        long long12 = variance1.getN();
        long long13 = variance1.getN();
        double double14 = variance1.getResult();
        variance1.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance17 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray24 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double25 = variance17.evaluate(doubleArray24);
        double[] doubleArray29 = new double[] { (byte) 1, (byte) 100, 1L };
        double double30 = variance17.evaluate(doubleArray29);
        org.apache.commons.math.stat.descriptive.moment.Variance variance32 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray39 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double40 = variance32.evaluate(doubleArray39);
        variance32.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance44 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray51 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double52 = variance44.evaluate(doubleArray51);
        variance32.incrementAll(doubleArray51);
        variance17.incrementAll(doubleArray51);
        double double55 = variance1.evaluate(doubleArray51);
        long long56 = variance1.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance58 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        variance58.clear();
        double double60 = variance58.getResult();
        double[] doubleArray65 = new double[] { (-1), 2168.222222222222d, 16.566666666418314d, 10.0d };
        variance58.incrementAll(doubleArray65);
        // The following exception was thrown during execution in test generation
        try {
            double double70 = variance1.evaluate(doubleArray65, (double) 6L, 0, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 2168.222222222222d + "'", double9 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 2168.222222222222d + "'", double25 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, 100.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 2178.0d + "'", double30 == 2178.0d);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 2168.222222222222d + "'", double40 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 2168.222222222222d + "'", double52 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 2601.866666666667d + "'", double55 == 2601.866666666667d);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 0L + "'", long56 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double60));
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[-1.0, 2168.222222222222, 16.566666666418314, 10.0]");
    }

    @Test
    public void test0177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0177");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        variance1.clear();
        boolean boolean3 = variance1.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.Variance variance5 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray12 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double13 = variance5.evaluate(doubleArray12);
        variance5.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance17 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray24 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double25 = variance17.evaluate(doubleArray24);
        variance17.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance29 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray36 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double37 = variance29.evaluate(doubleArray36);
        variance29.setBiasCorrected(true);
        boolean boolean40 = variance29.isBiasCorrected();
        double[] doubleArray47 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double48 = variance29.evaluate(doubleArray47);
        double double51 = variance17.evaluate(doubleArray47, (int) (byte) 1, (int) (byte) 0);
        variance5.incrementAll(doubleArray47, (int) (byte) 1, 1);
        // The following exception was thrown during execution in test generation
        try {
            double double57 = variance1.evaluate(doubleArray47, (int) '#', (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 2168.222222222222d + "'", double13 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 2168.222222222222d + "'", double25 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 2168.222222222222d + "'", double37 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 16.566666666666663d + "'", double48 == 16.566666666666663d);
        org.junit.Assert.assertTrue(Double.isNaN(double51));
    }

    @Test
    public void test0178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0178");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray8 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double9 = variance1.evaluate(doubleArray8);
        variance1.setBiasCorrected(true);
        long long12 = variance1.getN();
        long long13 = variance1.getN();
        boolean boolean15 = variance1.equals((java.lang.Object) 16.566666666666663d);
        boolean boolean17 = variance1.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance19 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray26 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double27 = variance19.evaluate(doubleArray26);
        variance19.setBiasCorrected(true);
        long long30 = variance19.getN();
        long long31 = variance19.getN();
        double double32 = variance19.getResult();
        variance19.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance35 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray42 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double43 = variance35.evaluate(doubleArray42);
        variance35.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance47 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray54 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double55 = variance47.evaluate(doubleArray54);
        variance35.incrementAll(doubleArray54);
        variance35.clear();
        variance35.setBiasCorrected(false);
        java.lang.Class<?> wildcardClass60 = variance35.getClass();
        boolean boolean61 = variance19.equals((java.lang.Object) variance35);
        org.apache.commons.math.stat.descriptive.moment.Variance variance63 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray70 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double71 = variance63.evaluate(doubleArray70);
        double[] doubleArray75 = new double[] { (byte) 1, (byte) 100, 1L };
        double double76 = variance63.evaluate(doubleArray75);
        variance35.incrementAll(doubleArray75);
        // The following exception was thrown during execution in test generation
        try {
            variance1.incrementAll(doubleArray75, (int) '#', (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 2168.222222222222d + "'", double9 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 2168.222222222222d + "'", double27 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 2168.222222222222d + "'", double43 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 2168.222222222222d + "'", double55 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(wildcardClass60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 2168.222222222222d + "'", double71 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[1.0, 100.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 2178.0d + "'", double76 == 2178.0d);
    }

    @Test
    public void test0179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0179");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray8 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double9 = variance1.evaluate(doubleArray8);
        variance1.clear();
        variance1.setBiasCorrected(true);
        double double13 = variance1.getResult();
        variance1.increment((double) 1.0f);
        double[] doubleArray16 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double19 = variance1.evaluate(doubleArray16, (int) (byte) 100, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: input value array is null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 2168.222222222222d + "'", double9 == 2168.222222222222d);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
    }

    @Test
    public void test0180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0180");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance3 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray10 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double11 = variance3.evaluate(doubleArray10);
        double[] doubleArray15 = new double[] { (byte) 1, (byte) 100, 1L };
        double double16 = variance3.evaluate(doubleArray15);
        boolean boolean17 = variance1.equals((java.lang.Object) variance3);
        variance1.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance20 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray27 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double28 = variance20.evaluate(doubleArray27);
        double double29 = variance20.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance31 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray38 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double39 = variance31.evaluate(doubleArray38);
        variance31.setBiasCorrected(true);
        long long42 = variance31.getN();
        long long43 = variance31.getN();
        boolean boolean45 = variance31.equals((java.lang.Object) 16.566666666666663d);
        boolean boolean47 = variance31.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance49 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray56 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double57 = variance49.evaluate(doubleArray56);
        variance49.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance61 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray68 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double69 = variance61.evaluate(doubleArray68);
        variance49.incrementAll(doubleArray68);
        double double71 = variance31.evaluate(doubleArray68);
        variance20.incrementAll(doubleArray68);
        // The following exception was thrown during execution in test generation
        try {
            double double76 = variance1.evaluate(doubleArray68, 2178.0d, 0, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: length cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 2168.222222222222d + "'", double11 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[1.0, 100.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 2178.0d + "'", double16 == 2178.0d);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 2168.222222222222d + "'", double28 == 2168.222222222222d);
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 2168.222222222222d + "'", double39 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 0L + "'", long43 == 0L);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 2168.222222222222d + "'", double57 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 2168.222222222222d + "'", double69 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 2601.866666666667d + "'", double71 == 2601.866666666667d);
    }

    @Test
    public void test0181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0181");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray8 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double9 = variance1.evaluate(doubleArray8);
        variance1.setBiasCorrected(true);
        boolean boolean12 = variance1.isBiasCorrected();
        double[] doubleArray19 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double20 = variance1.evaluate(doubleArray19);
        double double21 = variance1.getResult();
        variance1.setBiasCorrected(true);
        boolean boolean24 = variance1.isBiasCorrected();
        variance1.setBiasCorrected(false);
        variance1.increment(2601.866666666667d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance30 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray37 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double38 = variance30.evaluate(doubleArray37);
        variance30.setBiasCorrected(true);
        boolean boolean41 = variance30.isBiasCorrected();
        double[] doubleArray48 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double49 = variance30.evaluate(doubleArray48);
        double double50 = variance30.getResult();
        long long51 = variance30.getN();
        variance30.increment((double) '#');
        variance30.increment(100.0d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance57 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray64 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double65 = variance57.evaluate(doubleArray64);
        variance57.setBiasCorrected(true);
        boolean boolean68 = variance57.isBiasCorrected();
        double[] doubleArray75 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double76 = variance57.evaluate(doubleArray75);
        double double78 = variance30.evaluate(doubleArray75, (double) (byte) 100);
        // The following exception was thrown during execution in test generation
        try {
            double double82 = variance1.evaluate(doubleArray75, 1.0d, (int) (short) 100, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 2168.222222222222d + "'", double9 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 16.566666666666663d + "'", double20 == 16.566666666666663d);
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 2168.222222222222d + "'", double38 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 16.566666666666663d + "'", double49 == 16.566666666666663d);
        org.junit.Assert.assertTrue(Double.isNaN(double50));
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 0L + "'", long51 == 0L);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 2168.222222222222d + "'", double65 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 16.566666666666663d + "'", double76 == 16.566666666666663d);
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 16.566666666667153d + "'", double78 == 16.566666666667153d);
    }

    @Test
    public void test0182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0182");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray8 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double9 = variance1.evaluate(doubleArray8);
        double[] doubleArray13 = new double[] { (byte) 1, (byte) 100, 1L };
        double double14 = variance1.evaluate(doubleArray13);
        org.apache.commons.math.stat.descriptive.moment.Variance variance16 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray23 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double24 = variance16.evaluate(doubleArray23);
        variance16.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance28 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray35 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double36 = variance28.evaluate(doubleArray35);
        variance16.incrementAll(doubleArray35);
        variance1.incrementAll(doubleArray35);
        boolean boolean40 = variance1.equals((java.lang.Object) (byte) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance42 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray49 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double50 = variance42.evaluate(doubleArray49);
        variance42.setBiasCorrected(true);
        long long53 = variance42.getN();
        variance42.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance56 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray63 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double64 = variance56.evaluate(doubleArray63);
        double double65 = variance42.evaluate(doubleArray63);
        org.apache.commons.math.stat.descriptive.moment.Variance variance67 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double68 = variance67.getResult();
        double double69 = variance67.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance71 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray78 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double79 = variance71.evaluate(doubleArray78);
        variance71.setBiasCorrected(true);
        long long82 = variance71.getN();
        variance71.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance85 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray92 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double93 = variance85.evaluate(doubleArray92);
        double double94 = variance71.evaluate(doubleArray92);
        variance67.incrementAll(doubleArray92);
        double double96 = variance42.evaluate(doubleArray92);
        double double97 = variance1.evaluate(doubleArray92);
        variance1.clear();
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 2168.222222222222d + "'", double9 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, 100.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 2178.0d + "'", double14 == 2178.0d);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 2168.222222222222d + "'", double24 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 2168.222222222222d + "'", double36 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 2168.222222222222d + "'", double50 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 0L + "'", long53 == 0L);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 2168.222222222222d + "'", double64 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 2601.866666666667d + "'", double65 == 2601.866666666667d);
        org.junit.Assert.assertTrue(Double.isNaN(double68));
        org.junit.Assert.assertTrue(Double.isNaN(double69));
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 2168.222222222222d + "'", double79 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + long82 + "' != '" + 0L + "'", long82 == 0L);
        org.junit.Assert.assertNotNull(doubleArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray92), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double93 + "' != '" + 2168.222222222222d + "'", double93 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + double94 + "' != '" + 2601.866666666667d + "'", double94 == 2601.866666666667d);
        org.junit.Assert.assertTrue("'" + double96 + "' != '" + 2601.866666666667d + "'", double96 == 2601.866666666667d);
        org.junit.Assert.assertTrue("'" + double97 + "' != '" + 2168.222222222222d + "'", double97 == 2168.222222222222d);
    }

    @Test
    public void test0183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0183");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray8 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double9 = variance1.evaluate(doubleArray8);
        variance1.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance13 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray20 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double21 = variance13.evaluate(doubleArray20);
        variance13.setBiasCorrected(true);
        boolean boolean24 = variance13.isBiasCorrected();
        double[] doubleArray31 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double32 = variance13.evaluate(doubleArray31);
        double double35 = variance1.evaluate(doubleArray31, (int) (byte) 1, (int) (byte) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance37 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance39 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray46 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double47 = variance39.evaluate(doubleArray46);
        variance39.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance51 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray58 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double59 = variance51.evaluate(doubleArray58);
        variance51.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance63 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray70 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double71 = variance63.evaluate(doubleArray70);
        variance63.setBiasCorrected(true);
        boolean boolean74 = variance63.isBiasCorrected();
        double[] doubleArray81 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double82 = variance63.evaluate(doubleArray81);
        double double85 = variance51.evaluate(doubleArray81, (int) (byte) 1, (int) (byte) 0);
        variance39.incrementAll(doubleArray81, (int) (byte) 1, 1);
        double double89 = variance37.evaluate(doubleArray81);
        double double90 = variance1.evaluate(doubleArray81);
        long long91 = variance1.getN();
        variance1.clear();
        variance1.setBiasCorrected(false);
        boolean boolean95 = variance1.isBiasCorrected();
        java.lang.Class<?> wildcardClass96 = variance1.getClass();
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 2168.222222222222d + "'", double9 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 2168.222222222222d + "'", double21 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 16.566666666666663d + "'", double32 == 16.566666666666663d);
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 2168.222222222222d + "'", double47 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 2168.222222222222d + "'", double59 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 2168.222222222222d + "'", double71 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 16.566666666666663d + "'", double82 == 16.566666666666663d);
        org.junit.Assert.assertTrue(Double.isNaN(double85));
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + 13.805555555555552d + "'", double89 == 13.805555555555552d);
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + 16.566666666666663d + "'", double90 == 16.566666666666663d);
        org.junit.Assert.assertTrue("'" + long91 + "' != '" + 0L + "'", long91 == 0L);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertNotNull(wildcardClass96);
    }

    @Test
    public void test0184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0184");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray8 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double9 = variance1.evaluate(doubleArray8);
        variance1.setBiasCorrected(true);
        long long12 = variance1.getN();
        variance1.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance15 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray22 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double23 = variance15.evaluate(doubleArray22);
        double double24 = variance1.evaluate(doubleArray22);
        org.apache.commons.math.stat.descriptive.moment.Variance variance26 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double27 = variance26.getResult();
        double double28 = variance26.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance30 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray37 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double38 = variance30.evaluate(doubleArray37);
        variance30.setBiasCorrected(true);
        long long41 = variance30.getN();
        variance30.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance44 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray51 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double52 = variance44.evaluate(doubleArray51);
        double double53 = variance30.evaluate(doubleArray51);
        variance26.incrementAll(doubleArray51);
        double double55 = variance1.evaluate(doubleArray51);
        org.apache.commons.math.stat.descriptive.moment.Variance variance57 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray64 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double65 = variance57.evaluate(doubleArray64);
        variance57.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance69 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray76 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double77 = variance69.evaluate(doubleArray76);
        variance69.setBiasCorrected(true);
        boolean boolean80 = variance69.isBiasCorrected();
        double[] doubleArray87 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double88 = variance69.evaluate(doubleArray87);
        double double91 = variance57.evaluate(doubleArray87, (int) (byte) 1, (int) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            double double95 = variance1.evaluate(doubleArray87, (double) 1.0f, (int) (byte) 1, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 2168.222222222222d + "'", double9 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 2168.222222222222d + "'", double23 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 2601.866666666667d + "'", double24 == 2601.866666666667d);
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 2168.222222222222d + "'", double38 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 2168.222222222222d + "'", double52 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 2601.866666666667d + "'", double53 == 2601.866666666667d);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 2601.866666666667d + "'", double55 == 2601.866666666667d);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 2168.222222222222d + "'", double65 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 2168.222222222222d + "'", double77 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray87), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 16.566666666666663d + "'", double88 == 16.566666666666663d);
        org.junit.Assert.assertTrue(Double.isNaN(double91));
    }

    @Test
    public void test0185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0185");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = null;
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment1);
        variance2.increment(0.0d);
        variance2.clear();
        variance2.setBiasCorrected(true);
        java.lang.Class<?> wildcardClass8 = variance2.getClass();
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test0186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0186");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = null;
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        // The following exception was thrown during execution in test generation
        try {
            long long2 = variance1.getN();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0187");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray8 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double9 = variance1.evaluate(doubleArray8);
        variance1.setBiasCorrected(true);
        long long12 = variance1.getN();
        long long13 = variance1.getN();
        boolean boolean15 = variance1.equals((java.lang.Object) 16.566666666666663d);
        boolean boolean17 = variance1.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance19 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray26 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double27 = variance19.evaluate(doubleArray26);
        variance19.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance31 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray38 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double39 = variance31.evaluate(doubleArray38);
        variance31.setBiasCorrected(true);
        boolean boolean42 = variance31.isBiasCorrected();
        double[] doubleArray49 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double50 = variance31.evaluate(doubleArray49);
        org.apache.commons.math.stat.descriptive.moment.Variance variance52 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray59 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double60 = variance52.evaluate(doubleArray59);
        variance52.setBiasCorrected(true);
        boolean boolean63 = variance52.isBiasCorrected();
        double[] doubleArray70 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double71 = variance52.evaluate(doubleArray70);
        double double74 = variance31.evaluate(doubleArray70, (int) (byte) 1, 0);
        double double76 = variance19.evaluate(doubleArray70, 2178.0d);
        double double77 = variance1.evaluate(doubleArray70);
        variance1.setBiasCorrected(false);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 2168.222222222222d + "'", double9 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 2168.222222222222d + "'", double27 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 2168.222222222222d + "'", double39 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 16.566666666666663d + "'", double50 == 16.566666666666663d);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 2168.222222222222d + "'", double60 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 16.566666666666663d + "'", double71 == 16.566666666666663d);
        org.junit.Assert.assertTrue(Double.isNaN(double74));
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 16.566666666418314d + "'", double76 == 16.566666666418314d);
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 16.566666666666663d + "'", double77 == 16.566666666666663d);
    }

    @Test
    public void test0188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0188");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray8 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double9 = variance1.evaluate(doubleArray8);
        variance1.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance12 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray19 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double20 = variance12.evaluate(doubleArray19);
        variance12.setBiasCorrected(true);
        boolean boolean23 = variance12.isBiasCorrected();
        double[] doubleArray30 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double31 = variance12.evaluate(doubleArray30);
        double double32 = variance12.getResult();
        long long33 = variance12.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance35 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray42 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double43 = variance35.evaluate(doubleArray42);
        variance35.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance47 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray54 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double55 = variance47.evaluate(doubleArray54);
        variance47.setBiasCorrected(true);
        boolean boolean58 = variance47.isBiasCorrected();
        double[] doubleArray65 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double66 = variance47.evaluate(doubleArray65);
        org.apache.commons.math.stat.descriptive.moment.Variance variance68 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray75 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double76 = variance68.evaluate(doubleArray75);
        variance68.setBiasCorrected(true);
        boolean boolean79 = variance68.isBiasCorrected();
        double[] doubleArray86 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double87 = variance68.evaluate(doubleArray86);
        double double90 = variance47.evaluate(doubleArray86, (int) (byte) 1, 0);
        double double92 = variance35.evaluate(doubleArray86, 2178.0d);
        variance12.incrementAll(doubleArray86);
        double double94 = variance1.evaluate(doubleArray86);
        double double95 = variance1.getResult();
        double double96 = variance1.getResult();
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 2168.222222222222d + "'", double9 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 2168.222222222222d + "'", double20 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 16.566666666666663d + "'", double31 == 16.566666666666663d);
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 2168.222222222222d + "'", double43 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 2168.222222222222d + "'", double55 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 16.566666666666663d + "'", double66 == 16.566666666666663d);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 2168.222222222222d + "'", double76 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double87 + "' != '" + 16.566666666666663d + "'", double87 == 16.566666666666663d);
        org.junit.Assert.assertTrue(Double.isNaN(double90));
        org.junit.Assert.assertTrue("'" + double92 + "' != '" + 16.566666666418314d + "'", double92 == 16.566666666418314d);
        org.junit.Assert.assertTrue("'" + double94 + "' != '" + 13.805555555555552d + "'", double94 == 13.805555555555552d);
        org.junit.Assert.assertTrue(Double.isNaN(double95));
        org.junit.Assert.assertTrue(Double.isNaN(double96));
    }

    @Test
    public void test0189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0189");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray8 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double9 = variance1.evaluate(doubleArray8);
        variance1.setBiasCorrected(true);
        boolean boolean12 = variance1.isBiasCorrected();
        double[] doubleArray19 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double20 = variance1.evaluate(doubleArray19);
        double double21 = variance1.getResult();
        variance1.increment(3267.0d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance25 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray32 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double33 = variance25.evaluate(doubleArray32);
        variance25.setBiasCorrected(true);
        boolean boolean36 = variance25.isBiasCorrected();
        double[] doubleArray43 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double44 = variance25.evaluate(doubleArray43);
        org.apache.commons.math.stat.descriptive.moment.Variance variance46 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray53 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double54 = variance46.evaluate(doubleArray53);
        variance46.setBiasCorrected(true);
        boolean boolean57 = variance46.isBiasCorrected();
        double[] doubleArray64 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double65 = variance46.evaluate(doubleArray64);
        double double68 = variance25.evaluate(doubleArray64, (int) (byte) 1, 0);
        variance25.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance72 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance74 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray81 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double82 = variance74.evaluate(doubleArray81);
        variance74.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance86 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        variance86.clear();
        double double88 = variance86.getResult();
        double[] doubleArray93 = new double[] { (-1), 2168.222222222222d, 16.566666666418314d, 10.0d };
        variance86.incrementAll(doubleArray93);
        variance74.incrementAll(doubleArray93);
        double double96 = variance72.evaluate(doubleArray93);
        double double97 = variance25.evaluate(doubleArray93);
        variance1.incrementAll(doubleArray93);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 2168.222222222222d + "'", double9 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 16.566666666666663d + "'", double20 == 16.566666666666663d);
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 2168.222222222222d + "'", double33 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 16.566666666666663d + "'", double44 == 16.566666666666663d);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 2168.222222222222d + "'", double54 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 16.566666666666663d + "'", double65 == 16.566666666666663d);
        org.junit.Assert.assertTrue(Double.isNaN(double68));
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 2168.222222222222d + "'", double82 == 2168.222222222222d);
        org.junit.Assert.assertTrue(Double.isNaN(double88));
        org.junit.Assert.assertNotNull(doubleArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray93), "[-1.0, 2168.222222222222, 16.566666666418314, 10.0]");
        org.junit.Assert.assertTrue("'" + double96 + "' != '" + 874596.4092824734d + "'", double96 == 874596.4092824734d);
        org.junit.Assert.assertTrue("'" + double97 + "' != '" + 1166128.5457099646d + "'", double97 == 1166128.5457099646d);
    }

    @Test
    public void test0190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0190");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray8 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double9 = variance1.evaluate(doubleArray8);
        double[] doubleArray13 = new double[] { (byte) 1, (byte) 100, 1L };
        double double14 = variance1.evaluate(doubleArray13);
        double double15 = variance1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance17 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray24 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double25 = variance17.evaluate(doubleArray24);
        variance17.setBiasCorrected(true);
        boolean boolean28 = variance17.isBiasCorrected();
        double[] doubleArray35 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double36 = variance17.evaluate(doubleArray35);
        double double37 = variance17.getResult();
        variance17.setBiasCorrected(true);
        long long40 = variance17.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance42 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray49 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double50 = variance42.evaluate(doubleArray49);
        variance42.setBiasCorrected(true);
        boolean boolean53 = variance42.isBiasCorrected();
        double[] doubleArray60 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double61 = variance42.evaluate(doubleArray60);
        boolean boolean63 = variance42.equals((java.lang.Object) 10.0d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance65 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray72 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double73 = variance65.evaluate(doubleArray72);
        variance65.setBiasCorrected(true);
        boolean boolean76 = variance65.isBiasCorrected();
        double[] doubleArray83 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double84 = variance65.evaluate(doubleArray83);
        double double86 = variance42.evaluate(doubleArray83, (double) 0.0f);
        variance17.incrementAll(doubleArray83);
        // The following exception was thrown during execution in test generation
        try {
            double double90 = variance1.evaluate(doubleArray83, (int) ' ', (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 2168.222222222222d + "'", double9 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, 100.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 2178.0d + "'", double14 == 2178.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 2168.222222222222d + "'", double25 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 16.566666666666663d + "'", double36 == 16.566666666666663d);
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 2168.222222222222d + "'", double50 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 16.566666666666663d + "'", double61 == 16.566666666666663d);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 2168.222222222222d + "'", double73 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 16.566666666666663d + "'", double84 == 16.566666666666663d);
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 16.566666666666666d + "'", double86 == 16.566666666666666d);
    }

    @Test
    public void test0191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0191");
        org.apache.commons.math.stat.descriptive.moment.Variance variance0 = new org.apache.commons.math.stat.descriptive.moment.Variance();
        long long1 = variance0.getN();
        long long2 = variance0.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance4 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray11 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double12 = variance4.evaluate(doubleArray11);
        variance4.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance16 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray23 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double24 = variance16.evaluate(doubleArray23);
        variance16.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance28 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray35 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double36 = variance28.evaluate(doubleArray35);
        variance28.setBiasCorrected(true);
        boolean boolean39 = variance28.isBiasCorrected();
        double[] doubleArray46 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double47 = variance28.evaluate(doubleArray46);
        double double50 = variance16.evaluate(doubleArray46, (int) (byte) 1, (int) (byte) 0);
        variance4.incrementAll(doubleArray46, (int) (byte) 1, 1);
        java.lang.Object obj54 = null;
        boolean boolean55 = variance4.equals(obj54);
        org.apache.commons.math.stat.descriptive.moment.Variance variance57 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray64 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double65 = variance57.evaluate(doubleArray64);
        variance57.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance69 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray76 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double77 = variance69.evaluate(doubleArray76);
        variance57.incrementAll(doubleArray76);
        variance57.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance81 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray88 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double89 = variance81.evaluate(doubleArray88);
        double[] doubleArray93 = new double[] { (byte) 1, (byte) 100, 1L };
        double double94 = variance81.evaluate(doubleArray93);
        variance57.incrementAll(doubleArray93, (int) (byte) 0, (int) (byte) 1);
        variance4.incrementAll(doubleArray93);
        variance0.incrementAll(doubleArray93);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 2168.222222222222d + "'", double12 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 2168.222222222222d + "'", double24 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 2168.222222222222d + "'", double36 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 16.566666666666663d + "'", double47 == 16.566666666666663d);
        org.junit.Assert.assertTrue(Double.isNaN(double50));
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 2168.222222222222d + "'", double65 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 2168.222222222222d + "'", double77 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + 2168.222222222222d + "'", double89 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray93), "[1.0, 100.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double94 + "' != '" + 2178.0d + "'", double94 == 2178.0d);
    }

    @Test
    public void test0192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0192");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray8 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double9 = variance1.evaluate(doubleArray8);
        variance1.setBiasCorrected(true);
        boolean boolean12 = variance1.isBiasCorrected();
        double[] doubleArray19 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double20 = variance1.evaluate(doubleArray19);
        double double21 = variance1.getResult();
        variance1.setBiasCorrected(true);
        long long24 = variance1.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance26 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray33 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double34 = variance26.evaluate(doubleArray33);
        variance26.setBiasCorrected(true);
        boolean boolean37 = variance26.isBiasCorrected();
        double[] doubleArray44 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double45 = variance26.evaluate(doubleArray44);
        double double46 = variance26.getResult();
        variance26.setBiasCorrected(true);
        long long49 = variance26.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance51 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray58 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double59 = variance51.evaluate(doubleArray58);
        variance51.setBiasCorrected(true);
        boolean boolean62 = variance51.isBiasCorrected();
        double[] doubleArray69 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double70 = variance51.evaluate(doubleArray69);
        boolean boolean72 = variance51.equals((java.lang.Object) 10.0d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance74 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray81 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double82 = variance74.evaluate(doubleArray81);
        variance74.setBiasCorrected(true);
        boolean boolean85 = variance74.isBiasCorrected();
        double[] doubleArray92 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double93 = variance74.evaluate(doubleArray92);
        double double95 = variance51.evaluate(doubleArray92, (double) 0.0f);
        variance26.incrementAll(doubleArray92);
        double double97 = variance1.evaluate(doubleArray92);
        double double98 = variance1.getResult();
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 2168.222222222222d + "'", double9 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 16.566666666666663d + "'", double20 == 16.566666666666663d);
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 2168.222222222222d + "'", double34 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 16.566666666666663d + "'", double45 == 16.566666666666663d);
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 0L + "'", long49 == 0L);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 2168.222222222222d + "'", double59 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 16.566666666666663d + "'", double70 == 16.566666666666663d);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 2168.222222222222d + "'", double82 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertNotNull(doubleArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray92), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double93 + "' != '" + 16.566666666666663d + "'", double93 == 16.566666666666663d);
        org.junit.Assert.assertTrue("'" + double95 + "' != '" + 16.566666666666666d + "'", double95 == 16.566666666666666d);
        org.junit.Assert.assertTrue("'" + double97 + "' != '" + 16.566666666666663d + "'", double97 == 16.566666666666663d);
        org.junit.Assert.assertTrue(Double.isNaN(double98));
    }

    @Test
    public void test0193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0193");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double2 = variance1.getResult();
        double double3 = variance1.getResult();
        variance1.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance6 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray13 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double14 = variance6.evaluate(doubleArray13);
        variance6.setBiasCorrected(true);
        long long17 = variance6.getN();
        long long18 = variance6.getN();
        boolean boolean19 = variance6.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.Variance variance21 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray28 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double29 = variance21.evaluate(doubleArray28);
        double[] doubleArray33 = new double[] { (byte) 1, (byte) 100, 1L };
        double double34 = variance21.evaluate(doubleArray33);
        variance6.incrementAll(doubleArray33, (int) (short) 1, 0);
        variance1.incrementAll(doubleArray33);
        double double39 = variance1.getResult();
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 2168.222222222222d + "'", double14 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 2168.222222222222d + "'", double29 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0, 100.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 2178.0d + "'", double34 == 2178.0d);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 3267.0d + "'", double39 == 3267.0d);
    }

    @Test
    public void test0194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0194");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = null;
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment1);
        variance2.increment(0.0d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance6 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance8 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray15 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double16 = variance8.evaluate(doubleArray15);
        variance8.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance20 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        variance20.clear();
        double double22 = variance20.getResult();
        double[] doubleArray27 = new double[] { (-1), 2168.222222222222d, 16.566666666418314d, 10.0d };
        variance20.incrementAll(doubleArray27);
        variance8.incrementAll(doubleArray27);
        double double30 = variance6.evaluate(doubleArray27);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean31 = variance2.equals((java.lang.Object) variance6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 2168.222222222222d + "'", double16 == 2168.222222222222d);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-1.0, 2168.222222222222, 16.566666666418314, 10.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 874596.4092824734d + "'", double30 == 874596.4092824734d);
    }

    @Test
    public void test0195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0195");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double2 = variance1.getResult();
        boolean boolean3 = variance1.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.Variance variance5 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray12 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double13 = variance5.evaluate(doubleArray12);
        variance5.setBiasCorrected(true);
        long long16 = variance5.getN();
        variance5.clear();
        double double18 = variance5.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance20 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray27 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double28 = variance20.evaluate(doubleArray27);
        variance20.setBiasCorrected(true);
        boolean boolean31 = variance20.isBiasCorrected();
        double[] doubleArray38 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double39 = variance20.evaluate(doubleArray38);
        boolean boolean41 = variance20.equals((java.lang.Object) 10.0d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance43 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray50 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double51 = variance43.evaluate(doubleArray50);
        variance43.setBiasCorrected(true);
        boolean boolean54 = variance43.isBiasCorrected();
        double[] doubleArray61 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double62 = variance43.evaluate(doubleArray61);
        double double64 = variance20.evaluate(doubleArray61, (double) 0.0f);
        variance5.incrementAll(doubleArray61);
        // The following exception was thrown during execution in test generation
        try {
            double double68 = variance1.evaluate(doubleArray61, 10, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 2168.222222222222d + "'", double13 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 2168.222222222222d + "'", double28 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 16.566666666666663d + "'", double39 == 16.566666666666663d);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 2168.222222222222d + "'", double51 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 16.566666666666663d + "'", double62 == 16.566666666666663d);
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 16.566666666666666d + "'", double64 == 16.566666666666666d);
    }

    @Test
    public void test0196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0196");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        variance1.clear();
        double double3 = variance1.getResult();
        variance1.setBiasCorrected(true);
        variance1.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance9 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray16 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double17 = variance9.evaluate(doubleArray16);
        variance9.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance21 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray28 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double29 = variance21.evaluate(doubleArray28);
        variance21.setBiasCorrected(true);
        boolean boolean32 = variance21.isBiasCorrected();
        double[] doubleArray39 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double40 = variance21.evaluate(doubleArray39);
        double double43 = variance9.evaluate(doubleArray39, (int) (byte) 1, (int) (byte) 0);
        variance1.incrementAll(doubleArray39);
        boolean boolean45 = variance1.isBiasCorrected();
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 2168.222222222222d + "'", double17 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 2168.222222222222d + "'", double29 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 16.566666666666663d + "'", double40 == 16.566666666666663d);
        org.junit.Assert.assertTrue(Double.isNaN(double43));
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
    }

    @Test
    public void test0197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0197");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance3 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray10 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double11 = variance3.evaluate(doubleArray10);
        double[] doubleArray15 = new double[] { (byte) 1, (byte) 100, 1L };
        double double16 = variance3.evaluate(doubleArray15);
        boolean boolean17 = variance1.equals((java.lang.Object) variance3);
        variance1.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance20 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray27 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double28 = variance20.evaluate(doubleArray27);
        // The following exception was thrown during execution in test generation
        try {
            double double31 = variance1.evaluate(doubleArray27, (int) (byte) 100, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 2168.222222222222d + "'", double11 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[1.0, 100.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 2178.0d + "'", double16 == 2178.0d);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 2168.222222222222d + "'", double28 == 2168.222222222222d);
    }

    @Test
    public void test0198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0198");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray8 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double9 = variance1.evaluate(doubleArray8);
        variance1.clear();
        variance1.setBiasCorrected(true);
        double double13 = variance1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance();
        long long15 = variance14.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance17 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray24 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double25 = variance17.evaluate(doubleArray24);
        variance17.setBiasCorrected(true);
        boolean boolean28 = variance17.isBiasCorrected();
        double[] doubleArray35 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double36 = variance17.evaluate(doubleArray35);
        boolean boolean38 = variance17.equals((java.lang.Object) 10.0d);
        boolean boolean39 = variance17.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.Variance variance41 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        boolean boolean42 = variance17.equals((java.lang.Object) false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance44 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray51 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double52 = variance44.evaluate(doubleArray51);
        variance44.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance56 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray63 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double64 = variance56.evaluate(doubleArray63);
        variance44.incrementAll(doubleArray63);
        double double67 = variance17.evaluate(doubleArray63, (double) 100.0f);
        variance14.incrementAll(doubleArray63, (int) (short) 1, (int) (byte) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance72 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray79 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double80 = variance72.evaluate(doubleArray79);
        variance72.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance84 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        variance84.clear();
        double double86 = variance84.getResult();
        double[] doubleArray91 = new double[] { (-1), 2168.222222222222d, 16.566666666418314d, 10.0d };
        variance84.incrementAll(doubleArray91);
        variance72.incrementAll(doubleArray91);
        variance14.incrementAll(doubleArray91);
        // The following exception was thrown during execution in test generation
        try {
            double double98 = variance1.evaluate(doubleArray91, (double) 6L, (int) ' ', (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 2168.222222222222d + "'", double9 == 2168.222222222222d);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 2168.222222222222d + "'", double25 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 16.566666666666663d + "'", double36 == 16.566666666666663d);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 2168.222222222222d + "'", double52 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 2168.222222222222d + "'", double64 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 2601.8666666666663d + "'", double67 == 2601.8666666666663d);
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 2168.222222222222d + "'", double80 == 2168.222222222222d);
        org.junit.Assert.assertTrue(Double.isNaN(double86));
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray91), "[-1.0, 2168.222222222222, 16.566666666418314, 10.0]");
    }

    @Test
    public void test0199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0199");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray8 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double9 = variance1.evaluate(doubleArray8);
        variance1.setBiasCorrected(true);
        long long12 = variance1.getN();
        long long13 = variance1.getN();
        boolean boolean14 = variance1.isBiasCorrected();
        long long15 = variance1.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment17 = null;
        org.apache.commons.math.stat.descriptive.moment.Variance variance18 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment17);
        double[] doubleArray19 = new double[] {};
        double double22 = variance18.evaluate(doubleArray19, 0, 0);
        boolean boolean24 = variance18.equals((java.lang.Object) 10.0f);
        boolean boolean25 = variance18.isBiasCorrected();
        variance18.clear();
        double[] doubleArray32 = new double[] { 10.0f, 10.0f, 1, 'a', (byte) 1 };
        double double33 = variance18.evaluate(doubleArray32);
        // The following exception was thrown during execution in test generation
        try {
            double double36 = variance1.evaluate(doubleArray32, (int) (byte) 100, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 2168.222222222222d + "'", double9 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[10.0, 10.0, 1.0, 97.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 1694.7000000000003d + "'", double33 == 1694.7000000000003d);
    }

    @Test
    public void test0200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0200");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = null;
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        variance2.increment((double) (byte) 10);
        variance2.setBiasCorrected(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance8 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double9 = variance8.getResult();
        double double10 = variance8.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance12 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray19 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double20 = variance12.evaluate(doubleArray19);
        variance12.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance24 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray31 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double32 = variance24.evaluate(doubleArray31);
        variance12.incrementAll(doubleArray31);
        variance12.clear();
        variance12.setBiasCorrected(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance38 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray45 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double46 = variance38.evaluate(doubleArray45);
        variance38.setBiasCorrected(true);
        long long49 = variance38.getN();
        long long50 = variance38.getN();
        boolean boolean52 = variance38.equals((java.lang.Object) 16.566666666666663d);
        boolean boolean54 = variance38.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance56 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray63 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double64 = variance56.evaluate(doubleArray63);
        variance56.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance68 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray75 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double76 = variance68.evaluate(doubleArray75);
        variance56.incrementAll(doubleArray75);
        double double78 = variance38.evaluate(doubleArray75);
        double double80 = variance12.evaluate(doubleArray75, (double) (byte) 100);
        double double82 = variance8.evaluate(doubleArray75, (double) (-1));
        // The following exception was thrown during execution in test generation
        try {
            variance2.incrementAll(doubleArray75, (int) 'a', (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 2168.222222222222d + "'", double20 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 2168.222222222222d + "'", double32 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 2168.222222222222d + "'", double46 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 0L + "'", long49 == 0L);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 0L + "'", long50 == 0L);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 2168.222222222222d + "'", double64 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 2168.222222222222d + "'", double76 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 2601.866666666667d + "'", double78 == 2601.866666666667d);
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 2168.222222222222d + "'", double80 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 2601.8666666666663d + "'", double82 == 2601.8666666666663d);
    }

    @Test
    public void test0201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0201");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray8 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double9 = variance1.evaluate(doubleArray8);
        variance1.clear();
        variance1.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray21 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double22 = variance14.evaluate(doubleArray21);
        variance14.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance26 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray33 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double34 = variance26.evaluate(doubleArray33);
        variance26.setBiasCorrected(true);
        boolean boolean37 = variance26.isBiasCorrected();
        double[] doubleArray44 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double45 = variance26.evaluate(doubleArray44);
        double double48 = variance14.evaluate(doubleArray44, (int) (byte) 1, (int) (byte) 0);
        variance1.incrementAll(doubleArray44);
        variance1.increment(4.5d);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 2168.222222222222d + "'", double9 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 2168.222222222222d + "'", double22 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 2168.222222222222d + "'", double34 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 16.566666666666663d + "'", double45 == 16.566666666666663d);
        org.junit.Assert.assertTrue(Double.isNaN(double48));
    }

    @Test
    public void test0202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0202");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = null;
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment1);
        variance2.increment(0.0d);
        variance2.clear();
        variance2.increment((double) (-1));
        boolean boolean8 = variance2.isBiasCorrected();
        variance2.clear();
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
    }

    @Test
    public void test0203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0203");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray8 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double9 = variance1.evaluate(doubleArray8);
        variance1.setBiasCorrected(true);
        boolean boolean12 = variance1.isBiasCorrected();
        double[] doubleArray19 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double20 = variance1.evaluate(doubleArray19);
        double double21 = variance1.getResult();
        variance1.setBiasCorrected(true);
        boolean boolean24 = variance1.isBiasCorrected();
        variance1.setBiasCorrected(false);
        variance1.increment(2601.866666666667d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance30 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray37 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double38 = variance30.evaluate(doubleArray37);
        variance30.setBiasCorrected(true);
        long long41 = variance30.getN();
        long long42 = variance30.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance44 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray51 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double52 = variance44.evaluate(doubleArray51);
        double[] doubleArray56 = new double[] { (byte) 1, (byte) 100, 1L };
        double double57 = variance44.evaluate(doubleArray56);
        double double59 = variance30.evaluate(doubleArray56, (double) 10.0f);
        org.apache.commons.math.stat.descriptive.moment.Variance variance61 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray68 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double69 = variance61.evaluate(doubleArray68);
        variance61.setBiasCorrected(true);
        long long72 = variance61.getN();
        long long73 = variance61.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance75 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray82 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double83 = variance75.evaluate(doubleArray82);
        double[] doubleArray87 = new double[] { (byte) 1, (byte) 100, 1L };
        double double88 = variance75.evaluate(doubleArray87);
        double double90 = variance61.evaluate(doubleArray87, (double) 10.0f);
        double double91 = variance30.evaluate(doubleArray87);
        // The following exception was thrown during execution in test generation
        try {
            variance1.incrementAll(doubleArray87, 0, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: length cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 2168.222222222222d + "'", double9 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 16.566666666666663d + "'", double20 == 16.566666666666663d);
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 2168.222222222222d + "'", double38 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 2168.222222222222d + "'", double52 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0, 100.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 2178.0d + "'", double57 == 2178.0d);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 3267.0d + "'", double59 == 3267.0d);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 2168.222222222222d + "'", double69 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + 0L + "'", long72 == 0L);
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + 0L + "'", long73 == 0L);
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 2168.222222222222d + "'", double83 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray87), "[1.0, 100.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 2178.0d + "'", double88 == 2178.0d);
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + 3267.0d + "'", double90 == 3267.0d);
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 3267.0d + "'", double91 == 3267.0d);
    }

    @Test
    public void test0204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0204");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        variance1.setBiasCorrected(false);
        long long4 = variance1.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance6 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray13 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double14 = variance6.evaluate(doubleArray13);
        variance6.setBiasCorrected(true);
        boolean boolean17 = variance6.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.Variance variance19 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray26 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double27 = variance19.evaluate(doubleArray26);
        variance19.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance31 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray38 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double39 = variance31.evaluate(doubleArray38);
        variance19.incrementAll(doubleArray38);
        variance19.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance43 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray50 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double51 = variance43.evaluate(doubleArray50);
        double[] doubleArray55 = new double[] { (byte) 1, (byte) 100, 1L };
        double double56 = variance43.evaluate(doubleArray55);
        variance19.incrementAll(doubleArray55, (int) (byte) 0, (int) (byte) 1);
        double double61 = variance6.evaluate(doubleArray55, (double) '4');
        // The following exception was thrown during execution in test generation
        try {
            double double64 = variance1.evaluate(doubleArray55, (int) (short) 0, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: length cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 2168.222222222222d + "'", double14 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 2168.222222222222d + "'", double27 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 2168.222222222222d + "'", double39 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 2168.222222222222d + "'", double51 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0, 100.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 2178.0d + "'", double56 == 2178.0d);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 3267.0d + "'", double61 == 3267.0d);
    }

    @Test
    public void test0205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0205");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray8 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double9 = variance1.evaluate(doubleArray8);
        variance1.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance13 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray20 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double21 = variance13.evaluate(doubleArray20);
        variance13.setBiasCorrected(true);
        boolean boolean24 = variance13.isBiasCorrected();
        double[] doubleArray31 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double32 = variance13.evaluate(doubleArray31);
        double double35 = variance1.evaluate(doubleArray31, (int) (byte) 1, (int) (byte) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance37 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance39 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray46 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double47 = variance39.evaluate(doubleArray46);
        variance39.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance51 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray58 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double59 = variance51.evaluate(doubleArray58);
        variance51.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance63 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray70 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double71 = variance63.evaluate(doubleArray70);
        variance63.setBiasCorrected(true);
        boolean boolean74 = variance63.isBiasCorrected();
        double[] doubleArray81 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double82 = variance63.evaluate(doubleArray81);
        double double85 = variance51.evaluate(doubleArray81, (int) (byte) 1, (int) (byte) 0);
        variance39.incrementAll(doubleArray81, (int) (byte) 1, 1);
        double double89 = variance37.evaluate(doubleArray81);
        double double90 = variance1.evaluate(doubleArray81);
        long long91 = variance1.getN();
        variance1.increment(6.25d);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 2168.222222222222d + "'", double9 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 2168.222222222222d + "'", double21 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 16.566666666666663d + "'", double32 == 16.566666666666663d);
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 2168.222222222222d + "'", double47 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 2168.222222222222d + "'", double59 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 2168.222222222222d + "'", double71 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 16.566666666666663d + "'", double82 == 16.566666666666663d);
        org.junit.Assert.assertTrue(Double.isNaN(double85));
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + 13.805555555555552d + "'", double89 == 13.805555555555552d);
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + 16.566666666666663d + "'", double90 == 16.566666666666663d);
        org.junit.Assert.assertTrue("'" + long91 + "' != '" + 0L + "'", long91 == 0L);
    }

    @Test
    public void test0206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0206");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray8 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double9 = variance1.evaluate(doubleArray8);
        variance1.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance13 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray20 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double21 = variance13.evaluate(doubleArray20);
        variance13.setBiasCorrected(true);
        boolean boolean24 = variance13.isBiasCorrected();
        double[] doubleArray31 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double32 = variance13.evaluate(doubleArray31);
        org.apache.commons.math.stat.descriptive.moment.Variance variance34 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray41 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double42 = variance34.evaluate(doubleArray41);
        variance34.setBiasCorrected(true);
        boolean boolean45 = variance34.isBiasCorrected();
        double[] doubleArray52 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double53 = variance34.evaluate(doubleArray52);
        double double56 = variance13.evaluate(doubleArray52, (int) (byte) 1, 0);
        variance13.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance60 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray67 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double68 = variance60.evaluate(doubleArray67);
        variance60.setBiasCorrected(true);
        boolean boolean71 = variance60.isBiasCorrected();
        double[] doubleArray78 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double79 = variance60.evaluate(doubleArray78);
        double double81 = variance13.evaluate(doubleArray78, 6.25d);
        // The following exception was thrown during execution in test generation
        try {
            double double85 = variance1.evaluate(doubleArray78, Double.NaN, (int) (short) 10, 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 2168.222222222222d + "'", double9 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 2168.222222222222d + "'", double21 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 16.566666666666663d + "'", double32 == 16.566666666666663d);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 2168.222222222222d + "'", double42 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 16.566666666666663d + "'", double53 == 16.566666666666663d);
        org.junit.Assert.assertTrue(Double.isNaN(double56));
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 2168.222222222222d + "'", double68 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 16.566666666666663d + "'", double79 == 16.566666666666663d);
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 16.566666666666666d + "'", double81 == 16.566666666666666d);
    }

    @Test
    public void test0207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0207");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        variance1.clear();
        boolean boolean3 = variance1.isBiasCorrected();
        double double4 = variance1.getResult();
        double[] doubleArray5 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double9 = variance1.evaluate(doubleArray5, 6.25d, 100, (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: input value array is null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
    }

    @Test
    public void test0208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0208");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray8 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double9 = variance1.evaluate(doubleArray8);
        variance1.setBiasCorrected(true);
        long long12 = variance1.getN();
        variance1.clear();
        double double14 = variance1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance16 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray23 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double24 = variance16.evaluate(doubleArray23);
        variance16.setBiasCorrected(true);
        boolean boolean27 = variance16.isBiasCorrected();
        double[] doubleArray34 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double35 = variance16.evaluate(doubleArray34);
        boolean boolean37 = variance16.equals((java.lang.Object) 10.0d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance39 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray46 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double47 = variance39.evaluate(doubleArray46);
        variance39.setBiasCorrected(true);
        boolean boolean50 = variance39.isBiasCorrected();
        double[] doubleArray57 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double58 = variance39.evaluate(doubleArray57);
        double double60 = variance16.evaluate(doubleArray57, (double) 0.0f);
        variance1.incrementAll(doubleArray57);
        double double62 = variance1.getResult();
        java.lang.Class<?> wildcardClass63 = variance1.getClass();
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 2168.222222222222d + "'", double9 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 2168.222222222222d + "'", double24 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 16.566666666666663d + "'", double35 == 16.566666666666663d);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 2168.222222222222d + "'", double47 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 16.566666666666663d + "'", double58 == 16.566666666666663d);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 16.566666666666666d + "'", double60 == 16.566666666666666d);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 16.56666666666667d + "'", double62 == 16.56666666666667d);
        org.junit.Assert.assertNotNull(wildcardClass63);
    }

    @Test
    public void test0209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0209");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = null;
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        variance2.increment((double) 1.0f);
        variance2.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance8 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray15 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double16 = variance8.evaluate(doubleArray15);
        variance8.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance20 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray27 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double28 = variance20.evaluate(doubleArray27);
        variance8.incrementAll(doubleArray27);
        variance8.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance32 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray39 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double40 = variance32.evaluate(doubleArray39);
        variance32.setBiasCorrected(true);
        boolean boolean43 = variance32.isBiasCorrected();
        double[] doubleArray50 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double51 = variance32.evaluate(doubleArray50);
        boolean boolean53 = variance32.equals((java.lang.Object) 10.0d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance55 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray62 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double63 = variance55.evaluate(doubleArray62);
        variance55.setBiasCorrected(true);
        boolean boolean66 = variance55.isBiasCorrected();
        double[] doubleArray73 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double74 = variance55.evaluate(doubleArray73);
        double double76 = variance32.evaluate(doubleArray73, (double) 0.0f);
        variance8.incrementAll(doubleArray73);
        // The following exception was thrown during execution in test generation
        try {
            double double80 = variance2.evaluate(doubleArray73, (int) '#', (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 2168.222222222222d + "'", double16 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 2168.222222222222d + "'", double28 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 2168.222222222222d + "'", double40 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 16.566666666666663d + "'", double51 == 16.566666666666663d);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 2168.222222222222d + "'", double63 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 16.566666666666663d + "'", double74 == 16.566666666666663d);
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 16.566666666666666d + "'", double76 == 16.566666666666666d);
    }

    @Test
    public void test0210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0210");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray8 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double9 = variance1.evaluate(doubleArray8);
        variance1.setBiasCorrected(true);
        boolean boolean12 = variance1.isBiasCorrected();
        double[] doubleArray19 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double20 = variance1.evaluate(doubleArray19);
        double double21 = variance1.getResult();
        variance1.setBiasCorrected(true);
        boolean boolean24 = variance1.isBiasCorrected();
        variance1.setBiasCorrected(false);
        variance1.increment(2601.866666666667d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance30 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray37 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double38 = variance30.evaluate(doubleArray37);
        variance30.setBiasCorrected(true);
        variance30.increment((double) (byte) 0);
        double[] doubleArray45 = new double[] { 'a', 100L };
        double double47 = variance30.evaluate(doubleArray45, 0.0d);
        // The following exception was thrown during execution in test generation
        try {
            variance1.incrementAll(doubleArray45, (-1), (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: start position cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 2168.222222222222d + "'", double9 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 16.566666666666663d + "'", double20 == 16.566666666666663d);
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 2168.222222222222d + "'", double38 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[97.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 4.5d + "'", double47 == 4.5d);
    }

    @Test
    public void test0211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0211");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance3 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray10 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double11 = variance3.evaluate(doubleArray10);
        double[] doubleArray15 = new double[] { (byte) 1, (byte) 100, 1L };
        double double16 = variance3.evaluate(doubleArray15);
        boolean boolean17 = variance1.equals((java.lang.Object) variance3);
        variance1.clear();
        java.lang.Class<?> wildcardClass19 = variance1.getClass();
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 2168.222222222222d + "'", double11 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[1.0, 100.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 2178.0d + "'", double16 == 2178.0d);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test0212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0212");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray8 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double9 = variance1.evaluate(doubleArray8);
        variance1.setBiasCorrected(true);
        boolean boolean12 = variance1.isBiasCorrected();
        double[] doubleArray19 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double20 = variance1.evaluate(doubleArray19);
        boolean boolean22 = variance1.equals((java.lang.Object) 10.0d);
        boolean boolean23 = variance1.isBiasCorrected();
        double double24 = variance1.getResult();
        java.lang.Class<?> wildcardClass25 = variance1.getClass();
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 2168.222222222222d + "'", double9 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 16.566666666666663d + "'", double20 == 16.566666666666663d);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertNotNull(wildcardClass25);
    }

    @Test
    public void test0213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0213");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray8 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double9 = variance1.evaluate(doubleArray8);
        variance1.setBiasCorrected(true);
        boolean boolean12 = variance1.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray21 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double22 = variance14.evaluate(doubleArray21);
        variance14.setBiasCorrected(true);
        boolean boolean25 = variance14.isBiasCorrected();
        double[] doubleArray32 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double33 = variance14.evaluate(doubleArray32);
        org.apache.commons.math.stat.descriptive.moment.Variance variance35 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray42 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double43 = variance35.evaluate(doubleArray42);
        variance35.setBiasCorrected(true);
        boolean boolean46 = variance35.isBiasCorrected();
        double[] doubleArray53 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double54 = variance35.evaluate(doubleArray53);
        double double57 = variance14.evaluate(doubleArray53, (int) (byte) 1, 0);
        variance14.setBiasCorrected(true);
        variance14.setBiasCorrected(true);
        double double62 = variance14.getResult();
        boolean boolean63 = variance14.isBiasCorrected();
        boolean boolean64 = variance14.isBiasCorrected();
        variance14.increment(0.0d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance68 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray75 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double76 = variance68.evaluate(doubleArray75);
        variance14.incrementAll(doubleArray75, (int) (byte) 0, 1);
        // The following exception was thrown during execution in test generation
        try {
            double double82 = variance1.evaluate(doubleArray75, (int) (byte) -1, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: start position cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 2168.222222222222d + "'", double9 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 2168.222222222222d + "'", double22 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 16.566666666666663d + "'", double33 == 16.566666666666663d);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 2168.222222222222d + "'", double43 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 16.566666666666663d + "'", double54 == 16.566666666666663d);
        org.junit.Assert.assertTrue(Double.isNaN(double57));
        org.junit.Assert.assertTrue(Double.isNaN(double62));
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 2168.222222222222d + "'", double76 == 2168.222222222222d);
    }

    @Test
    public void test0214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0214");
        org.apache.commons.math.stat.descriptive.moment.Variance variance0 = new org.apache.commons.math.stat.descriptive.moment.Variance();
        long long1 = variance0.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance3 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray10 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double11 = variance3.evaluate(doubleArray10);
        variance3.setBiasCorrected(true);
        long long14 = variance3.getN();
        boolean boolean15 = variance0.equals((java.lang.Object) long14);
        java.lang.Class<?> wildcardClass16 = variance0.getClass();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 2168.222222222222d + "'", double11 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test0215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0215");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray8 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double9 = variance1.evaluate(doubleArray8);
        long long10 = variance1.getN();
        variance1.increment((double) (byte) 1);
        variance1.increment((double) 6L);
        variance1.increment(2178.0d);
        double[] doubleArray17 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double18 = variance1.evaluate(doubleArray17);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: input values array is null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 2168.222222222222d + "'", double9 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
    }

    @Test
    public void test0216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0216");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray8 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double9 = variance1.evaluate(doubleArray8);
        long long10 = variance1.getN();
        double double11 = variance1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance13 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray20 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double21 = variance13.evaluate(doubleArray20);
        variance13.setBiasCorrected(true);
        long long24 = variance13.getN();
        long long25 = variance13.getN();
        boolean boolean27 = variance13.equals((java.lang.Object) 16.566666666666663d);
        boolean boolean29 = variance13.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance31 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray38 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double39 = variance31.evaluate(doubleArray38);
        variance31.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance43 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray50 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double51 = variance43.evaluate(doubleArray50);
        variance43.setBiasCorrected(true);
        boolean boolean54 = variance43.isBiasCorrected();
        double[] doubleArray61 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double62 = variance43.evaluate(doubleArray61);
        org.apache.commons.math.stat.descriptive.moment.Variance variance64 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray71 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double72 = variance64.evaluate(doubleArray71);
        variance64.setBiasCorrected(true);
        boolean boolean75 = variance64.isBiasCorrected();
        double[] doubleArray82 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double83 = variance64.evaluate(doubleArray82);
        double double86 = variance43.evaluate(doubleArray82, (int) (byte) 1, 0);
        double double88 = variance31.evaluate(doubleArray82, 2178.0d);
        double double89 = variance13.evaluate(doubleArray82);
        // The following exception was thrown during execution in test generation
        try {
            double double93 = variance1.evaluate(doubleArray82, (double) (-1), (int) ' ', (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 2168.222222222222d + "'", double9 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 2168.222222222222d + "'", double21 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 2168.222222222222d + "'", double39 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 2168.222222222222d + "'", double51 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 16.566666666666663d + "'", double62 == 16.566666666666663d);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 2168.222222222222d + "'", double72 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 16.566666666666663d + "'", double83 == 16.566666666666663d);
        org.junit.Assert.assertTrue(Double.isNaN(double86));
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 16.566666666418314d + "'", double88 == 16.566666666418314d);
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + 16.566666666666663d + "'", double89 == 16.566666666666663d);
    }

    @Test
    public void test0217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0217");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray8 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double9 = variance1.evaluate(doubleArray8);
        double[] doubleArray13 = new double[] { (byte) 1, (byte) 100, 1L };
        double double14 = variance1.evaluate(doubleArray13);
        org.apache.commons.math.stat.descriptive.moment.Variance variance16 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray23 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double24 = variance16.evaluate(doubleArray23);
        variance16.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance28 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray35 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double36 = variance28.evaluate(doubleArray35);
        variance16.incrementAll(doubleArray35);
        variance1.incrementAll(doubleArray35);
        java.lang.Class<?> wildcardClass39 = variance1.getClass();
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 2168.222222222222d + "'", double9 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, 100.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 2178.0d + "'", double14 == 2178.0d);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 2168.222222222222d + "'", double24 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 2168.222222222222d + "'", double36 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(wildcardClass39);
    }

    @Test
    public void test0218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0218");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray8 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double9 = variance1.evaluate(doubleArray8);
        variance1.setBiasCorrected(true);
        long long12 = variance1.getN();
        variance1.clear();
        double double14 = variance1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance16 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray23 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double24 = variance16.evaluate(doubleArray23);
        variance16.setBiasCorrected(true);
        boolean boolean27 = variance16.isBiasCorrected();
        double[] doubleArray34 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double35 = variance16.evaluate(doubleArray34);
        boolean boolean37 = variance16.equals((java.lang.Object) 10.0d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance39 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray46 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double47 = variance39.evaluate(doubleArray46);
        variance39.setBiasCorrected(true);
        boolean boolean50 = variance39.isBiasCorrected();
        double[] doubleArray57 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double58 = variance39.evaluate(doubleArray57);
        double double60 = variance16.evaluate(doubleArray57, (double) 0.0f);
        variance1.incrementAll(doubleArray57);
        double double62 = variance1.getResult();
        double double63 = variance1.getResult();
        java.lang.Class<?> wildcardClass64 = variance1.getClass();
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 2168.222222222222d + "'", double9 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 2168.222222222222d + "'", double24 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 16.566666666666663d + "'", double35 == 16.566666666666663d);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 2168.222222222222d + "'", double47 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 16.566666666666663d + "'", double58 == 16.566666666666663d);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 16.566666666666666d + "'", double60 == 16.566666666666666d);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 16.56666666666667d + "'", double62 == 16.56666666666667d);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 16.56666666666667d + "'", double63 == 16.56666666666667d);
        org.junit.Assert.assertNotNull(wildcardClass64);
    }

    @Test
    public void test0219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0219");
        org.apache.commons.math.stat.descriptive.moment.Variance variance0 = new org.apache.commons.math.stat.descriptive.moment.Variance();
        long long1 = variance0.getN();
        boolean boolean2 = variance0.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.Variance variance4 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray11 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double12 = variance4.evaluate(doubleArray11);
        variance4.setBiasCorrected(true);
        boolean boolean15 = variance4.isBiasCorrected();
        variance4.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance18 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray25 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double26 = variance18.evaluate(doubleArray25);
        variance18.setBiasCorrected(true);
        long long29 = variance18.getN();
        long long30 = variance18.getN();
        boolean boolean32 = variance18.equals((java.lang.Object) 16.566666666666663d);
        boolean boolean34 = variance18.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance36 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray43 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double44 = variance36.evaluate(doubleArray43);
        variance36.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance48 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray55 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double56 = variance48.evaluate(doubleArray55);
        variance48.setBiasCorrected(true);
        boolean boolean59 = variance48.isBiasCorrected();
        double[] doubleArray66 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double67 = variance48.evaluate(doubleArray66);
        org.apache.commons.math.stat.descriptive.moment.Variance variance69 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray76 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double77 = variance69.evaluate(doubleArray76);
        variance69.setBiasCorrected(true);
        boolean boolean80 = variance69.isBiasCorrected();
        double[] doubleArray87 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double88 = variance69.evaluate(doubleArray87);
        double double91 = variance48.evaluate(doubleArray87, (int) (byte) 1, 0);
        double double93 = variance36.evaluate(doubleArray87, 2178.0d);
        double double94 = variance18.evaluate(doubleArray87);
        variance4.incrementAll(doubleArray87, 0, 0);
        variance0.incrementAll(doubleArray87);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 2168.222222222222d + "'", double12 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 2168.222222222222d + "'", double26 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 2168.222222222222d + "'", double44 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 2168.222222222222d + "'", double56 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 16.566666666666663d + "'", double67 == 16.566666666666663d);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 2168.222222222222d + "'", double77 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray87), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 16.566666666666663d + "'", double88 == 16.566666666666663d);
        org.junit.Assert.assertTrue(Double.isNaN(double91));
        org.junit.Assert.assertTrue("'" + double93 + "' != '" + 16.566666666418314d + "'", double93 == 16.566666666418314d);
        org.junit.Assert.assertTrue("'" + double94 + "' != '" + 16.566666666666663d + "'", double94 == 16.566666666666663d);
    }

    @Test
    public void test0220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0220");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = null;
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment1);
        variance2.clear();
        double[] doubleArray4 = new double[] {};
        variance2.incrementAll(doubleArray4);
        variance2.increment(2178.0d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance9 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray16 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double17 = variance9.evaluate(doubleArray16);
        variance9.setBiasCorrected(true);
        long long20 = variance9.getN();
        long long21 = variance9.getN();
        boolean boolean22 = variance9.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.Variance variance24 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray31 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double32 = variance24.evaluate(doubleArray31);
        double[] doubleArray36 = new double[] { (byte) 1, (byte) 100, 1L };
        double double37 = variance24.evaluate(doubleArray36);
        variance9.incrementAll(doubleArray36, (int) (short) 1, 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance42 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double43 = variance42.getResult();
        double double44 = variance42.getResult();
        variance42.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance47 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray54 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double55 = variance47.evaluate(doubleArray54);
        variance47.setBiasCorrected(true);
        long long58 = variance47.getN();
        long long59 = variance47.getN();
        boolean boolean60 = variance47.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.Variance variance62 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray69 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double70 = variance62.evaluate(doubleArray69);
        double[] doubleArray74 = new double[] { (byte) 1, (byte) 100, 1L };
        double double75 = variance62.evaluate(doubleArray74);
        variance47.incrementAll(doubleArray74, (int) (short) 1, 0);
        variance42.incrementAll(doubleArray74);
        variance9.incrementAll(doubleArray74);
        // The following exception was thrown during execution in test generation
        try {
            double double84 = variance2.evaluate(doubleArray74, (double) 0, (int) (short) 0, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 2168.222222222222d + "'", double17 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 2168.222222222222d + "'", double32 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0, 100.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 2178.0d + "'", double37 == 2178.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double43));
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 2168.222222222222d + "'", double55 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 0L + "'", long58 == 0L);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 0L + "'", long59 == 0L);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 2168.222222222222d + "'", double70 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[1.0, 100.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 2178.0d + "'", double75 == 2178.0d);
    }

    @Test
    public void test0221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0221");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        variance1.clear();
        double double3 = variance1.getResult();
        variance1.increment((double) '4');
        org.apache.commons.math.stat.descriptive.moment.Variance variance7 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray14 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double15 = variance7.evaluate(doubleArray14);
        variance7.setBiasCorrected(true);
        long long18 = variance7.getN();
        long long19 = variance7.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance21 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray28 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double29 = variance21.evaluate(doubleArray28);
        double[] doubleArray33 = new double[] { (byte) 1, (byte) 100, 1L };
        double double34 = variance21.evaluate(doubleArray33);
        double double36 = variance7.evaluate(doubleArray33, (double) 10.0f);
        org.apache.commons.math.stat.descriptive.moment.Variance variance38 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray45 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double46 = variance38.evaluate(doubleArray45);
        variance38.setBiasCorrected(true);
        long long49 = variance38.getN();
        long long50 = variance38.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance52 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray59 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double60 = variance52.evaluate(doubleArray59);
        double[] doubleArray64 = new double[] { (byte) 1, (byte) 100, 1L };
        double double65 = variance52.evaluate(doubleArray64);
        double double67 = variance38.evaluate(doubleArray64, (double) 10.0f);
        double double68 = variance7.evaluate(doubleArray64);
        // The following exception was thrown during execution in test generation
        try {
            double double71 = variance1.evaluate(doubleArray64, (int) (byte) 10, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 2168.222222222222d + "'", double15 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 2168.222222222222d + "'", double29 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0, 100.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 2178.0d + "'", double34 == 2178.0d);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 3267.0d + "'", double36 == 3267.0d);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 2168.222222222222d + "'", double46 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 0L + "'", long49 == 0L);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 0L + "'", long50 == 0L);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 2168.222222222222d + "'", double60 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[1.0, 100.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 2178.0d + "'", double65 == 2178.0d);
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 3267.0d + "'", double67 == 3267.0d);
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 3267.0d + "'", double68 == 3267.0d);
    }

    @Test
    public void test0222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0222");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = null;
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        org.apache.commons.math.stat.descriptive.moment.Variance variance3 = new org.apache.commons.math.stat.descriptive.moment.Variance();
        long long4 = variance3.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance6 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray13 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double14 = variance6.evaluate(doubleArray13);
        variance6.setBiasCorrected(true);
        boolean boolean17 = variance6.isBiasCorrected();
        double[] doubleArray24 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double25 = variance6.evaluate(doubleArray24);
        boolean boolean27 = variance6.equals((java.lang.Object) 10.0d);
        boolean boolean28 = variance6.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.Variance variance30 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        boolean boolean31 = variance6.equals((java.lang.Object) false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance33 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray40 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double41 = variance33.evaluate(doubleArray40);
        variance33.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance45 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray52 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double53 = variance45.evaluate(doubleArray52);
        variance33.incrementAll(doubleArray52);
        double double56 = variance6.evaluate(doubleArray52, (double) 100.0f);
        variance3.incrementAll(doubleArray52, (int) (short) 1, (int) (byte) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance61 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray68 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double69 = variance61.evaluate(doubleArray68);
        variance61.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance73 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        variance73.clear();
        double double75 = variance73.getResult();
        double[] doubleArray80 = new double[] { (-1), 2168.222222222222d, 16.566666666418314d, 10.0d };
        variance73.incrementAll(doubleArray80);
        variance61.incrementAll(doubleArray80);
        variance3.incrementAll(doubleArray80);
        // The following exception was thrown during execution in test generation
        try {
            double double86 = variance2.evaluate(doubleArray80, (int) (byte) 100, (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 2168.222222222222d + "'", double14 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 16.566666666666663d + "'", double25 == 16.566666666666663d);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 2168.222222222222d + "'", double41 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 2168.222222222222d + "'", double53 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 2601.8666666666663d + "'", double56 == 2601.8666666666663d);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 2168.222222222222d + "'", double69 == 2168.222222222222d);
        org.junit.Assert.assertTrue(Double.isNaN(double75));
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[-1.0, 2168.222222222222, 16.566666666418314, 10.0]");
    }

    @Test
    public void test0223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0223");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray8 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double9 = variance1.evaluate(doubleArray8);
        variance1.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance13 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray20 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double21 = variance13.evaluate(doubleArray20);
        variance13.setBiasCorrected(true);
        boolean boolean24 = variance13.isBiasCorrected();
        double[] doubleArray31 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double32 = variance13.evaluate(doubleArray31);
        double double35 = variance1.evaluate(doubleArray31, (int) (byte) 1, (int) (byte) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance37 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance39 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray46 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double47 = variance39.evaluate(doubleArray46);
        variance39.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance51 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray58 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double59 = variance51.evaluate(doubleArray58);
        variance51.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance63 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray70 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double71 = variance63.evaluate(doubleArray70);
        variance63.setBiasCorrected(true);
        boolean boolean74 = variance63.isBiasCorrected();
        double[] doubleArray81 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double82 = variance63.evaluate(doubleArray81);
        double double85 = variance51.evaluate(doubleArray81, (int) (byte) 1, (int) (byte) 0);
        variance39.incrementAll(doubleArray81, (int) (byte) 1, 1);
        double double89 = variance37.evaluate(doubleArray81);
        double double90 = variance1.evaluate(doubleArray81);
        boolean boolean91 = variance1.isBiasCorrected();
        variance1.setBiasCorrected(true);
        long long94 = variance1.getN();
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 2168.222222222222d + "'", double9 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 2168.222222222222d + "'", double21 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 16.566666666666663d + "'", double32 == 16.566666666666663d);
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 2168.222222222222d + "'", double47 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 2168.222222222222d + "'", double59 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 2168.222222222222d + "'", double71 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 16.566666666666663d + "'", double82 == 16.566666666666663d);
        org.junit.Assert.assertTrue(Double.isNaN(double85));
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + 13.805555555555552d + "'", double89 == 13.805555555555552d);
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + 16.566666666666663d + "'", double90 == 16.566666666666663d);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
        org.junit.Assert.assertTrue("'" + long94 + "' != '" + 0L + "'", long94 == 0L);
    }

    @Test
    public void test0224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0224");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray8 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double9 = variance1.evaluate(doubleArray8);
        variance1.clear();
        variance1.setBiasCorrected(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance16 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray23 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double24 = variance16.evaluate(doubleArray23);
        variance16.setBiasCorrected(true);
        long long27 = variance16.getN();
        long long28 = variance16.getN();
        double double29 = variance16.getResult();
        variance16.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance32 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray39 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double40 = variance32.evaluate(doubleArray39);
        double[] doubleArray44 = new double[] { (byte) 1, (byte) 100, 1L };
        double double45 = variance32.evaluate(doubleArray44);
        org.apache.commons.math.stat.descriptive.moment.Variance variance47 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray54 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double55 = variance47.evaluate(doubleArray54);
        variance47.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance59 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray66 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double67 = variance59.evaluate(doubleArray66);
        variance47.incrementAll(doubleArray66);
        variance32.incrementAll(doubleArray66);
        double double70 = variance16.evaluate(doubleArray66);
        variance14.incrementAll(doubleArray66);
        // The following exception was thrown during execution in test generation
        try {
            double double74 = variance1.evaluate(doubleArray66, (-1), (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: start position cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 2168.222222222222d + "'", double9 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 2168.222222222222d + "'", double24 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 2168.222222222222d + "'", double40 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0, 100.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 2178.0d + "'", double45 == 2178.0d);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 2168.222222222222d + "'", double55 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 2168.222222222222d + "'", double67 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 2601.866666666667d + "'", double70 == 2601.866666666667d);
    }

    @Test
    public void test0225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0225");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray8 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double9 = variance1.evaluate(doubleArray8);
        variance1.setBiasCorrected(true);
        long long12 = variance1.getN();
        long long13 = variance1.getN();
        boolean boolean15 = variance1.equals((java.lang.Object) 16.566666666666663d);
        boolean boolean17 = variance1.equals((java.lang.Object) (short) 10);
        long long18 = variance1.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance20 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray27 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double28 = variance20.evaluate(doubleArray27);
        variance20.setBiasCorrected(true);
        long long31 = variance20.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance33 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray40 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double41 = variance33.evaluate(doubleArray40);
        variance33.clear();
        variance33.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance46 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        variance46.clear();
        double double48 = variance46.getResult();
        double[] doubleArray53 = new double[] { (-1), 2168.222222222222d, 16.566666666418314d, 10.0d };
        variance46.incrementAll(doubleArray53);
        boolean boolean55 = variance33.equals((java.lang.Object) doubleArray53);
        variance20.incrementAll(doubleArray53);
        org.apache.commons.math.stat.descriptive.moment.Variance variance58 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray65 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double66 = variance58.evaluate(doubleArray65);
        variance58.setBiasCorrected(true);
        long long69 = variance58.getN();
        long long70 = variance58.getN();
        boolean boolean72 = variance58.equals((java.lang.Object) 16.566666666666663d);
        boolean boolean73 = variance20.equals((java.lang.Object) variance58);
        org.apache.commons.math.stat.descriptive.moment.Variance variance75 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray82 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double83 = variance75.evaluate(doubleArray82);
        variance75.setBiasCorrected(true);
        variance75.increment((double) (byte) 0);
        double[] doubleArray90 = new double[] { 'a', 100L };
        double double92 = variance75.evaluate(doubleArray90, 0.0d);
        double double93 = variance58.evaluate(doubleArray90);
        double double97 = variance1.evaluate(doubleArray90, (double) (short) 100, (int) (short) 0, 0);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 2168.222222222222d + "'", double9 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 2168.222222222222d + "'", double28 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 2168.222222222222d + "'", double41 == 2168.222222222222d);
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[-1.0, 2168.222222222222, 16.566666666418314, 10.0]");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 2168.222222222222d + "'", double66 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + 0L + "'", long69 == 0L);
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + 0L + "'", long70 == 0L);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 2168.222222222222d + "'", double83 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray90), "[97.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double92 + "' != '" + 4.5d + "'", double92 == 4.5d);
        org.junit.Assert.assertTrue("'" + double93 + "' != '" + 4.5d + "'", double93 == 4.5d);
        org.junit.Assert.assertTrue(Double.isNaN(double97));
    }

    @Test
    public void test0226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0226");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray8 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double9 = variance1.evaluate(doubleArray8);
        variance1.setBiasCorrected(true);
        long long12 = variance1.getN();
        long long13 = variance1.getN();
        double double14 = variance1.getResult();
        variance1.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance17 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray24 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double25 = variance17.evaluate(doubleArray24);
        variance17.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance29 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray36 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double37 = variance29.evaluate(doubleArray36);
        variance17.incrementAll(doubleArray36);
        variance17.clear();
        variance17.setBiasCorrected(false);
        java.lang.Class<?> wildcardClass42 = variance17.getClass();
        boolean boolean43 = variance1.equals((java.lang.Object) variance17);
        double double44 = variance17.getResult();
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 2168.222222222222d + "'", double9 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 2168.222222222222d + "'", double25 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 2168.222222222222d + "'", double37 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(wildcardClass42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double44));
    }

    @Test
    public void test0227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0227");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray8 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double9 = variance1.evaluate(doubleArray8);
        double[] doubleArray13 = new double[] { (byte) 1, (byte) 100, 1L };
        double double14 = variance1.evaluate(doubleArray13);
        org.apache.commons.math.stat.descriptive.moment.Variance variance16 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray23 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double24 = variance16.evaluate(doubleArray23);
        variance16.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance28 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray35 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double36 = variance28.evaluate(doubleArray35);
        variance16.incrementAll(doubleArray35);
        variance1.incrementAll(doubleArray35);
        boolean boolean40 = variance1.equals((java.lang.Object) (byte) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance42 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray49 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double50 = variance42.evaluate(doubleArray49);
        variance42.setBiasCorrected(true);
        long long53 = variance42.getN();
        variance42.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance56 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray63 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double64 = variance56.evaluate(doubleArray63);
        double double65 = variance42.evaluate(doubleArray63);
        org.apache.commons.math.stat.descriptive.moment.Variance variance67 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double68 = variance67.getResult();
        double double69 = variance67.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance71 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray78 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double79 = variance71.evaluate(doubleArray78);
        variance71.setBiasCorrected(true);
        long long82 = variance71.getN();
        variance71.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance85 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray92 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double93 = variance85.evaluate(doubleArray92);
        double double94 = variance71.evaluate(doubleArray92);
        variance67.incrementAll(doubleArray92);
        double double96 = variance42.evaluate(doubleArray92);
        double double97 = variance1.evaluate(doubleArray92);
        java.lang.Class<?> wildcardClass98 = doubleArray92.getClass();
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 2168.222222222222d + "'", double9 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, 100.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 2178.0d + "'", double14 == 2178.0d);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 2168.222222222222d + "'", double24 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 2168.222222222222d + "'", double36 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 2168.222222222222d + "'", double50 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 0L + "'", long53 == 0L);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 2168.222222222222d + "'", double64 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 2601.866666666667d + "'", double65 == 2601.866666666667d);
        org.junit.Assert.assertTrue(Double.isNaN(double68));
        org.junit.Assert.assertTrue(Double.isNaN(double69));
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 2168.222222222222d + "'", double79 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + long82 + "' != '" + 0L + "'", long82 == 0L);
        org.junit.Assert.assertNotNull(doubleArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray92), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double93 + "' != '" + 2168.222222222222d + "'", double93 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + double94 + "' != '" + 2601.866666666667d + "'", double94 == 2601.866666666667d);
        org.junit.Assert.assertTrue("'" + double96 + "' != '" + 2601.866666666667d + "'", double96 == 2601.866666666667d);
        org.junit.Assert.assertTrue("'" + double97 + "' != '" + 2168.222222222222d + "'", double97 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(wildcardClass98);
    }

    @Test
    public void test0228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0228");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double2 = variance1.getResult();
        boolean boolean3 = variance1.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.Variance variance5 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray12 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double13 = variance5.evaluate(doubleArray12);
        variance5.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance17 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray24 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double25 = variance17.evaluate(doubleArray24);
        variance5.incrementAll(doubleArray24);
        variance5.clear();
        variance5.setBiasCorrected(false);
        long long30 = variance5.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance32 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray39 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double40 = variance32.evaluate(doubleArray39);
        variance32.clear();
        variance32.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance45 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray52 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double53 = variance45.evaluate(doubleArray52);
        variance45.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance57 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray64 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double65 = variance57.evaluate(doubleArray64);
        variance57.setBiasCorrected(true);
        boolean boolean68 = variance57.isBiasCorrected();
        double[] doubleArray75 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double76 = variance57.evaluate(doubleArray75);
        double double79 = variance45.evaluate(doubleArray75, (int) (byte) 1, (int) (byte) 0);
        variance32.incrementAll(doubleArray75);
        double double81 = variance5.evaluate(doubleArray75);
        variance1.incrementAll(doubleArray75);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 2168.222222222222d + "'", double13 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 2168.222222222222d + "'", double25 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 2168.222222222222d + "'", double40 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 2168.222222222222d + "'", double53 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 2168.222222222222d + "'", double65 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 16.566666666666663d + "'", double76 == 16.566666666666663d);
        org.junit.Assert.assertTrue(Double.isNaN(double79));
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 13.805555555555552d + "'", double81 == 13.805555555555552d);
    }

    @Test
    public void test0229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0229");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double2 = variance1.getResult();
        double double3 = variance1.getResult();
        variance1.setBiasCorrected(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance7 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray14 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double15 = variance7.evaluate(doubleArray14);
        variance7.setBiasCorrected(true);
        long long18 = variance7.getN();
        long long19 = variance7.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance21 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray28 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double29 = variance21.evaluate(doubleArray28);
        double[] doubleArray33 = new double[] { (byte) 1, (byte) 100, 1L };
        double double34 = variance21.evaluate(doubleArray33);
        double double36 = variance7.evaluate(doubleArray33, (double) 10.0f);
        org.apache.commons.math.stat.descriptive.moment.Variance variance38 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray45 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double46 = variance38.evaluate(doubleArray45);
        variance38.setBiasCorrected(true);
        long long49 = variance38.getN();
        long long50 = variance38.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance52 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray59 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double60 = variance52.evaluate(doubleArray59);
        double[] doubleArray64 = new double[] { (byte) 1, (byte) 100, 1L };
        double double65 = variance52.evaluate(doubleArray64);
        double double67 = variance38.evaluate(doubleArray64, (double) 10.0f);
        double double68 = variance7.evaluate(doubleArray64);
        org.apache.commons.math.stat.descriptive.moment.Variance variance70 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray77 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double78 = variance70.evaluate(doubleArray77);
        variance70.setBiasCorrected(true);
        boolean boolean81 = variance70.isBiasCorrected();
        double[] doubleArray88 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double89 = variance70.evaluate(doubleArray88);
        double double91 = variance7.evaluate(doubleArray88, (double) 0.0f);
        // The following exception was thrown during execution in test generation
        try {
            double double95 = variance1.evaluate(doubleArray88, Double.NaN, (int) '4', (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 2168.222222222222d + "'", double15 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 2168.222222222222d + "'", double29 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0, 100.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 2178.0d + "'", double34 == 2178.0d);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 3267.0d + "'", double36 == 3267.0d);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 2168.222222222222d + "'", double46 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 0L + "'", long49 == 0L);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 0L + "'", long50 == 0L);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 2168.222222222222d + "'", double60 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[1.0, 100.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 2178.0d + "'", double65 == 2178.0d);
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 3267.0d + "'", double67 == 3267.0d);
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 3267.0d + "'", double68 == 3267.0d);
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 2168.222222222222d + "'", double78 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + 16.566666666666663d + "'", double89 == 16.566666666666663d);
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 16.566666666666666d + "'", double91 == 16.566666666666666d);
    }

    @Test
    public void test0230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0230");
        org.apache.commons.math.stat.descriptive.moment.Variance variance0 = new org.apache.commons.math.stat.descriptive.moment.Variance();
        long long1 = variance0.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance3 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray10 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double11 = variance3.evaluate(doubleArray10);
        variance3.setBiasCorrected(true);
        boolean boolean14 = variance3.isBiasCorrected();
        double[] doubleArray21 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double22 = variance3.evaluate(doubleArray21);
        boolean boolean24 = variance3.equals((java.lang.Object) 10.0d);
        boolean boolean25 = variance3.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.Variance variance27 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        boolean boolean28 = variance3.equals((java.lang.Object) false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance30 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray37 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double38 = variance30.evaluate(doubleArray37);
        variance30.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance42 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray49 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double50 = variance42.evaluate(doubleArray49);
        variance30.incrementAll(doubleArray49);
        double double53 = variance3.evaluate(doubleArray49, (double) 100.0f);
        variance0.incrementAll(doubleArray49, (int) (short) 1, (int) (byte) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance58 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray65 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double66 = variance58.evaluate(doubleArray65);
        variance58.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance70 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        variance70.clear();
        double double72 = variance70.getResult();
        double[] doubleArray77 = new double[] { (-1), 2168.222222222222d, 16.566666666418314d, 10.0d };
        variance70.incrementAll(doubleArray77);
        variance58.incrementAll(doubleArray77);
        variance0.incrementAll(doubleArray77);
        java.lang.Class<?> wildcardClass81 = doubleArray77.getClass();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 2168.222222222222d + "'", double11 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 16.566666666666663d + "'", double22 == 16.566666666666663d);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 2168.222222222222d + "'", double38 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 2168.222222222222d + "'", double50 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 2601.8666666666663d + "'", double53 == 2601.8666666666663d);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 2168.222222222222d + "'", double66 == 2168.222222222222d);
        org.junit.Assert.assertTrue(Double.isNaN(double72));
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[-1.0, 2168.222222222222, 16.566666666418314, 10.0]");
        org.junit.Assert.assertNotNull(wildcardClass81);
    }

    @Test
    public void test0231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0231");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance3 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray10 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double11 = variance3.evaluate(doubleArray10);
        variance3.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance15 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray22 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double23 = variance15.evaluate(doubleArray22);
        variance15.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance27 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray34 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double35 = variance27.evaluate(doubleArray34);
        variance27.setBiasCorrected(true);
        boolean boolean38 = variance27.isBiasCorrected();
        double[] doubleArray45 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double46 = variance27.evaluate(doubleArray45);
        double double49 = variance15.evaluate(doubleArray45, (int) (byte) 1, (int) (byte) 0);
        variance3.incrementAll(doubleArray45, (int) (byte) 1, 1);
        double double53 = variance1.evaluate(doubleArray45);
        java.lang.Class<?> wildcardClass54 = variance1.getClass();
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 2168.222222222222d + "'", double11 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 2168.222222222222d + "'", double23 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 2168.222222222222d + "'", double35 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 16.566666666666663d + "'", double46 == 16.566666666666663d);
        org.junit.Assert.assertTrue(Double.isNaN(double49));
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 13.805555555555552d + "'", double53 == 13.805555555555552d);
        org.junit.Assert.assertNotNull(wildcardClass54);
    }

    @Test
    public void test0232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0232");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray8 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double9 = variance1.evaluate(doubleArray8);
        variance1.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance13 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray20 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double21 = variance13.evaluate(doubleArray20);
        variance1.incrementAll(doubleArray20);
        variance1.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance25 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray32 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double33 = variance25.evaluate(doubleArray32);
        variance25.setBiasCorrected(true);
        boolean boolean36 = variance25.isBiasCorrected();
        double[] doubleArray43 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double44 = variance25.evaluate(doubleArray43);
        double double45 = variance25.getResult();
        long long46 = variance25.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance48 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray55 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double56 = variance48.evaluate(doubleArray55);
        variance48.setBiasCorrected(true);
        long long59 = variance48.getN();
        variance48.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance62 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray69 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double70 = variance62.evaluate(doubleArray69);
        double double71 = variance48.evaluate(doubleArray69);
        double double72 = variance25.evaluate(doubleArray69);
        // The following exception was thrown during execution in test generation
        try {
            variance1.incrementAll(doubleArray69, (int) (short) -1, (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: start position cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 2168.222222222222d + "'", double9 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 2168.222222222222d + "'", double21 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 2168.222222222222d + "'", double33 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 16.566666666666663d + "'", double44 == 16.566666666666663d);
        org.junit.Assert.assertTrue(Double.isNaN(double45));
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 0L + "'", long46 == 0L);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 2168.222222222222d + "'", double56 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 0L + "'", long59 == 0L);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 2168.222222222222d + "'", double70 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 2601.866666666667d + "'", double71 == 2601.866666666667d);
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 2601.866666666667d + "'", double72 == 2601.866666666667d);
    }

    @Test
    public void test0233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0233");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray8 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double9 = variance1.evaluate(doubleArray8);
        variance1.setBiasCorrected(true);
        variance1.increment((double) (byte) 0);
        double[] doubleArray16 = new double[] { 'a', 100L };
        double double18 = variance1.evaluate(doubleArray16, 0.0d);
        long long19 = variance1.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance21 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray28 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double29 = variance21.evaluate(doubleArray28);
        variance21.setBiasCorrected(true);
        long long32 = variance21.getN();
        long long33 = variance21.getN();
        double double34 = variance21.getResult();
        variance21.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance37 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray44 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double45 = variance37.evaluate(doubleArray44);
        double[] doubleArray49 = new double[] { (byte) 1, (byte) 100, 1L };
        double double50 = variance37.evaluate(doubleArray49);
        org.apache.commons.math.stat.descriptive.moment.Variance variance52 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray59 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double60 = variance52.evaluate(doubleArray59);
        variance52.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance64 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray71 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double72 = variance64.evaluate(doubleArray71);
        variance52.incrementAll(doubleArray71);
        variance37.incrementAll(doubleArray71);
        double double75 = variance21.evaluate(doubleArray71);
        boolean boolean76 = variance1.equals((java.lang.Object) double75);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 2168.222222222222d + "'", double9 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[97.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 4.5d + "'", double18 == 4.5d);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 1L + "'", long19 == 1L);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 2168.222222222222d + "'", double29 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 2168.222222222222d + "'", double45 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0, 100.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 2178.0d + "'", double50 == 2178.0d);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 2168.222222222222d + "'", double60 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 2168.222222222222d + "'", double72 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 2601.866666666667d + "'", double75 == 2601.866666666667d);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
    }

    @Test
    public void test0234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0234");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray8 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double9 = variance1.evaluate(doubleArray8);
        variance1.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance13 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray20 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double21 = variance13.evaluate(doubleArray20);
        variance13.setBiasCorrected(true);
        boolean boolean24 = variance13.isBiasCorrected();
        double[] doubleArray31 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double32 = variance13.evaluate(doubleArray31);
        org.apache.commons.math.stat.descriptive.moment.Variance variance34 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray41 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double42 = variance34.evaluate(doubleArray41);
        variance34.setBiasCorrected(true);
        boolean boolean45 = variance34.isBiasCorrected();
        double[] doubleArray52 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double53 = variance34.evaluate(doubleArray52);
        double double56 = variance13.evaluate(doubleArray52, (int) (byte) 1, 0);
        double double58 = variance1.evaluate(doubleArray52, 2178.0d);
        variance1.increment(3267.0d);
        double[] doubleArray61 = null;
        // The following exception was thrown during execution in test generation
        try {
            variance1.incrementAll(doubleArray61);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: input values array is null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 2168.222222222222d + "'", double9 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 2168.222222222222d + "'", double21 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 16.566666666666663d + "'", double32 == 16.566666666666663d);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 2168.222222222222d + "'", double42 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 16.566666666666663d + "'", double53 == 16.566666666666663d);
        org.junit.Assert.assertTrue(Double.isNaN(double56));
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 16.566666666418314d + "'", double58 == 16.566666666418314d);
    }

    @Test
    public void test0235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0235");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray8 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double9 = variance1.evaluate(doubleArray8);
        variance1.setBiasCorrected(true);
        long long12 = variance1.getN();
        long long13 = variance1.getN();
        double double14 = variance1.getResult();
        variance1.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance17 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray24 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double25 = variance17.evaluate(doubleArray24);
        double[] doubleArray29 = new double[] { (byte) 1, (byte) 100, 1L };
        double double30 = variance17.evaluate(doubleArray29);
        org.apache.commons.math.stat.descriptive.moment.Variance variance32 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray39 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double40 = variance32.evaluate(doubleArray39);
        variance32.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance44 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray51 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double52 = variance44.evaluate(doubleArray51);
        variance32.incrementAll(doubleArray51);
        variance17.incrementAll(doubleArray51);
        double double55 = variance1.evaluate(doubleArray51);
        org.apache.commons.math.stat.descriptive.moment.Variance variance57 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double58 = variance57.getResult();
        double double59 = variance57.getResult();
        variance57.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance62 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray69 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double70 = variance62.evaluate(doubleArray69);
        variance62.setBiasCorrected(true);
        long long73 = variance62.getN();
        long long74 = variance62.getN();
        boolean boolean75 = variance62.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.Variance variance77 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray84 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double85 = variance77.evaluate(doubleArray84);
        double[] doubleArray89 = new double[] { (byte) 1, (byte) 100, 1L };
        double double90 = variance77.evaluate(doubleArray89);
        variance62.incrementAll(doubleArray89, (int) (short) 1, 0);
        variance57.incrementAll(doubleArray89);
        // The following exception was thrown during execution in test generation
        try {
            double double97 = variance1.evaluate(doubleArray89, (int) 'a', (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 2168.222222222222d + "'", double9 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 2168.222222222222d + "'", double25 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, 100.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 2178.0d + "'", double30 == 2178.0d);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 2168.222222222222d + "'", double40 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 2168.222222222222d + "'", double52 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 2601.866666666667d + "'", double55 == 2601.866666666667d);
        org.junit.Assert.assertTrue(Double.isNaN(double58));
        org.junit.Assert.assertTrue(Double.isNaN(double59));
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 2168.222222222222d + "'", double70 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + 0L + "'", long73 == 0L);
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 0L + "'", long74 == 0L);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 2168.222222222222d + "'", double85 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray89), "[1.0, 100.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + 2178.0d + "'", double90 == 2178.0d);
    }

    @Test
    public void test0236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0236");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray8 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double9 = variance1.evaluate(doubleArray8);
        double[] doubleArray13 = new double[] { (byte) 1, (byte) 100, 1L };
        double double14 = variance1.evaluate(doubleArray13);
        double double15 = variance1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance17 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray24 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double25 = variance17.evaluate(doubleArray24);
        variance17.setBiasCorrected(true);
        long long28 = variance17.getN();
        long long29 = variance17.getN();
        boolean boolean30 = variance17.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.Variance variance32 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray39 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double40 = variance32.evaluate(doubleArray39);
        double[] doubleArray44 = new double[] { (byte) 1, (byte) 100, 1L };
        double double45 = variance32.evaluate(doubleArray44);
        variance17.incrementAll(doubleArray44, (int) (short) 1, 0);
        // The following exception was thrown during execution in test generation
        try {
            double double52 = variance1.evaluate(doubleArray44, 13.805555555555506d, (-1), (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: start position cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 2168.222222222222d + "'", double9 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, 100.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 2178.0d + "'", double14 == 2178.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 2168.222222222222d + "'", double25 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 2168.222222222222d + "'", double40 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0, 100.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 2178.0d + "'", double45 == 2178.0d);
    }

    @Test
    public void test0237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0237");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray8 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double9 = variance1.evaluate(doubleArray8);
        variance1.setBiasCorrected(true);
        boolean boolean12 = variance1.isBiasCorrected();
        double[] doubleArray19 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double20 = variance1.evaluate(doubleArray19);
        boolean boolean22 = variance1.equals((java.lang.Object) 10.0d);
        boolean boolean23 = variance1.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.Variance variance25 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        boolean boolean26 = variance1.equals((java.lang.Object) false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance28 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray35 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double36 = variance28.evaluate(doubleArray35);
        variance28.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance40 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray47 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double48 = variance40.evaluate(doubleArray47);
        variance28.incrementAll(doubleArray47);
        double double51 = variance1.evaluate(doubleArray47, (double) 100.0f);
        long long52 = variance1.getN();
        long long53 = variance1.getN();
        variance1.setBiasCorrected(false);
        variance1.setBiasCorrected(false);
        long long58 = variance1.getN();
        double[] doubleArray59 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double61 = variance1.evaluate(doubleArray59, (double) 100.0f);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 2168.222222222222d + "'", double9 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 16.566666666666663d + "'", double20 == 16.566666666666663d);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 2168.222222222222d + "'", double36 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 2168.222222222222d + "'", double48 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 2601.8666666666663d + "'", double51 == 2601.8666666666663d);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 0L + "'", long52 == 0L);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 0L + "'", long53 == 0L);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 0L + "'", long58 == 0L);
    }

    @Test
    public void test0238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0238");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray8 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double9 = variance1.evaluate(doubleArray8);
        variance1.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance13 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray20 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double21 = variance13.evaluate(doubleArray20);
        variance13.setBiasCorrected(true);
        boolean boolean24 = variance13.isBiasCorrected();
        double[] doubleArray31 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double32 = variance13.evaluate(doubleArray31);
        org.apache.commons.math.stat.descriptive.moment.Variance variance34 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray41 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double42 = variance34.evaluate(doubleArray41);
        variance34.setBiasCorrected(true);
        boolean boolean45 = variance34.isBiasCorrected();
        double[] doubleArray52 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double53 = variance34.evaluate(doubleArray52);
        double double56 = variance13.evaluate(doubleArray52, (int) (byte) 1, 0);
        double double58 = variance1.evaluate(doubleArray52, 2178.0d);
        java.lang.Class<?> wildcardClass59 = doubleArray52.getClass();
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 2168.222222222222d + "'", double9 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 2168.222222222222d + "'", double21 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 16.566666666666663d + "'", double32 == 16.566666666666663d);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 2168.222222222222d + "'", double42 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 16.566666666666663d + "'", double53 == 16.566666666666663d);
        org.junit.Assert.assertTrue(Double.isNaN(double56));
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 16.566666666418314d + "'", double58 == 16.566666666418314d);
        org.junit.Assert.assertNotNull(wildcardClass59);
    }

    @Test
    public void test0239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0239");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray8 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double9 = variance1.evaluate(doubleArray8);
        variance1.setBiasCorrected(true);
        long long12 = variance1.getN();
        long long13 = variance1.getN();
        boolean boolean14 = variance1.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.Variance variance16 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray23 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double24 = variance16.evaluate(doubleArray23);
        double[] doubleArray28 = new double[] { (byte) 1, (byte) 100, 1L };
        double double29 = variance16.evaluate(doubleArray28);
        variance1.incrementAll(doubleArray28, (int) (short) 1, 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance34 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray41 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double42 = variance34.evaluate(doubleArray41);
        variance34.setBiasCorrected(true);
        long long45 = variance34.getN();
        long long46 = variance34.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance48 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray55 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double56 = variance48.evaluate(doubleArray55);
        double[] doubleArray60 = new double[] { (byte) 1, (byte) 100, 1L };
        double double61 = variance48.evaluate(doubleArray60);
        double double63 = variance34.evaluate(doubleArray60, (double) 10.0f);
        // The following exception was thrown during execution in test generation
        try {
            double double67 = variance1.evaluate(doubleArray60, 2178.0d, (int) (short) 1, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: length cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 2168.222222222222d + "'", double9 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 2168.222222222222d + "'", double24 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, 100.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 2178.0d + "'", double29 == 2178.0d);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 2168.222222222222d + "'", double42 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 0L + "'", long46 == 0L);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 2168.222222222222d + "'", double56 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0, 100.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 2178.0d + "'", double61 == 2178.0d);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 3267.0d + "'", double63 == 3267.0d);
    }

    @Test
    public void test0240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0240");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray8 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double9 = variance1.evaluate(doubleArray8);
        variance1.setBiasCorrected(true);
        boolean boolean12 = variance1.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray21 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double22 = variance14.evaluate(doubleArray21);
        variance14.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance26 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray33 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double34 = variance26.evaluate(doubleArray33);
        variance26.setBiasCorrected(true);
        boolean boolean37 = variance26.isBiasCorrected();
        double[] doubleArray44 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double45 = variance26.evaluate(doubleArray44);
        double double48 = variance14.evaluate(doubleArray44, (int) (byte) 1, (int) (byte) 0);
        double double51 = variance1.evaluate(doubleArray44, (int) (byte) 1, 0);
        variance1.setBiasCorrected(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance55 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray62 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double63 = variance55.evaluate(doubleArray62);
        variance55.setBiasCorrected(true);
        boolean boolean66 = variance55.isBiasCorrected();
        double[] doubleArray73 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double74 = variance55.evaluate(doubleArray73);
        double double75 = variance55.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance77 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        variance77.clear();
        double double79 = variance77.getResult();
        double[] doubleArray84 = new double[] { (-1), 2168.222222222222d, 16.566666666418314d, 10.0d };
        variance77.incrementAll(doubleArray84);
        double double86 = variance55.evaluate(doubleArray84);
        boolean boolean87 = variance1.equals((java.lang.Object) variance55);
        variance55.increment(2168.222222222222d);
        java.lang.Class<?> wildcardClass90 = variance55.getClass();
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 2168.222222222222d + "'", double9 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 2168.222222222222d + "'", double22 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 2168.222222222222d + "'", double34 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 16.566666666666663d + "'", double45 == 16.566666666666663d);
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertTrue(Double.isNaN(double51));
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 2168.222222222222d + "'", double63 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 16.566666666666663d + "'", double74 == 16.566666666666663d);
        org.junit.Assert.assertTrue(Double.isNaN(double75));
        org.junit.Assert.assertTrue(Double.isNaN(double79));
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[-1.0, 2168.222222222222, 16.566666666418314, 10.0]");
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 1166128.5457099646d + "'", double86 == 1166128.5457099646d);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertNotNull(wildcardClass90);
    }

    @Test
    public void test0241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0241");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = null;
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance3 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray10 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double11 = variance3.evaluate(doubleArray10);
        variance3.setBiasCorrected(true);
        boolean boolean14 = variance3.isBiasCorrected();
        variance3.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance17 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray24 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double25 = variance17.evaluate(doubleArray24);
        variance17.setBiasCorrected(true);
        long long28 = variance17.getN();
        long long29 = variance17.getN();
        boolean boolean31 = variance17.equals((java.lang.Object) 16.566666666666663d);
        boolean boolean33 = variance17.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance35 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray42 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double43 = variance35.evaluate(doubleArray42);
        variance35.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance47 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray54 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double55 = variance47.evaluate(doubleArray54);
        variance47.setBiasCorrected(true);
        boolean boolean58 = variance47.isBiasCorrected();
        double[] doubleArray65 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double66 = variance47.evaluate(doubleArray65);
        org.apache.commons.math.stat.descriptive.moment.Variance variance68 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray75 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double76 = variance68.evaluate(doubleArray75);
        variance68.setBiasCorrected(true);
        boolean boolean79 = variance68.isBiasCorrected();
        double[] doubleArray86 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double87 = variance68.evaluate(doubleArray86);
        double double90 = variance47.evaluate(doubleArray86, (int) (byte) 1, 0);
        double double92 = variance35.evaluate(doubleArray86, 2178.0d);
        double double93 = variance17.evaluate(doubleArray86);
        variance3.incrementAll(doubleArray86, 0, 0);
        // The following exception was thrown during execution in test generation
        try {
            double double99 = variance1.evaluate(doubleArray86, (int) (short) 100, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 2168.222222222222d + "'", double11 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 2168.222222222222d + "'", double25 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 2168.222222222222d + "'", double43 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 2168.222222222222d + "'", double55 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 16.566666666666663d + "'", double66 == 16.566666666666663d);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 2168.222222222222d + "'", double76 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double87 + "' != '" + 16.566666666666663d + "'", double87 == 16.566666666666663d);
        org.junit.Assert.assertTrue(Double.isNaN(double90));
        org.junit.Assert.assertTrue("'" + double92 + "' != '" + 16.566666666418314d + "'", double92 == 16.566666666418314d);
        org.junit.Assert.assertTrue("'" + double93 + "' != '" + 16.566666666666663d + "'", double93 == 16.566666666666663d);
    }

    @Test
    public void test0242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0242");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray8 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double9 = variance1.evaluate(doubleArray8);
        org.apache.commons.math.stat.descriptive.moment.Variance variance11 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray18 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double19 = variance11.evaluate(doubleArray18);
        variance11.setBiasCorrected(true);
        boolean boolean22 = variance11.isBiasCorrected();
        double[] doubleArray29 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double30 = variance11.evaluate(doubleArray29);
        org.apache.commons.math.stat.descriptive.moment.Variance variance32 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray39 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double40 = variance32.evaluate(doubleArray39);
        variance32.setBiasCorrected(true);
        boolean boolean43 = variance32.isBiasCorrected();
        double[] doubleArray50 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double51 = variance32.evaluate(doubleArray50);
        double double54 = variance11.evaluate(doubleArray50, (int) (byte) 1, 0);
        variance11.setBiasCorrected(true);
        boolean boolean57 = variance1.equals((java.lang.Object) true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance59 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray66 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double67 = variance59.evaluate(doubleArray66);
        double double69 = variance1.evaluate(doubleArray66, 874596.4092824734d);
        long long70 = variance1.getN();
        variance1.clear();
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 2168.222222222222d + "'", double9 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 2168.222222222222d + "'", double19 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 16.566666666666663d + "'", double30 == 16.566666666666663d);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 2168.222222222222d + "'", double40 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 16.566666666666663d + "'", double51 == 16.566666666666663d);
        org.junit.Assert.assertTrue(Double.isNaN(double54));
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 2168.222222222222d + "'", double67 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 2168.2220052083335d + "'", double69 == 2168.2220052083335d);
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + 0L + "'", long70 == 0L);
    }

    @Test
    public void test0243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0243");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray8 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double9 = variance1.evaluate(doubleArray8);
        variance1.setBiasCorrected(true);
        long long12 = variance1.getN();
        long long13 = variance1.getN();
        boolean boolean15 = variance1.equals((java.lang.Object) 16.566666666666663d);
        boolean boolean17 = variance1.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance19 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray26 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double27 = variance19.evaluate(doubleArray26);
        variance19.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance31 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray38 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double39 = variance31.evaluate(doubleArray38);
        variance31.setBiasCorrected(true);
        boolean boolean42 = variance31.isBiasCorrected();
        double[] doubleArray49 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double50 = variance31.evaluate(doubleArray49);
        org.apache.commons.math.stat.descriptive.moment.Variance variance52 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray59 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double60 = variance52.evaluate(doubleArray59);
        variance52.setBiasCorrected(true);
        boolean boolean63 = variance52.isBiasCorrected();
        double[] doubleArray70 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double71 = variance52.evaluate(doubleArray70);
        double double74 = variance31.evaluate(doubleArray70, (int) (byte) 1, 0);
        double double76 = variance19.evaluate(doubleArray70, 2178.0d);
        double double77 = variance1.evaluate(doubleArray70);
        boolean boolean79 = variance1.equals((java.lang.Object) (short) 100);
        variance1.clear();
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 2168.222222222222d + "'", double9 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 2168.222222222222d + "'", double27 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 2168.222222222222d + "'", double39 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 16.566666666666663d + "'", double50 == 16.566666666666663d);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 2168.222222222222d + "'", double60 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 16.566666666666663d + "'", double71 == 16.566666666666663d);
        org.junit.Assert.assertTrue(Double.isNaN(double74));
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 16.566666666418314d + "'", double76 == 16.566666666418314d);
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 16.566666666666663d + "'", double77 == 16.566666666666663d);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
    }

    @Test
    public void test0244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0244");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray8 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double9 = variance1.evaluate(doubleArray8);
        variance1.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance13 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray20 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double21 = variance13.evaluate(doubleArray20);
        variance13.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance25 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray32 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double33 = variance25.evaluate(doubleArray32);
        variance25.setBiasCorrected(true);
        boolean boolean36 = variance25.isBiasCorrected();
        double[] doubleArray43 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double44 = variance25.evaluate(doubleArray43);
        double double47 = variance13.evaluate(doubleArray43, (int) (byte) 1, (int) (byte) 0);
        variance1.incrementAll(doubleArray43, (int) (byte) 1, 1);
        java.lang.Object obj51 = null;
        boolean boolean52 = variance1.equals(obj51);
        long long53 = variance1.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance55 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray62 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double63 = variance55.evaluate(doubleArray62);
        variance55.setBiasCorrected(true);
        boolean boolean66 = variance55.isBiasCorrected();
        double[] doubleArray73 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double74 = variance55.evaluate(doubleArray73);
        org.apache.commons.math.stat.descriptive.moment.Variance variance76 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray83 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double84 = variance76.evaluate(doubleArray83);
        variance76.setBiasCorrected(true);
        boolean boolean87 = variance76.isBiasCorrected();
        double[] doubleArray94 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double95 = variance76.evaluate(doubleArray94);
        double double98 = variance55.evaluate(doubleArray94, (int) (byte) 1, 0);
        variance1.incrementAll(doubleArray94);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 2168.222222222222d + "'", double9 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 2168.222222222222d + "'", double21 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 2168.222222222222d + "'", double33 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 16.566666666666663d + "'", double44 == 16.566666666666663d);
        org.junit.Assert.assertTrue(Double.isNaN(double47));
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 1L + "'", long53 == 1L);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 2168.222222222222d + "'", double63 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 16.566666666666663d + "'", double74 == 16.566666666666663d);
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 2168.222222222222d + "'", double84 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertNotNull(doubleArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray94), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double95 + "' != '" + 16.566666666666663d + "'", double95 == 16.566666666666663d);
        org.junit.Assert.assertTrue(Double.isNaN(double98));
    }

    @Test
    public void test0245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0245");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray8 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double9 = variance1.evaluate(doubleArray8);
        variance1.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance13 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        variance13.clear();
        double double15 = variance13.getResult();
        double[] doubleArray20 = new double[] { (-1), 2168.222222222222d, 16.566666666418314d, 10.0d };
        variance13.incrementAll(doubleArray20);
        variance1.incrementAll(doubleArray20);
        java.lang.Class<?> wildcardClass23 = variance1.getClass();
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 2168.222222222222d + "'", double9 == 2168.222222222222d);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-1.0, 2168.222222222222, 16.566666666418314, 10.0]");
        org.junit.Assert.assertNotNull(wildcardClass23);
    }

    @Test
    public void test0246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0246");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment(16.566666666418314d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance5 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray12 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double13 = variance5.evaluate(doubleArray12);
        variance5.setBiasCorrected(true);
        boolean boolean16 = variance5.isBiasCorrected();
        double[] doubleArray23 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double24 = variance5.evaluate(doubleArray23);
        boolean boolean26 = variance5.equals((java.lang.Object) 10.0d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance28 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray35 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double36 = variance28.evaluate(doubleArray35);
        variance28.setBiasCorrected(true);
        boolean boolean39 = variance28.isBiasCorrected();
        double[] doubleArray46 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double47 = variance28.evaluate(doubleArray46);
        double double49 = variance5.evaluate(doubleArray46, (double) 0.0f);
        // The following exception was thrown during execution in test generation
        try {
            double double53 = variance1.evaluate(doubleArray46, 0.0d, (int) (byte) 10, (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 2168.222222222222d + "'", double13 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 16.566666666666663d + "'", double24 == 16.566666666666663d);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 2168.222222222222d + "'", double36 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 16.566666666666663d + "'", double47 == 16.566666666666663d);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 16.566666666666666d + "'", double49 == 16.566666666666666d);
    }

    @Test
    public void test0247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0247");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = null;
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment1);
        double[] doubleArray3 = new double[] {};
        double double6 = variance2.evaluate(doubleArray3, 0, 0);
        boolean boolean8 = variance2.equals((java.lang.Object) 10.0f);
        boolean boolean9 = variance2.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.Variance variance11 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance13 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray20 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double21 = variance13.evaluate(doubleArray20);
        variance13.setBiasCorrected(true);
        long long24 = variance13.getN();
        long long25 = variance13.getN();
        double double26 = variance13.getResult();
        variance13.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance29 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray36 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double37 = variance29.evaluate(doubleArray36);
        double[] doubleArray41 = new double[] { (byte) 1, (byte) 100, 1L };
        double double42 = variance29.evaluate(doubleArray41);
        org.apache.commons.math.stat.descriptive.moment.Variance variance44 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray51 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double52 = variance44.evaluate(doubleArray51);
        variance44.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance56 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray63 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double64 = variance56.evaluate(doubleArray63);
        variance44.incrementAll(doubleArray63);
        variance29.incrementAll(doubleArray63);
        double double67 = variance13.evaluate(doubleArray63);
        variance11.incrementAll(doubleArray63);
        // The following exception was thrown during execution in test generation
        try {
            variance2.incrementAll(doubleArray63, (int) ' ', (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 2168.222222222222d + "'", double21 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 2168.222222222222d + "'", double37 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, 100.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 2178.0d + "'", double42 == 2178.0d);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 2168.222222222222d + "'", double52 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 2168.222222222222d + "'", double64 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 2601.866666666667d + "'", double67 == 2601.866666666667d);
    }

    @Test
    public void test0248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0248");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        variance1.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance4 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray11 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double12 = variance4.evaluate(doubleArray11);
        variance4.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance15 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray22 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double23 = variance15.evaluate(doubleArray22);
        variance15.setBiasCorrected(true);
        boolean boolean26 = variance15.isBiasCorrected();
        double[] doubleArray33 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double34 = variance15.evaluate(doubleArray33);
        double double35 = variance15.getResult();
        long long36 = variance15.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance38 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray45 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double46 = variance38.evaluate(doubleArray45);
        variance38.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance50 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray57 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double58 = variance50.evaluate(doubleArray57);
        variance50.setBiasCorrected(true);
        boolean boolean61 = variance50.isBiasCorrected();
        double[] doubleArray68 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double69 = variance50.evaluate(doubleArray68);
        org.apache.commons.math.stat.descriptive.moment.Variance variance71 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray78 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double79 = variance71.evaluate(doubleArray78);
        variance71.setBiasCorrected(true);
        boolean boolean82 = variance71.isBiasCorrected();
        double[] doubleArray89 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double90 = variance71.evaluate(doubleArray89);
        double double93 = variance50.evaluate(doubleArray89, (int) (byte) 1, 0);
        double double95 = variance38.evaluate(doubleArray89, 2178.0d);
        variance15.incrementAll(doubleArray89);
        double double97 = variance4.evaluate(doubleArray89);
        variance1.incrementAll(doubleArray89);
        double double99 = variance1.getResult();
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 2168.222222222222d + "'", double12 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 2168.222222222222d + "'", double23 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 16.566666666666663d + "'", double34 == 16.566666666666663d);
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 2168.222222222222d + "'", double46 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 2168.222222222222d + "'", double58 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 16.566666666666663d + "'", double69 == 16.566666666666663d);
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 2168.222222222222d + "'", double79 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray89), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + 16.566666666666663d + "'", double90 == 16.566666666666663d);
        org.junit.Assert.assertTrue(Double.isNaN(double93));
        org.junit.Assert.assertTrue("'" + double95 + "' != '" + 16.566666666418314d + "'", double95 == 16.566666666418314d);
        org.junit.Assert.assertTrue("'" + double97 + "' != '" + 13.805555555555552d + "'", double97 == 13.805555555555552d);
        org.junit.Assert.assertTrue("'" + double99 + "' != '" + 13.805555555555557d + "'", double99 == 13.805555555555557d);
    }

    @Test
    public void test0249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0249");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = null;
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment1);
        variance2.clear();
        variance2.setBiasCorrected(false);
        boolean boolean6 = variance2.isBiasCorrected();
        // The following exception was thrown during execution in test generation
        try {
            long long7 = variance2.getN();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test0250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0250");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = null;
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment1);
        double[] doubleArray3 = new double[] {};
        double double6 = variance2.evaluate(doubleArray3, 0, 0);
        variance2.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance10 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        variance10.clear();
        double double12 = variance10.getResult();
        double[] doubleArray17 = new double[] { (-1), 2168.222222222222d, 16.566666666418314d, 10.0d };
        variance10.incrementAll(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Variance variance20 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray27 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double28 = variance20.evaluate(doubleArray27);
        variance20.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance32 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray39 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double40 = variance32.evaluate(doubleArray39);
        variance20.incrementAll(doubleArray39);
        variance20.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance44 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray51 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double52 = variance44.evaluate(doubleArray51);
        double[] doubleArray56 = new double[] { (byte) 1, (byte) 100, 1L };
        double double57 = variance44.evaluate(doubleArray56);
        variance20.incrementAll(doubleArray56, (int) (byte) 0, (int) (byte) 1);
        double double64 = variance10.evaluate(doubleArray56, (double) 'a', (int) (short) 1, (int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            double double67 = variance2.evaluate(doubleArray56, (int) (short) 100, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[-1.0, 2168.222222222222, 16.566666666418314, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 2168.222222222222d + "'", double28 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 2168.222222222222d + "'", double40 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 2168.222222222222d + "'", double52 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0, 100.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 2178.0d + "'", double57 == 2178.0d);
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 0.0d + "'", double64 == 0.0d);
    }

    @Test
    public void test0251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0251");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray8 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double9 = variance1.evaluate(doubleArray8);
        variance1.setBiasCorrected(true);
        long long12 = variance1.getN();
        long long13 = variance1.getN();
        boolean boolean15 = variance1.equals((java.lang.Object) 16.566666666666663d);
        boolean boolean17 = variance1.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance19 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray26 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double27 = variance19.evaluate(doubleArray26);
        variance19.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance31 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray38 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double39 = variance31.evaluate(doubleArray38);
        variance31.setBiasCorrected(true);
        boolean boolean42 = variance31.isBiasCorrected();
        double[] doubleArray49 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double50 = variance31.evaluate(doubleArray49);
        org.apache.commons.math.stat.descriptive.moment.Variance variance52 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray59 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double60 = variance52.evaluate(doubleArray59);
        variance52.setBiasCorrected(true);
        boolean boolean63 = variance52.isBiasCorrected();
        double[] doubleArray70 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double71 = variance52.evaluate(doubleArray70);
        double double74 = variance31.evaluate(doubleArray70, (int) (byte) 1, 0);
        double double76 = variance19.evaluate(doubleArray70, 2178.0d);
        double double77 = variance1.evaluate(doubleArray70);
        java.lang.Class<?> wildcardClass78 = variance1.getClass();
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 2168.222222222222d + "'", double9 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 2168.222222222222d + "'", double27 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 2168.222222222222d + "'", double39 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 16.566666666666663d + "'", double50 == 16.566666666666663d);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 2168.222222222222d + "'", double60 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 16.566666666666663d + "'", double71 == 16.566666666666663d);
        org.junit.Assert.assertTrue(Double.isNaN(double74));
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 16.566666666418314d + "'", double76 == 16.566666666418314d);
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 16.566666666666663d + "'", double77 == 16.566666666666663d);
        org.junit.Assert.assertNotNull(wildcardClass78);
    }

    @Test
    public void test0252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0252");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray8 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double9 = variance1.evaluate(doubleArray8);
        long long10 = variance1.getN();
        variance1.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance13 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray20 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double21 = variance13.evaluate(doubleArray20);
        variance13.setBiasCorrected(true);
        boolean boolean24 = variance13.isBiasCorrected();
        double[] doubleArray31 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double32 = variance13.evaluate(doubleArray31);
        double double33 = variance13.getResult();
        variance13.setBiasCorrected(true);
        long long36 = variance13.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance38 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray45 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double46 = variance38.evaluate(doubleArray45);
        variance38.setBiasCorrected(true);
        boolean boolean49 = variance38.isBiasCorrected();
        double[] doubleArray56 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double57 = variance38.evaluate(doubleArray56);
        boolean boolean59 = variance38.equals((java.lang.Object) 10.0d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance61 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray68 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double69 = variance61.evaluate(doubleArray68);
        variance61.setBiasCorrected(true);
        boolean boolean72 = variance61.isBiasCorrected();
        double[] doubleArray79 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double80 = variance61.evaluate(doubleArray79);
        double double82 = variance38.evaluate(doubleArray79, (double) 0.0f);
        variance13.incrementAll(doubleArray79);
        double double85 = variance1.evaluate(doubleArray79, (double) ' ');
        boolean boolean86 = variance1.isBiasCorrected();
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 2168.222222222222d + "'", double9 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 2168.222222222222d + "'", double21 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 16.566666666666663d + "'", double32 == 16.566666666666663d);
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 2168.222222222222d + "'", double46 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 16.566666666666663d + "'", double57 == 16.566666666666663d);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 2168.222222222222d + "'", double69 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 16.566666666666663d + "'", double80 == 16.566666666666663d);
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 16.566666666666666d + "'", double82 == 16.566666666666666d);
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 13.805555555555506d + "'", double85 == 13.805555555555506d);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
    }

    @Test
    public void test0253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0253");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray8 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double9 = variance1.evaluate(doubleArray8);
        variance1.setBiasCorrected(true);
        boolean boolean12 = variance1.isBiasCorrected();
        double[] doubleArray19 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double20 = variance1.evaluate(doubleArray19);
        boolean boolean22 = variance1.equals((java.lang.Object) 10.0d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance24 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray31 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double32 = variance24.evaluate(doubleArray31);
        variance24.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance36 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray43 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double44 = variance36.evaluate(doubleArray43);
        variance24.incrementAll(doubleArray43);
        variance24.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance48 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray55 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double56 = variance48.evaluate(doubleArray55);
        variance48.setBiasCorrected(true);
        boolean boolean59 = variance48.isBiasCorrected();
        double[] doubleArray66 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double67 = variance48.evaluate(doubleArray66);
        boolean boolean69 = variance48.equals((java.lang.Object) 10.0d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance71 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray78 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double79 = variance71.evaluate(doubleArray78);
        variance71.setBiasCorrected(true);
        boolean boolean82 = variance71.isBiasCorrected();
        double[] doubleArray89 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double90 = variance71.evaluate(doubleArray89);
        double double92 = variance48.evaluate(doubleArray89, (double) 0.0f);
        variance24.incrementAll(doubleArray89);
        // The following exception was thrown during execution in test generation
        try {
            variance1.incrementAll(doubleArray89, (int) (short) 0, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 2168.222222222222d + "'", double9 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 16.566666666666663d + "'", double20 == 16.566666666666663d);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 2168.222222222222d + "'", double32 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 2168.222222222222d + "'", double44 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 2168.222222222222d + "'", double56 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 16.566666666666663d + "'", double67 == 16.566666666666663d);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 2168.222222222222d + "'", double79 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray89), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + 16.566666666666663d + "'", double90 == 16.566666666666663d);
        org.junit.Assert.assertTrue("'" + double92 + "' != '" + 16.566666666666666d + "'", double92 == 16.566666666666666d);
    }

    @Test
    public void test0254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0254");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray8 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double9 = variance1.evaluate(doubleArray8);
        variance1.clear();
        variance1.setBiasCorrected(false);
        variance1.clear();
        boolean boolean15 = variance1.equals((java.lang.Object) 10.0d);
        boolean boolean16 = variance1.isBiasCorrected();
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 2168.222222222222d + "'", double9 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test0255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0255");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray8 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double9 = variance1.evaluate(doubleArray8);
        variance1.setBiasCorrected(true);
        boolean boolean12 = variance1.isBiasCorrected();
        double[] doubleArray19 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double20 = variance1.evaluate(doubleArray19);
        double double21 = variance1.getResult();
        long long22 = variance1.getN();
        variance1.increment((double) '#');
        variance1.setBiasCorrected(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance28 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray35 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double36 = variance28.evaluate(doubleArray35);
        variance28.setBiasCorrected(true);
        variance28.increment((double) (byte) 0);
        double[] doubleArray43 = new double[] { 'a', 100L };
        double double45 = variance28.evaluate(doubleArray43, 0.0d);
        variance1.incrementAll(doubleArray43);
        java.lang.Class<?> wildcardClass47 = variance1.getClass();
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 2168.222222222222d + "'", double9 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 16.566666666666663d + "'", double20 == 16.566666666666663d);
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 2168.222222222222d + "'", double36 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[97.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 4.5d + "'", double45 == 4.5d);
        org.junit.Assert.assertNotNull(wildcardClass47);
    }

    @Test
    public void test0256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0256");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray8 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double9 = variance1.evaluate(doubleArray8);
        variance1.setBiasCorrected(true);
        boolean boolean12 = variance1.isBiasCorrected();
        double double13 = variance1.getResult();
        double double14 = variance1.getResult();
        boolean boolean15 = variance1.isBiasCorrected();
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 2168.222222222222d + "'", double9 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
    }

    @Test
    public void test0257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0257");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = null;
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment1);
        variance2.increment(0.0d);
        variance2.clear();
        variance2.setBiasCorrected(true);
        variance2.clear();
        java.lang.Class<?> wildcardClass9 = variance2.getClass();
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test0258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0258");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = null;
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        variance2.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance6 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray13 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double14 = variance6.evaluate(doubleArray13);
        variance6.setBiasCorrected(true);
        boolean boolean17 = variance6.isBiasCorrected();
        double[] doubleArray24 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double25 = variance6.evaluate(doubleArray24);
        org.apache.commons.math.stat.descriptive.moment.Variance variance27 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray34 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double35 = variance27.evaluate(doubleArray34);
        variance27.setBiasCorrected(true);
        boolean boolean38 = variance27.isBiasCorrected();
        double[] doubleArray45 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double46 = variance27.evaluate(doubleArray45);
        double double49 = variance6.evaluate(doubleArray45, (int) (byte) 1, 0);
        double double50 = variance6.getResult();
        variance6.setBiasCorrected(true);
        boolean boolean53 = variance6.isBiasCorrected();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean54 = variance2.equals((java.lang.Object) variance6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 2168.222222222222d + "'", double14 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 16.566666666666663d + "'", double25 == 16.566666666666663d);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 2168.222222222222d + "'", double35 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 16.566666666666663d + "'", double46 == 16.566666666666663d);
        org.junit.Assert.assertTrue(Double.isNaN(double49));
        org.junit.Assert.assertTrue(Double.isNaN(double50));
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
    }

    @Test
    public void test0259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0259");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray8 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double9 = variance1.evaluate(doubleArray8);
        variance1.setBiasCorrected(true);
        boolean boolean12 = variance1.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray21 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double22 = variance14.evaluate(doubleArray21);
        variance14.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance26 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray33 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double34 = variance26.evaluate(doubleArray33);
        variance26.setBiasCorrected(true);
        boolean boolean37 = variance26.isBiasCorrected();
        double[] doubleArray44 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double45 = variance26.evaluate(doubleArray44);
        double double48 = variance14.evaluate(doubleArray44, (int) (byte) 1, (int) (byte) 0);
        double double51 = variance1.evaluate(doubleArray44, (int) (byte) 1, 0);
        variance1.setBiasCorrected(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance55 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray62 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double63 = variance55.evaluate(doubleArray62);
        variance55.setBiasCorrected(true);
        boolean boolean66 = variance55.isBiasCorrected();
        double[] doubleArray73 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double74 = variance55.evaluate(doubleArray73);
        double double75 = variance55.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance77 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        variance77.clear();
        double double79 = variance77.getResult();
        double[] doubleArray84 = new double[] { (-1), 2168.222222222222d, 16.566666666418314d, 10.0d };
        variance77.incrementAll(doubleArray84);
        double double86 = variance55.evaluate(doubleArray84);
        boolean boolean87 = variance1.equals((java.lang.Object) variance55);
        long long88 = variance1.getN();
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 2168.222222222222d + "'", double9 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 2168.222222222222d + "'", double22 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 2168.222222222222d + "'", double34 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 16.566666666666663d + "'", double45 == 16.566666666666663d);
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertTrue(Double.isNaN(double51));
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 2168.222222222222d + "'", double63 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 16.566666666666663d + "'", double74 == 16.566666666666663d);
        org.junit.Assert.assertTrue(Double.isNaN(double75));
        org.junit.Assert.assertTrue(Double.isNaN(double79));
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[-1.0, 2168.222222222222, 16.566666666418314, 10.0]");
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 1166128.5457099646d + "'", double86 == 1166128.5457099646d);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertTrue("'" + long88 + "' != '" + 0L + "'", long88 == 0L);
    }

    @Test
    public void test0260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0260");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray8 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double9 = variance1.evaluate(doubleArray8);
        long long10 = variance1.getN();
        variance1.increment(874596.4092824734d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        variance14.clear();
        double double16 = variance14.getResult();
        double[] doubleArray21 = new double[] { (-1), 2168.222222222222d, 16.566666666418314d, 10.0d };
        variance14.incrementAll(doubleArray21);
        variance1.incrementAll(doubleArray21, 0, (int) (byte) 1);
        org.apache.commons.math.stat.descriptive.moment.Variance variance27 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray34 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double35 = variance27.evaluate(doubleArray34);
        variance27.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance39 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray46 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double47 = variance39.evaluate(doubleArray46);
        variance39.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance51 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray58 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double59 = variance51.evaluate(doubleArray58);
        variance51.setBiasCorrected(true);
        boolean boolean62 = variance51.isBiasCorrected();
        double[] doubleArray69 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double70 = variance51.evaluate(doubleArray69);
        double double73 = variance39.evaluate(doubleArray69, (int) (byte) 1, (int) (byte) 0);
        variance27.incrementAll(doubleArray69, (int) (byte) 1, 1);
        // The following exception was thrown during execution in test generation
        try {
            variance1.incrementAll(doubleArray69, (int) '#', (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 2168.222222222222d + "'", double9 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[-1.0, 2168.222222222222, 16.566666666418314, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 2168.222222222222d + "'", double35 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 2168.222222222222d + "'", double47 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 2168.222222222222d + "'", double59 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 16.566666666666663d + "'", double70 == 16.566666666666663d);
        org.junit.Assert.assertTrue(Double.isNaN(double73));
    }

    @Test
    public void test0261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0261");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance3 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray10 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double11 = variance3.evaluate(doubleArray10);
        variance3.setBiasCorrected(true);
        long long14 = variance3.getN();
        long long15 = variance3.getN();
        boolean boolean17 = variance3.equals((java.lang.Object) 16.566666666666663d);
        boolean boolean19 = variance3.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance21 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray28 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double29 = variance21.evaluate(doubleArray28);
        variance21.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance33 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray40 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double41 = variance33.evaluate(doubleArray40);
        variance21.incrementAll(doubleArray40);
        double double43 = variance3.evaluate(doubleArray40);
        // The following exception was thrown during execution in test generation
        try {
            double double47 = variance1.evaluate(doubleArray40, 13.80555555555562d, (int) 'a', (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: length cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 2168.222222222222d + "'", double11 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 2168.222222222222d + "'", double29 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 2168.222222222222d + "'", double41 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 2601.866666666667d + "'", double43 == 2601.866666666667d);
    }

    @Test
    public void test0262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0262");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        variance1.clear();
        double double3 = variance1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance5 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray12 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double13 = variance5.evaluate(doubleArray12);
        variance5.setBiasCorrected(true);
        boolean boolean16 = variance5.isBiasCorrected();
        double[] doubleArray23 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double24 = variance5.evaluate(doubleArray23);
        double double25 = variance5.getResult();
        variance5.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance29 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray36 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double37 = variance29.evaluate(doubleArray36);
        variance29.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance41 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray48 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double49 = variance41.evaluate(doubleArray48);
        variance41.setBiasCorrected(true);
        boolean boolean52 = variance41.isBiasCorrected();
        double[] doubleArray59 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double60 = variance41.evaluate(doubleArray59);
        org.apache.commons.math.stat.descriptive.moment.Variance variance62 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray69 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double70 = variance62.evaluate(doubleArray69);
        variance62.setBiasCorrected(true);
        boolean boolean73 = variance62.isBiasCorrected();
        double[] doubleArray80 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double81 = variance62.evaluate(doubleArray80);
        double double84 = variance41.evaluate(doubleArray80, (int) (byte) 1, 0);
        double double86 = variance29.evaluate(doubleArray80, 2178.0d);
        boolean boolean87 = variance5.equals((java.lang.Object) doubleArray80);
        double double89 = variance1.evaluate(doubleArray80, (double) '#');
        long long90 = variance1.getN();
        java.lang.Class<?> wildcardClass91 = variance1.getClass();
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 2168.222222222222d + "'", double13 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 16.566666666666663d + "'", double24 == 16.566666666666663d);
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 2168.222222222222d + "'", double37 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 2168.222222222222d + "'", double49 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 16.566666666666663d + "'", double60 == 16.566666666666663d);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 2168.222222222222d + "'", double70 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 16.566666666666663d + "'", double81 == 16.566666666666663d);
        org.junit.Assert.assertTrue(Double.isNaN(double84));
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 16.566666666418314d + "'", double86 == 16.566666666418314d);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + 13.805555555555506d + "'", double89 == 13.805555555555506d);
        org.junit.Assert.assertTrue("'" + long90 + "' != '" + 0L + "'", long90 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass91);
    }

    @Test
    public void test0263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0263");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double2 = variance1.getResult();
        double double3 = variance1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance5 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray12 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double13 = variance5.evaluate(doubleArray12);
        variance5.clear();
        variance5.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance18 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        variance18.clear();
        double double20 = variance18.getResult();
        double[] doubleArray25 = new double[] { (-1), 2168.222222222222d, 16.566666666418314d, 10.0d };
        variance18.incrementAll(doubleArray25);
        boolean boolean27 = variance5.equals((java.lang.Object) doubleArray25);
        double double29 = variance1.evaluate(doubleArray25, (double) (-1.0f));
        org.apache.commons.math.stat.descriptive.moment.Variance variance31 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray38 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double39 = variance31.evaluate(doubleArray38);
        variance31.setBiasCorrected(true);
        boolean boolean42 = variance31.isBiasCorrected();
        double[] doubleArray49 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double50 = variance31.evaluate(doubleArray49);
        double double52 = variance1.evaluate(doubleArray49, (double) (short) 1);
        java.lang.Class<?> wildcardClass53 = variance1.getClass();
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 2168.222222222222d + "'", double13 == 2168.222222222222d);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[-1.0, 2168.222222222222, 16.566666666418314, 10.0]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 1166128.5457099646d + "'", double29 == 1166128.5457099646d);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 2168.222222222222d + "'", double39 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 16.566666666666663d + "'", double50 == 16.566666666666663d);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 16.566666666666666d + "'", double52 == 16.566666666666666d);
        org.junit.Assert.assertNotNull(wildcardClass53);
    }

    @Test
    public void test0264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0264");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray8 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double9 = variance1.evaluate(doubleArray8);
        variance1.setBiasCorrected(true);
        boolean boolean12 = variance1.isBiasCorrected();
        double[] doubleArray19 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double20 = variance1.evaluate(doubleArray19);
        double double21 = variance1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance23 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        variance23.clear();
        double double25 = variance23.getResult();
        double[] doubleArray30 = new double[] { (-1), 2168.222222222222d, 16.566666666418314d, 10.0d };
        variance23.incrementAll(doubleArray30);
        double double32 = variance1.evaluate(doubleArray30);
        boolean boolean33 = variance1.isBiasCorrected();
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 2168.222222222222d + "'", double9 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 16.566666666666663d + "'", double20 == 16.566666666666663d);
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[-1.0, 2168.222222222222, 16.566666666418314, 10.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 1166128.5457099646d + "'", double32 == 1166128.5457099646d);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
    }

    @Test
    public void test0265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0265");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray8 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double9 = variance1.evaluate(doubleArray8);
        variance1.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance13 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        variance13.clear();
        double double15 = variance13.getResult();
        double[] doubleArray20 = new double[] { (-1), 2168.222222222222d, 16.566666666418314d, 10.0d };
        variance13.incrementAll(doubleArray20);
        variance1.incrementAll(doubleArray20);
        java.lang.Class<?> wildcardClass23 = doubleArray20.getClass();
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 2168.222222222222d + "'", double9 == 2168.222222222222d);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-1.0, 2168.222222222222, 16.566666666418314, 10.0]");
        org.junit.Assert.assertNotNull(wildcardClass23);
    }

    @Test
    public void test0266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0266");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray8 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double9 = variance1.evaluate(doubleArray8);
        variance1.setBiasCorrected(true);
        boolean boolean12 = variance1.isBiasCorrected();
        double[] doubleArray19 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double20 = variance1.evaluate(doubleArray19);
        org.apache.commons.math.stat.descriptive.moment.Variance variance22 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray29 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double30 = variance22.evaluate(doubleArray29);
        variance22.setBiasCorrected(true);
        boolean boolean33 = variance22.isBiasCorrected();
        double[] doubleArray40 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double41 = variance22.evaluate(doubleArray40);
        double double44 = variance1.evaluate(doubleArray40, (int) (byte) 1, 0);
        variance1.setBiasCorrected(true);
        variance1.setBiasCorrected(true);
        double double49 = variance1.getResult();
        double double50 = variance1.getResult();
        variance1.setBiasCorrected(true);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 2168.222222222222d + "'", double9 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 16.566666666666663d + "'", double20 == 16.566666666666663d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 2168.222222222222d + "'", double30 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 16.566666666666663d + "'", double41 == 16.566666666666663d);
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertTrue(Double.isNaN(double49));
        org.junit.Assert.assertTrue(Double.isNaN(double50));
    }

    @Test
    public void test0267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0267");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double2 = variance1.getResult();
        boolean boolean3 = variance1.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.Variance variance5 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray12 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double13 = variance5.evaluate(doubleArray12);
        variance5.setBiasCorrected(true);
        long long16 = variance5.getN();
        long long17 = variance5.getN();
        boolean boolean19 = variance5.equals((java.lang.Object) 16.566666666666663d);
        boolean boolean21 = variance5.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance23 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray30 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double31 = variance23.evaluate(doubleArray30);
        variance23.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance35 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray42 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double43 = variance35.evaluate(doubleArray42);
        variance35.setBiasCorrected(true);
        boolean boolean46 = variance35.isBiasCorrected();
        double[] doubleArray53 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double54 = variance35.evaluate(doubleArray53);
        org.apache.commons.math.stat.descriptive.moment.Variance variance56 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray63 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double64 = variance56.evaluate(doubleArray63);
        variance56.setBiasCorrected(true);
        boolean boolean67 = variance56.isBiasCorrected();
        double[] doubleArray74 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double75 = variance56.evaluate(doubleArray74);
        double double78 = variance35.evaluate(doubleArray74, (int) (byte) 1, 0);
        double double80 = variance23.evaluate(doubleArray74, 2178.0d);
        double double81 = variance5.evaluate(doubleArray74);
        boolean boolean83 = variance5.equals((java.lang.Object) (short) 100);
        boolean boolean84 = variance1.equals((java.lang.Object) variance5);
        variance1.setBiasCorrected(false);
        variance1.clear();
        double double88 = variance1.getResult();
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 2168.222222222222d + "'", double13 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 2168.222222222222d + "'", double31 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 2168.222222222222d + "'", double43 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 16.566666666666663d + "'", double54 == 16.566666666666663d);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 2168.222222222222d + "'", double64 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 16.566666666666663d + "'", double75 == 16.566666666666663d);
        org.junit.Assert.assertTrue(Double.isNaN(double78));
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 16.566666666418314d + "'", double80 == 16.566666666418314d);
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 16.566666666666663d + "'", double81 == 16.566666666666663d);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double88));
    }

    @Test
    public void test0268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0268");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray8 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double9 = variance1.evaluate(doubleArray8);
        variance1.clear();
        java.lang.Object obj11 = null;
        boolean boolean12 = variance1.equals(obj11);
        boolean boolean13 = variance1.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.Variance variance15 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double16 = variance15.getResult();
        double double17 = variance15.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance19 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray26 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double27 = variance19.evaluate(doubleArray26);
        variance19.clear();
        variance19.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance32 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        variance32.clear();
        double double34 = variance32.getResult();
        double[] doubleArray39 = new double[] { (-1), 2168.222222222222d, 16.566666666418314d, 10.0d };
        variance32.incrementAll(doubleArray39);
        boolean boolean41 = variance19.equals((java.lang.Object) doubleArray39);
        double double43 = variance15.evaluate(doubleArray39, (double) (-1.0f));
        org.apache.commons.math.stat.descriptive.moment.Variance variance45 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray52 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double53 = variance45.evaluate(doubleArray52);
        variance45.setBiasCorrected(true);
        boolean boolean56 = variance45.isBiasCorrected();
        double[] doubleArray63 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double64 = variance45.evaluate(doubleArray63);
        double double66 = variance15.evaluate(doubleArray63, (double) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            double double70 = variance1.evaluate(doubleArray63, (double) (byte) 10, 1, 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 2168.222222222222d + "'", double9 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 2168.222222222222d + "'", double27 == 2168.222222222222d);
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[-1.0, 2168.222222222222, 16.566666666418314, 10.0]");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 1166128.5457099646d + "'", double43 == 1166128.5457099646d);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 2168.222222222222d + "'", double53 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 16.566666666666663d + "'", double64 == 16.566666666666663d);
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 16.566666666666666d + "'", double66 == 16.566666666666666d);
    }

    @Test
    public void test0269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0269");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray8 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double9 = variance1.evaluate(doubleArray8);
        variance1.setBiasCorrected(true);
        boolean boolean12 = variance1.isBiasCorrected();
        double[] doubleArray19 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double20 = variance1.evaluate(doubleArray19);
        double double21 = variance1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance23 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray30 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double31 = variance23.evaluate(doubleArray30);
        variance23.setBiasCorrected(true);
        long long34 = variance23.getN();
        variance23.clear();
        double double36 = variance23.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance38 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray45 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double46 = variance38.evaluate(doubleArray45);
        variance38.setBiasCorrected(true);
        boolean boolean49 = variance38.isBiasCorrected();
        double[] doubleArray56 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double57 = variance38.evaluate(doubleArray56);
        boolean boolean59 = variance38.equals((java.lang.Object) 10.0d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance61 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray68 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double69 = variance61.evaluate(doubleArray68);
        variance61.setBiasCorrected(true);
        boolean boolean72 = variance61.isBiasCorrected();
        double[] doubleArray79 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double80 = variance61.evaluate(doubleArray79);
        double double82 = variance38.evaluate(doubleArray79, (double) 0.0f);
        variance23.incrementAll(doubleArray79);
        // The following exception was thrown during execution in test generation
        try {
            variance1.incrementAll(doubleArray79, (int) '#', 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 2168.222222222222d + "'", double9 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 16.566666666666663d + "'", double20 == 16.566666666666663d);
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 2168.222222222222d + "'", double31 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 2168.222222222222d + "'", double46 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 16.566666666666663d + "'", double57 == 16.566666666666663d);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 2168.222222222222d + "'", double69 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 16.566666666666663d + "'", double80 == 16.566666666666663d);
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 16.566666666666666d + "'", double82 == 16.566666666666666d);
    }

    @Test
    public void test0270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0270");
        org.apache.commons.math.stat.descriptive.moment.Variance variance0 = new org.apache.commons.math.stat.descriptive.moment.Variance();
        long long1 = variance0.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance3 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray10 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double11 = variance3.evaluate(doubleArray10);
        variance3.setBiasCorrected(true);
        long long14 = variance3.getN();
        boolean boolean15 = variance0.equals((java.lang.Object) long14);
        double double16 = variance0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance18 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray25 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double26 = variance18.evaluate(doubleArray25);
        variance18.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance30 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray37 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double38 = variance30.evaluate(doubleArray37);
        variance30.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance42 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray49 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double50 = variance42.evaluate(doubleArray49);
        variance42.setBiasCorrected(true);
        boolean boolean53 = variance42.isBiasCorrected();
        double[] doubleArray60 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double61 = variance42.evaluate(doubleArray60);
        double double64 = variance30.evaluate(doubleArray60, (int) (byte) 1, (int) (byte) 0);
        variance18.incrementAll(doubleArray60, (int) (byte) 1, 1);
        // The following exception was thrown during execution in test generation
        try {
            double double71 = variance0.evaluate(doubleArray60, 3267.0000000018626d, 100, (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 2168.222222222222d + "'", double11 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 2168.222222222222d + "'", double26 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 2168.222222222222d + "'", double38 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 2168.222222222222d + "'", double50 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 16.566666666666663d + "'", double61 == 16.566666666666663d);
        org.junit.Assert.assertTrue(Double.isNaN(double64));
    }

    @Test
    public void test0271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0271");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray8 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double9 = variance1.evaluate(doubleArray8);
        variance1.setBiasCorrected(true);
        boolean boolean12 = variance1.isBiasCorrected();
        double[] doubleArray19 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double20 = variance1.evaluate(doubleArray19);
        org.apache.commons.math.stat.descriptive.moment.Variance variance22 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray29 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double30 = variance22.evaluate(doubleArray29);
        variance22.setBiasCorrected(true);
        boolean boolean33 = variance22.isBiasCorrected();
        double[] doubleArray40 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double41 = variance22.evaluate(doubleArray40);
        double double44 = variance1.evaluate(doubleArray40, (int) (byte) 1, 0);
        variance1.setBiasCorrected(true);
        variance1.setBiasCorrected(true);
        variance1.setBiasCorrected(true);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 2168.222222222222d + "'", double9 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 16.566666666666663d + "'", double20 == 16.566666666666663d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 2168.222222222222d + "'", double30 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 16.566666666666663d + "'", double41 == 16.566666666666663d);
        org.junit.Assert.assertTrue(Double.isNaN(double44));
    }

    @Test
    public void test0272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0272");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray8 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double9 = variance1.evaluate(doubleArray8);
        variance1.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance13 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray20 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double21 = variance13.evaluate(doubleArray20);
        variance1.incrementAll(doubleArray20);
        variance1.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance25 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray32 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double33 = variance25.evaluate(doubleArray32);
        variance25.setBiasCorrected(true);
        boolean boolean36 = variance25.isBiasCorrected();
        double[] doubleArray43 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double44 = variance25.evaluate(doubleArray43);
        boolean boolean46 = variance25.equals((java.lang.Object) 10.0d);
        boolean boolean47 = variance25.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.Variance variance49 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        boolean boolean50 = variance25.equals((java.lang.Object) false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance52 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray59 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double60 = variance52.evaluate(doubleArray59);
        variance52.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance64 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray71 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double72 = variance64.evaluate(doubleArray71);
        variance52.incrementAll(doubleArray71);
        double double75 = variance25.evaluate(doubleArray71, (double) 100.0f);
        long long76 = variance25.getN();
        boolean boolean77 = variance1.equals((java.lang.Object) variance25);
        variance1.setBiasCorrected(true);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 2168.222222222222d + "'", double9 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 2168.222222222222d + "'", double21 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 2168.222222222222d + "'", double33 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 16.566666666666663d + "'", double44 == 16.566666666666663d);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 2168.222222222222d + "'", double60 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 2168.222222222222d + "'", double72 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 2601.8666666666663d + "'", double75 == 2601.8666666666663d);
        org.junit.Assert.assertTrue("'" + long76 + "' != '" + 0L + "'", long76 == 0L);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
    }

    @Test
    public void test0273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0273");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = null;
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment1);
        double[] doubleArray3 = new double[] {};
        double double6 = variance2.evaluate(doubleArray3, 0, 0);
        variance2.setBiasCorrected(true);
        variance2.increment((double) (byte) 0);
        variance2.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray21 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double22 = variance14.evaluate(doubleArray21);
        variance14.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance26 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray33 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double34 = variance26.evaluate(doubleArray33);
        variance26.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance38 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray45 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double46 = variance38.evaluate(doubleArray45);
        variance38.setBiasCorrected(true);
        boolean boolean49 = variance38.isBiasCorrected();
        double[] doubleArray56 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double57 = variance38.evaluate(doubleArray56);
        double double60 = variance26.evaluate(doubleArray56, (int) (byte) 1, (int) (byte) 0);
        variance14.incrementAll(doubleArray56, (int) (byte) 1, 1);
        // The following exception was thrown during execution in test generation
        try {
            double double66 = variance2.evaluate(doubleArray56, (int) (short) -1, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: start position cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 2168.222222222222d + "'", double22 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 2168.222222222222d + "'", double34 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 2168.222222222222d + "'", double46 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 16.566666666666663d + "'", double57 == 16.566666666666663d);
        org.junit.Assert.assertTrue(Double.isNaN(double60));
    }

    @Test
    public void test0274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0274");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = null;
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment1);
        double[] doubleArray3 = new double[] {};
        double double6 = variance2.evaluate(doubleArray3, 0, 0);
        boolean boolean8 = variance2.equals((java.lang.Object) 10.0f);
        boolean boolean9 = variance2.isBiasCorrected();
        boolean boolean10 = variance2.isBiasCorrected();
        variance2.increment(Double.NaN);
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray21 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double22 = variance14.evaluate(doubleArray21);
        variance14.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance26 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray33 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double34 = variance26.evaluate(doubleArray33);
        variance14.incrementAll(doubleArray33);
        variance14.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance38 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray45 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double46 = variance38.evaluate(doubleArray45);
        variance38.setBiasCorrected(true);
        boolean boolean49 = variance38.isBiasCorrected();
        double[] doubleArray56 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double57 = variance38.evaluate(doubleArray56);
        boolean boolean59 = variance38.equals((java.lang.Object) 10.0d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance61 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray68 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double69 = variance61.evaluate(doubleArray68);
        variance61.setBiasCorrected(true);
        boolean boolean72 = variance61.isBiasCorrected();
        double[] doubleArray79 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double80 = variance61.evaluate(doubleArray79);
        double double82 = variance38.evaluate(doubleArray79, (double) 0.0f);
        variance14.incrementAll(doubleArray79);
        // The following exception was thrown during execution in test generation
        try {
            double double87 = variance2.evaluate(doubleArray79, 2168.222222222222d, (int) (byte) 100, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 2168.222222222222d + "'", double22 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 2168.222222222222d + "'", double34 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 2168.222222222222d + "'", double46 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 16.566666666666663d + "'", double57 == 16.566666666666663d);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 2168.222222222222d + "'", double69 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 16.566666666666663d + "'", double80 == 16.566666666666663d);
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 16.566666666666666d + "'", double82 == 16.566666666666666d);
    }

    @Test
    public void test0275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0275");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        variance1.clear();
        double double3 = variance1.getResult();
        double[] doubleArray8 = new double[] { (-1), 2168.222222222222d, 16.566666666418314d, 10.0d };
        variance1.incrementAll(doubleArray8);
        org.apache.commons.math.stat.descriptive.moment.Variance variance11 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray18 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double19 = variance11.evaluate(doubleArray18);
        variance11.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance23 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray30 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double31 = variance23.evaluate(doubleArray30);
        variance11.incrementAll(doubleArray30);
        variance11.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance35 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray42 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double43 = variance35.evaluate(doubleArray42);
        double[] doubleArray47 = new double[] { (byte) 1, (byte) 100, 1L };
        double double48 = variance35.evaluate(doubleArray47);
        variance11.incrementAll(doubleArray47, (int) (byte) 0, (int) (byte) 1);
        double double55 = variance1.evaluate(doubleArray47, (double) 'a', (int) (short) 1, (int) (short) 1);
        boolean boolean56 = variance1.isBiasCorrected();
        double[] doubleArray57 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double58 = variance1.evaluate(doubleArray57);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: input values array is null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 2168.222222222222, 16.566666666418314, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 2168.222222222222d + "'", double19 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 2168.222222222222d + "'", double31 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 2168.222222222222d + "'", double43 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0, 100.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 2178.0d + "'", double48 == 2178.0d);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.0d + "'", double55 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
    }

    @Test
    public void test0276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0276");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = null;
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment1);
        double[] doubleArray3 = new double[] {};
        double double6 = variance2.evaluate(doubleArray3, 0, 0);
        variance2.setBiasCorrected(true);
        variance2.increment((double) (byte) 0);
        boolean boolean11 = variance2.isBiasCorrected();
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
    }

    @Test
    public void test0277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0277");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray8 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double9 = variance1.evaluate(doubleArray8);
        variance1.setBiasCorrected(true);
        boolean boolean12 = variance1.isBiasCorrected();
        double double13 = variance1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance15 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray22 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double23 = variance15.evaluate(doubleArray22);
        long long24 = variance15.getN();
        variance15.increment((double) (byte) 1);
        variance15.increment((double) 6L);
        variance15.increment(2178.0d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance31 = new org.apache.commons.math.stat.descriptive.moment.Variance();
        long long32 = variance31.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance34 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray41 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double42 = variance34.evaluate(doubleArray41);
        variance34.setBiasCorrected(true);
        boolean boolean45 = variance34.isBiasCorrected();
        double[] doubleArray52 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double53 = variance34.evaluate(doubleArray52);
        boolean boolean55 = variance34.equals((java.lang.Object) 10.0d);
        boolean boolean56 = variance34.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.Variance variance58 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        boolean boolean59 = variance34.equals((java.lang.Object) false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance61 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray68 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double69 = variance61.evaluate(doubleArray68);
        variance61.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance73 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray80 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double81 = variance73.evaluate(doubleArray80);
        variance61.incrementAll(doubleArray80);
        double double84 = variance34.evaluate(doubleArray80, (double) 100.0f);
        variance31.incrementAll(doubleArray80, (int) (short) 1, (int) (byte) 0);
        variance15.incrementAll(doubleArray80);
        // The following exception was thrown during execution in test generation
        try {
            double double92 = variance1.evaluate(doubleArray80, 13.80555555555562d, (int) 'a', (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 2168.222222222222d + "'", double9 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 2168.222222222222d + "'", double23 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 2168.222222222222d + "'", double42 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 16.566666666666663d + "'", double53 == 16.566666666666663d);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 2168.222222222222d + "'", double69 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 2168.222222222222d + "'", double81 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 2601.8666666666663d + "'", double84 == 2601.8666666666663d);
    }

    @Test
    public void test0278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0278");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance3 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray10 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double11 = variance3.evaluate(doubleArray10);
        variance3.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance15 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray22 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double23 = variance15.evaluate(doubleArray22);
        variance15.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance27 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray34 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double35 = variance27.evaluate(doubleArray34);
        variance27.setBiasCorrected(true);
        boolean boolean38 = variance27.isBiasCorrected();
        double[] doubleArray45 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double46 = variance27.evaluate(doubleArray45);
        double double49 = variance15.evaluate(doubleArray45, (int) (byte) 1, (int) (byte) 0);
        variance3.incrementAll(doubleArray45, (int) (byte) 1, 1);
        double double53 = variance1.evaluate(doubleArray45);
        org.apache.commons.math.stat.descriptive.moment.Variance variance55 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray62 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double63 = variance55.evaluate(doubleArray62);
        long long64 = variance55.getN();
        variance55.increment(874596.4092824734d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance68 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        variance68.clear();
        double double70 = variance68.getResult();
        double[] doubleArray75 = new double[] { (-1), 2168.222222222222d, 16.566666666418314d, 10.0d };
        variance68.incrementAll(doubleArray75);
        variance55.incrementAll(doubleArray75, 0, (int) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            double double82 = variance1.evaluate(doubleArray75, (int) (byte) 10, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 2168.222222222222d + "'", double11 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 2168.222222222222d + "'", double23 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 2168.222222222222d + "'", double35 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 16.566666666666663d + "'", double46 == 16.566666666666663d);
        org.junit.Assert.assertTrue(Double.isNaN(double49));
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 13.805555555555552d + "'", double53 == 13.805555555555552d);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 2168.222222222222d + "'", double63 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 0L + "'", long64 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double70));
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[-1.0, 2168.222222222222, 16.566666666418314, 10.0]");
    }

    @Test
    public void test0279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0279");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray8 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double9 = variance1.evaluate(doubleArray8);
        variance1.setBiasCorrected(true);
        boolean boolean12 = variance1.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray21 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double22 = variance14.evaluate(doubleArray21);
        variance14.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance26 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray33 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double34 = variance26.evaluate(doubleArray33);
        variance14.incrementAll(doubleArray33);
        variance14.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance38 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray45 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double46 = variance38.evaluate(doubleArray45);
        double[] doubleArray50 = new double[] { (byte) 1, (byte) 100, 1L };
        double double51 = variance38.evaluate(doubleArray50);
        variance14.incrementAll(doubleArray50, (int) (byte) 0, (int) (byte) 1);
        double double56 = variance1.evaluate(doubleArray50, (double) '4');
        boolean boolean57 = variance1.isBiasCorrected();
        boolean boolean58 = variance1.isBiasCorrected();
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 2168.222222222222d + "'", double9 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 2168.222222222222d + "'", double22 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 2168.222222222222d + "'", double34 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 2168.222222222222d + "'", double46 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0, 100.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 2178.0d + "'", double51 == 2178.0d);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 3267.0d + "'", double56 == 3267.0d);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
    }

    @Test
    public void test0280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0280");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray8 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double9 = variance1.evaluate(doubleArray8);
        variance1.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance13 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray20 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double21 = variance13.evaluate(doubleArray20);
        variance1.incrementAll(doubleArray20);
        variance1.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance25 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray32 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double33 = variance25.evaluate(doubleArray32);
        double[] doubleArray37 = new double[] { (byte) 1, (byte) 100, 1L };
        double double38 = variance25.evaluate(doubleArray37);
        variance1.incrementAll(doubleArray37, (int) (byte) 0, (int) (byte) 1);
        long long42 = variance1.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance44 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray51 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double52 = variance44.evaluate(doubleArray51);
        variance44.setBiasCorrected(true);
        boolean boolean55 = variance44.isBiasCorrected();
        double[] doubleArray62 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double63 = variance44.evaluate(doubleArray62);
        org.apache.commons.math.stat.descriptive.moment.Variance variance65 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray72 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double73 = variance65.evaluate(doubleArray72);
        variance65.setBiasCorrected(true);
        boolean boolean76 = variance65.isBiasCorrected();
        double[] doubleArray83 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double84 = variance65.evaluate(doubleArray83);
        double double87 = variance44.evaluate(doubleArray83, (int) (byte) 1, 0);
        double double88 = variance44.getResult();
        variance44.setBiasCorrected(true);
        boolean boolean91 = variance1.equals((java.lang.Object) variance44);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 2168.222222222222d + "'", double9 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 2168.222222222222d + "'", double21 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 2168.222222222222d + "'", double33 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0, 100.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 2178.0d + "'", double38 == 2178.0d);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 1L + "'", long42 == 1L);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 2168.222222222222d + "'", double52 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 16.566666666666663d + "'", double63 == 16.566666666666663d);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 2168.222222222222d + "'", double73 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 16.566666666666663d + "'", double84 == 16.566666666666663d);
        org.junit.Assert.assertTrue(Double.isNaN(double87));
        org.junit.Assert.assertTrue(Double.isNaN(double88));
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
    }

    @Test
    public void test0281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0281");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = null;
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        boolean boolean3 = variance2.isBiasCorrected();
        boolean boolean5 = variance2.equals((java.lang.Object) 13.80555555555562d);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test0282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0282");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray8 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double9 = variance1.evaluate(doubleArray8);
        variance1.setBiasCorrected(true);
        boolean boolean12 = variance1.isBiasCorrected();
        double[] doubleArray19 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double20 = variance1.evaluate(doubleArray19);
        boolean boolean22 = variance1.equals((java.lang.Object) 10.0d);
        boolean boolean23 = variance1.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.Variance variance25 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        boolean boolean26 = variance1.equals((java.lang.Object) false);
        variance1.increment(16.56666666666674d);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 2168.222222222222d + "'", double9 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 16.566666666666663d + "'", double20 == 16.566666666666663d);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test0283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0283");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        variance1.clear();
        double double3 = variance1.getResult();
        variance1.setBiasCorrected(true);
        variance1.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance8 = new org.apache.commons.math.stat.descriptive.moment.Variance();
        long long9 = variance8.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance11 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray18 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double19 = variance11.evaluate(doubleArray18);
        variance11.setBiasCorrected(true);
        boolean boolean22 = variance11.isBiasCorrected();
        double[] doubleArray29 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double30 = variance11.evaluate(doubleArray29);
        boolean boolean32 = variance11.equals((java.lang.Object) 10.0d);
        boolean boolean33 = variance11.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.Variance variance35 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        boolean boolean36 = variance11.equals((java.lang.Object) false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance38 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray45 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double46 = variance38.evaluate(doubleArray45);
        variance38.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance50 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray57 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double58 = variance50.evaluate(doubleArray57);
        variance38.incrementAll(doubleArray57);
        double double61 = variance11.evaluate(doubleArray57, (double) 100.0f);
        variance8.incrementAll(doubleArray57, (int) (short) 1, (int) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            variance1.incrementAll(doubleArray57, 10, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 2168.222222222222d + "'", double19 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 16.566666666666663d + "'", double30 == 16.566666666666663d);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 2168.222222222222d + "'", double46 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 2168.222222222222d + "'", double58 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 2601.8666666666663d + "'", double61 == 2601.8666666666663d);
    }

    @Test
    public void test0284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0284");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray8 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double9 = variance1.evaluate(doubleArray8);
        variance1.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance13 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray20 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double21 = variance13.evaluate(doubleArray20);
        variance1.incrementAll(doubleArray20);
        variance1.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance25 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray32 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double33 = variance25.evaluate(doubleArray32);
        double[] doubleArray37 = new double[] { (byte) 1, (byte) 100, 1L };
        double double38 = variance25.evaluate(doubleArray37);
        variance1.incrementAll(doubleArray37, (int) (byte) 0, (int) (byte) 1);
        double double42 = variance1.getResult();
        double double43 = variance1.getResult();
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 2168.222222222222d + "'", double9 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 2168.222222222222d + "'", double21 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 2168.222222222222d + "'", double33 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0, 100.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 2178.0d + "'", double38 == 2178.0d);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.0d + "'", double42 == 0.0d);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.0d + "'", double43 == 0.0d);
    }

    @Test
    public void test0285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0285");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray8 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double9 = variance1.evaluate(doubleArray8);
        variance1.setBiasCorrected(true);
        long long12 = variance1.getN();
        variance1.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance15 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray22 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double23 = variance15.evaluate(doubleArray22);
        double double24 = variance1.evaluate(doubleArray22);
        boolean boolean25 = variance1.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.Variance variance27 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance29 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray36 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double37 = variance29.evaluate(doubleArray36);
        variance29.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance41 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray48 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double49 = variance41.evaluate(doubleArray48);
        variance41.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance53 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray60 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double61 = variance53.evaluate(doubleArray60);
        variance53.setBiasCorrected(true);
        boolean boolean64 = variance53.isBiasCorrected();
        double[] doubleArray71 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double72 = variance53.evaluate(doubleArray71);
        double double75 = variance41.evaluate(doubleArray71, (int) (byte) 1, (int) (byte) 0);
        variance29.incrementAll(doubleArray71, (int) (byte) 1, 1);
        double double79 = variance27.evaluate(doubleArray71);
        // The following exception was thrown during execution in test generation
        try {
            double double83 = variance1.evaluate(doubleArray71, (double) (byte) -1, (int) (byte) -1, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: start position cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 2168.222222222222d + "'", double9 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 2168.222222222222d + "'", double23 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 2601.866666666667d + "'", double24 == 2601.866666666667d);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 2168.222222222222d + "'", double37 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 2168.222222222222d + "'", double49 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 2168.222222222222d + "'", double61 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 16.566666666666663d + "'", double72 == 16.566666666666663d);
        org.junit.Assert.assertTrue(Double.isNaN(double75));
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 13.805555555555552d + "'", double79 == 13.805555555555552d);
    }

    @Test
    public void test0286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0286");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray8 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double9 = variance1.evaluate(doubleArray8);
        long long10 = variance1.getN();
        variance1.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance13 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray20 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double21 = variance13.evaluate(doubleArray20);
        variance13.setBiasCorrected(true);
        boolean boolean24 = variance13.isBiasCorrected();
        double[] doubleArray31 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double32 = variance13.evaluate(doubleArray31);
        double double33 = variance13.getResult();
        variance13.setBiasCorrected(true);
        long long36 = variance13.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance38 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray45 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double46 = variance38.evaluate(doubleArray45);
        variance38.setBiasCorrected(true);
        boolean boolean49 = variance38.isBiasCorrected();
        double[] doubleArray56 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double57 = variance38.evaluate(doubleArray56);
        boolean boolean59 = variance38.equals((java.lang.Object) 10.0d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance61 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray68 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double69 = variance61.evaluate(doubleArray68);
        variance61.setBiasCorrected(true);
        boolean boolean72 = variance61.isBiasCorrected();
        double[] doubleArray79 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double80 = variance61.evaluate(doubleArray79);
        double double82 = variance38.evaluate(doubleArray79, (double) 0.0f);
        variance13.incrementAll(doubleArray79);
        double double85 = variance1.evaluate(doubleArray79, (double) ' ');
        double double86 = variance1.getResult();
        long long87 = variance1.getN();
        double[] doubleArray88 = null;
        // The following exception was thrown during execution in test generation
        try {
            variance1.incrementAll(doubleArray88);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: input values array is null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 2168.222222222222d + "'", double9 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 2168.222222222222d + "'", double21 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 16.566666666666663d + "'", double32 == 16.566666666666663d);
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 2168.222222222222d + "'", double46 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 16.566666666666663d + "'", double57 == 16.566666666666663d);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 2168.222222222222d + "'", double69 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 16.566666666666663d + "'", double80 == 16.566666666666663d);
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 16.566666666666666d + "'", double82 == 16.566666666666666d);
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 13.805555555555506d + "'", double85 == 13.805555555555506d);
        org.junit.Assert.assertTrue(Double.isNaN(double86));
        org.junit.Assert.assertTrue("'" + long87 + "' != '" + 0L + "'", long87 == 0L);
    }

    @Test
    public void test0287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0287");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray8 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double9 = variance1.evaluate(doubleArray8);
        variance1.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance13 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        variance13.clear();
        double double15 = variance13.getResult();
        double[] doubleArray20 = new double[] { (-1), 2168.222222222222d, 16.566666666418314d, 10.0d };
        variance13.incrementAll(doubleArray20);
        variance1.incrementAll(doubleArray20);
        boolean boolean23 = variance1.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment25 = null;
        org.apache.commons.math.stat.descriptive.moment.Variance variance26 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment25);
        double[] doubleArray27 = new double[] {};
        double double30 = variance26.evaluate(doubleArray27, 0, 0);
        // The following exception was thrown during execution in test generation
        try {
            double double33 = variance1.evaluate(doubleArray27, (int) (byte) 0, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 2168.222222222222d + "'", double9 == 2168.222222222222d);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-1.0, 2168.222222222222, 16.566666666418314, 10.0]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double30));
    }

    @Test
    public void test0288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0288");
        org.apache.commons.math.stat.descriptive.moment.Variance variance0 = new org.apache.commons.math.stat.descriptive.moment.Variance();
        long long1 = variance0.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance3 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray10 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double11 = variance3.evaluate(doubleArray10);
        variance3.setBiasCorrected(true);
        long long14 = variance3.getN();
        boolean boolean15 = variance0.equals((java.lang.Object) long14);
        variance0.clear();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 2168.222222222222d + "'", double11 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test0289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0289");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray8 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double9 = variance1.evaluate(doubleArray8);
        variance1.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance13 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray20 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double21 = variance13.evaluate(doubleArray20);
        variance1.incrementAll(doubleArray20);
        variance1.clear();
        boolean boolean24 = variance1.isBiasCorrected();
        variance1.increment(2601.866666666667d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance28 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray35 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double36 = variance28.evaluate(doubleArray35);
        variance28.setBiasCorrected(true);
        boolean boolean39 = variance28.isBiasCorrected();
        java.lang.Class<?> wildcardClass40 = variance28.getClass();
        boolean boolean41 = variance1.equals((java.lang.Object) wildcardClass40);
        org.apache.commons.math.stat.descriptive.moment.Variance variance43 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray50 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double51 = variance43.evaluate(doubleArray50);
        long long52 = variance43.getN();
        variance43.increment(874596.4092824734d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance56 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        variance56.clear();
        double double58 = variance56.getResult();
        double[] doubleArray63 = new double[] { (-1), 2168.222222222222d, 16.566666666418314d, 10.0d };
        variance56.incrementAll(doubleArray63);
        variance43.incrementAll(doubleArray63, 0, (int) (byte) 1);
        double double68 = variance1.evaluate(doubleArray63);
        long long69 = variance1.getN();
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 2168.222222222222d + "'", double9 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 2168.222222222222d + "'", double21 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 2168.222222222222d + "'", double36 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(wildcardClass40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 2168.222222222222d + "'", double51 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 0L + "'", long52 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double58));
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[-1.0, 2168.222222222222, 16.566666666418314, 10.0]");
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 1166128.5457099646d + "'", double68 == 1166128.5457099646d);
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + 0L + "'", long69 == 0L);
    }

    @Test
    public void test0290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0290");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = null;
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment1);
        variance2.increment(0.0d);
        variance2.clear();
        variance2.increment((double) (-1));
        org.apache.commons.math.stat.descriptive.moment.Variance variance9 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        variance9.clear();
        double double11 = variance9.getResult();
        double double12 = variance9.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray21 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double22 = variance14.evaluate(doubleArray21);
        double[] doubleArray26 = new double[] { (byte) 1, (byte) 100, 1L };
        double double27 = variance14.evaluate(doubleArray26);
        org.apache.commons.math.stat.descriptive.moment.Variance variance29 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray36 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double37 = variance29.evaluate(doubleArray36);
        variance29.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance41 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray48 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double49 = variance41.evaluate(doubleArray48);
        variance29.incrementAll(doubleArray48);
        variance14.incrementAll(doubleArray48);
        variance9.incrementAll(doubleArray48);
        // The following exception was thrown during execution in test generation
        try {
            double double55 = variance2.evaluate(doubleArray48, (int) (byte) 1, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 2168.222222222222d + "'", double22 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 100.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 2178.0d + "'", double27 == 2178.0d);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 2168.222222222222d + "'", double37 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 2168.222222222222d + "'", double49 == 2168.222222222222d);
    }

    @Test
    public void test0291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0291");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = null;
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment1);
        double[] doubleArray3 = new double[] {};
        double double6 = variance2.evaluate(doubleArray3, 0, 0);
        boolean boolean8 = variance2.equals((java.lang.Object) 10.0f);
        boolean boolean9 = variance2.isBiasCorrected();
        variance2.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance12 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray19 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double20 = variance12.evaluate(doubleArray19);
        variance12.setBiasCorrected(true);
        boolean boolean23 = variance12.isBiasCorrected();
        double[] doubleArray30 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double31 = variance12.evaluate(doubleArray30);
        double double32 = variance12.getResult();
        variance12.setBiasCorrected(true);
        double double35 = variance12.getResult();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean36 = variance2.equals((java.lang.Object) variance12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 2168.222222222222d + "'", double20 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 16.566666666666663d + "'", double31 == 16.566666666666663d);
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertTrue(Double.isNaN(double35));
    }

    @Test
    public void test0292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0292");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        variance1.clear();
        boolean boolean3 = variance1.isBiasCorrected();
        boolean boolean5 = variance1.equals((java.lang.Object) 1166128.5457099646d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance7 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray14 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double15 = variance7.evaluate(doubleArray14);
        org.apache.commons.math.stat.descriptive.moment.Variance variance17 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray24 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double25 = variance17.evaluate(doubleArray24);
        variance17.setBiasCorrected(true);
        boolean boolean28 = variance17.isBiasCorrected();
        double[] doubleArray35 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double36 = variance17.evaluate(doubleArray35);
        org.apache.commons.math.stat.descriptive.moment.Variance variance38 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray45 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double46 = variance38.evaluate(doubleArray45);
        variance38.setBiasCorrected(true);
        boolean boolean49 = variance38.isBiasCorrected();
        double[] doubleArray56 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double57 = variance38.evaluate(doubleArray56);
        double double60 = variance17.evaluate(doubleArray56, (int) (byte) 1, 0);
        variance17.setBiasCorrected(true);
        boolean boolean63 = variance7.equals((java.lang.Object) true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance65 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray72 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double73 = variance65.evaluate(doubleArray72);
        double double75 = variance7.evaluate(doubleArray72, 874596.4092824734d);
        double double77 = variance1.evaluate(doubleArray72, (double) 100L);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment79 = null;
        org.apache.commons.math.stat.descriptive.moment.Variance variance80 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment79);
        double[] doubleArray81 = new double[] {};
        double double84 = variance80.evaluate(doubleArray81, 0, 0);
        boolean boolean86 = variance80.equals((java.lang.Object) 10);
        variance80.increment(Double.NaN);
        boolean boolean89 = variance80.isBiasCorrected();
        variance80.clear();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean91 = variance1.equals((java.lang.Object) variance80);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 2168.222222222222d + "'", double15 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 2168.222222222222d + "'", double25 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 16.566666666666663d + "'", double36 == 16.566666666666663d);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 2168.222222222222d + "'", double46 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 16.566666666666663d + "'", double57 == 16.566666666666663d);
        org.junit.Assert.assertTrue(Double.isNaN(double60));
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 2168.222222222222d + "'", double73 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 2168.2220052083335d + "'", double75 == 2168.2220052083335d);
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 2168.222222222222d + "'", double77 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double84));
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
    }

    @Test
    public void test0293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0293");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray8 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double9 = variance1.evaluate(doubleArray8);
        variance1.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance13 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray20 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double21 = variance13.evaluate(doubleArray20);
        variance1.incrementAll(doubleArray20);
        variance1.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance25 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray32 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double33 = variance25.evaluate(doubleArray32);
        double[] doubleArray37 = new double[] { (byte) 1, (byte) 100, 1L };
        double double38 = variance25.evaluate(doubleArray37);
        variance1.incrementAll(doubleArray37, (int) (byte) 0, (int) (byte) 1);
        long long42 = variance1.getN();
        double[] doubleArray43 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double45 = variance1.evaluate(doubleArray43, 3267.0d);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 2168.222222222222d + "'", double9 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 2168.222222222222d + "'", double21 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 2168.222222222222d + "'", double33 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0, 100.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 2178.0d + "'", double38 == 2178.0d);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 1L + "'", long42 == 1L);
    }

    @Test
    public void test0294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0294");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray8 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double9 = variance1.evaluate(doubleArray8);
        variance1.setBiasCorrected(true);
        boolean boolean12 = variance1.isBiasCorrected();
        double[] doubleArray19 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double20 = variance1.evaluate(doubleArray19);
        boolean boolean22 = variance1.equals((java.lang.Object) 10.0d);
        boolean boolean23 = variance1.isBiasCorrected();
        double double24 = variance1.getResult();
        double double25 = variance1.getResult();
        boolean boolean26 = variance1.isBiasCorrected();
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 2168.222222222222d + "'", double9 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 16.566666666666663d + "'", double20 == 16.566666666666663d);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
    }

    @Test
    public void test0295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0295");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        variance1.clear();
        boolean boolean3 = variance1.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.Variance variance5 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray12 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double13 = variance5.evaluate(doubleArray12);
        variance5.setBiasCorrected(true);
        long long16 = variance5.getN();
        long long17 = variance5.getN();
        double double18 = variance5.getResult();
        variance5.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance21 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray28 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double29 = variance21.evaluate(doubleArray28);
        double[] doubleArray33 = new double[] { (byte) 1, (byte) 100, 1L };
        double double34 = variance21.evaluate(doubleArray33);
        org.apache.commons.math.stat.descriptive.moment.Variance variance36 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray43 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double44 = variance36.evaluate(doubleArray43);
        variance36.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance48 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray55 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double56 = variance48.evaluate(doubleArray55);
        variance36.incrementAll(doubleArray55);
        variance21.incrementAll(doubleArray55);
        double double59 = variance5.evaluate(doubleArray55);
        double double60 = variance1.evaluate(doubleArray55);
        variance1.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance63 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray70 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double71 = variance63.evaluate(doubleArray70);
        variance63.clear();
        java.lang.Object obj73 = null;
        boolean boolean74 = variance63.equals(obj73);
        java.lang.Class<?> wildcardClass75 = variance63.getClass();
        boolean boolean76 = variance1.equals((java.lang.Object) variance63);
        variance1.clear();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 2168.222222222222d + "'", double13 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 2168.222222222222d + "'", double29 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0, 100.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 2178.0d + "'", double34 == 2178.0d);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 2168.222222222222d + "'", double44 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 2168.222222222222d + "'", double56 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 2601.866666666667d + "'", double59 == 2601.866666666667d);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 2168.222222222222d + "'", double60 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 2168.222222222222d + "'", double71 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(wildcardClass75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
    }

    @Test
    public void test0296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0296");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray8 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double9 = variance1.evaluate(doubleArray8);
        variance1.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance13 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray20 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double21 = variance13.evaluate(doubleArray20);
        variance13.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance25 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray32 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double33 = variance25.evaluate(doubleArray32);
        variance25.setBiasCorrected(true);
        boolean boolean36 = variance25.isBiasCorrected();
        double[] doubleArray43 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double44 = variance25.evaluate(doubleArray43);
        double double47 = variance13.evaluate(doubleArray43, (int) (byte) 1, (int) (byte) 0);
        variance1.incrementAll(doubleArray43, (int) (byte) 1, 1);
        variance1.clear();
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 2168.222222222222d + "'", double9 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 2168.222222222222d + "'", double21 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 2168.222222222222d + "'", double33 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 16.566666666666663d + "'", double44 == 16.566666666666663d);
        org.junit.Assert.assertTrue(Double.isNaN(double47));
    }

    @Test
    public void test0297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0297");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray8 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double9 = variance1.evaluate(doubleArray8);
        variance1.setBiasCorrected(true);
        long long12 = variance1.getN();
        long long13 = variance1.getN();
        boolean boolean14 = variance1.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.Variance variance16 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray23 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double24 = variance16.evaluate(doubleArray23);
        variance16.setBiasCorrected(true);
        boolean boolean27 = variance16.isBiasCorrected();
        double[] doubleArray34 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double35 = variance16.evaluate(doubleArray34);
        org.apache.commons.math.stat.descriptive.moment.Variance variance37 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray44 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double45 = variance37.evaluate(doubleArray44);
        variance37.setBiasCorrected(true);
        boolean boolean48 = variance37.isBiasCorrected();
        double[] doubleArray55 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double56 = variance37.evaluate(doubleArray55);
        double double59 = variance16.evaluate(doubleArray55, (int) (byte) 1, 0);
        variance16.setBiasCorrected(true);
        variance16.setBiasCorrected(true);
        double double64 = variance16.getResult();
        boolean boolean65 = variance16.isBiasCorrected();
        boolean boolean66 = variance16.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.Variance variance68 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray75 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double76 = variance68.evaluate(doubleArray75);
        variance68.setBiasCorrected(true);
        boolean boolean79 = variance68.isBiasCorrected();
        double[] doubleArray86 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double87 = variance68.evaluate(doubleArray86);
        double double88 = variance16.evaluate(doubleArray86);
        double double91 = variance1.evaluate(doubleArray86, 1, 1);
        java.lang.Class<?> wildcardClass92 = variance1.getClass();
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 2168.222222222222d + "'", double9 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 2168.222222222222d + "'", double24 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 16.566666666666663d + "'", double35 == 16.566666666666663d);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 2168.222222222222d + "'", double45 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 16.566666666666663d + "'", double56 == 16.566666666666663d);
        org.junit.Assert.assertTrue(Double.isNaN(double59));
        org.junit.Assert.assertTrue(Double.isNaN(double64));
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 2168.222222222222d + "'", double76 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double87 + "' != '" + 16.566666666666663d + "'", double87 == 16.566666666666663d);
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 16.566666666666663d + "'", double88 == 16.566666666666663d);
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 0.0d + "'", double91 == 0.0d);
        org.junit.Assert.assertNotNull(wildcardClass92);
    }

    @Test
    public void test0298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0298");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        variance1.clear();
        boolean boolean3 = variance1.isBiasCorrected();
        boolean boolean5 = variance1.equals((java.lang.Object) 1166128.5457099646d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance7 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray14 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double15 = variance7.evaluate(doubleArray14);
        org.apache.commons.math.stat.descriptive.moment.Variance variance17 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray24 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double25 = variance17.evaluate(doubleArray24);
        variance17.setBiasCorrected(true);
        boolean boolean28 = variance17.isBiasCorrected();
        double[] doubleArray35 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double36 = variance17.evaluate(doubleArray35);
        org.apache.commons.math.stat.descriptive.moment.Variance variance38 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray45 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double46 = variance38.evaluate(doubleArray45);
        variance38.setBiasCorrected(true);
        boolean boolean49 = variance38.isBiasCorrected();
        double[] doubleArray56 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double57 = variance38.evaluate(doubleArray56);
        double double60 = variance17.evaluate(doubleArray56, (int) (byte) 1, 0);
        variance17.setBiasCorrected(true);
        boolean boolean63 = variance7.equals((java.lang.Object) true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance65 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray72 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double73 = variance65.evaluate(doubleArray72);
        double double75 = variance7.evaluate(doubleArray72, 874596.4092824734d);
        double double77 = variance1.evaluate(doubleArray72, (double) 100L);
        java.lang.Class<?> wildcardClass78 = variance1.getClass();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 2168.222222222222d + "'", double15 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 2168.222222222222d + "'", double25 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 16.566666666666663d + "'", double36 == 16.566666666666663d);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 2168.222222222222d + "'", double46 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 16.566666666666663d + "'", double57 == 16.566666666666663d);
        org.junit.Assert.assertTrue(Double.isNaN(double60));
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 2168.222222222222d + "'", double73 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 2168.2220052083335d + "'", double75 == 2168.2220052083335d);
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 2168.222222222222d + "'", double77 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(wildcardClass78);
    }

    @Test
    public void test0299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0299");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        variance1.clear();
        boolean boolean3 = variance1.isBiasCorrected();
        long long4 = variance1.getN();
        double[] doubleArray5 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double7 = variance1.evaluate(doubleArray5, 2178.0d);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
    }

    @Test
    public void test0300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0300");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = null;
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        variance1.setBiasCorrected(false);
        variance1.increment(10.0d);
        variance1.clear();
        variance1.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance9 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray16 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double17 = variance9.evaluate(doubleArray16);
        variance9.setBiasCorrected(true);
        boolean boolean20 = variance9.isBiasCorrected();
        double[] doubleArray27 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double28 = variance9.evaluate(doubleArray27);
        org.apache.commons.math.stat.descriptive.moment.Variance variance30 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray37 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double38 = variance30.evaluate(doubleArray37);
        variance30.setBiasCorrected(true);
        boolean boolean41 = variance30.isBiasCorrected();
        double[] doubleArray48 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double49 = variance30.evaluate(doubleArray48);
        double double52 = variance9.evaluate(doubleArray48, (int) (byte) 1, 0);
        // The following exception was thrown during execution in test generation
        try {
            double double56 = variance1.evaluate(doubleArray48, (double) 1, (int) (short) 10, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 2168.222222222222d + "'", double17 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 16.566666666666663d + "'", double28 == 16.566666666666663d);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 2168.222222222222d + "'", double38 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 16.566666666666663d + "'", double49 == 16.566666666666663d);
        org.junit.Assert.assertTrue(Double.isNaN(double52));
    }

    @Test
    public void test0301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0301");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        variance1.clear();
        double double3 = variance1.getResult();
        variance1.increment((double) '4');
        double double6 = variance1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance8 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray15 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double16 = variance8.evaluate(doubleArray15);
        variance8.clear();
        variance8.setBiasCorrected(false);
        variance8.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance22 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray29 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double30 = variance22.evaluate(doubleArray29);
        variance22.setBiasCorrected(true);
        variance22.increment((double) (byte) 0);
        double[] doubleArray37 = new double[] { 'a', 100L };
        double double39 = variance22.evaluate(doubleArray37, 0.0d);
        double double40 = variance8.evaluate(doubleArray37);
        org.apache.commons.math.stat.descriptive.moment.Variance variance42 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray49 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double50 = variance42.evaluate(doubleArray49);
        double[] doubleArray54 = new double[] { (byte) 1, (byte) 100, 1L };
        double double55 = variance42.evaluate(doubleArray54);
        org.apache.commons.math.stat.descriptive.moment.Variance variance57 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray64 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double65 = variance57.evaluate(doubleArray64);
        variance57.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance69 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray76 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double77 = variance69.evaluate(doubleArray76);
        variance57.incrementAll(doubleArray76);
        variance42.incrementAll(doubleArray76);
        boolean boolean80 = variance8.equals((java.lang.Object) doubleArray76);
        // The following exception was thrown during execution in test generation
        try {
            variance1.incrementAll(doubleArray76, (int) (byte) 100, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 2168.222222222222d + "'", double16 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 2168.222222222222d + "'", double30 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[97.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 4.5d + "'", double39 == 4.5d);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 2.25d + "'", double40 == 2.25d);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 2168.222222222222d + "'", double50 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0, 100.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 2178.0d + "'", double55 == 2178.0d);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 2168.222222222222d + "'", double65 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 2168.222222222222d + "'", double77 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
    }

    @Test
    public void test0302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0302");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        variance1.clear();
        boolean boolean3 = variance1.isBiasCorrected();
        boolean boolean5 = variance1.equals((java.lang.Object) 1166128.5457099646d);
        variance1.setBiasCorrected(false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test0303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0303");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double2 = variance1.getResult();
        double double3 = variance1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance5 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray12 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double13 = variance5.evaluate(doubleArray12);
        variance5.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance17 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray24 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double25 = variance17.evaluate(doubleArray24);
        variance5.incrementAll(doubleArray24);
        variance5.clear();
        variance5.setBiasCorrected(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance31 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray38 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double39 = variance31.evaluate(doubleArray38);
        variance31.setBiasCorrected(true);
        long long42 = variance31.getN();
        long long43 = variance31.getN();
        boolean boolean45 = variance31.equals((java.lang.Object) 16.566666666666663d);
        boolean boolean47 = variance31.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance49 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray56 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double57 = variance49.evaluate(doubleArray56);
        variance49.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance61 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray68 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double69 = variance61.evaluate(doubleArray68);
        variance49.incrementAll(doubleArray68);
        double double71 = variance31.evaluate(doubleArray68);
        double double73 = variance5.evaluate(doubleArray68, (double) (byte) 100);
        double double75 = variance1.evaluate(doubleArray68, (double) (-1));
        double double76 = variance1.getResult();
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 2168.222222222222d + "'", double13 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 2168.222222222222d + "'", double25 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 2168.222222222222d + "'", double39 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 0L + "'", long43 == 0L);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 2168.222222222222d + "'", double57 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 2168.222222222222d + "'", double69 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 2601.866666666667d + "'", double71 == 2601.866666666667d);
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 2168.222222222222d + "'", double73 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 2601.8666666666663d + "'", double75 == 2601.8666666666663d);
        org.junit.Assert.assertTrue(Double.isNaN(double76));
    }

    @Test
    public void test0304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0304");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray8 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double9 = variance1.evaluate(doubleArray8);
        variance1.clear();
        variance1.setBiasCorrected(false);
        variance1.increment(2178.0d);
        variance1.increment((double) (short) 10);
        java.lang.Class<?> wildcardClass17 = variance1.getClass();
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 2168.222222222222d + "'", double9 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test0305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0305");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray8 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double9 = variance1.evaluate(doubleArray8);
        variance1.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance13 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray20 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double21 = variance13.evaluate(doubleArray20);
        variance1.incrementAll(doubleArray20);
        variance1.clear();
        variance1.setBiasCorrected(false);
        long long26 = variance1.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance28 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray35 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double36 = variance28.evaluate(doubleArray35);
        variance28.clear();
        variance28.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance41 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray48 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double49 = variance41.evaluate(doubleArray48);
        variance41.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance53 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray60 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double61 = variance53.evaluate(doubleArray60);
        variance53.setBiasCorrected(true);
        boolean boolean64 = variance53.isBiasCorrected();
        double[] doubleArray71 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double72 = variance53.evaluate(doubleArray71);
        double double75 = variance41.evaluate(doubleArray71, (int) (byte) 1, (int) (byte) 0);
        variance28.incrementAll(doubleArray71);
        double double77 = variance1.evaluate(doubleArray71);
        variance1.setBiasCorrected(false);
        boolean boolean80 = variance1.isBiasCorrected();
        long long81 = variance1.getN();
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 2168.222222222222d + "'", double9 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 2168.222222222222d + "'", double21 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 2168.222222222222d + "'", double36 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 2168.222222222222d + "'", double49 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 2168.222222222222d + "'", double61 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 16.566666666666663d + "'", double72 == 16.566666666666663d);
        org.junit.Assert.assertTrue(Double.isNaN(double75));
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 13.805555555555552d + "'", double77 == 13.805555555555552d);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + long81 + "' != '" + 0L + "'", long81 == 0L);
    }

    @Test
    public void test0306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0306");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = null;
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment1);
        variance2.increment(0.0d);
        variance2.clear();
        variance2.increment((double) (-1));
        boolean boolean8 = variance2.isBiasCorrected();
        variance2.increment((double) '4');
        // The following exception was thrown during execution in test generation
        try {
            double double11 = variance2.getResult();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
    }

    @Test
    public void test0307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0307");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray8 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double9 = variance1.evaluate(doubleArray8);
        variance1.setBiasCorrected(true);
        long long12 = variance1.getN();
        long long13 = variance1.getN();
        double double14 = variance1.getResult();
        variance1.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance17 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray24 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double25 = variance17.evaluate(doubleArray24);
        variance17.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance29 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray36 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double37 = variance29.evaluate(doubleArray36);
        variance17.incrementAll(doubleArray36);
        variance17.clear();
        variance17.setBiasCorrected(false);
        java.lang.Class<?> wildcardClass42 = variance17.getClass();
        boolean boolean43 = variance1.equals((java.lang.Object) variance17);
        variance17.setBiasCorrected(true);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 2168.222222222222d + "'", double9 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 2168.222222222222d + "'", double25 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 2168.222222222222d + "'", double37 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(wildcardClass42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
    }

    @Test
    public void test0308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0308");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray8 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double9 = variance1.evaluate(doubleArray8);
        variance1.setBiasCorrected(true);
        variance1.increment((double) (byte) 0);
        double[] doubleArray16 = new double[] { 'a', 100L };
        double double18 = variance1.evaluate(doubleArray16, 0.0d);
        double double19 = variance1.getResult();
        double double20 = variance1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance22 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray29 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double30 = variance22.evaluate(doubleArray29);
        variance22.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance34 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray41 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double42 = variance34.evaluate(doubleArray41);
        variance34.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance46 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray53 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double54 = variance46.evaluate(doubleArray53);
        variance46.setBiasCorrected(true);
        boolean boolean57 = variance46.isBiasCorrected();
        double[] doubleArray64 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double65 = variance46.evaluate(doubleArray64);
        double double68 = variance34.evaluate(doubleArray64, (int) (byte) 1, (int) (byte) 0);
        variance22.incrementAll(doubleArray64, (int) (byte) 1, 1);
        // The following exception was thrown during execution in test generation
        try {
            variance1.incrementAll(doubleArray64, (int) (short) 10, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 2168.222222222222d + "'", double9 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[97.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 4.5d + "'", double18 == 4.5d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 2168.222222222222d + "'", double30 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 2168.222222222222d + "'", double42 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 2168.222222222222d + "'", double54 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 16.566666666666663d + "'", double65 == 16.566666666666663d);
        org.junit.Assert.assertTrue(Double.isNaN(double68));
    }

    @Test
    public void test0309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0309");
        org.apache.commons.math.stat.descriptive.moment.Variance variance0 = new org.apache.commons.math.stat.descriptive.moment.Variance();
        double double1 = variance0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance3 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray10 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double11 = variance3.evaluate(doubleArray10);
        variance3.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance15 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray22 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double23 = variance15.evaluate(doubleArray22);
        variance3.incrementAll(doubleArray22);
        boolean boolean25 = variance0.equals((java.lang.Object) variance3);
        org.apache.commons.math.stat.descriptive.moment.Variance variance27 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray34 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double35 = variance27.evaluate(doubleArray34);
        variance27.clear();
        boolean boolean37 = variance3.equals((java.lang.Object) variance27);
        variance3.increment(13.805555555555552d);
        java.lang.Class<?> wildcardClass40 = variance3.getClass();
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 2168.222222222222d + "'", double11 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 2168.222222222222d + "'", double23 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 2168.222222222222d + "'", double35 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(wildcardClass40);
    }

    @Test
    public void test0310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0310");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = null;
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        variance2.increment((double) (byte) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance6 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance8 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray15 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double16 = variance8.evaluate(doubleArray15);
        variance8.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance20 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        variance20.clear();
        double double22 = variance20.getResult();
        double[] doubleArray27 = new double[] { (-1), 2168.222222222222d, 16.566666666418314d, 10.0d };
        variance20.incrementAll(doubleArray27);
        variance8.incrementAll(doubleArray27);
        double double30 = variance6.evaluate(doubleArray27);
        // The following exception was thrown during execution in test generation
        try {
            double double33 = variance2.evaluate(doubleArray27, 0, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 2168.222222222222d + "'", double16 == 2168.222222222222d);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-1.0, 2168.222222222222, 16.566666666418314, 10.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 874596.4092824734d + "'", double30 == 874596.4092824734d);
    }

    @Test
    public void test0311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0311");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray8 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double9 = variance1.evaluate(doubleArray8);
        variance1.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance13 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray20 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double21 = variance13.evaluate(doubleArray20);
        variance1.incrementAll(doubleArray20);
        variance1.clear();
        variance1.setBiasCorrected(false);
        double[] doubleArray26 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double29 = variance1.evaluate(doubleArray26, (int) '4', (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: input value array is null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 2168.222222222222d + "'", double9 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 2168.222222222222d + "'", double21 == 2168.222222222222d);
    }

    @Test
    public void test0312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0312");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray8 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double9 = variance1.evaluate(doubleArray8);
        variance1.setBiasCorrected(true);
        boolean boolean12 = variance1.isBiasCorrected();
        double[] doubleArray19 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double20 = variance1.evaluate(doubleArray19);
        double double21 = variance1.getResult();
        variance1.setBiasCorrected(true);
        boolean boolean24 = variance1.isBiasCorrected();
        variance1.setBiasCorrected(false);
        variance1.increment(2601.866666666667d);
        boolean boolean29 = variance1.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.Variance variance31 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray38 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double39 = variance31.evaluate(doubleArray38);
        variance31.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance43 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray50 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double51 = variance43.evaluate(doubleArray50);
        variance31.incrementAll(doubleArray50);
        variance31.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance55 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray62 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double63 = variance55.evaluate(doubleArray62);
        double[] doubleArray67 = new double[] { (byte) 1, (byte) 100, 1L };
        double double68 = variance55.evaluate(doubleArray67);
        variance31.incrementAll(doubleArray67, (int) (byte) 0, (int) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            variance1.incrementAll(doubleArray67, (-1), (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: start position cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 2168.222222222222d + "'", double9 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 16.566666666666663d + "'", double20 == 16.566666666666663d);
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 2168.222222222222d + "'", double39 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 2168.222222222222d + "'", double51 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 2168.222222222222d + "'", double63 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[1.0, 100.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 2178.0d + "'", double68 == 2178.0d);
    }

    @Test
    public void test0313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0313");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray8 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double9 = variance1.evaluate(doubleArray8);
        variance1.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance13 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray20 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double21 = variance13.evaluate(doubleArray20);
        variance1.incrementAll(doubleArray20);
        variance1.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance25 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray32 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double33 = variance25.evaluate(doubleArray32);
        variance25.setBiasCorrected(true);
        boolean boolean36 = variance25.isBiasCorrected();
        double[] doubleArray43 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double44 = variance25.evaluate(doubleArray43);
        boolean boolean46 = variance25.equals((java.lang.Object) 10.0d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance48 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray55 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double56 = variance48.evaluate(doubleArray55);
        variance48.setBiasCorrected(true);
        boolean boolean59 = variance48.isBiasCorrected();
        double[] doubleArray66 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double67 = variance48.evaluate(doubleArray66);
        double double69 = variance25.evaluate(doubleArray66, (double) 0.0f);
        variance1.incrementAll(doubleArray66);
        variance1.increment(3267.0000000018626d);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 2168.222222222222d + "'", double9 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 2168.222222222222d + "'", double21 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 2168.222222222222d + "'", double33 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 16.566666666666663d + "'", double44 == 16.566666666666663d);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 2168.222222222222d + "'", double56 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 16.566666666666663d + "'", double67 == 16.566666666666663d);
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 16.566666666666666d + "'", double69 == 16.566666666666666d);
    }

    @Test
    public void test0314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0314");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray8 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double9 = variance1.evaluate(doubleArray8);
        double double10 = variance1.getResult();
        java.lang.Class<?> wildcardClass11 = variance1.getClass();
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 2168.222222222222d + "'", double9 == 2168.222222222222d);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test0315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0315");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray8 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double9 = variance1.evaluate(doubleArray8);
        variance1.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance13 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray20 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double21 = variance13.evaluate(doubleArray20);
        variance13.setBiasCorrected(true);
        boolean boolean24 = variance13.isBiasCorrected();
        double[] doubleArray31 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double32 = variance13.evaluate(doubleArray31);
        double double35 = variance1.evaluate(doubleArray31, (int) (byte) 1, (int) (byte) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance37 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance39 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray46 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double47 = variance39.evaluate(doubleArray46);
        variance39.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance51 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray58 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double59 = variance51.evaluate(doubleArray58);
        variance51.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance63 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray70 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double71 = variance63.evaluate(doubleArray70);
        variance63.setBiasCorrected(true);
        boolean boolean74 = variance63.isBiasCorrected();
        double[] doubleArray81 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double82 = variance63.evaluate(doubleArray81);
        double double85 = variance51.evaluate(doubleArray81, (int) (byte) 1, (int) (byte) 0);
        variance39.incrementAll(doubleArray81, (int) (byte) 1, 1);
        double double89 = variance37.evaluate(doubleArray81);
        double double90 = variance1.evaluate(doubleArray81);
        long long91 = variance1.getN();
        variance1.clear();
        long long93 = variance1.getN();
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 2168.222222222222d + "'", double9 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 2168.222222222222d + "'", double21 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 16.566666666666663d + "'", double32 == 16.566666666666663d);
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 2168.222222222222d + "'", double47 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 2168.222222222222d + "'", double59 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 2168.222222222222d + "'", double71 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 16.566666666666663d + "'", double82 == 16.566666666666663d);
        org.junit.Assert.assertTrue(Double.isNaN(double85));
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + 13.805555555555552d + "'", double89 == 13.805555555555552d);
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + 16.566666666666663d + "'", double90 == 16.566666666666663d);
        org.junit.Assert.assertTrue("'" + long91 + "' != '" + 0L + "'", long91 == 0L);
        org.junit.Assert.assertTrue("'" + long93 + "' != '" + 0L + "'", long93 == 0L);
    }

    @Test
    public void test0316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0316");
        org.apache.commons.math.stat.descriptive.moment.Variance variance0 = new org.apache.commons.math.stat.descriptive.moment.Variance();
        double double1 = variance0.getResult();
        boolean boolean2 = variance0.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.Variance variance4 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double5 = variance4.getResult();
        double double6 = variance4.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance8 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray15 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double16 = variance8.evaluate(doubleArray15);
        variance8.clear();
        variance8.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance21 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        variance21.clear();
        double double23 = variance21.getResult();
        double[] doubleArray28 = new double[] { (-1), 2168.222222222222d, 16.566666666418314d, 10.0d };
        variance21.incrementAll(doubleArray28);
        boolean boolean30 = variance8.equals((java.lang.Object) doubleArray28);
        double double32 = variance4.evaluate(doubleArray28, (double) (-1.0f));
        double double34 = variance0.evaluate(doubleArray28, (double) (-1L));
        variance0.increment(2.25d);
        long long37 = variance0.getN();
        java.lang.Class<?> wildcardClass38 = variance0.getClass();
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 2168.222222222222d + "'", double16 == 2168.222222222222d);
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-1.0, 2168.222222222222, 16.566666666418314, 10.0]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 1166128.5457099646d + "'", double32 == 1166128.5457099646d);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 1166128.5457099646d + "'", double34 == 1166128.5457099646d);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 1L + "'", long37 == 1L);
        org.junit.Assert.assertNotNull(wildcardClass38);
    }

    @Test
    public void test0317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0317");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray8 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double9 = variance1.evaluate(doubleArray8);
        variance1.setBiasCorrected(true);
        boolean boolean12 = variance1.isBiasCorrected();
        double[] doubleArray19 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double20 = variance1.evaluate(doubleArray19);
        org.apache.commons.math.stat.descriptive.moment.Variance variance22 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray29 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double30 = variance22.evaluate(doubleArray29);
        variance22.setBiasCorrected(true);
        boolean boolean33 = variance22.isBiasCorrected();
        double[] doubleArray40 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double41 = variance22.evaluate(doubleArray40);
        double double44 = variance1.evaluate(doubleArray40, (int) (byte) 1, 0);
        variance1.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance48 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray55 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double56 = variance48.evaluate(doubleArray55);
        variance48.setBiasCorrected(true);
        boolean boolean59 = variance48.isBiasCorrected();
        double[] doubleArray66 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double67 = variance48.evaluate(doubleArray66);
        double double69 = variance1.evaluate(doubleArray66, 6.25d);
        variance1.increment(2178.0d);
        variance1.increment((double) '4');
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 2168.222222222222d + "'", double9 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 16.566666666666663d + "'", double20 == 16.566666666666663d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 2168.222222222222d + "'", double30 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 16.566666666666663d + "'", double41 == 16.566666666666663d);
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 2168.222222222222d + "'", double56 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 16.566666666666663d + "'", double67 == 16.566666666666663d);
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 16.566666666666666d + "'", double69 == 16.566666666666666d);
    }

    @Test
    public void test0318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0318");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance3 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray10 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double11 = variance3.evaluate(doubleArray10);
        variance3.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance15 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        variance15.clear();
        double double17 = variance15.getResult();
        double[] doubleArray22 = new double[] { (-1), 2168.222222222222d, 16.566666666418314d, 10.0d };
        variance15.incrementAll(doubleArray22);
        variance3.incrementAll(doubleArray22);
        double double25 = variance1.evaluate(doubleArray22);
        boolean boolean26 = variance1.isBiasCorrected();
        variance1.setBiasCorrected(true);
        double[] doubleArray29 = null;
        // The following exception was thrown during execution in test generation
        try {
            variance1.incrementAll(doubleArray29, 10, (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: input value array is null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 2168.222222222222d + "'", double11 == 2168.222222222222d);
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[-1.0, 2168.222222222222, 16.566666666418314, 10.0]");
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 874596.4092824734d + "'", double25 == 874596.4092824734d);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test0319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0319");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray8 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double9 = variance1.evaluate(doubleArray8);
        variance1.setBiasCorrected(true);
        variance1.increment((double) (byte) 0);
        variance1.clear();
        java.lang.Class<?> wildcardClass15 = variance1.getClass();
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 2168.222222222222d + "'", double9 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test0320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0320");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray8 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double9 = variance1.evaluate(doubleArray8);
        variance1.setBiasCorrected(true);
        long long12 = variance1.getN();
        variance1.clear();
        double double14 = variance1.getResult();
        long long15 = variance1.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance17 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        variance17.clear();
        boolean boolean19 = variance17.isBiasCorrected();
        long long20 = variance17.getN();
        variance17.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance24 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray31 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double32 = variance24.evaluate(doubleArray31);
        variance24.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance36 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray43 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double44 = variance36.evaluate(doubleArray43);
        variance36.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance48 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray55 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double56 = variance48.evaluate(doubleArray55);
        variance48.setBiasCorrected(true);
        boolean boolean59 = variance48.isBiasCorrected();
        double[] doubleArray66 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double67 = variance48.evaluate(doubleArray66);
        double double70 = variance36.evaluate(doubleArray66, (int) (byte) 1, (int) (byte) 0);
        variance24.incrementAll(doubleArray66, (int) (byte) 1, 1);
        boolean boolean74 = variance17.equals((java.lang.Object) doubleArray66);
        // The following exception was thrown during execution in test generation
        try {
            variance1.incrementAll(doubleArray66, 10, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 2168.222222222222d + "'", double9 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 2168.222222222222d + "'", double32 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 2168.222222222222d + "'", double44 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 2168.222222222222d + "'", double56 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 16.566666666666663d + "'", double67 == 16.566666666666663d);
        org.junit.Assert.assertTrue(Double.isNaN(double70));
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
    }

    @Test
    public void test0321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0321");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray8 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double9 = variance1.evaluate(doubleArray8);
        variance1.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance13 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        variance13.clear();
        double double15 = variance13.getResult();
        double[] doubleArray20 = new double[] { (-1), 2168.222222222222d, 16.566666666418314d, 10.0d };
        variance13.incrementAll(doubleArray20);
        variance1.incrementAll(doubleArray20);
        boolean boolean23 = variance1.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.Variance variance25 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance27 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray34 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double35 = variance27.evaluate(doubleArray34);
        variance27.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance39 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        variance39.clear();
        double double41 = variance39.getResult();
        double[] doubleArray46 = new double[] { (-1), 2168.222222222222d, 16.566666666418314d, 10.0d };
        variance39.incrementAll(doubleArray46);
        variance27.incrementAll(doubleArray46);
        double double49 = variance25.evaluate(doubleArray46);
        java.lang.Class<?> wildcardClass50 = variance25.getClass();
        boolean boolean51 = variance1.equals((java.lang.Object) wildcardClass50);
        org.apache.commons.math.stat.descriptive.moment.Variance variance53 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double54 = variance53.getResult();
        double double55 = variance53.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance57 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray64 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double65 = variance57.evaluate(doubleArray64);
        variance57.setBiasCorrected(true);
        long long68 = variance57.getN();
        variance57.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance71 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray78 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double79 = variance71.evaluate(doubleArray78);
        double double80 = variance57.evaluate(doubleArray78);
        variance53.incrementAll(doubleArray78);
        // The following exception was thrown during execution in test generation
        try {
            double double85 = variance1.evaluate(doubleArray78, 874596.4092824734d, (int) ' ', (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 2168.222222222222d + "'", double9 == 2168.222222222222d);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-1.0, 2168.222222222222, 16.566666666418314, 10.0]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 2168.222222222222d + "'", double35 == 2168.222222222222d);
        org.junit.Assert.assertTrue(Double.isNaN(double41));
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[-1.0, 2168.222222222222, 16.566666666418314, 10.0]");
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 874596.4092824734d + "'", double49 == 874596.4092824734d);
        org.junit.Assert.assertNotNull(wildcardClass50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double54));
        org.junit.Assert.assertTrue(Double.isNaN(double55));
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 2168.222222222222d + "'", double65 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 0L + "'", long68 == 0L);
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 2168.222222222222d + "'", double79 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 2601.866666666667d + "'", double80 == 2601.866666666667d);
    }

    @Test
    public void test0322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0322");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        variance1.clear();
        long long3 = variance1.getN();
        variance1.setBiasCorrected(true);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
    }

    @Test
    public void test0323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0323");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray8 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double9 = variance1.evaluate(doubleArray8);
        variance1.setBiasCorrected(true);
        long long12 = variance1.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray21 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double22 = variance14.evaluate(doubleArray21);
        // The following exception was thrown during execution in test generation
        try {
            double double25 = variance1.evaluate(doubleArray21, (int) (byte) -1, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: start position cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 2168.222222222222d + "'", double9 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 2168.222222222222d + "'", double22 == 2168.222222222222d);
    }

    @Test
    public void test0324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0324");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = null;
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment1);
        variance2.clear();
        double[] doubleArray4 = new double[] {};
        variance2.incrementAll(doubleArray4);
        variance2.increment(2178.0d);
        variance2.clear();
        variance2.clear();
        double[] doubleArray10 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double11 = variance2.evaluate(doubleArray10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: input values array is null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[]");
    }

    @Test
    public void test0325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0325");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray8 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double9 = variance1.evaluate(doubleArray8);
        variance1.setBiasCorrected(true);
        boolean boolean12 = variance1.isBiasCorrected();
        double[] doubleArray19 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double20 = variance1.evaluate(doubleArray19);
        double double21 = variance1.getResult();
        variance1.setBiasCorrected(true);
        long long24 = variance1.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance26 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray33 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double34 = variance26.evaluate(doubleArray33);
        variance26.setBiasCorrected(true);
        boolean boolean37 = variance26.isBiasCorrected();
        double[] doubleArray44 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double45 = variance26.evaluate(doubleArray44);
        boolean boolean47 = variance26.equals((java.lang.Object) 10.0d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance49 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray56 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double57 = variance49.evaluate(doubleArray56);
        variance49.setBiasCorrected(true);
        boolean boolean60 = variance49.isBiasCorrected();
        double[] doubleArray67 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double68 = variance49.evaluate(doubleArray67);
        double double70 = variance26.evaluate(doubleArray67, (double) 0.0f);
        variance1.incrementAll(doubleArray67);
        long long72 = variance1.getN();
        java.lang.Class<?> wildcardClass73 = variance1.getClass();
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 2168.222222222222d + "'", double9 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 16.566666666666663d + "'", double20 == 16.566666666666663d);
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 2168.222222222222d + "'", double34 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 16.566666666666663d + "'", double45 == 16.566666666666663d);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 2168.222222222222d + "'", double57 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 16.566666666666663d + "'", double68 == 16.566666666666663d);
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 16.566666666666666d + "'", double70 == 16.566666666666666d);
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + 6L + "'", long72 == 6L);
        org.junit.Assert.assertNotNull(wildcardClass73);
    }

    @Test
    public void test0326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0326");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray8 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double9 = variance1.evaluate(doubleArray8);
        variance1.setBiasCorrected(true);
        boolean boolean12 = variance1.isBiasCorrected();
        double[] doubleArray19 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double20 = variance1.evaluate(doubleArray19);
        double double21 = variance1.getResult();
        variance1.setBiasCorrected(true);
        boolean boolean24 = variance1.isBiasCorrected();
        variance1.setBiasCorrected(false);
        variance1.increment(2601.866666666667d);
        boolean boolean29 = variance1.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.Variance variance30 = new org.apache.commons.math.stat.descriptive.moment.Variance();
        long long31 = variance30.getN();
        variance30.setBiasCorrected(true);
        variance30.increment(2178.0d);
        boolean boolean36 = variance30.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.Variance variance38 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray45 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double46 = variance38.evaluate(doubleArray45);
        variance38.setBiasCorrected(true);
        boolean boolean49 = variance38.isBiasCorrected();
        double[] doubleArray56 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double57 = variance38.evaluate(doubleArray56);
        double double58 = variance38.getResult();
        long long59 = variance38.getN();
        variance38.increment((double) '#');
        variance38.increment(100.0d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance65 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray72 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double73 = variance65.evaluate(doubleArray72);
        variance65.setBiasCorrected(true);
        boolean boolean76 = variance65.isBiasCorrected();
        double[] doubleArray83 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double84 = variance65.evaluate(doubleArray83);
        double double86 = variance38.evaluate(doubleArray83, (double) (byte) 100);
        double double87 = variance30.evaluate(doubleArray83);
        // The following exception was thrown during execution in test generation
        try {
            double double90 = variance1.evaluate(doubleArray83, (int) (short) 100, (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 2168.222222222222d + "'", double9 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 16.566666666666663d + "'", double20 == 16.566666666666663d);
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 2168.222222222222d + "'", double46 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 16.566666666666663d + "'", double57 == 16.566666666666663d);
        org.junit.Assert.assertTrue(Double.isNaN(double58));
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 0L + "'", long59 == 0L);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 2168.222222222222d + "'", double73 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 16.566666666666663d + "'", double84 == 16.566666666666663d);
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 16.566666666667153d + "'", double86 == 16.566666666667153d);
        org.junit.Assert.assertTrue("'" + double87 + "' != '" + 16.566666666666663d + "'", double87 == 16.566666666666663d);
    }

    @Test
    public void test0327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0327");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = null;
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment1);
        variance2.increment(0.0d);
        variance2.clear();
        variance2.setBiasCorrected(true);
        variance2.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance10 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray17 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double18 = variance10.evaluate(doubleArray17);
        variance10.setBiasCorrected(true);
        boolean boolean21 = variance10.isBiasCorrected();
        double[] doubleArray28 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double29 = variance10.evaluate(doubleArray28);
        boolean boolean31 = variance10.equals((java.lang.Object) 10.0d);
        boolean boolean32 = variance10.isBiasCorrected();
        double double33 = variance10.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance35 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray42 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double43 = variance35.evaluate(doubleArray42);
        variance35.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance47 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray54 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double55 = variance47.evaluate(doubleArray54);
        variance47.setBiasCorrected(true);
        boolean boolean58 = variance47.isBiasCorrected();
        double[] doubleArray65 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double66 = variance47.evaluate(doubleArray65);
        double double69 = variance35.evaluate(doubleArray65, (int) (byte) 1, (int) (byte) 0);
        double double70 = variance10.evaluate(doubleArray65);
        // The following exception was thrown during execution in test generation
        try {
            variance2.incrementAll(doubleArray65, 100, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: length cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 2168.222222222222d + "'", double18 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 16.566666666666663d + "'", double29 == 16.566666666666663d);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 2168.222222222222d + "'", double43 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 2168.222222222222d + "'", double55 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 16.566666666666663d + "'", double66 == 16.566666666666663d);
        org.junit.Assert.assertTrue(Double.isNaN(double69));
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 16.566666666666663d + "'", double70 == 16.566666666666663d);
    }

    @Test
    public void test0328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0328");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray8 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double9 = variance1.evaluate(doubleArray8);
        variance1.clear();
        variance1.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray21 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double22 = variance14.evaluate(doubleArray21);
        variance14.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance26 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray33 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double34 = variance26.evaluate(doubleArray33);
        variance26.setBiasCorrected(true);
        boolean boolean37 = variance26.isBiasCorrected();
        double[] doubleArray44 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double45 = variance26.evaluate(doubleArray44);
        double double48 = variance14.evaluate(doubleArray44, (int) (byte) 1, (int) (byte) 0);
        variance1.incrementAll(doubleArray44);
        variance1.clear();
        variance1.increment(16.56666666666674d);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 2168.222222222222d + "'", double9 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 2168.222222222222d + "'", double22 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 2168.222222222222d + "'", double34 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 16.566666666666663d + "'", double45 == 16.566666666666663d);
        org.junit.Assert.assertTrue(Double.isNaN(double48));
    }

    @Test
    public void test0329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0329");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray8 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double9 = variance1.evaluate(doubleArray8);
        variance1.setBiasCorrected(true);
        boolean boolean12 = variance1.isBiasCorrected();
        double[] doubleArray19 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double20 = variance1.evaluate(doubleArray19);
        org.apache.commons.math.stat.descriptive.moment.Variance variance22 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray29 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double30 = variance22.evaluate(doubleArray29);
        variance22.setBiasCorrected(true);
        boolean boolean33 = variance22.isBiasCorrected();
        double[] doubleArray40 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double41 = variance22.evaluate(doubleArray40);
        double double44 = variance1.evaluate(doubleArray40, (int) (byte) 1, 0);
        variance1.setBiasCorrected(true);
        variance1.setBiasCorrected(true);
        double double49 = variance1.getResult();
        boolean boolean50 = variance1.isBiasCorrected();
        boolean boolean51 = variance1.isBiasCorrected();
        double double52 = variance1.getResult();
        java.lang.Class<?> wildcardClass53 = variance1.getClass();
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 2168.222222222222d + "'", double9 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 16.566666666666663d + "'", double20 == 16.566666666666663d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 2168.222222222222d + "'", double30 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 16.566666666666663d + "'", double41 == 16.566666666666663d);
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertTrue(Double.isNaN(double49));
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double52));
        org.junit.Assert.assertNotNull(wildcardClass53);
    }

    @Test
    public void test0330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0330");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray8 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double9 = variance1.evaluate(doubleArray8);
        variance1.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance13 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray20 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double21 = variance13.evaluate(doubleArray20);
        variance13.setBiasCorrected(true);
        boolean boolean24 = variance13.isBiasCorrected();
        double[] doubleArray31 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double32 = variance13.evaluate(doubleArray31);
        org.apache.commons.math.stat.descriptive.moment.Variance variance34 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray41 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double42 = variance34.evaluate(doubleArray41);
        variance34.setBiasCorrected(true);
        boolean boolean45 = variance34.isBiasCorrected();
        double[] doubleArray52 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double53 = variance34.evaluate(doubleArray52);
        double double56 = variance13.evaluate(doubleArray52, (int) (byte) 1, 0);
        double double58 = variance1.evaluate(doubleArray52, 2178.0d);
        variance1.increment(3267.0d);
        java.lang.Class<?> wildcardClass61 = variance1.getClass();
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 2168.222222222222d + "'", double9 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 2168.222222222222d + "'", double21 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 16.566666666666663d + "'", double32 == 16.566666666666663d);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 2168.222222222222d + "'", double42 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 16.566666666666663d + "'", double53 == 16.566666666666663d);
        org.junit.Assert.assertTrue(Double.isNaN(double56));
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 16.566666666418314d + "'", double58 == 16.566666666418314d);
        org.junit.Assert.assertNotNull(wildcardClass61);
    }

    @Test
    public void test0331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0331");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray8 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double9 = variance1.evaluate(doubleArray8);
        variance1.setBiasCorrected(true);
        long long12 = variance1.getN();
        variance1.clear();
        boolean boolean14 = variance1.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.Variance variance16 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray23 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double24 = variance16.evaluate(doubleArray23);
        variance16.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance28 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray35 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double36 = variance28.evaluate(doubleArray35);
        variance16.incrementAll(doubleArray35);
        variance16.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance40 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray47 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double48 = variance40.evaluate(doubleArray47);
        variance40.setBiasCorrected(true);
        boolean boolean51 = variance40.isBiasCorrected();
        double[] doubleArray58 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double59 = variance40.evaluate(doubleArray58);
        boolean boolean61 = variance40.equals((java.lang.Object) 10.0d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance63 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray70 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double71 = variance63.evaluate(doubleArray70);
        variance63.setBiasCorrected(true);
        boolean boolean74 = variance63.isBiasCorrected();
        double[] doubleArray81 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double82 = variance63.evaluate(doubleArray81);
        double double84 = variance40.evaluate(doubleArray81, (double) 0.0f);
        variance16.incrementAll(doubleArray81);
        double double86 = variance16.getResult();
        boolean boolean87 = variance1.equals((java.lang.Object) variance16);
        java.lang.Class<?> wildcardClass88 = variance1.getClass();
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 2168.222222222222d + "'", double9 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 2168.222222222222d + "'", double24 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 2168.222222222222d + "'", double36 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 2168.222222222222d + "'", double48 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 16.566666666666663d + "'", double59 == 16.566666666666663d);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 2168.222222222222d + "'", double71 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 16.566666666666663d + "'", double82 == 16.566666666666663d);
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 16.566666666666666d + "'", double84 == 16.566666666666666d);
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 16.56666666666667d + "'", double86 == 16.56666666666667d);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(wildcardClass88);
    }

    @Test
    public void test0332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0332");
        org.apache.commons.math.stat.descriptive.moment.Variance variance0 = new org.apache.commons.math.stat.descriptive.moment.Variance();
        double double1 = variance0.getResult();
        boolean boolean2 = variance0.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.Variance variance4 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double5 = variance4.getResult();
        double double6 = variance4.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance8 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray15 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double16 = variance8.evaluate(doubleArray15);
        variance8.clear();
        variance8.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance21 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        variance21.clear();
        double double23 = variance21.getResult();
        double[] doubleArray28 = new double[] { (-1), 2168.222222222222d, 16.566666666418314d, 10.0d };
        variance21.incrementAll(doubleArray28);
        boolean boolean30 = variance8.equals((java.lang.Object) doubleArray28);
        double double32 = variance4.evaluate(doubleArray28, (double) (-1.0f));
        double double34 = variance0.evaluate(doubleArray28, (double) (-1L));
        variance0.increment(2.25d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance38 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray45 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double46 = variance38.evaluate(doubleArray45);
        variance38.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance50 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray57 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double58 = variance50.evaluate(doubleArray57);
        variance38.incrementAll(doubleArray57);
        variance0.incrementAll(doubleArray57, (int) (byte) 1, 1);
        java.lang.Class<?> wildcardClass63 = doubleArray57.getClass();
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 2168.222222222222d + "'", double16 == 2168.222222222222d);
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-1.0, 2168.222222222222, 16.566666666418314, 10.0]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 1166128.5457099646d + "'", double32 == 1166128.5457099646d);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 1166128.5457099646d + "'", double34 == 1166128.5457099646d);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 2168.222222222222d + "'", double46 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 2168.222222222222d + "'", double58 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(wildcardClass63);
    }

    @Test
    public void test0333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0333");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray8 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double9 = variance1.evaluate(doubleArray8);
        variance1.setBiasCorrected(true);
        long long12 = variance1.getN();
        long long13 = variance1.getN();
        boolean boolean15 = variance1.equals((java.lang.Object) 16.566666666666663d);
        boolean boolean17 = variance1.equals((java.lang.Object) (short) 10);
        java.lang.Object obj18 = null;
        boolean boolean19 = variance1.equals(obj18);
        double[] doubleArray20 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double21 = variance1.evaluate(doubleArray20);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: input values array is null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 2168.222222222222d + "'", double9 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test0334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0334");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray8 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double9 = variance1.evaluate(doubleArray8);
        variance1.setBiasCorrected(true);
        boolean boolean12 = variance1.isBiasCorrected();
        double[] doubleArray19 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double20 = variance1.evaluate(doubleArray19);
        org.apache.commons.math.stat.descriptive.moment.Variance variance22 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray29 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double30 = variance22.evaluate(doubleArray29);
        variance22.setBiasCorrected(true);
        boolean boolean33 = variance22.isBiasCorrected();
        double[] doubleArray40 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double41 = variance22.evaluate(doubleArray40);
        double double44 = variance1.evaluate(doubleArray40, (int) (byte) 1, 0);
        variance1.setBiasCorrected(true);
        variance1.setBiasCorrected(true);
        double double49 = variance1.getResult();
        boolean boolean50 = variance1.isBiasCorrected();
        boolean boolean51 = variance1.isBiasCorrected();
        double double52 = variance1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance54 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double55 = variance54.getResult();
        double double56 = variance54.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance58 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray65 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double66 = variance58.evaluate(doubleArray65);
        variance58.setBiasCorrected(true);
        long long69 = variance58.getN();
        variance58.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance72 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray79 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double80 = variance72.evaluate(doubleArray79);
        double double81 = variance58.evaluate(doubleArray79);
        variance54.incrementAll(doubleArray79);
        // The following exception was thrown during execution in test generation
        try {
            double double86 = variance1.evaluate(doubleArray79, 100.0d, (int) (byte) 0, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 2168.222222222222d + "'", double9 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 16.566666666666663d + "'", double20 == 16.566666666666663d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 2168.222222222222d + "'", double30 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 16.566666666666663d + "'", double41 == 16.566666666666663d);
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertTrue(Double.isNaN(double49));
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double52));
        org.junit.Assert.assertTrue(Double.isNaN(double55));
        org.junit.Assert.assertTrue(Double.isNaN(double56));
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 2168.222222222222d + "'", double66 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + 0L + "'", long69 == 0L);
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 2168.222222222222d + "'", double80 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 2601.866666666667d + "'", double81 == 2601.866666666667d);
    }

    @Test
    public void test0335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0335");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = null;
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment1);
        variance2.clear();
        double[] doubleArray4 = new double[] {};
        variance2.incrementAll(doubleArray4);
        variance2.increment(2178.0d);
        variance2.setBiasCorrected(false);
        // The following exception was thrown during execution in test generation
        try {
            double double10 = variance2.getResult();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[]");
    }

    @Test
    public void test0336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0336");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray8 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double9 = variance1.evaluate(doubleArray8);
        variance1.setBiasCorrected(true);
        boolean boolean12 = variance1.isBiasCorrected();
        double[] doubleArray19 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double20 = variance1.evaluate(doubleArray19);
        double double21 = variance1.getResult();
        variance1.setBiasCorrected(true);
        long long24 = variance1.getN();
        variance1.setBiasCorrected(true);
        boolean boolean27 = variance1.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.Variance variance29 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray36 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double37 = variance29.evaluate(doubleArray36);
        variance29.setBiasCorrected(true);
        long long40 = variance29.getN();
        long long41 = variance29.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance43 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray50 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double51 = variance43.evaluate(doubleArray50);
        double[] doubleArray55 = new double[] { (byte) 1, (byte) 100, 1L };
        double double56 = variance43.evaluate(doubleArray55);
        double double58 = variance29.evaluate(doubleArray55, (double) 10.0f);
        // The following exception was thrown during execution in test generation
        try {
            variance1.incrementAll(doubleArray55, 100, 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 2168.222222222222d + "'", double9 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 16.566666666666663d + "'", double20 == 16.566666666666663d);
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 2168.222222222222d + "'", double37 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 2168.222222222222d + "'", double51 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0, 100.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 2178.0d + "'", double56 == 2178.0d);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 3267.0d + "'", double58 == 3267.0d);
    }

    @Test
    public void test0337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0337");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray8 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double9 = variance1.evaluate(doubleArray8);
        variance1.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance12 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray19 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double20 = variance12.evaluate(doubleArray19);
        variance12.setBiasCorrected(true);
        boolean boolean23 = variance12.isBiasCorrected();
        double[] doubleArray30 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double31 = variance12.evaluate(doubleArray30);
        double double32 = variance12.getResult();
        long long33 = variance12.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance35 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray42 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double43 = variance35.evaluate(doubleArray42);
        variance35.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance47 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray54 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double55 = variance47.evaluate(doubleArray54);
        variance47.setBiasCorrected(true);
        boolean boolean58 = variance47.isBiasCorrected();
        double[] doubleArray65 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double66 = variance47.evaluate(doubleArray65);
        org.apache.commons.math.stat.descriptive.moment.Variance variance68 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray75 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double76 = variance68.evaluate(doubleArray75);
        variance68.setBiasCorrected(true);
        boolean boolean79 = variance68.isBiasCorrected();
        double[] doubleArray86 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double87 = variance68.evaluate(doubleArray86);
        double double90 = variance47.evaluate(doubleArray86, (int) (byte) 1, 0);
        double double92 = variance35.evaluate(doubleArray86, 2178.0d);
        variance12.incrementAll(doubleArray86);
        double double94 = variance1.evaluate(doubleArray86);
        java.lang.Class<?> wildcardClass95 = doubleArray86.getClass();
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 2168.222222222222d + "'", double9 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 2168.222222222222d + "'", double20 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 16.566666666666663d + "'", double31 == 16.566666666666663d);
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 2168.222222222222d + "'", double43 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 2168.222222222222d + "'", double55 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 16.566666666666663d + "'", double66 == 16.566666666666663d);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 2168.222222222222d + "'", double76 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double87 + "' != '" + 16.566666666666663d + "'", double87 == 16.566666666666663d);
        org.junit.Assert.assertTrue(Double.isNaN(double90));
        org.junit.Assert.assertTrue("'" + double92 + "' != '" + 16.566666666418314d + "'", double92 == 16.566666666418314d);
        org.junit.Assert.assertTrue("'" + double94 + "' != '" + 13.805555555555552d + "'", double94 == 13.805555555555552d);
        org.junit.Assert.assertNotNull(wildcardClass95);
    }

    @Test
    public void test0338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0338");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray8 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double9 = variance1.evaluate(doubleArray8);
        variance1.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance13 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray20 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double21 = variance13.evaluate(doubleArray20);
        variance1.incrementAll(doubleArray20);
        variance1.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance25 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray32 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double33 = variance25.evaluate(doubleArray32);
        variance25.setBiasCorrected(true);
        boolean boolean36 = variance25.isBiasCorrected();
        double[] doubleArray43 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double44 = variance25.evaluate(doubleArray43);
        boolean boolean46 = variance25.equals((java.lang.Object) 10.0d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance48 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray55 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double56 = variance48.evaluate(doubleArray55);
        variance48.setBiasCorrected(true);
        boolean boolean59 = variance48.isBiasCorrected();
        double[] doubleArray66 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double67 = variance48.evaluate(doubleArray66);
        double double69 = variance25.evaluate(doubleArray66, (double) 0.0f);
        variance1.incrementAll(doubleArray66);
        double double71 = variance1.getResult();
        boolean boolean72 = variance1.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment74 = null;
        org.apache.commons.math.stat.descriptive.moment.Variance variance75 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment74);
        double[] doubleArray76 = new double[] {};
        double double79 = variance75.evaluate(doubleArray76, 0, 0);
        // The following exception was thrown during execution in test generation
        try {
            variance1.incrementAll(doubleArray76, (int) (short) 10, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 2168.222222222222d + "'", double9 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 2168.222222222222d + "'", double21 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 2168.222222222222d + "'", double33 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 16.566666666666663d + "'", double44 == 16.566666666666663d);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 2168.222222222222d + "'", double56 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 16.566666666666663d + "'", double67 == 16.566666666666663d);
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 16.566666666666666d + "'", double69 == 16.566666666666666d);
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 16.56666666666667d + "'", double71 == 16.56666666666667d);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double79));
    }

    @Test
    public void test0339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0339");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray8 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double9 = variance1.evaluate(doubleArray8);
        variance1.setBiasCorrected(true);
        long long12 = variance1.getN();
        variance1.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance15 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray22 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double23 = variance15.evaluate(doubleArray22);
        double double24 = variance1.evaluate(doubleArray22);
        boolean boolean25 = variance1.isBiasCorrected();
        double[] doubleArray26 = null;
        // The following exception was thrown during execution in test generation
        try {
            variance1.incrementAll(doubleArray26, (int) ' ', 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: input value array is null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 2168.222222222222d + "'", double9 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 2168.222222222222d + "'", double23 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 2601.866666666667d + "'", double24 == 2601.866666666667d);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
    }

    @Test
    public void test0340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0340");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray8 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double9 = variance1.evaluate(doubleArray8);
        variance1.clear();
        variance1.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double15 = variance14.getResult();
        double double16 = variance14.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance18 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray25 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double26 = variance18.evaluate(doubleArray25);
        variance18.clear();
        variance18.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance31 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        variance31.clear();
        double double33 = variance31.getResult();
        double[] doubleArray38 = new double[] { (-1), 2168.222222222222d, 16.566666666418314d, 10.0d };
        variance31.incrementAll(doubleArray38);
        boolean boolean40 = variance18.equals((java.lang.Object) doubleArray38);
        double double42 = variance14.evaluate(doubleArray38, (double) (-1.0f));
        // The following exception was thrown during execution in test generation
        try {
            double double46 = variance1.evaluate(doubleArray38, 3267.0d, 0, 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 2168.222222222222d + "'", double9 == 2168.222222222222d);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 2168.222222222222d + "'", double26 == 2168.222222222222d);
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[-1.0, 2168.222222222222, 16.566666666418314, 10.0]");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 1166128.5457099646d + "'", double42 == 1166128.5457099646d);
    }

    @Test
    public void test0341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0341");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray8 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double9 = variance1.evaluate(doubleArray8);
        variance1.setBiasCorrected(true);
        long long12 = variance1.getN();
        long long13 = variance1.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance15 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray22 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double23 = variance15.evaluate(doubleArray22);
        double[] doubleArray27 = new double[] { (byte) 1, (byte) 100, 1L };
        double double28 = variance15.evaluate(doubleArray27);
        double double30 = variance1.evaluate(doubleArray27, (double) 10.0f);
        org.apache.commons.math.stat.descriptive.moment.Variance variance32 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        variance32.clear();
        boolean boolean34 = variance32.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.Variance variance36 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray43 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double44 = variance36.evaluate(doubleArray43);
        variance36.setBiasCorrected(true);
        long long47 = variance36.getN();
        long long48 = variance36.getN();
        double double49 = variance36.getResult();
        variance36.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance52 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray59 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double60 = variance52.evaluate(doubleArray59);
        double[] doubleArray64 = new double[] { (byte) 1, (byte) 100, 1L };
        double double65 = variance52.evaluate(doubleArray64);
        org.apache.commons.math.stat.descriptive.moment.Variance variance67 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray74 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double75 = variance67.evaluate(doubleArray74);
        variance67.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance79 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray86 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double87 = variance79.evaluate(doubleArray86);
        variance67.incrementAll(doubleArray86);
        variance52.incrementAll(doubleArray86);
        double double90 = variance36.evaluate(doubleArray86);
        double double91 = variance32.evaluate(doubleArray86);
        double double92 = variance1.evaluate(doubleArray86);
        boolean boolean93 = variance1.isBiasCorrected();
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 2168.222222222222d + "'", double9 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 2168.222222222222d + "'", double23 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0, 100.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 2178.0d + "'", double28 == 2178.0d);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 3267.0d + "'", double30 == 3267.0d);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 2168.222222222222d + "'", double44 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 0L + "'", long48 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double49));
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 2168.222222222222d + "'", double60 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[1.0, 100.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 2178.0d + "'", double65 == 2178.0d);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 2168.222222222222d + "'", double75 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double87 + "' != '" + 2168.222222222222d + "'", double87 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + 2601.866666666667d + "'", double90 == 2601.866666666667d);
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 2168.222222222222d + "'", double91 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + double92 + "' != '" + 2601.866666666667d + "'", double92 == 2601.866666666667d);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + true + "'", boolean93 == true);
    }

    @Test
    public void test0342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0342");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        variance1.clear();
        boolean boolean3 = variance1.isBiasCorrected();
        boolean boolean5 = variance1.equals((java.lang.Object) 1166128.5457099646d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance7 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray14 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double15 = variance7.evaluate(doubleArray14);
        org.apache.commons.math.stat.descriptive.moment.Variance variance17 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray24 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double25 = variance17.evaluate(doubleArray24);
        variance17.setBiasCorrected(true);
        boolean boolean28 = variance17.isBiasCorrected();
        double[] doubleArray35 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double36 = variance17.evaluate(doubleArray35);
        org.apache.commons.math.stat.descriptive.moment.Variance variance38 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray45 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double46 = variance38.evaluate(doubleArray45);
        variance38.setBiasCorrected(true);
        boolean boolean49 = variance38.isBiasCorrected();
        double[] doubleArray56 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double57 = variance38.evaluate(doubleArray56);
        double double60 = variance17.evaluate(doubleArray56, (int) (byte) 1, 0);
        variance17.setBiasCorrected(true);
        boolean boolean63 = variance7.equals((java.lang.Object) true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance65 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray72 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double73 = variance65.evaluate(doubleArray72);
        double double75 = variance7.evaluate(doubleArray72, 874596.4092824734d);
        double double77 = variance1.evaluate(doubleArray72, (double) 100L);
        java.lang.Class<?> wildcardClass78 = doubleArray72.getClass();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 2168.222222222222d + "'", double15 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 2168.222222222222d + "'", double25 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 16.566666666666663d + "'", double36 == 16.566666666666663d);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 2168.222222222222d + "'", double46 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 16.566666666666663d + "'", double57 == 16.566666666666663d);
        org.junit.Assert.assertTrue(Double.isNaN(double60));
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 2168.222222222222d + "'", double73 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 2168.2220052083335d + "'", double75 == 2168.2220052083335d);
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 2168.222222222222d + "'", double77 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(wildcardClass78);
    }

    @Test
    public void test0343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0343");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = null;
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment1);
        variance2.increment(0.0d);
        variance2.clear();
        variance2.increment((double) (-1));
        boolean boolean8 = variance2.isBiasCorrected();
        variance2.increment((double) '4');
        // The following exception was thrown during execution in test generation
        try {
            long long11 = variance2.getN();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
    }

    @Test
    public void test0344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0344");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = null;
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment1);
        variance2.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance5 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray12 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double13 = variance5.evaluate(doubleArray12);
        variance5.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance17 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray24 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double25 = variance17.evaluate(doubleArray24);
        variance5.incrementAll(doubleArray24);
        variance5.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance29 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray36 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double37 = variance29.evaluate(doubleArray36);
        variance29.setBiasCorrected(true);
        boolean boolean40 = variance29.isBiasCorrected();
        double[] doubleArray47 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double48 = variance29.evaluate(doubleArray47);
        boolean boolean50 = variance29.equals((java.lang.Object) 10.0d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance52 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray59 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double60 = variance52.evaluate(doubleArray59);
        variance52.setBiasCorrected(true);
        boolean boolean63 = variance52.isBiasCorrected();
        double[] doubleArray70 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double71 = variance52.evaluate(doubleArray70);
        double double73 = variance29.evaluate(doubleArray70, (double) 0.0f);
        variance5.incrementAll(doubleArray70);
        // The following exception was thrown during execution in test generation
        try {
            variance2.incrementAll(doubleArray70, 100, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 2168.222222222222d + "'", double13 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 2168.222222222222d + "'", double25 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 2168.222222222222d + "'", double37 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 16.566666666666663d + "'", double48 == 16.566666666666663d);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 2168.222222222222d + "'", double60 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 16.566666666666663d + "'", double71 == 16.566666666666663d);
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 16.566666666666666d + "'", double73 == 16.566666666666666d);
    }

    @Test
    public void test0345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0345");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        variance1.clear();
        double double3 = variance1.getResult();
        double double4 = variance1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance6 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray13 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double14 = variance6.evaluate(doubleArray13);
        double[] doubleArray18 = new double[] { (byte) 1, (byte) 100, 1L };
        double double19 = variance6.evaluate(doubleArray18);
        org.apache.commons.math.stat.descriptive.moment.Variance variance21 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray28 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double29 = variance21.evaluate(doubleArray28);
        variance21.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance33 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray40 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double41 = variance33.evaluate(doubleArray40);
        variance21.incrementAll(doubleArray40);
        variance6.incrementAll(doubleArray40);
        variance1.incrementAll(doubleArray40);
        long long45 = variance1.getN();
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 2168.222222222222d + "'", double14 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, 100.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 2178.0d + "'", double19 == 2178.0d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 2168.222222222222d + "'", double29 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 2168.222222222222d + "'", double41 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 6L + "'", long45 == 6L);
    }

    @Test
    public void test0346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0346");
        org.apache.commons.math.stat.descriptive.moment.Variance variance0 = new org.apache.commons.math.stat.descriptive.moment.Variance();
        double double1 = variance0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance3 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray10 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double11 = variance3.evaluate(doubleArray10);
        variance3.setBiasCorrected(true);
        long long14 = variance3.getN();
        long long15 = variance3.getN();
        boolean boolean17 = variance3.equals((java.lang.Object) 16.566666666666663d);
        boolean boolean19 = variance3.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance21 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray28 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double29 = variance21.evaluate(doubleArray28);
        variance21.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance33 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray40 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double41 = variance33.evaluate(doubleArray40);
        variance33.setBiasCorrected(true);
        boolean boolean44 = variance33.isBiasCorrected();
        double[] doubleArray51 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double52 = variance33.evaluate(doubleArray51);
        org.apache.commons.math.stat.descriptive.moment.Variance variance54 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray61 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double62 = variance54.evaluate(doubleArray61);
        variance54.setBiasCorrected(true);
        boolean boolean65 = variance54.isBiasCorrected();
        double[] doubleArray72 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double73 = variance54.evaluate(doubleArray72);
        double double76 = variance33.evaluate(doubleArray72, (int) (byte) 1, 0);
        double double78 = variance21.evaluate(doubleArray72, 2178.0d);
        double double79 = variance3.evaluate(doubleArray72);
        boolean boolean80 = variance0.equals((java.lang.Object) double79);
        double[] doubleArray81 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double84 = variance0.evaluate(doubleArray81, (int) (short) 1, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: input value array is null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 2168.222222222222d + "'", double11 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 2168.222222222222d + "'", double29 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 2168.222222222222d + "'", double41 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 16.566666666666663d + "'", double52 == 16.566666666666663d);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 2168.222222222222d + "'", double62 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 16.566666666666663d + "'", double73 == 16.566666666666663d);
        org.junit.Assert.assertTrue(Double.isNaN(double76));
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 16.566666666418314d + "'", double78 == 16.566666666418314d);
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 16.566666666666663d + "'", double79 == 16.566666666666663d);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
    }

    @Test
    public void test0347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0347");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray8 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double9 = variance1.evaluate(doubleArray8);
        variance1.setBiasCorrected(true);
        long long12 = variance1.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray21 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double22 = variance14.evaluate(doubleArray21);
        variance14.clear();
        variance14.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance27 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        variance27.clear();
        double double29 = variance27.getResult();
        double[] doubleArray34 = new double[] { (-1), 2168.222222222222d, 16.566666666418314d, 10.0d };
        variance27.incrementAll(doubleArray34);
        boolean boolean36 = variance14.equals((java.lang.Object) doubleArray34);
        variance1.incrementAll(doubleArray34);
        org.apache.commons.math.stat.descriptive.moment.Variance variance39 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray46 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double47 = variance39.evaluate(doubleArray46);
        variance39.setBiasCorrected(true);
        long long50 = variance39.getN();
        long long51 = variance39.getN();
        boolean boolean53 = variance39.equals((java.lang.Object) 16.566666666666663d);
        boolean boolean54 = variance1.equals((java.lang.Object) variance39);
        org.apache.commons.math.stat.descriptive.moment.Variance variance56 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray63 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double64 = variance56.evaluate(doubleArray63);
        variance56.setBiasCorrected(true);
        variance56.increment((double) (byte) 0);
        double[] doubleArray71 = new double[] { 'a', 100L };
        double double73 = variance56.evaluate(doubleArray71, 0.0d);
        double double74 = variance39.evaluate(doubleArray71);
        variance39.setBiasCorrected(true);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 2168.222222222222d + "'", double9 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 2168.222222222222d + "'", double22 == 2168.222222222222d);
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[-1.0, 2168.222222222222, 16.566666666418314, 10.0]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 2168.222222222222d + "'", double47 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 0L + "'", long50 == 0L);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 0L + "'", long51 == 0L);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 2168.222222222222d + "'", double64 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[97.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 4.5d + "'", double73 == 4.5d);
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 4.5d + "'", double74 == 4.5d);
    }

    @Test
    public void test0348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0348");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray8 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double9 = variance1.evaluate(doubleArray8);
        variance1.setBiasCorrected(true);
        long long12 = variance1.getN();
        long long13 = variance1.getN();
        double double14 = variance1.getResult();
        long long15 = variance1.getN();
        variance1.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance18 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray25 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double26 = variance18.evaluate(doubleArray25);
        variance18.clear();
        variance18.setBiasCorrected(false);
        variance18.increment(2178.0d);
        boolean boolean32 = variance1.equals((java.lang.Object) 2178.0d);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 2168.222222222222d + "'", double9 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 2168.222222222222d + "'", double26 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test0349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0349");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray8 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double9 = variance1.evaluate(doubleArray8);
        variance1.setBiasCorrected(true);
        long long12 = variance1.getN();
        variance1.clear();
        double double14 = variance1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance16 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray23 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double24 = variance16.evaluate(doubleArray23);
        variance16.setBiasCorrected(true);
        boolean boolean27 = variance16.isBiasCorrected();
        double[] doubleArray34 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double35 = variance16.evaluate(doubleArray34);
        boolean boolean37 = variance16.equals((java.lang.Object) 10.0d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance39 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray46 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double47 = variance39.evaluate(doubleArray46);
        variance39.setBiasCorrected(true);
        boolean boolean50 = variance39.isBiasCorrected();
        double[] doubleArray57 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double58 = variance39.evaluate(doubleArray57);
        double double60 = variance16.evaluate(doubleArray57, (double) 0.0f);
        variance1.incrementAll(doubleArray57);
        double double62 = variance1.getResult();
        double double63 = variance1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance64 = new org.apache.commons.math.stat.descriptive.moment.Variance();
        double double65 = variance64.getResult();
        boolean boolean66 = variance64.isBiasCorrected();
        boolean boolean67 = variance1.equals((java.lang.Object) boolean66);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 2168.222222222222d + "'", double9 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 2168.222222222222d + "'", double24 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 16.566666666666663d + "'", double35 == 16.566666666666663d);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 2168.222222222222d + "'", double47 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 16.566666666666663d + "'", double58 == 16.566666666666663d);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 16.566666666666666d + "'", double60 == 16.566666666666666d);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 16.56666666666667d + "'", double62 == 16.56666666666667d);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 16.56666666666667d + "'", double63 == 16.56666666666667d);
        org.junit.Assert.assertTrue(Double.isNaN(double65));
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
    }

    @Test
    public void test0350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0350");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = null;
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment1);
        variance2.clear();
        double[] doubleArray4 = new double[] {};
        variance2.incrementAll(doubleArray4);
        variance2.increment(2178.0d);
        variance2.clear();
        variance2.increment((double) 10L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance12 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        variance12.clear();
        boolean boolean14 = variance12.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.Variance variance16 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray23 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double24 = variance16.evaluate(doubleArray23);
        variance16.setBiasCorrected(true);
        long long27 = variance16.getN();
        long long28 = variance16.getN();
        double double29 = variance16.getResult();
        variance16.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance32 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray39 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double40 = variance32.evaluate(doubleArray39);
        double[] doubleArray44 = new double[] { (byte) 1, (byte) 100, 1L };
        double double45 = variance32.evaluate(doubleArray44);
        org.apache.commons.math.stat.descriptive.moment.Variance variance47 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray54 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double55 = variance47.evaluate(doubleArray54);
        variance47.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance59 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray66 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double67 = variance59.evaluate(doubleArray66);
        variance47.incrementAll(doubleArray66);
        variance32.incrementAll(doubleArray66);
        double double70 = variance16.evaluate(doubleArray66);
        double double71 = variance12.evaluate(doubleArray66);
        // The following exception was thrown during execution in test generation
        try {
            variance2.incrementAll(doubleArray66, (int) (short) 100, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[]");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 2168.222222222222d + "'", double24 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 2168.222222222222d + "'", double40 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0, 100.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 2178.0d + "'", double45 == 2178.0d);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 2168.222222222222d + "'", double55 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 2168.222222222222d + "'", double67 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 2601.866666666667d + "'", double70 == 2601.866666666667d);
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 2168.222222222222d + "'", double71 == 2168.222222222222d);
    }

    @Test
    public void test0351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0351");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray8 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double9 = variance1.evaluate(doubleArray8);
        double double10 = variance1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance12 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        variance12.clear();
        boolean boolean14 = variance12.isBiasCorrected();
        boolean boolean16 = variance12.equals((java.lang.Object) 1166128.5457099646d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance18 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray25 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double26 = variance18.evaluate(doubleArray25);
        variance18.setBiasCorrected(true);
        boolean boolean29 = variance18.isBiasCorrected();
        double[] doubleArray36 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double37 = variance18.evaluate(doubleArray36);
        org.apache.commons.math.stat.descriptive.moment.Variance variance39 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray46 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double47 = variance39.evaluate(doubleArray46);
        variance39.setBiasCorrected(true);
        boolean boolean50 = variance39.isBiasCorrected();
        double[] doubleArray57 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double58 = variance39.evaluate(doubleArray57);
        double double61 = variance18.evaluate(doubleArray57, (int) (byte) 1, 0);
        variance18.setBiasCorrected(true);
        variance18.setBiasCorrected(true);
        double double66 = variance18.getResult();
        boolean boolean67 = variance18.isBiasCorrected();
        boolean boolean68 = variance18.isBiasCorrected();
        variance18.increment(0.0d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance72 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray79 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double80 = variance72.evaluate(doubleArray79);
        variance18.incrementAll(doubleArray79, (int) (byte) 0, 1);
        variance12.incrementAll(doubleArray79);
        // The following exception was thrown during execution in test generation
        try {
            double double87 = variance1.evaluate(doubleArray79, (int) (byte) -1, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: start position cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 2168.222222222222d + "'", double9 == 2168.222222222222d);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 2168.222222222222d + "'", double26 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 16.566666666666663d + "'", double37 == 16.566666666666663d);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 2168.222222222222d + "'", double47 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 16.566666666666663d + "'", double58 == 16.566666666666663d);
        org.junit.Assert.assertTrue(Double.isNaN(double61));
        org.junit.Assert.assertTrue(Double.isNaN(double66));
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 2168.222222222222d + "'", double80 == 2168.222222222222d);
    }

    @Test
    public void test0352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0352");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray8 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double9 = variance1.evaluate(doubleArray8);
        variance1.setBiasCorrected(true);
        boolean boolean12 = variance1.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray21 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double22 = variance14.evaluate(doubleArray21);
        variance14.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance26 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray33 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double34 = variance26.evaluate(doubleArray33);
        variance26.setBiasCorrected(true);
        boolean boolean37 = variance26.isBiasCorrected();
        double[] doubleArray44 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double45 = variance26.evaluate(doubleArray44);
        double double48 = variance14.evaluate(doubleArray44, (int) (byte) 1, (int) (byte) 0);
        double double51 = variance1.evaluate(doubleArray44, (int) (byte) 1, 0);
        variance1.setBiasCorrected(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance55 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray62 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double63 = variance55.evaluate(doubleArray62);
        variance55.setBiasCorrected(true);
        long long66 = variance55.getN();
        long long67 = variance55.getN();
        boolean boolean68 = variance55.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.Variance variance70 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray77 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double78 = variance70.evaluate(doubleArray77);
        double[] doubleArray82 = new double[] { (byte) 1, (byte) 100, 1L };
        double double83 = variance70.evaluate(doubleArray82);
        variance55.incrementAll(doubleArray82, (int) (short) 1, 0);
        variance55.clear();
        boolean boolean88 = variance1.equals((java.lang.Object) variance55);
        boolean boolean89 = variance55.isBiasCorrected();
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 2168.222222222222d + "'", double9 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 2168.222222222222d + "'", double22 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 2168.222222222222d + "'", double34 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 16.566666666666663d + "'", double45 == 16.566666666666663d);
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertTrue(Double.isNaN(double51));
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 2168.222222222222d + "'", double63 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 0L + "'", long66 == 0L);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 0L + "'", long67 == 0L);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 2168.222222222222d + "'", double78 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[1.0, 100.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 2178.0d + "'", double83 == 2178.0d);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
    }

    @Test
    public void test0353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0353");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray8 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double9 = variance1.evaluate(doubleArray8);
        double[] doubleArray13 = new double[] { (byte) 1, (byte) 100, 1L };
        double double14 = variance1.evaluate(doubleArray13);
        org.apache.commons.math.stat.descriptive.moment.Variance variance16 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray23 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double24 = variance16.evaluate(doubleArray23);
        variance16.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance28 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray35 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double36 = variance28.evaluate(doubleArray35);
        variance16.incrementAll(doubleArray35);
        variance1.incrementAll(doubleArray35);
        variance1.increment((double) (short) -1);
        variance1.setBiasCorrected(true);
        boolean boolean43 = variance1.isBiasCorrected();
        java.lang.Class<?> wildcardClass44 = variance1.getClass();
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 2168.222222222222d + "'", double9 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, 100.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 2178.0d + "'", double14 == 2178.0d);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 2168.222222222222d + "'", double24 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 2168.222222222222d + "'", double36 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(wildcardClass44);
    }

    @Test
    public void test0354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0354");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray8 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double9 = variance1.evaluate(doubleArray8);
        double[] doubleArray13 = new double[] { (byte) 1, (byte) 100, 1L };
        double double14 = variance1.evaluate(doubleArray13);
        org.apache.commons.math.stat.descriptive.moment.Variance variance16 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray23 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double24 = variance16.evaluate(doubleArray23);
        variance16.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance28 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray35 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double36 = variance28.evaluate(doubleArray35);
        variance16.incrementAll(doubleArray35);
        variance1.incrementAll(doubleArray35);
        boolean boolean40 = variance1.equals((java.lang.Object) (byte) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance42 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray49 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double50 = variance42.evaluate(doubleArray49);
        variance42.setBiasCorrected(true);
        long long53 = variance42.getN();
        variance42.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance56 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray63 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double64 = variance56.evaluate(doubleArray63);
        double double65 = variance42.evaluate(doubleArray63);
        org.apache.commons.math.stat.descriptive.moment.Variance variance67 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double68 = variance67.getResult();
        double double69 = variance67.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance71 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray78 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double79 = variance71.evaluate(doubleArray78);
        variance71.setBiasCorrected(true);
        long long82 = variance71.getN();
        variance71.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance85 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray92 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double93 = variance85.evaluate(doubleArray92);
        double double94 = variance71.evaluate(doubleArray92);
        variance67.incrementAll(doubleArray92);
        double double96 = variance42.evaluate(doubleArray92);
        double double97 = variance1.evaluate(doubleArray92);
        variance1.setBiasCorrected(false);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 2168.222222222222d + "'", double9 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, 100.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 2178.0d + "'", double14 == 2178.0d);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 2168.222222222222d + "'", double24 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 2168.222222222222d + "'", double36 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 2168.222222222222d + "'", double50 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 0L + "'", long53 == 0L);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 2168.222222222222d + "'", double64 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 2601.866666666667d + "'", double65 == 2601.866666666667d);
        org.junit.Assert.assertTrue(Double.isNaN(double68));
        org.junit.Assert.assertTrue(Double.isNaN(double69));
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 2168.222222222222d + "'", double79 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + long82 + "' != '" + 0L + "'", long82 == 0L);
        org.junit.Assert.assertNotNull(doubleArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray92), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double93 + "' != '" + 2168.222222222222d + "'", double93 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + double94 + "' != '" + 2601.866666666667d + "'", double94 == 2601.866666666667d);
        org.junit.Assert.assertTrue("'" + double96 + "' != '" + 2601.866666666667d + "'", double96 == 2601.866666666667d);
        org.junit.Assert.assertTrue("'" + double97 + "' != '" + 2168.222222222222d + "'", double97 == 2168.222222222222d);
    }

    @Test
    public void test0355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0355");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray8 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double9 = variance1.evaluate(doubleArray8);
        variance1.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance13 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray20 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double21 = variance13.evaluate(doubleArray20);
        variance13.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance25 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray32 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double33 = variance25.evaluate(doubleArray32);
        variance25.setBiasCorrected(true);
        boolean boolean36 = variance25.isBiasCorrected();
        double[] doubleArray43 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double44 = variance25.evaluate(doubleArray43);
        double double47 = variance13.evaluate(doubleArray43, (int) (byte) 1, (int) (byte) 0);
        variance1.incrementAll(doubleArray43, (int) (byte) 1, 1);
        org.apache.commons.math.stat.descriptive.moment.Variance variance52 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray59 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double60 = variance52.evaluate(doubleArray59);
        variance52.setBiasCorrected(true);
        boolean boolean63 = variance52.isBiasCorrected();
        double[] doubleArray70 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double71 = variance52.evaluate(doubleArray70);
        org.apache.commons.math.stat.descriptive.moment.Variance variance73 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray80 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double81 = variance73.evaluate(doubleArray80);
        variance73.setBiasCorrected(true);
        boolean boolean84 = variance73.isBiasCorrected();
        double[] doubleArray91 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double92 = variance73.evaluate(doubleArray91);
        double double95 = variance52.evaluate(doubleArray91, (int) (byte) 1, 0);
        variance1.incrementAll(doubleArray91);
        java.lang.Class<?> wildcardClass97 = doubleArray91.getClass();
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 2168.222222222222d + "'", double9 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 2168.222222222222d + "'", double21 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 2168.222222222222d + "'", double33 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 16.566666666666663d + "'", double44 == 16.566666666666663d);
        org.junit.Assert.assertTrue(Double.isNaN(double47));
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 2168.222222222222d + "'", double60 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 16.566666666666663d + "'", double71 == 16.566666666666663d);
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 2168.222222222222d + "'", double81 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray91), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double92 + "' != '" + 16.566666666666663d + "'", double92 == 16.566666666666663d);
        org.junit.Assert.assertTrue(Double.isNaN(double95));
        org.junit.Assert.assertNotNull(wildcardClass97);
    }

    @Test
    public void test0356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0356");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray8 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double9 = variance1.evaluate(doubleArray8);
        long long10 = variance1.getN();
        variance1.increment(874596.4092824734d);
        variance1.increment((double) (byte) 100);
        org.apache.commons.math.stat.descriptive.moment.Variance variance16 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray23 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double24 = variance16.evaluate(doubleArray23);
        double[] doubleArray28 = new double[] { (byte) 1, (byte) 100, 1L };
        double double29 = variance16.evaluate(doubleArray28);
        org.apache.commons.math.stat.descriptive.moment.Variance variance31 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray38 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double39 = variance31.evaluate(doubleArray38);
        variance31.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance43 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray50 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double51 = variance43.evaluate(doubleArray50);
        variance31.incrementAll(doubleArray50);
        variance16.incrementAll(doubleArray50);
        variance1.incrementAll(doubleArray50);
        java.lang.Class<?> wildcardClass55 = doubleArray50.getClass();
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 2168.222222222222d + "'", double9 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 2168.222222222222d + "'", double24 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, 100.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 2178.0d + "'", double29 == 2178.0d);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 2168.222222222222d + "'", double39 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 2168.222222222222d + "'", double51 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(wildcardClass55);
    }

    @Test
    public void test0357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0357");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray8 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double9 = variance1.evaluate(doubleArray8);
        long long10 = variance1.getN();
        variance1.increment((double) (byte) 1);
        variance1.increment((double) 6L);
        double double15 = variance1.getResult();
        variance1.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance18 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray25 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double26 = variance18.evaluate(doubleArray25);
        variance18.setBiasCorrected(true);
        boolean boolean29 = variance18.isBiasCorrected();
        double[] doubleArray36 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double37 = variance18.evaluate(doubleArray36);
        double double38 = variance1.evaluate(doubleArray36);
        java.lang.Class<?> wildcardClass39 = variance1.getClass();
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 2168.222222222222d + "'", double9 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 6.25d + "'", double15 == 6.25d);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 2168.222222222222d + "'", double26 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 16.566666666666663d + "'", double37 == 16.566666666666663d);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 13.805555555555552d + "'", double38 == 13.805555555555552d);
        org.junit.Assert.assertNotNull(wildcardClass39);
    }

    @Test
    public void test0358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0358");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray8 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double9 = variance1.evaluate(doubleArray8);
        variance1.setBiasCorrected(true);
        long long12 = variance1.getN();
        variance1.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance15 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray22 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double23 = variance15.evaluate(doubleArray22);
        double double24 = variance1.evaluate(doubleArray22);
        boolean boolean25 = variance1.isBiasCorrected();
        double double26 = variance1.getResult();
        boolean boolean27 = variance1.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.Variance variance29 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray36 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double37 = variance29.evaluate(doubleArray36);
        variance29.setBiasCorrected(true);
        variance29.increment((double) (byte) 0);
        double[] doubleArray44 = new double[] { 'a', 100L };
        double double46 = variance29.evaluate(doubleArray44, 0.0d);
        double double47 = variance29.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance49 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        variance49.clear();
        double double51 = variance49.getResult();
        double[] doubleArray56 = new double[] { (-1), 2168.222222222222d, 16.566666666418314d, 10.0d };
        variance49.incrementAll(doubleArray56);
        variance29.incrementAll(doubleArray56, (int) (short) 1, 1);
        // The following exception was thrown during execution in test generation
        try {
            variance1.incrementAll(doubleArray56, (int) '#', (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 2168.222222222222d + "'", double9 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 2168.222222222222d + "'", double23 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 2601.866666666667d + "'", double24 == 2601.866666666667d);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 2168.222222222222d + "'", double37 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[97.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 4.5d + "'", double46 == 4.5d);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.0d + "'", double47 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double51));
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[-1.0, 2168.222222222222, 16.566666666418314, 10.0]");
    }

    @Test
    public void test0359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0359");
        org.apache.commons.math.stat.descriptive.moment.Variance variance0 = new org.apache.commons.math.stat.descriptive.moment.Variance();
        variance0.increment(1694.7000000000003d);
        boolean boolean3 = variance0.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.Variance variance5 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray12 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double13 = variance5.evaluate(doubleArray12);
        variance5.setBiasCorrected(true);
        boolean boolean16 = variance5.isBiasCorrected();
        double[] doubleArray23 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double24 = variance5.evaluate(doubleArray23);
        double double25 = variance5.getResult();
        variance5.setBiasCorrected(true);
        long long28 = variance5.getN();
        variance5.setBiasCorrected(true);
        boolean boolean31 = variance5.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.Variance variance33 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        variance33.clear();
        double double35 = variance33.getResult();
        double[] doubleArray40 = new double[] { (-1), 2168.222222222222d, 16.566666666418314d, 10.0d };
        variance33.incrementAll(doubleArray40);
        org.apache.commons.math.stat.descriptive.moment.Variance variance43 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray50 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double51 = variance43.evaluate(doubleArray50);
        variance43.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance55 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray62 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double63 = variance55.evaluate(doubleArray62);
        variance43.incrementAll(doubleArray62);
        variance43.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance67 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray74 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double75 = variance67.evaluate(doubleArray74);
        double[] doubleArray79 = new double[] { (byte) 1, (byte) 100, 1L };
        double double80 = variance67.evaluate(doubleArray79);
        variance43.incrementAll(doubleArray79, (int) (byte) 0, (int) (byte) 1);
        double double87 = variance33.evaluate(doubleArray79, (double) 'a', (int) (short) 1, (int) (short) 1);
        double double89 = variance5.evaluate(doubleArray79, 13.805555555555552d);
        double double91 = variance0.evaluate(doubleArray79, 16.56666666666674d);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 2168.222222222222d + "'", double13 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 16.566666666666663d + "'", double24 == 16.566666666666663d);
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[-1.0, 2168.222222222222, 16.566666666418314, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 2168.222222222222d + "'", double51 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 2168.222222222222d + "'", double63 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 2168.222222222222d + "'", double75 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1.0, 100.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 2178.0d + "'", double80 == 2178.0d);
        org.junit.Assert.assertTrue("'" + double87 + "' != '" + 0.0d + "'", double87 == 0.0d);
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + 3266.9999999999995d + "'", double89 == 3266.9999999999995d);
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 3266.9999999999995d + "'", double91 == 3266.9999999999995d);
    }

    @Test
    public void test0360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0360");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray8 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double9 = variance1.evaluate(doubleArray8);
        variance1.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance13 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        variance13.clear();
        double double15 = variance13.getResult();
        double[] doubleArray20 = new double[] { (-1), 2168.222222222222d, 16.566666666418314d, 10.0d };
        variance13.incrementAll(doubleArray20);
        variance1.incrementAll(doubleArray20);
        variance1.clear();
        java.lang.Class<?> wildcardClass24 = variance1.getClass();
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 2168.222222222222d + "'", double9 == 2168.222222222222d);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-1.0, 2168.222222222222, 16.566666666418314, 10.0]");
        org.junit.Assert.assertNotNull(wildcardClass24);
    }

    @Test
    public void test0361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0361");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = null;
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment1);
        double[] doubleArray3 = new double[] {};
        double double6 = variance2.evaluate(doubleArray3, 0, 0);
        boolean boolean8 = variance2.equals((java.lang.Object) 10.0f);
        boolean boolean9 = variance2.isBiasCorrected();
        variance2.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance12 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray19 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double20 = variance12.evaluate(doubleArray19);
        variance12.setBiasCorrected(true);
        long long23 = variance12.getN();
        double double24 = variance12.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance26 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray33 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double34 = variance26.evaluate(doubleArray33);
        variance26.setBiasCorrected(true);
        long long37 = variance26.getN();
        long long38 = variance26.getN();
        double double39 = variance26.getResult();
        variance26.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance42 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray49 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double50 = variance42.evaluate(doubleArray49);
        double[] doubleArray54 = new double[] { (byte) 1, (byte) 100, 1L };
        double double55 = variance42.evaluate(doubleArray54);
        org.apache.commons.math.stat.descriptive.moment.Variance variance57 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray64 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double65 = variance57.evaluate(doubleArray64);
        variance57.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance69 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray76 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double77 = variance69.evaluate(doubleArray76);
        variance57.incrementAll(doubleArray76);
        variance42.incrementAll(doubleArray76);
        double double80 = variance26.evaluate(doubleArray76);
        double double81 = variance12.evaluate(doubleArray76);
        // The following exception was thrown during execution in test generation
        try {
            double double85 = variance2.evaluate(doubleArray76, (double) 10, 0, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: length cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 2168.222222222222d + "'", double20 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 2168.222222222222d + "'", double34 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 2168.222222222222d + "'", double50 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0, 100.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 2178.0d + "'", double55 == 2178.0d);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 2168.222222222222d + "'", double65 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 2168.222222222222d + "'", double77 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 2601.866666666667d + "'", double80 == 2601.866666666667d);
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 2601.866666666667d + "'", double81 == 2601.866666666667d);
    }

    @Test
    public void test0362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0362");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray8 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double9 = variance1.evaluate(doubleArray8);
        variance1.setBiasCorrected(true);
        long long12 = variance1.getN();
        long long13 = variance1.getN();
        boolean boolean14 = variance1.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.Variance variance16 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray23 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double24 = variance16.evaluate(doubleArray23);
        variance16.setBiasCorrected(true);
        boolean boolean27 = variance16.isBiasCorrected();
        double[] doubleArray34 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double35 = variance16.evaluate(doubleArray34);
        org.apache.commons.math.stat.descriptive.moment.Variance variance37 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray44 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double45 = variance37.evaluate(doubleArray44);
        variance37.setBiasCorrected(true);
        boolean boolean48 = variance37.isBiasCorrected();
        double[] doubleArray55 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double56 = variance37.evaluate(doubleArray55);
        double double59 = variance16.evaluate(doubleArray55, (int) (byte) 1, 0);
        variance16.setBiasCorrected(true);
        variance16.setBiasCorrected(true);
        double double64 = variance16.getResult();
        boolean boolean65 = variance16.isBiasCorrected();
        boolean boolean66 = variance16.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.Variance variance68 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray75 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double76 = variance68.evaluate(doubleArray75);
        variance68.setBiasCorrected(true);
        boolean boolean79 = variance68.isBiasCorrected();
        double[] doubleArray86 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double87 = variance68.evaluate(doubleArray86);
        double double88 = variance16.evaluate(doubleArray86);
        double double91 = variance1.evaluate(doubleArray86, 1, 1);
        boolean boolean92 = variance1.isBiasCorrected();
        boolean boolean93 = variance1.isBiasCorrected();
        long long94 = variance1.getN();
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 2168.222222222222d + "'", double9 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 2168.222222222222d + "'", double24 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 16.566666666666663d + "'", double35 == 16.566666666666663d);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 2168.222222222222d + "'", double45 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 16.566666666666663d + "'", double56 == 16.566666666666663d);
        org.junit.Assert.assertTrue(Double.isNaN(double59));
        org.junit.Assert.assertTrue(Double.isNaN(double64));
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 2168.222222222222d + "'", double76 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double87 + "' != '" + 16.566666666666663d + "'", double87 == 16.566666666666663d);
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 16.566666666666663d + "'", double88 == 16.566666666666663d);
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 0.0d + "'", double91 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + true + "'", boolean93 == true);
        org.junit.Assert.assertTrue("'" + long94 + "' != '" + 0L + "'", long94 == 0L);
    }

    @Test
    public void test0363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0363");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray8 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double9 = variance1.evaluate(doubleArray8);
        variance1.setBiasCorrected(true);
        long long12 = variance1.getN();
        long long13 = variance1.getN();
        boolean boolean15 = variance1.equals((java.lang.Object) 16.566666666666663d);
        boolean boolean17 = variance1.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance19 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray26 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double27 = variance19.evaluate(doubleArray26);
        variance19.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance31 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray38 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double39 = variance31.evaluate(doubleArray38);
        variance19.incrementAll(doubleArray38);
        double double41 = variance1.evaluate(doubleArray38);
        java.lang.Class<?> wildcardClass42 = doubleArray38.getClass();
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 2168.222222222222d + "'", double9 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 2168.222222222222d + "'", double27 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 2168.222222222222d + "'", double39 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 2601.866666666667d + "'", double41 == 2601.866666666667d);
        org.junit.Assert.assertNotNull(wildcardClass42);
    }

    @Test
    public void test0364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0364");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray8 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double9 = variance1.evaluate(doubleArray8);
        variance1.clear();
        variance1.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray21 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double22 = variance14.evaluate(doubleArray21);
        variance14.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance26 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray33 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double34 = variance26.evaluate(doubleArray33);
        variance26.setBiasCorrected(true);
        boolean boolean37 = variance26.isBiasCorrected();
        double[] doubleArray44 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double45 = variance26.evaluate(doubleArray44);
        double double48 = variance14.evaluate(doubleArray44, (int) (byte) 1, (int) (byte) 0);
        variance1.incrementAll(doubleArray44);
        long long50 = variance1.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance52 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray59 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double60 = variance52.evaluate(doubleArray59);
        long long61 = variance52.getN();
        variance52.increment(874596.4092824734d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance65 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        variance65.clear();
        double double67 = variance65.getResult();
        double[] doubleArray72 = new double[] { (-1), 2168.222222222222d, 16.566666666418314d, 10.0d };
        variance65.incrementAll(doubleArray72);
        variance52.incrementAll(doubleArray72, 0, (int) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            double double79 = variance1.evaluate(doubleArray72, (int) (short) 10, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 2168.222222222222d + "'", double9 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 2168.222222222222d + "'", double22 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 2168.222222222222d + "'", double34 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 16.566666666666663d + "'", double45 == 16.566666666666663d);
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 6L + "'", long50 == 6L);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 2168.222222222222d + "'", double60 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 0L + "'", long61 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double67));
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[-1.0, 2168.222222222222, 16.566666666418314, 10.0]");
    }

    @Test
    public void test0365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0365");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance3 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray10 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double11 = variance3.evaluate(doubleArray10);
        variance3.setBiasCorrected(true);
        boolean boolean14 = variance3.isBiasCorrected();
        double[] doubleArray21 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double22 = variance3.evaluate(doubleArray21);
        double double23 = variance3.getResult();
        variance3.setBiasCorrected(true);
        boolean boolean26 = variance3.isBiasCorrected();
        variance3.setBiasCorrected(false);
        variance3.increment(2601.866666666667d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance32 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray39 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double40 = variance32.evaluate(doubleArray39);
        variance32.clear();
        variance32.setBiasCorrected(true);
        double double44 = variance32.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance46 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray53 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double54 = variance46.evaluate(doubleArray53);
        double double55 = variance32.evaluate(doubleArray53);
        double double56 = variance3.evaluate(doubleArray53);
        // The following exception was thrown during execution in test generation
        try {
            double double60 = variance1.evaluate(doubleArray53, (double) (short) 10, 100, 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 2168.222222222222d + "'", double11 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 16.566666666666663d + "'", double22 == 16.566666666666663d);
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 2168.222222222222d + "'", double40 == 2168.222222222222d);
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 2168.222222222222d + "'", double54 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 2601.866666666667d + "'", double55 == 2601.866666666667d);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 2168.222222222222d + "'", double56 == 2168.222222222222d);
    }

    @Test
    public void test0366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0366");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray8 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double9 = variance1.evaluate(doubleArray8);
        variance1.setBiasCorrected(true);
        boolean boolean12 = variance1.isBiasCorrected();
        variance1.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance15 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray22 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double23 = variance15.evaluate(doubleArray22);
        variance15.setBiasCorrected(true);
        long long26 = variance15.getN();
        long long27 = variance15.getN();
        boolean boolean29 = variance15.equals((java.lang.Object) 16.566666666666663d);
        boolean boolean31 = variance15.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance33 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray40 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double41 = variance33.evaluate(doubleArray40);
        variance33.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance45 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray52 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double53 = variance45.evaluate(doubleArray52);
        variance45.setBiasCorrected(true);
        boolean boolean56 = variance45.isBiasCorrected();
        double[] doubleArray63 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double64 = variance45.evaluate(doubleArray63);
        org.apache.commons.math.stat.descriptive.moment.Variance variance66 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray73 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double74 = variance66.evaluate(doubleArray73);
        variance66.setBiasCorrected(true);
        boolean boolean77 = variance66.isBiasCorrected();
        double[] doubleArray84 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double85 = variance66.evaluate(doubleArray84);
        double double88 = variance45.evaluate(doubleArray84, (int) (byte) 1, 0);
        double double90 = variance33.evaluate(doubleArray84, 2178.0d);
        double double91 = variance15.evaluate(doubleArray84);
        variance1.incrementAll(doubleArray84, 0, 0);
        java.lang.Class<?> wildcardClass95 = variance1.getClass();
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 2168.222222222222d + "'", double9 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 2168.222222222222d + "'", double23 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 2168.222222222222d + "'", double41 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 2168.222222222222d + "'", double53 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 16.566666666666663d + "'", double64 == 16.566666666666663d);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 2168.222222222222d + "'", double74 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 16.566666666666663d + "'", double85 == 16.566666666666663d);
        org.junit.Assert.assertTrue(Double.isNaN(double88));
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + 16.566666666418314d + "'", double90 == 16.566666666418314d);
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 16.566666666666663d + "'", double91 == 16.566666666666663d);
        org.junit.Assert.assertNotNull(wildcardClass95);
    }

    @Test
    public void test0367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0367");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        variance1.clear();
        boolean boolean3 = variance1.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.Variance variance5 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray12 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double13 = variance5.evaluate(doubleArray12);
        variance5.setBiasCorrected(true);
        long long16 = variance5.getN();
        long long17 = variance5.getN();
        double double18 = variance5.getResult();
        variance5.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance21 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray28 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double29 = variance21.evaluate(doubleArray28);
        double[] doubleArray33 = new double[] { (byte) 1, (byte) 100, 1L };
        double double34 = variance21.evaluate(doubleArray33);
        org.apache.commons.math.stat.descriptive.moment.Variance variance36 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray43 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double44 = variance36.evaluate(doubleArray43);
        variance36.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance48 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray55 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double56 = variance48.evaluate(doubleArray55);
        variance36.incrementAll(doubleArray55);
        variance21.incrementAll(doubleArray55);
        double double59 = variance5.evaluate(doubleArray55);
        double double60 = variance1.evaluate(doubleArray55);
        variance1.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance63 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray70 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double71 = variance63.evaluate(doubleArray70);
        variance63.clear();
        java.lang.Object obj73 = null;
        boolean boolean74 = variance63.equals(obj73);
        java.lang.Class<?> wildcardClass75 = variance63.getClass();
        boolean boolean76 = variance1.equals((java.lang.Object) variance63);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment77 = null;
        org.apache.commons.math.stat.descriptive.moment.Variance variance78 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment77);
        boolean boolean79 = variance78.isBiasCorrected();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean80 = variance63.equals((java.lang.Object) variance78);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 2168.222222222222d + "'", double13 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 2168.222222222222d + "'", double29 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0, 100.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 2178.0d + "'", double34 == 2178.0d);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 2168.222222222222d + "'", double44 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 2168.222222222222d + "'", double56 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 2601.866666666667d + "'", double59 == 2601.866666666667d);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 2168.222222222222d + "'", double60 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 2168.222222222222d + "'", double71 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(wildcardClass75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
    }

    @Test
    public void test0368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0368");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray8 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double9 = variance1.evaluate(doubleArray8);
        variance1.setBiasCorrected(true);
        boolean boolean12 = variance1.isBiasCorrected();
        double[] doubleArray19 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double20 = variance1.evaluate(doubleArray19);
        boolean boolean22 = variance1.equals((java.lang.Object) 10.0d);
        boolean boolean23 = variance1.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.Variance variance25 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        boolean boolean26 = variance1.equals((java.lang.Object) false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance28 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray35 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double36 = variance28.evaluate(doubleArray35);
        variance28.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance40 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray47 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double48 = variance40.evaluate(doubleArray47);
        variance28.incrementAll(doubleArray47);
        double double51 = variance1.evaluate(doubleArray47, (double) 100.0f);
        long long52 = variance1.getN();
        long long53 = variance1.getN();
        variance1.setBiasCorrected(true);
        variance1.setBiasCorrected(false);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 2168.222222222222d + "'", double9 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 16.566666666666663d + "'", double20 == 16.566666666666663d);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 2168.222222222222d + "'", double36 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 2168.222222222222d + "'", double48 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 2601.8666666666663d + "'", double51 == 2601.8666666666663d);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 0L + "'", long52 == 0L);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 0L + "'", long53 == 0L);
    }

    @Test
    public void test0369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0369");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray8 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double9 = variance1.evaluate(doubleArray8);
        variance1.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance13 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray20 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double21 = variance13.evaluate(doubleArray20);
        variance13.setBiasCorrected(true);
        boolean boolean24 = variance13.isBiasCorrected();
        double[] doubleArray31 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double32 = variance13.evaluate(doubleArray31);
        double double35 = variance1.evaluate(doubleArray31, (int) (byte) 1, (int) (byte) 0);
        variance1.setBiasCorrected(true);
        variance1.setBiasCorrected(false);
        long long40 = variance1.getN();
        long long41 = variance1.getN();
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 2168.222222222222d + "'", double9 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 2168.222222222222d + "'", double21 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 16.566666666666663d + "'", double32 == 16.566666666666663d);
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
    }

    @Test
    public void test0370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0370");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray8 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double9 = variance1.evaluate(doubleArray8);
        variance1.setBiasCorrected(true);
        long long12 = variance1.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance13 = new org.apache.commons.math.stat.descriptive.moment.Variance();
        long long14 = variance13.getN();
        variance13.setBiasCorrected(true);
        variance13.increment(2178.0d);
        boolean boolean19 = variance13.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.Variance variance21 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray28 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double29 = variance21.evaluate(doubleArray28);
        variance21.setBiasCorrected(true);
        boolean boolean32 = variance21.isBiasCorrected();
        double[] doubleArray39 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double40 = variance21.evaluate(doubleArray39);
        double double41 = variance21.getResult();
        long long42 = variance21.getN();
        variance21.increment((double) '#');
        variance21.increment(100.0d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance48 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray55 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double56 = variance48.evaluate(doubleArray55);
        variance48.setBiasCorrected(true);
        boolean boolean59 = variance48.isBiasCorrected();
        double[] doubleArray66 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double67 = variance48.evaluate(doubleArray66);
        double double69 = variance21.evaluate(doubleArray66, (double) (byte) 100);
        double double70 = variance13.evaluate(doubleArray66);
        // The following exception was thrown during execution in test generation
        try {
            variance1.incrementAll(doubleArray66, (int) (short) -1, (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: start position cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 2168.222222222222d + "'", double9 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 2168.222222222222d + "'", double29 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 16.566666666666663d + "'", double40 == 16.566666666666663d);
        org.junit.Assert.assertTrue(Double.isNaN(double41));
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 2168.222222222222d + "'", double56 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 16.566666666666663d + "'", double67 == 16.566666666666663d);
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 16.566666666667153d + "'", double69 == 16.566666666667153d);
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 16.566666666666663d + "'", double70 == 16.566666666666663d);
    }

    @Test
    public void test0371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0371");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray8 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double9 = variance1.evaluate(doubleArray8);
        variance1.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance13 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray20 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double21 = variance13.evaluate(doubleArray20);
        variance1.incrementAll(doubleArray20);
        variance1.clear();
        boolean boolean24 = variance1.isBiasCorrected();
        variance1.increment(2601.866666666667d);
        variance1.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance29 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray36 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double37 = variance29.evaluate(doubleArray36);
        variance29.setBiasCorrected(true);
        long long40 = variance29.getN();
        variance29.clear();
        double double42 = variance29.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance44 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray51 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double52 = variance44.evaluate(doubleArray51);
        variance44.setBiasCorrected(true);
        boolean boolean55 = variance44.isBiasCorrected();
        double[] doubleArray62 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double63 = variance44.evaluate(doubleArray62);
        org.apache.commons.math.stat.descriptive.moment.Variance variance65 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray72 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double73 = variance65.evaluate(doubleArray72);
        variance65.setBiasCorrected(true);
        boolean boolean76 = variance65.isBiasCorrected();
        double[] doubleArray83 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double84 = variance65.evaluate(doubleArray83);
        double double87 = variance44.evaluate(doubleArray83, (int) (byte) 1, 0);
        variance29.incrementAll(doubleArray83);
        double double89 = variance1.evaluate(doubleArray83);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 2168.222222222222d + "'", double9 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 2168.222222222222d + "'", double21 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 2168.222222222222d + "'", double37 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double42));
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 2168.222222222222d + "'", double52 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 16.566666666666663d + "'", double63 == 16.566666666666663d);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 2168.222222222222d + "'", double73 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 16.566666666666663d + "'", double84 == 16.566666666666663d);
        org.junit.Assert.assertTrue(Double.isNaN(double87));
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + 16.566666666666663d + "'", double89 == 16.566666666666663d);
    }

    @Test
    public void test0372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0372");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray8 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double9 = variance1.evaluate(doubleArray8);
        variance1.setBiasCorrected(true);
        boolean boolean12 = variance1.isBiasCorrected();
        double[] doubleArray19 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double20 = variance1.evaluate(doubleArray19);
        double double21 = variance1.getResult();
        variance1.setBiasCorrected(true);
        boolean boolean24 = variance1.isBiasCorrected();
        variance1.setBiasCorrected(false);
        variance1.increment(2601.866666666667d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance30 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray37 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double38 = variance30.evaluate(doubleArray37);
        variance30.clear();
        variance30.setBiasCorrected(true);
        double double42 = variance30.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance44 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray51 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double52 = variance44.evaluate(doubleArray51);
        double double53 = variance30.evaluate(doubleArray51);
        double double54 = variance1.evaluate(doubleArray51);
        variance1.clear();
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 2168.222222222222d + "'", double9 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 16.566666666666663d + "'", double20 == 16.566666666666663d);
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 2168.222222222222d + "'", double38 == 2168.222222222222d);
        org.junit.Assert.assertTrue(Double.isNaN(double42));
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 2168.222222222222d + "'", double52 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 2601.866666666667d + "'", double53 == 2601.866666666667d);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 2168.222222222222d + "'", double54 == 2168.222222222222d);
    }

    @Test
    public void test0373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0373");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray8 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double9 = variance1.evaluate(doubleArray8);
        double[] doubleArray13 = new double[] { (byte) 1, (byte) 100, 1L };
        double double14 = variance1.evaluate(doubleArray13);
        long long15 = variance1.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance17 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray24 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double25 = variance17.evaluate(doubleArray24);
        variance17.setBiasCorrected(true);
        long long28 = variance17.getN();
        long long29 = variance17.getN();
        boolean boolean30 = variance17.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.Variance variance32 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray39 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double40 = variance32.evaluate(doubleArray39);
        variance32.setBiasCorrected(true);
        boolean boolean43 = variance32.isBiasCorrected();
        double[] doubleArray50 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double51 = variance32.evaluate(doubleArray50);
        boolean boolean53 = variance32.equals((java.lang.Object) 10.0d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance55 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray62 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double63 = variance55.evaluate(doubleArray62);
        variance55.setBiasCorrected(true);
        boolean boolean66 = variance55.isBiasCorrected();
        double[] doubleArray73 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double74 = variance55.evaluate(doubleArray73);
        double double76 = variance32.evaluate(doubleArray73, (double) 0.0f);
        variance17.incrementAll(doubleArray73);
        // The following exception was thrown during execution in test generation
        try {
            double double81 = variance1.evaluate(doubleArray73, (double) (-1.0f), (int) (byte) 10, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: length cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 2168.222222222222d + "'", double9 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, 100.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 2178.0d + "'", double14 == 2178.0d);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 2168.222222222222d + "'", double25 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 2168.222222222222d + "'", double40 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 16.566666666666663d + "'", double51 == 16.566666666666663d);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 2168.222222222222d + "'", double63 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 16.566666666666663d + "'", double74 == 16.566666666666663d);
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 16.566666666666666d + "'", double76 == 16.566666666666666d);
    }

    @Test
    public void test0374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0374");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray8 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double9 = variance1.evaluate(doubleArray8);
        variance1.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance13 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray20 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double21 = variance13.evaluate(doubleArray20);
        variance13.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance25 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray32 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double33 = variance25.evaluate(doubleArray32);
        variance25.setBiasCorrected(true);
        boolean boolean36 = variance25.isBiasCorrected();
        double[] doubleArray43 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double44 = variance25.evaluate(doubleArray43);
        double double47 = variance13.evaluate(doubleArray43, (int) (byte) 1, (int) (byte) 0);
        variance1.incrementAll(doubleArray43, (int) (byte) 1, 1);
        java.lang.Object obj51 = null;
        boolean boolean52 = variance1.equals(obj51);
        long long53 = variance1.getN();
        double[] doubleArray54 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double57 = variance1.evaluate(doubleArray54, (-1), (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: input value array is null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 2168.222222222222d + "'", double9 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 2168.222222222222d + "'", double21 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 2168.222222222222d + "'", double33 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 16.566666666666663d + "'", double44 == 16.566666666666663d);
        org.junit.Assert.assertTrue(Double.isNaN(double47));
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 1L + "'", long53 == 1L);
    }

    @Test
    public void test0375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0375");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        variance1.clear();
        boolean boolean3 = variance1.isBiasCorrected();
        boolean boolean5 = variance1.equals((java.lang.Object) 1166128.5457099646d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance7 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray14 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double15 = variance7.evaluate(doubleArray14);
        variance7.setBiasCorrected(true);
        boolean boolean18 = variance7.isBiasCorrected();
        double[] doubleArray25 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double26 = variance7.evaluate(doubleArray25);
        org.apache.commons.math.stat.descriptive.moment.Variance variance28 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray35 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double36 = variance28.evaluate(doubleArray35);
        variance28.setBiasCorrected(true);
        boolean boolean39 = variance28.isBiasCorrected();
        double[] doubleArray46 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double47 = variance28.evaluate(doubleArray46);
        double double50 = variance7.evaluate(doubleArray46, (int) (byte) 1, 0);
        variance7.setBiasCorrected(true);
        variance7.setBiasCorrected(true);
        double double55 = variance7.getResult();
        boolean boolean56 = variance7.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.Variance variance58 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray65 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double66 = variance58.evaluate(doubleArray65);
        variance58.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance70 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray77 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double78 = variance70.evaluate(doubleArray77);
        variance58.incrementAll(doubleArray77);
        double double81 = variance7.evaluate(doubleArray77, 0.0d);
        double double82 = variance1.evaluate(doubleArray77);
        boolean boolean83 = variance1.isBiasCorrected();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 2168.222222222222d + "'", double15 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 16.566666666666663d + "'", double26 == 16.566666666666663d);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 2168.222222222222d + "'", double36 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 16.566666666666663d + "'", double47 == 16.566666666666663d);
        org.junit.Assert.assertTrue(Double.isNaN(double50));
        org.junit.Assert.assertTrue(Double.isNaN(double55));
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 2168.222222222222d + "'", double66 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 2168.222222222222d + "'", double78 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 2601.8666666666663d + "'", double81 == 2601.8666666666663d);
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 2168.222222222222d + "'", double82 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
    }

    @Test
    public void test0376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0376");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray8 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double9 = variance1.evaluate(doubleArray8);
        variance1.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance13 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean14 = variance1.equals((java.lang.Object) true);
        java.lang.Object obj15 = null;
        boolean boolean16 = variance1.equals(obj15);
        org.apache.commons.math.stat.descriptive.moment.Variance variance17 = new org.apache.commons.math.stat.descriptive.moment.Variance();
        long long18 = variance17.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance20 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray27 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double28 = variance20.evaluate(doubleArray27);
        variance20.setBiasCorrected(true);
        boolean boolean31 = variance20.isBiasCorrected();
        double[] doubleArray38 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double39 = variance20.evaluate(doubleArray38);
        boolean boolean41 = variance20.equals((java.lang.Object) 10.0d);
        boolean boolean42 = variance20.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.Variance variance44 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        boolean boolean45 = variance20.equals((java.lang.Object) false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance47 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray54 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double55 = variance47.evaluate(doubleArray54);
        variance47.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance59 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray66 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double67 = variance59.evaluate(doubleArray66);
        variance47.incrementAll(doubleArray66);
        double double70 = variance20.evaluate(doubleArray66, (double) 100.0f);
        variance17.incrementAll(doubleArray66, (int) (short) 1, (int) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            double double76 = variance1.evaluate(doubleArray66, 10, (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 2168.222222222222d + "'", double9 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 2168.222222222222d + "'", double28 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 16.566666666666663d + "'", double39 == 16.566666666666663d);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 2168.222222222222d + "'", double55 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 2168.222222222222d + "'", double67 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 2601.8666666666663d + "'", double70 == 2601.8666666666663d);
    }

    @Test
    public void test0377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0377");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray8 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double9 = variance1.evaluate(doubleArray8);
        variance1.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance13 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray20 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double21 = variance13.evaluate(doubleArray20);
        variance13.setBiasCorrected(true);
        boolean boolean24 = variance13.isBiasCorrected();
        double[] doubleArray31 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double32 = variance13.evaluate(doubleArray31);
        org.apache.commons.math.stat.descriptive.moment.Variance variance34 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray41 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double42 = variance34.evaluate(doubleArray41);
        variance34.setBiasCorrected(true);
        boolean boolean45 = variance34.isBiasCorrected();
        double[] doubleArray52 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double53 = variance34.evaluate(doubleArray52);
        double double56 = variance13.evaluate(doubleArray52, (int) (byte) 1, 0);
        double double58 = variance1.evaluate(doubleArray52, 2178.0d);
        variance1.increment(3267.0d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance62 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray69 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double70 = variance62.evaluate(doubleArray69);
        variance62.setBiasCorrected(true);
        variance62.clear();
        boolean boolean74 = variance1.equals((java.lang.Object) variance62);
        double[] doubleArray79 = new double[] { 1694.7000000000003d, '4', 0, (short) 100 };
        double double80 = variance1.evaluate(doubleArray79);
        java.lang.Class<?> wildcardClass81 = doubleArray79.getClass();
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 2168.222222222222d + "'", double9 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 2168.222222222222d + "'", double21 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 16.566666666666663d + "'", double32 == 16.566666666666663d);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 2168.222222222222d + "'", double42 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 16.566666666666663d + "'", double53 == 16.566666666666663d);
        org.junit.Assert.assertTrue(Double.isNaN(double56));
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 16.566666666418314d + "'", double58 == 16.566666666418314d);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 2168.222222222222d + "'", double70 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1694.7000000000003, 52.0, 0.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 677378.9558333334d + "'", double80 == 677378.9558333334d);
        org.junit.Assert.assertNotNull(wildcardClass81);
    }

    @Test
    public void test0378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0378");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray8 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double9 = variance1.evaluate(doubleArray8);
        variance1.setBiasCorrected(true);
        boolean boolean12 = variance1.isBiasCorrected();
        double[] doubleArray19 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double20 = variance1.evaluate(doubleArray19);
        double double21 = variance1.getResult();
        long long22 = variance1.getN();
        java.lang.Object obj23 = null;
        boolean boolean24 = variance1.equals(obj23);
        long long25 = variance1.getN();
        boolean boolean26 = variance1.isBiasCorrected();
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 2168.222222222222d + "'", double9 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 16.566666666666663d + "'", double20 == 16.566666666666663d);
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
    }

    @Test
    public void test0379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0379");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray8 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double9 = variance1.evaluate(doubleArray8);
        variance1.setBiasCorrected(true);
        long long12 = variance1.getN();
        long long13 = variance1.getN();
        boolean boolean14 = variance1.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.Variance variance16 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray23 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double24 = variance16.evaluate(doubleArray23);
        variance16.setBiasCorrected(true);
        boolean boolean27 = variance16.isBiasCorrected();
        double[] doubleArray34 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double35 = variance16.evaluate(doubleArray34);
        org.apache.commons.math.stat.descriptive.moment.Variance variance37 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray44 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double45 = variance37.evaluate(doubleArray44);
        variance37.setBiasCorrected(true);
        boolean boolean48 = variance37.isBiasCorrected();
        double[] doubleArray55 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double56 = variance37.evaluate(doubleArray55);
        double double59 = variance16.evaluate(doubleArray55, (int) (byte) 1, 0);
        variance16.setBiasCorrected(true);
        variance16.setBiasCorrected(true);
        double double64 = variance16.getResult();
        boolean boolean65 = variance16.isBiasCorrected();
        boolean boolean66 = variance16.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.Variance variance68 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray75 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double76 = variance68.evaluate(doubleArray75);
        variance68.setBiasCorrected(true);
        boolean boolean79 = variance68.isBiasCorrected();
        double[] doubleArray86 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double87 = variance68.evaluate(doubleArray86);
        double double88 = variance16.evaluate(doubleArray86);
        double double91 = variance1.evaluate(doubleArray86, 1, 1);
        boolean boolean92 = variance1.isBiasCorrected();
        boolean boolean93 = variance1.isBiasCorrected();
        variance1.setBiasCorrected(false);
        double double96 = variance1.getResult();
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 2168.222222222222d + "'", double9 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 2168.222222222222d + "'", double24 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 16.566666666666663d + "'", double35 == 16.566666666666663d);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 2168.222222222222d + "'", double45 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 16.566666666666663d + "'", double56 == 16.566666666666663d);
        org.junit.Assert.assertTrue(Double.isNaN(double59));
        org.junit.Assert.assertTrue(Double.isNaN(double64));
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 2168.222222222222d + "'", double76 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double87 + "' != '" + 16.566666666666663d + "'", double87 == 16.566666666666663d);
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 16.566666666666663d + "'", double88 == 16.566666666666663d);
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 0.0d + "'", double91 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + true + "'", boolean93 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double96));
    }

    @Test
    public void test0380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0380");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray8 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double9 = variance1.evaluate(doubleArray8);
        variance1.setBiasCorrected(true);
        boolean boolean12 = variance1.isBiasCorrected();
        double[] doubleArray19 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double20 = variance1.evaluate(doubleArray19);
        boolean boolean22 = variance1.equals((java.lang.Object) 10.0d);
        boolean boolean23 = variance1.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.Variance variance25 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        boolean boolean26 = variance1.equals((java.lang.Object) false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance28 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray35 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double36 = variance28.evaluate(doubleArray35);
        variance28.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance40 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray47 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double48 = variance40.evaluate(doubleArray47);
        variance28.incrementAll(doubleArray47);
        double double51 = variance1.evaluate(doubleArray47, (double) 100.0f);
        boolean boolean52 = variance1.isBiasCorrected();
        long long53 = variance1.getN();
        variance1.setBiasCorrected(false);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 2168.222222222222d + "'", double9 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 16.566666666666663d + "'", double20 == 16.566666666666663d);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 2168.222222222222d + "'", double36 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 2168.222222222222d + "'", double48 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 2601.8666666666663d + "'", double51 == 2601.8666666666663d);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 0L + "'", long53 == 0L);
    }

    @Test
    public void test0381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0381");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray8 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double9 = variance1.evaluate(doubleArray8);
        variance1.setBiasCorrected(true);
        boolean boolean12 = variance1.isBiasCorrected();
        double[] doubleArray19 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double20 = variance1.evaluate(doubleArray19);
        double double21 = variance1.getResult();
        variance1.setBiasCorrected(true);
        boolean boolean24 = variance1.isBiasCorrected();
        variance1.setBiasCorrected(false);
        variance1.increment(2601.866666666667d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance30 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray37 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double38 = variance30.evaluate(doubleArray37);
        variance30.clear();
        variance30.setBiasCorrected(true);
        double double42 = variance30.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance44 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray51 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double52 = variance44.evaluate(doubleArray51);
        double double53 = variance30.evaluate(doubleArray51);
        double double54 = variance1.evaluate(doubleArray51);
        java.lang.Class<?> wildcardClass55 = variance1.getClass();
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 2168.222222222222d + "'", double9 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 16.566666666666663d + "'", double20 == 16.566666666666663d);
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 2168.222222222222d + "'", double38 == 2168.222222222222d);
        org.junit.Assert.assertTrue(Double.isNaN(double42));
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 2168.222222222222d + "'", double52 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 2601.866666666667d + "'", double53 == 2601.866666666667d);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 2168.222222222222d + "'", double54 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(wildcardClass55);
    }

    @Test
    public void test0382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0382");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        variance1.clear();
        boolean boolean3 = variance1.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.Variance variance5 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray12 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double13 = variance5.evaluate(doubleArray12);
        variance5.setBiasCorrected(true);
        long long16 = variance5.getN();
        long long17 = variance5.getN();
        double double18 = variance5.getResult();
        variance5.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance21 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray28 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double29 = variance21.evaluate(doubleArray28);
        double[] doubleArray33 = new double[] { (byte) 1, (byte) 100, 1L };
        double double34 = variance21.evaluate(doubleArray33);
        org.apache.commons.math.stat.descriptive.moment.Variance variance36 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray43 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double44 = variance36.evaluate(doubleArray43);
        variance36.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance48 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray55 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double56 = variance48.evaluate(doubleArray55);
        variance36.incrementAll(doubleArray55);
        variance21.incrementAll(doubleArray55);
        double double59 = variance5.evaluate(doubleArray55);
        double double60 = variance1.evaluate(doubleArray55);
        variance1.clear();
        double double62 = variance1.getResult();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 2168.222222222222d + "'", double13 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 2168.222222222222d + "'", double29 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0, 100.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 2178.0d + "'", double34 == 2178.0d);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 2168.222222222222d + "'", double44 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 2168.222222222222d + "'", double56 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 2601.866666666667d + "'", double59 == 2601.866666666667d);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 2168.222222222222d + "'", double60 == 2168.222222222222d);
        org.junit.Assert.assertTrue(Double.isNaN(double62));
    }

    @Test
    public void test0383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0383");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray8 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double9 = variance1.evaluate(doubleArray8);
        variance1.setBiasCorrected(true);
        boolean boolean12 = variance1.isBiasCorrected();
        double[] doubleArray19 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double20 = variance1.evaluate(doubleArray19);
        org.apache.commons.math.stat.descriptive.moment.Variance variance22 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray29 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double30 = variance22.evaluate(doubleArray29);
        variance22.setBiasCorrected(true);
        boolean boolean33 = variance22.isBiasCorrected();
        double[] doubleArray40 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double41 = variance22.evaluate(doubleArray40);
        double double44 = variance1.evaluate(doubleArray40, (int) (byte) 1, 0);
        variance1.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance48 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray55 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double56 = variance48.evaluate(doubleArray55);
        variance48.setBiasCorrected(true);
        boolean boolean59 = variance48.isBiasCorrected();
        double[] doubleArray66 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double67 = variance48.evaluate(doubleArray66);
        double double69 = variance1.evaluate(doubleArray66, 6.25d);
        variance1.increment(2178.0d);
        double double72 = variance1.getResult();
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 2168.222222222222d + "'", double9 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 16.566666666666663d + "'", double20 == 16.566666666666663d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 2168.222222222222d + "'", double30 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 16.566666666666663d + "'", double41 == 16.566666666666663d);
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 2168.222222222222d + "'", double56 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 16.566666666666663d + "'", double67 == 16.566666666666663d);
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 16.566666666666666d + "'", double69 == 16.566666666666666d);
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 0.0d + "'", double72 == 0.0d);
    }

    @Test
    public void test0384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0384");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        variance1.clear();
        double double3 = variance1.getResult();
        variance1.increment((double) '4');
        org.apache.commons.math.stat.descriptive.moment.Variance variance7 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray14 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double15 = variance7.evaluate(doubleArray14);
        long long16 = variance7.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance18 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray25 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double26 = variance18.evaluate(doubleArray25);
        variance18.setBiasCorrected(true);
        boolean boolean29 = variance18.isBiasCorrected();
        double[] doubleArray36 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double37 = variance18.evaluate(doubleArray36);
        org.apache.commons.math.stat.descriptive.moment.Variance variance39 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray46 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double47 = variance39.evaluate(doubleArray46);
        variance39.setBiasCorrected(true);
        boolean boolean50 = variance39.isBiasCorrected();
        double[] doubleArray57 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double58 = variance39.evaluate(doubleArray57);
        double double61 = variance18.evaluate(doubleArray57, (int) (byte) 1, 0);
        variance18.setBiasCorrected(true);
        variance18.setBiasCorrected(true);
        double double66 = variance18.getResult();
        boolean boolean67 = variance18.isBiasCorrected();
        boolean boolean68 = variance18.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.Variance variance70 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray77 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double78 = variance70.evaluate(doubleArray77);
        variance70.setBiasCorrected(true);
        boolean boolean81 = variance70.isBiasCorrected();
        double[] doubleArray88 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double89 = variance70.evaluate(doubleArray88);
        double double90 = variance18.evaluate(doubleArray88);
        double double92 = variance7.evaluate(doubleArray88, 16.56666666666667d);
        variance1.incrementAll(doubleArray88, (int) (short) 1, 1);
        variance1.clear();
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 2168.222222222222d + "'", double15 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 2168.222222222222d + "'", double26 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 16.566666666666663d + "'", double37 == 16.566666666666663d);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 2168.222222222222d + "'", double47 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 16.566666666666663d + "'", double58 == 16.566666666666663d);
        org.junit.Assert.assertTrue(Double.isNaN(double61));
        org.junit.Assert.assertTrue(Double.isNaN(double66));
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 2168.222222222222d + "'", double78 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + 16.566666666666663d + "'", double89 == 16.566666666666663d);
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + 16.566666666666663d + "'", double90 == 16.566666666666663d);
        org.junit.Assert.assertTrue("'" + double92 + "' != '" + 13.80555555555562d + "'", double92 == 13.80555555555562d);
    }

    @Test
    public void test0385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0385");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray8 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double9 = variance1.evaluate(doubleArray8);
        variance1.setBiasCorrected(true);
        long long12 = variance1.getN();
        long long13 = variance1.getN();
        double double14 = variance1.getResult();
        variance1.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance17 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray24 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double25 = variance17.evaluate(doubleArray24);
        double[] doubleArray29 = new double[] { (byte) 1, (byte) 100, 1L };
        double double30 = variance17.evaluate(doubleArray29);
        org.apache.commons.math.stat.descriptive.moment.Variance variance32 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray39 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double40 = variance32.evaluate(doubleArray39);
        variance32.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance44 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray51 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double52 = variance44.evaluate(doubleArray51);
        variance32.incrementAll(doubleArray51);
        variance17.incrementAll(doubleArray51);
        double double55 = variance1.evaluate(doubleArray51);
        long long56 = variance1.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance58 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance60 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray67 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double68 = variance60.evaluate(doubleArray67);
        variance60.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance72 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        variance72.clear();
        double double74 = variance72.getResult();
        double[] doubleArray79 = new double[] { (-1), 2168.222222222222d, 16.566666666418314d, 10.0d };
        variance72.incrementAll(doubleArray79);
        variance60.incrementAll(doubleArray79);
        double double82 = variance58.evaluate(doubleArray79);
        double double83 = variance1.evaluate(doubleArray79);
        variance1.increment(10.0d);
        double double86 = variance1.getResult();
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 2168.222222222222d + "'", double9 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 2168.222222222222d + "'", double25 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, 100.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 2178.0d + "'", double30 == 2178.0d);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 2168.222222222222d + "'", double40 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 2168.222222222222d + "'", double52 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 2601.866666666667d + "'", double55 == 2601.866666666667d);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 0L + "'", long56 == 0L);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 2168.222222222222d + "'", double68 == 2168.222222222222d);
        org.junit.Assert.assertTrue(Double.isNaN(double74));
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[-1.0, 2168.222222222222, 16.566666666418314, 10.0]");
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 874596.4092824734d + "'", double82 == 874596.4092824734d);
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 1166128.5457099646d + "'", double83 == 1166128.5457099646d);
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 0.0d + "'", double86 == 0.0d);
    }

    @Test
    public void test0386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0386");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray8 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double9 = variance1.evaluate(doubleArray8);
        variance1.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance13 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray20 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double21 = variance13.evaluate(doubleArray20);
        variance13.setBiasCorrected(true);
        boolean boolean24 = variance13.isBiasCorrected();
        double[] doubleArray31 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double32 = variance13.evaluate(doubleArray31);
        double double35 = variance1.evaluate(doubleArray31, (int) (byte) 1, (int) (byte) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance37 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance39 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray46 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double47 = variance39.evaluate(doubleArray46);
        variance39.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance51 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray58 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double59 = variance51.evaluate(doubleArray58);
        variance51.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance63 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray70 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double71 = variance63.evaluate(doubleArray70);
        variance63.setBiasCorrected(true);
        boolean boolean74 = variance63.isBiasCorrected();
        double[] doubleArray81 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double82 = variance63.evaluate(doubleArray81);
        double double85 = variance51.evaluate(doubleArray81, (int) (byte) 1, (int) (byte) 0);
        variance39.incrementAll(doubleArray81, (int) (byte) 1, 1);
        double double89 = variance37.evaluate(doubleArray81);
        double double90 = variance1.evaluate(doubleArray81);
        boolean boolean91 = variance1.isBiasCorrected();
        boolean boolean92 = variance1.isBiasCorrected();
        variance1.increment(16.566666666418314d);
        double[] doubleArray95 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double96 = variance1.evaluate(doubleArray95);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: input values array is null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 2168.222222222222d + "'", double9 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 2168.222222222222d + "'", double21 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 16.566666666666663d + "'", double32 == 16.566666666666663d);
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 2168.222222222222d + "'", double47 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 2168.222222222222d + "'", double59 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 2168.222222222222d + "'", double71 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 16.566666666666663d + "'", double82 == 16.566666666666663d);
        org.junit.Assert.assertTrue(Double.isNaN(double85));
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + 13.805555555555552d + "'", double89 == 13.805555555555552d);
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + 16.566666666666663d + "'", double90 == 16.566666666666663d);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
    }

    @Test
    public void test0387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0387");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray8 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double9 = variance1.evaluate(doubleArray8);
        variance1.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance13 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean14 = variance1.equals((java.lang.Object) true);
        java.lang.Object obj15 = null;
        boolean boolean16 = variance1.equals(obj15);
        java.lang.Class<?> wildcardClass17 = variance1.getClass();
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 2168.222222222222d + "'", double9 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test0388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0388");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = null;
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment1);
        double[] doubleArray3 = new double[] {};
        double double6 = variance2.evaluate(doubleArray3, 0, 0);
        boolean boolean8 = variance2.equals((java.lang.Object) 10.0f);
        boolean boolean9 = variance2.isBiasCorrected();
        boolean boolean10 = variance2.isBiasCorrected();
        variance2.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance13 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray20 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double21 = variance13.evaluate(doubleArray20);
        variance13.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance25 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray32 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double33 = variance25.evaluate(doubleArray32);
        variance25.setBiasCorrected(true);
        boolean boolean36 = variance25.isBiasCorrected();
        double[] doubleArray43 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double44 = variance25.evaluate(doubleArray43);
        org.apache.commons.math.stat.descriptive.moment.Variance variance46 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray53 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double54 = variance46.evaluate(doubleArray53);
        variance46.setBiasCorrected(true);
        boolean boolean57 = variance46.isBiasCorrected();
        double[] doubleArray64 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double65 = variance46.evaluate(doubleArray64);
        double double68 = variance25.evaluate(doubleArray64, (int) (byte) 1, 0);
        double double70 = variance13.evaluate(doubleArray64, 2178.0d);
        variance13.increment(3267.0d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance74 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray81 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double82 = variance74.evaluate(doubleArray81);
        variance74.setBiasCorrected(true);
        variance74.clear();
        boolean boolean86 = variance13.equals((java.lang.Object) variance74);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean87 = variance2.equals((java.lang.Object) variance13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 2168.222222222222d + "'", double21 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 2168.222222222222d + "'", double33 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 16.566666666666663d + "'", double44 == 16.566666666666663d);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 2168.222222222222d + "'", double54 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 16.566666666666663d + "'", double65 == 16.566666666666663d);
        org.junit.Assert.assertTrue(Double.isNaN(double68));
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 16.566666666418314d + "'", double70 == 16.566666666418314d);
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 2168.222222222222d + "'", double82 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
    }

    @Test
    public void test0389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0389");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray8 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double9 = variance1.evaluate(doubleArray8);
        variance1.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance13 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray20 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double21 = variance13.evaluate(doubleArray20);
        variance1.incrementAll(doubleArray20);
        variance1.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance25 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray32 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double33 = variance25.evaluate(doubleArray32);
        double[] doubleArray37 = new double[] { (byte) 1, (byte) 100, 1L };
        double double38 = variance25.evaluate(doubleArray37);
        variance1.incrementAll(doubleArray37, (int) (byte) 0, (int) (byte) 1);
        variance1.increment(16.566666666666666d);
        variance1.setBiasCorrected(true);
        variance1.clear();
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 2168.222222222222d + "'", double9 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 2168.222222222222d + "'", double21 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 2168.222222222222d + "'", double33 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0, 100.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 2178.0d + "'", double38 == 2178.0d);
    }

    @Test
    public void test0390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0390");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray8 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double9 = variance1.evaluate(doubleArray8);
        variance1.setBiasCorrected(true);
        long long12 = variance1.getN();
        long long13 = variance1.getN();
        variance1.setBiasCorrected(true);
        double double16 = variance1.getResult();
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 2168.222222222222d + "'", double9 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
    }

    @Test
    public void test0391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0391");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray8 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double9 = variance1.evaluate(doubleArray8);
        variance1.setBiasCorrected(true);
        long long12 = variance1.getN();
        long long13 = variance1.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance15 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray22 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double23 = variance15.evaluate(doubleArray22);
        double[] doubleArray27 = new double[] { (byte) 1, (byte) 100, 1L };
        double double28 = variance15.evaluate(doubleArray27);
        double double30 = variance1.evaluate(doubleArray27, (double) 10.0f);
        org.apache.commons.math.stat.descriptive.moment.Variance variance32 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray39 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double40 = variance32.evaluate(doubleArray39);
        variance32.setBiasCorrected(true);
        long long43 = variance32.getN();
        long long44 = variance32.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance46 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray53 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double54 = variance46.evaluate(doubleArray53);
        double[] doubleArray58 = new double[] { (byte) 1, (byte) 100, 1L };
        double double59 = variance46.evaluate(doubleArray58);
        double double61 = variance32.evaluate(doubleArray58, (double) 10.0f);
        double double62 = variance1.evaluate(doubleArray58);
        boolean boolean63 = variance1.isBiasCorrected();
        double double64 = variance1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance66 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double double67 = variance66.getResult();
        boolean boolean68 = variance1.equals((java.lang.Object) variance66);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 2168.222222222222d + "'", double9 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 2168.222222222222d + "'", double23 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0, 100.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 2178.0d + "'", double28 == 2178.0d);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 3267.0d + "'", double30 == 3267.0d);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 2168.222222222222d + "'", double40 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 0L + "'", long43 == 0L);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 2168.222222222222d + "'", double54 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0, 100.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 2178.0d + "'", double59 == 2178.0d);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 3267.0d + "'", double61 == 3267.0d);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 3267.0d + "'", double62 == 3267.0d);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double64));
        org.junit.Assert.assertTrue(Double.isNaN(double67));
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
    }

    @Test
    public void test0392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0392");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray8 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double9 = variance1.evaluate(doubleArray8);
        variance1.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance13 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray20 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double21 = variance13.evaluate(doubleArray20);
        variance1.incrementAll(doubleArray20);
        variance1.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance25 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray32 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double33 = variance25.evaluate(doubleArray32);
        double[] doubleArray37 = new double[] { (byte) 1, (byte) 100, 1L };
        double double38 = variance25.evaluate(doubleArray37);
        variance1.incrementAll(doubleArray37, (int) (byte) 0, (int) (byte) 1);
        long long42 = variance1.getN();
        variance1.clear();
        variance1.setBiasCorrected(false);
        double double46 = variance1.getResult();
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 2168.222222222222d + "'", double9 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 2168.222222222222d + "'", double21 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 2168.222222222222d + "'", double33 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0, 100.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 2178.0d + "'", double38 == 2178.0d);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 1L + "'", long42 == 1L);
        org.junit.Assert.assertTrue(Double.isNaN(double46));
    }

    @Test
    public void test0393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0393");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray8 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double9 = variance1.evaluate(doubleArray8);
        variance1.setBiasCorrected(true);
        long long12 = variance1.getN();
        long long13 = variance1.getN();
        boolean boolean14 = variance1.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.Variance variance16 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray23 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double24 = variance16.evaluate(doubleArray23);
        double[] doubleArray28 = new double[] { (byte) 1, (byte) 100, 1L };
        double double29 = variance16.evaluate(doubleArray28);
        variance1.incrementAll(doubleArray28, (int) (short) 1, 0);
        long long33 = variance1.getN();
        variance1.increment(1175056.0d);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment37 = null;
        org.apache.commons.math.stat.descriptive.moment.Variance variance38 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment37);
        variance38.clear();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean40 = variance1.equals((java.lang.Object) variance38);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 2168.222222222222d + "'", double9 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 2168.222222222222d + "'", double24 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, 100.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 2178.0d + "'", double29 == 2178.0d);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
    }

    @Test
    public void test0394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0394");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray8 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double9 = variance1.evaluate(doubleArray8);
        variance1.setBiasCorrected(true);
        boolean boolean12 = variance1.isBiasCorrected();
        double[] doubleArray19 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double20 = variance1.evaluate(doubleArray19);
        org.apache.commons.math.stat.descriptive.moment.Variance variance22 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray29 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double30 = variance22.evaluate(doubleArray29);
        variance22.setBiasCorrected(true);
        boolean boolean33 = variance22.isBiasCorrected();
        double[] doubleArray40 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double41 = variance22.evaluate(doubleArray40);
        double double44 = variance1.evaluate(doubleArray40, (int) (byte) 1, 0);
        variance1.setBiasCorrected(true);
        variance1.setBiasCorrected(true);
        double double49 = variance1.getResult();
        boolean boolean50 = variance1.isBiasCorrected();
        boolean boolean51 = variance1.isBiasCorrected();
        variance1.increment(0.0d);
        double double54 = variance1.getResult();
        boolean boolean55 = variance1.isBiasCorrected();
        long long56 = variance1.getN();
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 2168.222222222222d + "'", double9 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 16.566666666666663d + "'", double20 == 16.566666666666663d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 2168.222222222222d + "'", double30 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 16.566666666666663d + "'", double41 == 16.566666666666663d);
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertTrue(Double.isNaN(double49));
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.0d + "'", double54 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 1L + "'", long56 == 1L);
    }

    @Test
    public void test0395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0395");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        variance1.clear();
        boolean boolean3 = variance1.isBiasCorrected();
        long long4 = variance1.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance6 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray13 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double14 = variance6.evaluate(doubleArray13);
        variance6.setBiasCorrected(true);
        long long17 = variance6.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance19 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray26 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double27 = variance19.evaluate(doubleArray26);
        variance19.setBiasCorrected(true);
        boolean boolean30 = variance19.isBiasCorrected();
        double[] doubleArray37 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double38 = variance19.evaluate(doubleArray37);
        org.apache.commons.math.stat.descriptive.moment.Variance variance40 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray47 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double48 = variance40.evaluate(doubleArray47);
        variance40.setBiasCorrected(true);
        boolean boolean51 = variance40.isBiasCorrected();
        double[] doubleArray58 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double59 = variance40.evaluate(doubleArray58);
        double double62 = variance19.evaluate(doubleArray58, (int) (byte) 1, 0);
        variance19.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance66 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray73 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double74 = variance66.evaluate(doubleArray73);
        variance66.setBiasCorrected(true);
        boolean boolean77 = variance66.isBiasCorrected();
        double[] doubleArray84 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double85 = variance66.evaluate(doubleArray84);
        double double87 = variance19.evaluate(doubleArray84, 6.25d);
        variance6.incrementAll(doubleArray84);
        // The following exception was thrown during execution in test generation
        try {
            variance1.incrementAll(doubleArray84, (-1), 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: start position cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 2168.222222222222d + "'", double14 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 2168.222222222222d + "'", double27 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 16.566666666666663d + "'", double38 == 16.566666666666663d);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 2168.222222222222d + "'", double48 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 16.566666666666663d + "'", double59 == 16.566666666666663d);
        org.junit.Assert.assertTrue(Double.isNaN(double62));
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 2168.222222222222d + "'", double74 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 16.566666666666663d + "'", double85 == 16.566666666666663d);
        org.junit.Assert.assertTrue("'" + double87 + "' != '" + 16.566666666666666d + "'", double87 == 16.566666666666666d);
    }

    @Test
    public void test0396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0396");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray8 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double9 = variance1.evaluate(doubleArray8);
        variance1.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance13 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray20 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double21 = variance13.evaluate(doubleArray20);
        variance1.incrementAll(doubleArray20);
        variance1.clear();
        variance1.setBiasCorrected(false);
        variance1.setBiasCorrected(false);
        double double28 = variance1.getResult();
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 2168.222222222222d + "'", double9 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 2168.222222222222d + "'", double21 == 2168.222222222222d);
        org.junit.Assert.assertTrue(Double.isNaN(double28));
    }

    @Test
    public void test0397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0397");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray8 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double9 = variance1.evaluate(doubleArray8);
        variance1.setBiasCorrected(true);
        long long12 = variance1.getN();
        double double13 = variance1.getResult();
        variance1.setBiasCorrected(true);
        java.lang.Class<?> wildcardClass16 = variance1.getClass();
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 2168.222222222222d + "'", double9 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test0398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0398");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray8 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double9 = variance1.evaluate(doubleArray8);
        variance1.clear();
        variance1.setBiasCorrected(true);
        double double13 = variance1.getResult();
        java.lang.Class<?> wildcardClass14 = variance1.getClass();
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 2168.222222222222d + "'", double9 == 2168.222222222222d);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test0399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0399");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray8 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double9 = variance1.evaluate(doubleArray8);
        variance1.clear();
        variance1.setBiasCorrected(true);
        variance1.increment(13.80555555555562d);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 2168.222222222222d + "'", double9 == 2168.222222222222d);
    }

    @Test
    public void test0400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0400");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = null;
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        variance2.setBiasCorrected(true);
        variance2.clear();
        java.lang.Class<?> wildcardClass6 = variance2.getClass();
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test0401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0401");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray8 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double9 = variance1.evaluate(doubleArray8);
        variance1.setBiasCorrected(true);
        boolean boolean12 = variance1.isBiasCorrected();
        double[] doubleArray19 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double20 = variance1.evaluate(doubleArray19);
        org.apache.commons.math.stat.descriptive.moment.Variance variance22 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray29 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double30 = variance22.evaluate(doubleArray29);
        variance22.setBiasCorrected(true);
        boolean boolean33 = variance22.isBiasCorrected();
        double[] doubleArray40 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double41 = variance22.evaluate(doubleArray40);
        double double44 = variance1.evaluate(doubleArray40, (int) (byte) 1, 0);
        double double45 = variance1.getResult();
        variance1.setBiasCorrected(true);
        boolean boolean48 = variance1.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.Variance variance49 = new org.apache.commons.math.stat.descriptive.moment.Variance();
        double double50 = variance49.getResult();
        boolean boolean51 = variance49.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.Variance variance53 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double54 = variance53.getResult();
        double double55 = variance53.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance57 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray64 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double65 = variance57.evaluate(doubleArray64);
        variance57.clear();
        variance57.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance70 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        variance70.clear();
        double double72 = variance70.getResult();
        double[] doubleArray77 = new double[] { (-1), 2168.222222222222d, 16.566666666418314d, 10.0d };
        variance70.incrementAll(doubleArray77);
        boolean boolean79 = variance57.equals((java.lang.Object) doubleArray77);
        double double81 = variance53.evaluate(doubleArray77, (double) (-1.0f));
        double double83 = variance49.evaluate(doubleArray77, (double) (-1L));
        double double84 = variance1.evaluate(doubleArray77);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 2168.222222222222d + "'", double9 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 16.566666666666663d + "'", double20 == 16.566666666666663d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 2168.222222222222d + "'", double30 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 16.566666666666663d + "'", double41 == 16.566666666666663d);
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertTrue(Double.isNaN(double45));
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double50));
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double54));
        org.junit.Assert.assertTrue(Double.isNaN(double55));
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 2168.222222222222d + "'", double65 == 2168.222222222222d);
        org.junit.Assert.assertTrue(Double.isNaN(double72));
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[-1.0, 2168.222222222222, 16.566666666418314, 10.0]");
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 1166128.5457099646d + "'", double81 == 1166128.5457099646d);
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 1166128.5457099646d + "'", double83 == 1166128.5457099646d);
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 1166128.5457099646d + "'", double84 == 1166128.5457099646d);
    }

    @Test
    public void test0402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0402");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray8 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double9 = variance1.evaluate(doubleArray8);
        variance1.setBiasCorrected(true);
        boolean boolean12 = variance1.isBiasCorrected();
        double[] doubleArray19 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double20 = variance1.evaluate(doubleArray19);
        double double21 = variance1.getResult();
        variance1.setBiasCorrected(true);
        boolean boolean24 = variance1.isBiasCorrected();
        variance1.setBiasCorrected(false);
        variance1.increment(2601.866666666667d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance30 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray37 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double38 = variance30.evaluate(doubleArray37);
        variance30.setBiasCorrected(true);
        boolean boolean41 = variance30.isBiasCorrected();
        double[] doubleArray48 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double49 = variance30.evaluate(doubleArray48);
        org.apache.commons.math.stat.descriptive.moment.Variance variance51 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray58 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double59 = variance51.evaluate(doubleArray58);
        variance51.setBiasCorrected(true);
        boolean boolean62 = variance51.isBiasCorrected();
        double[] doubleArray69 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double70 = variance51.evaluate(doubleArray69);
        double double73 = variance30.evaluate(doubleArray69, (int) (byte) 1, 0);
        variance30.setBiasCorrected(true);
        variance30.setBiasCorrected(true);
        double double78 = variance30.getResult();
        boolean boolean79 = variance30.isBiasCorrected();
        boolean boolean80 = variance30.isBiasCorrected();
        variance30.increment(0.0d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance84 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray91 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double92 = variance84.evaluate(doubleArray91);
        variance30.incrementAll(doubleArray91, (int) (byte) 0, 1);
        double double96 = variance1.evaluate(doubleArray91);
        variance1.increment((double) 0L);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 2168.222222222222d + "'", double9 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 16.566666666666663d + "'", double20 == 16.566666666666663d);
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 2168.222222222222d + "'", double38 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 16.566666666666663d + "'", double49 == 16.566666666666663d);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 2168.222222222222d + "'", double59 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 16.566666666666663d + "'", double70 == 16.566666666666663d);
        org.junit.Assert.assertTrue(Double.isNaN(double73));
        org.junit.Assert.assertTrue(Double.isNaN(double78));
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray91), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double92 + "' != '" + 2168.222222222222d + "'", double92 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + double96 + "' != '" + 2168.222222222222d + "'", double96 == 2168.222222222222d);
    }

    @Test
    public void test0403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0403");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray8 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double9 = variance1.evaluate(doubleArray8);
        variance1.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance13 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray20 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double21 = variance13.evaluate(doubleArray20);
        variance13.setBiasCorrected(true);
        boolean boolean24 = variance13.isBiasCorrected();
        double[] doubleArray31 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double32 = variance13.evaluate(doubleArray31);
        double double35 = variance1.evaluate(doubleArray31, (int) (byte) 1, (int) (byte) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance37 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance39 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray46 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double47 = variance39.evaluate(doubleArray46);
        variance39.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance51 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray58 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double59 = variance51.evaluate(doubleArray58);
        variance51.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance63 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray70 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double71 = variance63.evaluate(doubleArray70);
        variance63.setBiasCorrected(true);
        boolean boolean74 = variance63.isBiasCorrected();
        double[] doubleArray81 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double82 = variance63.evaluate(doubleArray81);
        double double85 = variance51.evaluate(doubleArray81, (int) (byte) 1, (int) (byte) 0);
        variance39.incrementAll(doubleArray81, (int) (byte) 1, 1);
        double double89 = variance37.evaluate(doubleArray81);
        double double90 = variance1.evaluate(doubleArray81);
        boolean boolean91 = variance1.isBiasCorrected();
        variance1.setBiasCorrected(true);
        variance1.clear();
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 2168.222222222222d + "'", double9 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 2168.222222222222d + "'", double21 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 16.566666666666663d + "'", double32 == 16.566666666666663d);
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 2168.222222222222d + "'", double47 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 2168.222222222222d + "'", double59 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 2168.222222222222d + "'", double71 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 16.566666666666663d + "'", double82 == 16.566666666666663d);
        org.junit.Assert.assertTrue(Double.isNaN(double85));
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + 13.805555555555552d + "'", double89 == 13.805555555555552d);
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + 16.566666666666663d + "'", double90 == 16.566666666666663d);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
    }

    @Test
    public void test0404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0404");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        variance1.clear();
        double double3 = variance1.getResult();
        double double4 = variance1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance6 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray13 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double14 = variance6.evaluate(doubleArray13);
        double[] doubleArray18 = new double[] { (byte) 1, (byte) 100, 1L };
        double double19 = variance6.evaluate(doubleArray18);
        org.apache.commons.math.stat.descriptive.moment.Variance variance21 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray28 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double29 = variance21.evaluate(doubleArray28);
        variance21.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance33 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray40 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double41 = variance33.evaluate(doubleArray40);
        variance21.incrementAll(doubleArray40);
        variance6.incrementAll(doubleArray40);
        variance1.incrementAll(doubleArray40);
        double double45 = variance1.getResult();
        java.lang.Class<?> wildcardClass46 = variance1.getClass();
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 2168.222222222222d + "'", double14 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, 100.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 2178.0d + "'", double19 == 2178.0d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 2168.222222222222d + "'", double29 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 2168.222222222222d + "'", double41 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 2168.222222222222d + "'", double45 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(wildcardClass46);
    }

    @Test
    public void test0405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0405");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray8 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double9 = variance1.evaluate(doubleArray8);
        variance1.setBiasCorrected(true);
        boolean boolean12 = variance1.isBiasCorrected();
        double[] doubleArray19 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double20 = variance1.evaluate(doubleArray19);
        org.apache.commons.math.stat.descriptive.moment.Variance variance22 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray29 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double30 = variance22.evaluate(doubleArray29);
        variance22.setBiasCorrected(true);
        boolean boolean33 = variance22.isBiasCorrected();
        double[] doubleArray40 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double41 = variance22.evaluate(doubleArray40);
        double double44 = variance1.evaluate(doubleArray40, (int) (byte) 1, 0);
        variance1.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance48 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray55 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double56 = variance48.evaluate(doubleArray55);
        variance48.setBiasCorrected(true);
        boolean boolean59 = variance48.isBiasCorrected();
        double[] doubleArray66 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double67 = variance48.evaluate(doubleArray66);
        double double69 = variance1.evaluate(doubleArray66, 6.25d);
        variance1.setBiasCorrected(false);
        variance1.setBiasCorrected(true);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 2168.222222222222d + "'", double9 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 16.566666666666663d + "'", double20 == 16.566666666666663d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 2168.222222222222d + "'", double30 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 16.566666666666663d + "'", double41 == 16.566666666666663d);
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 2168.222222222222d + "'", double56 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 16.566666666666663d + "'", double67 == 16.566666666666663d);
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 16.566666666666666d + "'", double69 == 16.566666666666666d);
    }

    @Test
    public void test0406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0406");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray8 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double9 = variance1.evaluate(doubleArray8);
        variance1.setBiasCorrected(true);
        boolean boolean12 = variance1.isBiasCorrected();
        double[] doubleArray19 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double20 = variance1.evaluate(doubleArray19);
        org.apache.commons.math.stat.descriptive.moment.Variance variance22 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray29 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double30 = variance22.evaluate(doubleArray29);
        variance22.setBiasCorrected(true);
        boolean boolean33 = variance22.isBiasCorrected();
        double[] doubleArray40 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double41 = variance22.evaluate(doubleArray40);
        double double44 = variance1.evaluate(doubleArray40, (int) (byte) 1, 0);
        boolean boolean45 = variance1.isBiasCorrected();
        double double46 = variance1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance48 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray55 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double56 = variance48.evaluate(doubleArray55);
        variance48.setBiasCorrected(true);
        boolean boolean59 = variance48.isBiasCorrected();
        double[] doubleArray66 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double67 = variance48.evaluate(doubleArray66);
        double double68 = variance48.getResult();
        long long69 = variance48.getN();
        variance48.increment((double) '#');
        variance48.increment(100.0d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance75 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray82 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double83 = variance75.evaluate(doubleArray82);
        variance75.setBiasCorrected(true);
        boolean boolean86 = variance75.isBiasCorrected();
        double[] doubleArray93 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double94 = variance75.evaluate(doubleArray93);
        double double96 = variance48.evaluate(doubleArray93, (double) (byte) 100);
        double double98 = variance1.evaluate(doubleArray93, (double) (short) 1);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 2168.222222222222d + "'", double9 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 16.566666666666663d + "'", double20 == 16.566666666666663d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 2168.222222222222d + "'", double30 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 16.566666666666663d + "'", double41 == 16.566666666666663d);
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 2168.222222222222d + "'", double56 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 16.566666666666663d + "'", double67 == 16.566666666666663d);
        org.junit.Assert.assertTrue(Double.isNaN(double68));
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + 0L + "'", long69 == 0L);
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 2168.222222222222d + "'", double83 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertNotNull(doubleArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray93), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double94 + "' != '" + 16.566666666666663d + "'", double94 == 16.566666666666663d);
        org.junit.Assert.assertTrue("'" + double96 + "' != '" + 16.566666666667153d + "'", double96 == 16.566666666667153d);
        org.junit.Assert.assertTrue("'" + double98 + "' != '" + 16.566666666666666d + "'", double98 == 16.566666666666666d);
    }

    @Test
    public void test0407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0407");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray8 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double9 = variance1.evaluate(doubleArray8);
        long long10 = variance1.getN();
        variance1.increment((double) (byte) 1);
        variance1.increment((double) 6L);
        double double15 = variance1.getResult();
        variance1.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance18 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray25 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double26 = variance18.evaluate(doubleArray25);
        variance18.setBiasCorrected(true);
        boolean boolean29 = variance18.isBiasCorrected();
        double[] doubleArray36 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double37 = variance18.evaluate(doubleArray36);
        double double38 = variance1.evaluate(doubleArray36);
        java.lang.Class<?> wildcardClass39 = doubleArray36.getClass();
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 2168.222222222222d + "'", double9 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 6.25d + "'", double15 == 6.25d);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 2168.222222222222d + "'", double26 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 16.566666666666663d + "'", double37 == 16.566666666666663d);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 13.805555555555552d + "'", double38 == 13.805555555555552d);
        org.junit.Assert.assertNotNull(wildcardClass39);
    }

    @Test
    public void test0408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0408");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray8 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double9 = variance1.evaluate(doubleArray8);
        variance1.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance13 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray20 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double21 = variance13.evaluate(doubleArray20);
        variance13.setBiasCorrected(true);
        boolean boolean24 = variance13.isBiasCorrected();
        double[] doubleArray31 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double32 = variance13.evaluate(doubleArray31);
        org.apache.commons.math.stat.descriptive.moment.Variance variance34 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray41 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double42 = variance34.evaluate(doubleArray41);
        variance34.setBiasCorrected(true);
        boolean boolean45 = variance34.isBiasCorrected();
        double[] doubleArray52 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double53 = variance34.evaluate(doubleArray52);
        double double56 = variance13.evaluate(doubleArray52, (int) (byte) 1, 0);
        double double58 = variance1.evaluate(doubleArray52, 2178.0d);
        variance1.increment(3267.0d);
        double[] doubleArray61 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double65 = variance1.evaluate(doubleArray61, 0.0d, (int) (byte) 0, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: input value array is null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 2168.222222222222d + "'", double9 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 2168.222222222222d + "'", double21 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 16.566666666666663d + "'", double32 == 16.566666666666663d);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 2168.222222222222d + "'", double42 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 16.566666666666663d + "'", double53 == 16.566666666666663d);
        org.junit.Assert.assertTrue(Double.isNaN(double56));
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 16.566666666418314d + "'", double58 == 16.566666666418314d);
    }

    @Test
    public void test0409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0409");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray8 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double9 = variance1.evaluate(doubleArray8);
        variance1.setBiasCorrected(true);
        boolean boolean12 = variance1.isBiasCorrected();
        double[] doubleArray19 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double20 = variance1.evaluate(doubleArray19);
        double double21 = variance1.getResult();
        long long22 = variance1.getN();
        java.lang.Object obj23 = null;
        boolean boolean24 = variance1.equals(obj23);
        long long25 = variance1.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance27 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        variance27.clear();
        double double29 = variance27.getResult();
        double[] doubleArray34 = new double[] { (-1), 2168.222222222222d, 16.566666666418314d, 10.0d };
        variance27.incrementAll(doubleArray34);
        org.apache.commons.math.stat.descriptive.moment.Variance variance37 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray44 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double45 = variance37.evaluate(doubleArray44);
        variance37.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance49 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray56 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double57 = variance49.evaluate(doubleArray56);
        variance37.incrementAll(doubleArray56);
        variance37.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance61 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray68 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double69 = variance61.evaluate(doubleArray68);
        double[] doubleArray73 = new double[] { (byte) 1, (byte) 100, 1L };
        double double74 = variance61.evaluate(doubleArray73);
        variance37.incrementAll(doubleArray73, (int) (byte) 0, (int) (byte) 1);
        double double81 = variance27.evaluate(doubleArray73, (double) 'a', (int) (short) 1, (int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            double double84 = variance1.evaluate(doubleArray73, (int) (byte) 100, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: length cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 2168.222222222222d + "'", double9 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 16.566666666666663d + "'", double20 == 16.566666666666663d);
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[-1.0, 2168.222222222222, 16.566666666418314, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 2168.222222222222d + "'", double45 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 2168.222222222222d + "'", double57 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 2168.222222222222d + "'", double69 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[1.0, 100.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 2178.0d + "'", double74 == 2178.0d);
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 0.0d + "'", double81 == 0.0d);
    }

    @Test
    public void test0410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0410");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = null;
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment1);
        double[] doubleArray3 = new double[] {};
        double double6 = variance2.evaluate(doubleArray3, 0, 0);
        boolean boolean8 = variance2.equals((java.lang.Object) 10);
        variance2.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance12 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray19 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double20 = variance12.evaluate(doubleArray19);
        variance12.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance24 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        variance24.clear();
        double double26 = variance24.getResult();
        double[] doubleArray31 = new double[] { (-1), 2168.222222222222d, 16.566666666418314d, 10.0d };
        variance24.incrementAll(doubleArray31);
        variance12.incrementAll(doubleArray31);
        // The following exception was thrown during execution in test generation
        try {
            variance2.incrementAll(doubleArray31, (int) (byte) -1, (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: start position cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 2168.222222222222d + "'", double20 == 2168.222222222222d);
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[-1.0, 2168.222222222222, 16.566666666418314, 10.0]");
    }

    @Test
    public void test0411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0411");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = null;
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment1);
        variance2.clear();
        double[] doubleArray4 = new double[] {};
        variance2.incrementAll(doubleArray4);
        variance2.increment(2178.0d);
        variance2.clear();
        variance2.clear();
        boolean boolean10 = variance2.isBiasCorrected();
        boolean boolean11 = variance2.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.Variance variance13 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray20 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double21 = variance13.evaluate(doubleArray20);
        variance13.setBiasCorrected(true);
        boolean boolean24 = variance13.isBiasCorrected();
        double[] doubleArray31 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double32 = variance13.evaluate(doubleArray31);
        org.apache.commons.math.stat.descriptive.moment.Variance variance34 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray41 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double42 = variance34.evaluate(doubleArray41);
        variance34.setBiasCorrected(true);
        boolean boolean45 = variance34.isBiasCorrected();
        double[] doubleArray52 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double53 = variance34.evaluate(doubleArray52);
        double double56 = variance13.evaluate(doubleArray52, (int) (byte) 1, 0);
        variance13.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance60 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray67 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double68 = variance60.evaluate(doubleArray67);
        variance60.setBiasCorrected(true);
        boolean boolean71 = variance60.isBiasCorrected();
        double[] doubleArray78 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double79 = variance60.evaluate(doubleArray78);
        double double81 = variance13.evaluate(doubleArray78, 6.25d);
        // The following exception was thrown during execution in test generation
        try {
            variance2.incrementAll(doubleArray78, 10, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: length cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 2168.222222222222d + "'", double21 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 16.566666666666663d + "'", double32 == 16.566666666666663d);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 2168.222222222222d + "'", double42 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 16.566666666666663d + "'", double53 == 16.566666666666663d);
        org.junit.Assert.assertTrue(Double.isNaN(double56));
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 2168.222222222222d + "'", double68 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 16.566666666666663d + "'", double79 == 16.566666666666663d);
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 16.566666666666666d + "'", double81 == 16.566666666666666d);
    }

    @Test
    public void test0412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0412");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray8 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double9 = variance1.evaluate(doubleArray8);
        variance1.setBiasCorrected(true);
        long long12 = variance1.getN();
        variance1.increment(6.25d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance16 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        variance16.clear();
        double double18 = variance16.getResult();
        variance16.setBiasCorrected(true);
        variance16.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance24 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray31 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double32 = variance24.evaluate(doubleArray31);
        variance24.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance36 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray43 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double44 = variance36.evaluate(doubleArray43);
        variance36.setBiasCorrected(true);
        boolean boolean47 = variance36.isBiasCorrected();
        double[] doubleArray54 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double55 = variance36.evaluate(doubleArray54);
        double double58 = variance24.evaluate(doubleArray54, (int) (byte) 1, (int) (byte) 0);
        variance16.incrementAll(doubleArray54);
        // The following exception was thrown during execution in test generation
        try {
            double double62 = variance1.evaluate(doubleArray54, (int) '4', (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 2168.222222222222d + "'", double9 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 2168.222222222222d + "'", double32 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 2168.222222222222d + "'", double44 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 16.566666666666663d + "'", double55 == 16.566666666666663d);
        org.junit.Assert.assertTrue(Double.isNaN(double58));
    }

    @Test
    public void test0413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0413");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray8 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double9 = variance1.evaluate(doubleArray8);
        variance1.setBiasCorrected(true);
        boolean boolean12 = variance1.isBiasCorrected();
        double[] doubleArray19 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double20 = variance1.evaluate(doubleArray19);
        org.apache.commons.math.stat.descriptive.moment.Variance variance22 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray29 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double30 = variance22.evaluate(doubleArray29);
        variance22.setBiasCorrected(true);
        boolean boolean33 = variance22.isBiasCorrected();
        double[] doubleArray40 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double41 = variance22.evaluate(doubleArray40);
        double double44 = variance1.evaluate(doubleArray40, (int) (byte) 1, 0);
        boolean boolean45 = variance1.isBiasCorrected();
        double double46 = variance1.getResult();
        double[] doubleArray47 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double49 = variance1.evaluate(doubleArray47, (double) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 2168.222222222222d + "'", double9 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 16.566666666666663d + "'", double20 == 16.566666666666663d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 2168.222222222222d + "'", double30 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 16.566666666666663d + "'", double41 == 16.566666666666663d);
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double46));
    }

    @Test
    public void test0414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0414");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray8 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double9 = variance1.evaluate(doubleArray8);
        variance1.setBiasCorrected(true);
        boolean boolean12 = variance1.isBiasCorrected();
        double[] doubleArray19 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double20 = variance1.evaluate(doubleArray19);
        boolean boolean22 = variance1.equals((java.lang.Object) 10.0d);
        boolean boolean23 = variance1.isBiasCorrected();
        variance1.setBiasCorrected(true);
        variance1.increment((double) 10);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 2168.222222222222d + "'", double9 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 16.566666666666663d + "'", double20 == 16.566666666666663d);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
    }

    @Test
    public void test0415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0415");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance3 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray10 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double11 = variance3.evaluate(doubleArray10);
        double[] doubleArray15 = new double[] { (byte) 1, (byte) 100, 1L };
        double double16 = variance3.evaluate(doubleArray15);
        boolean boolean17 = variance1.equals((java.lang.Object) variance3);
        java.lang.Class<?> wildcardClass18 = variance3.getClass();
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 2168.222222222222d + "'", double11 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[1.0, 100.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 2178.0d + "'", double16 == 2178.0d);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test0416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0416");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray8 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double9 = variance1.evaluate(doubleArray8);
        variance1.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance13 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray20 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double21 = variance13.evaluate(doubleArray20);
        variance13.setBiasCorrected(true);
        boolean boolean24 = variance13.isBiasCorrected();
        double[] doubleArray31 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double32 = variance13.evaluate(doubleArray31);
        double double35 = variance1.evaluate(doubleArray31, (int) (byte) 1, (int) (byte) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance37 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance39 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray46 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double47 = variance39.evaluate(doubleArray46);
        variance39.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance51 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray58 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double59 = variance51.evaluate(doubleArray58);
        variance51.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance63 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray70 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double71 = variance63.evaluate(doubleArray70);
        variance63.setBiasCorrected(true);
        boolean boolean74 = variance63.isBiasCorrected();
        double[] doubleArray81 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double82 = variance63.evaluate(doubleArray81);
        double double85 = variance51.evaluate(doubleArray81, (int) (byte) 1, (int) (byte) 0);
        variance39.incrementAll(doubleArray81, (int) (byte) 1, 1);
        double double89 = variance37.evaluate(doubleArray81);
        double double90 = variance1.evaluate(doubleArray81);
        variance1.clear();
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 2168.222222222222d + "'", double9 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 2168.222222222222d + "'", double21 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 16.566666666666663d + "'", double32 == 16.566666666666663d);
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 2168.222222222222d + "'", double47 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 2168.222222222222d + "'", double59 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 2168.222222222222d + "'", double71 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 16.566666666666663d + "'", double82 == 16.566666666666663d);
        org.junit.Assert.assertTrue(Double.isNaN(double85));
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + 13.805555555555552d + "'", double89 == 13.805555555555552d);
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + 16.566666666666663d + "'", double90 == 16.566666666666663d);
    }

    @Test
    public void test0417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0417");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray8 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double9 = variance1.evaluate(doubleArray8);
        variance1.setBiasCorrected(true);
        variance1.increment((double) (byte) 0);
        double[] doubleArray16 = new double[] { 'a', 100L };
        double double18 = variance1.evaluate(doubleArray16, 0.0d);
        long long19 = variance1.getN();
        boolean boolean20 = variance1.isBiasCorrected();
        long long21 = variance1.getN();
        double double22 = variance1.getResult();
        long long23 = variance1.getN();
        variance1.clear();
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 2168.222222222222d + "'", double9 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[97.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 4.5d + "'", double18 == 4.5d);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 1L + "'", long19 == 1L);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 1L + "'", long21 == 1L);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 1L + "'", long23 == 1L);
    }

    @Test
    public void test0418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0418");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray8 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double9 = variance1.evaluate(doubleArray8);
        variance1.setBiasCorrected(true);
        long long12 = variance1.getN();
        long long13 = variance1.getN();
        boolean boolean14 = variance1.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.Variance variance16 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray23 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double24 = variance16.evaluate(doubleArray23);
        double[] doubleArray28 = new double[] { (byte) 1, (byte) 100, 1L };
        double double29 = variance16.evaluate(doubleArray28);
        variance1.incrementAll(doubleArray28, (int) (short) 1, 0);
        variance1.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance35 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray42 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double43 = variance35.evaluate(doubleArray42);
        long long44 = variance35.getN();
        variance35.increment(874596.4092824734d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance48 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        variance48.clear();
        double double50 = variance48.getResult();
        double[] doubleArray55 = new double[] { (-1), 2168.222222222222d, 16.566666666418314d, 10.0d };
        variance48.incrementAll(doubleArray55);
        variance35.incrementAll(doubleArray55, 0, (int) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            double double62 = variance1.evaluate(doubleArray55, (int) (byte) -1, (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: start position cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 2168.222222222222d + "'", double9 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 2168.222222222222d + "'", double24 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, 100.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 2178.0d + "'", double29 == 2178.0d);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 2168.222222222222d + "'", double43 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double50));
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[-1.0, 2168.222222222222, 16.566666666418314, 10.0]");
    }

    @Test
    public void test0419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0419");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray8 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double9 = variance1.evaluate(doubleArray8);
        variance1.setBiasCorrected(true);
        boolean boolean12 = variance1.isBiasCorrected();
        double double13 = variance1.getResult();
        variance1.increment((double) 'a');
        variance1.increment((-1.0d));
        boolean boolean18 = variance1.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.Variance variance20 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray27 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double28 = variance20.evaluate(doubleArray27);
        long long29 = variance20.getN();
        variance20.increment((double) (byte) 1);
        variance20.increment((double) 6L);
        variance20.increment(2178.0d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance36 = new org.apache.commons.math.stat.descriptive.moment.Variance();
        long long37 = variance36.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance39 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray46 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double47 = variance39.evaluate(doubleArray46);
        variance39.setBiasCorrected(true);
        boolean boolean50 = variance39.isBiasCorrected();
        double[] doubleArray57 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double58 = variance39.evaluate(doubleArray57);
        boolean boolean60 = variance39.equals((java.lang.Object) 10.0d);
        boolean boolean61 = variance39.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.Variance variance63 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        boolean boolean64 = variance39.equals((java.lang.Object) false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance66 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray73 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double74 = variance66.evaluate(doubleArray73);
        variance66.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance78 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray85 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double86 = variance78.evaluate(doubleArray85);
        variance66.incrementAll(doubleArray85);
        double double89 = variance39.evaluate(doubleArray85, (double) 100.0f);
        variance36.incrementAll(doubleArray85, (int) (short) 1, (int) (byte) 0);
        variance20.incrementAll(doubleArray85);
        // The following exception was thrown during execution in test generation
        try {
            double double97 = variance1.evaluate(doubleArray85, (double) (short) -1, (int) 'a', (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 2168.222222222222d + "'", double9 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 2168.222222222222d + "'", double28 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 2168.222222222222d + "'", double47 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 16.566666666666663d + "'", double58 == 16.566666666666663d);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 2168.222222222222d + "'", double74 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 2168.222222222222d + "'", double86 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + 2601.8666666666663d + "'", double89 == 2601.8666666666663d);
    }

    @Test
    public void test0420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0420");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = null;
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment1);
        org.apache.commons.math.stat.descriptive.moment.Variance variance4 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray11 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double12 = variance4.evaluate(doubleArray11);
        variance4.setBiasCorrected(true);
        boolean boolean15 = variance4.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.Variance variance17 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray24 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double25 = variance17.evaluate(doubleArray24);
        variance17.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance29 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray36 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double37 = variance29.evaluate(doubleArray36);
        variance29.setBiasCorrected(true);
        boolean boolean40 = variance29.isBiasCorrected();
        double[] doubleArray47 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double48 = variance29.evaluate(doubleArray47);
        double double51 = variance17.evaluate(doubleArray47, (int) (byte) 1, (int) (byte) 0);
        double double54 = variance4.evaluate(doubleArray47, (int) (byte) 1, 0);
        // The following exception was thrown during execution in test generation
        try {
            double double57 = variance2.evaluate(doubleArray47, (int) (byte) 1, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 2168.222222222222d + "'", double12 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 2168.222222222222d + "'", double25 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 2168.222222222222d + "'", double37 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 16.566666666666663d + "'", double48 == 16.566666666666663d);
        org.junit.Assert.assertTrue(Double.isNaN(double51));
        org.junit.Assert.assertTrue(Double.isNaN(double54));
    }

    @Test
    public void test0421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0421");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray8 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double9 = variance1.evaluate(doubleArray8);
        variance1.setBiasCorrected(true);
        boolean boolean12 = variance1.isBiasCorrected();
        double[] doubleArray19 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double20 = variance1.evaluate(doubleArray19);
        boolean boolean22 = variance1.equals((java.lang.Object) 10.0d);
        boolean boolean23 = variance1.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.Variance variance25 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray32 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double33 = variance25.evaluate(doubleArray32);
        variance25.setBiasCorrected(true);
        long long36 = variance25.getN();
        variance25.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance39 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray46 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double47 = variance39.evaluate(doubleArray46);
        double double48 = variance25.evaluate(doubleArray46);
        org.apache.commons.math.stat.descriptive.moment.Variance variance50 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double51 = variance50.getResult();
        double double52 = variance50.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance54 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray61 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double62 = variance54.evaluate(doubleArray61);
        variance54.setBiasCorrected(true);
        long long65 = variance54.getN();
        variance54.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance68 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray75 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double76 = variance68.evaluate(doubleArray75);
        double double77 = variance54.evaluate(doubleArray75);
        variance50.incrementAll(doubleArray75);
        double double79 = variance25.evaluate(doubleArray75);
        double double80 = variance1.evaluate(doubleArray75);
        java.lang.Class<?> wildcardClass81 = doubleArray75.getClass();
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 2168.222222222222d + "'", double9 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 16.566666666666663d + "'", double20 == 16.566666666666663d);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 2168.222222222222d + "'", double33 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 2168.222222222222d + "'", double47 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 2601.866666666667d + "'", double48 == 2601.866666666667d);
        org.junit.Assert.assertTrue(Double.isNaN(double51));
        org.junit.Assert.assertTrue(Double.isNaN(double52));
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 2168.222222222222d + "'", double62 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 0L + "'", long65 == 0L);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 2168.222222222222d + "'", double76 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 2601.866666666667d + "'", double77 == 2601.866666666667d);
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 2601.866666666667d + "'", double79 == 2601.866666666667d);
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 2601.866666666667d + "'", double80 == 2601.866666666667d);
        org.junit.Assert.assertNotNull(wildcardClass81);
    }

    @Test
    public void test0422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0422");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray8 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double9 = variance1.evaluate(doubleArray8);
        org.apache.commons.math.stat.descriptive.moment.Variance variance11 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray18 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double19 = variance11.evaluate(doubleArray18);
        variance11.setBiasCorrected(true);
        boolean boolean22 = variance11.isBiasCorrected();
        double[] doubleArray29 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double30 = variance11.evaluate(doubleArray29);
        org.apache.commons.math.stat.descriptive.moment.Variance variance32 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray39 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double40 = variance32.evaluate(doubleArray39);
        variance32.setBiasCorrected(true);
        boolean boolean43 = variance32.isBiasCorrected();
        double[] doubleArray50 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double51 = variance32.evaluate(doubleArray50);
        double double54 = variance11.evaluate(doubleArray50, (int) (byte) 1, 0);
        variance11.setBiasCorrected(true);
        boolean boolean57 = variance1.equals((java.lang.Object) true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance59 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray66 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double67 = variance59.evaluate(doubleArray66);
        double double69 = variance1.evaluate(doubleArray66, 874596.4092824734d);
        java.lang.Class<?> wildcardClass70 = variance1.getClass();
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 2168.222222222222d + "'", double9 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 2168.222222222222d + "'", double19 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 16.566666666666663d + "'", double30 == 16.566666666666663d);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 2168.222222222222d + "'", double40 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 16.566666666666663d + "'", double51 == 16.566666666666663d);
        org.junit.Assert.assertTrue(Double.isNaN(double54));
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 2168.222222222222d + "'", double67 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 2168.2220052083335d + "'", double69 == 2168.2220052083335d);
        org.junit.Assert.assertNotNull(wildcardClass70);
    }

    @Test
    public void test0423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0423");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray8 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double9 = variance1.evaluate(doubleArray8);
        variance1.setBiasCorrected(true);
        long long12 = variance1.getN();
        long long13 = variance1.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance15 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray22 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double23 = variance15.evaluate(doubleArray22);
        double[] doubleArray27 = new double[] { (byte) 1, (byte) 100, 1L };
        double double28 = variance15.evaluate(doubleArray27);
        double double30 = variance1.evaluate(doubleArray27, (double) 10.0f);
        org.apache.commons.math.stat.descriptive.moment.Variance variance32 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray39 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double40 = variance32.evaluate(doubleArray39);
        variance32.setBiasCorrected(true);
        boolean boolean43 = variance32.isBiasCorrected();
        double[] doubleArray50 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double51 = variance32.evaluate(doubleArray50);
        org.apache.commons.math.stat.descriptive.moment.Variance variance53 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray60 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double61 = variance53.evaluate(doubleArray60);
        variance53.setBiasCorrected(true);
        boolean boolean64 = variance53.isBiasCorrected();
        double[] doubleArray71 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double72 = variance53.evaluate(doubleArray71);
        double double75 = variance32.evaluate(doubleArray71, (int) (byte) 1, 0);
        variance32.setBiasCorrected(true);
        variance32.setBiasCorrected(true);
        double double80 = variance32.getResult();
        boolean boolean81 = variance32.isBiasCorrected();
        boolean boolean82 = variance32.isBiasCorrected();
        variance32.increment(0.0d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance86 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray93 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double94 = variance86.evaluate(doubleArray93);
        variance32.incrementAll(doubleArray93, (int) (byte) 0, 1);
        double double99 = variance1.evaluate(doubleArray93, (double) ' ');
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 2168.222222222222d + "'", double9 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 2168.222222222222d + "'", double23 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0, 100.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 2178.0d + "'", double28 == 2178.0d);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 3267.0d + "'", double30 == 3267.0d);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 2168.222222222222d + "'", double40 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 16.566666666666663d + "'", double51 == 16.566666666666663d);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 2168.222222222222d + "'", double61 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 16.566666666666663d + "'", double72 == 16.566666666666663d);
        org.junit.Assert.assertTrue(Double.isNaN(double75));
        org.junit.Assert.assertTrue(Double.isNaN(double80));
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertNotNull(doubleArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray93), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double94 + "' != '" + 2168.222222222222d + "'", double94 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + double99 + "' != '" + 2601.866666666667d + "'", double99 == 2601.866666666667d);
    }

    @Test
    public void test0424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0424");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray8 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double9 = variance1.evaluate(doubleArray8);
        variance1.setBiasCorrected(true);
        boolean boolean12 = variance1.isBiasCorrected();
        double[] doubleArray19 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double20 = variance1.evaluate(doubleArray19);
        boolean boolean22 = variance1.equals((java.lang.Object) 10.0d);
        boolean boolean23 = variance1.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.Variance variance25 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        boolean boolean26 = variance1.equals((java.lang.Object) false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance28 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray35 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double36 = variance28.evaluate(doubleArray35);
        variance28.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance40 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray47 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double48 = variance40.evaluate(doubleArray47);
        variance28.incrementAll(doubleArray47);
        double double51 = variance1.evaluate(doubleArray47, (double) 100.0f);
        long long52 = variance1.getN();
        long long53 = variance1.getN();
        variance1.setBiasCorrected(false);
        boolean boolean56 = variance1.isBiasCorrected();
        boolean boolean57 = variance1.isBiasCorrected();
        variance1.increment(0.0d);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 2168.222222222222d + "'", double9 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 16.566666666666663d + "'", double20 == 16.566666666666663d);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 2168.222222222222d + "'", double36 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 2168.222222222222d + "'", double48 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 2601.8666666666663d + "'", double51 == 2601.8666666666663d);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 0L + "'", long52 == 0L);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 0L + "'", long53 == 0L);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
    }

    @Test
    public void test0425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0425");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = null;
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment1);
        variance2.clear();
        variance2.setBiasCorrected(false);
        boolean boolean6 = variance2.isBiasCorrected();
        variance2.increment(13.805555555555552d);
        boolean boolean9 = variance2.isBiasCorrected();
        variance2.increment(677378.9558333334d);
        // The following exception was thrown during execution in test generation
        try {
            double double12 = variance2.getResult();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test0426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0426");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray8 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double9 = variance1.evaluate(doubleArray8);
        variance1.setBiasCorrected(true);
        variance1.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment14 = null;
        org.apache.commons.math.stat.descriptive.moment.Variance variance15 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment14);
        double[] doubleArray16 = new double[] {};
        double double19 = variance15.evaluate(doubleArray16, 0, 0);
        // The following exception was thrown during execution in test generation
        try {
            double double23 = variance1.evaluate(doubleArray16, (double) (byte) 1, (int) (short) 0, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 2168.222222222222d + "'", double9 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double19));
    }

    @Test
    public void test0427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0427");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = null;
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment1);
        variance2.increment(0.0d);
        variance2.clear();
        variance2.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance9 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray16 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double17 = variance9.evaluate(doubleArray16);
        long long18 = variance9.getN();
        variance9.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance21 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray28 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double29 = variance21.evaluate(doubleArray28);
        variance21.setBiasCorrected(true);
        boolean boolean32 = variance21.isBiasCorrected();
        double[] doubleArray39 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double40 = variance21.evaluate(doubleArray39);
        double double41 = variance21.getResult();
        variance21.setBiasCorrected(true);
        long long44 = variance21.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance46 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray53 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double54 = variance46.evaluate(doubleArray53);
        variance46.setBiasCorrected(true);
        boolean boolean57 = variance46.isBiasCorrected();
        double[] doubleArray64 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double65 = variance46.evaluate(doubleArray64);
        boolean boolean67 = variance46.equals((java.lang.Object) 10.0d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance69 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray76 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double77 = variance69.evaluate(doubleArray76);
        variance69.setBiasCorrected(true);
        boolean boolean80 = variance69.isBiasCorrected();
        double[] doubleArray87 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double88 = variance69.evaluate(doubleArray87);
        double double90 = variance46.evaluate(doubleArray87, (double) 0.0f);
        variance21.incrementAll(doubleArray87);
        double double93 = variance9.evaluate(doubleArray87, (double) ' ');
        // The following exception was thrown during execution in test generation
        try {
            double double97 = variance2.evaluate(doubleArray87, (double) 1.0f, (int) (byte) 0, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 2168.222222222222d + "'", double17 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 2168.222222222222d + "'", double29 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 16.566666666666663d + "'", double40 == 16.566666666666663d);
        org.junit.Assert.assertTrue(Double.isNaN(double41));
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 2168.222222222222d + "'", double54 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 16.566666666666663d + "'", double65 == 16.566666666666663d);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 2168.222222222222d + "'", double77 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray87), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 16.566666666666663d + "'", double88 == 16.566666666666663d);
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + 16.566666666666666d + "'", double90 == 16.566666666666666d);
        org.junit.Assert.assertTrue("'" + double93 + "' != '" + 13.805555555555506d + "'", double93 == 13.805555555555506d);
    }

    @Test
    public void test0428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0428");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray8 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double9 = variance1.evaluate(doubleArray8);
        variance1.clear();
        variance1.setBiasCorrected(false);
        variance1.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance15 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray22 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double23 = variance15.evaluate(doubleArray22);
        variance15.setBiasCorrected(true);
        variance15.increment((double) (byte) 0);
        double[] doubleArray30 = new double[] { 'a', 100L };
        double double32 = variance15.evaluate(doubleArray30, 0.0d);
        double double33 = variance1.evaluate(doubleArray30);
        variance1.setBiasCorrected(true);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 2168.222222222222d + "'", double9 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 2168.222222222222d + "'", double23 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[97.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 4.5d + "'", double32 == 4.5d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 2.25d + "'", double33 == 2.25d);
    }

    @Test
    public void test0429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0429");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray8 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double9 = variance1.evaluate(doubleArray8);
        variance1.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance13 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray20 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double21 = variance13.evaluate(doubleArray20);
        variance13.setBiasCorrected(true);
        boolean boolean24 = variance13.isBiasCorrected();
        double[] doubleArray31 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double32 = variance13.evaluate(doubleArray31);
        org.apache.commons.math.stat.descriptive.moment.Variance variance34 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray41 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double42 = variance34.evaluate(doubleArray41);
        variance34.setBiasCorrected(true);
        boolean boolean45 = variance34.isBiasCorrected();
        double[] doubleArray52 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double53 = variance34.evaluate(doubleArray52);
        double double56 = variance13.evaluate(doubleArray52, (int) (byte) 1, 0);
        double double58 = variance1.evaluate(doubleArray52, 2178.0d);
        variance1.setBiasCorrected(true);
        long long61 = variance1.getN();
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 2168.222222222222d + "'", double9 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 2168.222222222222d + "'", double21 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 16.566666666666663d + "'", double32 == 16.566666666666663d);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 2168.222222222222d + "'", double42 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 16.566666666666663d + "'", double53 == 16.566666666666663d);
        org.junit.Assert.assertTrue(Double.isNaN(double56));
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 16.566666666418314d + "'", double58 == 16.566666666418314d);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 0L + "'", long61 == 0L);
    }

    @Test
    public void test0430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0430");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance3 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray10 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double11 = variance3.evaluate(doubleArray10);
        variance3.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance15 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray22 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double23 = variance15.evaluate(doubleArray22);
        variance15.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance27 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray34 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double35 = variance27.evaluate(doubleArray34);
        variance27.setBiasCorrected(true);
        boolean boolean38 = variance27.isBiasCorrected();
        double[] doubleArray45 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double46 = variance27.evaluate(doubleArray45);
        double double49 = variance15.evaluate(doubleArray45, (int) (byte) 1, (int) (byte) 0);
        variance3.incrementAll(doubleArray45, (int) (byte) 1, 1);
        double double53 = variance1.evaluate(doubleArray45);
        double double54 = variance1.getResult();
        variance1.clear();
        variance1.setBiasCorrected(false);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 2168.222222222222d + "'", double11 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 2168.222222222222d + "'", double23 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 2168.222222222222d + "'", double35 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 16.566666666666663d + "'", double46 == 16.566666666666663d);
        org.junit.Assert.assertTrue(Double.isNaN(double49));
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 13.805555555555552d + "'", double53 == 13.805555555555552d);
        org.junit.Assert.assertTrue(Double.isNaN(double54));
    }

    @Test
    public void test0431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0431");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double2 = variance1.getResult();
        double double3 = variance1.getResult();
        variance1.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance6 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray13 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double14 = variance6.evaluate(doubleArray13);
        variance6.setBiasCorrected(true);
        long long17 = variance6.getN();
        long long18 = variance6.getN();
        boolean boolean19 = variance6.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.Variance variance21 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray28 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double29 = variance21.evaluate(doubleArray28);
        double[] doubleArray33 = new double[] { (byte) 1, (byte) 100, 1L };
        double double34 = variance21.evaluate(doubleArray33);
        variance6.incrementAll(doubleArray33, (int) (short) 1, 0);
        variance1.incrementAll(doubleArray33);
        long long39 = variance1.getN();
        long long40 = variance1.getN();
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 2168.222222222222d + "'", double14 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 2168.222222222222d + "'", double29 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0, 100.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 2178.0d + "'", double34 == 2178.0d);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 3L + "'", long39 == 3L);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 3L + "'", long40 == 3L);
    }

    @Test
    public void test0432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0432");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = null;
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment1);
        double[] doubleArray3 = new double[] {};
        double double6 = variance2.evaluate(doubleArray3, 0, 0);
        variance2.setBiasCorrected(true);
        variance2.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance11 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray18 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double19 = variance11.evaluate(doubleArray18);
        variance11.setBiasCorrected(true);
        long long22 = variance11.getN();
        variance11.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance25 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray32 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double33 = variance25.evaluate(doubleArray32);
        double double34 = variance11.evaluate(doubleArray32);
        org.apache.commons.math.stat.descriptive.moment.Variance variance36 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double37 = variance36.getResult();
        double double38 = variance36.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance40 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray47 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double48 = variance40.evaluate(doubleArray47);
        variance40.setBiasCorrected(true);
        long long51 = variance40.getN();
        variance40.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance54 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray61 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double62 = variance54.evaluate(doubleArray61);
        double double63 = variance40.evaluate(doubleArray61);
        variance36.incrementAll(doubleArray61);
        double double65 = variance11.evaluate(doubleArray61);
        // The following exception was thrown during execution in test generation
        try {
            variance2.incrementAll(doubleArray61, (int) '#', 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 2168.222222222222d + "'", double19 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 2168.222222222222d + "'", double33 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 2601.866666666667d + "'", double34 == 2601.866666666667d);
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertTrue(Double.isNaN(double38));
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 2168.222222222222d + "'", double48 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 0L + "'", long51 == 0L);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 2168.222222222222d + "'", double62 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 2601.866666666667d + "'", double63 == 2601.866666666667d);
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 2601.866666666667d + "'", double65 == 2601.866666666667d);
    }

    @Test
    public void test0433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0433");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = null;
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment1);
        double[] doubleArray3 = new double[] {};
        double double6 = variance2.evaluate(doubleArray3, 0, 0);
        boolean boolean8 = variance2.equals((java.lang.Object) 10.0f);
        variance2.setBiasCorrected(false);
        // The following exception was thrown during execution in test generation
        try {
            double double11 = variance2.getResult();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test0434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0434");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray8 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double9 = variance1.evaluate(doubleArray8);
        variance1.setBiasCorrected(true);
        long long12 = variance1.getN();
        variance1.clear();
        double double14 = variance1.getResult();
        variance1.clear();
        variance1.clear();
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 2168.222222222222d + "'", double9 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
    }

    @Test
    public void test0435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0435");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance3 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray10 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double11 = variance3.evaluate(doubleArray10);
        double[] doubleArray15 = new double[] { (byte) 1, (byte) 100, 1L };
        double double16 = variance3.evaluate(doubleArray15);
        boolean boolean17 = variance1.equals((java.lang.Object) variance3);
        variance1.clear();
        variance1.setBiasCorrected(true);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 2168.222222222222d + "'", double11 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[1.0, 100.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 2178.0d + "'", double16 == 2178.0d);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
    }

    @Test
    public void test0436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0436");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray8 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double9 = variance1.evaluate(doubleArray8);
        variance1.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance13 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray20 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double21 = variance13.evaluate(doubleArray20);
        variance1.incrementAll(doubleArray20);
        variance1.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance25 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray32 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double33 = variance25.evaluate(doubleArray32);
        variance25.setBiasCorrected(true);
        boolean boolean36 = variance25.isBiasCorrected();
        double[] doubleArray43 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double44 = variance25.evaluate(doubleArray43);
        boolean boolean46 = variance25.equals((java.lang.Object) 10.0d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance48 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray55 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double56 = variance48.evaluate(doubleArray55);
        variance48.setBiasCorrected(true);
        boolean boolean59 = variance48.isBiasCorrected();
        double[] doubleArray66 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double67 = variance48.evaluate(doubleArray66);
        double double69 = variance25.evaluate(doubleArray66, (double) 0.0f);
        variance1.incrementAll(doubleArray66);
        double double71 = variance1.getResult();
        double[] doubleArray72 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double74 = variance1.evaluate(doubleArray72, (double) 6L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 2168.222222222222d + "'", double9 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 2168.222222222222d + "'", double21 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 2168.222222222222d + "'", double33 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 16.566666666666663d + "'", double44 == 16.566666666666663d);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 2168.222222222222d + "'", double56 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 16.566666666666663d + "'", double67 == 16.566666666666663d);
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 16.566666666666666d + "'", double69 == 16.566666666666666d);
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 16.56666666666667d + "'", double71 == 16.56666666666667d);
    }

    @Test
    public void test0437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0437");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray8 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double9 = variance1.evaluate(doubleArray8);
        double double10 = variance1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance12 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray19 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double20 = variance12.evaluate(doubleArray19);
        variance12.setBiasCorrected(true);
        long long23 = variance12.getN();
        long long24 = variance12.getN();
        boolean boolean26 = variance12.equals((java.lang.Object) 16.566666666666663d);
        boolean boolean28 = variance12.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance30 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray37 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double38 = variance30.evaluate(doubleArray37);
        variance30.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance42 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray49 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double50 = variance42.evaluate(doubleArray49);
        variance30.incrementAll(doubleArray49);
        double double52 = variance12.evaluate(doubleArray49);
        variance1.incrementAll(doubleArray49);
        java.lang.Class<?> wildcardClass54 = doubleArray49.getClass();
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 2168.222222222222d + "'", double9 == 2168.222222222222d);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 2168.222222222222d + "'", double20 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 2168.222222222222d + "'", double38 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 2168.222222222222d + "'", double50 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 2601.866666666667d + "'", double52 == 2601.866666666667d);
        org.junit.Assert.assertNotNull(wildcardClass54);
    }

    @Test
    public void test0438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0438");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray8 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double9 = variance1.evaluate(doubleArray8);
        variance1.setBiasCorrected(true);
        boolean boolean12 = variance1.isBiasCorrected();
        double[] doubleArray19 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double20 = variance1.evaluate(doubleArray19);
        org.apache.commons.math.stat.descriptive.moment.Variance variance22 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray29 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double30 = variance22.evaluate(doubleArray29);
        variance22.setBiasCorrected(true);
        boolean boolean33 = variance22.isBiasCorrected();
        double[] doubleArray40 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double41 = variance22.evaluate(doubleArray40);
        double double44 = variance1.evaluate(doubleArray40, (int) (byte) 1, 0);
        variance1.setBiasCorrected(true);
        variance1.setBiasCorrected(true);
        double double49 = variance1.getResult();
        boolean boolean50 = variance1.isBiasCorrected();
        boolean boolean51 = variance1.isBiasCorrected();
        variance1.increment(0.0d);
        variance1.increment((double) 1.0f);
        java.lang.Class<?> wildcardClass56 = variance1.getClass();
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 2168.222222222222d + "'", double9 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 16.566666666666663d + "'", double20 == 16.566666666666663d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 2168.222222222222d + "'", double30 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 16.566666666666663d + "'", double41 == 16.566666666666663d);
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertTrue(Double.isNaN(double49));
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(wildcardClass56);
    }

    @Test
    public void test0439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0439");
        org.apache.commons.math.stat.descriptive.moment.Variance variance0 = new org.apache.commons.math.stat.descriptive.moment.Variance();
        double double1 = variance0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance3 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray10 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double11 = variance3.evaluate(doubleArray10);
        variance3.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance15 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray22 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double23 = variance15.evaluate(doubleArray22);
        variance3.incrementAll(doubleArray22);
        boolean boolean25 = variance0.equals((java.lang.Object) variance3);
        variance3.increment(Double.NaN);
        long long28 = variance3.getN();
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 2168.222222222222d + "'", double11 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 2168.222222222222d + "'", double23 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 7L + "'", long28 == 7L);
    }

    @Test
    public void test0440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0440");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        variance1.clear();
        double double3 = variance1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance5 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray12 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double13 = variance5.evaluate(doubleArray12);
        variance5.setBiasCorrected(true);
        boolean boolean16 = variance5.isBiasCorrected();
        double[] doubleArray23 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double24 = variance5.evaluate(doubleArray23);
        double double25 = variance5.getResult();
        variance5.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance29 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray36 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double37 = variance29.evaluate(doubleArray36);
        variance29.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance41 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray48 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double49 = variance41.evaluate(doubleArray48);
        variance41.setBiasCorrected(true);
        boolean boolean52 = variance41.isBiasCorrected();
        double[] doubleArray59 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double60 = variance41.evaluate(doubleArray59);
        org.apache.commons.math.stat.descriptive.moment.Variance variance62 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray69 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double70 = variance62.evaluate(doubleArray69);
        variance62.setBiasCorrected(true);
        boolean boolean73 = variance62.isBiasCorrected();
        double[] doubleArray80 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double81 = variance62.evaluate(doubleArray80);
        double double84 = variance41.evaluate(doubleArray80, (int) (byte) 1, 0);
        double double86 = variance29.evaluate(doubleArray80, 2178.0d);
        boolean boolean87 = variance5.equals((java.lang.Object) doubleArray80);
        double double89 = variance1.evaluate(doubleArray80, (double) '#');
        variance1.increment(2601.866666666667d);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 2168.222222222222d + "'", double13 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 16.566666666666663d + "'", double24 == 16.566666666666663d);
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 2168.222222222222d + "'", double37 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 2168.222222222222d + "'", double49 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 16.566666666666663d + "'", double60 == 16.566666666666663d);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 2168.222222222222d + "'", double70 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 16.566666666666663d + "'", double81 == 16.566666666666663d);
        org.junit.Assert.assertTrue(Double.isNaN(double84));
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 16.566666666418314d + "'", double86 == 16.566666666418314d);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + 13.805555555555506d + "'", double89 == 13.805555555555506d);
    }

    @Test
    public void test0441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0441");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        variance1.clear();
        boolean boolean3 = variance1.isBiasCorrected();
        boolean boolean5 = variance1.equals((java.lang.Object) 1166128.5457099646d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance7 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray14 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double15 = variance7.evaluate(doubleArray14);
        variance7.setBiasCorrected(true);
        boolean boolean18 = variance7.isBiasCorrected();
        double[] doubleArray25 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double26 = variance7.evaluate(doubleArray25);
        org.apache.commons.math.stat.descriptive.moment.Variance variance28 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray35 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double36 = variance28.evaluate(doubleArray35);
        variance28.setBiasCorrected(true);
        boolean boolean39 = variance28.isBiasCorrected();
        double[] doubleArray46 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double47 = variance28.evaluate(doubleArray46);
        double double50 = variance7.evaluate(doubleArray46, (int) (byte) 1, 0);
        variance7.setBiasCorrected(true);
        variance7.setBiasCorrected(true);
        double double55 = variance7.getResult();
        boolean boolean56 = variance7.isBiasCorrected();
        boolean boolean57 = variance7.isBiasCorrected();
        variance7.increment(0.0d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance61 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray68 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double69 = variance61.evaluate(doubleArray68);
        variance7.incrementAll(doubleArray68, (int) (byte) 0, 1);
        variance1.incrementAll(doubleArray68);
        variance1.clear();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 2168.222222222222d + "'", double15 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 16.566666666666663d + "'", double26 == 16.566666666666663d);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 2168.222222222222d + "'", double36 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 16.566666666666663d + "'", double47 == 16.566666666666663d);
        org.junit.Assert.assertTrue(Double.isNaN(double50));
        org.junit.Assert.assertTrue(Double.isNaN(double55));
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 2168.222222222222d + "'", double69 == 2168.222222222222d);
    }

    @Test
    public void test0442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0442");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray8 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double9 = variance1.evaluate(doubleArray8);
        variance1.setBiasCorrected(true);
        long long12 = variance1.getN();
        long long13 = variance1.getN();
        double double14 = variance1.getResult();
        long long15 = variance1.getN();
        java.lang.Class<?> wildcardClass16 = variance1.getClass();
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 2168.222222222222d + "'", double9 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test0443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0443");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray8 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double9 = variance1.evaluate(doubleArray8);
        long long10 = variance1.getN();
        variance1.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance13 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray20 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double21 = variance13.evaluate(doubleArray20);
        variance13.setBiasCorrected(true);
        boolean boolean24 = variance13.isBiasCorrected();
        double[] doubleArray31 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double32 = variance13.evaluate(doubleArray31);
        double double33 = variance13.getResult();
        variance13.setBiasCorrected(true);
        long long36 = variance13.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance38 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray45 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double46 = variance38.evaluate(doubleArray45);
        variance38.setBiasCorrected(true);
        boolean boolean49 = variance38.isBiasCorrected();
        double[] doubleArray56 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double57 = variance38.evaluate(doubleArray56);
        boolean boolean59 = variance38.equals((java.lang.Object) 10.0d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance61 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray68 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double69 = variance61.evaluate(doubleArray68);
        variance61.setBiasCorrected(true);
        boolean boolean72 = variance61.isBiasCorrected();
        double[] doubleArray79 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double80 = variance61.evaluate(doubleArray79);
        double double82 = variance38.evaluate(doubleArray79, (double) 0.0f);
        variance13.incrementAll(doubleArray79);
        double double85 = variance1.evaluate(doubleArray79, (double) ' ');
        java.lang.Class<?> wildcardClass86 = variance1.getClass();
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 2168.222222222222d + "'", double9 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 2168.222222222222d + "'", double21 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 16.566666666666663d + "'", double32 == 16.566666666666663d);
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 2168.222222222222d + "'", double46 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 16.566666666666663d + "'", double57 == 16.566666666666663d);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 2168.222222222222d + "'", double69 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 16.566666666666663d + "'", double80 == 16.566666666666663d);
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 16.566666666666666d + "'", double82 == 16.566666666666666d);
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 13.805555555555506d + "'", double85 == 13.805555555555506d);
        org.junit.Assert.assertNotNull(wildcardClass86);
    }

    @Test
    public void test0444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0444");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray8 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double9 = variance1.evaluate(doubleArray8);
        variance1.setBiasCorrected(true);
        boolean boolean12 = variance1.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray21 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double22 = variance14.evaluate(doubleArray21);
        variance14.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance26 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray33 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double34 = variance26.evaluate(doubleArray33);
        variance26.setBiasCorrected(true);
        boolean boolean37 = variance26.isBiasCorrected();
        double[] doubleArray44 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double45 = variance26.evaluate(doubleArray44);
        double double48 = variance14.evaluate(doubleArray44, (int) (byte) 1, (int) (byte) 0);
        double double51 = variance1.evaluate(doubleArray44, (int) (byte) 1, 0);
        variance1.setBiasCorrected(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance55 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray62 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double63 = variance55.evaluate(doubleArray62);
        variance55.setBiasCorrected(true);
        boolean boolean66 = variance55.isBiasCorrected();
        double[] doubleArray73 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double74 = variance55.evaluate(doubleArray73);
        double double75 = variance55.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance77 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        variance77.clear();
        double double79 = variance77.getResult();
        double[] doubleArray84 = new double[] { (-1), 2168.222222222222d, 16.566666666418314d, 10.0d };
        variance77.incrementAll(doubleArray84);
        double double86 = variance55.evaluate(doubleArray84);
        boolean boolean87 = variance1.equals((java.lang.Object) variance55);
        variance55.setBiasCorrected(false);
        variance55.clear();
        variance55.setBiasCorrected(true);
        double double93 = variance55.getResult();
        variance55.increment((double) 0);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 2168.222222222222d + "'", double9 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 2168.222222222222d + "'", double22 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 2168.222222222222d + "'", double34 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 16.566666666666663d + "'", double45 == 16.566666666666663d);
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertTrue(Double.isNaN(double51));
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 2168.222222222222d + "'", double63 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 16.566666666666663d + "'", double74 == 16.566666666666663d);
        org.junit.Assert.assertTrue(Double.isNaN(double75));
        org.junit.Assert.assertTrue(Double.isNaN(double79));
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[-1.0, 2168.222222222222, 16.566666666418314, 10.0]");
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 1166128.5457099646d + "'", double86 == 1166128.5457099646d);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double93));
    }

    @Test
    public void test0445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0445");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray8 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double9 = variance1.evaluate(doubleArray8);
        variance1.setBiasCorrected(true);
        boolean boolean12 = variance1.isBiasCorrected();
        double double13 = variance1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance15 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray22 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double23 = variance15.evaluate(doubleArray22);
        long long24 = variance15.getN();
        variance15.increment(874596.4092824734d);
        variance15.increment((double) (byte) 100);
        org.apache.commons.math.stat.descriptive.moment.Variance variance30 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray37 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double38 = variance30.evaluate(doubleArray37);
        double[] doubleArray42 = new double[] { (byte) 1, (byte) 100, 1L };
        double double43 = variance30.evaluate(doubleArray42);
        org.apache.commons.math.stat.descriptive.moment.Variance variance45 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray52 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double53 = variance45.evaluate(doubleArray52);
        variance45.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance57 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray64 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double65 = variance57.evaluate(doubleArray64);
        variance45.incrementAll(doubleArray64);
        variance30.incrementAll(doubleArray64);
        variance15.incrementAll(doubleArray64);
        variance1.incrementAll(doubleArray64);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 2168.222222222222d + "'", double9 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 2168.222222222222d + "'", double23 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 2168.222222222222d + "'", double38 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0, 100.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 2178.0d + "'", double43 == 2178.0d);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 2168.222222222222d + "'", double53 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 2168.222222222222d + "'", double65 == 2168.222222222222d);
    }

    @Test
    public void test0446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0446");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double2 = variance1.getResult();
        double double3 = variance1.getResult();
        variance1.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance6 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray13 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double14 = variance6.evaluate(doubleArray13);
        variance6.setBiasCorrected(true);
        boolean boolean17 = variance6.isBiasCorrected();
        double[] doubleArray24 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double25 = variance6.evaluate(doubleArray24);
        org.apache.commons.math.stat.descriptive.moment.Variance variance27 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray34 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double35 = variance27.evaluate(doubleArray34);
        variance27.setBiasCorrected(true);
        boolean boolean38 = variance27.isBiasCorrected();
        double[] doubleArray45 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double46 = variance27.evaluate(doubleArray45);
        double double49 = variance6.evaluate(doubleArray45, (int) (byte) 1, 0);
        // The following exception was thrown during execution in test generation
        try {
            double double53 = variance1.evaluate(doubleArray45, 13.805555555555557d, (int) 'a', (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 2168.222222222222d + "'", double14 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 16.566666666666663d + "'", double25 == 16.566666666666663d);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 2168.222222222222d + "'", double35 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 16.566666666666663d + "'", double46 == 16.566666666666663d);
        org.junit.Assert.assertTrue(Double.isNaN(double49));
    }

    @Test
    public void test0447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0447");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray8 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double9 = variance1.evaluate(doubleArray8);
        variance1.setBiasCorrected(true);
        boolean boolean12 = variance1.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray21 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double22 = variance14.evaluate(doubleArray21);
        variance14.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance26 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray33 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double34 = variance26.evaluate(doubleArray33);
        variance26.setBiasCorrected(true);
        boolean boolean37 = variance26.isBiasCorrected();
        double[] doubleArray44 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double45 = variance26.evaluate(doubleArray44);
        double double48 = variance14.evaluate(doubleArray44, (int) (byte) 1, (int) (byte) 0);
        double double51 = variance1.evaluate(doubleArray44, (int) (byte) 1, 0);
        variance1.setBiasCorrected(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance55 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray62 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double63 = variance55.evaluate(doubleArray62);
        variance55.setBiasCorrected(true);
        boolean boolean66 = variance55.isBiasCorrected();
        double[] doubleArray73 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double74 = variance55.evaluate(doubleArray73);
        double double75 = variance55.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance77 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        variance77.clear();
        double double79 = variance77.getResult();
        double[] doubleArray84 = new double[] { (-1), 2168.222222222222d, 16.566666666418314d, 10.0d };
        variance77.incrementAll(doubleArray84);
        double double86 = variance55.evaluate(doubleArray84);
        boolean boolean87 = variance1.equals((java.lang.Object) variance55);
        boolean boolean88 = variance1.isBiasCorrected();
        variance1.clear();
        double[] doubleArray90 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double94 = variance1.evaluate(doubleArray90, 1175056.0d, (int) (short) 1, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: input value array is null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 2168.222222222222d + "'", double9 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 2168.222222222222d + "'", double22 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 2168.222222222222d + "'", double34 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 16.566666666666663d + "'", double45 == 16.566666666666663d);
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertTrue(Double.isNaN(double51));
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 2168.222222222222d + "'", double63 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 16.566666666666663d + "'", double74 == 16.566666666666663d);
        org.junit.Assert.assertTrue(Double.isNaN(double75));
        org.junit.Assert.assertTrue(Double.isNaN(double79));
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[-1.0, 2168.222222222222, 16.566666666418314, 10.0]");
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 1166128.5457099646d + "'", double86 == 1166128.5457099646d);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
    }

    @Test
    public void test0448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0448");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray8 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double9 = variance1.evaluate(doubleArray8);
        variance1.setBiasCorrected(true);
        boolean boolean12 = variance1.isBiasCorrected();
        double double13 = variance1.getResult();
        variance1.increment((double) 'a');
        boolean boolean16 = variance1.isBiasCorrected();
        variance1.setBiasCorrected(true);
        java.lang.Class<?> wildcardClass19 = variance1.getClass();
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 2168.222222222222d + "'", double9 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test0449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0449");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray8 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double9 = variance1.evaluate(doubleArray8);
        variance1.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance13 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray20 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double21 = variance13.evaluate(doubleArray20);
        variance1.incrementAll(doubleArray20);
        variance1.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance25 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray32 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double33 = variance25.evaluate(doubleArray32);
        double[] doubleArray37 = new double[] { (byte) 1, (byte) 100, 1L };
        double double38 = variance25.evaluate(doubleArray37);
        variance1.incrementAll(doubleArray37, (int) (byte) 0, (int) (byte) 1);
        double double42 = variance1.getResult();
        variance1.setBiasCorrected(false);
        long long45 = variance1.getN();
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 2168.222222222222d + "'", double9 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 2168.222222222222d + "'", double21 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 2168.222222222222d + "'", double33 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0, 100.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 2178.0d + "'", double38 == 2178.0d);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.0d + "'", double42 == 0.0d);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 1L + "'", long45 == 1L);
    }

    @Test
    public void test0450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0450");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray8 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double9 = variance1.evaluate(doubleArray8);
        variance1.clear();
        variance1.setBiasCorrected(false);
        variance1.clear();
        boolean boolean15 = variance1.equals((java.lang.Object) 10.0d);
        variance1.clear();
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 2168.222222222222d + "'", double9 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test0451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0451");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray8 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double9 = variance1.evaluate(doubleArray8);
        variance1.setBiasCorrected(true);
        boolean boolean12 = variance1.isBiasCorrected();
        double double13 = variance1.getResult();
        variance1.increment((double) 'a');
        double double16 = variance1.getResult();
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 2168.222222222222d + "'", double9 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
    }

    @Test
    public void test0452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0452");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray8 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double9 = variance1.evaluate(doubleArray8);
        double[] doubleArray13 = new double[] { (byte) 1, (byte) 100, 1L };
        double double14 = variance1.evaluate(doubleArray13);
        double double15 = variance1.getResult();
        long long16 = variance1.getN();
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 2168.222222222222d + "'", double9 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, 100.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 2178.0d + "'", double14 == 2178.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
    }

    @Test
    public void test0453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0453");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray8 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double9 = variance1.evaluate(doubleArray8);
        variance1.setBiasCorrected(true);
        boolean boolean12 = variance1.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray21 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double22 = variance14.evaluate(doubleArray21);
        variance14.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance26 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray33 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double34 = variance26.evaluate(doubleArray33);
        variance26.setBiasCorrected(true);
        boolean boolean37 = variance26.isBiasCorrected();
        double[] doubleArray44 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double45 = variance26.evaluate(doubleArray44);
        double double48 = variance14.evaluate(doubleArray44, (int) (byte) 1, (int) (byte) 0);
        double double51 = variance1.evaluate(doubleArray44, (int) (byte) 1, 0);
        variance1.setBiasCorrected(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance55 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray62 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double63 = variance55.evaluate(doubleArray62);
        variance55.setBiasCorrected(true);
        long long66 = variance55.getN();
        long long67 = variance55.getN();
        boolean boolean68 = variance55.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.Variance variance70 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray77 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double78 = variance70.evaluate(doubleArray77);
        double[] doubleArray82 = new double[] { (byte) 1, (byte) 100, 1L };
        double double83 = variance70.evaluate(doubleArray82);
        variance55.incrementAll(doubleArray82, (int) (short) 1, 0);
        variance55.clear();
        boolean boolean88 = variance1.equals((java.lang.Object) variance55);
        double double89 = variance55.getResult();
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 2168.222222222222d + "'", double9 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 2168.222222222222d + "'", double22 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 2168.222222222222d + "'", double34 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 16.566666666666663d + "'", double45 == 16.566666666666663d);
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertTrue(Double.isNaN(double51));
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 2168.222222222222d + "'", double63 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 0L + "'", long66 == 0L);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 0L + "'", long67 == 0L);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 2168.222222222222d + "'", double78 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[1.0, 100.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 2178.0d + "'", double83 == 2178.0d);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double89));
    }

    @Test
    public void test0454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0454");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray8 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double9 = variance1.evaluate(doubleArray8);
        variance1.setBiasCorrected(true);
        long long12 = variance1.getN();
        variance1.clear();
        double double14 = variance1.getResult();
        variance1.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance17 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        variance17.clear();
        double double19 = variance17.getResult();
        double[] doubleArray24 = new double[] { (-1), 2168.222222222222d, 16.566666666418314d, 10.0d };
        variance17.incrementAll(doubleArray24);
        org.apache.commons.math.stat.descriptive.moment.Variance variance27 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray34 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double35 = variance27.evaluate(doubleArray34);
        variance27.setBiasCorrected(true);
        boolean boolean38 = variance27.isBiasCorrected();
        double[] doubleArray45 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double46 = variance27.evaluate(doubleArray45);
        double double47 = variance27.getResult();
        variance27.setBiasCorrected(true);
        boolean boolean50 = variance27.isBiasCorrected();
        variance27.setBiasCorrected(false);
        variance27.increment(2601.866666666667d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance56 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray63 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double64 = variance56.evaluate(doubleArray63);
        variance56.clear();
        variance56.setBiasCorrected(true);
        double double68 = variance56.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance70 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray77 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double78 = variance70.evaluate(doubleArray77);
        double double79 = variance56.evaluate(doubleArray77);
        double double80 = variance27.evaluate(doubleArray77);
        double double81 = variance17.evaluate(doubleArray77);
        // The following exception was thrown during execution in test generation
        try {
            double double85 = variance1.evaluate(doubleArray77, (double) 7L, 0, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 2168.222222222222d + "'", double9 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[-1.0, 2168.222222222222, 16.566666666418314, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 2168.222222222222d + "'", double35 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 16.566666666666663d + "'", double46 == 16.566666666666663d);
        org.junit.Assert.assertTrue(Double.isNaN(double47));
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 2168.222222222222d + "'", double64 == 2168.222222222222d);
        org.junit.Assert.assertTrue(Double.isNaN(double68));
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 2168.222222222222d + "'", double78 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 2601.866666666667d + "'", double79 == 2601.866666666667d);
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 2168.222222222222d + "'", double80 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 2168.222222222222d + "'", double81 == 2168.222222222222d);
    }

    @Test
    public void test0455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0455");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray8 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double9 = variance1.evaluate(doubleArray8);
        variance1.setBiasCorrected(true);
        boolean boolean12 = variance1.isBiasCorrected();
        double[] doubleArray19 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double20 = variance1.evaluate(doubleArray19);
        org.apache.commons.math.stat.descriptive.moment.Variance variance22 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray29 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double30 = variance22.evaluate(doubleArray29);
        variance22.setBiasCorrected(true);
        boolean boolean33 = variance22.isBiasCorrected();
        double[] doubleArray40 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double41 = variance22.evaluate(doubleArray40);
        double double44 = variance1.evaluate(doubleArray40, (int) (byte) 1, 0);
        double double45 = variance1.getResult();
        variance1.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance49 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray56 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double57 = variance49.evaluate(doubleArray56);
        variance49.setBiasCorrected(true);
        boolean boolean60 = variance49.isBiasCorrected();
        double[] doubleArray67 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double68 = variance49.evaluate(doubleArray67);
        double double69 = variance49.getResult();
        long long70 = variance49.getN();
        variance49.increment((double) '#');
        variance49.increment(100.0d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance76 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray83 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double84 = variance76.evaluate(doubleArray83);
        variance76.setBiasCorrected(true);
        boolean boolean87 = variance76.isBiasCorrected();
        double[] doubleArray94 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double95 = variance76.evaluate(doubleArray94);
        double double97 = variance49.evaluate(doubleArray94, (double) (byte) 100);
        double double99 = variance1.evaluate(doubleArray94, 2178.0d);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 2168.222222222222d + "'", double9 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 16.566666666666663d + "'", double20 == 16.566666666666663d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 2168.222222222222d + "'", double30 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 16.566666666666663d + "'", double41 == 16.566666666666663d);
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertTrue(Double.isNaN(double45));
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 2168.222222222222d + "'", double57 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 16.566666666666663d + "'", double68 == 16.566666666666663d);
        org.junit.Assert.assertTrue(Double.isNaN(double69));
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + 0L + "'", long70 == 0L);
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 2168.222222222222d + "'", double84 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertNotNull(doubleArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray94), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double95 + "' != '" + 16.566666666666663d + "'", double95 == 16.566666666666663d);
        org.junit.Assert.assertTrue("'" + double97 + "' != '" + 16.566666666667153d + "'", double97 == 16.566666666667153d);
        org.junit.Assert.assertTrue("'" + double99 + "' != '" + 16.566666666418314d + "'", double99 == 16.566666666418314d);
    }

    @Test
    public void test0456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0456");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray8 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double9 = variance1.evaluate(doubleArray8);
        variance1.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance13 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean14 = variance1.equals((java.lang.Object) true);
        java.lang.Object obj15 = null;
        boolean boolean16 = variance1.equals(obj15);
        variance1.increment(677378.9558333334d);
        double[] doubleArray19 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double20 = variance1.evaluate(doubleArray19);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: input values array is null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 2168.222222222222d + "'", double9 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test0457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0457");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        variance1.clear();
        double double3 = variance1.getResult();
        double[] doubleArray8 = new double[] { (-1), 2168.222222222222d, 16.566666666418314d, 10.0d };
        variance1.incrementAll(doubleArray8);
        double double10 = variance1.getResult();
        boolean boolean11 = variance1.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.Variance variance13 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray20 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double21 = variance13.evaluate(doubleArray20);
        variance13.setBiasCorrected(true);
        boolean boolean24 = variance13.isBiasCorrected();
        double[] doubleArray31 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double32 = variance13.evaluate(doubleArray31);
        double double33 = variance13.getResult();
        variance13.setBiasCorrected(true);
        long long36 = variance13.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance38 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray45 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double46 = variance38.evaluate(doubleArray45);
        variance38.setBiasCorrected(true);
        boolean boolean49 = variance38.isBiasCorrected();
        double[] doubleArray56 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double57 = variance38.evaluate(doubleArray56);
        boolean boolean59 = variance38.equals((java.lang.Object) 10.0d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance61 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray68 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double69 = variance61.evaluate(doubleArray68);
        variance61.setBiasCorrected(true);
        boolean boolean72 = variance61.isBiasCorrected();
        double[] doubleArray79 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double80 = variance61.evaluate(doubleArray79);
        double double82 = variance38.evaluate(doubleArray79, (double) 0.0f);
        variance13.incrementAll(doubleArray79);
        // The following exception was thrown during execution in test generation
        try {
            variance1.incrementAll(doubleArray79, (int) (byte) 10, (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 2168.222222222222, 16.566666666418314, 10.0]");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 874596.4092824734d + "'", double10 == 874596.4092824734d);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 2168.222222222222d + "'", double21 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 16.566666666666663d + "'", double32 == 16.566666666666663d);
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 2168.222222222222d + "'", double46 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 16.566666666666663d + "'", double57 == 16.566666666666663d);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 2168.222222222222d + "'", double69 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 16.566666666666663d + "'", double80 == 16.566666666666663d);
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 16.566666666666666d + "'", double82 == 16.566666666666666d);
    }

    @Test
    public void test0458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0458");
        org.apache.commons.math.stat.descriptive.moment.Variance variance0 = new org.apache.commons.math.stat.descriptive.moment.Variance();
        long long1 = variance0.getN();
        variance0.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance5 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray12 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double13 = variance5.evaluate(doubleArray12);
        variance5.setBiasCorrected(true);
        boolean boolean16 = variance5.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.Variance variance18 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray25 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double26 = variance18.evaluate(doubleArray25);
        variance18.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance30 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray37 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double38 = variance30.evaluate(doubleArray37);
        variance30.setBiasCorrected(true);
        boolean boolean41 = variance30.isBiasCorrected();
        double[] doubleArray48 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double49 = variance30.evaluate(doubleArray48);
        double double52 = variance18.evaluate(doubleArray48, (int) (byte) 1, (int) (byte) 0);
        double double55 = variance5.evaluate(doubleArray48, (int) (byte) 1, 0);
        double double57 = variance0.evaluate(doubleArray48, 16.56666666666667d);
        boolean boolean58 = variance0.isBiasCorrected();
        double double59 = variance0.getResult();
        long long60 = variance0.getN();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 2168.222222222222d + "'", double13 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 2168.222222222222d + "'", double26 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 2168.222222222222d + "'", double38 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 16.566666666666663d + "'", double49 == 16.566666666666663d);
        org.junit.Assert.assertTrue(Double.isNaN(double52));
        org.junit.Assert.assertTrue(Double.isNaN(double55));
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 16.56666666666674d + "'", double57 == 16.56666666666674d);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double59));
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 0L + "'", long60 == 0L);
    }

    @Test
    public void test0459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0459");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray8 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double9 = variance1.evaluate(doubleArray8);
        variance1.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance13 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray20 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double21 = variance13.evaluate(doubleArray20);
        variance13.setBiasCorrected(true);
        boolean boolean24 = variance13.isBiasCorrected();
        double[] doubleArray31 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double32 = variance13.evaluate(doubleArray31);
        double double33 = variance13.getResult();
        long long34 = variance13.getN();
        variance13.increment((double) '#');
        variance13.increment(100.0d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance40 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray47 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double48 = variance40.evaluate(doubleArray47);
        variance40.setBiasCorrected(true);
        boolean boolean51 = variance40.isBiasCorrected();
        double[] doubleArray58 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double59 = variance40.evaluate(doubleArray58);
        double double61 = variance13.evaluate(doubleArray58, (double) (byte) 100);
        double double63 = variance1.evaluate(doubleArray58, 13.805555555555506d);
        double[] doubleArray64 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double68 = variance1.evaluate(doubleArray64, (double) 100, (int) (byte) 0, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: input value array is null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 2168.222222222222d + "'", double9 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 2168.222222222222d + "'", double21 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 16.566666666666663d + "'", double32 == 16.566666666666663d);
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 2168.222222222222d + "'", double48 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 16.566666666666663d + "'", double59 == 16.566666666666663d);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 16.566666666667153d + "'", double61 == 16.566666666667153d);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 16.566666666666674d + "'", double63 == 16.566666666666674d);
    }

    @Test
    public void test0460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0460");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray8 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double9 = variance1.evaluate(doubleArray8);
        variance1.setBiasCorrected(true);
        long long12 = variance1.getN();
        long long13 = variance1.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance15 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray22 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double23 = variance15.evaluate(doubleArray22);
        double[] doubleArray27 = new double[] { (byte) 1, (byte) 100, 1L };
        double double28 = variance15.evaluate(doubleArray27);
        double double30 = variance1.evaluate(doubleArray27, (double) 10.0f);
        org.apache.commons.math.stat.descriptive.moment.Variance variance32 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray39 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double40 = variance32.evaluate(doubleArray39);
        variance32.setBiasCorrected(true);
        long long43 = variance32.getN();
        variance32.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance46 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray53 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double54 = variance46.evaluate(doubleArray53);
        double double55 = variance32.evaluate(doubleArray53);
        org.apache.commons.math.stat.descriptive.moment.Variance variance57 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double58 = variance57.getResult();
        double double59 = variance57.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance61 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray68 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double69 = variance61.evaluate(doubleArray68);
        variance61.setBiasCorrected(true);
        long long72 = variance61.getN();
        variance61.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance75 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray82 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double83 = variance75.evaluate(doubleArray82);
        double double84 = variance61.evaluate(doubleArray82);
        variance57.incrementAll(doubleArray82);
        double double86 = variance32.evaluate(doubleArray82);
        // The following exception was thrown during execution in test generation
        try {
            double double90 = variance1.evaluate(doubleArray82, 0.0d, (int) (short) 1, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 2168.222222222222d + "'", double9 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 2168.222222222222d + "'", double23 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0, 100.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 2178.0d + "'", double28 == 2178.0d);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 3267.0d + "'", double30 == 3267.0d);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 2168.222222222222d + "'", double40 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 0L + "'", long43 == 0L);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 2168.222222222222d + "'", double54 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 2601.866666666667d + "'", double55 == 2601.866666666667d);
        org.junit.Assert.assertTrue(Double.isNaN(double58));
        org.junit.Assert.assertTrue(Double.isNaN(double59));
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 2168.222222222222d + "'", double69 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + 0L + "'", long72 == 0L);
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 2168.222222222222d + "'", double83 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 2601.866666666667d + "'", double84 == 2601.866666666667d);
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 2601.866666666667d + "'", double86 == 2601.866666666667d);
    }

    @Test
    public void test0461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0461");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray8 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double9 = variance1.evaluate(doubleArray8);
        variance1.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance13 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray20 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double21 = variance13.evaluate(doubleArray20);
        variance13.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance25 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray32 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double33 = variance25.evaluate(doubleArray32);
        variance25.setBiasCorrected(true);
        boolean boolean36 = variance25.isBiasCorrected();
        double[] doubleArray43 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double44 = variance25.evaluate(doubleArray43);
        double double47 = variance13.evaluate(doubleArray43, (int) (byte) 1, (int) (byte) 0);
        variance1.incrementAll(doubleArray43, (int) (byte) 1, 1);
        java.lang.Object obj51 = null;
        boolean boolean52 = variance1.equals(obj51);
        long long53 = variance1.getN();
        variance1.setBiasCorrected(false);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 2168.222222222222d + "'", double9 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 2168.222222222222d + "'", double21 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 2168.222222222222d + "'", double33 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 16.566666666666663d + "'", double44 == 16.566666666666663d);
        org.junit.Assert.assertTrue(Double.isNaN(double47));
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 1L + "'", long53 == 1L);
    }

    @Test
    public void test0462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0462");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray8 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double9 = variance1.evaluate(doubleArray8);
        variance1.setBiasCorrected(true);
        variance1.increment((double) (byte) 0);
        double[] doubleArray16 = new double[] { 'a', 100L };
        double double18 = variance1.evaluate(doubleArray16, 0.0d);
        double double19 = variance1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance21 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        variance21.clear();
        double double23 = variance21.getResult();
        double[] doubleArray28 = new double[] { (-1), 2168.222222222222d, 16.566666666418314d, 10.0d };
        variance21.incrementAll(doubleArray28);
        variance1.incrementAll(doubleArray28, (int) (short) 1, 1);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment34 = null;
        org.apache.commons.math.stat.descriptive.moment.Variance variance35 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment34);
        variance35.clear();
        double[] doubleArray37 = new double[] {};
        variance35.incrementAll(doubleArray37);
        variance35.increment(2178.0d);
        variance35.clear();
        variance35.clear();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean43 = variance1.equals((java.lang.Object) variance35);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 2168.222222222222d + "'", double9 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[97.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 4.5d + "'", double18 == 4.5d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-1.0, 2168.222222222222, 16.566666666418314, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[]");
    }

    @Test
    public void test0463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0463");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance3 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray10 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double11 = variance3.evaluate(doubleArray10);
        variance3.setBiasCorrected(true);
        boolean boolean14 = variance3.isBiasCorrected();
        double[] doubleArray21 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double22 = variance3.evaluate(doubleArray21);
        double double23 = variance3.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance25 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        variance25.clear();
        double double27 = variance25.getResult();
        double[] doubleArray32 = new double[] { (-1), 2168.222222222222d, 16.566666666418314d, 10.0d };
        variance25.incrementAll(doubleArray32);
        double double34 = variance3.evaluate(doubleArray32);
        org.apache.commons.math.stat.descriptive.moment.Variance variance36 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        variance36.clear();
        boolean boolean38 = variance36.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.Variance variance40 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray47 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double48 = variance40.evaluate(doubleArray47);
        variance40.setBiasCorrected(true);
        long long51 = variance40.getN();
        long long52 = variance40.getN();
        double double53 = variance40.getResult();
        variance40.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance56 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray63 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double64 = variance56.evaluate(doubleArray63);
        double[] doubleArray68 = new double[] { (byte) 1, (byte) 100, 1L };
        double double69 = variance56.evaluate(doubleArray68);
        org.apache.commons.math.stat.descriptive.moment.Variance variance71 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray78 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double79 = variance71.evaluate(doubleArray78);
        variance71.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance83 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray90 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double91 = variance83.evaluate(doubleArray90);
        variance71.incrementAll(doubleArray90);
        variance56.incrementAll(doubleArray90);
        double double94 = variance40.evaluate(doubleArray90);
        double double95 = variance36.evaluate(doubleArray90);
        double double98 = variance3.evaluate(doubleArray90, (int) (byte) 1, (int) (short) 1);
        variance1.incrementAll(doubleArray90);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 2168.222222222222d + "'", double11 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 16.566666666666663d + "'", double22 == 16.566666666666663d);
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[-1.0, 2168.222222222222, 16.566666666418314, 10.0]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 1166128.5457099646d + "'", double34 == 1166128.5457099646d);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 2168.222222222222d + "'", double48 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 0L + "'", long51 == 0L);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 0L + "'", long52 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double53));
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 2168.222222222222d + "'", double64 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[1.0, 100.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 2178.0d + "'", double69 == 2178.0d);
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 2168.222222222222d + "'", double79 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray90), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 2168.222222222222d + "'", double91 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + double94 + "' != '" + 2601.866666666667d + "'", double94 == 2601.866666666667d);
        org.junit.Assert.assertTrue("'" + double95 + "' != '" + 2168.222222222222d + "'", double95 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + double98 + "' != '" + 0.0d + "'", double98 == 0.0d);
    }

    @Test
    public void test0464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0464");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray8 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double9 = variance1.evaluate(doubleArray8);
        variance1.setBiasCorrected(true);
        boolean boolean12 = variance1.isBiasCorrected();
        double[] doubleArray19 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double20 = variance1.evaluate(doubleArray19);
        double double21 = variance1.getResult();
        variance1.setBiasCorrected(true);
        boolean boolean24 = variance1.isBiasCorrected();
        variance1.increment(16.566666666667153d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance28 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray35 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double36 = variance28.evaluate(doubleArray35);
        variance28.clear();
        variance28.setBiasCorrected(true);
        double double40 = variance28.getResult();
        variance28.increment((double) 1.0f);
        boolean boolean43 = variance1.equals((java.lang.Object) variance28);
        double double44 = variance28.getResult();
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 2168.222222222222d + "'", double9 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 16.566666666666663d + "'", double20 == 16.566666666666663d);
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 2168.222222222222d + "'", double36 == 2168.222222222222d);
        org.junit.Assert.assertTrue(Double.isNaN(double40));
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.0d + "'", double44 == 0.0d);
    }

    @Test
    public void test0465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0465");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray8 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double9 = variance1.evaluate(doubleArray8);
        variance1.setBiasCorrected(true);
        boolean boolean12 = variance1.isBiasCorrected();
        double[] doubleArray19 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double20 = variance1.evaluate(doubleArray19);
        org.apache.commons.math.stat.descriptive.moment.Variance variance22 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray29 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double30 = variance22.evaluate(doubleArray29);
        variance22.setBiasCorrected(true);
        boolean boolean33 = variance22.isBiasCorrected();
        double[] doubleArray40 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double41 = variance22.evaluate(doubleArray40);
        double double44 = variance1.evaluate(doubleArray40, (int) (byte) 1, 0);
        variance1.clear();
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 2168.222222222222d + "'", double9 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 16.566666666666663d + "'", double20 == 16.566666666666663d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 2168.222222222222d + "'", double30 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 16.566666666666663d + "'", double41 == 16.566666666666663d);
        org.junit.Assert.assertTrue(Double.isNaN(double44));
    }

    @Test
    public void test0466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0466");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray8 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double9 = variance1.evaluate(doubleArray8);
        variance1.clear();
        java.lang.Object obj11 = null;
        boolean boolean12 = variance1.equals(obj11);
        boolean boolean13 = variance1.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.Variance variance15 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray22 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double23 = variance15.evaluate(doubleArray22);
        variance15.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance27 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray34 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double35 = variance27.evaluate(doubleArray34);
        variance15.incrementAll(doubleArray34);
        variance15.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance39 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray46 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double47 = variance39.evaluate(doubleArray46);
        double[] doubleArray51 = new double[] { (byte) 1, (byte) 100, 1L };
        double double52 = variance39.evaluate(doubleArray51);
        variance15.incrementAll(doubleArray51, (int) (byte) 0, (int) (byte) 1);
        org.apache.commons.math.stat.descriptive.moment.Variance variance57 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray64 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double65 = variance57.evaluate(doubleArray64);
        variance57.setBiasCorrected(true);
        boolean boolean68 = variance57.isBiasCorrected();
        double[] doubleArray75 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double76 = variance57.evaluate(doubleArray75);
        double double77 = variance57.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance79 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        variance79.clear();
        double double81 = variance79.getResult();
        double[] doubleArray86 = new double[] { (-1), 2168.222222222222d, 16.566666666418314d, 10.0d };
        variance79.incrementAll(doubleArray86);
        double double88 = variance57.evaluate(doubleArray86);
        double double89 = variance15.evaluate(doubleArray86);
        boolean boolean90 = variance1.equals((java.lang.Object) variance15);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 2168.222222222222d + "'", double9 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 2168.222222222222d + "'", double23 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 2168.222222222222d + "'", double35 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 2168.222222222222d + "'", double47 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0, 100.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 2178.0d + "'", double52 == 2178.0d);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 2168.222222222222d + "'", double65 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 16.566666666666663d + "'", double76 == 16.566666666666663d);
        org.junit.Assert.assertTrue(Double.isNaN(double77));
        org.junit.Assert.assertTrue(Double.isNaN(double81));
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[-1.0, 2168.222222222222, 16.566666666418314, 10.0]");
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 1166128.5457099646d + "'", double88 == 1166128.5457099646d);
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + 1166128.5457099646d + "'", double89 == 1166128.5457099646d);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
    }

    @Test
    public void test0467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0467");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance3 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray10 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double11 = variance3.evaluate(doubleArray10);
        variance3.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance15 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray22 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double23 = variance15.evaluate(doubleArray22);
        variance15.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance27 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray34 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double35 = variance27.evaluate(doubleArray34);
        variance27.setBiasCorrected(true);
        boolean boolean38 = variance27.isBiasCorrected();
        double[] doubleArray45 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double46 = variance27.evaluate(doubleArray45);
        double double49 = variance15.evaluate(doubleArray45, (int) (byte) 1, (int) (byte) 0);
        variance3.incrementAll(doubleArray45, (int) (byte) 1, 1);
        double double53 = variance1.evaluate(doubleArray45);
        org.apache.commons.math.stat.descriptive.moment.Variance variance55 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance55.increment(16.566666666418314d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance59 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray66 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double67 = variance59.evaluate(doubleArray66);
        variance59.setBiasCorrected(true);
        long long70 = variance59.getN();
        long long71 = variance59.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance73 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray80 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double81 = variance73.evaluate(doubleArray80);
        double[] doubleArray85 = new double[] { (byte) 1, (byte) 100, 1L };
        double double86 = variance73.evaluate(doubleArray85);
        double double88 = variance59.evaluate(doubleArray85, (double) 10.0f);
        double double90 = variance55.evaluate(doubleArray85, 13.805555555555557d);
        // The following exception was thrown during execution in test generation
        try {
            double double93 = variance1.evaluate(doubleArray85, 10, (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 2168.222222222222d + "'", double11 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 2168.222222222222d + "'", double23 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 2168.222222222222d + "'", double35 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 16.566666666666663d + "'", double46 == 16.566666666666663d);
        org.junit.Assert.assertTrue(Double.isNaN(double49));
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 13.805555555555552d + "'", double53 == 13.805555555555552d);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 2168.222222222222d + "'", double67 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + 0L + "'", long70 == 0L);
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 0L + "'", long71 == 0L);
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 2168.222222222222d + "'", double81 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[1.0, 100.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 2178.0d + "'", double86 == 2178.0d);
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 3267.0d + "'", double88 == 3267.0d);
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + 3266.9999999999995d + "'", double90 == 3266.9999999999995d);
    }

    @Test
    public void test0468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0468");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray8 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double9 = variance1.evaluate(doubleArray8);
        variance1.setBiasCorrected(true);
        boolean boolean12 = variance1.isBiasCorrected();
        double[] doubleArray19 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double20 = variance1.evaluate(doubleArray19);
        double double21 = variance1.getResult();
        variance1.setBiasCorrected(true);
        boolean boolean24 = variance1.isBiasCorrected();
        variance1.setBiasCorrected(false);
        variance1.increment(2601.866666666667d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance30 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray37 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double38 = variance30.evaluate(doubleArray37);
        variance30.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance42 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray49 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double50 = variance42.evaluate(doubleArray49);
        variance30.incrementAll(doubleArray49);
        variance30.clear();
        variance30.setBiasCorrected(false);
        variance30.setBiasCorrected(false);
        boolean boolean57 = variance1.equals((java.lang.Object) variance30);
        variance1.increment(100.0d);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 2168.222222222222d + "'", double9 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 16.566666666666663d + "'", double20 == 16.566666666666663d);
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 2168.222222222222d + "'", double38 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 2168.222222222222d + "'", double50 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
    }

    @Test
    public void test0469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0469");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray8 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double9 = variance1.evaluate(doubleArray8);
        variance1.setBiasCorrected(true);
        boolean boolean12 = variance1.isBiasCorrected();
        double[] doubleArray19 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double20 = variance1.evaluate(doubleArray19);
        double double21 = variance1.getResult();
        variance1.setBiasCorrected(true);
        boolean boolean24 = variance1.isBiasCorrected();
        java.lang.Class<?> wildcardClass25 = variance1.getClass();
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 2168.222222222222d + "'", double9 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 16.566666666666663d + "'", double20 == 16.566666666666663d);
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(wildcardClass25);
    }

    @Test
    public void test0470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0470");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray8 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double9 = variance1.evaluate(doubleArray8);
        variance1.setBiasCorrected(true);
        variance1.increment((double) (byte) 0);
        double[] doubleArray16 = new double[] { 'a', 100L };
        double double18 = variance1.evaluate(doubleArray16, 0.0d);
        double double19 = variance1.getResult();
        double double20 = variance1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance22 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray29 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double30 = variance22.evaluate(doubleArray29);
        variance22.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance34 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray41 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double42 = variance34.evaluate(doubleArray41);
        variance22.incrementAll(doubleArray41);
        variance22.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance46 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray53 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double54 = variance46.evaluate(doubleArray53);
        variance46.setBiasCorrected(true);
        boolean boolean57 = variance46.isBiasCorrected();
        double[] doubleArray64 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double65 = variance46.evaluate(doubleArray64);
        boolean boolean67 = variance46.equals((java.lang.Object) 10.0d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance69 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray76 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double77 = variance69.evaluate(doubleArray76);
        variance69.setBiasCorrected(true);
        boolean boolean80 = variance69.isBiasCorrected();
        double[] doubleArray87 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double88 = variance69.evaluate(doubleArray87);
        double double90 = variance46.evaluate(doubleArray87, (double) 0.0f);
        variance22.incrementAll(doubleArray87);
        // The following exception was thrown during execution in test generation
        try {
            variance1.incrementAll(doubleArray87, (int) '4', 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 2168.222222222222d + "'", double9 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[97.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 4.5d + "'", double18 == 4.5d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 2168.222222222222d + "'", double30 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 2168.222222222222d + "'", double42 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 2168.222222222222d + "'", double54 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 16.566666666666663d + "'", double65 == 16.566666666666663d);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 2168.222222222222d + "'", double77 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray87), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 16.566666666666663d + "'", double88 == 16.566666666666663d);
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + 16.566666666666666d + "'", double90 == 16.566666666666666d);
    }

    @Test
    public void test0471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0471");
        org.apache.commons.math.stat.descriptive.moment.Variance variance0 = new org.apache.commons.math.stat.descriptive.moment.Variance();
        double double1 = variance0.getResult();
        boolean boolean2 = variance0.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.Variance variance4 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double5 = variance4.getResult();
        double double6 = variance4.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance8 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray15 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double16 = variance8.evaluate(doubleArray15);
        variance8.clear();
        variance8.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance21 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        variance21.clear();
        double double23 = variance21.getResult();
        double[] doubleArray28 = new double[] { (-1), 2168.222222222222d, 16.566666666418314d, 10.0d };
        variance21.incrementAll(doubleArray28);
        boolean boolean30 = variance8.equals((java.lang.Object) doubleArray28);
        double double32 = variance4.evaluate(doubleArray28, (double) (-1.0f));
        double double34 = variance0.evaluate(doubleArray28, (double) (-1L));
        variance0.increment(2.25d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance38 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray45 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double46 = variance38.evaluate(doubleArray45);
        variance38.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance50 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray57 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double58 = variance50.evaluate(doubleArray57);
        variance50.setBiasCorrected(true);
        boolean boolean61 = variance50.isBiasCorrected();
        double[] doubleArray68 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double69 = variance50.evaluate(doubleArray68);
        double double72 = variance38.evaluate(doubleArray68, (int) (byte) 1, (int) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            variance0.incrementAll(doubleArray68, 100, (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 2168.222222222222d + "'", double16 == 2168.222222222222d);
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-1.0, 2168.222222222222, 16.566666666418314, 10.0]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 1166128.5457099646d + "'", double32 == 1166128.5457099646d);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 1166128.5457099646d + "'", double34 == 1166128.5457099646d);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 2168.222222222222d + "'", double46 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 2168.222222222222d + "'", double58 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 16.566666666666663d + "'", double69 == 16.566666666666663d);
        org.junit.Assert.assertTrue(Double.isNaN(double72));
    }

    @Test
    public void test0472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0472");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray8 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double9 = variance1.evaluate(doubleArray8);
        variance1.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance13 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray20 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double21 = variance13.evaluate(doubleArray20);
        variance1.incrementAll(doubleArray20);
        variance1.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance25 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray32 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double33 = variance25.evaluate(doubleArray32);
        double[] doubleArray37 = new double[] { (byte) 1, (byte) 100, 1L };
        double double38 = variance25.evaluate(doubleArray37);
        variance1.incrementAll(doubleArray37, (int) (byte) 0, (int) (byte) 1);
        variance1.increment(16.566666666666666d);
        variance1.setBiasCorrected(true);
        java.lang.Class<?> wildcardClass46 = variance1.getClass();
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 2168.222222222222d + "'", double9 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 2168.222222222222d + "'", double21 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 2168.222222222222d + "'", double33 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0, 100.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 2178.0d + "'", double38 == 2178.0d);
        org.junit.Assert.assertNotNull(wildcardClass46);
    }

    @Test
    public void test0473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0473");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray8 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double9 = variance1.evaluate(doubleArray8);
        variance1.setBiasCorrected(true);
        boolean boolean12 = variance1.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray21 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double22 = variance14.evaluate(doubleArray21);
        variance14.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance26 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray33 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double34 = variance26.evaluate(doubleArray33);
        variance26.setBiasCorrected(true);
        boolean boolean37 = variance26.isBiasCorrected();
        double[] doubleArray44 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double45 = variance26.evaluate(doubleArray44);
        double double48 = variance14.evaluate(doubleArray44, (int) (byte) 1, (int) (byte) 0);
        double double51 = variance1.evaluate(doubleArray44, (int) (byte) 1, 0);
        variance1.setBiasCorrected(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance55 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray62 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double63 = variance55.evaluate(doubleArray62);
        variance55.setBiasCorrected(true);
        boolean boolean66 = variance55.isBiasCorrected();
        double[] doubleArray73 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double74 = variance55.evaluate(doubleArray73);
        double double75 = variance55.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance77 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        variance77.clear();
        double double79 = variance77.getResult();
        double[] doubleArray84 = new double[] { (-1), 2168.222222222222d, 16.566666666418314d, 10.0d };
        variance77.incrementAll(doubleArray84);
        double double86 = variance55.evaluate(doubleArray84);
        boolean boolean87 = variance1.equals((java.lang.Object) variance55);
        variance55.setBiasCorrected(false);
        variance55.clear();
        variance55.setBiasCorrected(true);
        double double93 = variance55.getResult();
        long long94 = variance55.getN();
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 2168.222222222222d + "'", double9 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 2168.222222222222d + "'", double22 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 2168.222222222222d + "'", double34 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 16.566666666666663d + "'", double45 == 16.566666666666663d);
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertTrue(Double.isNaN(double51));
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 2168.222222222222d + "'", double63 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 16.566666666666663d + "'", double74 == 16.566666666666663d);
        org.junit.Assert.assertTrue(Double.isNaN(double75));
        org.junit.Assert.assertTrue(Double.isNaN(double79));
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[-1.0, 2168.222222222222, 16.566666666418314, 10.0]");
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 1166128.5457099646d + "'", double86 == 1166128.5457099646d);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double93));
        org.junit.Assert.assertTrue("'" + long94 + "' != '" + 0L + "'", long94 == 0L);
    }

    @Test
    public void test0474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0474");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        variance1.setBiasCorrected(false);
        long long4 = variance1.getN();
        variance1.increment((double) 0.0f);
        long long7 = variance1.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance9 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray16 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double17 = variance9.evaluate(doubleArray16);
        variance9.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance21 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray28 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double29 = variance21.evaluate(doubleArray28);
        variance21.setBiasCorrected(true);
        boolean boolean32 = variance21.isBiasCorrected();
        double[] doubleArray39 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double40 = variance21.evaluate(doubleArray39);
        double double43 = variance9.evaluate(doubleArray39, (int) (byte) 1, (int) (byte) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance45 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance45.increment(16.566666666418314d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance49 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray56 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double57 = variance49.evaluate(doubleArray56);
        variance49.setBiasCorrected(true);
        long long60 = variance49.getN();
        long long61 = variance49.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance63 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray70 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double71 = variance63.evaluate(doubleArray70);
        double[] doubleArray75 = new double[] { (byte) 1, (byte) 100, 1L };
        double double76 = variance63.evaluate(doubleArray75);
        double double78 = variance49.evaluate(doubleArray75, (double) 10.0f);
        double double80 = variance45.evaluate(doubleArray75, 13.805555555555557d);
        double double81 = variance9.evaluate(doubleArray75);
        // The following exception was thrown during execution in test generation
        try {
            variance1.incrementAll(doubleArray75, (int) (byte) 10, (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1L + "'", long7 == 1L);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 2168.222222222222d + "'", double17 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 2168.222222222222d + "'", double29 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 16.566666666666663d + "'", double40 == 16.566666666666663d);
        org.junit.Assert.assertTrue(Double.isNaN(double43));
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 2168.222222222222d + "'", double57 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 0L + "'", long60 == 0L);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 0L + "'", long61 == 0L);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 2168.222222222222d + "'", double71 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[1.0, 100.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 2178.0d + "'", double76 == 2178.0d);
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 3267.0d + "'", double78 == 3267.0d);
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 3266.9999999999995d + "'", double80 == 3266.9999999999995d);
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 3267.0d + "'", double81 == 3267.0d);
    }

    @Test
    public void test0475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0475");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        variance1.clear();
        double double3 = variance1.getResult();
        variance1.increment((double) '4');
        double double6 = variance1.getResult();
        variance1.increment((double) 0.0f);
        org.apache.commons.math.stat.descriptive.moment.Variance variance10 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray17 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double18 = variance10.evaluate(doubleArray17);
        long long19 = variance10.getN();
        variance10.increment(874596.4092824734d);
        variance10.increment((double) (byte) 100);
        org.apache.commons.math.stat.descriptive.moment.Variance variance25 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray32 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double33 = variance25.evaluate(doubleArray32);
        double[] doubleArray37 = new double[] { (byte) 1, (byte) 100, 1L };
        double double38 = variance25.evaluate(doubleArray37);
        org.apache.commons.math.stat.descriptive.moment.Variance variance40 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray47 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double48 = variance40.evaluate(doubleArray47);
        variance40.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance52 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray59 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double60 = variance52.evaluate(doubleArray59);
        variance40.incrementAll(doubleArray59);
        variance25.incrementAll(doubleArray59);
        variance10.incrementAll(doubleArray59);
        variance1.incrementAll(doubleArray59);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 2168.222222222222d + "'", double18 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 2168.222222222222d + "'", double33 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0, 100.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 2178.0d + "'", double38 == 2178.0d);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 2168.222222222222d + "'", double48 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 2168.222222222222d + "'", double60 == 2168.222222222222d);
    }

    @Test
    public void test0476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0476");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray8 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double9 = variance1.evaluate(doubleArray8);
        variance1.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance13 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray20 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double21 = variance13.evaluate(doubleArray20);
        variance13.setBiasCorrected(true);
        boolean boolean24 = variance13.isBiasCorrected();
        double[] doubleArray31 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double32 = variance13.evaluate(doubleArray31);
        double double35 = variance1.evaluate(doubleArray31, (int) (byte) 1, (int) (byte) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance37 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance39 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray46 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double47 = variance39.evaluate(doubleArray46);
        variance39.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance51 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray58 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double59 = variance51.evaluate(doubleArray58);
        variance51.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance63 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray70 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double71 = variance63.evaluate(doubleArray70);
        variance63.setBiasCorrected(true);
        boolean boolean74 = variance63.isBiasCorrected();
        double[] doubleArray81 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double82 = variance63.evaluate(doubleArray81);
        double double85 = variance51.evaluate(doubleArray81, (int) (byte) 1, (int) (byte) 0);
        variance39.incrementAll(doubleArray81, (int) (byte) 1, 1);
        double double89 = variance37.evaluate(doubleArray81);
        double double90 = variance1.evaluate(doubleArray81);
        boolean boolean91 = variance1.isBiasCorrected();
        variance1.setBiasCorrected(true);
        double double94 = variance1.getResult();
        variance1.setBiasCorrected(false);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 2168.222222222222d + "'", double9 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 2168.222222222222d + "'", double21 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 16.566666666666663d + "'", double32 == 16.566666666666663d);
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 2168.222222222222d + "'", double47 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 2168.222222222222d + "'", double59 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 2168.222222222222d + "'", double71 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 16.566666666666663d + "'", double82 == 16.566666666666663d);
        org.junit.Assert.assertTrue(Double.isNaN(double85));
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + 13.805555555555552d + "'", double89 == 13.805555555555552d);
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + 16.566666666666663d + "'", double90 == 16.566666666666663d);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double94));
    }

    @Test
    public void test0477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0477");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray8 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double9 = variance1.evaluate(doubleArray8);
        variance1.setBiasCorrected(true);
        boolean boolean12 = variance1.isBiasCorrected();
        double[] doubleArray19 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double20 = variance1.evaluate(doubleArray19);
        double double21 = variance1.getResult();
        variance1.setBiasCorrected(true);
        long long24 = variance1.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance26 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray33 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double34 = variance26.evaluate(doubleArray33);
        variance26.setBiasCorrected(true);
        boolean boolean37 = variance26.isBiasCorrected();
        double[] doubleArray44 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double45 = variance26.evaluate(doubleArray44);
        double double46 = variance26.getResult();
        variance26.setBiasCorrected(true);
        long long49 = variance26.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance51 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray58 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double59 = variance51.evaluate(doubleArray58);
        variance51.setBiasCorrected(true);
        boolean boolean62 = variance51.isBiasCorrected();
        double[] doubleArray69 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double70 = variance51.evaluate(doubleArray69);
        boolean boolean72 = variance51.equals((java.lang.Object) 10.0d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance74 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray81 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double82 = variance74.evaluate(doubleArray81);
        variance74.setBiasCorrected(true);
        boolean boolean85 = variance74.isBiasCorrected();
        double[] doubleArray92 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double93 = variance74.evaluate(doubleArray92);
        double double95 = variance51.evaluate(doubleArray92, (double) 0.0f);
        variance26.incrementAll(doubleArray92);
        double double97 = variance1.evaluate(doubleArray92);
        java.lang.Class<?> wildcardClass98 = doubleArray92.getClass();
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 2168.222222222222d + "'", double9 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 16.566666666666663d + "'", double20 == 16.566666666666663d);
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 2168.222222222222d + "'", double34 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 16.566666666666663d + "'", double45 == 16.566666666666663d);
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 0L + "'", long49 == 0L);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 2168.222222222222d + "'", double59 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 16.566666666666663d + "'", double70 == 16.566666666666663d);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 2168.222222222222d + "'", double82 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertNotNull(doubleArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray92), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double93 + "' != '" + 16.566666666666663d + "'", double93 == 16.566666666666663d);
        org.junit.Assert.assertTrue("'" + double95 + "' != '" + 16.566666666666666d + "'", double95 == 16.566666666666666d);
        org.junit.Assert.assertTrue("'" + double97 + "' != '" + 16.566666666666663d + "'", double97 == 16.566666666666663d);
        org.junit.Assert.assertNotNull(wildcardClass98);
    }

    @Test
    public void test0478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0478");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray8 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double9 = variance1.evaluate(doubleArray8);
        variance1.setBiasCorrected(true);
        boolean boolean12 = variance1.isBiasCorrected();
        double[] doubleArray19 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double20 = variance1.evaluate(doubleArray19);
        boolean boolean22 = variance1.equals((java.lang.Object) 10.0d);
        long long23 = variance1.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance25 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray32 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double33 = variance25.evaluate(doubleArray32);
        variance25.setBiasCorrected(true);
        variance25.increment((double) (byte) 0);
        variance25.clear();
        boolean boolean39 = variance25.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.Variance variance41 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray48 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double49 = variance41.evaluate(doubleArray48);
        variance41.setBiasCorrected(true);
        long long52 = variance41.getN();
        long long53 = variance41.getN();
        double double54 = variance41.getResult();
        variance41.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance57 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray64 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double65 = variance57.evaluate(doubleArray64);
        double[] doubleArray69 = new double[] { (byte) 1, (byte) 100, 1L };
        double double70 = variance57.evaluate(doubleArray69);
        org.apache.commons.math.stat.descriptive.moment.Variance variance72 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray79 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double80 = variance72.evaluate(doubleArray79);
        variance72.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance84 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray91 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double92 = variance84.evaluate(doubleArray91);
        variance72.incrementAll(doubleArray91);
        variance57.incrementAll(doubleArray91);
        double double95 = variance41.evaluate(doubleArray91);
        variance25.incrementAll(doubleArray91);
        double double97 = variance1.evaluate(doubleArray91);
        variance1.clear();
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 2168.222222222222d + "'", double9 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 16.566666666666663d + "'", double20 == 16.566666666666663d);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 2168.222222222222d + "'", double33 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 2168.222222222222d + "'", double49 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 0L + "'", long52 == 0L);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 0L + "'", long53 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double54));
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 2168.222222222222d + "'", double65 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[1.0, 100.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 2178.0d + "'", double70 == 2178.0d);
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 2168.222222222222d + "'", double80 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray91), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double92 + "' != '" + 2168.222222222222d + "'", double92 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + double95 + "' != '" + 2601.866666666667d + "'", double95 == 2601.866666666667d);
        org.junit.Assert.assertTrue("'" + double97 + "' != '" + 2601.866666666667d + "'", double97 == 2601.866666666667d);
    }

    @Test
    public void test0479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0479");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        variance1.clear();
        double double3 = variance1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance5 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray12 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double13 = variance5.evaluate(doubleArray12);
        variance5.setBiasCorrected(true);
        boolean boolean16 = variance5.isBiasCorrected();
        double[] doubleArray23 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double24 = variance5.evaluate(doubleArray23);
        double double25 = variance5.getResult();
        variance5.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance29 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray36 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double37 = variance29.evaluate(doubleArray36);
        variance29.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance41 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray48 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double49 = variance41.evaluate(doubleArray48);
        variance41.setBiasCorrected(true);
        boolean boolean52 = variance41.isBiasCorrected();
        double[] doubleArray59 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double60 = variance41.evaluate(doubleArray59);
        org.apache.commons.math.stat.descriptive.moment.Variance variance62 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray69 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double70 = variance62.evaluate(doubleArray69);
        variance62.setBiasCorrected(true);
        boolean boolean73 = variance62.isBiasCorrected();
        double[] doubleArray80 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double81 = variance62.evaluate(doubleArray80);
        double double84 = variance41.evaluate(doubleArray80, (int) (byte) 1, 0);
        double double86 = variance29.evaluate(doubleArray80, 2178.0d);
        boolean boolean87 = variance5.equals((java.lang.Object) doubleArray80);
        double double89 = variance1.evaluate(doubleArray80, (double) '#');
        boolean boolean90 = variance1.isBiasCorrected();
        double double91 = variance1.getResult();
        long long92 = variance1.getN();
        double[] doubleArray93 = null;
        // The following exception was thrown during execution in test generation
        try {
            variance1.incrementAll(doubleArray93);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: input values array is null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 2168.222222222222d + "'", double13 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 16.566666666666663d + "'", double24 == 16.566666666666663d);
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 2168.222222222222d + "'", double37 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 2168.222222222222d + "'", double49 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 16.566666666666663d + "'", double60 == 16.566666666666663d);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 2168.222222222222d + "'", double70 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 16.566666666666663d + "'", double81 == 16.566666666666663d);
        org.junit.Assert.assertTrue(Double.isNaN(double84));
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 16.566666666418314d + "'", double86 == 16.566666666418314d);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + 13.805555555555506d + "'", double89 == 13.805555555555506d);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double91));
        org.junit.Assert.assertTrue("'" + long92 + "' != '" + 0L + "'", long92 == 0L);
    }

    @Test
    public void test0480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0480");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray8 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double9 = variance1.evaluate(doubleArray8);
        long long10 = variance1.getN();
        variance1.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance13 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray20 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double21 = variance13.evaluate(doubleArray20);
        variance13.setBiasCorrected(true);
        boolean boolean24 = variance13.isBiasCorrected();
        double[] doubleArray31 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double32 = variance13.evaluate(doubleArray31);
        double double33 = variance13.getResult();
        variance13.setBiasCorrected(true);
        long long36 = variance13.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance38 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray45 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double46 = variance38.evaluate(doubleArray45);
        variance38.setBiasCorrected(true);
        boolean boolean49 = variance38.isBiasCorrected();
        double[] doubleArray56 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double57 = variance38.evaluate(doubleArray56);
        boolean boolean59 = variance38.equals((java.lang.Object) 10.0d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance61 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray68 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double69 = variance61.evaluate(doubleArray68);
        variance61.setBiasCorrected(true);
        boolean boolean72 = variance61.isBiasCorrected();
        double[] doubleArray79 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double80 = variance61.evaluate(doubleArray79);
        double double82 = variance38.evaluate(doubleArray79, (double) 0.0f);
        variance13.incrementAll(doubleArray79);
        double double85 = variance1.evaluate(doubleArray79, (double) ' ');
        double double86 = variance1.getResult();
        double double87 = variance1.getResult();
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 2168.222222222222d + "'", double9 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 2168.222222222222d + "'", double21 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 16.566666666666663d + "'", double32 == 16.566666666666663d);
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 2168.222222222222d + "'", double46 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 16.566666666666663d + "'", double57 == 16.566666666666663d);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 2168.222222222222d + "'", double69 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 16.566666666666663d + "'", double80 == 16.566666666666663d);
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 16.566666666666666d + "'", double82 == 16.566666666666666d);
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 13.805555555555506d + "'", double85 == 13.805555555555506d);
        org.junit.Assert.assertTrue(Double.isNaN(double86));
        org.junit.Assert.assertTrue(Double.isNaN(double87));
    }

    @Test
    public void test0481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0481");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray8 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double9 = variance1.evaluate(doubleArray8);
        variance1.setBiasCorrected(true);
        long long12 = variance1.getN();
        long long13 = variance1.getN();
        boolean boolean14 = variance1.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.Variance variance16 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray23 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double24 = variance16.evaluate(doubleArray23);
        variance16.setBiasCorrected(true);
        boolean boolean27 = variance16.isBiasCorrected();
        double[] doubleArray34 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double35 = variance16.evaluate(doubleArray34);
        boolean boolean37 = variance16.equals((java.lang.Object) 10.0d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance39 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray46 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double47 = variance39.evaluate(doubleArray46);
        variance39.setBiasCorrected(true);
        boolean boolean50 = variance39.isBiasCorrected();
        double[] doubleArray57 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double58 = variance39.evaluate(doubleArray57);
        double double60 = variance16.evaluate(doubleArray57, (double) 0.0f);
        variance1.incrementAll(doubleArray57);
        variance1.increment((double) 0.0f);
        variance1.increment(1166128.5457099646d);
        variance1.setBiasCorrected(false);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 2168.222222222222d + "'", double9 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 2168.222222222222d + "'", double24 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 16.566666666666663d + "'", double35 == 16.566666666666663d);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 2168.222222222222d + "'", double47 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 16.566666666666663d + "'", double58 == 16.566666666666663d);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 16.566666666666666d + "'", double60 == 16.566666666666666d);
    }

    @Test
    public void test0482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0482");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray8 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double9 = variance1.evaluate(doubleArray8);
        variance1.setBiasCorrected(true);
        long long12 = variance1.getN();
        long long13 = variance1.getN();
        boolean boolean15 = variance1.equals((java.lang.Object) 16.566666666666663d);
        boolean boolean17 = variance1.equals((java.lang.Object) (short) 10);
        java.lang.Class<?> wildcardClass18 = variance1.getClass();
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 2168.222222222222d + "'", double9 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test0483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0483");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        variance1.clear();
        double double3 = variance1.getResult();
        double double4 = variance1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance6 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray13 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double14 = variance6.evaluate(doubleArray13);
        double[] doubleArray18 = new double[] { (byte) 1, (byte) 100, 1L };
        double double19 = variance6.evaluate(doubleArray18);
        org.apache.commons.math.stat.descriptive.moment.Variance variance21 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray28 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double29 = variance21.evaluate(doubleArray28);
        variance21.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance33 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray40 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double41 = variance33.evaluate(doubleArray40);
        variance21.incrementAll(doubleArray40);
        variance6.incrementAll(doubleArray40);
        variance1.incrementAll(doubleArray40);
        variance1.increment(100.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 2168.222222222222d + "'", double14 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, 100.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 2178.0d + "'", double19 == 2178.0d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 2168.222222222222d + "'", double29 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 2168.222222222222d + "'", double41 == 2168.222222222222d);
    }

    @Test
    public void test0484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0484");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = null;
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment1);
        variance2.clear();
        double[] doubleArray4 = new double[] {};
        variance2.incrementAll(doubleArray4);
        variance2.increment(2178.0d);
        variance2.clear();
        variance2.increment((double) 10L);
        java.lang.Object obj11 = null;
        boolean boolean12 = variance2.equals(obj11);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test0485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0485");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray8 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double9 = variance1.evaluate(doubleArray8);
        variance1.setBiasCorrected(true);
        boolean boolean12 = variance1.isBiasCorrected();
        double[] doubleArray19 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double20 = variance1.evaluate(doubleArray19);
        org.apache.commons.math.stat.descriptive.moment.Variance variance22 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray29 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double30 = variance22.evaluate(doubleArray29);
        variance22.setBiasCorrected(true);
        boolean boolean33 = variance22.isBiasCorrected();
        double[] doubleArray40 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double41 = variance22.evaluate(doubleArray40);
        double double44 = variance1.evaluate(doubleArray40, (int) (byte) 1, 0);
        double double45 = variance1.getResult();
        variance1.setBiasCorrected(true);
        double[] doubleArray48 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double49 = variance1.evaluate(doubleArray48);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: input values array is null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 2168.222222222222d + "'", double9 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 16.566666666666663d + "'", double20 == 16.566666666666663d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 2168.222222222222d + "'", double30 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 16.566666666666663d + "'", double41 == 16.566666666666663d);
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertTrue(Double.isNaN(double45));
    }

    @Test
    public void test0486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0486");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = null;
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment1);
        double[] doubleArray3 = new double[] {};
        double double6 = variance2.evaluate(doubleArray3, 0, 0);
        boolean boolean8 = variance2.equals((java.lang.Object) 10);
        variance2.increment(Double.NaN);
        boolean boolean11 = variance2.isBiasCorrected();
        variance2.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray21 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double22 = variance14.evaluate(doubleArray21);
        variance14.setBiasCorrected(true);
        boolean boolean25 = variance14.isBiasCorrected();
        double[] doubleArray32 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double33 = variance14.evaluate(doubleArray32);
        double double34 = variance14.getResult();
        long long35 = variance14.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance37 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray44 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double45 = variance37.evaluate(doubleArray44);
        variance37.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance49 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray56 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double57 = variance49.evaluate(doubleArray56);
        variance49.setBiasCorrected(true);
        boolean boolean60 = variance49.isBiasCorrected();
        double[] doubleArray67 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double68 = variance49.evaluate(doubleArray67);
        org.apache.commons.math.stat.descriptive.moment.Variance variance70 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray77 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double78 = variance70.evaluate(doubleArray77);
        variance70.setBiasCorrected(true);
        boolean boolean81 = variance70.isBiasCorrected();
        double[] doubleArray88 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double89 = variance70.evaluate(doubleArray88);
        double double92 = variance49.evaluate(doubleArray88, (int) (byte) 1, 0);
        double double94 = variance37.evaluate(doubleArray88, 2178.0d);
        variance14.incrementAll(doubleArray88);
        long long96 = variance14.getN();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean97 = variance2.equals((java.lang.Object) variance14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 2168.222222222222d + "'", double22 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 16.566666666666663d + "'", double33 == 16.566666666666663d);
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 2168.222222222222d + "'", double45 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 2168.222222222222d + "'", double57 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 16.566666666666663d + "'", double68 == 16.566666666666663d);
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 2168.222222222222d + "'", double78 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + 16.566666666666663d + "'", double89 == 16.566666666666663d);
        org.junit.Assert.assertTrue(Double.isNaN(double92));
        org.junit.Assert.assertTrue("'" + double94 + "' != '" + 16.566666666418314d + "'", double94 == 16.566666666418314d);
        org.junit.Assert.assertTrue("'" + long96 + "' != '" + 6L + "'", long96 == 6L);
    }

    @Test
    public void test0487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0487");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = null;
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        org.apache.commons.math.stat.descriptive.moment.Variance variance4 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray11 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double12 = variance4.evaluate(doubleArray11);
        variance4.setBiasCorrected(true);
        long long15 = variance4.getN();
        long long16 = variance4.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance18 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray25 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double26 = variance18.evaluate(doubleArray25);
        double[] doubleArray30 = new double[] { (byte) 1, (byte) 100, 1L };
        double double31 = variance18.evaluate(doubleArray30);
        double double33 = variance4.evaluate(doubleArray30, (double) 10.0f);
        org.apache.commons.math.stat.descriptive.moment.Variance variance35 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray42 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double43 = variance35.evaluate(doubleArray42);
        variance35.setBiasCorrected(true);
        long long46 = variance35.getN();
        long long47 = variance35.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance49 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray56 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double57 = variance49.evaluate(doubleArray56);
        double[] doubleArray61 = new double[] { (byte) 1, (byte) 100, 1L };
        double double62 = variance49.evaluate(doubleArray61);
        double double64 = variance35.evaluate(doubleArray61, (double) 10.0f);
        double double65 = variance4.evaluate(doubleArray61);
        org.apache.commons.math.stat.descriptive.moment.Variance variance67 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray74 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double75 = variance67.evaluate(doubleArray74);
        variance67.setBiasCorrected(true);
        boolean boolean78 = variance67.isBiasCorrected();
        double[] doubleArray85 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double86 = variance67.evaluate(doubleArray85);
        double double88 = variance4.evaluate(doubleArray85, (double) 0.0f);
        // The following exception was thrown during execution in test generation
        try {
            double double91 = variance2.evaluate(doubleArray85, (int) '4', 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 2168.222222222222d + "'", double12 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 2168.222222222222d + "'", double26 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[1.0, 100.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 2178.0d + "'", double31 == 2178.0d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 3267.0d + "'", double33 == 3267.0d);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 2168.222222222222d + "'", double43 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 0L + "'", long46 == 0L);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 2168.222222222222d + "'", double57 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[1.0, 100.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 2178.0d + "'", double62 == 2178.0d);
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 3267.0d + "'", double64 == 3267.0d);
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 3267.0d + "'", double65 == 3267.0d);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 2168.222222222222d + "'", double75 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 16.566666666666663d + "'", double86 == 16.566666666666663d);
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 16.566666666666666d + "'", double88 == 16.566666666666666d);
    }

    @Test
    public void test0488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0488");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray8 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double9 = variance1.evaluate(doubleArray8);
        variance1.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance13 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray20 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double21 = variance13.evaluate(doubleArray20);
        variance13.setBiasCorrected(true);
        boolean boolean24 = variance13.isBiasCorrected();
        double[] doubleArray31 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double32 = variance13.evaluate(doubleArray31);
        double double35 = variance1.evaluate(doubleArray31, (int) (byte) 1, (int) (byte) 0);
        variance1.setBiasCorrected(true);
        variance1.setBiasCorrected(false);
        long long40 = variance1.getN();
        java.lang.Class<?> wildcardClass41 = variance1.getClass();
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 2168.222222222222d + "'", double9 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 2168.222222222222d + "'", double21 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 16.566666666666663d + "'", double32 == 16.566666666666663d);
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass41);
    }

    @Test
    public void test0489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0489");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray8 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double9 = variance1.evaluate(doubleArray8);
        variance1.setBiasCorrected(true);
        boolean boolean12 = variance1.isBiasCorrected();
        double[] doubleArray19 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double20 = variance1.evaluate(doubleArray19);
        boolean boolean22 = variance1.equals((java.lang.Object) 10.0d);
        boolean boolean23 = variance1.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.Variance variance25 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray32 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double33 = variance25.evaluate(doubleArray32);
        variance25.clear();
        variance25.setBiasCorrected(false);
        variance25.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance39 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray46 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double47 = variance39.evaluate(doubleArray46);
        variance39.setBiasCorrected(true);
        variance39.increment((double) (byte) 0);
        double[] doubleArray54 = new double[] { 'a', 100L };
        double double56 = variance39.evaluate(doubleArray54, 0.0d);
        double double57 = variance25.evaluate(doubleArray54);
        // The following exception was thrown during execution in test generation
        try {
            variance1.incrementAll(doubleArray54, (int) (short) 10, (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 2168.222222222222d + "'", double9 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 16.566666666666663d + "'", double20 == 16.566666666666663d);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 2168.222222222222d + "'", double33 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 2168.222222222222d + "'", double47 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[97.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 4.5d + "'", double56 == 4.5d);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 2.25d + "'", double57 == 2.25d);
    }

    @Test
    public void test0490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0490");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray8 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double9 = variance1.evaluate(doubleArray8);
        variance1.setBiasCorrected(true);
        boolean boolean12 = variance1.isBiasCorrected();
        double[] doubleArray19 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double20 = variance1.evaluate(doubleArray19);
        boolean boolean22 = variance1.equals((java.lang.Object) 10.0d);
        boolean boolean23 = variance1.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.Variance variance25 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        boolean boolean26 = variance1.equals((java.lang.Object) false);
        variance1.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance30 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray37 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double38 = variance30.evaluate(doubleArray37);
        variance30.setBiasCorrected(true);
        boolean boolean41 = variance30.isBiasCorrected();
        double[] doubleArray48 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double49 = variance30.evaluate(doubleArray48);
        double double50 = variance30.getResult();
        long long51 = variance30.getN();
        variance30.increment((double) '#');
        variance30.setBiasCorrected(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance57 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray64 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double65 = variance57.evaluate(doubleArray64);
        variance57.setBiasCorrected(true);
        variance57.increment((double) (byte) 0);
        double[] doubleArray72 = new double[] { 'a', 100L };
        double double74 = variance57.evaluate(doubleArray72, 0.0d);
        variance30.incrementAll(doubleArray72);
        // The following exception was thrown during execution in test generation
        try {
            variance1.incrementAll(doubleArray72, (-1), 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: start position cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 2168.222222222222d + "'", double9 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 16.566666666666663d + "'", double20 == 16.566666666666663d);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 2168.222222222222d + "'", double38 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 16.566666666666663d + "'", double49 == 16.566666666666663d);
        org.junit.Assert.assertTrue(Double.isNaN(double50));
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 0L + "'", long51 == 0L);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 2168.222222222222d + "'", double65 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[97.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 4.5d + "'", double74 == 4.5d);
    }

    @Test
    public void test0491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0491");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray8 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double9 = variance1.evaluate(doubleArray8);
        variance1.setBiasCorrected(true);
        long long12 = variance1.getN();
        long long13 = variance1.getN();
        double double14 = variance1.getResult();
        variance1.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance17 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray24 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double25 = variance17.evaluate(doubleArray24);
        double[] doubleArray29 = new double[] { (byte) 1, (byte) 100, 1L };
        double double30 = variance17.evaluate(doubleArray29);
        org.apache.commons.math.stat.descriptive.moment.Variance variance32 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray39 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double40 = variance32.evaluate(doubleArray39);
        variance32.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance44 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray51 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double52 = variance44.evaluate(doubleArray51);
        variance32.incrementAll(doubleArray51);
        variance17.incrementAll(doubleArray51);
        double double55 = variance1.evaluate(doubleArray51);
        long long56 = variance1.getN();
        double double57 = variance1.getResult();
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 2168.222222222222d + "'", double9 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 2168.222222222222d + "'", double25 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, 100.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 2178.0d + "'", double30 == 2178.0d);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 2168.222222222222d + "'", double40 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 2168.222222222222d + "'", double52 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 2601.866666666667d + "'", double55 == 2601.866666666667d);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 0L + "'", long56 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double57));
    }

    @Test
    public void test0492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0492");
        org.apache.commons.math.stat.descriptive.moment.Variance variance0 = new org.apache.commons.math.stat.descriptive.moment.Variance();
        long long1 = variance0.getN();
        long long2 = variance0.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance4 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray11 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double12 = variance4.evaluate(doubleArray11);
        variance4.setBiasCorrected(true);
        boolean boolean15 = variance4.isBiasCorrected();
        double[] doubleArray22 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double23 = variance4.evaluate(doubleArray22);
        double double24 = variance4.getResult();
        variance4.setBiasCorrected(true);
        long long27 = variance4.getN();
        variance4.setBiasCorrected(true);
        boolean boolean30 = variance4.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.Variance variance32 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        variance32.clear();
        double double34 = variance32.getResult();
        double[] doubleArray39 = new double[] { (-1), 2168.222222222222d, 16.566666666418314d, 10.0d };
        variance32.incrementAll(doubleArray39);
        org.apache.commons.math.stat.descriptive.moment.Variance variance42 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray49 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double50 = variance42.evaluate(doubleArray49);
        variance42.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance54 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray61 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double62 = variance54.evaluate(doubleArray61);
        variance42.incrementAll(doubleArray61);
        variance42.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance66 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray73 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double74 = variance66.evaluate(doubleArray73);
        double[] doubleArray78 = new double[] { (byte) 1, (byte) 100, 1L };
        double double79 = variance66.evaluate(doubleArray78);
        variance42.incrementAll(doubleArray78, (int) (byte) 0, (int) (byte) 1);
        double double86 = variance32.evaluate(doubleArray78, (double) 'a', (int) (short) 1, (int) (short) 1);
        double double88 = variance4.evaluate(doubleArray78, 13.805555555555552d);
        // The following exception was thrown during execution in test generation
        try {
            variance0.incrementAll(doubleArray78, 10, (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 2168.222222222222d + "'", double12 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 16.566666666666663d + "'", double23 == 16.566666666666663d);
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[-1.0, 2168.222222222222, 16.566666666418314, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 2168.222222222222d + "'", double50 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 2168.222222222222d + "'", double62 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 2168.222222222222d + "'", double74 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0, 100.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 2178.0d + "'", double79 == 2178.0d);
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 0.0d + "'", double86 == 0.0d);
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 3266.9999999999995d + "'", double88 == 3266.9999999999995d);
    }

    @Test
    public void test0493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0493");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance3 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray10 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double11 = variance3.evaluate(doubleArray10);
        double[] doubleArray15 = new double[] { (byte) 1, (byte) 100, 1L };
        double double16 = variance3.evaluate(doubleArray15);
        boolean boolean17 = variance1.equals((java.lang.Object) variance3);
        variance3.increment((double) ' ');
        java.lang.Class<?> wildcardClass20 = variance3.getClass();
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 2168.222222222222d + "'", double11 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[1.0, 100.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 2178.0d + "'", double16 == 2178.0d);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(wildcardClass20);
    }

    @Test
    public void test0494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0494");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = null;
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment1);
        double[] doubleArray3 = new double[] {};
        double double6 = variance2.evaluate(doubleArray3, 0, 0);
        boolean boolean8 = variance2.equals((java.lang.Object) 10.0f);
        // The following exception was thrown during execution in test generation
        try {
            long long9 = variance2.getN();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test0495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0495");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray8 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double9 = variance1.evaluate(doubleArray8);
        variance1.setBiasCorrected(true);
        long long12 = variance1.getN();
        variance1.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance();
        double double15 = variance14.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance17 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray24 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double25 = variance17.evaluate(doubleArray24);
        variance17.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance29 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray36 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double37 = variance29.evaluate(doubleArray36);
        variance17.incrementAll(doubleArray36);
        boolean boolean39 = variance14.equals((java.lang.Object) variance17);
        org.apache.commons.math.stat.descriptive.moment.Variance variance41 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray48 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double49 = variance41.evaluate(doubleArray48);
        variance41.clear();
        boolean boolean51 = variance17.equals((java.lang.Object) variance41);
        boolean boolean52 = variance1.equals((java.lang.Object) boolean51);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 2168.222222222222d + "'", double9 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 2168.222222222222d + "'", double25 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 2168.222222222222d + "'", double37 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 2168.222222222222d + "'", double49 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
    }

    @Test
    public void test0496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0496");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray8 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double9 = variance1.evaluate(doubleArray8);
        variance1.setBiasCorrected(true);
        long long12 = variance1.getN();
        variance1.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance15 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray22 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double23 = variance15.evaluate(doubleArray22);
        double[] doubleArray27 = new double[] { (byte) 1, (byte) 100, 1L };
        double double28 = variance15.evaluate(doubleArray27);
        org.apache.commons.math.stat.descriptive.moment.Variance variance30 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray37 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double38 = variance30.evaluate(doubleArray37);
        variance30.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance42 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray49 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double50 = variance42.evaluate(doubleArray49);
        variance30.incrementAll(doubleArray49);
        variance15.incrementAll(doubleArray49);
        variance1.incrementAll(doubleArray49, (int) (byte) 1, (int) (short) 1);
        java.lang.Class<?> wildcardClass56 = variance1.getClass();
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 2168.222222222222d + "'", double9 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 2168.222222222222d + "'", double23 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0, 100.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 2178.0d + "'", double28 == 2178.0d);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 2168.222222222222d + "'", double38 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 2168.222222222222d + "'", double50 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(wildcardClass56);
    }

    @Test
    public void test0497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0497");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = null;
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment1);
        double[] doubleArray3 = new double[] {};
        double double6 = variance2.evaluate(doubleArray3, 0, 0);
        boolean boolean8 = variance2.equals((java.lang.Object) 10);
        variance2.increment(16.566666666667153d);
        // The following exception was thrown during execution in test generation
        try {
            long long11 = variance2.getN();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test0498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0498");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double2 = variance1.getResult();
        double double3 = variance1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance5 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray12 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double13 = variance5.evaluate(doubleArray12);
        variance5.setBiasCorrected(true);
        long long16 = variance5.getN();
        variance5.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance19 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray26 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double27 = variance19.evaluate(doubleArray26);
        double double28 = variance5.evaluate(doubleArray26);
        variance1.incrementAll(doubleArray26);
        org.apache.commons.math.stat.descriptive.moment.Variance variance31 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray38 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double39 = variance31.evaluate(doubleArray38);
        variance31.setBiasCorrected(true);
        boolean boolean42 = variance31.isBiasCorrected();
        double[] doubleArray49 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double50 = variance31.evaluate(doubleArray49);
        double double51 = variance31.getResult();
        long long52 = variance31.getN();
        variance31.increment((double) '#');
        variance31.setBiasCorrected(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance58 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray65 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double66 = variance58.evaluate(doubleArray65);
        variance58.setBiasCorrected(true);
        variance58.increment((double) (byte) 0);
        double[] doubleArray73 = new double[] { 'a', 100L };
        double double75 = variance58.evaluate(doubleArray73, 0.0d);
        variance31.incrementAll(doubleArray73);
        // The following exception was thrown during execution in test generation
        try {
            variance1.incrementAll(doubleArray73, (int) (short) 10, (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 2168.222222222222d + "'", double13 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 2168.222222222222d + "'", double27 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 2601.866666666667d + "'", double28 == 2601.866666666667d);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 2168.222222222222d + "'", double39 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 16.566666666666663d + "'", double50 == 16.566666666666663d);
        org.junit.Assert.assertTrue(Double.isNaN(double51));
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 0L + "'", long52 == 0L);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 2168.222222222222d + "'", double66 == 2168.222222222222d);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[97.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 4.5d + "'", double75 == 4.5d);
    }

    @Test
    public void test0499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0499");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray8 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double9 = variance1.evaluate(doubleArray8);
        variance1.setBiasCorrected(true);
        boolean boolean12 = variance1.isBiasCorrected();
        double[] doubleArray19 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double20 = variance1.evaluate(doubleArray19);
        org.apache.commons.math.stat.descriptive.moment.Variance variance22 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray29 = new double[] { (byte) -1, (short) 100, 'a', 0, 1, (-1.0d) };
        double double30 = variance22.evaluate(doubleArray29);
        variance22.setBiasCorrected(true);
        boolean boolean33 = variance22.isBiasCorrected();
        double[] doubleArray40 = new double[] { (short) 0, 1.0d, 1L, 0.0d, (-1.0d), 10L };
        double double41 = variance22.evaluate(doubleArray40);
        double double44 = variance1.evaluate(doubleArray40, (int) (byte) 1, 0);
        variance1.setBiasCorrected(true);
        variance1.setBiasCorrected(true);
        double double49 = variance1.getResult();
        double double50 = variance1.getResult();
        variance1.clear();
        java.lang.Class<?> wildcardClass52 = variance1.getClass();
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 2168.222222222222d + "'", double9 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 16.566666666666663d + "'", double20 == 16.566666666666663d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[-1.0, 100.0, 97.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 2168.222222222222d + "'", double30 == 2168.222222222222d);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[0.0, 1.0, 1.0, 0.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 16.566666666666663d + "'", double41 == 16.566666666666663d);
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertTrue(Double.isNaN(double49));
        org.junit.Assert.assertTrue(Double.isNaN(double50));
        org.junit.Assert.assertNotNull(wildcardClass52);
    }

    @Test
    public void test0500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0500");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment(16.566666666418314d);
        double[] doubleArray4 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double6 = variance1.evaluate(doubleArray4, 16.566666666666674d);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }
}


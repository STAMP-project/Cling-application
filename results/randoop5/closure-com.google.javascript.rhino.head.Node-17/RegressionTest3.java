import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest3 {

    public static boolean debug = false;

    @Test
    public void test1501() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1501");
        com.google.javascript.rhino.head.Node node2 = com.google.javascript.rhino.head.Node.newString("");
        int int5 = node2.getIntProp(17, (int) (byte) -1);
        com.google.javascript.rhino.head.Node node8 = new com.google.javascript.rhino.head.Node(40, 8);
        com.google.javascript.rhino.head.Node node11 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str12 = node11.toString();
        boolean boolean13 = node11.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node15 = com.google.javascript.rhino.head.Node.newString("");
        node15.removeProp(23);
        node11.addChildToFront(node15);
        com.google.javascript.rhino.head.Node node19 = node11.getFirstChild();
        com.google.javascript.rhino.head.Node node21 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        node19.addChildrenToBack(node21);
        com.google.javascript.rhino.head.Node node24 = com.google.javascript.rhino.head.Node.newString("");
        int int27 = node24.getIntProp(17, (int) (byte) -1);
        com.google.javascript.rhino.head.Node node28 = new com.google.javascript.rhino.head.Node((int) (short) 10, node19, node24);
        com.google.javascript.rhino.head.Node node30 = node19.setType(18);
        node2.addChildAfter(node8, node30);
        com.google.javascript.rhino.head.Node node33 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean34 = node33.hasSideEffects();
        node8.addChildrenToFront(node33);
        com.google.javascript.rhino.head.ast.Comment comment36 = null;
        node33.setJsDocNode(comment36);
        node33.setLineno((int) 'a');
        int int40 = node33.getLineno();
        com.google.javascript.rhino.head.Node node42 = new com.google.javascript.rhino.head.Node(40, node33, 7);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "40" + "'", str12, "40");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 97 + "'", int40 == 97);
    }

    @Test
    public void test1502() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1502");
        com.google.javascript.rhino.head.Node node2 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str3 = node2.toString();
        boolean boolean4 = node2.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node6 = com.google.javascript.rhino.head.Node.newString("");
        node6.removeProp(23);
        node2.addChildToFront(node6);
        java.lang.String str10 = node6.getString();
        com.google.javascript.rhino.head.ast.Scope scope11 = node6.getScope();
        com.google.javascript.rhino.head.Node node14 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str15 = node14.toString();
        boolean boolean16 = node14.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node18 = com.google.javascript.rhino.head.Node.newString("");
        node18.removeProp(23);
        node14.addChildToFront(node18);
        com.google.javascript.rhino.head.Node node22 = node14.getFirstChild();
        node22.setString("100");
        com.google.javascript.rhino.head.ast.Scope scope25 = node22.getScope();
        com.google.javascript.rhino.head.Node node27 = new com.google.javascript.rhino.head.Node((int) ' ', node22, 2);
        boolean boolean28 = node27.hasChildren();
        com.google.javascript.rhino.head.Node node31 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str32 = node31.toString();
        boolean boolean33 = node31.hasConsistentReturnUsage();
        boolean boolean34 = node31.hasSideEffects();
        com.google.javascript.rhino.head.Node node35 = new com.google.javascript.rhino.head.Node(0, node31);
        int int36 = node31.getLineno();
        node27.addChildToFront(node31);
        int int38 = node31.getType();
        boolean boolean39 = node31.hasChildren();
        com.google.javascript.rhino.head.Node node41 = new com.google.javascript.rhino.head.Node((int) (byte) -1);
        java.lang.String str42 = node41.toString();
        boolean boolean43 = node41.hasChildren();
        com.google.javascript.rhino.head.Node node47 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str48 = node47.toString();
        boolean boolean49 = node47.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node51 = com.google.javascript.rhino.head.Node.newString("");
        node51.removeProp(23);
        node47.addChildToFront(node51);
        com.google.javascript.rhino.head.Node node55 = node47.getFirstChild();
        node55.setString("100");
        com.google.javascript.rhino.head.ast.Scope scope58 = node55.getScope();
        com.google.javascript.rhino.head.Node node60 = new com.google.javascript.rhino.head.Node((int) ' ', node55, 2);
        com.google.javascript.rhino.head.Node node61 = node55.getLastSibling();
        com.google.javascript.rhino.head.Node node64 = com.google.javascript.rhino.head.Node.newString(23, "");
        com.google.javascript.rhino.head.Node node65 = node64.getLastSibling();
        com.google.javascript.rhino.head.Node node66 = new com.google.javascript.rhino.head.Node((int) ' ', node61, node64);
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor67 = node64.iterator();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator68 = node64.new NodeIterator();
        node41.addChildrenToBack(node64);
        com.google.javascript.rhino.head.Node node70 = new com.google.javascript.rhino.head.Node(0, node6, node31, node64);
        java.util.Spliterator<com.google.javascript.rhino.head.Node> nodeSpliterator71 = node64.spliterator();
        java.util.Spliterator<com.google.javascript.rhino.head.Node> nodeSpliterator72 = node64.spliterator();
        boolean boolean73 = node64.hasConsistentReturnUsage();
        java.lang.Object obj75 = node64.getProp(0);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "40" + "'", str3, "40");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNull(scope11);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "40" + "'", str15, "40");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNull(scope25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "40" + "'", str32, "40");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 40 + "'", int38 == 40);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "-1" + "'", str42, "-1");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "40" + "'", str48, "40");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNull(scope58);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertNotNull(nodeItor67);
        org.junit.Assert.assertNotNull(nodeSpliterator71);
        org.junit.Assert.assertNotNull(nodeSpliterator72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNull(obj75);
    }

    @Test
    public void test1503() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1503");
        com.google.javascript.rhino.head.Node node2 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str3 = node2.toString();
        boolean boolean4 = node2.hasConsistentReturnUsage();
        boolean boolean5 = node2.hasSideEffects();
        com.google.javascript.rhino.head.Node node7 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str8 = node7.toString();
        boolean boolean9 = node7.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node11 = com.google.javascript.rhino.head.Node.newString("");
        node11.removeProp(23);
        node7.addChildToFront(node11);
        com.google.javascript.rhino.head.Node node15 = node7.getFirstChild();
        com.google.javascript.rhino.head.ast.Comment comment16 = node7.getJsDocNode();
        node2.addChildToBack(node7);
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor18 = node2.iterator();
        com.google.javascript.rhino.head.ast.Comment comment19 = node2.getJsDocNode();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator20 = node2.new NodeIterator();
        double double21 = node2.getDouble();
        com.google.javascript.rhino.head.Node node24 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        com.google.javascript.rhino.head.Node node26 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str27 = node26.toString();
        boolean boolean28 = node26.hasConsistentReturnUsage();
        boolean boolean29 = node26.hasSideEffects();
        node24.addChildrenToFront(node26);
        node26.removeChildren();
        com.google.javascript.rhino.head.Node node33 = com.google.javascript.rhino.head.Node.newString("hi!");
        node26.addChildrenToBack(node33);
        node33.setLineno(22);
        boolean boolean37 = node33.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node39 = com.google.javascript.rhino.head.Node.newString("-1");
        node39.removeProp(25);
        com.google.javascript.rhino.head.Node node43 = com.google.javascript.rhino.head.Node.newString("");
        int int46 = node43.getIntProp(17, (int) (byte) -1);
        com.google.javascript.rhino.head.Node node49 = new com.google.javascript.rhino.head.Node(40, 8);
        com.google.javascript.rhino.head.Node node52 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str53 = node52.toString();
        boolean boolean54 = node52.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node56 = com.google.javascript.rhino.head.Node.newString("");
        node56.removeProp(23);
        node52.addChildToFront(node56);
        com.google.javascript.rhino.head.Node node60 = node52.getFirstChild();
        com.google.javascript.rhino.head.Node node62 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        node60.addChildrenToBack(node62);
        com.google.javascript.rhino.head.Node node65 = com.google.javascript.rhino.head.Node.newString("");
        int int68 = node65.getIntProp(17, (int) (byte) -1);
        com.google.javascript.rhino.head.Node node69 = new com.google.javascript.rhino.head.Node((int) (short) 10, node60, node65);
        com.google.javascript.rhino.head.Node node71 = node60.setType(18);
        node43.addChildAfter(node49, node71);
        node39.addChildToFront(node71);
        com.google.javascript.rhino.head.Node node74 = new com.google.javascript.rhino.head.Node((int) (byte) 100, node33, node71);
        node2.addChildrenToBack(node71);
        com.google.javascript.rhino.head.Node node79 = com.google.javascript.rhino.head.Node.newString("");
        int int80 = node79.getLineno();
        com.google.javascript.rhino.head.Node node82 = node79.setType((-1));
        com.google.javascript.rhino.head.Node node84 = new com.google.javascript.rhino.head.Node(23, node82, 22);
        com.google.javascript.rhino.head.Node node85 = new com.google.javascript.rhino.head.Node(15, node82);
        com.google.javascript.rhino.head.Node node86 = new com.google.javascript.rhino.head.Node(10, node2, node82);
        java.lang.String str87 = node82.toString();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "40" + "'", str3, "40");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "40" + "'", str8, "40");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNull(comment16);
        org.junit.Assert.assertNotNull(nodeItor18);
        org.junit.Assert.assertNull(comment19);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 32.0d + "'", double21 == 32.0d);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "40" + "'", str27, "40");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "40" + "'", str53, "40");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-1) + "'", int68 == (-1));
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + (-1) + "'", int80 == (-1));
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "-1" + "'", str87, "-1");
    }

    @Test
    public void test1504() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1504");
        com.google.javascript.rhino.head.Node node2 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str3 = node2.toString();
        boolean boolean4 = node2.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node6 = com.google.javascript.rhino.head.Node.newString("");
        node6.removeProp(23);
        node2.addChildToFront(node6);
        com.google.javascript.rhino.head.Node node11 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean12 = node11.hasChildren();
        node2.addChildrenToFront(node11);
        int int14 = node11.getLineno();
        com.google.javascript.rhino.head.Node node16 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str17 = node16.toString();
        boolean boolean18 = node16.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node20 = com.google.javascript.rhino.head.Node.newString("");
        node20.removeProp(23);
        node16.addChildToFront(node20);
        com.google.javascript.rhino.head.Node node24 = node16.getFirstChild();
        com.google.javascript.rhino.head.Node node26 = new com.google.javascript.rhino.head.Node((int) (short) 0, node11, node16, 9);
        com.google.javascript.rhino.head.Node node30 = com.google.javascript.rhino.head.Node.newString(23, "");
        com.google.javascript.rhino.head.Node node31 = node30.getLastSibling();
        com.google.javascript.rhino.head.Node node33 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        com.google.javascript.rhino.head.Node node35 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str36 = node35.toString();
        boolean boolean37 = node35.hasConsistentReturnUsage();
        boolean boolean38 = node35.hasSideEffects();
        node33.addChildrenToFront(node35);
        com.google.javascript.rhino.head.Node node41 = new com.google.javascript.rhino.head.Node(26, node30, node33, 20);
        com.google.javascript.rhino.head.Node node43 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        com.google.javascript.rhino.head.Node node45 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str46 = node45.toString();
        boolean boolean47 = node45.hasConsistentReturnUsage();
        boolean boolean48 = node45.hasSideEffects();
        node43.addChildrenToFront(node45);
        node45.removeChildren();
        com.google.javascript.rhino.head.Node node52 = com.google.javascript.rhino.head.Node.newString("hi!");
        node45.addChildrenToBack(node52);
        boolean boolean54 = node45.hasSideEffects();
        com.google.javascript.rhino.head.Node node55 = node45.getFirstChild();
        node11.replaceChildAfter(node30, node45);
        // The following exception was thrown during execution in test generation
        try {
            node45.labelId(24);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "40" + "'", str3, "40");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "40" + "'", str17, "40");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "40" + "'", str36, "40");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "40" + "'", str46, "40");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(node55);
    }

    @Test
    public void test1505() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1505");
        com.google.javascript.rhino.head.Node node4 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str5 = node4.toString();
        boolean boolean6 = node4.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node8 = com.google.javascript.rhino.head.Node.newString("");
        node8.removeProp(23);
        node4.addChildToFront(node8);
        com.google.javascript.rhino.head.Node node12 = node4.getFirstChild();
        node12.setString("100");
        com.google.javascript.rhino.head.ast.Scope scope15 = node12.getScope();
        com.google.javascript.rhino.head.Node node17 = new com.google.javascript.rhino.head.Node((int) ' ', node12, 2);
        com.google.javascript.rhino.head.Node node18 = node12.getLastSibling();
        com.google.javascript.rhino.head.Node node21 = com.google.javascript.rhino.head.Node.newString(23, "");
        com.google.javascript.rhino.head.Node node22 = node21.getLastSibling();
        com.google.javascript.rhino.head.Node node23 = new com.google.javascript.rhino.head.Node((int) ' ', node18, node21);
        node21.setLineno((int) (byte) 0);
        com.google.javascript.rhino.head.Node node26 = new com.google.javascript.rhino.head.Node(13, node21);
        com.google.javascript.rhino.head.Node node28 = node21.setType(2);
        node21.putIntProp(40, (int) (short) 100);
        com.google.javascript.rhino.head.Node node34 = com.google.javascript.rhino.head.Node.newString("");
        int int37 = node34.getIntProp(17, (int) (byte) -1);
        com.google.javascript.rhino.head.Node node38 = node34.getFirstChild();
        node21.putProp((int) 'a', (java.lang.Object) node34);
        com.google.javascript.rhino.head.ast.Scope scope40 = node21.getScope();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "40" + "'", str5, "40");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNull(scope15);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertNull(node38);
        org.junit.Assert.assertNull(scope40);
    }

    @Test
    public void test1506() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1506");
        com.google.javascript.rhino.head.Node node3 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str4 = node3.toString();
        boolean boolean5 = node3.hasConsistentReturnUsage();
        boolean boolean6 = node3.hasSideEffects();
        com.google.javascript.rhino.head.Node node7 = new com.google.javascript.rhino.head.Node(0, node3);
        com.google.javascript.rhino.head.Node node10 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str11 = node10.toString();
        boolean boolean12 = node10.hasConsistentReturnUsage();
        boolean boolean13 = node10.hasSideEffects();
        com.google.javascript.rhino.head.Node node15 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str16 = node15.toString();
        boolean boolean17 = node15.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node19 = com.google.javascript.rhino.head.Node.newString("");
        node19.removeProp(23);
        node15.addChildToFront(node19);
        com.google.javascript.rhino.head.Node node23 = node15.getFirstChild();
        com.google.javascript.rhino.head.ast.Comment comment24 = node15.getJsDocNode();
        node10.addChildToBack(node15);
        boolean boolean26 = node15.hasConsistentReturnUsage();
        node3.putProp((int) (short) 1, (java.lang.Object) node15);
        com.google.javascript.rhino.head.ast.Comment comment28 = null;
        node15.setJsDocNode(comment28);
        com.google.javascript.rhino.head.Node node31 = com.google.javascript.rhino.head.Node.newNumber((-1.0d));
        node31.putIntProp((int) (byte) -1, (int) (byte) 0);
        com.google.javascript.rhino.head.Node node36 = new com.google.javascript.rhino.head.Node(17, node15, node31, 41);
        // The following exception was thrown during execution in test generation
        try {
            node36.resetTargets();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "40" + "'", str4, "40");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "40" + "'", str11, "40");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "40" + "'", str16, "40");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNull(comment24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(node31);
    }

    @Test
    public void test1507() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1507");
        com.google.javascript.rhino.head.Node node3 = com.google.javascript.rhino.head.Node.newString("");
        node3.removeProp(23);
        node3.setLineno((int) '4');
        com.google.javascript.rhino.head.Node node12 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str13 = node12.toString();
        boolean boolean14 = node12.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node16 = com.google.javascript.rhino.head.Node.newString("");
        node16.removeProp(23);
        node12.addChildToFront(node16);
        com.google.javascript.rhino.head.Node node21 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean22 = node21.hasChildren();
        node12.addChildrenToFront(node21);
        int int24 = node21.getLineno();
        com.google.javascript.rhino.head.Node node26 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str27 = node26.toString();
        boolean boolean28 = node26.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node30 = com.google.javascript.rhino.head.Node.newString("");
        node30.removeProp(23);
        node26.addChildToFront(node30);
        com.google.javascript.rhino.head.Node node34 = node26.getFirstChild();
        com.google.javascript.rhino.head.Node node36 = new com.google.javascript.rhino.head.Node((int) (short) 0, node21, node26, 9);
        boolean boolean37 = node21.hasSideEffects();
        com.google.javascript.rhino.head.Node node39 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        com.google.javascript.rhino.head.Node node41 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str42 = node41.toString();
        boolean boolean43 = node41.hasConsistentReturnUsage();
        boolean boolean44 = node41.hasSideEffects();
        node39.addChildrenToFront(node41);
        node41.removeChildren();
        com.google.javascript.rhino.head.Node node48 = com.google.javascript.rhino.head.Node.newString("hi!");
        node41.addChildrenToBack(node48);
        com.google.javascript.rhino.head.Node node51 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str52 = node51.toString();
        boolean boolean53 = node51.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node55 = com.google.javascript.rhino.head.Node.newString("");
        node55.removeProp(23);
        node51.addChildToFront(node55);
        com.google.javascript.rhino.head.Node node59 = node51.getFirstChild();
        com.google.javascript.rhino.head.Node node61 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        node59.addChildrenToBack(node61);
        com.google.javascript.rhino.head.Node node63 = new com.google.javascript.rhino.head.Node((int) (byte) 1, node21, node41, node61);
        com.google.javascript.rhino.head.Node node64 = new com.google.javascript.rhino.head.Node(9, node21);
        com.google.javascript.rhino.head.Node node66 = com.google.javascript.rhino.head.Node.newNumber((double) 13);
        com.google.javascript.rhino.head.Node node67 = new com.google.javascript.rhino.head.Node(12, node3, node64, node66);
        com.google.javascript.rhino.head.Node node68 = new com.google.javascript.rhino.head.Node(16, node67);
        // The following exception was thrown during execution in test generation
        try {
            double double69 = node68.getDouble();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: com.google.javascript.rhino.head.Node cannot be cast to com.google.javascript.rhino.head.ast.NumberLiteral");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "40" + "'", str13, "40");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "40" + "'", str27, "40");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "40" + "'", str42, "40");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "40" + "'", str52, "40");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertNotNull(node66);
    }

    @Test
    public void test1508() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1508");
        com.google.javascript.rhino.head.Node node3 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str4 = node3.toString();
        boolean boolean5 = node3.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node7 = com.google.javascript.rhino.head.Node.newString("");
        node7.removeProp(23);
        node3.addChildToFront(node7);
        com.google.javascript.rhino.head.Node node12 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean13 = node12.hasChildren();
        node3.addChildrenToFront(node12);
        com.google.javascript.rhino.head.Node node16 = new com.google.javascript.rhino.head.Node((int) (byte) -1);
        java.lang.String str17 = node16.toString();
        boolean boolean18 = node16.hasChildren();
        com.google.javascript.rhino.head.Node node20 = new com.google.javascript.rhino.head.Node((int) (short) -1, node12, node16, (int) (short) 10);
        com.google.javascript.rhino.head.Node node21 = node20.getLastChild();
        com.google.javascript.rhino.head.Node node26 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str27 = node26.toString();
        boolean boolean28 = node26.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node30 = com.google.javascript.rhino.head.Node.newString("");
        node30.removeProp(23);
        node26.addChildToFront(node30);
        com.google.javascript.rhino.head.Node node34 = new com.google.javascript.rhino.head.Node((int) 'a', node26);
        com.google.javascript.rhino.head.Node node36 = com.google.javascript.rhino.head.Node.newString("-1");
        com.google.javascript.rhino.head.Node node38 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str39 = node38.toString();
        com.google.javascript.rhino.head.Node node40 = node38.getLastChild();
        com.google.javascript.rhino.head.Node node42 = new com.google.javascript.rhino.head.Node((int) (short) -1, node26, node36, node38, (int) (short) -1);
        com.google.javascript.rhino.head.Node node44 = new com.google.javascript.rhino.head.Node((int) (short) 1, node38, 12);
        com.google.javascript.rhino.head.Node node46 = new com.google.javascript.rhino.head.Node(23);
        node46.removeProp(25);
        boolean boolean49 = node46.hasChildren();
        com.google.javascript.rhino.head.Node node50 = new com.google.javascript.rhino.head.Node((-1), node21, node38, node46);
        int int51 = node38.getLineno();
        // The following exception was thrown during execution in test generation
        try {
            node38.setString("0");
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: com.google.javascript.rhino.head.ast.NumberLiteral cannot be cast to com.google.javascript.rhino.head.ast.Name");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "40" + "'", str4, "40");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "-1" + "'", str17, "-1");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "40" + "'", str27, "40");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "40" + "'", str39, "40");
        org.junit.Assert.assertNull(node40);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
    }

    @Test
    public void test1509() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1509");
        com.google.javascript.rhino.head.Node node2 = new com.google.javascript.rhino.head.Node(24, 0);
        com.google.javascript.rhino.head.ast.Comment comment3 = null;
        node2.setJsDocNode(comment3);
        com.google.javascript.rhino.head.ast.Scope scope5 = null;
        // The following exception was thrown during execution in test generation
        try {
            node2.setScope(scope5);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1510() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1510");
        com.google.javascript.rhino.head.Node node2 = new com.google.javascript.rhino.head.Node(12, 25);
        com.google.javascript.rhino.head.Node node5 = new com.google.javascript.rhino.head.Node(12, 25);
        boolean boolean6 = node5.hasChildren();
        com.google.javascript.rhino.head.Node node9 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str10 = node9.toString();
        boolean boolean11 = node9.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node13 = com.google.javascript.rhino.head.Node.newString("");
        node13.removeProp(23);
        node9.addChildToFront(node13);
        com.google.javascript.rhino.head.Node node18 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean19 = node18.hasChildren();
        node9.addChildrenToFront(node18);
        int int21 = node18.getLineno();
        com.google.javascript.rhino.head.Node node23 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str24 = node23.toString();
        boolean boolean25 = node23.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node27 = com.google.javascript.rhino.head.Node.newString("");
        node27.removeProp(23);
        node23.addChildToFront(node27);
        com.google.javascript.rhino.head.Node node31 = node23.getFirstChild();
        com.google.javascript.rhino.head.Node node33 = new com.google.javascript.rhino.head.Node((int) (short) 0, node18, node23, 9);
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator34 = node23.new NodeIterator();
        com.google.javascript.rhino.head.Node node38 = com.google.javascript.rhino.head.Node.newString(23, "");
        com.google.javascript.rhino.head.Node node39 = node38.getLastSibling();
        int int40 = node38.getLineno();
        java.util.Spliterator<com.google.javascript.rhino.head.Node> nodeSpliterator41 = node38.spliterator();
        node23.putProp((int) '4', (java.lang.Object) node38);
        com.google.javascript.rhino.head.Node node45 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        java.lang.String str46 = node45.toString();
        int int47 = node45.getLineno();
        com.google.javascript.rhino.head.Node node49 = com.google.javascript.rhino.head.Node.newNumber((double) 0);
        com.google.javascript.rhino.head.ast.Comment comment50 = node49.getJsDocNode();
        com.google.javascript.rhino.head.Node node52 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        com.google.javascript.rhino.head.Node node54 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str55 = node54.toString();
        boolean boolean56 = node54.hasConsistentReturnUsage();
        boolean boolean57 = node54.hasSideEffects();
        node52.addChildrenToFront(node54);
        com.google.javascript.rhino.head.Node node59 = new com.google.javascript.rhino.head.Node(8, node45, node49, node52);
        com.google.javascript.rhino.head.ast.Comment comment60 = null;
        node52.setJsDocNode(comment60);
        node5.addChildBefore(node23, (com.google.javascript.rhino.head.Node) comment60);
        com.google.javascript.rhino.head.Node node64 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        com.google.javascript.rhino.head.Node node66 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str67 = node66.toString();
        boolean boolean68 = node66.hasConsistentReturnUsage();
        boolean boolean69 = node66.hasSideEffects();
        node64.addChildrenToFront(node66);
        node66.removeChildren();
        com.google.javascript.rhino.head.Node node73 = com.google.javascript.rhino.head.Node.newString("hi!");
        node66.addChildrenToBack(node73);
        com.google.javascript.rhino.head.Node node75 = node66.getFirstChild();
        java.lang.String str76 = node75.getJsDoc();
        int int79 = node75.getIntProp(12, 8);
        int int80 = node75.getLineno();
        node2.addChildAfter(node5, node75);
        com.google.javascript.rhino.head.Node node82 = node75.getNext();
        // The following exception was thrown during execution in test generation
        try {
            node75.labelId((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "40" + "'", str10, "40");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "40" + "'", str24, "40");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertNotNull(nodeSpliterator41);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "100" + "'", str46, "100");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNull(comment50);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "40" + "'", str55, "40");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "40" + "'", str67, "40");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertNull(str76);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 8 + "'", int79 == 8);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + (-1) + "'", int80 == (-1));
        org.junit.Assert.assertNotNull(node82);
    }

    @Test
    public void test1511() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1511");
        com.google.javascript.rhino.head.Node node1 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str2 = node1.toString();
        boolean boolean3 = node1.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node5 = com.google.javascript.rhino.head.Node.newString("");
        node5.removeProp(23);
        node1.addChildToFront(node5);
        com.google.javascript.rhino.head.Node node10 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean11 = node10.hasChildren();
        node1.addChildrenToFront(node10);
        com.google.javascript.rhino.head.Node node16 = com.google.javascript.rhino.head.Node.newString(23, "");
        com.google.javascript.rhino.head.Node node17 = node16.getLastSibling();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator18 = node17.new NodeIterator();
        node17.setLineno(13);
        boolean boolean21 = node17.hasSideEffects();
        com.google.javascript.rhino.head.Node node25 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str26 = node25.toString();
        boolean boolean27 = node25.hasConsistentReturnUsage();
        boolean boolean28 = node25.hasSideEffects();
        com.google.javascript.rhino.head.Node node29 = new com.google.javascript.rhino.head.Node(0, node25);
        com.google.javascript.rhino.head.Node node32 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str33 = node32.toString();
        boolean boolean34 = node32.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node36 = com.google.javascript.rhino.head.Node.newString("");
        node36.removeProp(23);
        node32.addChildToFront(node36);
        com.google.javascript.rhino.head.Node node41 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean42 = node41.hasChildren();
        node32.addChildrenToFront(node41);
        com.google.javascript.rhino.head.Node node45 = new com.google.javascript.rhino.head.Node((int) (byte) -1);
        java.lang.String str46 = node45.toString();
        boolean boolean47 = node45.hasChildren();
        com.google.javascript.rhino.head.Node node49 = new com.google.javascript.rhino.head.Node((int) (short) -1, node41, node45, (int) (short) 10);
        com.google.javascript.rhino.head.Node node52 = com.google.javascript.rhino.head.Node.newString(23, "");
        com.google.javascript.rhino.head.Node node54 = new com.google.javascript.rhino.head.Node((int) (byte) 10, node25, node45, node52, (int) (short) 0);
        com.google.javascript.rhino.head.Node node56 = node54.setType(16);
        com.google.javascript.rhino.head.Node node60 = com.google.javascript.rhino.head.Node.newString("hi!");
        com.google.javascript.rhino.head.Node node61 = new com.google.javascript.rhino.head.Node(13, node60);
        com.google.javascript.rhino.head.Node node62 = new com.google.javascript.rhino.head.Node(7, node60);
        com.google.javascript.rhino.head.Node node64 = new com.google.javascript.rhino.head.Node(97, node17, node56, node60, 8);
        // The following exception was thrown during execution in test generation
        try {
            node1.removeChild(node56);
            org.junit.Assert.fail("Expected exception of type java.lang.RuntimeException; message: node is not a child");
        } catch (java.lang.RuntimeException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "40" + "'", str2, "40");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "40" + "'", str26, "40");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "40" + "'", str33, "40");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "-1" + "'", str46, "-1");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertNotNull(node60);
    }

    @Test
    public void test1512() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1512");
        com.google.javascript.rhino.head.Node node4 = new com.google.javascript.rhino.head.Node(25, 26);
        com.google.javascript.rhino.head.ast.Comment comment5 = node4.getJsDocNode();
        com.google.javascript.rhino.head.Node node7 = new com.google.javascript.rhino.head.Node(7, node4, 25);
        com.google.javascript.rhino.head.Node node10 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean11 = node10.hasChildren();
        com.google.javascript.rhino.head.Node node12 = node10.getLastSibling();
        node4.putProp((int) '#', (java.lang.Object) node10);
        com.google.javascript.rhino.head.Node node14 = new com.google.javascript.rhino.head.Node(22, node10);
        org.junit.Assert.assertNull(comment5);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node12);
    }

    @Test
    public void test1513() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1513");
        com.google.javascript.rhino.head.Node node1 = new com.google.javascript.rhino.head.Node((int) (byte) 1);
        node1.removeProp((int) (short) 10);
        com.google.javascript.rhino.head.Node node4 = node1.getNext();
        // The following exception was thrown during execution in test generation
        try {
            node4.labelId((int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(node4);
    }

    @Test
    public void test1514() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1514");
        com.google.javascript.rhino.head.Node node2 = new com.google.javascript.rhino.head.Node((int) '4', 7);
        com.google.javascript.rhino.head.Node node4 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str5 = node4.toString();
        com.google.javascript.rhino.head.ast.Comment comment6 = null;
        node4.setJsDocNode(comment6);
        com.google.javascript.rhino.head.ast.Comment comment8 = null;
        node4.setJsDocNode(comment8);
        com.google.javascript.rhino.head.Node node10 = node2.getChildBefore((com.google.javascript.rhino.head.Node) comment8);
        com.google.javascript.rhino.head.Node node13 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str14 = node13.toString();
        com.google.javascript.rhino.head.Node node15 = node13.getLastSibling();
        com.google.javascript.rhino.head.Node node18 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str19 = node18.toString();
        boolean boolean20 = node18.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node22 = com.google.javascript.rhino.head.Node.newString("");
        node22.removeProp(23);
        node18.addChildToFront(node22);
        com.google.javascript.rhino.head.Node node26 = node18.getFirstChild();
        node26.setString("100");
        com.google.javascript.rhino.head.ast.Scope scope29 = node26.getScope();
        com.google.javascript.rhino.head.Node node31 = new com.google.javascript.rhino.head.Node((int) ' ', node26, 2);
        com.google.javascript.rhino.head.Node node32 = node26.getLastSibling();
        node15.addChildToFront(node32);
        node2.putProp(25, (java.lang.Object) node32);
        int int37 = node32.getIntProp(2, 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "40" + "'", str5, "40");
        org.junit.Assert.assertNull(node10);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "40" + "'", str14, "40");
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "40" + "'", str19, "40");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNull(scope29);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
    }

    @Test
    public void test1515() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1515");
        com.google.javascript.rhino.head.Node node1 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str2 = node1.toString();
        boolean boolean3 = node1.hasConsistentReturnUsage();
        boolean boolean4 = node1.hasSideEffects();
        com.google.javascript.rhino.head.Node node6 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str7 = node6.toString();
        boolean boolean8 = node6.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node10 = com.google.javascript.rhino.head.Node.newString("");
        node10.removeProp(23);
        node6.addChildToFront(node10);
        com.google.javascript.rhino.head.Node node14 = node6.getFirstChild();
        com.google.javascript.rhino.head.ast.Comment comment15 = node6.getJsDocNode();
        node1.addChildToBack(node6);
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor17 = node1.iterator();
        com.google.javascript.rhino.head.ast.Comment comment18 = node1.getJsDocNode();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator19 = node1.new NodeIterator();
        java.lang.String str20 = node1.getJsDoc();
        com.google.javascript.rhino.head.Node node21 = node1.getNext();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Spliterator<com.google.javascript.rhino.head.Node> nodeSpliterator22 = node21.spliterator();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "40" + "'", str2, "40");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "40" + "'", str7, "40");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNull(comment15);
        org.junit.Assert.assertNotNull(nodeItor17);
        org.junit.Assert.assertNull(comment18);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNull(node21);
    }

    @Test
    public void test1516() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1516");
        com.google.javascript.rhino.head.Node node2 = com.google.javascript.rhino.head.Node.newString(23, "");
        java.lang.String str3 = node2.getJsDoc();
        java.lang.String str4 = node2.getJsDoc();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str4);
    }

    @Test
    public void test1517() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1517");
        com.google.javascript.rhino.head.Node node2 = new com.google.javascript.rhino.head.Node((int) (byte) -1);
        java.lang.String str3 = node2.toString();
        boolean boolean4 = node2.hasChildren();
        com.google.javascript.rhino.head.Node node8 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str9 = node8.toString();
        boolean boolean10 = node8.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node12 = com.google.javascript.rhino.head.Node.newString("");
        node12.removeProp(23);
        node8.addChildToFront(node12);
        com.google.javascript.rhino.head.Node node16 = node8.getFirstChild();
        node16.setString("100");
        com.google.javascript.rhino.head.ast.Scope scope19 = node16.getScope();
        com.google.javascript.rhino.head.Node node21 = new com.google.javascript.rhino.head.Node((int) ' ', node16, 2);
        com.google.javascript.rhino.head.Node node22 = node16.getLastSibling();
        com.google.javascript.rhino.head.Node node25 = com.google.javascript.rhino.head.Node.newString(23, "");
        com.google.javascript.rhino.head.Node node26 = node25.getLastSibling();
        com.google.javascript.rhino.head.Node node27 = new com.google.javascript.rhino.head.Node((int) ' ', node22, node25);
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor28 = node25.iterator();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator29 = node25.new NodeIterator();
        node2.addChildrenToBack(node25);
        com.google.javascript.rhino.head.Node node31 = new com.google.javascript.rhino.head.Node(26, node2);
        com.google.javascript.rhino.head.ast.Scope scope32 = null;
        // The following exception was thrown during execution in test generation
        try {
            node31.setScope(scope32);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "-1" + "'", str3, "-1");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "40" + "'", str9, "40");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNull(scope19);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(nodeItor28);
    }

    @Test
    public void test1518() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1518");
        com.google.javascript.rhino.head.Node node3 = new com.google.javascript.rhino.head.Node(23, (int) (short) -1);
        com.google.javascript.rhino.head.Node node6 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str7 = node6.toString();
        boolean boolean8 = node6.hasConsistentReturnUsage();
        boolean boolean9 = node6.hasSideEffects();
        com.google.javascript.rhino.head.Node node10 = new com.google.javascript.rhino.head.Node(0, node6);
        com.google.javascript.rhino.head.Node node11 = node10.getLastChild();
        node10.removeChildren();
        com.google.javascript.rhino.head.Node node14 = new com.google.javascript.rhino.head.Node(19, node3, node10, 24);
        com.google.javascript.rhino.head.Node node15 = node3.getLastSibling();
        // The following exception was thrown during execution in test generation
        try {
            node15.labelId(32);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "40" + "'", str7, "40");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node15);
    }

    @Test
    public void test1519() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1519");
        com.google.javascript.rhino.head.Node node4 = new com.google.javascript.rhino.head.Node((int) (byte) 1, 8);
        java.lang.String str5 = node4.toString();
        com.google.javascript.rhino.head.Node node6 = node4.getLastChild();
        com.google.javascript.rhino.head.Node node9 = com.google.javascript.rhino.head.Node.newString(23, "");
        com.google.javascript.rhino.head.Node node10 = node9.getLastSibling();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator11 = node10.new NodeIterator();
        node10.setLineno(13);
        java.util.Spliterator<com.google.javascript.rhino.head.Node> nodeSpliterator14 = node10.spliterator();
        java.lang.String str15 = node10.toString();
        node4.addChildrenToBack(node10);
        com.google.javascript.rhino.head.Node node17 = new com.google.javascript.rhino.head.Node(13, node4);
        com.google.javascript.rhino.head.Node node18 = new com.google.javascript.rhino.head.Node(6, node4);
        // The following exception was thrown during execution in test generation
        try {
            int int20 = node18.getExistingIntProp(97);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "1" + "'", str5, "1");
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(nodeSpliterator14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "23" + "'", str15, "23");
    }

    @Test
    public void test1520() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1520");
        com.google.javascript.rhino.head.Node node1 = new com.google.javascript.rhino.head.Node((-1));
        com.google.javascript.rhino.head.Node node3 = node1.setType(12);
        // The following exception was thrown during execution in test generation
        try {
            node1.setDouble((double) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: com.google.javascript.rhino.head.Node cannot be cast to com.google.javascript.rhino.head.ast.NumberLiteral");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
    }

    @Test
    public void test1521() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1521");
        com.google.javascript.rhino.head.Node node1 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str2 = node1.toString();
        boolean boolean3 = node1.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node5 = com.google.javascript.rhino.head.Node.newString("");
        node5.removeProp(23);
        node1.addChildToFront(node5);
        com.google.javascript.rhino.head.Node node9 = node5.getLastChild();
        com.google.javascript.rhino.head.Node node11 = com.google.javascript.rhino.head.Node.newString("1");
        node5.addChildrenToBack(node11);
        int int13 = node11.getLineno();
        node11.removeProp(16);
        com.google.javascript.rhino.head.Node node17 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str18 = node17.toString();
        boolean boolean19 = node17.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.ast.Comment comment20 = null;
        node17.setJsDocNode(comment20);
        com.google.javascript.rhino.head.Node node24 = com.google.javascript.rhino.head.Node.newString("");
        node24.removeProp(23);
        com.google.javascript.rhino.head.Node node29 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str30 = node29.toString();
        boolean boolean31 = node29.hasConsistentReturnUsage();
        boolean boolean32 = node29.hasSideEffects();
        com.google.javascript.rhino.head.Node node33 = new com.google.javascript.rhino.head.Node(0, node29);
        node24.addChildrenToBack(node33);
        com.google.javascript.rhino.head.Node node35 = new com.google.javascript.rhino.head.Node(9, node24);
        node17.addChildrenToFront(node35);
        com.google.javascript.rhino.head.Node node38 = node17.setType(18);
        node17.removeChildren();
        com.google.javascript.rhino.head.Node node43 = com.google.javascript.rhino.head.Node.newString("hi!");
        com.google.javascript.rhino.head.Node node44 = new com.google.javascript.rhino.head.Node(13, node43);
        com.google.javascript.rhino.head.Node node45 = new com.google.javascript.rhino.head.Node(7, node43);
        com.google.javascript.rhino.head.Node node47 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        node45.addChildToFront(node47);
        com.google.javascript.rhino.head.Node node49 = node45.getLastSibling();
        node11.addChildAfter(node17, node45);
        // The following exception was thrown during execution in test generation
        try {
            node17.resetTargets();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "40" + "'", str2, "40");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "40" + "'", str18, "40");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "40" + "'", str30, "40");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node49);
    }

    @Test
    public void test1522() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1522");
        com.google.javascript.rhino.head.Node node4 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str5 = node4.toString();
        boolean boolean6 = node4.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node8 = com.google.javascript.rhino.head.Node.newString("");
        node8.removeProp(23);
        node4.addChildToFront(node8);
        com.google.javascript.rhino.head.Node node12 = node4.getFirstChild();
        node12.setString("100");
        com.google.javascript.rhino.head.ast.Scope scope15 = node12.getScope();
        com.google.javascript.rhino.head.Node node17 = new com.google.javascript.rhino.head.Node((int) ' ', node12, 2);
        com.google.javascript.rhino.head.Node node20 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        com.google.javascript.rhino.head.Node node22 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str23 = node22.toString();
        boolean boolean24 = node22.hasConsistentReturnUsage();
        boolean boolean25 = node22.hasSideEffects();
        node20.addChildrenToFront(node22);
        node22.removeChildren();
        com.google.javascript.rhino.head.Node node29 = com.google.javascript.rhino.head.Node.newString("hi!");
        node22.addChildrenToBack(node29);
        int int33 = node29.getIntProp(0, 22);
        node12.putProp(15, (java.lang.Object) 22);
        com.google.javascript.rhino.head.Node node36 = new com.google.javascript.rhino.head.Node((int) (short) -1, node12, 2);
        com.google.javascript.rhino.head.Node node37 = new com.google.javascript.rhino.head.Node(1, node36);
        com.google.javascript.rhino.head.ast.Scope scope38 = null;
        // The following exception was thrown during execution in test generation
        try {
            node36.setScope(scope38);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "40" + "'", str5, "40");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNull(scope15);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "40" + "'", str23, "40");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 22 + "'", int33 == 22);
    }

    @Test
    public void test1523() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1523");
        com.google.javascript.rhino.head.Node node5 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str6 = node5.toString();
        boolean boolean7 = node5.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node9 = com.google.javascript.rhino.head.Node.newString("");
        node9.removeProp(23);
        node5.addChildToFront(node9);
        com.google.javascript.rhino.head.Node node13 = new com.google.javascript.rhino.head.Node((int) 'a', node5);
        com.google.javascript.rhino.head.Node node15 = com.google.javascript.rhino.head.Node.newString("-1");
        com.google.javascript.rhino.head.Node node17 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str18 = node17.toString();
        com.google.javascript.rhino.head.Node node19 = node17.getLastChild();
        com.google.javascript.rhino.head.Node node21 = new com.google.javascript.rhino.head.Node((int) (short) -1, node5, node15, node17, (int) (short) -1);
        com.google.javascript.rhino.head.Node node23 = com.google.javascript.rhino.head.Node.newString("23");
        com.google.javascript.rhino.head.Node node24 = new com.google.javascript.rhino.head.Node(26, node21, node23);
        com.google.javascript.rhino.head.Node node28 = com.google.javascript.rhino.head.Node.newString("hi!");
        com.google.javascript.rhino.head.Node node29 = new com.google.javascript.rhino.head.Node(13, node28);
        com.google.javascript.rhino.head.Node node30 = new com.google.javascript.rhino.head.Node(7, node28);
        com.google.javascript.rhino.head.Node node31 = new com.google.javascript.rhino.head.Node((int) (byte) 1, node24, node28);
        com.google.javascript.rhino.head.ast.Comment comment32 = null;
        node31.setJsDocNode(comment32);
        com.google.javascript.rhino.head.Node node34 = null;
        com.google.javascript.rhino.head.Node node38 = com.google.javascript.rhino.head.Node.newString("hi!");
        com.google.javascript.rhino.head.Node node39 = new com.google.javascript.rhino.head.Node(13, node38);
        com.google.javascript.rhino.head.Node node42 = new com.google.javascript.rhino.head.Node(12);
        node42.putIntProp(14, 3);
        com.google.javascript.rhino.head.Node node46 = new com.google.javascript.rhino.head.Node(6, node42);
        com.google.javascript.rhino.head.Node node47 = node46.getLastChild();
        com.google.javascript.rhino.head.Node node49 = new com.google.javascript.rhino.head.Node((int) (byte) 100, node38, node46, 0);
        com.google.javascript.rhino.head.ast.Comment comment50 = node38.getJsDocNode();
        // The following exception was thrown during execution in test generation
        try {
            node31.addChildBefore(node34, node38);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "40" + "'", str6, "40");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "40" + "'", str18, "40");
        org.junit.Assert.assertNull(node19);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNull(comment50);
    }

    @Test
    public void test1524() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1524");
        com.google.javascript.rhino.head.Node node1 = com.google.javascript.rhino.head.Node.newString("");
        int int4 = node1.getIntProp(17, (int) (byte) -1);
        com.google.javascript.rhino.head.Node node7 = new com.google.javascript.rhino.head.Node(40, 8);
        com.google.javascript.rhino.head.Node node10 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str11 = node10.toString();
        boolean boolean12 = node10.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node14 = com.google.javascript.rhino.head.Node.newString("");
        node14.removeProp(23);
        node10.addChildToFront(node14);
        com.google.javascript.rhino.head.Node node18 = node10.getFirstChild();
        com.google.javascript.rhino.head.Node node20 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        node18.addChildrenToBack(node20);
        com.google.javascript.rhino.head.Node node23 = com.google.javascript.rhino.head.Node.newString("");
        int int26 = node23.getIntProp(17, (int) (byte) -1);
        com.google.javascript.rhino.head.Node node27 = new com.google.javascript.rhino.head.Node((int) (short) 10, node18, node23);
        com.google.javascript.rhino.head.Node node29 = node18.setType(18);
        node1.addChildAfter(node7, node29);
        com.google.javascript.rhino.head.Node node32 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean33 = node32.hasSideEffects();
        node7.addChildrenToFront(node32);
        java.lang.String str35 = node32.toString();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "40" + "'", str11, "40");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "40" + "'", str35, "40");
    }

    @Test
    public void test1525() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1525");
        com.google.javascript.rhino.head.Node node3 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str4 = node3.toString();
        boolean boolean5 = node3.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node7 = com.google.javascript.rhino.head.Node.newString("");
        node7.removeProp(23);
        node3.addChildToFront(node7);
        com.google.javascript.rhino.head.Node node12 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean13 = node12.hasChildren();
        node3.addChildrenToFront(node12);
        com.google.javascript.rhino.head.Node node16 = new com.google.javascript.rhino.head.Node((int) (byte) -1);
        java.lang.String str17 = node16.toString();
        boolean boolean18 = node16.hasChildren();
        com.google.javascript.rhino.head.Node node20 = new com.google.javascript.rhino.head.Node((int) (short) -1, node12, node16, (int) (short) 10);
        node20.removeProp(24);
        java.lang.String str23 = node20.getJsDoc();
        com.google.javascript.rhino.head.Node node24 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.head.Node node26 = new com.google.javascript.rhino.head.Node(19, node20, node24, 7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "40" + "'", str4, "40");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "-1" + "'", str17, "-1");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(str23);
    }

    @Test
    public void test1526() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1526");
        com.google.javascript.rhino.head.Node node3 = new com.google.javascript.rhino.head.Node((int) '#', (int) (short) 10);
        boolean boolean4 = node3.hasChildren();
        java.util.Spliterator<com.google.javascript.rhino.head.Node> nodeSpliterator5 = node3.spliterator();
        java.lang.String str6 = node3.toString();
        com.google.javascript.rhino.head.Node node8 = com.google.javascript.rhino.head.Node.newString("");
        node8.removeProp(23);
        node8.setLineno((int) '4');
        java.lang.Object obj14 = node8.getProp(3);
        com.google.javascript.rhino.head.Node node15 = node8.getLastChild();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.head.Node node16 = new com.google.javascript.rhino.head.Node(0, node3, node15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(nodeSpliterator5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "35" + "'", str6, "35");
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertNull(node15);
    }

    @Test
    public void test1527() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1527");
        com.google.javascript.rhino.head.Node node1 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str2 = node1.toString();
        boolean boolean3 = node1.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node5 = com.google.javascript.rhino.head.Node.newString("");
        node5.removeProp(23);
        node1.addChildToFront(node5);
        com.google.javascript.rhino.head.Node node9 = node1.getFirstChild();
        com.google.javascript.rhino.head.ast.Comment comment10 = node1.getJsDocNode();
        int int11 = node1.getType();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator12 = node1.new NodeIterator();
        com.google.javascript.rhino.head.Node node13 = null;
        com.google.javascript.rhino.head.Node node14 = node1.getChildBefore(node13);
        com.google.javascript.rhino.head.Node node15 = null;
        com.google.javascript.rhino.head.Node node18 = com.google.javascript.rhino.head.Node.newString("hi!");
        com.google.javascript.rhino.head.Node node21 = com.google.javascript.rhino.head.Node.newString(23, "");
        com.google.javascript.rhino.head.Node node22 = new com.google.javascript.rhino.head.Node(0, node18, node21);
        int int23 = node18.getLineno();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator24 = node18.new NodeIterator();
        node18.removeProp(5);
        java.lang.String str27 = node18.getJsDoc();
        // The following exception was thrown during execution in test generation
        try {
            node1.addChildAfter(node15, node18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "40" + "'", str2, "40");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNull(comment10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 40 + "'", int11 == 40);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNull(str27);
    }

    @Test
    public void test1528() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1528");
        com.google.javascript.rhino.head.Node node1 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str2 = node1.toString();
        boolean boolean3 = node1.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node5 = com.google.javascript.rhino.head.Node.newString("");
        node5.removeProp(23);
        node1.addChildToFront(node5);
        com.google.javascript.rhino.head.Node node9 = node5.getLastChild();
        com.google.javascript.rhino.head.Node node11 = com.google.javascript.rhino.head.Node.newString("1");
        node5.addChildrenToBack(node11);
        int int13 = node11.getLineno();
        node11.removeProp(16);
        com.google.javascript.rhino.head.Node node17 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str18 = node17.toString();
        boolean boolean19 = node17.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.ast.Comment comment20 = null;
        node17.setJsDocNode(comment20);
        com.google.javascript.rhino.head.Node node24 = com.google.javascript.rhino.head.Node.newString("");
        node24.removeProp(23);
        com.google.javascript.rhino.head.Node node29 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str30 = node29.toString();
        boolean boolean31 = node29.hasConsistentReturnUsage();
        boolean boolean32 = node29.hasSideEffects();
        com.google.javascript.rhino.head.Node node33 = new com.google.javascript.rhino.head.Node(0, node29);
        node24.addChildrenToBack(node33);
        com.google.javascript.rhino.head.Node node35 = new com.google.javascript.rhino.head.Node(9, node24);
        node17.addChildrenToFront(node35);
        com.google.javascript.rhino.head.Node node38 = node17.setType(18);
        node17.removeChildren();
        com.google.javascript.rhino.head.Node node43 = com.google.javascript.rhino.head.Node.newString("hi!");
        com.google.javascript.rhino.head.Node node44 = new com.google.javascript.rhino.head.Node(13, node43);
        com.google.javascript.rhino.head.Node node45 = new com.google.javascript.rhino.head.Node(7, node43);
        com.google.javascript.rhino.head.Node node47 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        node45.addChildToFront(node47);
        com.google.javascript.rhino.head.Node node49 = node45.getLastSibling();
        node11.addChildAfter(node17, node45);
        com.google.javascript.rhino.head.Node node53 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean54 = node53.hasSideEffects();
        com.google.javascript.rhino.head.Node node56 = node53.setType(3);
        node45.putProp((int) 'a', (java.lang.Object) node56);
        // The following exception was thrown during execution in test generation
        try {
            int int59 = node45.getExistingIntProp(0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "40" + "'", str2, "40");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "40" + "'", str18, "40");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "40" + "'", str30, "40");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(node56);
    }

    @Test
    public void test1529() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1529");
        com.google.javascript.rhino.head.Node node2 = new com.google.javascript.rhino.head.Node((-1), 0);
        com.google.javascript.rhino.head.Node node4 = node2.setType((int) (byte) -1);
        com.google.javascript.rhino.head.Node node7 = new com.google.javascript.rhino.head.Node(4, 12);
        node4.addChildToFront(node7);
        // The following exception was thrown during execution in test generation
        try {
            node4.setDouble((double) 17);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: com.google.javascript.rhino.head.Node cannot be cast to com.google.javascript.rhino.head.ast.NumberLiteral");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node4);
    }

    @Test
    public void test1530() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1530");
        com.google.javascript.rhino.head.Node node2 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        com.google.javascript.rhino.head.Node node4 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str5 = node4.toString();
        boolean boolean6 = node4.hasConsistentReturnUsage();
        boolean boolean7 = node4.hasSideEffects();
        node2.addChildrenToFront(node4);
        com.google.javascript.rhino.head.Node node9 = node4.getLastSibling();
        int int10 = node4.getLineno();
        com.google.javascript.rhino.head.Node node12 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str13 = node12.toString();
        boolean boolean14 = node12.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node16 = com.google.javascript.rhino.head.Node.newString("");
        node16.removeProp(23);
        node12.addChildToFront(node16);
        com.google.javascript.rhino.head.Node node21 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean22 = node21.hasChildren();
        node12.addChildrenToFront(node21);
        int int24 = node21.getLineno();
        com.google.javascript.rhino.head.Node node26 = new com.google.javascript.rhino.head.Node((int) (byte) 1);
        node26.removeProp((int) (short) 10);
        com.google.javascript.rhino.head.Node node30 = new com.google.javascript.rhino.head.Node((int) (short) 10, node4, node21, node26, 0);
        java.lang.String str31 = node26.getJsDoc();
        com.google.javascript.rhino.head.Node node33 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str34 = node33.toString();
        boolean boolean35 = node33.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node37 = com.google.javascript.rhino.head.Node.newString("");
        node37.removeProp(23);
        node33.addChildToFront(node37);
        com.google.javascript.rhino.head.Node node42 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean43 = node42.hasChildren();
        node33.addChildrenToFront(node42);
        boolean boolean45 = node42.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node46 = null;
        // The following exception was thrown during execution in test generation
        try {
            node26.addChildBefore(node42, node46);
            org.junit.Assert.fail("Expected exception of type java.lang.RuntimeException; message: newChild had siblings in addChildBefore");
        } catch (java.lang.RuntimeException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "40" + "'", str5, "40");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "40" + "'", str13, "40");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "40" + "'", str34, "40");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
    }

    @Test
    public void test1531() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1531");
        com.google.javascript.rhino.head.Node node3 = com.google.javascript.rhino.head.Node.newString(10, "100");
        com.google.javascript.rhino.head.Node node7 = com.google.javascript.rhino.head.Node.newString("hi!");
        com.google.javascript.rhino.head.Node node8 = new com.google.javascript.rhino.head.Node(13, node7);
        com.google.javascript.rhino.head.Node node9 = new com.google.javascript.rhino.head.Node(7, node7);
        com.google.javascript.rhino.head.Node node11 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        node9.addChildToFront(node11);
        com.google.javascript.rhino.head.Node node15 = new com.google.javascript.rhino.head.Node(12);
        node15.putIntProp(14, 3);
        com.google.javascript.rhino.head.Node node19 = new com.google.javascript.rhino.head.Node(6, node15);
        com.google.javascript.rhino.head.Node node20 = node19.getLastChild();
        node9.addChildToFront(node19);
        node3.addChildToFront(node9);
        com.google.javascript.rhino.head.Node node25 = com.google.javascript.rhino.head.Node.newString((int) '4', "40");
        com.google.javascript.rhino.head.Node node29 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str30 = node29.toString();
        boolean boolean31 = node29.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node33 = com.google.javascript.rhino.head.Node.newString("");
        node33.removeProp(23);
        node29.addChildToFront(node33);
        com.google.javascript.rhino.head.Node node38 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean39 = node38.hasChildren();
        node29.addChildrenToFront(node38);
        com.google.javascript.rhino.head.Node node42 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str43 = node42.toString();
        boolean boolean44 = node42.hasConsistentReturnUsage();
        boolean boolean45 = node42.hasSideEffects();
        com.google.javascript.rhino.head.Node node47 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str48 = node47.toString();
        boolean boolean49 = node47.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node51 = com.google.javascript.rhino.head.Node.newString("");
        node51.removeProp(23);
        node47.addChildToFront(node51);
        com.google.javascript.rhino.head.Node node55 = node47.getFirstChild();
        com.google.javascript.rhino.head.ast.Comment comment56 = node47.getJsDocNode();
        node42.addChildToBack(node47);
        com.google.javascript.rhino.head.Node node58 = new com.google.javascript.rhino.head.Node(15, node29, node42);
        com.google.javascript.rhino.head.Node node61 = com.google.javascript.rhino.head.Node.newString(23, "");
        java.lang.String str62 = node61.toString();
        com.google.javascript.rhino.head.Node node65 = com.google.javascript.rhino.head.Node.newString("hi!");
        com.google.javascript.rhino.head.Node node68 = com.google.javascript.rhino.head.Node.newString(23, "");
        com.google.javascript.rhino.head.Node node69 = new com.google.javascript.rhino.head.Node(0, node65, node68);
        com.google.javascript.rhino.head.Node node70 = new com.google.javascript.rhino.head.Node(24, node29, node61, node69);
        com.google.javascript.rhino.head.Node node71 = node70.getNext();
        com.google.javascript.rhino.head.Node node72 = node25.getChildBefore(node71);
        com.google.javascript.rhino.head.Node node75 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str76 = node75.toString();
        boolean boolean77 = node75.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node79 = com.google.javascript.rhino.head.Node.newString("");
        node79.removeProp(23);
        node75.addChildToFront(node79);
        com.google.javascript.rhino.head.Node node83 = node75.getFirstChild();
        node83.setString("100");
        com.google.javascript.rhino.head.ast.Scope scope86 = node83.getScope();
        com.google.javascript.rhino.head.Node node88 = new com.google.javascript.rhino.head.Node((int) ' ', node83, 2);
        java.util.Spliterator<com.google.javascript.rhino.head.Node> nodeSpliterator89 = node83.spliterator();
        com.google.javascript.rhino.head.Node node91 = new com.google.javascript.rhino.head.Node(23);
        node83.addChildToBack(node91);
        node25.addChildrenToFront(node83);
        com.google.javascript.rhino.head.Node node94 = new com.google.javascript.rhino.head.Node(23, node3, node25);
        com.google.javascript.rhino.head.ast.Comment comment95 = node3.getJsDocNode();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "40" + "'", str30, "40");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "40" + "'", str43, "40");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "40" + "'", str48, "40");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNull(comment56);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "23" + "'", str62, "23");
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertNull(node71);
        org.junit.Assert.assertNull(node72);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "40" + "'", str76, "40");
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertNotNull(node83);
        org.junit.Assert.assertNull(scope86);
        org.junit.Assert.assertNotNull(nodeSpliterator89);
        org.junit.Assert.assertNull(comment95);
    }

    @Test
    public void test1532() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1532");
        com.google.javascript.rhino.head.Node node3 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str4 = node3.toString();
        boolean boolean5 = node3.hasConsistentReturnUsage();
        boolean boolean6 = node3.hasSideEffects();
        com.google.javascript.rhino.head.Node node7 = new com.google.javascript.rhino.head.Node(0, node3);
        com.google.javascript.rhino.head.Node node10 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str11 = node10.toString();
        boolean boolean12 = node10.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node14 = com.google.javascript.rhino.head.Node.newString("");
        node14.removeProp(23);
        node10.addChildToFront(node14);
        com.google.javascript.rhino.head.Node node19 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean20 = node19.hasChildren();
        node10.addChildrenToFront(node19);
        com.google.javascript.rhino.head.Node node23 = new com.google.javascript.rhino.head.Node((int) (byte) -1);
        java.lang.String str24 = node23.toString();
        boolean boolean25 = node23.hasChildren();
        com.google.javascript.rhino.head.Node node27 = new com.google.javascript.rhino.head.Node((int) (short) -1, node19, node23, (int) (short) 10);
        com.google.javascript.rhino.head.Node node30 = com.google.javascript.rhino.head.Node.newString(23, "");
        com.google.javascript.rhino.head.Node node32 = new com.google.javascript.rhino.head.Node((int) (byte) 10, node3, node23, node30, (int) (short) 0);
        com.google.javascript.rhino.head.ast.Comment comment33 = null;
        node32.setJsDocNode(comment33);
        com.google.javascript.rhino.head.Node node35 = node32.getLastChild();
        com.google.javascript.rhino.head.Node node37 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str38 = node37.toString();
        boolean boolean39 = node37.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node41 = com.google.javascript.rhino.head.Node.newString("");
        node41.removeProp(23);
        node37.addChildToFront(node41);
        com.google.javascript.rhino.head.Node node46 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean47 = node46.hasChildren();
        node37.addChildrenToFront(node46);
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator49 = node46.new NodeIterator();
        com.google.javascript.rhino.head.Node node51 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str52 = node51.toString();
        com.google.javascript.rhino.head.Node node53 = node51.getLastSibling();
        com.google.javascript.rhino.head.Node node56 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str57 = node56.toString();
        boolean boolean58 = node56.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node60 = com.google.javascript.rhino.head.Node.newString("");
        node60.removeProp(23);
        node56.addChildToFront(node60);
        com.google.javascript.rhino.head.Node node64 = node56.getFirstChild();
        node64.setString("100");
        com.google.javascript.rhino.head.ast.Scope scope67 = node64.getScope();
        com.google.javascript.rhino.head.Node node69 = new com.google.javascript.rhino.head.Node((int) ' ', node64, 2);
        com.google.javascript.rhino.head.Node node70 = node64.getLastSibling();
        node53.addChildToFront(node70);
        node46.addChildrenToFront(node53);
        node35.addChildToFront(node53);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode74 = null;
        java.lang.String str75 = node35.toStringTree(scriptNode74);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "40" + "'", str4, "40");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "40" + "'", str11, "40");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "-1" + "'", str24, "-1");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "40" + "'", str38, "40");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "40" + "'", str52, "40");
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "40" + "'", str57, "40");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertNull(scope67);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertNull(str75);
    }

    @Test
    public void test1533() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1533");
        com.google.javascript.rhino.head.Node node3 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str4 = node3.toString();
        boolean boolean5 = node3.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node7 = com.google.javascript.rhino.head.Node.newString("");
        node7.removeProp(23);
        node3.addChildToFront(node7);
        com.google.javascript.rhino.head.Node node12 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean13 = node12.hasChildren();
        node3.addChildrenToFront(node12);
        int int15 = node12.getLineno();
        com.google.javascript.rhino.head.Node node17 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str18 = node17.toString();
        boolean boolean19 = node17.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node21 = com.google.javascript.rhino.head.Node.newString("");
        node21.removeProp(23);
        node17.addChildToFront(node21);
        com.google.javascript.rhino.head.Node node25 = node17.getFirstChild();
        com.google.javascript.rhino.head.Node node27 = new com.google.javascript.rhino.head.Node((int) (short) 0, node12, node17, 9);
        boolean boolean28 = node12.hasSideEffects();
        com.google.javascript.rhino.head.Node node30 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        com.google.javascript.rhino.head.Node node32 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str33 = node32.toString();
        boolean boolean34 = node32.hasConsistentReturnUsage();
        boolean boolean35 = node32.hasSideEffects();
        node30.addChildrenToFront(node32);
        node32.removeChildren();
        com.google.javascript.rhino.head.Node node39 = com.google.javascript.rhino.head.Node.newString("hi!");
        node32.addChildrenToBack(node39);
        com.google.javascript.rhino.head.Node node42 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str43 = node42.toString();
        boolean boolean44 = node42.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node46 = com.google.javascript.rhino.head.Node.newString("");
        node46.removeProp(23);
        node42.addChildToFront(node46);
        com.google.javascript.rhino.head.Node node50 = node42.getFirstChild();
        com.google.javascript.rhino.head.Node node52 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        node50.addChildrenToBack(node52);
        com.google.javascript.rhino.head.Node node54 = new com.google.javascript.rhino.head.Node((int) (byte) 1, node12, node32, node52);
        com.google.javascript.rhino.head.ast.Comment comment55 = null;
        node12.setJsDocNode(comment55);
        com.google.javascript.rhino.head.Node node58 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        com.google.javascript.rhino.head.Node node59 = node58.getLastSibling();
        com.google.javascript.rhino.head.ast.Comment comment60 = null;
        node59.setJsDocNode(comment60);
        node12.addChildToFront(node59);
        double double63 = node59.getDouble();
        com.google.javascript.rhino.head.Node node64 = node59.getNext();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "40" + "'", str4, "40");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "40" + "'", str18, "40");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "40" + "'", str33, "40");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "40" + "'", str43, "40");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 32.0d + "'", double63 == 32.0d);
        org.junit.Assert.assertNull(node64);
    }

    @Test
    public void test1534() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1534");
        com.google.javascript.rhino.head.Node node5 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str6 = node5.toString();
        boolean boolean7 = node5.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node9 = com.google.javascript.rhino.head.Node.newString("");
        node9.removeProp(23);
        node5.addChildToFront(node9);
        com.google.javascript.rhino.head.Node node13 = new com.google.javascript.rhino.head.Node((int) 'a', node5);
        com.google.javascript.rhino.head.Node node15 = com.google.javascript.rhino.head.Node.newString("-1");
        com.google.javascript.rhino.head.Node node17 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str18 = node17.toString();
        com.google.javascript.rhino.head.Node node19 = node17.getLastChild();
        com.google.javascript.rhino.head.Node node21 = new com.google.javascript.rhino.head.Node((int) (short) -1, node5, node15, node17, (int) (short) -1);
        com.google.javascript.rhino.head.Node node23 = new com.google.javascript.rhino.head.Node((int) (short) 1, node17, 12);
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator24 = node23.new NodeIterator();
        int int25 = node23.getLineno();
        com.google.javascript.rhino.head.Node node29 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str30 = node29.toString();
        boolean boolean31 = node29.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node33 = com.google.javascript.rhino.head.Node.newString("");
        node33.removeProp(23);
        node29.addChildToFront(node33);
        com.google.javascript.rhino.head.Node node38 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean39 = node38.hasChildren();
        node29.addChildrenToFront(node38);
        com.google.javascript.rhino.head.Node node42 = new com.google.javascript.rhino.head.Node((int) (byte) -1);
        java.lang.String str43 = node42.toString();
        boolean boolean44 = node42.hasChildren();
        com.google.javascript.rhino.head.Node node46 = new com.google.javascript.rhino.head.Node((int) (short) -1, node38, node42, (int) (short) 10);
        com.google.javascript.rhino.head.Node node48 = com.google.javascript.rhino.head.Node.newNumber((double) 7);
        com.google.javascript.rhino.head.Node node50 = new com.google.javascript.rhino.head.Node(0, node38, node48, (-1));
        com.google.javascript.rhino.head.Node node51 = node50.getLastSibling();
        com.google.javascript.rhino.head.Node node54 = com.google.javascript.rhino.head.Node.newNumber((double) 1.0f);
        java.lang.Object obj56 = node54.getProp((int) 'a');
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor57 = node54.iterator();
        int int60 = node54.getIntProp((int) (byte) -1, 17);
        com.google.javascript.rhino.head.Node node64 = com.google.javascript.rhino.head.Node.newString("hi!");
        com.google.javascript.rhino.head.Node node65 = new com.google.javascript.rhino.head.Node(13, node64);
        com.google.javascript.rhino.head.Node node66 = new com.google.javascript.rhino.head.Node(7, node64);
        com.google.javascript.rhino.head.Node node68 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        node66.addChildToFront(node68);
        com.google.javascript.rhino.head.Node node72 = new com.google.javascript.rhino.head.Node(12);
        node72.putIntProp(14, 3);
        com.google.javascript.rhino.head.Node node76 = new com.google.javascript.rhino.head.Node(6, node72);
        com.google.javascript.rhino.head.Node node77 = node76.getLastChild();
        node66.addChildToFront(node76);
        node54.addChildToFront(node76);
        com.google.javascript.rhino.head.Node node81 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        com.google.javascript.rhino.head.Node node82 = new com.google.javascript.rhino.head.Node((int) (byte) 10, node54, node81);
        com.google.javascript.rhino.head.Node node83 = new com.google.javascript.rhino.head.Node((int) '4', node23, node50, node82);
        com.google.javascript.rhino.head.Node node84 = node50.getLastChild();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.head.ast.Scope scope85 = node84.getScope();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: com.google.javascript.rhino.head.ast.NumberLiteral cannot be cast to com.google.javascript.rhino.head.ast.Name");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "40" + "'", str6, "40");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "40" + "'", str18, "40");
        org.junit.Assert.assertNull(node19);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 12 + "'", int25 == 12);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "40" + "'", str30, "40");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "-1" + "'", str43, "-1");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNull(obj56);
        org.junit.Assert.assertNotNull(nodeItor57);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 17 + "'", int60 == 17);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertNotNull(node81);
        org.junit.Assert.assertNotNull(node84);
    }

    @Test
    public void test1535() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1535");
        com.google.javascript.rhino.head.Node node3 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str4 = node3.toString();
        boolean boolean5 = node3.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node7 = com.google.javascript.rhino.head.Node.newString("");
        node7.removeProp(23);
        node3.addChildToFront(node7);
        com.google.javascript.rhino.head.Node node11 = node3.getFirstChild();
        node11.setString("100");
        com.google.javascript.rhino.head.ast.Scope scope14 = node11.getScope();
        com.google.javascript.rhino.head.Node node16 = new com.google.javascript.rhino.head.Node((int) ' ', node11, 2);
        com.google.javascript.rhino.head.Node node17 = node11.getLastSibling();
        com.google.javascript.rhino.head.Node node19 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        com.google.javascript.rhino.head.Node node21 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str22 = node21.toString();
        boolean boolean23 = node21.hasConsistentReturnUsage();
        boolean boolean24 = node21.hasSideEffects();
        node19.addChildrenToFront(node21);
        node21.removeChildren();
        com.google.javascript.rhino.head.Node node28 = com.google.javascript.rhino.head.Node.newString("hi!");
        node21.addChildrenToBack(node28);
        node17.addChildToFront(node21);
        com.google.javascript.rhino.head.Node node35 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str36 = node35.toString();
        boolean boolean37 = node35.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node39 = com.google.javascript.rhino.head.Node.newString("");
        node39.removeProp(23);
        node35.addChildToFront(node39);
        com.google.javascript.rhino.head.Node node43 = node35.getFirstChild();
        node43.setString("100");
        com.google.javascript.rhino.head.ast.Scope scope46 = node43.getScope();
        com.google.javascript.rhino.head.Node node48 = new com.google.javascript.rhino.head.Node((int) ' ', node43, 2);
        com.google.javascript.rhino.head.Node node49 = node43.getLastSibling();
        com.google.javascript.rhino.head.Node node52 = com.google.javascript.rhino.head.Node.newString(23, "");
        com.google.javascript.rhino.head.Node node53 = node52.getLastSibling();
        com.google.javascript.rhino.head.Node node54 = new com.google.javascript.rhino.head.Node((int) ' ', node49, node52);
        java.lang.String str55 = node49.getString();
        com.google.javascript.rhino.head.Node node57 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str58 = node57.toString();
        boolean boolean59 = node57.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node61 = com.google.javascript.rhino.head.Node.newString("");
        node61.removeProp(23);
        node57.addChildToFront(node61);
        com.google.javascript.rhino.head.Node node66 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean67 = node66.hasChildren();
        node57.addChildrenToFront(node66);
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator69 = node66.new NodeIterator();
        com.google.javascript.rhino.head.Node node71 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str72 = node71.toString();
        com.google.javascript.rhino.head.Node node73 = node71.getLastSibling();
        com.google.javascript.rhino.head.Node node76 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str77 = node76.toString();
        boolean boolean78 = node76.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node80 = com.google.javascript.rhino.head.Node.newString("");
        node80.removeProp(23);
        node76.addChildToFront(node80);
        com.google.javascript.rhino.head.Node node84 = node76.getFirstChild();
        node84.setString("100");
        com.google.javascript.rhino.head.ast.Scope scope87 = node84.getScope();
        com.google.javascript.rhino.head.Node node89 = new com.google.javascript.rhino.head.Node((int) ' ', node84, 2);
        com.google.javascript.rhino.head.Node node90 = node84.getLastSibling();
        node73.addChildToFront(node90);
        node66.addChildrenToFront(node73);
        com.google.javascript.rhino.head.Node node94 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        java.lang.String str95 = node94.toString();
        com.google.javascript.rhino.head.Node node97 = new com.google.javascript.rhino.head.Node((int) (short) 10, node49, node66, node94, 24);
        node21.addChildrenToFront(node97);
        com.google.javascript.rhino.head.Node node99 = new com.google.javascript.rhino.head.Node((int) (byte) 100, node97);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "40" + "'", str4, "40");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNull(scope14);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "40" + "'", str22, "40");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "40" + "'", str36, "40");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNull(scope46);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "100" + "'", str55, "100");
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "40" + "'", str58, "40");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "40" + "'", str72, "40");
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "40" + "'", str77, "40");
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertNotNull(node80);
        org.junit.Assert.assertNotNull(node84);
        org.junit.Assert.assertNull(scope87);
        org.junit.Assert.assertNotNull(node90);
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "100" + "'", str95, "100");
    }

    @Test
    public void test1536() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1536");
        com.google.javascript.rhino.head.Node node1 = new com.google.javascript.rhino.head.Node(22);
        node1.setLineno((int) ' ');
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.head.ast.Scope scope4 = node1.getScope();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: com.google.javascript.rhino.head.Node cannot be cast to com.google.javascript.rhino.head.ast.Name");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1537() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1537");
        com.google.javascript.rhino.head.Node node4 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str5 = node4.toString();
        boolean boolean6 = node4.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node8 = com.google.javascript.rhino.head.Node.newString("");
        node8.removeProp(23);
        node4.addChildToFront(node8);
        com.google.javascript.rhino.head.Node node12 = node4.getFirstChild();
        node12.setString("100");
        com.google.javascript.rhino.head.ast.Scope scope15 = node12.getScope();
        com.google.javascript.rhino.head.Node node17 = new com.google.javascript.rhino.head.Node((int) ' ', node12, 2);
        boolean boolean18 = node17.hasChildren();
        com.google.javascript.rhino.head.Node node22 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str23 = node22.toString();
        boolean boolean24 = node22.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node26 = com.google.javascript.rhino.head.Node.newString("");
        node26.removeProp(23);
        node22.addChildToFront(node26);
        com.google.javascript.rhino.head.Node node31 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean32 = node31.hasChildren();
        node22.addChildrenToFront(node31);
        int int34 = node31.getLineno();
        com.google.javascript.rhino.head.Node node36 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str37 = node36.toString();
        boolean boolean38 = node36.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node40 = com.google.javascript.rhino.head.Node.newString("");
        node40.removeProp(23);
        node36.addChildToFront(node40);
        com.google.javascript.rhino.head.Node node44 = node36.getFirstChild();
        com.google.javascript.rhino.head.Node node46 = new com.google.javascript.rhino.head.Node((int) (short) 0, node31, node36, 9);
        boolean boolean47 = node31.hasSideEffects();
        com.google.javascript.rhino.head.Node node50 = com.google.javascript.rhino.head.Node.newString(23, "");
        com.google.javascript.rhino.head.Node node51 = node50.getLastSibling();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator52 = node51.new NodeIterator();
        com.google.javascript.rhino.head.Node node54 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str55 = node54.toString();
        boolean boolean56 = node54.hasConsistentReturnUsage();
        boolean boolean57 = node54.hasSideEffects();
        com.google.javascript.rhino.head.Node node59 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str60 = node59.toString();
        boolean boolean61 = node59.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node63 = com.google.javascript.rhino.head.Node.newString("");
        node63.removeProp(23);
        node59.addChildToFront(node63);
        com.google.javascript.rhino.head.Node node67 = node59.getFirstChild();
        com.google.javascript.rhino.head.ast.Comment comment68 = node59.getJsDocNode();
        node54.addChildToBack(node59);
        java.lang.String str70 = node54.toString();
        com.google.javascript.rhino.head.Node node72 = new com.google.javascript.rhino.head.Node(0, node31, node51, node54, 1);
        com.google.javascript.rhino.head.Node node74 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        com.google.javascript.rhino.head.Node node76 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str77 = node76.toString();
        boolean boolean78 = node76.hasConsistentReturnUsage();
        boolean boolean79 = node76.hasSideEffects();
        node74.addChildrenToFront(node76);
        node76.removeChildren();
        com.google.javascript.rhino.head.Node node82 = new com.google.javascript.rhino.head.Node((int) (short) 0, node17, node51, node76);
        com.google.javascript.rhino.head.Node node85 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str86 = node85.toString();
        boolean boolean87 = node85.hasConsistentReturnUsage();
        boolean boolean88 = node85.hasSideEffects();
        com.google.javascript.rhino.head.Node node89 = new com.google.javascript.rhino.head.Node(0, node85);
        com.google.javascript.rhino.head.ast.Comment comment90 = node85.getJsDocNode();
        com.google.javascript.rhino.head.Node node91 = new com.google.javascript.rhino.head.Node(18, node17, node85);
        int int94 = node17.getIntProp(22, 2);
        com.google.javascript.rhino.head.ast.Scope scope95 = null;
        // The following exception was thrown during execution in test generation
        try {
            node17.setScope(scope95);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "40" + "'", str5, "40");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNull(scope15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "40" + "'", str23, "40");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "40" + "'", str37, "40");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "40" + "'", str55, "40");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "40" + "'", str60, "40");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertNull(comment68);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "40" + "'", str70, "40");
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "40" + "'", str77, "40");
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(node85);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "40" + "'", str86, "40");
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNull(comment90);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 2 + "'", int94 == 2);
    }

    @Test
    public void test1538() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1538");
        com.google.javascript.rhino.head.Node node3 = com.google.javascript.rhino.head.Node.newNumber((double) 7);
        node3.putIntProp(0, 18);
        com.google.javascript.rhino.head.Node node7 = new com.google.javascript.rhino.head.Node(0, node3);
        java.lang.String str8 = node7.getJsDoc();
        com.google.javascript.rhino.head.Node node10 = new com.google.javascript.rhino.head.Node(23, node7, 7);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str11 = node7.getString();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: com.google.javascript.rhino.head.Node cannot be cast to com.google.javascript.rhino.head.ast.Name");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNull(str8);
    }

    @Test
    public void test1539() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1539");
        com.google.javascript.rhino.head.Node node2 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        com.google.javascript.rhino.head.Node node4 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str5 = node4.toString();
        boolean boolean6 = node4.hasConsistentReturnUsage();
        boolean boolean7 = node4.hasSideEffects();
        node2.addChildrenToFront(node4);
        node4.removeChildren();
        com.google.javascript.rhino.head.Node node11 = com.google.javascript.rhino.head.Node.newString("hi!");
        node4.addChildrenToBack(node11);
        com.google.javascript.rhino.head.Node node14 = node4.setType((int) (short) -1);
        com.google.javascript.rhino.head.Node node16 = node14.setType(23);
        double double17 = node16.getDouble();
        com.google.javascript.rhino.head.Node node18 = node16.getLastSibling();
        com.google.javascript.rhino.head.Node node19 = new com.google.javascript.rhino.head.Node((int) (byte) 10, node18);
        com.google.javascript.rhino.head.ast.Comment comment20 = node19.getJsDocNode();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "40" + "'", str5, "40");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 32.0d + "'", double17 == 32.0d);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNull(comment20);
    }

    @Test
    public void test1540() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1540");
        com.google.javascript.rhino.head.Node node2 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str3 = node2.toString();
        boolean boolean4 = node2.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node6 = com.google.javascript.rhino.head.Node.newString("");
        node6.removeProp(23);
        node2.addChildToFront(node6);
        com.google.javascript.rhino.head.Node node10 = node2.getFirstChild();
        node10.setString("100");
        com.google.javascript.rhino.head.ast.Scope scope13 = node10.getScope();
        com.google.javascript.rhino.head.Node node15 = new com.google.javascript.rhino.head.Node((int) ' ', node10, 2);
        boolean boolean16 = node15.hasChildren();
        com.google.javascript.rhino.head.Node node19 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str20 = node19.toString();
        boolean boolean21 = node19.hasConsistentReturnUsage();
        boolean boolean22 = node19.hasSideEffects();
        com.google.javascript.rhino.head.Node node23 = new com.google.javascript.rhino.head.Node(0, node19);
        int int24 = node19.getLineno();
        node15.addChildToFront(node19);
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor26 = node19.iterator();
        // The following exception was thrown during execution in test generation
        try {
            int int28 = node19.getExistingIntProp(0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "40" + "'", str3, "40");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNull(scope13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "40" + "'", str20, "40");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertNotNull(nodeItor26);
    }

    @Test
    public void test1541() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1541");
        com.google.javascript.rhino.head.Node node1 = com.google.javascript.rhino.head.Node.newString("");
        int int4 = node1.getIntProp(17, (int) (byte) -1);
        java.lang.String str5 = node1.getJsDoc();
        // The following exception was thrown during execution in test generation
        try {
            int int6 = node1.labelId();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNull(str5);
    }

    @Test
    public void test1542() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1542");
        com.google.javascript.rhino.head.Node node1 = new com.google.javascript.rhino.head.Node((int) (byte) -1);
        java.lang.String str2 = node1.toString();
        com.google.javascript.rhino.head.ast.Comment comment3 = node1.getJsDocNode();
        com.google.javascript.rhino.head.ast.Comment comment4 = node1.getJsDocNode();
        com.google.javascript.rhino.head.Node node6 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str7 = node6.toString();
        boolean boolean8 = node6.hasConsistentReturnUsage();
        node1.addChildToBack(node6);
        java.lang.String str10 = node6.getJsDoc();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str11 = node6.getString();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: com.google.javascript.rhino.head.ast.NumberLiteral cannot be cast to com.google.javascript.rhino.head.ast.Name");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "-1" + "'", str2, "-1");
        org.junit.Assert.assertNull(comment3);
        org.junit.Assert.assertNull(comment4);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "40" + "'", str7, "40");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNull(str10);
    }

    @Test
    public void test1543() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1543");
        com.google.javascript.rhino.head.Node node2 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str3 = node2.toString();
        com.google.javascript.rhino.head.ast.Comment comment4 = null;
        node2.setJsDocNode(comment4);
        com.google.javascript.rhino.head.Node node10 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str11 = node10.toString();
        boolean boolean12 = node10.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node14 = com.google.javascript.rhino.head.Node.newString("");
        node14.removeProp(23);
        node10.addChildToFront(node14);
        com.google.javascript.rhino.head.Node node18 = new com.google.javascript.rhino.head.Node((int) 'a', node10);
        com.google.javascript.rhino.head.Node node20 = com.google.javascript.rhino.head.Node.newString("-1");
        com.google.javascript.rhino.head.Node node22 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str23 = node22.toString();
        com.google.javascript.rhino.head.Node node24 = node22.getLastChild();
        com.google.javascript.rhino.head.Node node26 = new com.google.javascript.rhino.head.Node((int) (short) -1, node10, node20, node22, (int) (short) -1);
        com.google.javascript.rhino.head.Node node28 = com.google.javascript.rhino.head.Node.newString("23");
        com.google.javascript.rhino.head.Node node29 = new com.google.javascript.rhino.head.Node(26, node26, node28);
        com.google.javascript.rhino.head.Node node31 = new com.google.javascript.rhino.head.Node(19, node2, node29, 17);
        com.google.javascript.rhino.head.ast.Scope scope32 = null;
        // The following exception was thrown during execution in test generation
        try {
            node31.setScope(scope32);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "40" + "'", str3, "40");
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "40" + "'", str11, "40");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "40" + "'", str23, "40");
        org.junit.Assert.assertNull(node24);
        org.junit.Assert.assertNotNull(node28);
    }

    @Test
    public void test1544() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1544");
        com.google.javascript.rhino.head.Node node3 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str4 = node3.toString();
        boolean boolean5 = node3.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node7 = com.google.javascript.rhino.head.Node.newString("");
        node7.removeProp(23);
        node3.addChildToFront(node7);
        com.google.javascript.rhino.head.Node node12 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean13 = node12.hasChildren();
        node3.addChildrenToFront(node12);
        int int15 = node12.getLineno();
        com.google.javascript.rhino.head.Node node17 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str18 = node17.toString();
        boolean boolean19 = node17.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node21 = com.google.javascript.rhino.head.Node.newString("");
        node21.removeProp(23);
        node17.addChildToFront(node21);
        com.google.javascript.rhino.head.Node node25 = node17.getFirstChild();
        com.google.javascript.rhino.head.Node node27 = new com.google.javascript.rhino.head.Node((int) (short) 0, node12, node17, 9);
        boolean boolean28 = node12.hasSideEffects();
        com.google.javascript.rhino.head.Node node31 = com.google.javascript.rhino.head.Node.newString(23, "");
        com.google.javascript.rhino.head.Node node32 = node31.getLastSibling();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator33 = node32.new NodeIterator();
        com.google.javascript.rhino.head.Node node35 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str36 = node35.toString();
        boolean boolean37 = node35.hasConsistentReturnUsage();
        boolean boolean38 = node35.hasSideEffects();
        com.google.javascript.rhino.head.Node node40 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str41 = node40.toString();
        boolean boolean42 = node40.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node44 = com.google.javascript.rhino.head.Node.newString("");
        node44.removeProp(23);
        node40.addChildToFront(node44);
        com.google.javascript.rhino.head.Node node48 = node40.getFirstChild();
        com.google.javascript.rhino.head.ast.Comment comment49 = node40.getJsDocNode();
        node35.addChildToBack(node40);
        java.lang.String str51 = node35.toString();
        com.google.javascript.rhino.head.Node node53 = new com.google.javascript.rhino.head.Node(0, node12, node32, node35, 1);
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator54 = node35.new NodeIterator();
        boolean boolean55 = nodeIterator54.hasNext();
        boolean boolean56 = nodeIterator54.hasNext();
        boolean boolean57 = nodeIterator54.hasNext();
        boolean boolean58 = nodeIterator54.hasNext();
        // The following exception was thrown during execution in test generation
        try {
            nodeIterator54.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: next() has not been called");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "40" + "'", str4, "40");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "40" + "'", str18, "40");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "40" + "'", str36, "40");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "40" + "'", str41, "40");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNull(comment49);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "40" + "'", str51, "40");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
    }

    @Test
    public void test1545() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1545");
        com.google.javascript.rhino.head.Node node3 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str4 = node3.toString();
        boolean boolean5 = node3.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node7 = com.google.javascript.rhino.head.Node.newString("");
        node7.removeProp(23);
        node3.addChildToFront(node7);
        com.google.javascript.rhino.head.Node node11 = node3.getFirstChild();
        node11.setString("100");
        com.google.javascript.rhino.head.ast.Scope scope14 = node11.getScope();
        com.google.javascript.rhino.head.Node node16 = new com.google.javascript.rhino.head.Node((int) ' ', node11, 2);
        com.google.javascript.rhino.head.Node node19 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        com.google.javascript.rhino.head.Node node21 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str22 = node21.toString();
        boolean boolean23 = node21.hasConsistentReturnUsage();
        boolean boolean24 = node21.hasSideEffects();
        node19.addChildrenToFront(node21);
        node21.removeChildren();
        com.google.javascript.rhino.head.Node node28 = com.google.javascript.rhino.head.Node.newString("hi!");
        node21.addChildrenToBack(node28);
        int int32 = node28.getIntProp(0, 22);
        node11.putProp(15, (java.lang.Object) 22);
        com.google.javascript.rhino.head.Node node35 = new com.google.javascript.rhino.head.Node((int) (short) -1, node11, 2);
        int int38 = node11.getIntProp(14, 0);
        node11.removeProp(9);
        node11.setLineno(32);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "40" + "'", str4, "40");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNull(scope14);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "40" + "'", str22, "40");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 22 + "'", int32 == 22);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
    }

    @Test
    public void test1546() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1546");
        com.google.javascript.rhino.head.Node node2 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str3 = node2.toString();
        boolean boolean4 = node2.hasConsistentReturnUsage();
        boolean boolean5 = node2.hasSideEffects();
        com.google.javascript.rhino.head.Node node7 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str8 = node7.toString();
        boolean boolean9 = node7.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node11 = com.google.javascript.rhino.head.Node.newString("");
        node11.removeProp(23);
        node7.addChildToFront(node11);
        com.google.javascript.rhino.head.Node node15 = node7.getFirstChild();
        com.google.javascript.rhino.head.ast.Comment comment16 = node7.getJsDocNode();
        node2.addChildToBack(node7);
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor18 = node2.iterator();
        com.google.javascript.rhino.head.ast.Comment comment19 = node2.getJsDocNode();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator20 = node2.new NodeIterator();
        double double21 = node2.getDouble();
        com.google.javascript.rhino.head.Node node27 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str28 = node27.toString();
        boolean boolean29 = node27.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node31 = com.google.javascript.rhino.head.Node.newString("");
        node31.removeProp(23);
        node27.addChildToFront(node31);
        com.google.javascript.rhino.head.Node node35 = node27.getFirstChild();
        node35.setString("100");
        com.google.javascript.rhino.head.ast.Scope scope38 = node35.getScope();
        com.google.javascript.rhino.head.Node node40 = new com.google.javascript.rhino.head.Node((int) ' ', node35, 2);
        com.google.javascript.rhino.head.Node node41 = node35.getLastSibling();
        com.google.javascript.rhino.head.Node node44 = com.google.javascript.rhino.head.Node.newString(23, "");
        com.google.javascript.rhino.head.Node node45 = node44.getLastSibling();
        com.google.javascript.rhino.head.Node node46 = new com.google.javascript.rhino.head.Node((int) ' ', node41, node44);
        java.lang.String str47 = node41.getString();
        com.google.javascript.rhino.head.Node node49 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str50 = node49.toString();
        boolean boolean51 = node49.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node53 = com.google.javascript.rhino.head.Node.newString("");
        node53.removeProp(23);
        node49.addChildToFront(node53);
        com.google.javascript.rhino.head.Node node58 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean59 = node58.hasChildren();
        node49.addChildrenToFront(node58);
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator61 = node58.new NodeIterator();
        com.google.javascript.rhino.head.Node node63 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str64 = node63.toString();
        com.google.javascript.rhino.head.Node node65 = node63.getLastSibling();
        com.google.javascript.rhino.head.Node node68 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str69 = node68.toString();
        boolean boolean70 = node68.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node72 = com.google.javascript.rhino.head.Node.newString("");
        node72.removeProp(23);
        node68.addChildToFront(node72);
        com.google.javascript.rhino.head.Node node76 = node68.getFirstChild();
        node76.setString("100");
        com.google.javascript.rhino.head.ast.Scope scope79 = node76.getScope();
        com.google.javascript.rhino.head.Node node81 = new com.google.javascript.rhino.head.Node((int) ' ', node76, 2);
        com.google.javascript.rhino.head.Node node82 = node76.getLastSibling();
        node65.addChildToFront(node82);
        node58.addChildrenToFront(node65);
        com.google.javascript.rhino.head.Node node86 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        java.lang.String str87 = node86.toString();
        com.google.javascript.rhino.head.Node node89 = new com.google.javascript.rhino.head.Node((int) (short) 10, node41, node58, node86, 24);
        com.google.javascript.rhino.head.Node node91 = new com.google.javascript.rhino.head.Node(0, node41, 17);
        com.google.javascript.rhino.head.Node node93 = new com.google.javascript.rhino.head.Node(21, node2, node41, (int) (short) 1);
        java.lang.String str94 = node93.getJsDoc();
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor95 = node93.iterator();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "40" + "'", str3, "40");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "40" + "'", str8, "40");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNull(comment16);
        org.junit.Assert.assertNotNull(nodeItor18);
        org.junit.Assert.assertNull(comment19);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 32.0d + "'", double21 == 32.0d);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "40" + "'", str28, "40");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNull(scope38);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "100" + "'", str47, "100");
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "40" + "'", str50, "40");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "40" + "'", str64, "40");
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "40" + "'", str69, "40");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertNull(scope79);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "100" + "'", str87, "100");
        org.junit.Assert.assertNull(str94);
        org.junit.Assert.assertNotNull(nodeItor95);
    }

    @Test
    public void test1547() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1547");
        com.google.javascript.rhino.head.Node node2 = com.google.javascript.rhino.head.Node.newString((int) (short) 0, "-1");
        node2.setString("23");
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor5 = node2.iterator();
        com.google.javascript.rhino.head.Node node6 = null;
        com.google.javascript.rhino.head.Node node10 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str11 = node10.toString();
        boolean boolean12 = node10.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node14 = com.google.javascript.rhino.head.Node.newString("");
        node14.removeProp(23);
        node10.addChildToFront(node14);
        com.google.javascript.rhino.head.Node node18 = node10.getFirstChild();
        node18.setString("100");
        com.google.javascript.rhino.head.ast.Scope scope21 = node18.getScope();
        com.google.javascript.rhino.head.Node node23 = new com.google.javascript.rhino.head.Node((int) ' ', node18, 2);
        boolean boolean24 = node23.hasChildren();
        com.google.javascript.rhino.head.Node node27 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str28 = node27.toString();
        boolean boolean29 = node27.hasConsistentReturnUsage();
        boolean boolean30 = node27.hasSideEffects();
        com.google.javascript.rhino.head.Node node31 = new com.google.javascript.rhino.head.Node(0, node27);
        int int32 = node27.getLineno();
        node23.addChildToFront(node27);
        com.google.javascript.rhino.head.Node node35 = com.google.javascript.rhino.head.Node.newString("-1");
        node35.removeProp(25);
        com.google.javascript.rhino.head.Node node39 = new com.google.javascript.rhino.head.Node(7, node27, node35, 1);
        // The following exception was thrown during execution in test generation
        try {
            node2.replaceChild(node6, node35);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(nodeItor5);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "40" + "'", str11, "40");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNull(scope21);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "40" + "'", str28, "40");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertNotNull(node35);
    }

    @Test
    public void test1548() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1548");
        com.google.javascript.rhino.head.Node node1 = com.google.javascript.rhino.head.Node.newString("23");
        java.lang.Object obj3 = node1.getProp(17);
        com.google.javascript.rhino.head.Node node4 = node1.getFirstChild();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str5 = node4.getString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(node4);
    }

    @Test
    public void test1549() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1549");
        com.google.javascript.rhino.head.Node node2 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        com.google.javascript.rhino.head.Node node4 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str5 = node4.toString();
        boolean boolean6 = node4.hasConsistentReturnUsage();
        boolean boolean7 = node4.hasSideEffects();
        node2.addChildrenToFront(node4);
        node4.removeChildren();
        com.google.javascript.rhino.head.Node node11 = com.google.javascript.rhino.head.Node.newString("hi!");
        node4.addChildrenToBack(node11);
        node11.setLineno(22);
        boolean boolean15 = node11.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node17 = com.google.javascript.rhino.head.Node.newString("-1");
        node17.removeProp(25);
        com.google.javascript.rhino.head.Node node21 = com.google.javascript.rhino.head.Node.newString("");
        int int24 = node21.getIntProp(17, (int) (byte) -1);
        com.google.javascript.rhino.head.Node node27 = new com.google.javascript.rhino.head.Node(40, 8);
        com.google.javascript.rhino.head.Node node30 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str31 = node30.toString();
        boolean boolean32 = node30.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node34 = com.google.javascript.rhino.head.Node.newString("");
        node34.removeProp(23);
        node30.addChildToFront(node34);
        com.google.javascript.rhino.head.Node node38 = node30.getFirstChild();
        com.google.javascript.rhino.head.Node node40 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        node38.addChildrenToBack(node40);
        com.google.javascript.rhino.head.Node node43 = com.google.javascript.rhino.head.Node.newString("");
        int int46 = node43.getIntProp(17, (int) (byte) -1);
        com.google.javascript.rhino.head.Node node47 = new com.google.javascript.rhino.head.Node((int) (short) 10, node38, node43);
        com.google.javascript.rhino.head.Node node49 = node38.setType(18);
        node21.addChildAfter(node27, node49);
        node17.addChildToFront(node49);
        com.google.javascript.rhino.head.Node node52 = new com.google.javascript.rhino.head.Node((int) (byte) 100, node11, node49);
        com.google.javascript.rhino.head.Node node56 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str57 = node56.toString();
        boolean boolean58 = node56.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node60 = com.google.javascript.rhino.head.Node.newString("");
        node60.removeProp(23);
        node56.addChildToFront(node60);
        com.google.javascript.rhino.head.Node node64 = node56.getFirstChild();
        node64.setString("100");
        com.google.javascript.rhino.head.ast.Scope scope67 = node64.getScope();
        com.google.javascript.rhino.head.Node node69 = new com.google.javascript.rhino.head.Node((int) ' ', node64, 2);
        boolean boolean70 = node69.hasChildren();
        com.google.javascript.rhino.head.Node node73 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str74 = node73.toString();
        boolean boolean75 = node73.hasConsistentReturnUsage();
        boolean boolean76 = node73.hasSideEffects();
        com.google.javascript.rhino.head.Node node77 = new com.google.javascript.rhino.head.Node(0, node73);
        int int78 = node73.getLineno();
        node69.addChildToFront(node73);
        boolean boolean80 = node73.hasSideEffects();
        boolean boolean81 = node73.hasChildren();
        java.lang.Object obj83 = node73.getProp(0);
        node11.putProp(12, (java.lang.Object) node73);
        node11.removeChildren();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "40" + "'", str5, "40");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "40" + "'", str31, "40");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "40" + "'", str57, "40");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertNull(scope67);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "40" + "'", str74, "40");
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + (-1) + "'", int78 == (-1));
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNull(obj83);
    }

    @Test
    public void test1550() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1550");
        com.google.javascript.rhino.head.Node node2 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str3 = node2.toString();
        boolean boolean4 = node2.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node6 = com.google.javascript.rhino.head.Node.newString("");
        node6.removeProp(23);
        node2.addChildToFront(node6);
        com.google.javascript.rhino.head.Node node10 = node2.getFirstChild();
        node10.setString("100");
        com.google.javascript.rhino.head.ast.Scope scope13 = node10.getScope();
        com.google.javascript.rhino.head.Node node15 = new com.google.javascript.rhino.head.Node((int) ' ', node10, 2);
        com.google.javascript.rhino.head.Node node16 = node10.getLastSibling();
        com.google.javascript.rhino.head.Node node17 = node10.getLastSibling();
        node10.setLineno(40);
        com.google.javascript.rhino.head.ast.Comment comment20 = node10.getJsDocNode();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "40" + "'", str3, "40");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNull(scope13);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNull(comment20);
    }

    @Test
    public void test1551() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1551");
        com.google.javascript.rhino.head.Node node2 = new com.google.javascript.rhino.head.Node(0, (int) (byte) 100);
        // The following exception was thrown during execution in test generation
        try {
            node2.setDouble((double) 41);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: com.google.javascript.rhino.head.Node cannot be cast to com.google.javascript.rhino.head.ast.NumberLiteral");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1552() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1552");
        com.google.javascript.rhino.head.Node node1 = new com.google.javascript.rhino.head.Node((int) (byte) -1);
        java.lang.String str2 = node1.toString();
        com.google.javascript.rhino.head.Node node3 = node1.getFirstChild();
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor4 = node1.iterator();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "-1" + "'", str2, "-1");
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertNotNull(nodeItor4);
    }

    @Test
    public void test1553() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1553");
        com.google.javascript.rhino.head.Node node2 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str3 = node2.toString();
        boolean boolean4 = node2.hasConsistentReturnUsage();
        boolean boolean5 = node2.hasSideEffects();
        com.google.javascript.rhino.head.Node node6 = new com.google.javascript.rhino.head.Node(0, node2);
        int int7 = node2.getLineno();
        node2.removeProp(0);
        com.google.javascript.rhino.head.Node node13 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str14 = node13.toString();
        boolean boolean15 = node13.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node17 = com.google.javascript.rhino.head.Node.newString("");
        node17.removeProp(23);
        node13.addChildToFront(node17);
        com.google.javascript.rhino.head.Node node21 = node13.getFirstChild();
        com.google.javascript.rhino.head.ast.Comment comment22 = node13.getJsDocNode();
        int int23 = node13.getType();
        node13.setDouble((double) 17);
        com.google.javascript.rhino.head.Node node27 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str28 = node27.toString();
        boolean boolean29 = node27.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node31 = com.google.javascript.rhino.head.Node.newString("");
        node31.removeProp(23);
        node27.addChildToFront(node31);
        java.lang.String str35 = node31.getString();
        com.google.javascript.rhino.head.Node node38 = com.google.javascript.rhino.head.Node.newString((int) (short) 0, "-1");
        com.google.javascript.rhino.head.Node node40 = new com.google.javascript.rhino.head.Node(10, node13, node31, node38, 14);
        java.lang.String str41 = node40.getJsDoc();
        com.google.javascript.rhino.head.Node node43 = new com.google.javascript.rhino.head.Node(17, node40, (int) (byte) 0);
        com.google.javascript.rhino.head.Node node44 = node40.getLastChild();
        node2.addChildrenToBack(node40);
        com.google.javascript.rhino.head.Node node46 = node2.getLastSibling();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator47 = node46.new NodeIterator();
        com.google.javascript.rhino.head.Node node48 = nodeIterator47.next();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.head.Node node49 = nodeIterator47.next();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "40" + "'", str3, "40");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "40" + "'", str14, "40");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNull(comment22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 40 + "'", int23 == 40);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "40" + "'", str28, "40");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNotNull(node48);
    }

    @Test
    public void test1554() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1554");
        com.google.javascript.rhino.head.Node node2 = new com.google.javascript.rhino.head.Node((int) (byte) 1);
        node2.removeProp((int) (short) 10);
        com.google.javascript.rhino.head.Node node7 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str8 = node7.toString();
        boolean boolean9 = node7.hasConsistentReturnUsage();
        boolean boolean10 = node7.hasSideEffects();
        com.google.javascript.rhino.head.Node node11 = new com.google.javascript.rhino.head.Node(0, node7);
        com.google.javascript.rhino.head.Node node14 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str15 = node14.toString();
        boolean boolean16 = node14.hasConsistentReturnUsage();
        boolean boolean17 = node14.hasSideEffects();
        com.google.javascript.rhino.head.Node node19 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str20 = node19.toString();
        boolean boolean21 = node19.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node23 = com.google.javascript.rhino.head.Node.newString("");
        node23.removeProp(23);
        node19.addChildToFront(node23);
        com.google.javascript.rhino.head.Node node27 = node19.getFirstChild();
        com.google.javascript.rhino.head.ast.Comment comment28 = node19.getJsDocNode();
        node14.addChildToBack(node19);
        boolean boolean30 = node19.hasConsistentReturnUsage();
        node7.putProp((int) (short) 1, (java.lang.Object) node19);
        com.google.javascript.rhino.head.Node node32 = new com.google.javascript.rhino.head.Node((int) '#', node2, node19);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode33 = null;
        java.lang.String str34 = node19.toStringTree(scriptNode33);
        java.util.Spliterator<com.google.javascript.rhino.head.Node> nodeSpliterator35 = node19.spliterator();
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "40" + "'", str8, "40");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "40" + "'", str15, "40");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "40" + "'", str20, "40");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNull(comment28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNotNull(nodeSpliterator35);
    }

    @Test
    public void test1555() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1555");
        com.google.javascript.rhino.head.Node node2 = com.google.javascript.rhino.head.Node.newString(23, "");
        java.lang.String str3 = node2.toString();
        java.lang.String str4 = node2.getString();
        com.google.javascript.rhino.head.ast.Scope scope5 = null;
        node2.setScope(scope5);
        // The following exception was thrown during execution in test generation
        try {
            node2.resetTargets();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "23" + "'", str3, "23");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
    }

    @Test
    public void test1556() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1556");
        com.google.javascript.rhino.head.Node node1 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        com.google.javascript.rhino.head.Node node2 = node1.getLastSibling();
        boolean boolean3 = node2.hasSideEffects();
        node2.setLineno(0);
        // The following exception was thrown during execution in test generation
        try {
            node2.labelId(11);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test1557() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1557");
        com.google.javascript.rhino.head.Node node1 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str2 = node1.toString();
        boolean boolean3 = node1.hasConsistentReturnUsage();
        boolean boolean4 = node1.hasSideEffects();
        node1.removeChildren();
        // The following exception was thrown during execution in test generation
        try {
            node1.resetTargets();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "40" + "'", str2, "40");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test1558() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1558");
        com.google.javascript.rhino.head.Node node1 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str2 = node1.toString();
        boolean boolean3 = node1.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.ast.Comment comment4 = null;
        node1.setJsDocNode(comment4);
        com.google.javascript.rhino.head.Node node8 = com.google.javascript.rhino.head.Node.newString("");
        node8.removeProp(23);
        com.google.javascript.rhino.head.Node node13 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str14 = node13.toString();
        boolean boolean15 = node13.hasConsistentReturnUsage();
        boolean boolean16 = node13.hasSideEffects();
        com.google.javascript.rhino.head.Node node17 = new com.google.javascript.rhino.head.Node(0, node13);
        node8.addChildrenToBack(node17);
        com.google.javascript.rhino.head.Node node19 = new com.google.javascript.rhino.head.Node(9, node8);
        node1.addChildrenToFront(node19);
        com.google.javascript.rhino.head.Node node22 = node1.setType(18);
        boolean boolean23 = node1.hasSideEffects();
        com.google.javascript.rhino.head.Node node25 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str26 = node25.toString();
        boolean boolean27 = node25.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node29 = com.google.javascript.rhino.head.Node.newString("");
        node29.removeProp(23);
        node25.addChildToFront(node29);
        com.google.javascript.rhino.head.Node node33 = node29.getLastChild();
        com.google.javascript.rhino.head.Node node35 = com.google.javascript.rhino.head.Node.newString("1");
        node29.addChildrenToBack(node35);
        int int37 = node35.getLineno();
        node35.removeProp(16);
        node1.addChildrenToBack(node35);
        com.google.javascript.rhino.head.Node node41 = node35.getFirstChild();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "40" + "'", str2, "40");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "40" + "'", str14, "40");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "40" + "'", str26, "40");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNull(node33);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertNull(node41);
    }

    @Test
    public void test1559() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1559");
        com.google.javascript.rhino.head.Node node5 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str6 = node5.toString();
        boolean boolean7 = node5.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node9 = com.google.javascript.rhino.head.Node.newString("");
        node9.removeProp(23);
        node5.addChildToFront(node9);
        com.google.javascript.rhino.head.Node node13 = new com.google.javascript.rhino.head.Node((int) 'a', node5);
        com.google.javascript.rhino.head.Node node15 = com.google.javascript.rhino.head.Node.newString("-1");
        com.google.javascript.rhino.head.Node node17 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str18 = node17.toString();
        com.google.javascript.rhino.head.Node node19 = node17.getLastChild();
        com.google.javascript.rhino.head.Node node21 = new com.google.javascript.rhino.head.Node((int) (short) -1, node5, node15, node17, (int) (short) -1);
        java.lang.Object obj23 = node5.getProp(0);
        java.lang.String str24 = node5.getJsDoc();
        com.google.javascript.rhino.head.Node node27 = new com.google.javascript.rhino.head.Node(4, 8);
        com.google.javascript.rhino.head.Node node31 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str32 = node31.toString();
        boolean boolean33 = node31.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node35 = com.google.javascript.rhino.head.Node.newString("");
        node35.removeProp(23);
        node31.addChildToFront(node35);
        com.google.javascript.rhino.head.Node node39 = node31.getFirstChild();
        node39.setString("100");
        com.google.javascript.rhino.head.ast.Scope scope42 = node39.getScope();
        com.google.javascript.rhino.head.Node node44 = new com.google.javascript.rhino.head.Node((int) ' ', node39, 2);
        com.google.javascript.rhino.head.Node node45 = node39.getLastSibling();
        com.google.javascript.rhino.head.Node node48 = com.google.javascript.rhino.head.Node.newString(23, "");
        com.google.javascript.rhino.head.Node node49 = node48.getLastSibling();
        com.google.javascript.rhino.head.Node node50 = new com.google.javascript.rhino.head.Node((int) ' ', node45, node48);
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor51 = node48.iterator();
        node27.addChildrenToFront(node48);
        com.google.javascript.rhino.head.Node node54 = com.google.javascript.rhino.head.Node.newString("23");
        node54.removeChildren();
        com.google.javascript.rhino.head.Node node57 = new com.google.javascript.rhino.head.Node((int) (byte) 10, node5, node27, node54, 25);
        com.google.javascript.rhino.head.Node node58 = node54.getFirstChild();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator59 = node54.new NodeIterator();
        boolean boolean60 = node54.hasSideEffects();
        com.google.javascript.rhino.head.Node node62 = new com.google.javascript.rhino.head.Node(13, node54, 9);
        int int65 = node62.getIntProp(13, 3);
        // The following exception was thrown during execution in test generation
        try {
            int int67 = node62.getExistingIntProp((int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "40" + "'", str6, "40");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "40" + "'", str18, "40");
        org.junit.Assert.assertNull(node19);
        org.junit.Assert.assertNull(obj23);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "40" + "'", str32, "40");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNull(scope42);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNotNull(nodeItor51);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNull(node58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
    }

    @Test
    public void test1560() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1560");
        com.google.javascript.rhino.head.Node node1 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str2 = node1.toString();
        boolean boolean3 = node1.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node5 = com.google.javascript.rhino.head.Node.newString("");
        node5.removeProp(23);
        node1.addChildToFront(node5);
        com.google.javascript.rhino.head.Node node9 = node1.getFirstChild();
        com.google.javascript.rhino.head.Node node12 = new com.google.javascript.rhino.head.Node((int) (byte) -1);
        java.lang.String str13 = node12.toString();
        java.lang.Class<?> wildcardClass14 = node12.getClass();
        node1.putProp(21, (java.lang.Object) node12);
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator16 = node12.new NodeIterator();
        boolean boolean17 = nodeIterator16.hasNext();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "40" + "'", str2, "40");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "-1" + "'", str13, "-1");
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test1561() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1561");
        com.google.javascript.rhino.head.Node node3 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str4 = node3.toString();
        boolean boolean5 = node3.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node7 = com.google.javascript.rhino.head.Node.newString("");
        node7.removeProp(23);
        node3.addChildToFront(node7);
        com.google.javascript.rhino.head.Node node11 = node3.getFirstChild();
        node11.setString("100");
        com.google.javascript.rhino.head.ast.Scope scope14 = node11.getScope();
        com.google.javascript.rhino.head.Node node16 = new com.google.javascript.rhino.head.Node((int) ' ', node11, 2);
        boolean boolean17 = node16.hasChildren();
        com.google.javascript.rhino.head.Node node20 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str21 = node20.toString();
        boolean boolean22 = node20.hasConsistentReturnUsage();
        boolean boolean23 = node20.hasSideEffects();
        com.google.javascript.rhino.head.Node node24 = new com.google.javascript.rhino.head.Node(0, node20);
        int int25 = node20.getLineno();
        node16.addChildToFront(node20);
        com.google.javascript.rhino.head.Node node28 = com.google.javascript.rhino.head.Node.newString("-1");
        node28.removeProp(25);
        com.google.javascript.rhino.head.Node node32 = new com.google.javascript.rhino.head.Node(7, node20, node28, 1);
        com.google.javascript.rhino.head.Node node34 = node32.setType(12);
        com.google.javascript.rhino.head.Node node36 = node32.setType((int) (short) 10);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "40" + "'", str4, "40");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNull(scope14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "40" + "'", str21, "40");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node36);
    }

    @Test
    public void test1562() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1562");
        com.google.javascript.rhino.head.Node node3 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str4 = node3.toString();
        boolean boolean5 = node3.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node7 = com.google.javascript.rhino.head.Node.newString("");
        node7.removeProp(23);
        node3.addChildToFront(node7);
        com.google.javascript.rhino.head.Node node11 = node3.getFirstChild();
        node11.setString("100");
        com.google.javascript.rhino.head.ast.Scope scope14 = node11.getScope();
        com.google.javascript.rhino.head.Node node16 = new com.google.javascript.rhino.head.Node((int) ' ', node11, 2);
        com.google.javascript.rhino.head.Node node19 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        com.google.javascript.rhino.head.Node node21 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str22 = node21.toString();
        boolean boolean23 = node21.hasConsistentReturnUsage();
        boolean boolean24 = node21.hasSideEffects();
        node19.addChildrenToFront(node21);
        node21.removeChildren();
        com.google.javascript.rhino.head.Node node28 = com.google.javascript.rhino.head.Node.newString("hi!");
        node21.addChildrenToBack(node28);
        int int32 = node28.getIntProp(0, 22);
        node11.putProp(15, (java.lang.Object) 22);
        com.google.javascript.rhino.head.Node node35 = new com.google.javascript.rhino.head.Node((int) (short) -1, node11, 2);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode36 = null;
        java.lang.String str37 = node11.toStringTree(scriptNode36);
        com.google.javascript.rhino.head.Node node39 = node11.setType(2);
        com.google.javascript.rhino.head.Node node40 = node11.getNext();
        // The following exception was thrown during execution in test generation
        try {
            node11.setDouble((double) 13);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: com.google.javascript.rhino.head.ast.Name cannot be cast to com.google.javascript.rhino.head.ast.NumberLiteral");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "40" + "'", str4, "40");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNull(scope14);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "40" + "'", str22, "40");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 22 + "'", int32 == 22);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNull(node40);
    }

    @Test
    public void test1563() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1563");
        com.google.javascript.rhino.head.Node node1 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str2 = node1.toString();
        boolean boolean3 = node1.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node5 = com.google.javascript.rhino.head.Node.newString("");
        node5.removeProp(23);
        node1.addChildToFront(node5);
        com.google.javascript.rhino.head.Node node10 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean11 = node10.hasChildren();
        java.lang.String str12 = node10.getJsDoc();
        node5.addChildrenToBack(node10);
        java.lang.Class<?> wildcardClass14 = node5.getClass();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "40" + "'", str2, "40");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test1564() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1564");
        com.google.javascript.rhino.head.Node node1 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str2 = node1.toString();
        boolean boolean3 = node1.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node5 = com.google.javascript.rhino.head.Node.newString("");
        node5.removeProp(23);
        node1.addChildToFront(node5);
        com.google.javascript.rhino.head.Node node9 = node1.getFirstChild();
        com.google.javascript.rhino.head.ast.Comment comment10 = node1.getJsDocNode();
        int int11 = node1.getType();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator12 = node1.new NodeIterator();
        java.lang.String str13 = node1.toString();
        java.util.Spliterator<com.google.javascript.rhino.head.Node> nodeSpliterator14 = node1.spliterator();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "40" + "'", str2, "40");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNull(comment10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 40 + "'", int11 == 40);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "40" + "'", str13, "40");
        org.junit.Assert.assertNotNull(nodeSpliterator14);
    }

    @Test
    public void test1565() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1565");
        com.google.javascript.rhino.head.Node node2 = new com.google.javascript.rhino.head.Node(6, 22);
    }

    @Test
    public void test1566() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1566");
        com.google.javascript.rhino.head.Node node1 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str2 = node1.toString();
        com.google.javascript.rhino.head.ast.Comment comment3 = null;
        node1.setJsDocNode(comment3);
        com.google.javascript.rhino.head.ast.Comment comment5 = null;
        node1.setJsDocNode(comment5);
        com.google.javascript.rhino.head.Node node7 = node1.getLastSibling();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "40" + "'", str2, "40");
        org.junit.Assert.assertNotNull(node7);
    }

    @Test
    public void test1567() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1567");
        com.google.javascript.rhino.head.Node node3 = com.google.javascript.rhino.head.Node.newString(5, "");
        int int4 = node3.getType();
        com.google.javascript.rhino.head.Node node6 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str7 = node6.toString();
        boolean boolean8 = node6.hasConsistentReturnUsage();
        boolean boolean9 = node6.hasSideEffects();
        com.google.javascript.rhino.head.Node node11 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str12 = node11.toString();
        boolean boolean13 = node11.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node15 = com.google.javascript.rhino.head.Node.newString("");
        node15.removeProp(23);
        node11.addChildToFront(node15);
        com.google.javascript.rhino.head.Node node19 = node11.getFirstChild();
        com.google.javascript.rhino.head.ast.Comment comment20 = node11.getJsDocNode();
        node6.addChildToBack(node11);
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor22 = node6.iterator();
        com.google.javascript.rhino.head.ast.Comment comment23 = node6.getJsDocNode();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator24 = node6.new NodeIterator();
        double double25 = node6.getDouble();
        com.google.javascript.rhino.head.Node node28 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        com.google.javascript.rhino.head.Node node30 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str31 = node30.toString();
        boolean boolean32 = node30.hasConsistentReturnUsage();
        boolean boolean33 = node30.hasSideEffects();
        node28.addChildrenToFront(node30);
        node30.removeChildren();
        com.google.javascript.rhino.head.Node node37 = com.google.javascript.rhino.head.Node.newString("hi!");
        node30.addChildrenToBack(node37);
        node37.setLineno(22);
        boolean boolean41 = node37.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node43 = com.google.javascript.rhino.head.Node.newString("-1");
        node43.removeProp(25);
        com.google.javascript.rhino.head.Node node47 = com.google.javascript.rhino.head.Node.newString("");
        int int50 = node47.getIntProp(17, (int) (byte) -1);
        com.google.javascript.rhino.head.Node node53 = new com.google.javascript.rhino.head.Node(40, 8);
        com.google.javascript.rhino.head.Node node56 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str57 = node56.toString();
        boolean boolean58 = node56.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node60 = com.google.javascript.rhino.head.Node.newString("");
        node60.removeProp(23);
        node56.addChildToFront(node60);
        com.google.javascript.rhino.head.Node node64 = node56.getFirstChild();
        com.google.javascript.rhino.head.Node node66 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        node64.addChildrenToBack(node66);
        com.google.javascript.rhino.head.Node node69 = com.google.javascript.rhino.head.Node.newString("");
        int int72 = node69.getIntProp(17, (int) (byte) -1);
        com.google.javascript.rhino.head.Node node73 = new com.google.javascript.rhino.head.Node((int) (short) 10, node64, node69);
        com.google.javascript.rhino.head.Node node75 = node64.setType(18);
        node47.addChildAfter(node53, node75);
        node43.addChildToFront(node75);
        com.google.javascript.rhino.head.Node node78 = new com.google.javascript.rhino.head.Node((int) (byte) 100, node37, node75);
        node6.addChildrenToBack(node75);
        com.google.javascript.rhino.head.Node node80 = new com.google.javascript.rhino.head.Node(6, node3, node6);
        int int81 = node80.getLineno();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 5 + "'", int4 == 5);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "40" + "'", str7, "40");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "40" + "'", str12, "40");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNull(comment20);
        org.junit.Assert.assertNotNull(nodeItor22);
        org.junit.Assert.assertNull(comment23);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 32.0d + "'", double25 == 32.0d);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "40" + "'", str31, "40");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "40" + "'", str57, "40");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-1) + "'", int72 == (-1));
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + (-1) + "'", int81 == (-1));
    }

    @Test
    public void test1568() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1568");
        com.google.javascript.rhino.head.Node node6 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str7 = node6.toString();
        boolean boolean8 = node6.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node10 = com.google.javascript.rhino.head.Node.newString("");
        node10.removeProp(23);
        node6.addChildToFront(node10);
        com.google.javascript.rhino.head.Node node14 = node6.getFirstChild();
        node14.setString("100");
        com.google.javascript.rhino.head.ast.Scope scope17 = node14.getScope();
        com.google.javascript.rhino.head.Node node19 = new com.google.javascript.rhino.head.Node((int) ' ', node14, 2);
        com.google.javascript.rhino.head.Node node20 = node14.getLastSibling();
        com.google.javascript.rhino.head.Node node23 = com.google.javascript.rhino.head.Node.newString(23, "");
        com.google.javascript.rhino.head.Node node24 = node23.getLastSibling();
        com.google.javascript.rhino.head.Node node25 = new com.google.javascript.rhino.head.Node((int) ' ', node20, node23);
        java.lang.String str26 = node20.getString();
        com.google.javascript.rhino.head.Node node28 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str29 = node28.toString();
        boolean boolean30 = node28.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node32 = com.google.javascript.rhino.head.Node.newString("");
        node32.removeProp(23);
        node28.addChildToFront(node32);
        com.google.javascript.rhino.head.Node node37 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean38 = node37.hasChildren();
        node28.addChildrenToFront(node37);
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator40 = node37.new NodeIterator();
        com.google.javascript.rhino.head.Node node42 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str43 = node42.toString();
        com.google.javascript.rhino.head.Node node44 = node42.getLastSibling();
        com.google.javascript.rhino.head.Node node47 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str48 = node47.toString();
        boolean boolean49 = node47.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node51 = com.google.javascript.rhino.head.Node.newString("");
        node51.removeProp(23);
        node47.addChildToFront(node51);
        com.google.javascript.rhino.head.Node node55 = node47.getFirstChild();
        node55.setString("100");
        com.google.javascript.rhino.head.ast.Scope scope58 = node55.getScope();
        com.google.javascript.rhino.head.Node node60 = new com.google.javascript.rhino.head.Node((int) ' ', node55, 2);
        com.google.javascript.rhino.head.Node node61 = node55.getLastSibling();
        node44.addChildToFront(node61);
        node37.addChildrenToFront(node44);
        com.google.javascript.rhino.head.Node node65 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        java.lang.String str66 = node65.toString();
        com.google.javascript.rhino.head.Node node68 = new com.google.javascript.rhino.head.Node((int) (short) 10, node20, node37, node65, 24);
        com.google.javascript.rhino.head.Node node71 = new com.google.javascript.rhino.head.Node(0, 1);
        node71.removeChildren();
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor73 = node71.iterator();
        com.google.javascript.rhino.head.Node node74 = new com.google.javascript.rhino.head.Node(19, node65, node71);
        com.google.javascript.rhino.head.Node node76 = com.google.javascript.rhino.head.Node.newString("1");
        com.google.javascript.rhino.head.ast.Scope scope77 = node76.getScope();
        com.google.javascript.rhino.head.Node node78 = new com.google.javascript.rhino.head.Node(13, node74, node76);
        boolean boolean79 = node78.hasSideEffects();
        com.google.javascript.rhino.head.ast.Comment comment80 = null;
        node78.setJsDocNode(comment80);
        java.lang.Class<?> wildcardClass82 = node78.getClass();
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "40" + "'", str7, "40");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNull(scope17);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "100" + "'", str26, "100");
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "40" + "'", str29, "40");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "40" + "'", str43, "40");
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "40" + "'", str48, "40");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNull(scope58);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "100" + "'", str66, "100");
        org.junit.Assert.assertNotNull(nodeItor73);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertNull(scope77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(wildcardClass82);
    }

    @Test
    public void test1569() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1569");
        com.google.javascript.rhino.head.Node node2 = new com.google.javascript.rhino.head.Node((int) (byte) 1, 8);
        java.lang.String str3 = node2.toString();
        java.util.Spliterator<com.google.javascript.rhino.head.Node> nodeSpliterator4 = node2.spliterator();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "1" + "'", str3, "1");
        org.junit.Assert.assertNotNull(nodeSpliterator4);
    }

    @Test
    public void test1570() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1570");
        com.google.javascript.rhino.head.Node node5 = com.google.javascript.rhino.head.Node.newString(23, "");
        com.google.javascript.rhino.head.Node node6 = node5.getLastSibling();
        com.google.javascript.rhino.head.Node node8 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        com.google.javascript.rhino.head.Node node10 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str11 = node10.toString();
        boolean boolean12 = node10.hasConsistentReturnUsage();
        boolean boolean13 = node10.hasSideEffects();
        node8.addChildrenToFront(node10);
        com.google.javascript.rhino.head.Node node16 = new com.google.javascript.rhino.head.Node(26, node5, node8, 20);
        int int17 = node8.getLineno();
        com.google.javascript.rhino.head.Node node20 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str21 = node20.toString();
        boolean boolean22 = node20.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node24 = com.google.javascript.rhino.head.Node.newString("");
        node24.removeProp(23);
        node20.addChildToFront(node24);
        com.google.javascript.rhino.head.Node node29 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean30 = node29.hasChildren();
        node20.addChildrenToFront(node29);
        com.google.javascript.rhino.head.Node node33 = new com.google.javascript.rhino.head.Node((int) (byte) -1);
        java.lang.String str34 = node33.toString();
        boolean boolean35 = node33.hasChildren();
        com.google.javascript.rhino.head.Node node37 = new com.google.javascript.rhino.head.Node((int) (short) -1, node29, node33, (int) (short) 10);
        node37.removeProp(24);
        com.google.javascript.rhino.head.Node node40 = node37.getLastChild();
        com.google.javascript.rhino.head.Node node42 = com.google.javascript.rhino.head.Node.newNumber((double) 0);
        com.google.javascript.rhino.head.ast.Comment comment43 = node42.getJsDocNode();
        com.google.javascript.rhino.head.Node node44 = new com.google.javascript.rhino.head.Node(12, node8, node37, node42);
        com.google.javascript.rhino.head.Node node45 = new com.google.javascript.rhino.head.Node(0, node42);
        // The following exception was thrown during execution in test generation
        try {
            int int47 = node42.getExistingIntProp((int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "40" + "'", str11, "40");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "40" + "'", str21, "40");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "-1" + "'", str34, "-1");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNull(comment43);
    }

    @Test
    public void test1571() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1571");
        com.google.javascript.rhino.head.Node node3 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str4 = node3.toString();
        boolean boolean5 = node3.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node7 = com.google.javascript.rhino.head.Node.newString("");
        node7.removeProp(23);
        node3.addChildToFront(node7);
        com.google.javascript.rhino.head.Node node11 = new com.google.javascript.rhino.head.Node((int) 'a', node3);
        com.google.javascript.rhino.head.Node node13 = com.google.javascript.rhino.head.Node.newString("-1");
        com.google.javascript.rhino.head.Node node15 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str16 = node15.toString();
        com.google.javascript.rhino.head.Node node17 = node15.getLastChild();
        com.google.javascript.rhino.head.Node node19 = new com.google.javascript.rhino.head.Node((int) (short) -1, node3, node13, node15, (int) (short) -1);
        int int22 = node3.getIntProp((int) ' ', 3);
        java.lang.Class<?> wildcardClass23 = node3.getClass();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "40" + "'", str4, "40");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "40" + "'", str16, "40");
        org.junit.Assert.assertNull(node17);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 3 + "'", int22 == 3);
        org.junit.Assert.assertNotNull(wildcardClass23);
    }

    @Test
    public void test1572() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1572");
        com.google.javascript.rhino.head.Node node2 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str3 = node2.toString();
        boolean boolean4 = node2.hasConsistentReturnUsage();
        boolean boolean5 = node2.hasSideEffects();
        com.google.javascript.rhino.head.Node node6 = new com.google.javascript.rhino.head.Node(0, node2);
        node6.putProp(40, (java.lang.Object) 9);
        com.google.javascript.rhino.head.Node node10 = node6.getFirstChild();
        com.google.javascript.rhino.head.Node node12 = node10.setType(19);
        // The following exception was thrown during execution in test generation
        try {
            node10.labelId((int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "40" + "'", str3, "40");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node12);
    }

    @Test
    public void test1573() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1573");
        com.google.javascript.rhino.head.Node node3 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str4 = node3.toString();
        boolean boolean5 = node3.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node7 = com.google.javascript.rhino.head.Node.newString("");
        node7.removeProp(23);
        node3.addChildToFront(node7);
        com.google.javascript.rhino.head.Node node11 = node3.getFirstChild();
        node11.setString("100");
        com.google.javascript.rhino.head.ast.Scope scope14 = node11.getScope();
        com.google.javascript.rhino.head.Node node16 = new com.google.javascript.rhino.head.Node((int) ' ', node11, 2);
        boolean boolean17 = node16.hasChildren();
        node16.setLineno((int) (byte) 0);
        com.google.javascript.rhino.head.Node node21 = com.google.javascript.rhino.head.Node.newNumber((double) 1.0f);
        java.lang.Object obj23 = node21.getProp((int) 'a');
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor24 = node21.iterator();
        int int27 = node21.getIntProp((int) (byte) -1, 17);
        com.google.javascript.rhino.head.Node node31 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str32 = node31.toString();
        boolean boolean33 = node31.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node35 = com.google.javascript.rhino.head.Node.newString("");
        node35.removeProp(23);
        node31.addChildToFront(node35);
        com.google.javascript.rhino.head.Node node40 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean41 = node40.hasChildren();
        node31.addChildrenToFront(node40);
        int int43 = node40.getLineno();
        com.google.javascript.rhino.head.Node node45 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str46 = node45.toString();
        boolean boolean47 = node45.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node49 = com.google.javascript.rhino.head.Node.newString("");
        node49.removeProp(23);
        node45.addChildToFront(node49);
        com.google.javascript.rhino.head.Node node53 = node45.getFirstChild();
        com.google.javascript.rhino.head.Node node55 = new com.google.javascript.rhino.head.Node((int) (short) 0, node40, node45, 9);
        com.google.javascript.rhino.head.Node node57 = com.google.javascript.rhino.head.Node.newString("1");
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor58 = node57.iterator();
        com.google.javascript.rhino.head.Node node60 = new com.google.javascript.rhino.head.Node(21, node55, node57, (int) '4');
        com.google.javascript.rhino.head.Node node62 = node60.setType(20);
        com.google.javascript.rhino.head.Node node63 = new com.google.javascript.rhino.head.Node((-1), node16, node21, node60);
        com.google.javascript.rhino.head.ast.Comment comment64 = node16.getJsDocNode();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "40" + "'", str4, "40");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNull(scope14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNull(obj23);
        org.junit.Assert.assertNotNull(nodeItor24);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 17 + "'", int27 == 17);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "40" + "'", str32, "40");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "40" + "'", str46, "40");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertNotNull(nodeItor58);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNull(comment64);
    }

    @Test
    public void test1574() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1574");
        com.google.javascript.rhino.head.Node node2 = com.google.javascript.rhino.head.Node.newString((int) (byte) 10, "hi!");
        org.junit.Assert.assertNotNull(node2);
    }

    @Test
    public void test1575() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1575");
        com.google.javascript.rhino.head.Node node2 = com.google.javascript.rhino.head.Node.newNumber((double) 0);
        com.google.javascript.rhino.head.Node node4 = new com.google.javascript.rhino.head.Node(3, node2, 22);
        int int7 = node2.getIntProp(1, 22);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 22 + "'", int7 == 22);
    }

    @Test
    public void test1576() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1576");
        com.google.javascript.rhino.head.Node node2 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str3 = node2.toString();
        boolean boolean4 = node2.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.ast.Comment comment5 = null;
        node2.setJsDocNode(comment5);
        com.google.javascript.rhino.head.Node node9 = com.google.javascript.rhino.head.Node.newString("");
        node9.removeProp(23);
        com.google.javascript.rhino.head.Node node14 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str15 = node14.toString();
        boolean boolean16 = node14.hasConsistentReturnUsage();
        boolean boolean17 = node14.hasSideEffects();
        com.google.javascript.rhino.head.Node node18 = new com.google.javascript.rhino.head.Node(0, node14);
        node9.addChildrenToBack(node18);
        com.google.javascript.rhino.head.Node node20 = new com.google.javascript.rhino.head.Node(9, node9);
        node2.addChildrenToFront(node20);
        com.google.javascript.rhino.head.Node node23 = node2.setType(18);
        node2.removeChildren();
        com.google.javascript.rhino.head.Node node26 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str27 = node26.toString();
        boolean boolean28 = node26.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node30 = com.google.javascript.rhino.head.Node.newString("");
        node30.removeProp(23);
        node26.addChildToFront(node30);
        com.google.javascript.rhino.head.Node node34 = node26.getFirstChild();
        com.google.javascript.rhino.head.Node node36 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        node34.addChildrenToBack(node36);
        int int40 = node36.getIntProp(9, (int) 'a');
        com.google.javascript.rhino.head.Node node45 = new com.google.javascript.rhino.head.Node((int) (byte) 1, 8);
        java.lang.String str46 = node45.toString();
        com.google.javascript.rhino.head.Node node47 = node45.getLastChild();
        com.google.javascript.rhino.head.Node node50 = com.google.javascript.rhino.head.Node.newString(23, "");
        com.google.javascript.rhino.head.Node node51 = node50.getLastSibling();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator52 = node51.new NodeIterator();
        node51.setLineno(13);
        java.util.Spliterator<com.google.javascript.rhino.head.Node> nodeSpliterator55 = node51.spliterator();
        java.lang.String str56 = node51.toString();
        node45.addChildrenToBack(node51);
        com.google.javascript.rhino.head.Node node58 = new com.google.javascript.rhino.head.Node(13, node45);
        com.google.javascript.rhino.head.Node node59 = new com.google.javascript.rhino.head.Node(6, node45);
        node59.removeChildren();
        com.google.javascript.rhino.head.Node node61 = new com.google.javascript.rhino.head.Node(26, node2, node36, node59);
        com.google.javascript.rhino.head.ast.Comment comment62 = null;
        node59.setJsDocNode(comment62);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "40" + "'", str3, "40");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "40" + "'", str15, "40");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "40" + "'", str27, "40");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 97 + "'", int40 == 97);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "1" + "'", str46, "1");
        org.junit.Assert.assertNull(node47);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNotNull(nodeSpliterator55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "23" + "'", str56, "23");
    }

    @Test
    public void test1577() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1577");
        com.google.javascript.rhino.head.Node node2 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str3 = node2.toString();
        boolean boolean4 = node2.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node6 = com.google.javascript.rhino.head.Node.newString("");
        node6.removeProp(23);
        node2.addChildToFront(node6);
        com.google.javascript.rhino.head.Node node11 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean12 = node11.hasChildren();
        node2.addChildrenToFront(node11);
        com.google.javascript.rhino.head.Node node15 = new com.google.javascript.rhino.head.Node((int) (byte) -1);
        java.lang.String str16 = node15.toString();
        boolean boolean17 = node15.hasChildren();
        com.google.javascript.rhino.head.Node node19 = new com.google.javascript.rhino.head.Node((int) (short) -1, node11, node15, (int) (short) 10);
        node19.removeProp(24);
        int int22 = node19.getType();
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor23 = node19.iterator();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "40" + "'", str3, "40");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "-1" + "'", str16, "-1");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(nodeItor23);
    }

    @Test
    public void test1578() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1578");
        com.google.javascript.rhino.head.Node node1 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str2 = node1.toString();
        boolean boolean3 = node1.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.ast.Comment comment4 = null;
        node1.setJsDocNode(comment4);
        com.google.javascript.rhino.head.Node node8 = com.google.javascript.rhino.head.Node.newString("");
        node8.removeProp(23);
        com.google.javascript.rhino.head.Node node13 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str14 = node13.toString();
        boolean boolean15 = node13.hasConsistentReturnUsage();
        boolean boolean16 = node13.hasSideEffects();
        com.google.javascript.rhino.head.Node node17 = new com.google.javascript.rhino.head.Node(0, node13);
        node8.addChildrenToBack(node17);
        com.google.javascript.rhino.head.Node node19 = new com.google.javascript.rhino.head.Node(9, node8);
        node1.addChildrenToFront(node19);
        com.google.javascript.rhino.head.Node node22 = node1.setType(18);
        com.google.javascript.rhino.head.Node node25 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        java.lang.String str26 = node25.toString();
        int int27 = node25.getLineno();
        com.google.javascript.rhino.head.Node node29 = com.google.javascript.rhino.head.Node.newNumber((double) 0);
        com.google.javascript.rhino.head.ast.Comment comment30 = node29.getJsDocNode();
        com.google.javascript.rhino.head.Node node32 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        com.google.javascript.rhino.head.Node node34 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str35 = node34.toString();
        boolean boolean36 = node34.hasConsistentReturnUsage();
        boolean boolean37 = node34.hasSideEffects();
        node32.addChildrenToFront(node34);
        com.google.javascript.rhino.head.Node node39 = new com.google.javascript.rhino.head.Node(8, node25, node29, node32);
        com.google.javascript.rhino.head.ast.Comment comment40 = node25.getJsDocNode();
        com.google.javascript.rhino.head.Node node41 = node25.getLastSibling();
        // The following exception was thrown during execution in test generation
        try {
            node22.removeChild(node41);
            org.junit.Assert.fail("Expected exception of type java.lang.RuntimeException; message: node is not a child");
        } catch (java.lang.RuntimeException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "40" + "'", str2, "40");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "40" + "'", str14, "40");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "100" + "'", str26, "100");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNull(comment30);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "40" + "'", str35, "40");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNull(comment40);
        org.junit.Assert.assertNotNull(node41);
    }

    @Test
    public void test1579() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1579");
        com.google.javascript.rhino.head.Node node3 = new com.google.javascript.rhino.head.Node((int) (byte) -1);
        java.lang.String str4 = node3.toString();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode5 = null;
        java.lang.String str6 = node3.toStringTree(scriptNode5);
        com.google.javascript.rhino.head.Node node9 = com.google.javascript.rhino.head.Node.newString(24, "100");
        com.google.javascript.rhino.head.Node node12 = new com.google.javascript.rhino.head.Node(23, 6);
        com.google.javascript.rhino.head.Node node14 = new com.google.javascript.rhino.head.Node(0, node3, node9, node12, 6);
        java.lang.String str15 = node12.getJsDoc();
        com.google.javascript.rhino.head.Node node17 = new com.google.javascript.rhino.head.Node(25, node12, (int) (short) -1);
        // The following exception was thrown during execution in test generation
        try {
            node12.setString("");
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: com.google.javascript.rhino.head.Node cannot be cast to com.google.javascript.rhino.head.ast.Name");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-1" + "'", str4, "-1");
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNull(str15);
    }

    @Test
    public void test1580() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1580");
        com.google.javascript.rhino.head.Node node1 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str2 = node1.toString();
        boolean boolean3 = node1.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node5 = com.google.javascript.rhino.head.Node.newString("");
        node5.removeProp(23);
        node1.addChildToFront(node5);
        com.google.javascript.rhino.head.Node node10 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean11 = node10.hasChildren();
        node1.addChildrenToFront(node10);
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator13 = node10.new NodeIterator();
        com.google.javascript.rhino.head.Node node15 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str16 = node15.toString();
        com.google.javascript.rhino.head.Node node17 = node15.getLastSibling();
        com.google.javascript.rhino.head.Node node20 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str21 = node20.toString();
        boolean boolean22 = node20.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node24 = com.google.javascript.rhino.head.Node.newString("");
        node24.removeProp(23);
        node20.addChildToFront(node24);
        com.google.javascript.rhino.head.Node node28 = node20.getFirstChild();
        node28.setString("100");
        com.google.javascript.rhino.head.ast.Scope scope31 = node28.getScope();
        com.google.javascript.rhino.head.Node node33 = new com.google.javascript.rhino.head.Node((int) ' ', node28, 2);
        com.google.javascript.rhino.head.Node node34 = node28.getLastSibling();
        node17.addChildToFront(node34);
        node10.addChildrenToFront(node17);
        boolean boolean37 = node10.hasSideEffects();
        com.google.javascript.rhino.head.ast.Scope scope38 = null;
        // The following exception was thrown during execution in test generation
        try {
            node10.setScope(scope38);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "40" + "'", str2, "40");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "40" + "'", str16, "40");
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "40" + "'", str21, "40");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNull(scope31);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    }

    @Test
    public void test1581() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1581");
        com.google.javascript.rhino.head.Node node1 = new com.google.javascript.rhino.head.Node((int) (byte) -1);
        java.lang.String str2 = node1.toString();
        com.google.javascript.rhino.head.Node node3 = node1.getFirstChild();
        com.google.javascript.rhino.head.Node node6 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str7 = node6.toString();
        boolean boolean8 = node6.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node10 = com.google.javascript.rhino.head.Node.newString("");
        node10.removeProp(23);
        node6.addChildToFront(node10);
        com.google.javascript.rhino.head.Node node15 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean16 = node15.hasChildren();
        node6.addChildrenToFront(node15);
        int int18 = node15.getLineno();
        com.google.javascript.rhino.head.Node node20 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str21 = node20.toString();
        boolean boolean22 = node20.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node24 = com.google.javascript.rhino.head.Node.newString("");
        node24.removeProp(23);
        node20.addChildToFront(node24);
        com.google.javascript.rhino.head.Node node28 = node20.getFirstChild();
        com.google.javascript.rhino.head.Node node30 = new com.google.javascript.rhino.head.Node((int) (short) 0, node15, node20, 9);
        node1.addChildrenToFront(node30);
        boolean boolean32 = node30.hasChildren();
        // The following exception was thrown during execution in test generation
        try {
            node30.resetTargets();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "-1" + "'", str2, "-1");
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "40" + "'", str7, "40");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "40" + "'", str21, "40");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
    }

    @Test
    public void test1582() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1582");
        com.google.javascript.rhino.head.Node node2 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str3 = node2.toString();
        boolean boolean4 = node2.hasConsistentReturnUsage();
        boolean boolean5 = node2.hasSideEffects();
        com.google.javascript.rhino.head.Node node6 = new com.google.javascript.rhino.head.Node(0, node2);
        int int7 = node2.getLineno();
        node2.removeProp(0);
        com.google.javascript.rhino.head.Node node13 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str14 = node13.toString();
        boolean boolean15 = node13.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node17 = com.google.javascript.rhino.head.Node.newString("");
        node17.removeProp(23);
        node13.addChildToFront(node17);
        com.google.javascript.rhino.head.Node node21 = node13.getFirstChild();
        com.google.javascript.rhino.head.ast.Comment comment22 = node13.getJsDocNode();
        int int23 = node13.getType();
        node13.setDouble((double) 17);
        com.google.javascript.rhino.head.Node node27 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str28 = node27.toString();
        boolean boolean29 = node27.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node31 = com.google.javascript.rhino.head.Node.newString("");
        node31.removeProp(23);
        node27.addChildToFront(node31);
        java.lang.String str35 = node31.getString();
        com.google.javascript.rhino.head.Node node38 = com.google.javascript.rhino.head.Node.newString((int) (short) 0, "-1");
        com.google.javascript.rhino.head.Node node40 = new com.google.javascript.rhino.head.Node(10, node13, node31, node38, 14);
        java.lang.String str41 = node40.getJsDoc();
        com.google.javascript.rhino.head.Node node43 = new com.google.javascript.rhino.head.Node(17, node40, (int) (byte) 0);
        com.google.javascript.rhino.head.Node node44 = node40.getLastChild();
        node2.addChildrenToBack(node40);
        com.google.javascript.rhino.head.Node node46 = node2.getLastSibling();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator47 = node46.new NodeIterator();
        // The following exception was thrown during execution in test generation
        try {
            int int49 = node46.getExistingIntProp(17);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "40" + "'", str3, "40");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "40" + "'", str14, "40");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNull(comment22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 40 + "'", int23 == 40);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "40" + "'", str28, "40");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node46);
    }

    @Test
    public void test1583() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1583");
        com.google.javascript.rhino.head.Node node2 = com.google.javascript.rhino.head.Node.newString((int) (byte) -1, "32");
        org.junit.Assert.assertNotNull(node2);
    }

    @Test
    public void test1584() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1584");
        com.google.javascript.rhino.head.Node node3 = com.google.javascript.rhino.head.Node.newString(24, "100");
        int int4 = node3.getType();
        boolean boolean5 = node3.hasChildren();
        com.google.javascript.rhino.head.Node node7 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str8 = node7.toString();
        boolean boolean9 = node7.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node11 = com.google.javascript.rhino.head.Node.newString("");
        node11.removeProp(23);
        node7.addChildToFront(node11);
        com.google.javascript.rhino.head.Node node16 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean17 = node16.hasChildren();
        node7.addChildrenToFront(node16);
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator19 = node16.new NodeIterator();
        boolean boolean20 = node16.hasChildren();
        com.google.javascript.rhino.head.Node node21 = new com.google.javascript.rhino.head.Node(11, node3, node16);
        // The following exception was thrown during execution in test generation
        try {
            node3.setDouble(100.0d);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: com.google.javascript.rhino.head.ast.Name cannot be cast to com.google.javascript.rhino.head.ast.NumberLiteral");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 24 + "'", int4 == 24);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "40" + "'", str8, "40");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test1585() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1585");
        com.google.javascript.rhino.head.Node node3 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str4 = node3.toString();
        boolean boolean5 = node3.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node7 = com.google.javascript.rhino.head.Node.newString("");
        node7.removeProp(23);
        node3.addChildToFront(node7);
        com.google.javascript.rhino.head.Node node11 = new com.google.javascript.rhino.head.Node((int) 'a', node3);
        com.google.javascript.rhino.head.Node node13 = com.google.javascript.rhino.head.Node.newString("-1");
        com.google.javascript.rhino.head.Node node15 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str16 = node15.toString();
        com.google.javascript.rhino.head.Node node17 = node15.getLastChild();
        com.google.javascript.rhino.head.Node node19 = new com.google.javascript.rhino.head.Node((int) (short) -1, node3, node13, node15, (int) (short) -1);
        java.lang.Object obj21 = node3.getProp(0);
        java.lang.String str22 = node3.getJsDoc();
        java.util.Spliterator<com.google.javascript.rhino.head.Node> nodeSpliterator23 = node3.spliterator();
        com.google.javascript.rhino.head.Node node26 = new com.google.javascript.rhino.head.Node(40, 8);
        com.google.javascript.rhino.head.Node node28 = node26.setType((int) (short) 10);
        node3.addChildToBack(node26);
        boolean boolean30 = node3.hasSideEffects();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "40" + "'", str4, "40");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "40" + "'", str16, "40");
        org.junit.Assert.assertNull(node17);
        org.junit.Assert.assertNull(obj21);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(nodeSpliterator23);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test1586() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1586");
        com.google.javascript.rhino.head.Node node2 = com.google.javascript.rhino.head.Node.newString(18, "2");
        // The following exception was thrown during execution in test generation
        try {
            double double3 = node2.getDouble();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: com.google.javascript.rhino.head.ast.Name cannot be cast to com.google.javascript.rhino.head.ast.NumberLiteral");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
    }

    @Test
    public void test1587() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1587");
        com.google.javascript.rhino.head.Node node2 = new com.google.javascript.rhino.head.Node((int) (short) -1, 10);
        // The following exception was thrown during execution in test generation
        try {
            node2.labelId(0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1588() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1588");
        com.google.javascript.rhino.head.Node node2 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str3 = node2.toString();
        com.google.javascript.rhino.head.Node node4 = node2.getLastSibling();
        com.google.javascript.rhino.head.Node node7 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str8 = node7.toString();
        boolean boolean9 = node7.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node11 = com.google.javascript.rhino.head.Node.newString("");
        node11.removeProp(23);
        node7.addChildToFront(node11);
        com.google.javascript.rhino.head.Node node15 = node7.getFirstChild();
        node15.setString("100");
        com.google.javascript.rhino.head.ast.Scope scope18 = node15.getScope();
        com.google.javascript.rhino.head.Node node20 = new com.google.javascript.rhino.head.Node((int) ' ', node15, 2);
        com.google.javascript.rhino.head.Node node21 = node15.getLastSibling();
        node4.addChildToFront(node21);
        com.google.javascript.rhino.head.Node node26 = com.google.javascript.rhino.head.Node.newString(23, "");
        com.google.javascript.rhino.head.Node node27 = node26.getLastSibling();
        com.google.javascript.rhino.head.Node node31 = com.google.javascript.rhino.head.Node.newString("hi!");
        com.google.javascript.rhino.head.Node node32 = new com.google.javascript.rhino.head.Node(13, node31);
        com.google.javascript.rhino.head.Node node35 = new com.google.javascript.rhino.head.Node(12);
        node35.putIntProp(14, 3);
        com.google.javascript.rhino.head.Node node39 = new com.google.javascript.rhino.head.Node(6, node35);
        com.google.javascript.rhino.head.Node node40 = node39.getLastChild();
        com.google.javascript.rhino.head.Node node42 = new com.google.javascript.rhino.head.Node((int) (byte) 100, node31, node39, 0);
        com.google.javascript.rhino.head.Node node45 = new com.google.javascript.rhino.head.Node((int) (byte) 1, 8);
        node45.putIntProp(20, 100);
        com.google.javascript.rhino.head.Node node49 = new com.google.javascript.rhino.head.Node(20, node27, node31, node45);
        com.google.javascript.rhino.head.Node node50 = node27.getLastChild();
        com.google.javascript.rhino.head.Node node52 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        com.google.javascript.rhino.head.Node node54 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str55 = node54.toString();
        boolean boolean56 = node54.hasConsistentReturnUsage();
        boolean boolean57 = node54.hasSideEffects();
        node52.addChildrenToFront(node54);
        com.google.javascript.rhino.head.Node node59 = node54.getLastSibling();
        com.google.javascript.rhino.head.Node node61 = new com.google.javascript.rhino.head.Node((-1), node21, node27, node59, 3);
        // The following exception was thrown during execution in test generation
        try {
            node61.resetTargets();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "40" + "'", str3, "40");
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "40" + "'", str8, "40");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNull(scope18);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNull(node50);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "40" + "'", str55, "40");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(node59);
    }

    @Test
    public void test1589() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1589");
        com.google.javascript.rhino.head.Node node2 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str3 = node2.toString();
        boolean boolean4 = node2.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node6 = com.google.javascript.rhino.head.Node.newString("");
        node6.removeProp(23);
        node2.addChildToFront(node6);
        com.google.javascript.rhino.head.Node node10 = node2.getFirstChild();
        node10.setString("100");
        com.google.javascript.rhino.head.ast.Scope scope13 = node10.getScope();
        com.google.javascript.rhino.head.Node node15 = new com.google.javascript.rhino.head.Node((int) ' ', node10, 2);
        boolean boolean16 = node15.hasChildren();
        com.google.javascript.rhino.head.Node node19 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str20 = node19.toString();
        boolean boolean21 = node19.hasConsistentReturnUsage();
        boolean boolean22 = node19.hasSideEffects();
        com.google.javascript.rhino.head.Node node23 = new com.google.javascript.rhino.head.Node(0, node19);
        int int24 = node19.getLineno();
        node15.addChildToFront(node19);
        boolean boolean26 = node19.hasSideEffects();
        boolean boolean27 = node19.hasChildren();
        java.lang.Object obj29 = node19.getProp(0);
        boolean boolean30 = node19.hasChildren();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "40" + "'", str3, "40");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNull(scope13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "40" + "'", str20, "40");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(obj29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test1590() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1590");
        com.google.javascript.rhino.head.Node node3 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str4 = node3.toString();
        boolean boolean5 = node3.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node7 = com.google.javascript.rhino.head.Node.newString("");
        node7.removeProp(23);
        node3.addChildToFront(node7);
        com.google.javascript.rhino.head.Node node11 = node3.getFirstChild();
        node11.setString("100");
        com.google.javascript.rhino.head.ast.Scope scope14 = node11.getScope();
        com.google.javascript.rhino.head.Node node16 = new com.google.javascript.rhino.head.Node((int) ' ', node11, 2);
        boolean boolean17 = node16.hasChildren();
        com.google.javascript.rhino.head.Node node21 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str22 = node21.toString();
        boolean boolean23 = node21.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node25 = com.google.javascript.rhino.head.Node.newString("");
        node25.removeProp(23);
        node21.addChildToFront(node25);
        com.google.javascript.rhino.head.Node node30 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean31 = node30.hasChildren();
        node21.addChildrenToFront(node30);
        int int33 = node30.getLineno();
        com.google.javascript.rhino.head.Node node35 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str36 = node35.toString();
        boolean boolean37 = node35.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node39 = com.google.javascript.rhino.head.Node.newString("");
        node39.removeProp(23);
        node35.addChildToFront(node39);
        com.google.javascript.rhino.head.Node node43 = node35.getFirstChild();
        com.google.javascript.rhino.head.Node node45 = new com.google.javascript.rhino.head.Node((int) (short) 0, node30, node35, 9);
        boolean boolean46 = node30.hasSideEffects();
        com.google.javascript.rhino.head.Node node49 = com.google.javascript.rhino.head.Node.newString(23, "");
        com.google.javascript.rhino.head.Node node50 = node49.getLastSibling();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator51 = node50.new NodeIterator();
        com.google.javascript.rhino.head.Node node53 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str54 = node53.toString();
        boolean boolean55 = node53.hasConsistentReturnUsage();
        boolean boolean56 = node53.hasSideEffects();
        com.google.javascript.rhino.head.Node node58 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str59 = node58.toString();
        boolean boolean60 = node58.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node62 = com.google.javascript.rhino.head.Node.newString("");
        node62.removeProp(23);
        node58.addChildToFront(node62);
        com.google.javascript.rhino.head.Node node66 = node58.getFirstChild();
        com.google.javascript.rhino.head.ast.Comment comment67 = node58.getJsDocNode();
        node53.addChildToBack(node58);
        java.lang.String str69 = node53.toString();
        com.google.javascript.rhino.head.Node node71 = new com.google.javascript.rhino.head.Node(0, node30, node50, node53, 1);
        com.google.javascript.rhino.head.Node node73 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        com.google.javascript.rhino.head.Node node75 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str76 = node75.toString();
        boolean boolean77 = node75.hasConsistentReturnUsage();
        boolean boolean78 = node75.hasSideEffects();
        node73.addChildrenToFront(node75);
        node75.removeChildren();
        com.google.javascript.rhino.head.Node node81 = new com.google.javascript.rhino.head.Node((int) (short) 0, node16, node50, node75);
        com.google.javascript.rhino.head.Node node82 = node81.getNext();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "40" + "'", str4, "40");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNull(scope14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "40" + "'", str22, "40");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "40" + "'", str36, "40");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "40" + "'", str54, "40");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "40" + "'", str59, "40");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertNull(comment67);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "40" + "'", str69, "40");
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "40" + "'", str76, "40");
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNull(node82);
    }

    @Test
    public void test1591() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1591");
        com.google.javascript.rhino.head.Node node2 = com.google.javascript.rhino.head.Node.newNumber((double) 0L);
        com.google.javascript.rhino.head.Node node5 = com.google.javascript.rhino.head.Node.newString((int) '4', "hi!");
        com.google.javascript.rhino.head.Node node7 = new com.google.javascript.rhino.head.Node((int) (byte) -1);
        java.lang.String str8 = node7.toString();
        com.google.javascript.rhino.head.Node node9 = node7.getFirstChild();
        com.google.javascript.rhino.head.Node node12 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str13 = node12.toString();
        boolean boolean14 = node12.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node16 = com.google.javascript.rhino.head.Node.newString("");
        node16.removeProp(23);
        node12.addChildToFront(node16);
        com.google.javascript.rhino.head.Node node21 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean22 = node21.hasChildren();
        node12.addChildrenToFront(node21);
        int int24 = node21.getLineno();
        com.google.javascript.rhino.head.Node node26 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str27 = node26.toString();
        boolean boolean28 = node26.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node30 = com.google.javascript.rhino.head.Node.newString("");
        node30.removeProp(23);
        node26.addChildToFront(node30);
        com.google.javascript.rhino.head.Node node34 = node26.getFirstChild();
        com.google.javascript.rhino.head.Node node36 = new com.google.javascript.rhino.head.Node((int) (short) 0, node21, node26, 9);
        node7.addChildrenToFront(node36);
        com.google.javascript.rhino.head.Node node39 = new com.google.javascript.rhino.head.Node(100, node2, node5, node7, (int) ' ');
        java.lang.String str40 = node5.getJsDoc();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode41 = null;
        java.lang.String str42 = node5.toStringTree(scriptNode41);
        // The following exception was thrown during execution in test generation
        try {
            node5.resetTargets();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "-1" + "'", str8, "-1");
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "40" + "'", str13, "40");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "40" + "'", str27, "40");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertNull(str42);
    }

    @Test
    public void test1592() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1592");
        com.google.javascript.rhino.head.Node node3 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str4 = node3.toString();
        boolean boolean5 = node3.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node7 = com.google.javascript.rhino.head.Node.newString("");
        node7.removeProp(23);
        node3.addChildToFront(node7);
        com.google.javascript.rhino.head.Node node11 = node3.getFirstChild();
        com.google.javascript.rhino.head.ast.Comment comment12 = node3.getJsDocNode();
        int int13 = node3.getType();
        node3.setDouble((double) 17);
        com.google.javascript.rhino.head.Node node17 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str18 = node17.toString();
        boolean boolean19 = node17.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node21 = com.google.javascript.rhino.head.Node.newString("");
        node21.removeProp(23);
        node17.addChildToFront(node21);
        java.lang.String str25 = node21.getString();
        com.google.javascript.rhino.head.Node node28 = com.google.javascript.rhino.head.Node.newString((int) (short) 0, "-1");
        com.google.javascript.rhino.head.Node node30 = new com.google.javascript.rhino.head.Node(10, node3, node21, node28, 14);
        java.lang.String str31 = node30.getJsDoc();
        com.google.javascript.rhino.head.Node node33 = new com.google.javascript.rhino.head.Node(17, node30, (int) (byte) 0);
        com.google.javascript.rhino.head.Node node35 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str36 = node35.toString();
        com.google.javascript.rhino.head.Node node37 = node35.getLastSibling();
        com.google.javascript.rhino.head.Node node40 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str41 = node40.toString();
        boolean boolean42 = node40.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node44 = com.google.javascript.rhino.head.Node.newString("");
        node44.removeProp(23);
        node40.addChildToFront(node44);
        com.google.javascript.rhino.head.Node node48 = node40.getFirstChild();
        node48.setString("100");
        com.google.javascript.rhino.head.ast.Scope scope51 = node48.getScope();
        com.google.javascript.rhino.head.Node node53 = new com.google.javascript.rhino.head.Node((int) ' ', node48, 2);
        com.google.javascript.rhino.head.Node node54 = node48.getLastSibling();
        node37.addChildToFront(node54);
        node33.addChildrenToBack(node54);
        java.lang.String str57 = node54.toString();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "40" + "'", str4, "40");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNull(comment12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 40 + "'", int13 == 40);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "40" + "'", str18, "40");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "40" + "'", str36, "40");
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "40" + "'", str41, "40");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNull(scope51);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "41" + "'", str57, "41");
    }

    @Test
    public void test1593() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1593");
        com.google.javascript.rhino.head.Node node1 = new com.google.javascript.rhino.head.Node((int) (byte) -1);
        java.lang.String str2 = node1.toString();
        int int5 = node1.getIntProp(11, (int) '4');
        com.google.javascript.rhino.head.Node node7 = node1.setType(15);
        com.google.javascript.rhino.head.Node node10 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str11 = node10.toString();
        boolean boolean12 = node10.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node14 = com.google.javascript.rhino.head.Node.newString("");
        node14.removeProp(23);
        node10.addChildToFront(node14);
        com.google.javascript.rhino.head.Node node18 = new com.google.javascript.rhino.head.Node((int) 'a', node10);
        com.google.javascript.rhino.head.Node node22 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str23 = node22.toString();
        boolean boolean24 = node22.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node26 = com.google.javascript.rhino.head.Node.newString("");
        node26.removeProp(23);
        node22.addChildToFront(node26);
        com.google.javascript.rhino.head.Node node30 = node22.getFirstChild();
        node30.setString("100");
        com.google.javascript.rhino.head.ast.Scope scope33 = node30.getScope();
        com.google.javascript.rhino.head.Node node35 = new com.google.javascript.rhino.head.Node((int) ' ', node30, 2);
        com.google.javascript.rhino.head.Node node36 = node30.getLastSibling();
        com.google.javascript.rhino.head.Node node39 = com.google.javascript.rhino.head.Node.newString(23, "");
        com.google.javascript.rhino.head.Node node40 = node39.getLastSibling();
        com.google.javascript.rhino.head.Node node41 = new com.google.javascript.rhino.head.Node((int) ' ', node36, node39);
        node10.addChildrenToFront(node41);
        com.google.javascript.rhino.head.Node node43 = node41.getLastSibling();
        node43.removeChildren();
        com.google.javascript.rhino.head.Node node46 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        com.google.javascript.rhino.head.Node node48 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str49 = node48.toString();
        boolean boolean50 = node48.hasConsistentReturnUsage();
        boolean boolean51 = node48.hasSideEffects();
        node46.addChildrenToFront(node48);
        node48.removeChildren();
        com.google.javascript.rhino.head.Node node55 = com.google.javascript.rhino.head.Node.newString("hi!");
        node48.addChildrenToBack(node55);
        com.google.javascript.rhino.head.Node node58 = node48.setType((int) (short) -1);
        com.google.javascript.rhino.head.Node node60 = node58.setType(23);
        double double61 = node60.getDouble();
        com.google.javascript.rhino.head.Node node62 = node60.getLastSibling();
        boolean boolean63 = node60.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode64 = null;
        java.lang.String str65 = node60.toStringTree(scriptNode64);
        boolean boolean66 = node60.hasConsistentReturnUsage();
        // The following exception was thrown during execution in test generation
        try {
            node7.replaceChildAfter(node43, node60);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "-1" + "'", str2, "-1");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 52 + "'", int5 == 52);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "40" + "'", str11, "40");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "40" + "'", str23, "40");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNull(scope33);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "40" + "'", str49, "40");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 32.0d + "'", double61 == 32.0d);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNull(str65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
    }

    @Test
    public void test1594() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1594");
        com.google.javascript.rhino.head.Node node2 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str3 = node2.toString();
        boolean boolean4 = node2.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.ast.Comment comment5 = null;
        node2.setJsDocNode(comment5);
        com.google.javascript.rhino.head.Node node9 = com.google.javascript.rhino.head.Node.newString("");
        node9.removeProp(23);
        com.google.javascript.rhino.head.Node node14 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str15 = node14.toString();
        boolean boolean16 = node14.hasConsistentReturnUsage();
        boolean boolean17 = node14.hasSideEffects();
        com.google.javascript.rhino.head.Node node18 = new com.google.javascript.rhino.head.Node(0, node14);
        node9.addChildrenToBack(node18);
        com.google.javascript.rhino.head.Node node20 = new com.google.javascript.rhino.head.Node(9, node9);
        node2.addChildrenToFront(node20);
        com.google.javascript.rhino.head.Node node24 = new com.google.javascript.rhino.head.Node(12);
        node24.putIntProp(14, 3);
        com.google.javascript.rhino.head.Node node28 = new com.google.javascript.rhino.head.Node(6, node24);
        com.google.javascript.rhino.head.Node node29 = node28.getLastChild();
        com.google.javascript.rhino.head.Node node33 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str34 = node33.toString();
        boolean boolean35 = node33.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node37 = com.google.javascript.rhino.head.Node.newString("");
        node37.removeProp(23);
        node33.addChildToFront(node37);
        com.google.javascript.rhino.head.Node node42 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean43 = node42.hasChildren();
        node33.addChildrenToFront(node42);
        com.google.javascript.rhino.head.Node node46 = new com.google.javascript.rhino.head.Node((int) (byte) -1);
        java.lang.String str47 = node46.toString();
        boolean boolean48 = node46.hasChildren();
        com.google.javascript.rhino.head.Node node50 = new com.google.javascript.rhino.head.Node((int) (short) -1, node42, node46, (int) (short) 10);
        com.google.javascript.rhino.head.Node node51 = node50.getLastChild();
        com.google.javascript.rhino.head.Node node56 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str57 = node56.toString();
        boolean boolean58 = node56.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node60 = com.google.javascript.rhino.head.Node.newString("");
        node60.removeProp(23);
        node56.addChildToFront(node60);
        com.google.javascript.rhino.head.Node node64 = new com.google.javascript.rhino.head.Node((int) 'a', node56);
        com.google.javascript.rhino.head.Node node66 = com.google.javascript.rhino.head.Node.newString("-1");
        com.google.javascript.rhino.head.Node node68 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str69 = node68.toString();
        com.google.javascript.rhino.head.Node node70 = node68.getLastChild();
        com.google.javascript.rhino.head.Node node72 = new com.google.javascript.rhino.head.Node((int) (short) -1, node56, node66, node68, (int) (short) -1);
        com.google.javascript.rhino.head.Node node74 = new com.google.javascript.rhino.head.Node((int) (short) 1, node68, 12);
        com.google.javascript.rhino.head.Node node76 = new com.google.javascript.rhino.head.Node(23);
        node76.removeProp(25);
        boolean boolean79 = node76.hasChildren();
        com.google.javascript.rhino.head.Node node80 = new com.google.javascript.rhino.head.Node((-1), node51, node68, node76);
        node29.addChildToBack(node51);
        com.google.javascript.rhino.head.Node node84 = new com.google.javascript.rhino.head.Node((-1), 0);
        com.google.javascript.rhino.head.Node node86 = new com.google.javascript.rhino.head.Node(7, node20, node29, node84, 20);
        node29.removeProp(11);
        com.google.javascript.rhino.head.Node node90 = new com.google.javascript.rhino.head.Node((int) (byte) -1);
        boolean boolean91 = node90.hasSideEffects();
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor92 = node90.iterator();
        // The following exception was thrown during execution in test generation
        try {
            node29.removeChild(node90);
            org.junit.Assert.fail("Expected exception of type java.lang.RuntimeException; message: node is not a child");
        } catch (java.lang.RuntimeException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "40" + "'", str3, "40");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "40" + "'", str15, "40");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "40" + "'", str34, "40");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "-1" + "'", str47, "-1");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "40" + "'", str57, "40");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "40" + "'", str69, "40");
        org.junit.Assert.assertNull(node70);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
        org.junit.Assert.assertNotNull(nodeItor92);
    }

    @Test
    public void test1595() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1595");
        com.google.javascript.rhino.head.Node node4 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str5 = node4.toString();
        boolean boolean6 = node4.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node8 = com.google.javascript.rhino.head.Node.newString("");
        node8.removeProp(23);
        node4.addChildToFront(node8);
        com.google.javascript.rhino.head.Node node13 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean14 = node13.hasChildren();
        node4.addChildrenToFront(node13);
        com.google.javascript.rhino.head.Node node17 = new com.google.javascript.rhino.head.Node((int) (byte) -1);
        java.lang.String str18 = node17.toString();
        boolean boolean19 = node17.hasChildren();
        com.google.javascript.rhino.head.Node node21 = new com.google.javascript.rhino.head.Node((int) (short) -1, node13, node17, (int) (short) 10);
        com.google.javascript.rhino.head.Node node22 = node21.getLastChild();
        com.google.javascript.rhino.head.Node node27 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str28 = node27.toString();
        boolean boolean29 = node27.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node31 = com.google.javascript.rhino.head.Node.newString("");
        node31.removeProp(23);
        node27.addChildToFront(node31);
        com.google.javascript.rhino.head.Node node35 = new com.google.javascript.rhino.head.Node((int) 'a', node27);
        com.google.javascript.rhino.head.Node node37 = com.google.javascript.rhino.head.Node.newString("-1");
        com.google.javascript.rhino.head.Node node39 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str40 = node39.toString();
        com.google.javascript.rhino.head.Node node41 = node39.getLastChild();
        com.google.javascript.rhino.head.Node node43 = new com.google.javascript.rhino.head.Node((int) (short) -1, node27, node37, node39, (int) (short) -1);
        com.google.javascript.rhino.head.Node node45 = new com.google.javascript.rhino.head.Node((int) (short) 1, node39, 12);
        com.google.javascript.rhino.head.Node node47 = new com.google.javascript.rhino.head.Node(23);
        node47.removeProp(25);
        boolean boolean50 = node47.hasChildren();
        com.google.javascript.rhino.head.Node node51 = new com.google.javascript.rhino.head.Node((-1), node22, node39, node47);
        boolean boolean52 = node39.hasSideEffects();
        com.google.javascript.rhino.head.Node node56 = com.google.javascript.rhino.head.Node.newString(23, "");
        com.google.javascript.rhino.head.Node node57 = node56.getLastSibling();
        com.google.javascript.rhino.head.Node node59 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        com.google.javascript.rhino.head.Node node61 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str62 = node61.toString();
        boolean boolean63 = node61.hasConsistentReturnUsage();
        boolean boolean64 = node61.hasSideEffects();
        node59.addChildrenToFront(node61);
        com.google.javascript.rhino.head.Node node67 = new com.google.javascript.rhino.head.Node(26, node56, node59, 20);
        java.lang.String str68 = node67.getJsDoc();
        com.google.javascript.rhino.head.Node node70 = new com.google.javascript.rhino.head.Node(12, node39, node67, 97);
        // The following exception was thrown during execution in test generation
        try {
            node67.resetTargets();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "40" + "'", str5, "40");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "-1" + "'", str18, "-1");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "40" + "'", str28, "40");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "40" + "'", str40, "40");
        org.junit.Assert.assertNull(node41);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "40" + "'", str62, "40");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNull(str68);
    }

    @Test
    public void test1596() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1596");
        com.google.javascript.rhino.head.Node node1 = com.google.javascript.rhino.head.Node.newString("");
        node1.removeProp(23);
        com.google.javascript.rhino.head.Node node6 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str7 = node6.toString();
        boolean boolean8 = node6.hasConsistentReturnUsage();
        boolean boolean9 = node6.hasSideEffects();
        com.google.javascript.rhino.head.Node node10 = new com.google.javascript.rhino.head.Node(0, node6);
        node1.addChildrenToBack(node10);
        com.google.javascript.rhino.head.Node node14 = com.google.javascript.rhino.head.Node.newString(23, "");
        com.google.javascript.rhino.head.Node node15 = node14.getLastSibling();
        node10.addChildrenToBack(node15);
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator17 = node10.new NodeIterator();
        boolean boolean18 = nodeIterator17.hasNext();
        com.google.javascript.rhino.head.Node node19 = nodeIterator17.next();
        com.google.javascript.rhino.head.Node node20 = nodeIterator17.next();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.head.Node node21 = nodeIterator17.next();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "40" + "'", str7, "40");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node20);
    }

    @Test
    public void test1597() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1597");
        com.google.javascript.rhino.head.Node node2 = com.google.javascript.rhino.head.Node.newString("23");
        com.google.javascript.rhino.head.Node node4 = com.google.javascript.rhino.head.Node.newString("");
        node4.removeProp(23);
        com.google.javascript.rhino.head.Node node9 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str10 = node9.toString();
        boolean boolean11 = node9.hasConsistentReturnUsage();
        boolean boolean12 = node9.hasSideEffects();
        com.google.javascript.rhino.head.Node node13 = new com.google.javascript.rhino.head.Node(0, node9);
        node4.addChildrenToBack(node13);
        node2.addChildrenToBack(node13);
        com.google.javascript.rhino.head.Node node17 = new com.google.javascript.rhino.head.Node(11, node13, 0);
        boolean boolean18 = node13.hasConsistentReturnUsage();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "40" + "'", str10, "40");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
    }

    @Test
    public void test1598() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1598");
        com.google.javascript.rhino.head.Node node1 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str2 = node1.toString();
        boolean boolean3 = node1.hasConsistentReturnUsage();
        boolean boolean4 = node1.hasSideEffects();
        com.google.javascript.rhino.head.Node node6 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str7 = node6.toString();
        boolean boolean8 = node6.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node10 = com.google.javascript.rhino.head.Node.newString("");
        node10.removeProp(23);
        node6.addChildToFront(node10);
        com.google.javascript.rhino.head.Node node14 = node6.getFirstChild();
        com.google.javascript.rhino.head.ast.Comment comment15 = node6.getJsDocNode();
        node1.addChildToBack(node6);
        java.lang.String str17 = node1.toString();
        com.google.javascript.rhino.head.Node node19 = node1.setType(25);
        int int20 = node1.getType();
        com.google.javascript.rhino.head.Node node22 = com.google.javascript.rhino.head.Node.newNumber((double) '#');
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.head.Node node23 = node1.getChildBefore(node22);
            org.junit.Assert.fail("Expected exception of type java.lang.RuntimeException; message: node is not a child");
        } catch (java.lang.RuntimeException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "40" + "'", str2, "40");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "40" + "'", str7, "40");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNull(comment15);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "40" + "'", str17, "40");
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 25 + "'", int20 == 25);
        org.junit.Assert.assertNotNull(node22);
    }

    @Test
    public void test1599() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1599");
        com.google.javascript.rhino.head.Node node2 = com.google.javascript.rhino.head.Node.newString(8, "");
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator3 = node2.new NodeIterator();
        org.junit.Assert.assertNotNull(node2);
    }

    @Test
    public void test1600() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1600");
        com.google.javascript.rhino.head.Node node1 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str2 = node1.toString();
        com.google.javascript.rhino.head.Node node3 = node1.getLastSibling();
        com.google.javascript.rhino.head.Node node6 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str7 = node6.toString();
        boolean boolean8 = node6.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node10 = com.google.javascript.rhino.head.Node.newString("");
        node10.removeProp(23);
        node6.addChildToFront(node10);
        com.google.javascript.rhino.head.Node node14 = node6.getFirstChild();
        node14.setString("100");
        com.google.javascript.rhino.head.ast.Scope scope17 = node14.getScope();
        com.google.javascript.rhino.head.Node node19 = new com.google.javascript.rhino.head.Node((int) ' ', node14, 2);
        com.google.javascript.rhino.head.Node node20 = node14.getLastSibling();
        node3.addChildToFront(node20);
        java.lang.Class<?> wildcardClass22 = node20.getClass();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "40" + "'", str2, "40");
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "40" + "'", str7, "40");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNull(scope17);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(wildcardClass22);
    }

    @Test
    public void test1601() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1601");
        com.google.javascript.rhino.head.Node node3 = com.google.javascript.rhino.head.Node.newString((int) '4', "hi!");
        com.google.javascript.rhino.head.Node node7 = com.google.javascript.rhino.head.Node.newString("hi!");
        com.google.javascript.rhino.head.Node node8 = new com.google.javascript.rhino.head.Node(13, node7);
        com.google.javascript.rhino.head.Node node9 = new com.google.javascript.rhino.head.Node(7, node7);
        com.google.javascript.rhino.head.Node node11 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        node9.addChildToFront(node11);
        com.google.javascript.rhino.head.Node node15 = new com.google.javascript.rhino.head.Node(12);
        node15.putIntProp(14, 3);
        com.google.javascript.rhino.head.Node node19 = new com.google.javascript.rhino.head.Node(6, node15);
        com.google.javascript.rhino.head.Node node20 = node19.getLastChild();
        node9.addChildToFront(node19);
        com.google.javascript.rhino.head.Node node22 = new com.google.javascript.rhino.head.Node(97, node3, node9);
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.head.ast.Scope scope23 = node9.getScope();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: com.google.javascript.rhino.head.Node cannot be cast to com.google.javascript.rhino.head.ast.Name");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node20);
    }

    @Test
    public void test1602() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1602");
        com.google.javascript.rhino.head.Node node2 = com.google.javascript.rhino.head.Node.newNumber((double) '#');
        com.google.javascript.rhino.head.Node node4 = com.google.javascript.rhino.head.Node.newString("");
        node4.removeProp(23);
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor7 = node4.iterator();
        java.lang.Object obj9 = node4.getProp((int) (byte) 1);
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator10 = node4.new NodeIterator();
        com.google.javascript.rhino.head.Node node11 = node4.getLastSibling();
        com.google.javascript.rhino.head.Node node14 = new com.google.javascript.rhino.head.Node(12, 25);
        com.google.javascript.rhino.head.Node node17 = new com.google.javascript.rhino.head.Node(12, 25);
        boolean boolean18 = node17.hasChildren();
        com.google.javascript.rhino.head.Node node21 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str22 = node21.toString();
        boolean boolean23 = node21.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node25 = com.google.javascript.rhino.head.Node.newString("");
        node25.removeProp(23);
        node21.addChildToFront(node25);
        com.google.javascript.rhino.head.Node node30 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean31 = node30.hasChildren();
        node21.addChildrenToFront(node30);
        int int33 = node30.getLineno();
        com.google.javascript.rhino.head.Node node35 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str36 = node35.toString();
        boolean boolean37 = node35.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node39 = com.google.javascript.rhino.head.Node.newString("");
        node39.removeProp(23);
        node35.addChildToFront(node39);
        com.google.javascript.rhino.head.Node node43 = node35.getFirstChild();
        com.google.javascript.rhino.head.Node node45 = new com.google.javascript.rhino.head.Node((int) (short) 0, node30, node35, 9);
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator46 = node35.new NodeIterator();
        com.google.javascript.rhino.head.Node node50 = com.google.javascript.rhino.head.Node.newString(23, "");
        com.google.javascript.rhino.head.Node node51 = node50.getLastSibling();
        int int52 = node50.getLineno();
        java.util.Spliterator<com.google.javascript.rhino.head.Node> nodeSpliterator53 = node50.spliterator();
        node35.putProp((int) '4', (java.lang.Object) node50);
        com.google.javascript.rhino.head.Node node57 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        java.lang.String str58 = node57.toString();
        int int59 = node57.getLineno();
        com.google.javascript.rhino.head.Node node61 = com.google.javascript.rhino.head.Node.newNumber((double) 0);
        com.google.javascript.rhino.head.ast.Comment comment62 = node61.getJsDocNode();
        com.google.javascript.rhino.head.Node node64 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        com.google.javascript.rhino.head.Node node66 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str67 = node66.toString();
        boolean boolean68 = node66.hasConsistentReturnUsage();
        boolean boolean69 = node66.hasSideEffects();
        node64.addChildrenToFront(node66);
        com.google.javascript.rhino.head.Node node71 = new com.google.javascript.rhino.head.Node(8, node57, node61, node64);
        com.google.javascript.rhino.head.ast.Comment comment72 = null;
        node64.setJsDocNode(comment72);
        node17.addChildBefore(node35, (com.google.javascript.rhino.head.Node) comment72);
        com.google.javascript.rhino.head.Node node76 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        com.google.javascript.rhino.head.Node node78 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str79 = node78.toString();
        boolean boolean80 = node78.hasConsistentReturnUsage();
        boolean boolean81 = node78.hasSideEffects();
        node76.addChildrenToFront(node78);
        node78.removeChildren();
        com.google.javascript.rhino.head.Node node85 = com.google.javascript.rhino.head.Node.newString("hi!");
        node78.addChildrenToBack(node85);
        com.google.javascript.rhino.head.Node node87 = node78.getFirstChild();
        java.lang.String str88 = node87.getJsDoc();
        int int91 = node87.getIntProp(12, 8);
        int int92 = node87.getLineno();
        node14.addChildAfter(node17, node87);
        com.google.javascript.rhino.head.Node node95 = new com.google.javascript.rhino.head.Node((-1), node2, node4, node17, 32);
        java.lang.String str96 = node95.toString();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(nodeItor7);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "40" + "'", str22, "40");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "40" + "'", str36, "40");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertNotNull(nodeSpliterator53);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "100" + "'", str58, "100");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-1) + "'", int59 == (-1));
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertNull(comment62);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "40" + "'", str67, "40");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "40" + "'", str79, "40");
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(node85);
        org.junit.Assert.assertNotNull(node87);
        org.junit.Assert.assertNull(str88);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 8 + "'", int91 == 8);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + (-1) + "'", int92 == (-1));
        org.junit.Assert.assertEquals("'" + str96 + "' != '" + "-1" + "'", str96, "-1");
    }

    @Test
    public void test1603() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1603");
        com.google.javascript.rhino.head.Node node2 = new com.google.javascript.rhino.head.Node(12);
        node2.putIntProp(14, 3);
        com.google.javascript.rhino.head.Node node6 = new com.google.javascript.rhino.head.Node(6, node2);
        int int9 = node6.getIntProp(18, 26);
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator10 = node6.new NodeIterator();
        boolean boolean11 = nodeIterator10.hasNext();
        com.google.javascript.rhino.head.Node node12 = nodeIterator10.next();
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 26 + "'", int9 == 26);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(node12);
    }

    @Test
    public void test1604() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1604");
        com.google.javascript.rhino.head.Node node2 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        com.google.javascript.rhino.head.Node node4 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str5 = node4.toString();
        boolean boolean6 = node4.hasConsistentReturnUsage();
        boolean boolean7 = node4.hasSideEffects();
        node2.addChildrenToFront(node4);
        com.google.javascript.rhino.head.Node node9 = node4.getLastSibling();
        com.google.javascript.rhino.head.Node node10 = new com.google.javascript.rhino.head.Node((int) ' ', node4);
        // The following exception was thrown during execution in test generation
        try {
            node10.labelId(26);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "40" + "'", str5, "40");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node9);
    }

    @Test
    public void test1605() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1605");
        com.google.javascript.rhino.head.Node node3 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str4 = node3.toString();
        boolean boolean5 = node3.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node7 = com.google.javascript.rhino.head.Node.newString("");
        node7.removeProp(23);
        node3.addChildToFront(node7);
        com.google.javascript.rhino.head.Node node11 = node3.getFirstChild();
        node11.setString("100");
        com.google.javascript.rhino.head.ast.Scope scope14 = node11.getScope();
        com.google.javascript.rhino.head.Node node16 = new com.google.javascript.rhino.head.Node((int) ' ', node11, 2);
        boolean boolean17 = node16.hasChildren();
        com.google.javascript.rhino.head.Node node21 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str22 = node21.toString();
        boolean boolean23 = node21.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node25 = com.google.javascript.rhino.head.Node.newString("");
        node25.removeProp(23);
        node21.addChildToFront(node25);
        com.google.javascript.rhino.head.Node node30 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean31 = node30.hasChildren();
        node21.addChildrenToFront(node30);
        int int33 = node30.getLineno();
        com.google.javascript.rhino.head.Node node35 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str36 = node35.toString();
        boolean boolean37 = node35.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node39 = com.google.javascript.rhino.head.Node.newString("");
        node39.removeProp(23);
        node35.addChildToFront(node39);
        com.google.javascript.rhino.head.Node node43 = node35.getFirstChild();
        com.google.javascript.rhino.head.Node node45 = new com.google.javascript.rhino.head.Node((int) (short) 0, node30, node35, 9);
        boolean boolean46 = node30.hasSideEffects();
        com.google.javascript.rhino.head.Node node49 = com.google.javascript.rhino.head.Node.newString(23, "");
        com.google.javascript.rhino.head.Node node50 = node49.getLastSibling();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator51 = node50.new NodeIterator();
        com.google.javascript.rhino.head.Node node53 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str54 = node53.toString();
        boolean boolean55 = node53.hasConsistentReturnUsage();
        boolean boolean56 = node53.hasSideEffects();
        com.google.javascript.rhino.head.Node node58 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str59 = node58.toString();
        boolean boolean60 = node58.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node62 = com.google.javascript.rhino.head.Node.newString("");
        node62.removeProp(23);
        node58.addChildToFront(node62);
        com.google.javascript.rhino.head.Node node66 = node58.getFirstChild();
        com.google.javascript.rhino.head.ast.Comment comment67 = node58.getJsDocNode();
        node53.addChildToBack(node58);
        java.lang.String str69 = node53.toString();
        com.google.javascript.rhino.head.Node node71 = new com.google.javascript.rhino.head.Node(0, node30, node50, node53, 1);
        com.google.javascript.rhino.head.Node node73 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        com.google.javascript.rhino.head.Node node75 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str76 = node75.toString();
        boolean boolean77 = node75.hasConsistentReturnUsage();
        boolean boolean78 = node75.hasSideEffects();
        node73.addChildrenToFront(node75);
        node75.removeChildren();
        com.google.javascript.rhino.head.Node node81 = new com.google.javascript.rhino.head.Node((int) (short) 0, node16, node50, node75);
        node75.setDouble((double) 11);
        com.google.javascript.rhino.head.Node node84 = node75.getFirstChild();
        com.google.javascript.rhino.head.ast.Comment comment85 = node75.getJsDocNode();
        java.lang.String str86 = node75.getJsDoc();
        java.lang.String str87 = node75.getJsDoc();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "40" + "'", str4, "40");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNull(scope14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "40" + "'", str22, "40");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "40" + "'", str36, "40");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "40" + "'", str54, "40");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "40" + "'", str59, "40");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertNull(comment67);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "40" + "'", str69, "40");
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "40" + "'", str76, "40");
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNull(node84);
        org.junit.Assert.assertNull(comment85);
        org.junit.Assert.assertNull(str86);
        org.junit.Assert.assertNull(str87);
    }

    @Test
    public void test1606() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1606");
        com.google.javascript.rhino.head.Node node2 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str3 = node2.toString();
        boolean boolean4 = node2.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node6 = com.google.javascript.rhino.head.Node.newString("");
        node6.removeProp(23);
        node2.addChildToFront(node6);
        com.google.javascript.rhino.head.Node node10 = node2.getFirstChild();
        node10.setString("100");
        com.google.javascript.rhino.head.ast.Scope scope13 = node10.getScope();
        com.google.javascript.rhino.head.Node node15 = new com.google.javascript.rhino.head.Node((int) ' ', node10, 2);
        java.util.Spliterator<com.google.javascript.rhino.head.Node> nodeSpliterator16 = node10.spliterator();
        com.google.javascript.rhino.head.Node node19 = new com.google.javascript.rhino.head.Node((int) (byte) -1);
        java.lang.String str20 = node19.toString();
        com.google.javascript.rhino.head.ast.Comment comment21 = node19.getJsDocNode();
        node10.putProp((int) '#', (java.lang.Object) node19);
        com.google.javascript.rhino.head.Node node26 = com.google.javascript.rhino.head.Node.newNumber((double) 0L);
        com.google.javascript.rhino.head.Node node29 = com.google.javascript.rhino.head.Node.newString((int) '4', "hi!");
        com.google.javascript.rhino.head.Node node31 = new com.google.javascript.rhino.head.Node((int) (byte) -1);
        java.lang.String str32 = node31.toString();
        com.google.javascript.rhino.head.Node node33 = node31.getFirstChild();
        com.google.javascript.rhino.head.Node node36 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str37 = node36.toString();
        boolean boolean38 = node36.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node40 = com.google.javascript.rhino.head.Node.newString("");
        node40.removeProp(23);
        node36.addChildToFront(node40);
        com.google.javascript.rhino.head.Node node45 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean46 = node45.hasChildren();
        node36.addChildrenToFront(node45);
        int int48 = node45.getLineno();
        com.google.javascript.rhino.head.Node node50 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str51 = node50.toString();
        boolean boolean52 = node50.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node54 = com.google.javascript.rhino.head.Node.newString("");
        node54.removeProp(23);
        node50.addChildToFront(node54);
        com.google.javascript.rhino.head.Node node58 = node50.getFirstChild();
        com.google.javascript.rhino.head.Node node60 = new com.google.javascript.rhino.head.Node((int) (short) 0, node45, node50, 9);
        node31.addChildrenToFront(node60);
        com.google.javascript.rhino.head.Node node63 = new com.google.javascript.rhino.head.Node(100, node26, node29, node31, (int) ' ');
        com.google.javascript.rhino.head.Node node64 = node31.getLastSibling();
        com.google.javascript.rhino.head.Node node65 = new com.google.javascript.rhino.head.Node(21, node64);
        node10.addChildToFront(node65);
        // The following exception was thrown during execution in test generation
        try {
            double double67 = node65.getDouble();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: com.google.javascript.rhino.head.Node cannot be cast to com.google.javascript.rhino.head.ast.NumberLiteral");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "40" + "'", str3, "40");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNull(scope13);
        org.junit.Assert.assertNotNull(nodeSpliterator16);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "-1" + "'", str20, "-1");
        org.junit.Assert.assertNull(comment21);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "-1" + "'", str32, "-1");
        org.junit.Assert.assertNull(node33);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "40" + "'", str37, "40");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "40" + "'", str51, "40");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertNotNull(node64);
    }

    @Test
    public void test1607() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1607");
        com.google.javascript.rhino.head.Node node2 = new com.google.javascript.rhino.head.Node((int) (byte) 1, 8);
        java.lang.String str3 = node2.toString();
        com.google.javascript.rhino.head.Node node4 = node2.getLastChild();
        com.google.javascript.rhino.head.Node node7 = com.google.javascript.rhino.head.Node.newString(23, "");
        com.google.javascript.rhino.head.Node node8 = node7.getLastSibling();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator9 = node8.new NodeIterator();
        node8.setLineno(13);
        java.util.Spliterator<com.google.javascript.rhino.head.Node> nodeSpliterator12 = node8.spliterator();
        java.lang.String str13 = node8.toString();
        node2.addChildrenToBack(node8);
        com.google.javascript.rhino.head.ast.Comment comment15 = node8.getJsDocNode();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "1" + "'", str3, "1");
        org.junit.Assert.assertNull(node4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(nodeSpliterator12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "23" + "'", str13, "23");
        org.junit.Assert.assertNull(comment15);
    }

    @Test
    public void test1608() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1608");
        com.google.javascript.rhino.head.Node node3 = com.google.javascript.rhino.head.Node.newString("-1");
        com.google.javascript.rhino.head.Node node7 = com.google.javascript.rhino.head.Node.newString("hi!");
        com.google.javascript.rhino.head.Node node8 = new com.google.javascript.rhino.head.Node(13, node7);
        com.google.javascript.rhino.head.Node node11 = new com.google.javascript.rhino.head.Node(12);
        node11.putIntProp(14, 3);
        com.google.javascript.rhino.head.Node node15 = new com.google.javascript.rhino.head.Node(6, node11);
        com.google.javascript.rhino.head.Node node16 = node15.getLastChild();
        com.google.javascript.rhino.head.Node node18 = new com.google.javascript.rhino.head.Node((int) (byte) 100, node7, node15, 0);
        com.google.javascript.rhino.head.Node node19 = new com.google.javascript.rhino.head.Node(17, node3, node18);
        com.google.javascript.rhino.head.Node node20 = node3.getNext();
        com.google.javascript.rhino.head.Node node21 = new com.google.javascript.rhino.head.Node(11, node3);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node20);
    }

    @Test
    public void test1609() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1609");
        com.google.javascript.rhino.head.Node node2 = new com.google.javascript.rhino.head.Node(4, 8);
        com.google.javascript.rhino.head.Node node6 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str7 = node6.toString();
        boolean boolean8 = node6.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node10 = com.google.javascript.rhino.head.Node.newString("");
        node10.removeProp(23);
        node6.addChildToFront(node10);
        com.google.javascript.rhino.head.Node node14 = node6.getFirstChild();
        node14.setString("100");
        com.google.javascript.rhino.head.ast.Scope scope17 = node14.getScope();
        com.google.javascript.rhino.head.Node node19 = new com.google.javascript.rhino.head.Node((int) ' ', node14, 2);
        com.google.javascript.rhino.head.Node node20 = node14.getLastSibling();
        com.google.javascript.rhino.head.Node node23 = com.google.javascript.rhino.head.Node.newString(23, "");
        com.google.javascript.rhino.head.Node node24 = node23.getLastSibling();
        com.google.javascript.rhino.head.Node node25 = new com.google.javascript.rhino.head.Node((int) ' ', node20, node23);
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor26 = node23.iterator();
        node2.addChildrenToFront(node23);
        boolean boolean28 = node23.hasSideEffects();
        // The following exception was thrown during execution in test generation
        try {
            int int29 = node23.labelId();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "40" + "'", str7, "40");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNull(scope17);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(nodeItor26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test1610() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1610");
        com.google.javascript.rhino.head.Node node1 = new com.google.javascript.rhino.head.Node((int) (byte) -1);
        com.google.javascript.rhino.head.Node node4 = com.google.javascript.rhino.head.Node.newString("");
        node4.removeProp(23);
        com.google.javascript.rhino.head.Node node9 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str10 = node9.toString();
        boolean boolean11 = node9.hasConsistentReturnUsage();
        boolean boolean12 = node9.hasSideEffects();
        com.google.javascript.rhino.head.Node node13 = new com.google.javascript.rhino.head.Node(0, node9);
        node4.addChildrenToBack(node13);
        com.google.javascript.rhino.head.Node node15 = new com.google.javascript.rhino.head.Node(9, node4);
        node4.removeProp(4);
        com.google.javascript.rhino.head.Node node19 = node4.setType(23);
        node1.addChildrenToFront(node19);
        com.google.javascript.rhino.head.Node node24 = com.google.javascript.rhino.head.Node.newString("hi!");
        com.google.javascript.rhino.head.Node node25 = new com.google.javascript.rhino.head.Node(13, node24);
        com.google.javascript.rhino.head.Node node26 = new com.google.javascript.rhino.head.Node(7, node24);
        com.google.javascript.rhino.head.Node node28 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        node26.addChildToFront(node28);
        com.google.javascript.rhino.head.Node node30 = node26.getLastSibling();
        com.google.javascript.rhino.head.Node node34 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str35 = node34.toString();
        boolean boolean36 = node34.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node38 = com.google.javascript.rhino.head.Node.newString("");
        node38.removeProp(23);
        node34.addChildToFront(node38);
        com.google.javascript.rhino.head.Node node43 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean44 = node43.hasChildren();
        node34.addChildrenToFront(node43);
        int int46 = node43.getLineno();
        com.google.javascript.rhino.head.Node node48 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str49 = node48.toString();
        boolean boolean50 = node48.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node52 = com.google.javascript.rhino.head.Node.newString("");
        node52.removeProp(23);
        node48.addChildToFront(node52);
        com.google.javascript.rhino.head.Node node56 = node48.getFirstChild();
        com.google.javascript.rhino.head.Node node58 = new com.google.javascript.rhino.head.Node((int) (short) 0, node43, node48, 9);
        boolean boolean59 = node43.hasSideEffects();
        com.google.javascript.rhino.head.Node node62 = com.google.javascript.rhino.head.Node.newString(23, "");
        com.google.javascript.rhino.head.Node node63 = node62.getLastSibling();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator64 = node63.new NodeIterator();
        com.google.javascript.rhino.head.Node node66 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str67 = node66.toString();
        boolean boolean68 = node66.hasConsistentReturnUsage();
        boolean boolean69 = node66.hasSideEffects();
        com.google.javascript.rhino.head.Node node71 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str72 = node71.toString();
        boolean boolean73 = node71.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node75 = com.google.javascript.rhino.head.Node.newString("");
        node75.removeProp(23);
        node71.addChildToFront(node75);
        com.google.javascript.rhino.head.Node node79 = node71.getFirstChild();
        com.google.javascript.rhino.head.ast.Comment comment80 = node71.getJsDocNode();
        node66.addChildToBack(node71);
        java.lang.String str82 = node66.toString();
        com.google.javascript.rhino.head.Node node84 = new com.google.javascript.rhino.head.Node(0, node43, node63, node66, 1);
        node30.addChildToBack(node43);
        node19.addChildToFront(node30);
        com.google.javascript.rhino.head.Node node87 = null;
        // The following exception was thrown during execution in test generation
        try {
            node19.addChildToFront(node87);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "40" + "'", str10, "40");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "40" + "'", str35, "40");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "40" + "'", str49, "40");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "40" + "'", str67, "40");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "40" + "'", str72, "40");
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertNull(comment80);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "40" + "'", str82, "40");
    }

    @Test
    public void test1611() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1611");
        com.google.javascript.rhino.head.Node node3 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str4 = node3.toString();
        boolean boolean5 = node3.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node7 = com.google.javascript.rhino.head.Node.newString("");
        node7.removeProp(23);
        node3.addChildToFront(node7);
        com.google.javascript.rhino.head.Node node12 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean13 = node12.hasChildren();
        node3.addChildrenToFront(node12);
        int int15 = node12.getLineno();
        com.google.javascript.rhino.head.Node node17 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str18 = node17.toString();
        boolean boolean19 = node17.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node21 = com.google.javascript.rhino.head.Node.newString("");
        node21.removeProp(23);
        node17.addChildToFront(node21);
        com.google.javascript.rhino.head.Node node25 = node17.getFirstChild();
        com.google.javascript.rhino.head.Node node27 = new com.google.javascript.rhino.head.Node((int) (short) 0, node12, node17, 9);
        boolean boolean28 = node12.hasSideEffects();
        com.google.javascript.rhino.head.Node node31 = com.google.javascript.rhino.head.Node.newString(23, "");
        com.google.javascript.rhino.head.Node node32 = node31.getLastSibling();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator33 = node32.new NodeIterator();
        com.google.javascript.rhino.head.Node node35 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str36 = node35.toString();
        boolean boolean37 = node35.hasConsistentReturnUsage();
        boolean boolean38 = node35.hasSideEffects();
        com.google.javascript.rhino.head.Node node40 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str41 = node40.toString();
        boolean boolean42 = node40.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node44 = com.google.javascript.rhino.head.Node.newString("");
        node44.removeProp(23);
        node40.addChildToFront(node44);
        com.google.javascript.rhino.head.Node node48 = node40.getFirstChild();
        com.google.javascript.rhino.head.ast.Comment comment49 = node40.getJsDocNode();
        node35.addChildToBack(node40);
        java.lang.String str51 = node35.toString();
        com.google.javascript.rhino.head.Node node53 = new com.google.javascript.rhino.head.Node(0, node12, node32, node35, 1);
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator54 = node35.new NodeIterator();
        // The following exception was thrown during execution in test generation
        try {
            node35.setString("52");
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: com.google.javascript.rhino.head.ast.NumberLiteral cannot be cast to com.google.javascript.rhino.head.ast.Name");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "40" + "'", str4, "40");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "40" + "'", str18, "40");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "40" + "'", str36, "40");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "40" + "'", str41, "40");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNull(comment49);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "40" + "'", str51, "40");
    }

    @Test
    public void test1612() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1612");
        com.google.javascript.rhino.head.Node node2 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str3 = node2.toString();
        boolean boolean4 = node2.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node6 = com.google.javascript.rhino.head.Node.newString("");
        node6.removeProp(23);
        node2.addChildToFront(node6);
        com.google.javascript.rhino.head.Node node10 = new com.google.javascript.rhino.head.Node((int) 'a', node2);
        com.google.javascript.rhino.head.Node node14 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str15 = node14.toString();
        boolean boolean16 = node14.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node18 = com.google.javascript.rhino.head.Node.newString("");
        node18.removeProp(23);
        node14.addChildToFront(node18);
        com.google.javascript.rhino.head.Node node22 = node14.getFirstChild();
        node22.setString("100");
        com.google.javascript.rhino.head.ast.Scope scope25 = node22.getScope();
        com.google.javascript.rhino.head.Node node27 = new com.google.javascript.rhino.head.Node((int) ' ', node22, 2);
        com.google.javascript.rhino.head.Node node28 = node22.getLastSibling();
        com.google.javascript.rhino.head.Node node31 = com.google.javascript.rhino.head.Node.newString(23, "");
        com.google.javascript.rhino.head.Node node32 = node31.getLastSibling();
        com.google.javascript.rhino.head.Node node33 = new com.google.javascript.rhino.head.Node((int) ' ', node28, node31);
        node2.addChildrenToFront(node33);
        com.google.javascript.rhino.head.Node node36 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str37 = node36.toString();
        boolean boolean38 = node36.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node40 = com.google.javascript.rhino.head.Node.newString("");
        node40.removeProp(23);
        node36.addChildToFront(node40);
        com.google.javascript.rhino.head.Node node45 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean46 = node45.hasChildren();
        node36.addChildrenToFront(node45);
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator48 = node45.new NodeIterator();
        com.google.javascript.rhino.head.Node node50 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str51 = node50.toString();
        com.google.javascript.rhino.head.Node node52 = node50.getLastSibling();
        com.google.javascript.rhino.head.Node node55 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str56 = node55.toString();
        boolean boolean57 = node55.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node59 = com.google.javascript.rhino.head.Node.newString("");
        node59.removeProp(23);
        node55.addChildToFront(node59);
        com.google.javascript.rhino.head.Node node63 = node55.getFirstChild();
        node63.setString("100");
        com.google.javascript.rhino.head.ast.Scope scope66 = node63.getScope();
        com.google.javascript.rhino.head.Node node68 = new com.google.javascript.rhino.head.Node((int) ' ', node63, 2);
        com.google.javascript.rhino.head.Node node69 = node63.getLastSibling();
        node52.addChildToFront(node69);
        node45.addChildrenToFront(node52);
        node2.addChildrenToBack(node52);
        node2.removeProp(20);
        // The following exception was thrown during execution in test generation
        try {
            int int75 = node2.labelId();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "40" + "'", str3, "40");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "40" + "'", str15, "40");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNull(scope25);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "40" + "'", str37, "40");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "40" + "'", str51, "40");
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "40" + "'", str56, "40");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertNull(scope66);
        org.junit.Assert.assertNotNull(node69);
    }

    @Test
    public void test1613() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1613");
        com.google.javascript.rhino.head.Node node2 = com.google.javascript.rhino.head.Node.newString(0, "100");
        // The following exception was thrown during execution in test generation
        try {
            node2.setDouble((double) 10.0f);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: com.google.javascript.rhino.head.ast.Name cannot be cast to com.google.javascript.rhino.head.ast.NumberLiteral");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
    }

    @Test
    public void test1614() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1614");
        com.google.javascript.rhino.head.Node node1 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        com.google.javascript.rhino.head.Node node3 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str4 = node3.toString();
        boolean boolean5 = node3.hasConsistentReturnUsage();
        boolean boolean6 = node3.hasSideEffects();
        node1.addChildrenToFront(node3);
        com.google.javascript.rhino.head.Node node8 = node3.getLastSibling();
        int int9 = node3.getLineno();
        node3.removeChildren();
        com.google.javascript.rhino.head.Node node12 = com.google.javascript.rhino.head.Node.newString("");
        node12.removeProp(23);
        com.google.javascript.rhino.head.Node node17 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str18 = node17.toString();
        boolean boolean19 = node17.hasConsistentReturnUsage();
        boolean boolean20 = node17.hasSideEffects();
        com.google.javascript.rhino.head.Node node21 = new com.google.javascript.rhino.head.Node(0, node17);
        node12.addChildrenToBack(node21);
        com.google.javascript.rhino.head.Node node25 = com.google.javascript.rhino.head.Node.newString(23, "");
        com.google.javascript.rhino.head.Node node26 = node25.getLastSibling();
        node21.addChildrenToBack(node26);
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator28 = node21.new NodeIterator();
        boolean boolean29 = node21.hasConsistentReturnUsage();
        node3.addChildrenToFront(node21);
        java.util.Spliterator<com.google.javascript.rhino.head.Node> nodeSpliterator31 = node3.spliterator();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "40" + "'", str4, "40");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "40" + "'", str18, "40");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(nodeSpliterator31);
    }

    @Test
    public void test1615() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1615");
        com.google.javascript.rhino.head.Node node3 = com.google.javascript.rhino.head.Node.newString(23, "");
        com.google.javascript.rhino.head.Node node4 = node3.getLastSibling();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator5 = node4.new NodeIterator();
        node4.setLineno(13);
        boolean boolean8 = node4.hasSideEffects();
        com.google.javascript.rhino.head.Node node12 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str13 = node12.toString();
        boolean boolean14 = node12.hasConsistentReturnUsage();
        boolean boolean15 = node12.hasSideEffects();
        com.google.javascript.rhino.head.Node node16 = new com.google.javascript.rhino.head.Node(0, node12);
        com.google.javascript.rhino.head.Node node19 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str20 = node19.toString();
        boolean boolean21 = node19.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node23 = com.google.javascript.rhino.head.Node.newString("");
        node23.removeProp(23);
        node19.addChildToFront(node23);
        com.google.javascript.rhino.head.Node node28 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean29 = node28.hasChildren();
        node19.addChildrenToFront(node28);
        com.google.javascript.rhino.head.Node node32 = new com.google.javascript.rhino.head.Node((int) (byte) -1);
        java.lang.String str33 = node32.toString();
        boolean boolean34 = node32.hasChildren();
        com.google.javascript.rhino.head.Node node36 = new com.google.javascript.rhino.head.Node((int) (short) -1, node28, node32, (int) (short) 10);
        com.google.javascript.rhino.head.Node node39 = com.google.javascript.rhino.head.Node.newString(23, "");
        com.google.javascript.rhino.head.Node node41 = new com.google.javascript.rhino.head.Node((int) (byte) 10, node12, node32, node39, (int) (short) 0);
        com.google.javascript.rhino.head.Node node43 = node41.setType(16);
        com.google.javascript.rhino.head.Node node47 = com.google.javascript.rhino.head.Node.newString("hi!");
        com.google.javascript.rhino.head.Node node48 = new com.google.javascript.rhino.head.Node(13, node47);
        com.google.javascript.rhino.head.Node node49 = new com.google.javascript.rhino.head.Node(7, node47);
        com.google.javascript.rhino.head.Node node51 = new com.google.javascript.rhino.head.Node(97, node4, node43, node47, 8);
        com.google.javascript.rhino.head.Node node52 = node43.getLastSibling();
        com.google.javascript.rhino.head.ast.Comment comment53 = node43.getJsDocNode();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "40" + "'", str13, "40");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "40" + "'", str20, "40");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "-1" + "'", str33, "-1");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertNull(comment53);
    }

    @Test
    public void test1616() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1616");
        com.google.javascript.rhino.head.Node node3 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str4 = node3.toString();
        boolean boolean5 = node3.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node7 = com.google.javascript.rhino.head.Node.newString("");
        node7.removeProp(23);
        node3.addChildToFront(node7);
        com.google.javascript.rhino.head.Node node11 = node3.getFirstChild();
        com.google.javascript.rhino.head.Node node13 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        node11.addChildrenToBack(node13);
        com.google.javascript.rhino.head.Node node16 = com.google.javascript.rhino.head.Node.newString("");
        int int19 = node16.getIntProp(17, (int) (byte) -1);
        com.google.javascript.rhino.head.Node node20 = new com.google.javascript.rhino.head.Node((int) (short) 10, node11, node16);
        com.google.javascript.rhino.head.Node node21 = node11.getNext();
        com.google.javascript.rhino.head.Node node23 = com.google.javascript.rhino.head.Node.newString("");
        node23.removeProp(23);
        com.google.javascript.rhino.head.Node node28 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str29 = node28.toString();
        boolean boolean30 = node28.hasConsistentReturnUsage();
        boolean boolean31 = node28.hasSideEffects();
        com.google.javascript.rhino.head.Node node32 = new com.google.javascript.rhino.head.Node(0, node28);
        node23.addChildrenToBack(node32);
        com.google.javascript.rhino.head.Node node36 = com.google.javascript.rhino.head.Node.newString(23, "");
        com.google.javascript.rhino.head.Node node37 = node36.getLastSibling();
        node32.addChildrenToBack(node37);
        node21.addChildToBack(node32);
        com.google.javascript.rhino.head.Node node42 = com.google.javascript.rhino.head.Node.newString(10, "100");
        com.google.javascript.rhino.head.Node node46 = com.google.javascript.rhino.head.Node.newString("hi!");
        com.google.javascript.rhino.head.Node node47 = new com.google.javascript.rhino.head.Node(13, node46);
        com.google.javascript.rhino.head.Node node48 = new com.google.javascript.rhino.head.Node(7, node46);
        com.google.javascript.rhino.head.Node node50 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        node48.addChildToFront(node50);
        com.google.javascript.rhino.head.Node node54 = new com.google.javascript.rhino.head.Node(12);
        node54.putIntProp(14, 3);
        com.google.javascript.rhino.head.Node node58 = new com.google.javascript.rhino.head.Node(6, node54);
        com.google.javascript.rhino.head.Node node59 = node58.getLastChild();
        node48.addChildToFront(node58);
        node42.addChildToFront(node48);
        com.google.javascript.rhino.head.Node node63 = com.google.javascript.rhino.head.Node.newNumber((double) 0L);
        com.google.javascript.rhino.head.Node node65 = com.google.javascript.rhino.head.Node.newString("");
        node65.removeProp(23);
        com.google.javascript.rhino.head.Node node70 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str71 = node70.toString();
        boolean boolean72 = node70.hasConsistentReturnUsage();
        boolean boolean73 = node70.hasSideEffects();
        com.google.javascript.rhino.head.Node node74 = new com.google.javascript.rhino.head.Node(0, node70);
        node65.addChildrenToBack(node74);
        node63.addChildToFront(node65);
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor77 = node63.iterator();
        com.google.javascript.rhino.head.Node node79 = new com.google.javascript.rhino.head.Node(14, node21, node42, node63, (int) (byte) -1);
        // The following exception was thrown during execution in test generation
        try {
            int int81 = node21.getExistingIntProp(14);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "40" + "'", str4, "40");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "40" + "'", str29, "40");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "40" + "'", str71, "40");
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(nodeItor77);
    }

    @Test
    public void test1617() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1617");
        com.google.javascript.rhino.head.Node node2 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        com.google.javascript.rhino.head.Node node4 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str5 = node4.toString();
        boolean boolean6 = node4.hasConsistentReturnUsage();
        boolean boolean7 = node4.hasSideEffects();
        node2.addChildrenToFront(node4);
        node4.removeChildren();
        com.google.javascript.rhino.head.Node node11 = com.google.javascript.rhino.head.Node.newString("hi!");
        node4.addChildrenToBack(node11);
        boolean boolean13 = node4.hasSideEffects();
        com.google.javascript.rhino.head.Node node14 = node4.getFirstChild();
        boolean boolean15 = node4.hasSideEffects();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator16 = node4.new NodeIterator();
        com.google.javascript.rhino.head.Node node18 = new com.google.javascript.rhino.head.Node((int) (short) 0, node4, 18);
        com.google.javascript.rhino.head.Node node20 = com.google.javascript.rhino.head.Node.newNumber((double) 10.0f);
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator21 = node20.new NodeIterator();
        com.google.javascript.rhino.head.Node node24 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str25 = node24.toString();
        boolean boolean26 = node24.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node28 = com.google.javascript.rhino.head.Node.newString("");
        node28.removeProp(23);
        node24.addChildToFront(node28);
        com.google.javascript.rhino.head.Node node32 = node24.getFirstChild();
        com.google.javascript.rhino.head.Node node34 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        node32.addChildrenToBack(node34);
        com.google.javascript.rhino.head.Node node37 = com.google.javascript.rhino.head.Node.newString("");
        int int40 = node37.getIntProp(17, (int) (byte) -1);
        com.google.javascript.rhino.head.Node node41 = new com.google.javascript.rhino.head.Node((int) (short) 10, node32, node37);
        com.google.javascript.rhino.head.Node node45 = com.google.javascript.rhino.head.Node.newString(23, "");
        com.google.javascript.rhino.head.Node node46 = node45.getLastSibling();
        com.google.javascript.rhino.head.Node node48 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        com.google.javascript.rhino.head.Node node50 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str51 = node50.toString();
        boolean boolean52 = node50.hasConsistentReturnUsage();
        boolean boolean53 = node50.hasSideEffects();
        node48.addChildrenToFront(node50);
        com.google.javascript.rhino.head.Node node56 = new com.google.javascript.rhino.head.Node(26, node45, node48, 20);
        boolean boolean57 = node56.hasSideEffects();
        java.lang.String str58 = node56.getJsDoc();
        node37.addChildToFront(node56);
        node20.addChildToFront(node37);
        boolean boolean61 = node20.hasChildren();
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor62 = node20.iterator();
        node18.addChildrenToFront(node20);
        int int66 = node18.getIntProp((int) '4', (int) 'a');
        com.google.javascript.rhino.head.Node node70 = com.google.javascript.rhino.head.Node.newNumber((double) 1.0f);
        java.lang.Object obj72 = node70.getProp((int) 'a');
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor73 = node70.iterator();
        int int76 = node70.getIntProp((int) (byte) -1, 17);
        com.google.javascript.rhino.head.Node node80 = com.google.javascript.rhino.head.Node.newString("hi!");
        com.google.javascript.rhino.head.Node node81 = new com.google.javascript.rhino.head.Node(13, node80);
        com.google.javascript.rhino.head.Node node82 = new com.google.javascript.rhino.head.Node(7, node80);
        com.google.javascript.rhino.head.Node node84 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        node82.addChildToFront(node84);
        com.google.javascript.rhino.head.Node node88 = new com.google.javascript.rhino.head.Node(12);
        node88.putIntProp(14, 3);
        com.google.javascript.rhino.head.Node node92 = new com.google.javascript.rhino.head.Node(6, node88);
        com.google.javascript.rhino.head.Node node93 = node92.getLastChild();
        node82.addChildToFront(node92);
        node70.addChildToFront(node92);
        com.google.javascript.rhino.head.Node node97 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        com.google.javascript.rhino.head.Node node98 = new com.google.javascript.rhino.head.Node((int) (byte) 10, node70, node97);
        node18.putProp(17, (java.lang.Object) (byte) 10);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "40" + "'", str5, "40");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "40" + "'", str25, "40");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "40" + "'", str51, "40");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNull(str58);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(nodeItor62);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 97 + "'", int66 == 97);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertNull(obj72);
        org.junit.Assert.assertNotNull(nodeItor73);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 17 + "'", int76 == 17);
        org.junit.Assert.assertNotNull(node80);
        org.junit.Assert.assertNotNull(node84);
        org.junit.Assert.assertNotNull(node93);
        org.junit.Assert.assertNotNull(node97);
    }

    @Test
    public void test1618() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1618");
        com.google.javascript.rhino.head.Node node4 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str5 = node4.toString();
        boolean boolean6 = node4.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node8 = com.google.javascript.rhino.head.Node.newString("");
        node8.removeProp(23);
        node4.addChildToFront(node8);
        com.google.javascript.rhino.head.Node node12 = node4.getFirstChild();
        node12.setString("100");
        com.google.javascript.rhino.head.ast.Scope scope15 = node12.getScope();
        com.google.javascript.rhino.head.Node node17 = new com.google.javascript.rhino.head.Node((int) ' ', node12, 2);
        java.util.Spliterator<com.google.javascript.rhino.head.Node> nodeSpliterator18 = node12.spliterator();
        node12.putIntProp(100, (int) (byte) 0);
        com.google.javascript.rhino.head.Node node23 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        com.google.javascript.rhino.head.Node node25 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str26 = node25.toString();
        boolean boolean27 = node25.hasConsistentReturnUsage();
        boolean boolean28 = node25.hasSideEffects();
        node23.addChildrenToFront(node25);
        com.google.javascript.rhino.head.Node node32 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str33 = node32.toString();
        boolean boolean34 = node32.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node36 = com.google.javascript.rhino.head.Node.newString("");
        node36.removeProp(23);
        node32.addChildToFront(node36);
        com.google.javascript.rhino.head.Node node41 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean42 = node41.hasChildren();
        node32.addChildrenToFront(node41);
        int int44 = node41.getLineno();
        com.google.javascript.rhino.head.Node node46 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str47 = node46.toString();
        boolean boolean48 = node46.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node50 = com.google.javascript.rhino.head.Node.newString("");
        node50.removeProp(23);
        node46.addChildToFront(node50);
        com.google.javascript.rhino.head.Node node54 = node46.getFirstChild();
        com.google.javascript.rhino.head.Node node56 = new com.google.javascript.rhino.head.Node((int) (short) 0, node41, node46, 9);
        com.google.javascript.rhino.head.Node node58 = new com.google.javascript.rhino.head.Node((int) (short) 100, node12, node25, node41, 25);
        node12.removeProp(100);
        com.google.javascript.rhino.head.Node node61 = new com.google.javascript.rhino.head.Node(22, node12);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "40" + "'", str5, "40");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNull(scope15);
        org.junit.Assert.assertNotNull(nodeSpliterator18);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "40" + "'", str26, "40");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "40" + "'", str33, "40");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "40" + "'", str47, "40");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node54);
    }

    @Test
    public void test1619() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1619");
        com.google.javascript.rhino.head.Node node2 = new com.google.javascript.rhino.head.Node(12);
        node2.putIntProp(14, 3);
        com.google.javascript.rhino.head.Node node6 = new com.google.javascript.rhino.head.Node(6, node2);
        int int9 = node6.getIntProp(18, 26);
        com.google.javascript.rhino.head.Node node14 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str15 = node14.toString();
        boolean boolean16 = node14.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node18 = com.google.javascript.rhino.head.Node.newString("");
        node18.removeProp(23);
        node14.addChildToFront(node18);
        com.google.javascript.rhino.head.Node node23 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean24 = node23.hasChildren();
        node14.addChildrenToFront(node23);
        int int26 = node23.getLineno();
        com.google.javascript.rhino.head.Node node28 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str29 = node28.toString();
        boolean boolean30 = node28.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node32 = com.google.javascript.rhino.head.Node.newString("");
        node32.removeProp(23);
        node28.addChildToFront(node32);
        com.google.javascript.rhino.head.Node node36 = node28.getFirstChild();
        com.google.javascript.rhino.head.Node node38 = new com.google.javascript.rhino.head.Node((int) (short) 0, node23, node28, 9);
        boolean boolean39 = node23.hasSideEffects();
        com.google.javascript.rhino.head.Node node42 = com.google.javascript.rhino.head.Node.newString(23, "");
        com.google.javascript.rhino.head.Node node43 = node42.getLastSibling();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator44 = node43.new NodeIterator();
        com.google.javascript.rhino.head.Node node46 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str47 = node46.toString();
        boolean boolean48 = node46.hasConsistentReturnUsage();
        boolean boolean49 = node46.hasSideEffects();
        com.google.javascript.rhino.head.Node node51 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str52 = node51.toString();
        boolean boolean53 = node51.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node55 = com.google.javascript.rhino.head.Node.newString("");
        node55.removeProp(23);
        node51.addChildToFront(node55);
        com.google.javascript.rhino.head.Node node59 = node51.getFirstChild();
        com.google.javascript.rhino.head.ast.Comment comment60 = node51.getJsDocNode();
        node46.addChildToBack(node51);
        java.lang.String str62 = node46.toString();
        com.google.javascript.rhino.head.Node node64 = new com.google.javascript.rhino.head.Node(0, node23, node43, node46, 1);
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator65 = node46.new NodeIterator();
        node6.putProp(19, (java.lang.Object) node46);
        node6.removeChildren();
        node6.putIntProp(7, 5);
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator71 = node6.new NodeIterator();
        // The following exception was thrown during execution in test generation
        try {
            nodeIterator71.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: next() has not been called");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 26 + "'", int9 == 26);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "40" + "'", str15, "40");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "40" + "'", str29, "40");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "40" + "'", str47, "40");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "40" + "'", str52, "40");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertNull(comment60);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "40" + "'", str62, "40");
    }

    @Test
    public void test1620() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1620");
        com.google.javascript.rhino.head.Node node4 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str5 = node4.toString();
        boolean boolean6 = node4.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node8 = com.google.javascript.rhino.head.Node.newString("");
        node8.removeProp(23);
        node4.addChildToFront(node8);
        com.google.javascript.rhino.head.Node node12 = new com.google.javascript.rhino.head.Node((int) 'a', node4);
        com.google.javascript.rhino.head.Node node14 = com.google.javascript.rhino.head.Node.newString("-1");
        com.google.javascript.rhino.head.Node node16 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str17 = node16.toString();
        com.google.javascript.rhino.head.Node node18 = node16.getLastChild();
        com.google.javascript.rhino.head.Node node20 = new com.google.javascript.rhino.head.Node((int) (short) -1, node4, node14, node16, (int) (short) -1);
        java.lang.Object obj22 = node4.getProp(0);
        java.lang.String str23 = node4.getJsDoc();
        com.google.javascript.rhino.head.Node node26 = new com.google.javascript.rhino.head.Node(4, 8);
        com.google.javascript.rhino.head.Node node30 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str31 = node30.toString();
        boolean boolean32 = node30.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node34 = com.google.javascript.rhino.head.Node.newString("");
        node34.removeProp(23);
        node30.addChildToFront(node34);
        com.google.javascript.rhino.head.Node node38 = node30.getFirstChild();
        node38.setString("100");
        com.google.javascript.rhino.head.ast.Scope scope41 = node38.getScope();
        com.google.javascript.rhino.head.Node node43 = new com.google.javascript.rhino.head.Node((int) ' ', node38, 2);
        com.google.javascript.rhino.head.Node node44 = node38.getLastSibling();
        com.google.javascript.rhino.head.Node node47 = com.google.javascript.rhino.head.Node.newString(23, "");
        com.google.javascript.rhino.head.Node node48 = node47.getLastSibling();
        com.google.javascript.rhino.head.Node node49 = new com.google.javascript.rhino.head.Node((int) ' ', node44, node47);
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor50 = node47.iterator();
        node26.addChildrenToFront(node47);
        com.google.javascript.rhino.head.Node node53 = com.google.javascript.rhino.head.Node.newString("23");
        node53.removeChildren();
        com.google.javascript.rhino.head.Node node56 = new com.google.javascript.rhino.head.Node((int) (byte) 10, node4, node26, node53, 25);
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator57 = node4.new NodeIterator();
        // The following exception was thrown during execution in test generation
        try {
            nodeIterator57.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: next() has not been called");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "40" + "'", str5, "40");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "40" + "'", str17, "40");
        org.junit.Assert.assertNull(node18);
        org.junit.Assert.assertNull(obj22);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "40" + "'", str31, "40");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNull(scope41);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNotNull(nodeItor50);
        org.junit.Assert.assertNotNull(node53);
    }

    @Test
    public void test1621() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1621");
        com.google.javascript.rhino.head.Node node3 = com.google.javascript.rhino.head.Node.newNumber((double) 7);
        node3.putIntProp(0, 18);
        com.google.javascript.rhino.head.Node node7 = new com.google.javascript.rhino.head.Node(0, node3);
        com.google.javascript.rhino.head.ast.Comment comment8 = node7.getJsDocNode();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.head.Node node10 = new com.google.javascript.rhino.head.Node((int) (short) 10, (com.google.javascript.rhino.head.Node) comment8, 97);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNull(comment8);
    }

    @Test
    public void test1622() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1622");
        com.google.javascript.rhino.head.Node node1 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str2 = node1.toString();
        boolean boolean3 = node1.hasConsistentReturnUsage();
        java.lang.String str4 = node1.toString();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "40" + "'", str2, "40");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "40" + "'", str4, "40");
    }

    @Test
    public void test1623() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1623");
        com.google.javascript.rhino.head.Node node3 = new com.google.javascript.rhino.head.Node(12);
        node3.putIntProp(14, 3);
        com.google.javascript.rhino.head.Node node7 = new com.google.javascript.rhino.head.Node(6, node3);
        com.google.javascript.rhino.head.Node node8 = node7.getLastChild();
        com.google.javascript.rhino.head.Node node11 = com.google.javascript.rhino.head.Node.newString(23, "");
        com.google.javascript.rhino.head.Node node12 = node11.getLastSibling();
        com.google.javascript.rhino.head.Node node13 = node11.getLastSibling();
        com.google.javascript.rhino.head.Node node15 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str16 = node15.toString();
        boolean boolean17 = node15.hasConsistentReturnUsage();
        boolean boolean18 = node15.hasSideEffects();
        node15.setLineno((int) '4');
        com.google.javascript.rhino.head.Node node22 = node15.setType((int) '4');
        int int23 = node22.getLineno();
        com.google.javascript.rhino.head.Node node25 = new com.google.javascript.rhino.head.Node(24, node8, node11, node22, 8);
        // The following exception was thrown during execution in test generation
        try {
            int int26 = node22.labelId();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "40" + "'", str16, "40");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 52 + "'", int23 == 52);
    }

    @Test
    public void test1624() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1624");
        com.google.javascript.rhino.head.Node node1 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str2 = node1.toString();
        boolean boolean3 = node1.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node5 = com.google.javascript.rhino.head.Node.newString("");
        node5.removeProp(23);
        node1.addChildToFront(node5);
        com.google.javascript.rhino.head.Node node9 = node1.getFirstChild();
        com.google.javascript.rhino.head.Node node11 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        node9.addChildrenToBack(node11);
        com.google.javascript.rhino.head.Node node13 = node9.getLastChild();
        boolean boolean14 = node13.hasChildren();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "40" + "'", str2, "40");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test1625() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1625");
        com.google.javascript.rhino.head.Node node1 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str2 = node1.toString();
        com.google.javascript.rhino.head.ast.Comment comment3 = null;
        node1.setJsDocNode(comment3);
        node1.setLineno((int) (short) 1);
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator7 = node1.new NodeIterator();
        boolean boolean8 = nodeIterator7.hasNext();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.head.Node node9 = nodeIterator7.next();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "40" + "'", str2, "40");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test1626() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1626");
        com.google.javascript.rhino.head.Node node1 = com.google.javascript.rhino.head.Node.newString("");
        node1.removeProp(23);
        com.google.javascript.rhino.head.Node node6 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str7 = node6.toString();
        boolean boolean8 = node6.hasConsistentReturnUsage();
        boolean boolean9 = node6.hasSideEffects();
        com.google.javascript.rhino.head.Node node10 = new com.google.javascript.rhino.head.Node(0, node6);
        node1.addChildrenToBack(node10);
        com.google.javascript.rhino.head.Node node14 = com.google.javascript.rhino.head.Node.newString(23, "");
        com.google.javascript.rhino.head.Node node15 = node14.getLastSibling();
        node10.addChildrenToBack(node15);
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator17 = node10.new NodeIterator();
        boolean boolean18 = nodeIterator17.hasNext();
        com.google.javascript.rhino.head.Node node19 = nodeIterator17.next();
        com.google.javascript.rhino.head.Node node20 = nodeIterator17.next();
        java.lang.Class<?> wildcardClass21 = nodeIterator17.getClass();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "40" + "'", str7, "40");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(wildcardClass21);
    }

    @Test
    public void test1627() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1627");
        com.google.javascript.rhino.head.Node node3 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str4 = node3.toString();
        boolean boolean5 = node3.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node7 = com.google.javascript.rhino.head.Node.newString("");
        node7.removeProp(23);
        node3.addChildToFront(node7);
        com.google.javascript.rhino.head.Node node11 = new com.google.javascript.rhino.head.Node((int) 'a', node3);
        com.google.javascript.rhino.head.Node node15 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str16 = node15.toString();
        boolean boolean17 = node15.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node19 = com.google.javascript.rhino.head.Node.newString("");
        node19.removeProp(23);
        node15.addChildToFront(node19);
        com.google.javascript.rhino.head.Node node23 = node15.getFirstChild();
        node23.setString("100");
        com.google.javascript.rhino.head.ast.Scope scope26 = node23.getScope();
        com.google.javascript.rhino.head.Node node28 = new com.google.javascript.rhino.head.Node((int) ' ', node23, 2);
        com.google.javascript.rhino.head.Node node29 = node23.getLastSibling();
        com.google.javascript.rhino.head.Node node32 = com.google.javascript.rhino.head.Node.newString(23, "");
        com.google.javascript.rhino.head.Node node33 = node32.getLastSibling();
        com.google.javascript.rhino.head.Node node34 = new com.google.javascript.rhino.head.Node((int) ' ', node29, node32);
        node3.addChildrenToFront(node34);
        com.google.javascript.rhino.head.Node node37 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str38 = node37.toString();
        boolean boolean39 = node37.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node41 = com.google.javascript.rhino.head.Node.newString("");
        node41.removeProp(23);
        node37.addChildToFront(node41);
        com.google.javascript.rhino.head.Node node46 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean47 = node46.hasChildren();
        node37.addChildrenToFront(node46);
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator49 = node46.new NodeIterator();
        com.google.javascript.rhino.head.Node node51 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str52 = node51.toString();
        com.google.javascript.rhino.head.Node node53 = node51.getLastSibling();
        com.google.javascript.rhino.head.Node node56 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str57 = node56.toString();
        boolean boolean58 = node56.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node60 = com.google.javascript.rhino.head.Node.newString("");
        node60.removeProp(23);
        node56.addChildToFront(node60);
        com.google.javascript.rhino.head.Node node64 = node56.getFirstChild();
        node64.setString("100");
        com.google.javascript.rhino.head.ast.Scope scope67 = node64.getScope();
        com.google.javascript.rhino.head.Node node69 = new com.google.javascript.rhino.head.Node((int) ' ', node64, 2);
        com.google.javascript.rhino.head.Node node70 = node64.getLastSibling();
        node53.addChildToFront(node70);
        node46.addChildrenToFront(node53);
        node3.addChildrenToBack(node53);
        node3.removeProp(20);
        com.google.javascript.rhino.head.Node node76 = new com.google.javascript.rhino.head.Node((int) '#', node3);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "40" + "'", str4, "40");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "40" + "'", str16, "40");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNull(scope26);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "40" + "'", str38, "40");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "40" + "'", str52, "40");
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "40" + "'", str57, "40");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertNull(scope67);
        org.junit.Assert.assertNotNull(node70);
    }

    @Test
    public void test1628() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1628");
        com.google.javascript.rhino.head.Node node2 = com.google.javascript.rhino.head.Node.newNumber((double) 7);
        node2.putIntProp(0, 18);
        com.google.javascript.rhino.head.Node node6 = new com.google.javascript.rhino.head.Node(0, node2);
        node6.putIntProp(14, 13);
        com.google.javascript.rhino.head.Node node13 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str14 = node13.toString();
        boolean boolean15 = node13.hasConsistentReturnUsage();
        boolean boolean16 = node13.hasSideEffects();
        com.google.javascript.rhino.head.Node node17 = new com.google.javascript.rhino.head.Node(0, node13);
        com.google.javascript.rhino.head.Node node20 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str21 = node20.toString();
        boolean boolean22 = node20.hasConsistentReturnUsage();
        boolean boolean23 = node20.hasSideEffects();
        com.google.javascript.rhino.head.Node node25 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str26 = node25.toString();
        boolean boolean27 = node25.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node29 = com.google.javascript.rhino.head.Node.newString("");
        node29.removeProp(23);
        node25.addChildToFront(node29);
        com.google.javascript.rhino.head.Node node33 = node25.getFirstChild();
        com.google.javascript.rhino.head.ast.Comment comment34 = node25.getJsDocNode();
        node20.addChildToBack(node25);
        boolean boolean36 = node25.hasConsistentReturnUsage();
        node13.putProp((int) (short) 1, (java.lang.Object) node25);
        com.google.javascript.rhino.head.Node node39 = new com.google.javascript.rhino.head.Node((int) '#');
        com.google.javascript.rhino.head.Node node41 = new com.google.javascript.rhino.head.Node((int) (short) 100, node13, node39, 17);
        node6.addChildrenToBack(node39);
        // The following exception was thrown during execution in test generation
        try {
            double double43 = node39.getDouble();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: com.google.javascript.rhino.head.Node cannot be cast to com.google.javascript.rhino.head.ast.NumberLiteral");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "40" + "'", str14, "40");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "40" + "'", str21, "40");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "40" + "'", str26, "40");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNull(comment34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
    }

    @Test
    public void test1629() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1629");
        com.google.javascript.rhino.head.Node node3 = com.google.javascript.rhino.head.Node.newString(0, "32");
        com.google.javascript.rhino.head.Node node8 = com.google.javascript.rhino.head.Node.newString("hi!");
        com.google.javascript.rhino.head.Node node9 = new com.google.javascript.rhino.head.Node(13, node8);
        com.google.javascript.rhino.head.Node node12 = new com.google.javascript.rhino.head.Node(12);
        node12.putIntProp(14, 3);
        com.google.javascript.rhino.head.Node node16 = new com.google.javascript.rhino.head.Node(6, node12);
        com.google.javascript.rhino.head.Node node17 = node16.getLastChild();
        com.google.javascript.rhino.head.Node node19 = new com.google.javascript.rhino.head.Node((int) (byte) 100, node8, node16, 0);
        com.google.javascript.rhino.head.Node node21 = com.google.javascript.rhino.head.Node.newNumber((double) 1.0f);
        node16.addChildrenToFront(node21);
        com.google.javascript.rhino.head.Node node26 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str27 = node26.toString();
        boolean boolean28 = node26.hasConsistentReturnUsage();
        boolean boolean29 = node26.hasSideEffects();
        com.google.javascript.rhino.head.Node node30 = new com.google.javascript.rhino.head.Node(0, node26);
        com.google.javascript.rhino.head.Node node33 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str34 = node33.toString();
        boolean boolean35 = node33.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node37 = com.google.javascript.rhino.head.Node.newString("");
        node37.removeProp(23);
        node33.addChildToFront(node37);
        com.google.javascript.rhino.head.Node node42 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean43 = node42.hasChildren();
        node33.addChildrenToFront(node42);
        com.google.javascript.rhino.head.Node node46 = new com.google.javascript.rhino.head.Node((int) (byte) -1);
        java.lang.String str47 = node46.toString();
        boolean boolean48 = node46.hasChildren();
        com.google.javascript.rhino.head.Node node50 = new com.google.javascript.rhino.head.Node((int) (short) -1, node42, node46, (int) (short) 10);
        com.google.javascript.rhino.head.Node node53 = com.google.javascript.rhino.head.Node.newString(23, "");
        com.google.javascript.rhino.head.Node node55 = new com.google.javascript.rhino.head.Node((int) (byte) 10, node26, node46, node53, (int) (short) 0);
        com.google.javascript.rhino.head.Node node57 = node55.setType(16);
        com.google.javascript.rhino.head.Node node58 = node55.getLastSibling();
        com.google.javascript.rhino.head.Node node60 = new com.google.javascript.rhino.head.Node(21, node16, node58, (int) (byte) 10);
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator61 = node60.new NodeIterator();
        com.google.javascript.rhino.head.Node node63 = new com.google.javascript.rhino.head.Node(11, node3, node60, 1);
        int int64 = node60.getType();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "40" + "'", str27, "40");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "40" + "'", str34, "40");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "-1" + "'", str47, "-1");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 21 + "'", int64 == 21);
    }

    @Test
    public void test1630() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1630");
        com.google.javascript.rhino.head.Node node3 = com.google.javascript.rhino.head.Node.newNumber((double) 0L);
        com.google.javascript.rhino.head.Node node6 = com.google.javascript.rhino.head.Node.newString((int) '4', "hi!");
        com.google.javascript.rhino.head.Node node8 = new com.google.javascript.rhino.head.Node((int) (byte) -1);
        java.lang.String str9 = node8.toString();
        com.google.javascript.rhino.head.Node node10 = node8.getFirstChild();
        com.google.javascript.rhino.head.Node node13 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str14 = node13.toString();
        boolean boolean15 = node13.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node17 = com.google.javascript.rhino.head.Node.newString("");
        node17.removeProp(23);
        node13.addChildToFront(node17);
        com.google.javascript.rhino.head.Node node22 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean23 = node22.hasChildren();
        node13.addChildrenToFront(node22);
        int int25 = node22.getLineno();
        com.google.javascript.rhino.head.Node node27 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str28 = node27.toString();
        boolean boolean29 = node27.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node31 = com.google.javascript.rhino.head.Node.newString("");
        node31.removeProp(23);
        node27.addChildToFront(node31);
        com.google.javascript.rhino.head.Node node35 = node27.getFirstChild();
        com.google.javascript.rhino.head.Node node37 = new com.google.javascript.rhino.head.Node((int) (short) 0, node22, node27, 9);
        node8.addChildrenToFront(node37);
        com.google.javascript.rhino.head.Node node40 = new com.google.javascript.rhino.head.Node(100, node3, node6, node8, (int) ' ');
        com.google.javascript.rhino.head.Node node41 = node8.getLastSibling();
        com.google.javascript.rhino.head.Node node46 = com.google.javascript.rhino.head.Node.newString(23, "");
        com.google.javascript.rhino.head.Node node47 = node46.getLastSibling();
        com.google.javascript.rhino.head.Node node49 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        com.google.javascript.rhino.head.Node node51 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str52 = node51.toString();
        boolean boolean53 = node51.hasConsistentReturnUsage();
        boolean boolean54 = node51.hasSideEffects();
        node49.addChildrenToFront(node51);
        com.google.javascript.rhino.head.Node node57 = new com.google.javascript.rhino.head.Node(26, node46, node49, 20);
        boolean boolean58 = node57.hasSideEffects();
        com.google.javascript.rhino.head.Node node60 = new com.google.javascript.rhino.head.Node(97);
        int int61 = node60.getType();
        com.google.javascript.rhino.head.Node node63 = node60.setType(97);
        com.google.javascript.rhino.head.Node node65 = new com.google.javascript.rhino.head.Node(22, node57, node63, 25);
        com.google.javascript.rhino.head.Node node67 = new com.google.javascript.rhino.head.Node((int) ' ', node8, node63, (int) (byte) 0);
        com.google.javascript.rhino.head.Node node68 = node63.getLastChild();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "-1" + "'", str9, "-1");
        org.junit.Assert.assertNull(node10);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "40" + "'", str14, "40");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "40" + "'", str28, "40");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "40" + "'", str52, "40");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 97 + "'", int61 == 97);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertNull(node68);
    }

    @Test
    public void test1631() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1631");
        com.google.javascript.rhino.head.Node node1 = com.google.javascript.rhino.head.Node.newString("");
        node1.removeProp(23);
        node1.setLineno((int) '4');
        int int8 = node1.getIntProp(6, 22);
        java.lang.String str9 = node1.toString();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 22 + "'", int8 == 22);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "41" + "'", str9, "41");
    }

    @Test
    public void test1632() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1632");
        com.google.javascript.rhino.head.Node node2 = com.google.javascript.rhino.head.Node.newNumber((double) 15);
        com.google.javascript.rhino.head.Node node4 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str5 = node4.toString();
        boolean boolean6 = node4.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node8 = com.google.javascript.rhino.head.Node.newString("");
        node8.removeProp(23);
        node4.addChildToFront(node8);
        com.google.javascript.rhino.head.Node node12 = node4.getFirstChild();
        node12.setLineno(18);
        com.google.javascript.rhino.head.ast.Comment comment15 = node12.getJsDocNode();
        com.google.javascript.rhino.head.Node node18 = new com.google.javascript.rhino.head.Node(5, 11);
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator19 = node18.new NodeIterator();
        com.google.javascript.rhino.head.Node node21 = node18.setType(12);
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.head.Node node22 = new com.google.javascript.rhino.head.Node(0, node2, (com.google.javascript.rhino.head.Node) comment15, node21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "40" + "'", str5, "40");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNull(comment15);
        org.junit.Assert.assertNotNull(node21);
    }

    @Test
    public void test1633() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1633");
        com.google.javascript.rhino.head.Node node3 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str4 = node3.toString();
        boolean boolean5 = node3.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node7 = com.google.javascript.rhino.head.Node.newString("");
        node7.removeProp(23);
        node3.addChildToFront(node7);
        com.google.javascript.rhino.head.Node node11 = node3.getFirstChild();
        node11.setString("100");
        com.google.javascript.rhino.head.ast.Scope scope14 = node11.getScope();
        com.google.javascript.rhino.head.Node node16 = new com.google.javascript.rhino.head.Node((int) ' ', node11, 2);
        boolean boolean17 = node16.hasChildren();
        com.google.javascript.rhino.head.Node node21 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str22 = node21.toString();
        boolean boolean23 = node21.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node25 = com.google.javascript.rhino.head.Node.newString("");
        node25.removeProp(23);
        node21.addChildToFront(node25);
        com.google.javascript.rhino.head.Node node30 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean31 = node30.hasChildren();
        node21.addChildrenToFront(node30);
        int int33 = node30.getLineno();
        com.google.javascript.rhino.head.Node node35 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str36 = node35.toString();
        boolean boolean37 = node35.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node39 = com.google.javascript.rhino.head.Node.newString("");
        node39.removeProp(23);
        node35.addChildToFront(node39);
        com.google.javascript.rhino.head.Node node43 = node35.getFirstChild();
        com.google.javascript.rhino.head.Node node45 = new com.google.javascript.rhino.head.Node((int) (short) 0, node30, node35, 9);
        boolean boolean46 = node30.hasSideEffects();
        com.google.javascript.rhino.head.Node node49 = com.google.javascript.rhino.head.Node.newString(23, "");
        com.google.javascript.rhino.head.Node node50 = node49.getLastSibling();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator51 = node50.new NodeIterator();
        com.google.javascript.rhino.head.Node node53 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str54 = node53.toString();
        boolean boolean55 = node53.hasConsistentReturnUsage();
        boolean boolean56 = node53.hasSideEffects();
        com.google.javascript.rhino.head.Node node58 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str59 = node58.toString();
        boolean boolean60 = node58.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node62 = com.google.javascript.rhino.head.Node.newString("");
        node62.removeProp(23);
        node58.addChildToFront(node62);
        com.google.javascript.rhino.head.Node node66 = node58.getFirstChild();
        com.google.javascript.rhino.head.ast.Comment comment67 = node58.getJsDocNode();
        node53.addChildToBack(node58);
        java.lang.String str69 = node53.toString();
        com.google.javascript.rhino.head.Node node71 = new com.google.javascript.rhino.head.Node(0, node30, node50, node53, 1);
        com.google.javascript.rhino.head.Node node73 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        com.google.javascript.rhino.head.Node node75 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str76 = node75.toString();
        boolean boolean77 = node75.hasConsistentReturnUsage();
        boolean boolean78 = node75.hasSideEffects();
        node73.addChildrenToFront(node75);
        node75.removeChildren();
        com.google.javascript.rhino.head.Node node81 = new com.google.javascript.rhino.head.Node((int) (short) 0, node16, node50, node75);
        com.google.javascript.rhino.head.Node node82 = node75.getLastChild();
        boolean boolean83 = node75.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node84 = node75.getNext();
        com.google.javascript.rhino.head.Node node86 = com.google.javascript.rhino.head.Node.newNumber((double) 1.0f);
        java.lang.Object obj88 = node86.getProp((int) 'a');
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.head.Node node89 = node84.getChildBefore(node86);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "40" + "'", str4, "40");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNull(scope14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "40" + "'", str22, "40");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "40" + "'", str36, "40");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "40" + "'", str54, "40");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "40" + "'", str59, "40");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertNull(comment67);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "40" + "'", str69, "40");
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "40" + "'", str76, "40");
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNull(node82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertNull(node84);
        org.junit.Assert.assertNotNull(node86);
        org.junit.Assert.assertNull(obj88);
    }

    @Test
    public void test1634() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1634");
        com.google.javascript.rhino.head.Node node2 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean3 = node2.hasChildren();
        com.google.javascript.rhino.head.Node node4 = node2.getLastSibling();
        com.google.javascript.rhino.head.Node node8 = com.google.javascript.rhino.head.Node.newString(23, "");
        com.google.javascript.rhino.head.Node node9 = node8.getLastSibling();
        com.google.javascript.rhino.head.Node node13 = com.google.javascript.rhino.head.Node.newString("hi!");
        com.google.javascript.rhino.head.Node node14 = new com.google.javascript.rhino.head.Node(13, node13);
        com.google.javascript.rhino.head.Node node17 = new com.google.javascript.rhino.head.Node(12);
        node17.putIntProp(14, 3);
        com.google.javascript.rhino.head.Node node21 = new com.google.javascript.rhino.head.Node(6, node17);
        com.google.javascript.rhino.head.Node node22 = node21.getLastChild();
        com.google.javascript.rhino.head.Node node24 = new com.google.javascript.rhino.head.Node((int) (byte) 100, node13, node21, 0);
        com.google.javascript.rhino.head.Node node27 = new com.google.javascript.rhino.head.Node((int) (byte) 1, 8);
        node27.putIntProp(20, 100);
        com.google.javascript.rhino.head.Node node31 = new com.google.javascript.rhino.head.Node(20, node9, node13, node27);
        com.google.javascript.rhino.head.Node node34 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str35 = node34.toString();
        boolean boolean36 = node34.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node38 = com.google.javascript.rhino.head.Node.newString("");
        node38.removeProp(23);
        node34.addChildToFront(node38);
        com.google.javascript.rhino.head.Node node42 = new com.google.javascript.rhino.head.Node((int) 'a', node34);
        com.google.javascript.rhino.head.Node node46 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str47 = node46.toString();
        boolean boolean48 = node46.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node50 = com.google.javascript.rhino.head.Node.newString("");
        node50.removeProp(23);
        node46.addChildToFront(node50);
        com.google.javascript.rhino.head.Node node54 = node46.getFirstChild();
        node54.setString("100");
        com.google.javascript.rhino.head.ast.Scope scope57 = node54.getScope();
        com.google.javascript.rhino.head.Node node59 = new com.google.javascript.rhino.head.Node((int) ' ', node54, 2);
        com.google.javascript.rhino.head.Node node60 = node54.getLastSibling();
        com.google.javascript.rhino.head.Node node63 = com.google.javascript.rhino.head.Node.newString(23, "");
        com.google.javascript.rhino.head.Node node64 = node63.getLastSibling();
        com.google.javascript.rhino.head.Node node65 = new com.google.javascript.rhino.head.Node((int) ' ', node60, node63);
        node34.addChildrenToFront(node65);
        com.google.javascript.rhino.head.Node node68 = new com.google.javascript.rhino.head.Node(24, node4, node31, node65, (int) (short) -1);
        node65.setLineno(11);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "40" + "'", str35, "40");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "40" + "'", str47, "40");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNull(scope57);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertNotNull(node64);
    }

    @Test
    public void test1635() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1635");
        com.google.javascript.rhino.head.Node node3 = com.google.javascript.rhino.head.Node.newString("");
        node3.removeProp(23);
        com.google.javascript.rhino.head.Node node8 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str9 = node8.toString();
        boolean boolean10 = node8.hasConsistentReturnUsage();
        boolean boolean11 = node8.hasSideEffects();
        com.google.javascript.rhino.head.Node node12 = new com.google.javascript.rhino.head.Node(0, node8);
        node3.addChildrenToBack(node12);
        com.google.javascript.rhino.head.Node node14 = new com.google.javascript.rhino.head.Node(9, node3);
        com.google.javascript.rhino.head.Node node15 = new com.google.javascript.rhino.head.Node((int) '#', node14);
        com.google.javascript.rhino.head.Node node17 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        com.google.javascript.rhino.head.Node node19 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str20 = node19.toString();
        boolean boolean21 = node19.hasConsistentReturnUsage();
        boolean boolean22 = node19.hasSideEffects();
        node17.addChildrenToFront(node19);
        node19.removeChildren();
        com.google.javascript.rhino.head.Node node26 = new com.google.javascript.rhino.head.Node((int) (short) 0);
        node14.addChildAfter(node19, node26);
        int int30 = node14.getIntProp((int) (short) 100, (int) (short) 1);
        node14.removeChildren();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "40" + "'", str9, "40");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "40" + "'", str20, "40");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
    }

    @Test
    public void test1636() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1636");
        com.google.javascript.rhino.head.Node node2 = com.google.javascript.rhino.head.Node.newString(18, "4");
        org.junit.Assert.assertNotNull(node2);
    }

    @Test
    public void test1637() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1637");
        com.google.javascript.rhino.head.Node node2 = new com.google.javascript.rhino.head.Node(12);
        node2.putIntProp(14, 3);
        com.google.javascript.rhino.head.Node node6 = new com.google.javascript.rhino.head.Node(6, node2);
        int int9 = node6.getIntProp(18, 26);
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator10 = node6.new NodeIterator();
        boolean boolean11 = nodeIterator10.hasNext();
        // The following exception was thrown during execution in test generation
        try {
            nodeIterator10.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: next() has not been called");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 26 + "'", int9 == 26);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
    }

    @Test
    public void test1638() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1638");
        com.google.javascript.rhino.head.Node node2 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str3 = node2.toString();
        boolean boolean4 = node2.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node6 = com.google.javascript.rhino.head.Node.newString("");
        node6.removeProp(23);
        node2.addChildToFront(node6);
        com.google.javascript.rhino.head.Node node10 = node2.getFirstChild();
        com.google.javascript.rhino.head.ast.Comment comment11 = node2.getJsDocNode();
        int int12 = node2.getType();
        node2.setDouble((double) 17);
        com.google.javascript.rhino.head.Node node18 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str19 = node18.toString();
        boolean boolean20 = node18.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node22 = com.google.javascript.rhino.head.Node.newString("");
        node22.removeProp(23);
        node18.addChildToFront(node22);
        com.google.javascript.rhino.head.Node node27 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean28 = node27.hasChildren();
        node18.addChildrenToFront(node27);
        com.google.javascript.rhino.head.Node node31 = new com.google.javascript.rhino.head.Node((int) (byte) -1);
        java.lang.String str32 = node31.toString();
        boolean boolean33 = node31.hasChildren();
        com.google.javascript.rhino.head.Node node35 = new com.google.javascript.rhino.head.Node((int) (short) -1, node27, node31, (int) (short) 10);
        com.google.javascript.rhino.head.Node node36 = node35.getLastChild();
        com.google.javascript.rhino.head.Node node41 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str42 = node41.toString();
        boolean boolean43 = node41.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node45 = com.google.javascript.rhino.head.Node.newString("");
        node45.removeProp(23);
        node41.addChildToFront(node45);
        com.google.javascript.rhino.head.Node node49 = new com.google.javascript.rhino.head.Node((int) 'a', node41);
        com.google.javascript.rhino.head.Node node51 = com.google.javascript.rhino.head.Node.newString("-1");
        com.google.javascript.rhino.head.Node node53 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str54 = node53.toString();
        com.google.javascript.rhino.head.Node node55 = node53.getLastChild();
        com.google.javascript.rhino.head.Node node57 = new com.google.javascript.rhino.head.Node((int) (short) -1, node41, node51, node53, (int) (short) -1);
        com.google.javascript.rhino.head.Node node59 = new com.google.javascript.rhino.head.Node((int) (short) 1, node53, 12);
        com.google.javascript.rhino.head.Node node61 = new com.google.javascript.rhino.head.Node(23);
        node61.removeProp(25);
        boolean boolean64 = node61.hasChildren();
        com.google.javascript.rhino.head.Node node65 = new com.google.javascript.rhino.head.Node((-1), node36, node53, node61);
        node2.addChildrenToBack(node36);
        java.lang.Object obj68 = node36.getProp((int) (short) 0);
        com.google.javascript.rhino.head.Node node70 = new com.google.javascript.rhino.head.Node((int) '#', node36, (int) ' ');
        // The following exception was thrown during execution in test generation
        try {
            node70.setString("32");
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: com.google.javascript.rhino.head.Node cannot be cast to com.google.javascript.rhino.head.ast.Name");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "40" + "'", str3, "40");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNull(comment11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 40 + "'", int12 == 40);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "40" + "'", str19, "40");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "-1" + "'", str32, "-1");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "40" + "'", str42, "40");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "40" + "'", str54, "40");
        org.junit.Assert.assertNull(node55);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNull(obj68);
    }

    @Test
    public void test1639() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1639");
        com.google.javascript.rhino.head.Node node3 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str4 = node3.toString();
        boolean boolean5 = node3.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node7 = com.google.javascript.rhino.head.Node.newString("");
        node7.removeProp(23);
        node3.addChildToFront(node7);
        com.google.javascript.rhino.head.Node node11 = node3.getFirstChild();
        com.google.javascript.rhino.head.ast.Comment comment12 = node3.getJsDocNode();
        int int13 = node3.getType();
        node3.setDouble((double) 17);
        com.google.javascript.rhino.head.Node node17 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str18 = node17.toString();
        boolean boolean19 = node17.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node21 = com.google.javascript.rhino.head.Node.newString("");
        node21.removeProp(23);
        node17.addChildToFront(node21);
        java.lang.String str25 = node21.getString();
        com.google.javascript.rhino.head.Node node28 = com.google.javascript.rhino.head.Node.newString((int) (short) 0, "-1");
        com.google.javascript.rhino.head.Node node30 = new com.google.javascript.rhino.head.Node(10, node3, node21, node28, 14);
        com.google.javascript.rhino.head.Node node33 = com.google.javascript.rhino.head.Node.newString(24, "100");
        int int34 = node33.getType();
        com.google.javascript.rhino.head.Node node38 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str39 = node38.toString();
        boolean boolean40 = node38.hasConsistentReturnUsage();
        boolean boolean41 = node38.hasSideEffects();
        com.google.javascript.rhino.head.Node node42 = new com.google.javascript.rhino.head.Node(0, node38);
        com.google.javascript.rhino.head.Node node45 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str46 = node45.toString();
        boolean boolean47 = node45.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node49 = com.google.javascript.rhino.head.Node.newString("");
        node49.removeProp(23);
        node45.addChildToFront(node49);
        com.google.javascript.rhino.head.Node node54 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean55 = node54.hasChildren();
        node45.addChildrenToFront(node54);
        com.google.javascript.rhino.head.Node node58 = new com.google.javascript.rhino.head.Node((int) (byte) -1);
        java.lang.String str59 = node58.toString();
        boolean boolean60 = node58.hasChildren();
        com.google.javascript.rhino.head.Node node62 = new com.google.javascript.rhino.head.Node((int) (short) -1, node54, node58, (int) (short) 10);
        com.google.javascript.rhino.head.Node node65 = com.google.javascript.rhino.head.Node.newString(23, "");
        com.google.javascript.rhino.head.Node node67 = new com.google.javascript.rhino.head.Node((int) (byte) 10, node38, node58, node65, (int) (short) 0);
        com.google.javascript.rhino.head.ast.Comment comment68 = null;
        node58.setJsDocNode(comment68);
        com.google.javascript.rhino.head.Node node72 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        java.lang.String str73 = node72.toString();
        int int74 = node72.getLineno();
        com.google.javascript.rhino.head.Node node76 = com.google.javascript.rhino.head.Node.newNumber((double) 0);
        com.google.javascript.rhino.head.ast.Comment comment77 = node76.getJsDocNode();
        com.google.javascript.rhino.head.Node node79 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        com.google.javascript.rhino.head.Node node81 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str82 = node81.toString();
        boolean boolean83 = node81.hasConsistentReturnUsage();
        boolean boolean84 = node81.hasSideEffects();
        node79.addChildrenToFront(node81);
        com.google.javascript.rhino.head.Node node86 = new com.google.javascript.rhino.head.Node(8, node72, node76, node79);
        node58.addChildrenToFront(node76);
        node76.putIntProp((int) (short) 0, (int) (short) 10);
        com.google.javascript.rhino.head.Node node91 = new com.google.javascript.rhino.head.Node(25, node3, node33, node76);
        node33.setString("22");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode94 = null;
        java.lang.String str95 = node33.toStringTree(scriptNode94);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "40" + "'", str4, "40");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNull(comment12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 40 + "'", int13 == 40);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "40" + "'", str18, "40");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 24 + "'", int34 == 24);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "40" + "'", str39, "40");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "40" + "'", str46, "40");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "-1" + "'", str59, "-1");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "100" + "'", str73, "100");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + (-1) + "'", int74 == (-1));
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertNull(comment77);
        org.junit.Assert.assertNotNull(node81);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "40" + "'", str82, "40");
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNull(str95);
    }

    @Test
    public void test1640() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1640");
        com.google.javascript.rhino.head.Node node2 = new com.google.javascript.rhino.head.Node((int) (byte) 1);
        node2.removeProp((int) (short) 10);
        com.google.javascript.rhino.head.Node node7 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str8 = node7.toString();
        boolean boolean9 = node7.hasConsistentReturnUsage();
        boolean boolean10 = node7.hasSideEffects();
        com.google.javascript.rhino.head.Node node11 = new com.google.javascript.rhino.head.Node(0, node7);
        com.google.javascript.rhino.head.Node node14 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str15 = node14.toString();
        boolean boolean16 = node14.hasConsistentReturnUsage();
        boolean boolean17 = node14.hasSideEffects();
        com.google.javascript.rhino.head.Node node19 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str20 = node19.toString();
        boolean boolean21 = node19.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node23 = com.google.javascript.rhino.head.Node.newString("");
        node23.removeProp(23);
        node19.addChildToFront(node23);
        com.google.javascript.rhino.head.Node node27 = node19.getFirstChild();
        com.google.javascript.rhino.head.ast.Comment comment28 = node19.getJsDocNode();
        node14.addChildToBack(node19);
        boolean boolean30 = node19.hasConsistentReturnUsage();
        node7.putProp((int) (short) 1, (java.lang.Object) node19);
        com.google.javascript.rhino.head.Node node32 = new com.google.javascript.rhino.head.Node((int) '#', node2, node19);
        java.lang.Object obj34 = node19.getProp(1);
        java.util.Spliterator<com.google.javascript.rhino.head.Node> nodeSpliterator35 = node19.spliterator();
        java.lang.String str36 = node19.toString();
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "40" + "'", str8, "40");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "40" + "'", str15, "40");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "40" + "'", str20, "40");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNull(comment28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNull(obj34);
        org.junit.Assert.assertNotNull(nodeSpliterator35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "40" + "'", str36, "40");
    }

    @Test
    public void test1641() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1641");
        com.google.javascript.rhino.head.Node node1 = com.google.javascript.rhino.head.Node.newNumber((double) (-1L));
        boolean boolean2 = node1.hasSideEffects();
        com.google.javascript.rhino.head.Node node3 = node1.getLastSibling();
        node1.setDouble((double) 1.0f);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(node3);
    }

    @Test
    public void test1642() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1642");
        com.google.javascript.rhino.head.Node node2 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        com.google.javascript.rhino.head.Node node4 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str5 = node4.toString();
        boolean boolean6 = node4.hasConsistentReturnUsage();
        boolean boolean7 = node4.hasSideEffects();
        node2.addChildrenToFront(node4);
        com.google.javascript.rhino.head.Node node9 = node4.getLastSibling();
        com.google.javascript.rhino.head.Node node10 = new com.google.javascript.rhino.head.Node((int) ' ', node4);
        java.lang.String str11 = node4.toString();
        int int12 = node4.getLineno();
        com.google.javascript.rhino.head.Node node16 = com.google.javascript.rhino.head.Node.newString(23, "");
        com.google.javascript.rhino.head.Node node17 = node16.getLastSibling();
        com.google.javascript.rhino.head.Node node21 = com.google.javascript.rhino.head.Node.newString("hi!");
        com.google.javascript.rhino.head.Node node22 = new com.google.javascript.rhino.head.Node(13, node21);
        com.google.javascript.rhino.head.Node node25 = new com.google.javascript.rhino.head.Node(12);
        node25.putIntProp(14, 3);
        com.google.javascript.rhino.head.Node node29 = new com.google.javascript.rhino.head.Node(6, node25);
        com.google.javascript.rhino.head.Node node30 = node29.getLastChild();
        com.google.javascript.rhino.head.Node node32 = new com.google.javascript.rhino.head.Node((int) (byte) 100, node21, node29, 0);
        com.google.javascript.rhino.head.Node node35 = new com.google.javascript.rhino.head.Node((int) (byte) 1, 8);
        node35.putIntProp(20, 100);
        com.google.javascript.rhino.head.Node node39 = new com.google.javascript.rhino.head.Node(20, node17, node21, node35);
        node4.addChildToFront(node39);
        // The following exception was thrown during execution in test generation
        try {
            node4.resetTargets();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "40" + "'", str5, "40");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "40" + "'", str11, "40");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node30);
    }

    @Test
    public void test1643() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1643");
        com.google.javascript.rhino.head.Node node2 = com.google.javascript.rhino.head.Node.newNumber((double) 0.0f);
        com.google.javascript.rhino.head.Node node4 = new com.google.javascript.rhino.head.Node(7);
        com.google.javascript.rhino.head.Node node5 = new com.google.javascript.rhino.head.Node(22, node2, node4);
        node2.setLineno(6);
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator8 = node2.new NodeIterator();
        // The following exception was thrown during execution in test generation
        try {
            nodeIterator8.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: next() has not been called");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
    }

    @Test
    public void test1644() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1644");
        com.google.javascript.rhino.head.Node node1 = com.google.javascript.rhino.head.Node.newString("100");
        java.lang.String str2 = node1.getString();
        boolean boolean3 = node1.hasChildren();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "100" + "'", str2, "100");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test1645() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1645");
        com.google.javascript.rhino.head.Node node1 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str2 = node1.toString();
        com.google.javascript.rhino.head.ast.Comment comment3 = null;
        node1.setJsDocNode(comment3);
        node1.setLineno((int) (short) 1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode7 = null;
        java.lang.String str8 = node1.toStringTree(scriptNode7);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "40" + "'", str2, "40");
        org.junit.Assert.assertNull(str8);
    }

    @Test
    public void test1646() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1646");
        com.google.javascript.rhino.head.Node node3 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str4 = node3.toString();
        boolean boolean5 = node3.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node7 = com.google.javascript.rhino.head.Node.newString("");
        node7.removeProp(23);
        node3.addChildToFront(node7);
        com.google.javascript.rhino.head.Node node11 = node3.getFirstChild();
        node11.setString("100");
        com.google.javascript.rhino.head.ast.Scope scope14 = node11.getScope();
        com.google.javascript.rhino.head.Node node16 = new com.google.javascript.rhino.head.Node((int) ' ', node11, 2);
        boolean boolean17 = node16.hasChildren();
        com.google.javascript.rhino.head.Node node20 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str21 = node20.toString();
        boolean boolean22 = node20.hasConsistentReturnUsage();
        boolean boolean23 = node20.hasSideEffects();
        com.google.javascript.rhino.head.Node node24 = new com.google.javascript.rhino.head.Node(0, node20);
        int int25 = node20.getLineno();
        node16.addChildToFront(node20);
        int int27 = node20.getType();
        java.lang.String str28 = node20.getJsDoc();
        com.google.javascript.rhino.head.Node node30 = new com.google.javascript.rhino.head.Node(40, node20, (int) (short) 1);
        boolean boolean31 = node20.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node32 = node20.getFirstChild();
        com.google.javascript.rhino.head.Node node37 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str38 = node37.toString();
        boolean boolean39 = node37.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node41 = com.google.javascript.rhino.head.Node.newString("");
        node41.removeProp(23);
        node37.addChildToFront(node41);
        com.google.javascript.rhino.head.Node node45 = node37.getFirstChild();
        node45.setString("100");
        com.google.javascript.rhino.head.ast.Scope scope48 = node45.getScope();
        com.google.javascript.rhino.head.Node node50 = new com.google.javascript.rhino.head.Node((int) ' ', node45, 2);
        com.google.javascript.rhino.head.Node node51 = node45.getLastSibling();
        com.google.javascript.rhino.head.Node node54 = com.google.javascript.rhino.head.Node.newString(23, "");
        com.google.javascript.rhino.head.Node node55 = node54.getLastSibling();
        com.google.javascript.rhino.head.Node node56 = new com.google.javascript.rhino.head.Node((int) ' ', node51, node54);
        com.google.javascript.rhino.head.Node node59 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str60 = node59.toString();
        boolean boolean61 = node59.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node63 = com.google.javascript.rhino.head.Node.newString("");
        node63.removeProp(23);
        node59.addChildToFront(node63);
        com.google.javascript.rhino.head.Node node68 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean69 = node68.hasChildren();
        node59.addChildrenToFront(node68);
        com.google.javascript.rhino.head.Node node72 = new com.google.javascript.rhino.head.Node((int) (byte) -1);
        java.lang.String str73 = node72.toString();
        boolean boolean74 = node72.hasChildren();
        com.google.javascript.rhino.head.Node node76 = new com.google.javascript.rhino.head.Node((int) (short) -1, node68, node72, (int) (short) 10);
        com.google.javascript.rhino.head.Node node77 = node76.getLastChild();
        com.google.javascript.rhino.head.Node node80 = com.google.javascript.rhino.head.Node.newNumber((double) 0.0f);
        com.google.javascript.rhino.head.Node node82 = new com.google.javascript.rhino.head.Node(7);
        com.google.javascript.rhino.head.Node node83 = new com.google.javascript.rhino.head.Node(22, node80, node82);
        com.google.javascript.rhino.head.Node node85 = new com.google.javascript.rhino.head.Node(6, node54, node76, node82, 100);
        node20.addChildToFront(node54);
        node54.setLineno(24);
        java.lang.Class<?> wildcardClass89 = node54.getClass();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "40" + "'", str4, "40");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNull(scope14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "40" + "'", str21, "40");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 40 + "'", int27 == 40);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNull(node32);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "40" + "'", str38, "40");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNull(scope48);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "40" + "'", str60, "40");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "-1" + "'", str73, "-1");
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertNotNull(node80);
        org.junit.Assert.assertNotNull(wildcardClass89);
    }

    @Test
    public void test1647() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1647");
        com.google.javascript.rhino.head.Node node3 = com.google.javascript.rhino.head.Node.newString(23, "");
        com.google.javascript.rhino.head.Node node4 = node3.getLastSibling();
        com.google.javascript.rhino.head.Node node6 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        com.google.javascript.rhino.head.Node node8 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str9 = node8.toString();
        boolean boolean10 = node8.hasConsistentReturnUsage();
        boolean boolean11 = node8.hasSideEffects();
        node6.addChildrenToFront(node8);
        com.google.javascript.rhino.head.Node node14 = new com.google.javascript.rhino.head.Node(26, node3, node6, 20);
        int int15 = node6.getLineno();
        java.util.Spliterator<com.google.javascript.rhino.head.Node> nodeSpliterator16 = node6.spliterator();
        node6.removeProp(15);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "40" + "'", str9, "40");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertNotNull(nodeSpliterator16);
    }

    @Test
    public void test1648() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1648");
        com.google.javascript.rhino.head.Node node2 = new com.google.javascript.rhino.head.Node(14, (int) ' ');
        boolean boolean3 = node2.hasSideEffects();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test1649() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1649");
        com.google.javascript.rhino.head.Node node3 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str4 = node3.toString();
        boolean boolean5 = node3.hasConsistentReturnUsage();
        boolean boolean6 = node3.hasSideEffects();
        com.google.javascript.rhino.head.Node node7 = new com.google.javascript.rhino.head.Node(0, node3);
        com.google.javascript.rhino.head.Node node10 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str11 = node10.toString();
        boolean boolean12 = node10.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node14 = com.google.javascript.rhino.head.Node.newString("");
        node14.removeProp(23);
        node10.addChildToFront(node14);
        com.google.javascript.rhino.head.Node node19 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean20 = node19.hasChildren();
        node10.addChildrenToFront(node19);
        com.google.javascript.rhino.head.Node node23 = new com.google.javascript.rhino.head.Node((int) (byte) -1);
        java.lang.String str24 = node23.toString();
        boolean boolean25 = node23.hasChildren();
        com.google.javascript.rhino.head.Node node27 = new com.google.javascript.rhino.head.Node((int) (short) -1, node19, node23, (int) (short) 10);
        com.google.javascript.rhino.head.Node node30 = com.google.javascript.rhino.head.Node.newString(23, "");
        com.google.javascript.rhino.head.Node node32 = new com.google.javascript.rhino.head.Node((int) (byte) 10, node3, node23, node30, (int) (short) 0);
        com.google.javascript.rhino.head.Node node34 = node32.setType(16);
        com.google.javascript.rhino.head.Node node35 = node32.getLastSibling();
        node32.removeProp((-1));
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "40" + "'", str4, "40");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "40" + "'", str11, "40");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "-1" + "'", str24, "-1");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node35);
    }

    @Test
    public void test1650() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1650");
        com.google.javascript.rhino.head.Node node3 = com.google.javascript.rhino.head.Node.newString(24, "100");
        int int4 = node3.getType();
        boolean boolean5 = node3.hasChildren();
        com.google.javascript.rhino.head.Node node7 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str8 = node7.toString();
        boolean boolean9 = node7.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node11 = com.google.javascript.rhino.head.Node.newString("");
        node11.removeProp(23);
        node7.addChildToFront(node11);
        com.google.javascript.rhino.head.Node node16 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean17 = node16.hasChildren();
        node7.addChildrenToFront(node16);
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator19 = node16.new NodeIterator();
        boolean boolean20 = node16.hasChildren();
        com.google.javascript.rhino.head.Node node21 = new com.google.javascript.rhino.head.Node(11, node3, node16);
        java.lang.Object obj23 = node21.getProp((int) (byte) 10);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 24 + "'", int4 == 24);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "40" + "'", str8, "40");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(obj23);
    }

    @Test
    public void test1651() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1651");
        com.google.javascript.rhino.head.Node node2 = new com.google.javascript.rhino.head.Node((int) (byte) 1, 8);
        java.lang.String str3 = node2.toString();
        com.google.javascript.rhino.head.Node node4 = node2.getLastChild();
        // The following exception was thrown during execution in test generation
        try {
            node4.putIntProp((int) (byte) 100, 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "1" + "'", str3, "1");
        org.junit.Assert.assertNull(node4);
    }

    @Test
    public void test1652() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1652");
        com.google.javascript.rhino.head.Node node1 = new com.google.javascript.rhino.head.Node(23);
        com.google.javascript.rhino.head.Node node4 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str5 = node4.toString();
        boolean boolean6 = node4.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node8 = com.google.javascript.rhino.head.Node.newString("");
        node8.removeProp(23);
        node4.addChildToFront(node8);
        node1.putProp((int) ' ', (java.lang.Object) node8);
        com.google.javascript.rhino.head.Node node13 = node8.getLastChild();
        node8.removeChildren();
        // The following exception was thrown during execution in test generation
        try {
            int int16 = node8.getExistingIntProp((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "40" + "'", str5, "40");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNull(node13);
    }

    @Test
    public void test1653() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1653");
        com.google.javascript.rhino.head.Node node1 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str2 = node1.toString();
        com.google.javascript.rhino.head.Node node3 = node1.getLastSibling();
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor4 = node1.iterator();
        node1.putIntProp(22, 100);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "40" + "'", str2, "40");
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(nodeItor4);
    }

    @Test
    public void test1654() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1654");
        com.google.javascript.rhino.head.Node node2 = com.google.javascript.rhino.head.Node.newNumber((double) 0L);
        com.google.javascript.rhino.head.Node node4 = com.google.javascript.rhino.head.Node.newString("");
        node4.removeProp(23);
        com.google.javascript.rhino.head.Node node9 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str10 = node9.toString();
        boolean boolean11 = node9.hasConsistentReturnUsage();
        boolean boolean12 = node9.hasSideEffects();
        com.google.javascript.rhino.head.Node node13 = new com.google.javascript.rhino.head.Node(0, node9);
        node4.addChildrenToBack(node13);
        node2.addChildToFront(node4);
        java.lang.String str16 = node4.getString();
        com.google.javascript.rhino.head.Node node17 = new com.google.javascript.rhino.head.Node(13, node4);
        com.google.javascript.rhino.head.Node node21 = com.google.javascript.rhino.head.Node.newString(24, "11");
        com.google.javascript.rhino.head.ast.Scope scope22 = node21.getScope();
        node17.putProp(9, (java.lang.Object) node21);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "40" + "'", str10, "40");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNull(scope22);
    }

    @Test
    public void test1655() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1655");
        com.google.javascript.rhino.head.Node node2 = com.google.javascript.rhino.head.Node.newString("32");
        int int3 = node2.getLineno();
        com.google.javascript.rhino.head.Node node7 = com.google.javascript.rhino.head.Node.newString((int) (byte) -1, "41");
        com.google.javascript.rhino.head.Node node11 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str12 = node11.toString();
        boolean boolean13 = node11.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node15 = com.google.javascript.rhino.head.Node.newString("");
        node15.removeProp(23);
        node11.addChildToFront(node15);
        com.google.javascript.rhino.head.Node node20 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean21 = node20.hasChildren();
        node11.addChildrenToFront(node20);
        com.google.javascript.rhino.head.Node node24 = new com.google.javascript.rhino.head.Node((int) (byte) -1);
        java.lang.String str25 = node24.toString();
        boolean boolean26 = node24.hasChildren();
        com.google.javascript.rhino.head.Node node28 = new com.google.javascript.rhino.head.Node((int) (short) -1, node20, node24, (int) (short) 10);
        com.google.javascript.rhino.head.Node node29 = node28.getLastChild();
        com.google.javascript.rhino.head.Node node34 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str35 = node34.toString();
        boolean boolean36 = node34.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node38 = com.google.javascript.rhino.head.Node.newString("");
        node38.removeProp(23);
        node34.addChildToFront(node38);
        com.google.javascript.rhino.head.Node node42 = new com.google.javascript.rhino.head.Node((int) 'a', node34);
        com.google.javascript.rhino.head.Node node44 = com.google.javascript.rhino.head.Node.newString("-1");
        com.google.javascript.rhino.head.Node node46 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str47 = node46.toString();
        com.google.javascript.rhino.head.Node node48 = node46.getLastChild();
        com.google.javascript.rhino.head.Node node50 = new com.google.javascript.rhino.head.Node((int) (short) -1, node34, node44, node46, (int) (short) -1);
        com.google.javascript.rhino.head.Node node52 = new com.google.javascript.rhino.head.Node((int) (short) 1, node46, 12);
        com.google.javascript.rhino.head.Node node54 = new com.google.javascript.rhino.head.Node(23);
        node54.removeProp(25);
        boolean boolean57 = node54.hasChildren();
        com.google.javascript.rhino.head.Node node58 = new com.google.javascript.rhino.head.Node((-1), node29, node46, node54);
        com.google.javascript.rhino.head.Node node59 = node58.getLastSibling();
        com.google.javascript.rhino.head.Node node60 = node58.getLastChild();
        int int63 = node60.getIntProp((int) (short) 1, 9);
        com.google.javascript.rhino.head.Node node64 = new com.google.javascript.rhino.head.Node(9, node7, node60);
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor65 = node60.iterator();
        com.google.javascript.rhino.head.Node node66 = new com.google.javascript.rhino.head.Node(19, node2, node60);
        // The following exception was thrown during execution in test generation
        try {
            int int67 = node66.labelId();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "40" + "'", str12, "40");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "-1" + "'", str25, "-1");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "40" + "'", str35, "40");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "40" + "'", str47, "40");
        org.junit.Assert.assertNull(node48);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 9 + "'", int63 == 9);
        org.junit.Assert.assertNotNull(nodeItor65);
    }

    @Test
    public void test1656() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1656");
        com.google.javascript.rhino.head.Node node2 = com.google.javascript.rhino.head.Node.newString(23, "");
        com.google.javascript.rhino.head.Node node3 = node2.getLastSibling();
        boolean boolean4 = node3.hasChildren();
        com.google.javascript.rhino.head.ast.Scope scope5 = null;
        node3.setScope(scope5);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test1657() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1657");
        com.google.javascript.rhino.head.Node node3 = com.google.javascript.rhino.head.Node.newString(23, "");
        com.google.javascript.rhino.head.Node node4 = node3.getLastSibling();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator5 = node4.new NodeIterator();
        node4.setLineno(13);
        boolean boolean8 = node4.hasSideEffects();
        com.google.javascript.rhino.head.Node node12 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str13 = node12.toString();
        boolean boolean14 = node12.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node16 = com.google.javascript.rhino.head.Node.newString("");
        node16.removeProp(23);
        node12.addChildToFront(node16);
        com.google.javascript.rhino.head.Node node21 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean22 = node21.hasChildren();
        node12.addChildrenToFront(node21);
        com.google.javascript.rhino.head.Node node25 = new com.google.javascript.rhino.head.Node((int) (byte) -1);
        java.lang.String str26 = node25.toString();
        boolean boolean27 = node25.hasChildren();
        com.google.javascript.rhino.head.Node node29 = new com.google.javascript.rhino.head.Node((int) (short) -1, node21, node25, (int) (short) 10);
        com.google.javascript.rhino.head.Node node30 = node29.getLastChild();
        com.google.javascript.rhino.head.Node node35 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str36 = node35.toString();
        boolean boolean37 = node35.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node39 = com.google.javascript.rhino.head.Node.newString("");
        node39.removeProp(23);
        node35.addChildToFront(node39);
        com.google.javascript.rhino.head.Node node43 = new com.google.javascript.rhino.head.Node((int) 'a', node35);
        com.google.javascript.rhino.head.Node node45 = com.google.javascript.rhino.head.Node.newString("-1");
        com.google.javascript.rhino.head.Node node47 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str48 = node47.toString();
        com.google.javascript.rhino.head.Node node49 = node47.getLastChild();
        com.google.javascript.rhino.head.Node node51 = new com.google.javascript.rhino.head.Node((int) (short) -1, node35, node45, node47, (int) (short) -1);
        com.google.javascript.rhino.head.Node node53 = new com.google.javascript.rhino.head.Node((int) (short) 1, node47, 12);
        com.google.javascript.rhino.head.Node node55 = new com.google.javascript.rhino.head.Node(23);
        node55.removeProp(25);
        boolean boolean58 = node55.hasChildren();
        com.google.javascript.rhino.head.Node node59 = new com.google.javascript.rhino.head.Node((-1), node30, node47, node55);
        com.google.javascript.rhino.head.Node node61 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str62 = node61.toString();
        boolean boolean63 = node61.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node65 = com.google.javascript.rhino.head.Node.newString("");
        node65.removeProp(23);
        node61.addChildToFront(node65);
        com.google.javascript.rhino.head.Node node69 = node61.getFirstChild();
        com.google.javascript.rhino.head.Node node71 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        node69.addChildrenToBack(node71);
        com.google.javascript.rhino.head.Node node74 = new com.google.javascript.rhino.head.Node(19, node4, node30, node69, 6);
        com.google.javascript.rhino.head.Node node75 = node69.getFirstChild();
        com.google.javascript.rhino.head.ast.Comment comment76 = node75.getJsDocNode();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "40" + "'", str13, "40");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "-1" + "'", str26, "-1");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "40" + "'", str36, "40");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "40" + "'", str48, "40");
        org.junit.Assert.assertNull(node49);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "40" + "'", str62, "40");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertNull(comment76);
    }

    @Test
    public void test1658() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1658");
        com.google.javascript.rhino.head.Node node2 = com.google.javascript.rhino.head.Node.newString(13, "");
        node2.setString("1");
        org.junit.Assert.assertNotNull(node2);
    }

    @Test
    public void test1659() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1659");
        com.google.javascript.rhino.head.Node node3 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str4 = node3.toString();
        boolean boolean5 = node3.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node7 = com.google.javascript.rhino.head.Node.newString("");
        node7.removeProp(23);
        node3.addChildToFront(node7);
        com.google.javascript.rhino.head.Node node11 = new com.google.javascript.rhino.head.Node((int) 'a', node3);
        com.google.javascript.rhino.head.Node node13 = com.google.javascript.rhino.head.Node.newString("-1");
        com.google.javascript.rhino.head.Node node15 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str16 = node15.toString();
        com.google.javascript.rhino.head.Node node17 = node15.getLastChild();
        com.google.javascript.rhino.head.Node node19 = new com.google.javascript.rhino.head.Node((int) (short) -1, node3, node13, node15, (int) (short) -1);
        java.lang.Object obj21 = node3.getProp(0);
        java.lang.String str22 = node3.getJsDoc();
        java.util.Spliterator<com.google.javascript.rhino.head.Node> nodeSpliterator23 = node3.spliterator();
        com.google.javascript.rhino.head.Node node24 = node3.getLastChild();
        double double25 = node3.getDouble();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "40" + "'", str4, "40");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "40" + "'", str16, "40");
        org.junit.Assert.assertNull(node17);
        org.junit.Assert.assertNull(obj21);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(nodeSpliterator23);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 32.0d + "'", double25 == 32.0d);
    }

    @Test
    public void test1660() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1660");
        com.google.javascript.rhino.head.Node node3 = new com.google.javascript.rhino.head.Node(12);
        node3.putIntProp(14, 3);
        com.google.javascript.rhino.head.Node node7 = new com.google.javascript.rhino.head.Node(6, node3);
        com.google.javascript.rhino.head.Node node8 = node7.getLastChild();
        com.google.javascript.rhino.head.Node node12 = com.google.javascript.rhino.head.Node.newString("");
        node12.removeProp(23);
        com.google.javascript.rhino.head.Node node17 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str18 = node17.toString();
        boolean boolean19 = node17.hasConsistentReturnUsage();
        boolean boolean20 = node17.hasSideEffects();
        com.google.javascript.rhino.head.Node node21 = new com.google.javascript.rhino.head.Node(0, node17);
        node12.addChildrenToBack(node21);
        com.google.javascript.rhino.head.Node node23 = new com.google.javascript.rhino.head.Node(9, node12);
        com.google.javascript.rhino.head.Node node25 = new com.google.javascript.rhino.head.Node(11, node23, (int) (byte) 0);
        java.lang.Object obj27 = node25.getProp(17);
        java.lang.String str28 = node25.toString();
        com.google.javascript.rhino.head.Node node29 = new com.google.javascript.rhino.head.Node(18, node8, node25);
        // The following exception was thrown during execution in test generation
        try {
            double double30 = node8.getDouble();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: com.google.javascript.rhino.head.Node cannot be cast to com.google.javascript.rhino.head.ast.NumberLiteral");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "40" + "'", str18, "40");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(obj27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "11" + "'", str28, "11");
    }

    @Test
    public void test1661() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1661");
        com.google.javascript.rhino.head.Node node2 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        com.google.javascript.rhino.head.Node node4 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str5 = node4.toString();
        boolean boolean6 = node4.hasConsistentReturnUsage();
        boolean boolean7 = node4.hasSideEffects();
        node2.addChildrenToFront(node4);
        node4.removeChildren();
        com.google.javascript.rhino.head.Node node11 = com.google.javascript.rhino.head.Node.newString("hi!");
        node4.addChildrenToBack(node11);
        com.google.javascript.rhino.head.Node node14 = node4.setType((int) (short) -1);
        com.google.javascript.rhino.head.Node node16 = node14.setType(23);
        double double17 = node16.getDouble();
        com.google.javascript.rhino.head.Node node18 = node16.getLastSibling();
        com.google.javascript.rhino.head.Node node19 = new com.google.javascript.rhino.head.Node((int) (byte) 10, node18);
        boolean boolean20 = node18.hasSideEffects();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "40" + "'", str5, "40");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 32.0d + "'", double17 == 32.0d);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test1662() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1662");
        com.google.javascript.rhino.head.Node node2 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str3 = node2.toString();
        boolean boolean4 = node2.hasConsistentReturnUsage();
        boolean boolean5 = node2.hasSideEffects();
        com.google.javascript.rhino.head.Node node6 = new com.google.javascript.rhino.head.Node(0, node2);
        java.lang.Class<?> wildcardClass7 = node6.getClass();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "40" + "'", str3, "40");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test1663() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1663");
        com.google.javascript.rhino.head.Node node3 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str4 = node3.toString();
        boolean boolean5 = node3.hasConsistentReturnUsage();
        boolean boolean6 = node3.hasSideEffects();
        com.google.javascript.rhino.head.Node node7 = new com.google.javascript.rhino.head.Node(0, node3);
        int int8 = node3.getLineno();
        node3.removeProp(0);
        com.google.javascript.rhino.head.Node node14 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str15 = node14.toString();
        boolean boolean16 = node14.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node18 = com.google.javascript.rhino.head.Node.newString("");
        node18.removeProp(23);
        node14.addChildToFront(node18);
        com.google.javascript.rhino.head.Node node22 = node14.getFirstChild();
        com.google.javascript.rhino.head.ast.Comment comment23 = node14.getJsDocNode();
        int int24 = node14.getType();
        node14.setDouble((double) 17);
        com.google.javascript.rhino.head.Node node28 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str29 = node28.toString();
        boolean boolean30 = node28.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node32 = com.google.javascript.rhino.head.Node.newString("");
        node32.removeProp(23);
        node28.addChildToFront(node32);
        java.lang.String str36 = node32.getString();
        com.google.javascript.rhino.head.Node node39 = com.google.javascript.rhino.head.Node.newString((int) (short) 0, "-1");
        com.google.javascript.rhino.head.Node node41 = new com.google.javascript.rhino.head.Node(10, node14, node32, node39, 14);
        java.lang.String str42 = node41.getJsDoc();
        com.google.javascript.rhino.head.Node node44 = new com.google.javascript.rhino.head.Node(17, node41, (int) (byte) 0);
        com.google.javascript.rhino.head.Node node45 = node41.getLastChild();
        node3.addChildrenToBack(node41);
        com.google.javascript.rhino.head.Node node47 = node3.getLastSibling();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator48 = node47.new NodeIterator();
        com.google.javascript.rhino.head.Node node52 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str53 = node52.toString();
        boolean boolean54 = node52.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node56 = com.google.javascript.rhino.head.Node.newString("");
        node56.removeProp(23);
        node52.addChildToFront(node56);
        com.google.javascript.rhino.head.Node node61 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean62 = node61.hasChildren();
        node52.addChildrenToFront(node61);
        com.google.javascript.rhino.head.Node node65 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str66 = node65.toString();
        boolean boolean67 = node65.hasConsistentReturnUsage();
        boolean boolean68 = node65.hasSideEffects();
        com.google.javascript.rhino.head.Node node70 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str71 = node70.toString();
        boolean boolean72 = node70.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node74 = com.google.javascript.rhino.head.Node.newString("");
        node74.removeProp(23);
        node70.addChildToFront(node74);
        com.google.javascript.rhino.head.Node node78 = node70.getFirstChild();
        com.google.javascript.rhino.head.ast.Comment comment79 = node70.getJsDocNode();
        node65.addChildToBack(node70);
        com.google.javascript.rhino.head.Node node81 = new com.google.javascript.rhino.head.Node(15, node52, node65);
        com.google.javascript.rhino.head.Node node84 = com.google.javascript.rhino.head.Node.newString(23, "");
        java.lang.String str85 = node84.toString();
        com.google.javascript.rhino.head.Node node88 = com.google.javascript.rhino.head.Node.newString("hi!");
        com.google.javascript.rhino.head.Node node91 = com.google.javascript.rhino.head.Node.newString(23, "");
        com.google.javascript.rhino.head.Node node92 = new com.google.javascript.rhino.head.Node(0, node88, node91);
        com.google.javascript.rhino.head.Node node93 = new com.google.javascript.rhino.head.Node(24, node52, node84, node92);
        com.google.javascript.rhino.head.Node node94 = new com.google.javascript.rhino.head.Node(40, node47, node84);
        com.google.javascript.rhino.head.ast.Comment comment95 = node84.getJsDocNode();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "40" + "'", str4, "40");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "40" + "'", str15, "40");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNull(comment23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 40 + "'", int24 == 40);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "40" + "'", str29, "40");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "40" + "'", str53, "40");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "40" + "'", str66, "40");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "40" + "'", str71, "40");
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertNull(comment79);
        org.junit.Assert.assertNotNull(node84);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "23" + "'", str85, "23");
        org.junit.Assert.assertNotNull(node88);
        org.junit.Assert.assertNotNull(node91);
        org.junit.Assert.assertNull(comment95);
    }

    @Test
    public void test1664() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1664");
        com.google.javascript.rhino.head.Node node2 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        com.google.javascript.rhino.head.Node node3 = node2.getLastSibling();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator4 = node3.new NodeIterator();
        com.google.javascript.rhino.head.Node node5 = new com.google.javascript.rhino.head.Node(0, node3);
        boolean boolean6 = node5.hasSideEffects();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test1665() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1665");
        com.google.javascript.rhino.head.Node node1 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean2 = node1.hasSideEffects();
        com.google.javascript.rhino.head.Node node4 = node1.setType(3);
        // The following exception was thrown during execution in test generation
        try {
            int int5 = node4.labelId();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(node4);
    }

    @Test
    public void test1666() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1666");
        com.google.javascript.rhino.head.Node node4 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str5 = node4.toString();
        boolean boolean6 = node4.hasConsistentReturnUsage();
        boolean boolean7 = node4.hasSideEffects();
        com.google.javascript.rhino.head.Node node8 = new com.google.javascript.rhino.head.Node(0, node4);
        com.google.javascript.rhino.head.Node node11 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str12 = node11.toString();
        boolean boolean13 = node11.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node15 = com.google.javascript.rhino.head.Node.newString("");
        node15.removeProp(23);
        node11.addChildToFront(node15);
        com.google.javascript.rhino.head.Node node20 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean21 = node20.hasChildren();
        node11.addChildrenToFront(node20);
        com.google.javascript.rhino.head.Node node24 = new com.google.javascript.rhino.head.Node((int) (byte) -1);
        java.lang.String str25 = node24.toString();
        boolean boolean26 = node24.hasChildren();
        com.google.javascript.rhino.head.Node node28 = new com.google.javascript.rhino.head.Node((int) (short) -1, node20, node24, (int) (short) 10);
        com.google.javascript.rhino.head.Node node31 = com.google.javascript.rhino.head.Node.newString(23, "");
        com.google.javascript.rhino.head.Node node33 = new com.google.javascript.rhino.head.Node((int) (byte) 10, node4, node24, node31, (int) (short) 0);
        com.google.javascript.rhino.head.ast.Comment comment34 = null;
        node24.setJsDocNode(comment34);
        com.google.javascript.rhino.head.Node node38 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        java.lang.String str39 = node38.toString();
        int int40 = node38.getLineno();
        com.google.javascript.rhino.head.Node node42 = com.google.javascript.rhino.head.Node.newNumber((double) 0);
        com.google.javascript.rhino.head.ast.Comment comment43 = node42.getJsDocNode();
        com.google.javascript.rhino.head.Node node45 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        com.google.javascript.rhino.head.Node node47 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str48 = node47.toString();
        boolean boolean49 = node47.hasConsistentReturnUsage();
        boolean boolean50 = node47.hasSideEffects();
        node45.addChildrenToFront(node47);
        com.google.javascript.rhino.head.Node node52 = new com.google.javascript.rhino.head.Node(8, node38, node42, node45);
        node24.addChildrenToFront(node42);
        node42.putIntProp((int) (short) 0, (int) (short) 10);
        node42.setLineno((int) (short) 1);
        com.google.javascript.rhino.head.Node node59 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.head.Node node61 = new com.google.javascript.rhino.head.Node(22, node42, node59, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "40" + "'", str5, "40");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "40" + "'", str12, "40");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "-1" + "'", str25, "-1");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "100" + "'", str39, "100");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNull(comment43);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "40" + "'", str48, "40");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
    }

    @Test
    public void test1667() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1667");
        com.google.javascript.rhino.head.Node node3 = com.google.javascript.rhino.head.Node.newString("hi!");
        com.google.javascript.rhino.head.Node node4 = new com.google.javascript.rhino.head.Node(13, node3);
        com.google.javascript.rhino.head.Node node7 = new com.google.javascript.rhino.head.Node(12);
        node7.putIntProp(14, 3);
        com.google.javascript.rhino.head.Node node11 = new com.google.javascript.rhino.head.Node(6, node7);
        com.google.javascript.rhino.head.Node node12 = node11.getLastChild();
        com.google.javascript.rhino.head.Node node14 = new com.google.javascript.rhino.head.Node((int) (byte) 100, node3, node11, 0);
        com.google.javascript.rhino.head.Node node16 = com.google.javascript.rhino.head.Node.newNumber((double) 1.0f);
        node11.addChildrenToFront(node16);
        int int18 = node11.getLineno();
        com.google.javascript.rhino.head.Node node21 = com.google.javascript.rhino.head.Node.newNumber((double) 19);
        com.google.javascript.rhino.head.Node node24 = com.google.javascript.rhino.head.Node.newString("");
        node24.removeProp(23);
        com.google.javascript.rhino.head.Node node29 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str30 = node29.toString();
        boolean boolean31 = node29.hasConsistentReturnUsage();
        boolean boolean32 = node29.hasSideEffects();
        com.google.javascript.rhino.head.Node node33 = new com.google.javascript.rhino.head.Node(0, node29);
        node24.addChildrenToBack(node33);
        com.google.javascript.rhino.head.Node node35 = new com.google.javascript.rhino.head.Node(9, node24);
        com.google.javascript.rhino.head.Node node39 = com.google.javascript.rhino.head.Node.newString("hi!");
        com.google.javascript.rhino.head.Node node40 = new com.google.javascript.rhino.head.Node(13, node39);
        com.google.javascript.rhino.head.Node node41 = new com.google.javascript.rhino.head.Node(7, node39);
        com.google.javascript.rhino.head.Node node43 = new com.google.javascript.rhino.head.Node((int) 'a', node21, node35, node39, (int) (short) 1);
        node11.addChildrenToBack(node43);
        int int45 = node43.getLineno();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "40" + "'", str30, "40");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
    }

    @Test
    public void test1668() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1668");
        com.google.javascript.rhino.head.Node node2 = new com.google.javascript.rhino.head.Node(16, 19);
        boolean boolean3 = node2.hasSideEffects();
        boolean boolean4 = node2.hasChildren();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test1669() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1669");
        com.google.javascript.rhino.head.Node node2 = com.google.javascript.rhino.head.Node.newString("hi!");
        com.google.javascript.rhino.head.Node node3 = new com.google.javascript.rhino.head.Node(13, node2);
        com.google.javascript.rhino.head.Node node6 = com.google.javascript.rhino.head.Node.newString((int) '4', "40");
        // The following exception was thrown during execution in test generation
        try {
            node3.removeChild(node6);
            org.junit.Assert.fail("Expected exception of type java.lang.RuntimeException; message: node is not a child");
        } catch (java.lang.RuntimeException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node6);
    }

    @Test
    public void test1670() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1670");
        com.google.javascript.rhino.head.Node node2 = com.google.javascript.rhino.head.Node.newString((int) '4', "40");
        com.google.javascript.rhino.head.Node node6 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str7 = node6.toString();
        boolean boolean8 = node6.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node10 = com.google.javascript.rhino.head.Node.newString("");
        node10.removeProp(23);
        node6.addChildToFront(node10);
        com.google.javascript.rhino.head.Node node15 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean16 = node15.hasChildren();
        node6.addChildrenToFront(node15);
        com.google.javascript.rhino.head.Node node19 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str20 = node19.toString();
        boolean boolean21 = node19.hasConsistentReturnUsage();
        boolean boolean22 = node19.hasSideEffects();
        com.google.javascript.rhino.head.Node node24 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str25 = node24.toString();
        boolean boolean26 = node24.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node28 = com.google.javascript.rhino.head.Node.newString("");
        node28.removeProp(23);
        node24.addChildToFront(node28);
        com.google.javascript.rhino.head.Node node32 = node24.getFirstChild();
        com.google.javascript.rhino.head.ast.Comment comment33 = node24.getJsDocNode();
        node19.addChildToBack(node24);
        com.google.javascript.rhino.head.Node node35 = new com.google.javascript.rhino.head.Node(15, node6, node19);
        com.google.javascript.rhino.head.Node node38 = com.google.javascript.rhino.head.Node.newString(23, "");
        java.lang.String str39 = node38.toString();
        com.google.javascript.rhino.head.Node node42 = com.google.javascript.rhino.head.Node.newString("hi!");
        com.google.javascript.rhino.head.Node node45 = com.google.javascript.rhino.head.Node.newString(23, "");
        com.google.javascript.rhino.head.Node node46 = new com.google.javascript.rhino.head.Node(0, node42, node45);
        com.google.javascript.rhino.head.Node node47 = new com.google.javascript.rhino.head.Node(24, node6, node38, node46);
        com.google.javascript.rhino.head.Node node48 = node47.getNext();
        com.google.javascript.rhino.head.Node node49 = node2.getChildBefore(node48);
        com.google.javascript.rhino.head.Node node52 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str53 = node52.toString();
        boolean boolean54 = node52.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node56 = com.google.javascript.rhino.head.Node.newString("");
        node56.removeProp(23);
        node52.addChildToFront(node56);
        com.google.javascript.rhino.head.Node node60 = node52.getFirstChild();
        node60.setString("100");
        com.google.javascript.rhino.head.ast.Scope scope63 = node60.getScope();
        com.google.javascript.rhino.head.Node node65 = new com.google.javascript.rhino.head.Node((int) ' ', node60, 2);
        java.util.Spliterator<com.google.javascript.rhino.head.Node> nodeSpliterator66 = node60.spliterator();
        com.google.javascript.rhino.head.Node node68 = new com.google.javascript.rhino.head.Node(23);
        node60.addChildToBack(node68);
        node2.addChildrenToFront(node60);
        boolean boolean71 = node60.hasChildren();
        node60.setString("22");
        // The following exception was thrown during execution in test generation
        try {
            node60.setDouble((double) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: com.google.javascript.rhino.head.ast.Name cannot be cast to com.google.javascript.rhino.head.ast.NumberLiteral");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "40" + "'", str7, "40");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "40" + "'", str20, "40");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "40" + "'", str25, "40");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNull(comment33);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "23" + "'", str39, "23");
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNull(node48);
        org.junit.Assert.assertNull(node49);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "40" + "'", str53, "40");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNull(scope63);
        org.junit.Assert.assertNotNull(nodeSpliterator66);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
    }

    @Test
    public void test1671() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1671");
        com.google.javascript.rhino.head.Node node1 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str2 = node1.toString();
        boolean boolean3 = node1.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator4 = node1.new NodeIterator();
        com.google.javascript.rhino.head.Node node7 = com.google.javascript.rhino.head.Node.newString(10, "100");
        com.google.javascript.rhino.head.Node node11 = com.google.javascript.rhino.head.Node.newString("hi!");
        com.google.javascript.rhino.head.Node node12 = new com.google.javascript.rhino.head.Node(13, node11);
        com.google.javascript.rhino.head.Node node13 = new com.google.javascript.rhino.head.Node(7, node11);
        com.google.javascript.rhino.head.Node node15 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        node13.addChildToFront(node15);
        com.google.javascript.rhino.head.Node node19 = new com.google.javascript.rhino.head.Node(12);
        node19.putIntProp(14, 3);
        com.google.javascript.rhino.head.Node node23 = new com.google.javascript.rhino.head.Node(6, node19);
        com.google.javascript.rhino.head.Node node24 = node23.getLastChild();
        node13.addChildToFront(node23);
        node7.addChildToFront(node13);
        java.lang.Object obj28 = node7.getProp(21);
        com.google.javascript.rhino.head.Node node29 = node7.getFirstChild();
        node7.setString("hi!");
        com.google.javascript.rhino.head.Node node33 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str34 = node33.toString();
        boolean boolean35 = node33.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.ast.Comment comment36 = null;
        node33.setJsDocNode(comment36);
        com.google.javascript.rhino.head.Node node40 = com.google.javascript.rhino.head.Node.newString("");
        node40.removeProp(23);
        com.google.javascript.rhino.head.Node node45 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str46 = node45.toString();
        boolean boolean47 = node45.hasConsistentReturnUsage();
        boolean boolean48 = node45.hasSideEffects();
        com.google.javascript.rhino.head.Node node49 = new com.google.javascript.rhino.head.Node(0, node45);
        node40.addChildrenToBack(node49);
        com.google.javascript.rhino.head.Node node51 = new com.google.javascript.rhino.head.Node(9, node40);
        node33.addChildrenToFront(node51);
        com.google.javascript.rhino.head.Node node54 = node33.setType(18);
        node33.removeChildren();
        boolean boolean56 = node33.hasSideEffects();
        node1.addChildAfter(node7, node33);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str58 = node33.getString();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: com.google.javascript.rhino.head.ast.NumberLiteral cannot be cast to com.google.javascript.rhino.head.ast.Name");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "40" + "'", str2, "40");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNull(obj28);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "40" + "'", str34, "40");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "40" + "'", str46, "40");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
    }

    @Test
    public void test1672() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1672");
        com.google.javascript.rhino.head.Node node2 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        com.google.javascript.rhino.head.Node node4 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str5 = node4.toString();
        boolean boolean6 = node4.hasConsistentReturnUsage();
        boolean boolean7 = node4.hasSideEffects();
        node2.addChildrenToFront(node4);
        com.google.javascript.rhino.head.Node node9 = node4.getLastSibling();
        com.google.javascript.rhino.head.Node node10 = new com.google.javascript.rhino.head.Node((int) ' ', node4);
        java.util.Spliterator<com.google.javascript.rhino.head.Node> nodeSpliterator11 = node10.spliterator();
        java.lang.Object obj13 = node10.getProp((int) (byte) 10);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "40" + "'", str5, "40");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(nodeSpliterator11);
        org.junit.Assert.assertNull(obj13);
    }

    @Test
    public void test1673() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1673");
        com.google.javascript.rhino.head.Node node2 = new com.google.javascript.rhino.head.Node(4, (int) (short) 0);
        com.google.javascript.rhino.head.Node node3 = node2.getLastSibling();
        int int4 = node2.getLineno();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator5 = node2.new NodeIterator();
        // The following exception was thrown during execution in test generation
        try {
            nodeIterator5.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: next() has not been called");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
    }

    @Test
    public void test1674() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1674");
        com.google.javascript.rhino.head.Node node2 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str3 = node2.toString();
        boolean boolean4 = node2.hasConsistentReturnUsage();
        boolean boolean5 = node2.hasSideEffects();
        com.google.javascript.rhino.head.Node node6 = new com.google.javascript.rhino.head.Node(0, node2);
        int int7 = node2.getLineno();
        com.google.javascript.rhino.head.ast.Scope scope8 = null;
        // The following exception was thrown during execution in test generation
        try {
            node2.setScope(scope8);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "40" + "'", str3, "40");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
    }

    @Test
    public void test1675() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1675");
        com.google.javascript.rhino.head.Node node2 = com.google.javascript.rhino.head.Node.newString("");
        node2.removeProp(23);
        com.google.javascript.rhino.head.Node node7 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str8 = node7.toString();
        boolean boolean9 = node7.hasConsistentReturnUsage();
        boolean boolean10 = node7.hasSideEffects();
        com.google.javascript.rhino.head.Node node11 = new com.google.javascript.rhino.head.Node(0, node7);
        node2.addChildrenToBack(node11);
        int int13 = node2.getLineno();
        node2.putIntProp(15, 0);
        com.google.javascript.rhino.head.Node node19 = com.google.javascript.rhino.head.Node.newString("-1");
        com.google.javascript.rhino.head.Node node23 = com.google.javascript.rhino.head.Node.newString("hi!");
        com.google.javascript.rhino.head.Node node24 = new com.google.javascript.rhino.head.Node(13, node23);
        com.google.javascript.rhino.head.Node node27 = new com.google.javascript.rhino.head.Node(12);
        node27.putIntProp(14, 3);
        com.google.javascript.rhino.head.Node node31 = new com.google.javascript.rhino.head.Node(6, node27);
        com.google.javascript.rhino.head.Node node32 = node31.getLastChild();
        com.google.javascript.rhino.head.Node node34 = new com.google.javascript.rhino.head.Node((int) (byte) 100, node23, node31, 0);
        com.google.javascript.rhino.head.Node node35 = new com.google.javascript.rhino.head.Node(17, node19, node34);
        com.google.javascript.rhino.head.Node node36 = node19.getNext();
        com.google.javascript.rhino.head.Node node37 = node19.getFirstChild();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.head.Node node39 = new com.google.javascript.rhino.head.Node(13, node2, node37, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "40" + "'", str8, "40");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNull(node37);
    }

    @Test
    public void test1676() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1676");
        com.google.javascript.rhino.head.Node node1 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str2 = node1.toString();
        boolean boolean3 = node1.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node4 = node1.getLastSibling();
        com.google.javascript.rhino.head.Node node6 = node4.setType(100);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode7 = null;
        java.lang.String str8 = node4.toStringTree(scriptNode7);
        com.google.javascript.rhino.head.Node node12 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str13 = node12.toString();
        boolean boolean14 = node12.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node16 = com.google.javascript.rhino.head.Node.newString("");
        node16.removeProp(23);
        node12.addChildToFront(node16);
        com.google.javascript.rhino.head.Node node21 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean22 = node21.hasChildren();
        node12.addChildrenToFront(node21);
        int int24 = node21.getLineno();
        com.google.javascript.rhino.head.Node node26 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str27 = node26.toString();
        boolean boolean28 = node26.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node30 = com.google.javascript.rhino.head.Node.newString("");
        node30.removeProp(23);
        node26.addChildToFront(node30);
        com.google.javascript.rhino.head.Node node34 = node26.getFirstChild();
        com.google.javascript.rhino.head.Node node36 = new com.google.javascript.rhino.head.Node((int) (short) 0, node21, node26, 9);
        boolean boolean37 = node21.hasSideEffects();
        com.google.javascript.rhino.head.Node node40 = com.google.javascript.rhino.head.Node.newString(23, "");
        com.google.javascript.rhino.head.Node node41 = node40.getLastSibling();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator42 = node41.new NodeIterator();
        com.google.javascript.rhino.head.Node node44 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str45 = node44.toString();
        boolean boolean46 = node44.hasConsistentReturnUsage();
        boolean boolean47 = node44.hasSideEffects();
        com.google.javascript.rhino.head.Node node49 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str50 = node49.toString();
        boolean boolean51 = node49.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node53 = com.google.javascript.rhino.head.Node.newString("");
        node53.removeProp(23);
        node49.addChildToFront(node53);
        com.google.javascript.rhino.head.Node node57 = node49.getFirstChild();
        com.google.javascript.rhino.head.ast.Comment comment58 = node49.getJsDocNode();
        node44.addChildToBack(node49);
        java.lang.String str60 = node44.toString();
        com.google.javascript.rhino.head.Node node62 = new com.google.javascript.rhino.head.Node(0, node21, node41, node44, 1);
        // The following exception was thrown during execution in test generation
        try {
            node4.removeChild(node21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "40" + "'", str2, "40");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "40" + "'", str13, "40");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "40" + "'", str27, "40");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "40" + "'", str45, "40");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "40" + "'", str50, "40");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertNull(comment58);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "40" + "'", str60, "40");
    }

    @Test
    public void test1677() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1677");
        com.google.javascript.rhino.head.Node node1 = new com.google.javascript.rhino.head.Node((int) (byte) -1);
        com.google.javascript.rhino.head.Node node4 = com.google.javascript.rhino.head.Node.newString("");
        node4.removeProp(23);
        com.google.javascript.rhino.head.Node node9 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str10 = node9.toString();
        boolean boolean11 = node9.hasConsistentReturnUsage();
        boolean boolean12 = node9.hasSideEffects();
        com.google.javascript.rhino.head.Node node13 = new com.google.javascript.rhino.head.Node(0, node9);
        node4.addChildrenToBack(node13);
        com.google.javascript.rhino.head.Node node15 = new com.google.javascript.rhino.head.Node(9, node4);
        node4.removeProp(4);
        com.google.javascript.rhino.head.Node node19 = node4.setType(23);
        node1.addChildrenToFront(node19);
        com.google.javascript.rhino.head.Node node24 = com.google.javascript.rhino.head.Node.newString("hi!");
        com.google.javascript.rhino.head.Node node25 = new com.google.javascript.rhino.head.Node(13, node24);
        com.google.javascript.rhino.head.Node node26 = new com.google.javascript.rhino.head.Node(7, node24);
        com.google.javascript.rhino.head.Node node28 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        node26.addChildToFront(node28);
        com.google.javascript.rhino.head.Node node30 = node26.getLastSibling();
        com.google.javascript.rhino.head.Node node34 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str35 = node34.toString();
        boolean boolean36 = node34.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node38 = com.google.javascript.rhino.head.Node.newString("");
        node38.removeProp(23);
        node34.addChildToFront(node38);
        com.google.javascript.rhino.head.Node node43 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean44 = node43.hasChildren();
        node34.addChildrenToFront(node43);
        int int46 = node43.getLineno();
        com.google.javascript.rhino.head.Node node48 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str49 = node48.toString();
        boolean boolean50 = node48.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node52 = com.google.javascript.rhino.head.Node.newString("");
        node52.removeProp(23);
        node48.addChildToFront(node52);
        com.google.javascript.rhino.head.Node node56 = node48.getFirstChild();
        com.google.javascript.rhino.head.Node node58 = new com.google.javascript.rhino.head.Node((int) (short) 0, node43, node48, 9);
        boolean boolean59 = node43.hasSideEffects();
        com.google.javascript.rhino.head.Node node62 = com.google.javascript.rhino.head.Node.newString(23, "");
        com.google.javascript.rhino.head.Node node63 = node62.getLastSibling();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator64 = node63.new NodeIterator();
        com.google.javascript.rhino.head.Node node66 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str67 = node66.toString();
        boolean boolean68 = node66.hasConsistentReturnUsage();
        boolean boolean69 = node66.hasSideEffects();
        com.google.javascript.rhino.head.Node node71 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str72 = node71.toString();
        boolean boolean73 = node71.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node75 = com.google.javascript.rhino.head.Node.newString("");
        node75.removeProp(23);
        node71.addChildToFront(node75);
        com.google.javascript.rhino.head.Node node79 = node71.getFirstChild();
        com.google.javascript.rhino.head.ast.Comment comment80 = node71.getJsDocNode();
        node66.addChildToBack(node71);
        java.lang.String str82 = node66.toString();
        com.google.javascript.rhino.head.Node node84 = new com.google.javascript.rhino.head.Node(0, node43, node63, node66, 1);
        node30.addChildToBack(node43);
        node19.addChildToFront(node30);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str87 = node30.getString();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: com.google.javascript.rhino.head.Node cannot be cast to com.google.javascript.rhino.head.ast.Name");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "40" + "'", str10, "40");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "40" + "'", str35, "40");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "40" + "'", str49, "40");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "40" + "'", str67, "40");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "40" + "'", str72, "40");
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertNull(comment80);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "40" + "'", str82, "40");
    }

    @Test
    public void test1678() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1678");
        com.google.javascript.rhino.head.Node node3 = com.google.javascript.rhino.head.Node.newString("hi!");
        com.google.javascript.rhino.head.Node node4 = new com.google.javascript.rhino.head.Node(13, node3);
        com.google.javascript.rhino.head.Node node5 = new com.google.javascript.rhino.head.Node(7, node3);
        com.google.javascript.rhino.head.Node node7 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        node5.addChildToFront(node7);
        com.google.javascript.rhino.head.Node node9 = node5.getFirstChild();
        int int12 = node5.getIntProp((int) (byte) 100, 14);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 14 + "'", int12 == 14);
    }

    @Test
    public void test1679() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1679");
        com.google.javascript.rhino.head.Node node2 = new com.google.javascript.rhino.head.Node((int) (byte) -1);
        java.lang.String str3 = node2.toString();
        int int6 = node2.getIntProp(11, (int) '4');
        com.google.javascript.rhino.head.Node node8 = node2.setType(15);
        com.google.javascript.rhino.head.Node node9 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.head.Node node10 = new com.google.javascript.rhino.head.Node(13, node8, node9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "-1" + "'", str3, "-1");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 52 + "'", int6 == 52);
        org.junit.Assert.assertNotNull(node8);
    }

    @Test
    public void test1680() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1680");
        com.google.javascript.rhino.head.Node node2 = new com.google.javascript.rhino.head.Node(12);
        node2.putIntProp(14, 3);
        com.google.javascript.rhino.head.Node node6 = new com.google.javascript.rhino.head.Node(6, node2);
        int int9 = node6.getIntProp(18, 26);
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator10 = node6.new NodeIterator();
        com.google.javascript.rhino.head.Node node11 = node6.getLastSibling();
        // The following exception was thrown during execution in test generation
        try {
            int int12 = node11.labelId();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 26 + "'", int9 == 26);
        org.junit.Assert.assertNotNull(node11);
    }

    @Test
    public void test1681() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1681");
        com.google.javascript.rhino.head.Node node2 = com.google.javascript.rhino.head.Node.newString("11");
        com.google.javascript.rhino.head.Node node5 = new com.google.javascript.rhino.head.Node((int) (byte) 1, 8);
        java.lang.String str6 = node5.toString();
        com.google.javascript.rhino.head.Node node7 = node5.getLastChild();
        com.google.javascript.rhino.head.Node node8 = new com.google.javascript.rhino.head.Node((int) 'a', node2, node5);
        // The following exception was thrown during execution in test generation
        try {
            node8.resetTargets();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "1" + "'", str6, "1");
        org.junit.Assert.assertNull(node7);
    }

    @Test
    public void test1682() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1682");
        com.google.javascript.rhino.head.Node node2 = com.google.javascript.rhino.head.Node.newString(23, "");
        com.google.javascript.rhino.head.Node node3 = node2.getLastSibling();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator4 = node3.new NodeIterator();
        com.google.javascript.rhino.head.Node node8 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        com.google.javascript.rhino.head.Node node10 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str11 = node10.toString();
        boolean boolean12 = node10.hasConsistentReturnUsage();
        boolean boolean13 = node10.hasSideEffects();
        node8.addChildrenToFront(node10);
        node10.removeChildren();
        com.google.javascript.rhino.head.Node node17 = com.google.javascript.rhino.head.Node.newString("hi!");
        node10.addChildrenToBack(node17);
        com.google.javascript.rhino.head.Node node20 = node10.setType((int) (short) -1);
        com.google.javascript.rhino.head.Node node22 = node20.setType(23);
        com.google.javascript.rhino.head.Node node26 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str27 = node26.toString();
        boolean boolean28 = node26.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node30 = com.google.javascript.rhino.head.Node.newString("");
        node30.removeProp(23);
        node26.addChildToFront(node30);
        com.google.javascript.rhino.head.Node node35 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean36 = node35.hasChildren();
        node26.addChildrenToFront(node35);
        com.google.javascript.rhino.head.Node node39 = new com.google.javascript.rhino.head.Node((int) (byte) -1);
        java.lang.String str40 = node39.toString();
        boolean boolean41 = node39.hasChildren();
        com.google.javascript.rhino.head.Node node43 = new com.google.javascript.rhino.head.Node((int) (short) -1, node35, node39, (int) (short) 10);
        com.google.javascript.rhino.head.Node node44 = node43.getLastChild();
        com.google.javascript.rhino.head.Node node49 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str50 = node49.toString();
        boolean boolean51 = node49.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node53 = com.google.javascript.rhino.head.Node.newString("");
        node53.removeProp(23);
        node49.addChildToFront(node53);
        com.google.javascript.rhino.head.Node node57 = new com.google.javascript.rhino.head.Node((int) 'a', node49);
        com.google.javascript.rhino.head.Node node59 = com.google.javascript.rhino.head.Node.newString("-1");
        com.google.javascript.rhino.head.Node node61 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str62 = node61.toString();
        com.google.javascript.rhino.head.Node node63 = node61.getLastChild();
        com.google.javascript.rhino.head.Node node65 = new com.google.javascript.rhino.head.Node((int) (short) -1, node49, node59, node61, (int) (short) -1);
        com.google.javascript.rhino.head.Node node67 = new com.google.javascript.rhino.head.Node((int) (short) 1, node61, 12);
        com.google.javascript.rhino.head.Node node69 = new com.google.javascript.rhino.head.Node(23);
        node69.removeProp(25);
        boolean boolean72 = node69.hasChildren();
        com.google.javascript.rhino.head.Node node73 = new com.google.javascript.rhino.head.Node((-1), node44, node61, node69);
        com.google.javascript.rhino.head.Node node74 = new com.google.javascript.rhino.head.Node(0, node22, node73);
        node3.putProp((int) 'a', (java.lang.Object) node74);
        int int76 = node3.getLineno();
        boolean boolean77 = node3.hasChildren();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "40" + "'", str11, "40");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "40" + "'", str27, "40");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "-1" + "'", str40, "-1");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "40" + "'", str50, "40");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "40" + "'", str62, "40");
        org.junit.Assert.assertNull(node63);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + (-1) + "'", int76 == (-1));
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
    }

    @Test
    public void test1683() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1683");
        com.google.javascript.rhino.head.Node node1 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        java.lang.String str2 = node1.toString();
        int int3 = node1.getLineno();
        // The following exception was thrown during execution in test generation
        try {
            int int5 = node1.getExistingIntProp(40);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "100" + "'", str2, "100");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
    }

    @Test
    public void test1684() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1684");
        com.google.javascript.rhino.head.Node node2 = com.google.javascript.rhino.head.Node.newString(23, "");
        com.google.javascript.rhino.head.Node node3 = node2.getLastSibling();
        int int4 = node2.getLineno();
        java.util.Spliterator<com.google.javascript.rhino.head.Node> nodeSpliterator5 = node2.spliterator();
        int int6 = node2.getType();
        boolean boolean7 = node2.hasSideEffects();
        // The following exception was thrown during execution in test generation
        try {
            node2.setDouble((double) 16);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: com.google.javascript.rhino.head.ast.Name cannot be cast to com.google.javascript.rhino.head.ast.NumberLiteral");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(nodeSpliterator5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 23 + "'", int6 == 23);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test1685() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1685");
        com.google.javascript.rhino.head.Node node3 = com.google.javascript.rhino.head.Node.newString("hi!");
        com.google.javascript.rhino.head.Node node4 = new com.google.javascript.rhino.head.Node(13, node3);
        com.google.javascript.rhino.head.Node node5 = new com.google.javascript.rhino.head.Node(7, node3);
        com.google.javascript.rhino.head.Node node7 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        node5.addChildToFront(node7);
        com.google.javascript.rhino.head.Node node9 = node5.getLastSibling();
        com.google.javascript.rhino.head.Node node10 = node5.getLastChild();
        com.google.javascript.rhino.head.ast.Scope scope11 = node10.getScope();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode12 = null;
        java.lang.String str13 = node10.toStringTree(scriptNode12);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNull(scope11);
        org.junit.Assert.assertNull(str13);
    }

    @Test
    public void test1686() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1686");
        com.google.javascript.rhino.head.Node node2 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str3 = node2.toString();
        boolean boolean4 = node2.hasConsistentReturnUsage();
        boolean boolean5 = node2.hasSideEffects();
        node2.setLineno((int) '4');
        com.google.javascript.rhino.head.Node node9 = node2.setType((int) '4');
        com.google.javascript.rhino.head.Node node10 = new com.google.javascript.rhino.head.Node(13, node9);
        java.lang.String str11 = node10.getJsDoc();
        java.lang.String str12 = node10.getJsDoc();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "40" + "'", str3, "40");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(str12);
    }

    @Test
    public void test1687() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1687");
        com.google.javascript.rhino.head.Node node3 = new com.google.javascript.rhino.head.Node(23, (int) (short) -1);
        com.google.javascript.rhino.head.Node node6 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str7 = node6.toString();
        boolean boolean8 = node6.hasConsistentReturnUsage();
        boolean boolean9 = node6.hasSideEffects();
        com.google.javascript.rhino.head.Node node10 = new com.google.javascript.rhino.head.Node(0, node6);
        com.google.javascript.rhino.head.Node node11 = node10.getLastChild();
        node10.removeChildren();
        com.google.javascript.rhino.head.Node node14 = new com.google.javascript.rhino.head.Node(19, node3, node10, 24);
        int int15 = node14.getType();
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "40" + "'", str7, "40");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 19 + "'", int15 == 19);
    }

    @Test
    public void test1688() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1688");
        com.google.javascript.rhino.head.Node node3 = com.google.javascript.rhino.head.Node.newString(10, "100");
        com.google.javascript.rhino.head.Node node7 = com.google.javascript.rhino.head.Node.newString("hi!");
        com.google.javascript.rhino.head.Node node8 = new com.google.javascript.rhino.head.Node(13, node7);
        com.google.javascript.rhino.head.Node node9 = new com.google.javascript.rhino.head.Node(7, node7);
        com.google.javascript.rhino.head.Node node11 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        node9.addChildToFront(node11);
        com.google.javascript.rhino.head.Node node15 = new com.google.javascript.rhino.head.Node(12);
        node15.putIntProp(14, 3);
        com.google.javascript.rhino.head.Node node19 = new com.google.javascript.rhino.head.Node(6, node15);
        com.google.javascript.rhino.head.Node node20 = node19.getLastChild();
        node9.addChildToFront(node19);
        node3.addChildToFront(node9);
        com.google.javascript.rhino.head.Node node25 = com.google.javascript.rhino.head.Node.newString((int) '4', "40");
        com.google.javascript.rhino.head.Node node29 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str30 = node29.toString();
        boolean boolean31 = node29.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node33 = com.google.javascript.rhino.head.Node.newString("");
        node33.removeProp(23);
        node29.addChildToFront(node33);
        com.google.javascript.rhino.head.Node node38 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean39 = node38.hasChildren();
        node29.addChildrenToFront(node38);
        com.google.javascript.rhino.head.Node node42 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str43 = node42.toString();
        boolean boolean44 = node42.hasConsistentReturnUsage();
        boolean boolean45 = node42.hasSideEffects();
        com.google.javascript.rhino.head.Node node47 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str48 = node47.toString();
        boolean boolean49 = node47.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node51 = com.google.javascript.rhino.head.Node.newString("");
        node51.removeProp(23);
        node47.addChildToFront(node51);
        com.google.javascript.rhino.head.Node node55 = node47.getFirstChild();
        com.google.javascript.rhino.head.ast.Comment comment56 = node47.getJsDocNode();
        node42.addChildToBack(node47);
        com.google.javascript.rhino.head.Node node58 = new com.google.javascript.rhino.head.Node(15, node29, node42);
        com.google.javascript.rhino.head.Node node61 = com.google.javascript.rhino.head.Node.newString(23, "");
        java.lang.String str62 = node61.toString();
        com.google.javascript.rhino.head.Node node65 = com.google.javascript.rhino.head.Node.newString("hi!");
        com.google.javascript.rhino.head.Node node68 = com.google.javascript.rhino.head.Node.newString(23, "");
        com.google.javascript.rhino.head.Node node69 = new com.google.javascript.rhino.head.Node(0, node65, node68);
        com.google.javascript.rhino.head.Node node70 = new com.google.javascript.rhino.head.Node(24, node29, node61, node69);
        com.google.javascript.rhino.head.Node node71 = node70.getNext();
        com.google.javascript.rhino.head.Node node72 = node25.getChildBefore(node71);
        com.google.javascript.rhino.head.Node node75 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str76 = node75.toString();
        boolean boolean77 = node75.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node79 = com.google.javascript.rhino.head.Node.newString("");
        node79.removeProp(23);
        node75.addChildToFront(node79);
        com.google.javascript.rhino.head.Node node83 = node75.getFirstChild();
        node83.setString("100");
        com.google.javascript.rhino.head.ast.Scope scope86 = node83.getScope();
        com.google.javascript.rhino.head.Node node88 = new com.google.javascript.rhino.head.Node((int) ' ', node83, 2);
        java.util.Spliterator<com.google.javascript.rhino.head.Node> nodeSpliterator89 = node83.spliterator();
        com.google.javascript.rhino.head.Node node91 = new com.google.javascript.rhino.head.Node(23);
        node83.addChildToBack(node91);
        node25.addChildrenToFront(node83);
        com.google.javascript.rhino.head.Node node94 = new com.google.javascript.rhino.head.Node(23, node3, node25);
        java.util.Spliterator<com.google.javascript.rhino.head.Node> nodeSpliterator95 = node94.spliterator();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "40" + "'", str30, "40");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "40" + "'", str43, "40");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "40" + "'", str48, "40");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNull(comment56);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "23" + "'", str62, "23");
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertNull(node71);
        org.junit.Assert.assertNull(node72);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "40" + "'", str76, "40");
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertNotNull(node83);
        org.junit.Assert.assertNull(scope86);
        org.junit.Assert.assertNotNull(nodeSpliterator89);
        org.junit.Assert.assertNotNull(nodeSpliterator95);
    }

    @Test
    public void test1689() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1689");
        com.google.javascript.rhino.head.Node node2 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str3 = node2.toString();
        com.google.javascript.rhino.head.ast.Comment comment4 = null;
        node2.setJsDocNode(comment4);
        com.google.javascript.rhino.head.Node node10 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str11 = node10.toString();
        boolean boolean12 = node10.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node14 = com.google.javascript.rhino.head.Node.newString("");
        node14.removeProp(23);
        node10.addChildToFront(node14);
        com.google.javascript.rhino.head.Node node18 = new com.google.javascript.rhino.head.Node((int) 'a', node10);
        com.google.javascript.rhino.head.Node node20 = com.google.javascript.rhino.head.Node.newString("-1");
        com.google.javascript.rhino.head.Node node22 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str23 = node22.toString();
        com.google.javascript.rhino.head.Node node24 = node22.getLastChild();
        com.google.javascript.rhino.head.Node node26 = new com.google.javascript.rhino.head.Node((int) (short) -1, node10, node20, node22, (int) (short) -1);
        com.google.javascript.rhino.head.Node node28 = com.google.javascript.rhino.head.Node.newString("23");
        com.google.javascript.rhino.head.Node node29 = new com.google.javascript.rhino.head.Node(26, node26, node28);
        com.google.javascript.rhino.head.Node node31 = new com.google.javascript.rhino.head.Node(19, node2, node29, 17);
        // The following exception was thrown during execution in test generation
        try {
            node2.labelId(12);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "40" + "'", str3, "40");
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "40" + "'", str11, "40");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "40" + "'", str23, "40");
        org.junit.Assert.assertNull(node24);
        org.junit.Assert.assertNotNull(node28);
    }

    @Test
    public void test1690() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1690");
        com.google.javascript.rhino.head.Node node2 = new com.google.javascript.rhino.head.Node((int) (byte) 1, 8);
        java.lang.String str3 = node2.toString();
        com.google.javascript.rhino.head.Node node4 = node2.getLastChild();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator5 = node2.new NodeIterator();
        // The following exception was thrown during execution in test generation
        try {
            nodeIterator5.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: next() has not been called");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "1" + "'", str3, "1");
        org.junit.Assert.assertNull(node4);
    }

    @Test
    public void test1691() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1691");
        com.google.javascript.rhino.head.Node node5 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str6 = node5.toString();
        boolean boolean7 = node5.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node9 = com.google.javascript.rhino.head.Node.newString("");
        node9.removeProp(23);
        node5.addChildToFront(node9);
        com.google.javascript.rhino.head.Node node13 = node5.getFirstChild();
        node13.setString("100");
        com.google.javascript.rhino.head.ast.Scope scope16 = node13.getScope();
        com.google.javascript.rhino.head.Node node18 = new com.google.javascript.rhino.head.Node((int) ' ', node13, 2);
        com.google.javascript.rhino.head.Node node19 = node13.getLastSibling();
        com.google.javascript.rhino.head.Node node22 = com.google.javascript.rhino.head.Node.newString(23, "");
        com.google.javascript.rhino.head.Node node23 = node22.getLastSibling();
        com.google.javascript.rhino.head.Node node24 = new com.google.javascript.rhino.head.Node((int) ' ', node19, node22);
        com.google.javascript.rhino.head.Node node27 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str28 = node27.toString();
        boolean boolean29 = node27.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node31 = com.google.javascript.rhino.head.Node.newString("");
        node31.removeProp(23);
        node27.addChildToFront(node31);
        com.google.javascript.rhino.head.Node node36 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean37 = node36.hasChildren();
        node27.addChildrenToFront(node36);
        com.google.javascript.rhino.head.Node node40 = new com.google.javascript.rhino.head.Node((int) (byte) -1);
        java.lang.String str41 = node40.toString();
        boolean boolean42 = node40.hasChildren();
        com.google.javascript.rhino.head.Node node44 = new com.google.javascript.rhino.head.Node((int) (short) -1, node36, node40, (int) (short) 10);
        com.google.javascript.rhino.head.Node node45 = node44.getLastChild();
        com.google.javascript.rhino.head.Node node48 = com.google.javascript.rhino.head.Node.newNumber((double) 0.0f);
        com.google.javascript.rhino.head.Node node50 = new com.google.javascript.rhino.head.Node(7);
        com.google.javascript.rhino.head.Node node51 = new com.google.javascript.rhino.head.Node(22, node48, node50);
        com.google.javascript.rhino.head.Node node53 = new com.google.javascript.rhino.head.Node(6, node22, node44, node50, 100);
        com.google.javascript.rhino.head.Node node54 = new com.google.javascript.rhino.head.Node(0, node22);
        int int55 = node22.getLineno();
        // The following exception was thrown during execution in test generation
        try {
            int int56 = node22.labelId();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "40" + "'", str6, "40");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNull(scope16);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "40" + "'", str28, "40");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "-1" + "'", str41, "-1");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
    }

    @Test
    public void test1692() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1692");
        com.google.javascript.rhino.head.Node node2 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str3 = node2.toString();
        com.google.javascript.rhino.head.ast.Comment comment4 = null;
        node2.setJsDocNode(comment4);
        com.google.javascript.rhino.head.Node node10 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str11 = node10.toString();
        boolean boolean12 = node10.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node14 = com.google.javascript.rhino.head.Node.newString("");
        node14.removeProp(23);
        node10.addChildToFront(node14);
        com.google.javascript.rhino.head.Node node18 = new com.google.javascript.rhino.head.Node((int) 'a', node10);
        com.google.javascript.rhino.head.Node node20 = com.google.javascript.rhino.head.Node.newString("-1");
        com.google.javascript.rhino.head.Node node22 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str23 = node22.toString();
        com.google.javascript.rhino.head.Node node24 = node22.getLastChild();
        com.google.javascript.rhino.head.Node node26 = new com.google.javascript.rhino.head.Node((int) (short) -1, node10, node20, node22, (int) (short) -1);
        com.google.javascript.rhino.head.Node node28 = com.google.javascript.rhino.head.Node.newString("23");
        com.google.javascript.rhino.head.Node node29 = new com.google.javascript.rhino.head.Node(26, node26, node28);
        com.google.javascript.rhino.head.Node node31 = new com.google.javascript.rhino.head.Node(19, node2, node29, 17);
        node2.putIntProp(100, (int) (byte) 0);
        com.google.javascript.rhino.head.Node node35 = node2.getFirstChild();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.head.ast.Scope scope36 = node2.getScope();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: com.google.javascript.rhino.head.ast.NumberLiteral cannot be cast to com.google.javascript.rhino.head.ast.Name");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "40" + "'", str3, "40");
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "40" + "'", str11, "40");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "40" + "'", str23, "40");
        org.junit.Assert.assertNull(node24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNull(node35);
    }

    @Test
    public void test1693() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1693");
        com.google.javascript.rhino.head.Node node1 = com.google.javascript.rhino.head.Node.newString("8");
        org.junit.Assert.assertNotNull(node1);
    }

    @Test
    public void test1694() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1694");
        com.google.javascript.rhino.head.Node node2 = new com.google.javascript.rhino.head.Node((int) (byte) 1);
        com.google.javascript.rhino.head.Node node6 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str7 = node6.toString();
        boolean boolean8 = node6.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node10 = com.google.javascript.rhino.head.Node.newString("");
        node10.removeProp(23);
        node6.addChildToFront(node10);
        com.google.javascript.rhino.head.Node node15 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean16 = node15.hasChildren();
        node6.addChildrenToFront(node15);
        int int18 = node15.getLineno();
        com.google.javascript.rhino.head.Node node20 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str21 = node20.toString();
        boolean boolean22 = node20.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node24 = com.google.javascript.rhino.head.Node.newString("");
        node24.removeProp(23);
        node20.addChildToFront(node24);
        com.google.javascript.rhino.head.Node node28 = node20.getFirstChild();
        com.google.javascript.rhino.head.Node node30 = new com.google.javascript.rhino.head.Node((int) (short) 0, node15, node20, 9);
        com.google.javascript.rhino.head.Node node34 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str35 = node34.toString();
        boolean boolean36 = node34.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node38 = com.google.javascript.rhino.head.Node.newString("");
        node38.removeProp(23);
        node34.addChildToFront(node38);
        com.google.javascript.rhino.head.Node node42 = new com.google.javascript.rhino.head.Node((int) 'a', node34);
        com.google.javascript.rhino.head.Node node44 = com.google.javascript.rhino.head.Node.newString("-1");
        com.google.javascript.rhino.head.Node node46 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str47 = node46.toString();
        com.google.javascript.rhino.head.Node node48 = node46.getLastChild();
        com.google.javascript.rhino.head.Node node50 = new com.google.javascript.rhino.head.Node((int) (short) -1, node34, node44, node46, (int) (short) -1);
        com.google.javascript.rhino.head.Node node52 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str53 = node52.toString();
        boolean boolean54 = node52.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node56 = com.google.javascript.rhino.head.Node.newString("");
        node56.removeProp(23);
        node52.addChildToFront(node56);
        com.google.javascript.rhino.head.Node node60 = node52.getFirstChild();
        com.google.javascript.rhino.head.Node node62 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        node60.addChildrenToBack(node62);
        com.google.javascript.rhino.head.Node node64 = node62.getLastChild();
        java.lang.String str65 = node62.getJsDoc();
        java.lang.Object obj67 = node62.getProp(0);
        com.google.javascript.rhino.head.Node node68 = new com.google.javascript.rhino.head.Node(3, node15, node34, node62);
        com.google.javascript.rhino.head.Node node70 = new com.google.javascript.rhino.head.Node((int) '4', node2, node34, (int) (short) 10);
        node70.setLineno(3);
        // The following exception was thrown during execution in test generation
        try {
            double double73 = node70.getDouble();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: com.google.javascript.rhino.head.Node cannot be cast to com.google.javascript.rhino.head.ast.NumberLiteral");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "40" + "'", str7, "40");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "40" + "'", str21, "40");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "40" + "'", str35, "40");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "40" + "'", str47, "40");
        org.junit.Assert.assertNull(node48);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "40" + "'", str53, "40");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNull(node64);
        org.junit.Assert.assertNull(str65);
        org.junit.Assert.assertNull(obj67);
    }

    @Test
    public void test1695() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1695");
        com.google.javascript.rhino.head.Node node2 = new com.google.javascript.rhino.head.Node(14, 18);
    }

    @Test
    public void test1696() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1696");
        com.google.javascript.rhino.head.Node node1 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str2 = node1.toString();
        com.google.javascript.rhino.head.Node node3 = node1.getLastChild();
        com.google.javascript.rhino.head.Node node7 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str8 = node7.toString();
        boolean boolean9 = node7.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node11 = com.google.javascript.rhino.head.Node.newString("");
        node11.removeProp(23);
        node7.addChildToFront(node11);
        com.google.javascript.rhino.head.Node node16 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean17 = node16.hasChildren();
        node7.addChildrenToFront(node16);
        int int19 = node16.getLineno();
        com.google.javascript.rhino.head.Node node21 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str22 = node21.toString();
        boolean boolean23 = node21.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node25 = com.google.javascript.rhino.head.Node.newString("");
        node25.removeProp(23);
        node21.addChildToFront(node25);
        com.google.javascript.rhino.head.Node node29 = node21.getFirstChild();
        com.google.javascript.rhino.head.Node node31 = new com.google.javascript.rhino.head.Node((int) (short) 0, node16, node21, 9);
        com.google.javascript.rhino.head.Node node35 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str36 = node35.toString();
        boolean boolean37 = node35.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node39 = com.google.javascript.rhino.head.Node.newString("");
        node39.removeProp(23);
        node35.addChildToFront(node39);
        com.google.javascript.rhino.head.Node node43 = new com.google.javascript.rhino.head.Node((int) 'a', node35);
        com.google.javascript.rhino.head.Node node45 = com.google.javascript.rhino.head.Node.newString("-1");
        com.google.javascript.rhino.head.Node node47 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str48 = node47.toString();
        com.google.javascript.rhino.head.Node node49 = node47.getLastChild();
        com.google.javascript.rhino.head.Node node51 = new com.google.javascript.rhino.head.Node((int) (short) -1, node35, node45, node47, (int) (short) -1);
        com.google.javascript.rhino.head.Node node53 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str54 = node53.toString();
        boolean boolean55 = node53.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node57 = com.google.javascript.rhino.head.Node.newString("");
        node57.removeProp(23);
        node53.addChildToFront(node57);
        com.google.javascript.rhino.head.Node node61 = node53.getFirstChild();
        com.google.javascript.rhino.head.Node node63 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        node61.addChildrenToBack(node63);
        com.google.javascript.rhino.head.Node node65 = node63.getLastChild();
        java.lang.String str66 = node63.getJsDoc();
        java.lang.Object obj68 = node63.getProp(0);
        com.google.javascript.rhino.head.Node node69 = new com.google.javascript.rhino.head.Node(3, node16, node35, node63);
        com.google.javascript.rhino.head.ast.Comment comment70 = node69.getJsDocNode();
        node1.addChildrenToFront(node69);
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor72 = node1.iterator();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "40" + "'", str2, "40");
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "40" + "'", str8, "40");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "40" + "'", str22, "40");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "40" + "'", str36, "40");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "40" + "'", str48, "40");
        org.junit.Assert.assertNull(node49);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "40" + "'", str54, "40");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertNull(node65);
        org.junit.Assert.assertNull(str66);
        org.junit.Assert.assertNull(obj68);
        org.junit.Assert.assertNull(comment70);
        org.junit.Assert.assertNotNull(nodeItor72);
    }

    @Test
    public void test1697() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1697");
        com.google.javascript.rhino.head.Node node1 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        com.google.javascript.rhino.head.Node node2 = node1.getLastSibling();
        com.google.javascript.rhino.head.ast.Comment comment3 = null;
        node2.setJsDocNode(comment3);
        node2.putIntProp(5, (int) (short) 10);
        com.google.javascript.rhino.head.Node node9 = node2.setType(0);
        com.google.javascript.rhino.head.Node node10 = node9.getLastChild();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj12 = node10.getProp((int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNull(node10);
    }

    @Test
    public void test1698() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1698");
        com.google.javascript.rhino.head.Node node2 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str3 = node2.toString();
        boolean boolean4 = node2.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node6 = com.google.javascript.rhino.head.Node.newString("");
        node6.removeProp(23);
        node2.addChildToFront(node6);
        com.google.javascript.rhino.head.Node node10 = new com.google.javascript.rhino.head.Node((int) 'a', node2);
        com.google.javascript.rhino.head.Node node14 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str15 = node14.toString();
        boolean boolean16 = node14.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node18 = com.google.javascript.rhino.head.Node.newString("");
        node18.removeProp(23);
        node14.addChildToFront(node18);
        com.google.javascript.rhino.head.Node node22 = node14.getFirstChild();
        node22.setString("100");
        com.google.javascript.rhino.head.ast.Scope scope25 = node22.getScope();
        com.google.javascript.rhino.head.Node node27 = new com.google.javascript.rhino.head.Node((int) ' ', node22, 2);
        com.google.javascript.rhino.head.Node node28 = node22.getLastSibling();
        com.google.javascript.rhino.head.Node node31 = com.google.javascript.rhino.head.Node.newString(23, "");
        com.google.javascript.rhino.head.Node node32 = node31.getLastSibling();
        com.google.javascript.rhino.head.Node node33 = new com.google.javascript.rhino.head.Node((int) ' ', node28, node31);
        node2.addChildrenToFront(node33);
        com.google.javascript.rhino.head.Node node35 = node33.getLastSibling();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator36 = node33.new NodeIterator();
        int int37 = node33.getLineno();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "40" + "'", str3, "40");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "40" + "'", str15, "40");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNull(scope25);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
    }

    @Test
    public void test1699() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1699");
        com.google.javascript.rhino.head.Node node4 = com.google.javascript.rhino.head.Node.newString((int) '4', "hi!");
        com.google.javascript.rhino.head.Node node8 = com.google.javascript.rhino.head.Node.newString("hi!");
        com.google.javascript.rhino.head.Node node9 = new com.google.javascript.rhino.head.Node(13, node8);
        com.google.javascript.rhino.head.Node node10 = new com.google.javascript.rhino.head.Node(7, node8);
        com.google.javascript.rhino.head.Node node12 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        node10.addChildToFront(node12);
        com.google.javascript.rhino.head.Node node16 = new com.google.javascript.rhino.head.Node(12);
        node16.putIntProp(14, 3);
        com.google.javascript.rhino.head.Node node20 = new com.google.javascript.rhino.head.Node(6, node16);
        com.google.javascript.rhino.head.Node node21 = node20.getLastChild();
        node10.addChildToFront(node20);
        com.google.javascript.rhino.head.Node node23 = new com.google.javascript.rhino.head.Node(97, node4, node10);
        com.google.javascript.rhino.head.Node node24 = node4.getLastChild();
        com.google.javascript.rhino.head.Node node27 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str28 = node27.toString();
        boolean boolean29 = node27.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node31 = com.google.javascript.rhino.head.Node.newString("");
        node31.removeProp(23);
        node27.addChildToFront(node31);
        com.google.javascript.rhino.head.Node node35 = node27.getFirstChild();
        node35.setString("100");
        com.google.javascript.rhino.head.ast.Scope scope38 = node35.getScope();
        com.google.javascript.rhino.head.Node node40 = new com.google.javascript.rhino.head.Node((int) ' ', node35, 2);
        java.util.Spliterator<com.google.javascript.rhino.head.Node> nodeSpliterator41 = node35.spliterator();
        com.google.javascript.rhino.head.Node node44 = new com.google.javascript.rhino.head.Node((int) (byte) -1);
        java.lang.String str45 = node44.toString();
        com.google.javascript.rhino.head.ast.Comment comment46 = node44.getJsDocNode();
        node35.putProp((int) '#', (java.lang.Object) node44);
        boolean boolean48 = node44.hasSideEffects();
        int int49 = node44.getLineno();
        com.google.javascript.rhino.head.Node node51 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str52 = node51.toString();
        boolean boolean53 = node51.hasConsistentReturnUsage();
        boolean boolean54 = node51.hasSideEffects();
        com.google.javascript.rhino.head.Node node56 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str57 = node56.toString();
        boolean boolean58 = node56.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node60 = com.google.javascript.rhino.head.Node.newString("");
        node60.removeProp(23);
        node56.addChildToFront(node60);
        com.google.javascript.rhino.head.Node node64 = node56.getFirstChild();
        com.google.javascript.rhino.head.ast.Comment comment65 = node56.getJsDocNode();
        node51.addChildToBack(node56);
        java.lang.String str67 = node51.toString();
        com.google.javascript.rhino.head.Node node69 = node51.setType(25);
        com.google.javascript.rhino.head.Node node70 = new com.google.javascript.rhino.head.Node(25, node4, node44, node69);
        boolean boolean71 = node69.hasSideEffects();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNull(node24);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "40" + "'", str28, "40");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNull(scope38);
        org.junit.Assert.assertNotNull(nodeSpliterator41);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "-1" + "'", str45, "-1");
        org.junit.Assert.assertNull(comment46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "40" + "'", str52, "40");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "40" + "'", str57, "40");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertNull(comment65);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "40" + "'", str67, "40");
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
    }

    @Test
    public void test1700() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1700");
        com.google.javascript.rhino.head.Node node4 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str5 = node4.toString();
        boolean boolean6 = node4.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node8 = com.google.javascript.rhino.head.Node.newString("");
        node8.removeProp(23);
        node4.addChildToFront(node8);
        com.google.javascript.rhino.head.Node node12 = node4.getFirstChild();
        node12.setString("100");
        com.google.javascript.rhino.head.ast.Scope scope15 = node12.getScope();
        com.google.javascript.rhino.head.Node node17 = new com.google.javascript.rhino.head.Node((int) ' ', node12, 2);
        boolean boolean18 = node17.hasChildren();
        com.google.javascript.rhino.head.Node node22 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str23 = node22.toString();
        boolean boolean24 = node22.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node26 = com.google.javascript.rhino.head.Node.newString("");
        node26.removeProp(23);
        node22.addChildToFront(node26);
        com.google.javascript.rhino.head.Node node31 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean32 = node31.hasChildren();
        node22.addChildrenToFront(node31);
        int int34 = node31.getLineno();
        com.google.javascript.rhino.head.Node node36 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str37 = node36.toString();
        boolean boolean38 = node36.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node40 = com.google.javascript.rhino.head.Node.newString("");
        node40.removeProp(23);
        node36.addChildToFront(node40);
        com.google.javascript.rhino.head.Node node44 = node36.getFirstChild();
        com.google.javascript.rhino.head.Node node46 = new com.google.javascript.rhino.head.Node((int) (short) 0, node31, node36, 9);
        boolean boolean47 = node31.hasSideEffects();
        com.google.javascript.rhino.head.Node node50 = com.google.javascript.rhino.head.Node.newString(23, "");
        com.google.javascript.rhino.head.Node node51 = node50.getLastSibling();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator52 = node51.new NodeIterator();
        com.google.javascript.rhino.head.Node node54 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str55 = node54.toString();
        boolean boolean56 = node54.hasConsistentReturnUsage();
        boolean boolean57 = node54.hasSideEffects();
        com.google.javascript.rhino.head.Node node59 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str60 = node59.toString();
        boolean boolean61 = node59.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node63 = com.google.javascript.rhino.head.Node.newString("");
        node63.removeProp(23);
        node59.addChildToFront(node63);
        com.google.javascript.rhino.head.Node node67 = node59.getFirstChild();
        com.google.javascript.rhino.head.ast.Comment comment68 = node59.getJsDocNode();
        node54.addChildToBack(node59);
        java.lang.String str70 = node54.toString();
        com.google.javascript.rhino.head.Node node72 = new com.google.javascript.rhino.head.Node(0, node31, node51, node54, 1);
        com.google.javascript.rhino.head.Node node74 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        com.google.javascript.rhino.head.Node node76 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str77 = node76.toString();
        boolean boolean78 = node76.hasConsistentReturnUsage();
        boolean boolean79 = node76.hasSideEffects();
        node74.addChildrenToFront(node76);
        node76.removeChildren();
        com.google.javascript.rhino.head.Node node82 = new com.google.javascript.rhino.head.Node((int) (short) 0, node17, node51, node76);
        com.google.javascript.rhino.head.Node node85 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str86 = node85.toString();
        boolean boolean87 = node85.hasConsistentReturnUsage();
        boolean boolean88 = node85.hasSideEffects();
        com.google.javascript.rhino.head.Node node89 = new com.google.javascript.rhino.head.Node(0, node85);
        com.google.javascript.rhino.head.ast.Comment comment90 = node85.getJsDocNode();
        com.google.javascript.rhino.head.Node node91 = new com.google.javascript.rhino.head.Node(18, node17, node85);
        int int94 = node17.getIntProp(22, 2);
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator95 = node17.new NodeIterator();
        // The following exception was thrown during execution in test generation
        try {
            nodeIterator95.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: next() has not been called");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "40" + "'", str5, "40");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNull(scope15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "40" + "'", str23, "40");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "40" + "'", str37, "40");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "40" + "'", str55, "40");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "40" + "'", str60, "40");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertNull(comment68);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "40" + "'", str70, "40");
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "40" + "'", str77, "40");
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(node85);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "40" + "'", str86, "40");
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNull(comment90);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 2 + "'", int94 == 2);
    }

    @Test
    public void test1701() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1701");
        com.google.javascript.rhino.head.Node node1 = com.google.javascript.rhino.head.Node.newString("");
        int int4 = node1.getIntProp(17, (int) (byte) -1);
        com.google.javascript.rhino.head.Node node7 = new com.google.javascript.rhino.head.Node(40, 8);
        com.google.javascript.rhino.head.Node node10 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str11 = node10.toString();
        boolean boolean12 = node10.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node14 = com.google.javascript.rhino.head.Node.newString("");
        node14.removeProp(23);
        node10.addChildToFront(node14);
        com.google.javascript.rhino.head.Node node18 = node10.getFirstChild();
        com.google.javascript.rhino.head.Node node20 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        node18.addChildrenToBack(node20);
        com.google.javascript.rhino.head.Node node23 = com.google.javascript.rhino.head.Node.newString("");
        int int26 = node23.getIntProp(17, (int) (byte) -1);
        com.google.javascript.rhino.head.Node node27 = new com.google.javascript.rhino.head.Node((int) (short) 10, node18, node23);
        com.google.javascript.rhino.head.Node node29 = node18.setType(18);
        node1.addChildAfter(node7, node29);
        com.google.javascript.rhino.head.Node node32 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean33 = node32.hasSideEffects();
        node7.addChildrenToFront(node32);
        com.google.javascript.rhino.head.ast.Comment comment35 = null;
        node32.setJsDocNode(comment35);
        com.google.javascript.rhino.head.Node node37 = null;
        com.google.javascript.rhino.head.Node node38 = node32.getChildBefore(node37);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "40" + "'", str11, "40");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNull(node38);
    }

    @Test
    public void test1702() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1702");
        com.google.javascript.rhino.head.Node node2 = com.google.javascript.rhino.head.Node.newString(13, "");
        node2.setString("hi!");
        java.lang.String str5 = node2.getJsDoc();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNull(str5);
    }

    @Test
    public void test1703() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1703");
        com.google.javascript.rhino.head.Node node2 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        com.google.javascript.rhino.head.Node node4 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str5 = node4.toString();
        boolean boolean6 = node4.hasConsistentReturnUsage();
        boolean boolean7 = node4.hasSideEffects();
        node2.addChildrenToFront(node4);
        node4.removeChildren();
        com.google.javascript.rhino.head.Node node11 = com.google.javascript.rhino.head.Node.newString("hi!");
        node4.addChildrenToBack(node11);
        com.google.javascript.rhino.head.Node node14 = node4.setType((int) (short) -1);
        com.google.javascript.rhino.head.Node node16 = node14.setType(23);
        com.google.javascript.rhino.head.Node node20 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str21 = node20.toString();
        boolean boolean22 = node20.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node24 = com.google.javascript.rhino.head.Node.newString("");
        node24.removeProp(23);
        node20.addChildToFront(node24);
        com.google.javascript.rhino.head.Node node29 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean30 = node29.hasChildren();
        node20.addChildrenToFront(node29);
        com.google.javascript.rhino.head.Node node33 = new com.google.javascript.rhino.head.Node((int) (byte) -1);
        java.lang.String str34 = node33.toString();
        boolean boolean35 = node33.hasChildren();
        com.google.javascript.rhino.head.Node node37 = new com.google.javascript.rhino.head.Node((int) (short) -1, node29, node33, (int) (short) 10);
        com.google.javascript.rhino.head.Node node38 = node37.getLastChild();
        com.google.javascript.rhino.head.Node node43 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str44 = node43.toString();
        boolean boolean45 = node43.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node47 = com.google.javascript.rhino.head.Node.newString("");
        node47.removeProp(23);
        node43.addChildToFront(node47);
        com.google.javascript.rhino.head.Node node51 = new com.google.javascript.rhino.head.Node((int) 'a', node43);
        com.google.javascript.rhino.head.Node node53 = com.google.javascript.rhino.head.Node.newString("-1");
        com.google.javascript.rhino.head.Node node55 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str56 = node55.toString();
        com.google.javascript.rhino.head.Node node57 = node55.getLastChild();
        com.google.javascript.rhino.head.Node node59 = new com.google.javascript.rhino.head.Node((int) (short) -1, node43, node53, node55, (int) (short) -1);
        com.google.javascript.rhino.head.Node node61 = new com.google.javascript.rhino.head.Node((int) (short) 1, node55, 12);
        com.google.javascript.rhino.head.Node node63 = new com.google.javascript.rhino.head.Node(23);
        node63.removeProp(25);
        boolean boolean66 = node63.hasChildren();
        com.google.javascript.rhino.head.Node node67 = new com.google.javascript.rhino.head.Node((-1), node38, node55, node63);
        com.google.javascript.rhino.head.Node node68 = new com.google.javascript.rhino.head.Node(0, node16, node67);
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor69 = node67.iterator();
        com.google.javascript.rhino.head.ast.Comment comment70 = node67.getJsDocNode();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str71 = comment70.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "40" + "'", str5, "40");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "40" + "'", str21, "40");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "-1" + "'", str34, "-1");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "40" + "'", str44, "40");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "40" + "'", str56, "40");
        org.junit.Assert.assertNull(node57);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(nodeItor69);
        org.junit.Assert.assertNull(comment70);
    }

    @Test
    public void test1704() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1704");
        com.google.javascript.rhino.head.Node node2 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str3 = node2.toString();
        boolean boolean4 = node2.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node6 = com.google.javascript.rhino.head.Node.newString("");
        node6.removeProp(23);
        node2.addChildToFront(node6);
        com.google.javascript.rhino.head.Node node10 = node2.getFirstChild();
        node10.setString("100");
        com.google.javascript.rhino.head.ast.Scope scope13 = node10.getScope();
        com.google.javascript.rhino.head.Node node15 = new com.google.javascript.rhino.head.Node((int) ' ', node10, 2);
        boolean boolean16 = node15.hasChildren();
        com.google.javascript.rhino.head.Node node19 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str20 = node19.toString();
        boolean boolean21 = node19.hasConsistentReturnUsage();
        boolean boolean22 = node19.hasSideEffects();
        com.google.javascript.rhino.head.Node node23 = new com.google.javascript.rhino.head.Node(0, node19);
        int int24 = node19.getLineno();
        node15.addChildToFront(node19);
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator26 = node15.new NodeIterator();
        com.google.javascript.rhino.head.Node node27 = nodeIterator26.next();
        com.google.javascript.rhino.head.Node node28 = nodeIterator26.next();
        // The following exception was thrown during execution in test generation
        try {
            int int30 = node28.getExistingIntProp(1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "40" + "'", str3, "40");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNull(scope13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "40" + "'", str20, "40");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node28);
    }

    @Test
    public void test1705() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1705");
        com.google.javascript.rhino.head.Node node2 = new com.google.javascript.rhino.head.Node((int) '4', 23);
        java.lang.Class<?> wildcardClass3 = node2.getClass();
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test1706() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1706");
        com.google.javascript.rhino.head.Node node4 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str5 = node4.toString();
        boolean boolean6 = node4.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node8 = com.google.javascript.rhino.head.Node.newString("");
        node8.removeProp(23);
        node4.addChildToFront(node8);
        com.google.javascript.rhino.head.Node node13 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean14 = node13.hasChildren();
        node4.addChildrenToFront(node13);
        com.google.javascript.rhino.head.Node node17 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str18 = node17.toString();
        boolean boolean19 = node17.hasConsistentReturnUsage();
        boolean boolean20 = node17.hasSideEffects();
        com.google.javascript.rhino.head.Node node22 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str23 = node22.toString();
        boolean boolean24 = node22.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node26 = com.google.javascript.rhino.head.Node.newString("");
        node26.removeProp(23);
        node22.addChildToFront(node26);
        com.google.javascript.rhino.head.Node node30 = node22.getFirstChild();
        com.google.javascript.rhino.head.ast.Comment comment31 = node22.getJsDocNode();
        node17.addChildToBack(node22);
        com.google.javascript.rhino.head.Node node33 = new com.google.javascript.rhino.head.Node(15, node4, node17);
        com.google.javascript.rhino.head.Node node36 = com.google.javascript.rhino.head.Node.newString(23, "");
        java.lang.String str37 = node36.toString();
        com.google.javascript.rhino.head.Node node40 = com.google.javascript.rhino.head.Node.newString("hi!");
        com.google.javascript.rhino.head.Node node43 = com.google.javascript.rhino.head.Node.newString(23, "");
        com.google.javascript.rhino.head.Node node44 = new com.google.javascript.rhino.head.Node(0, node40, node43);
        com.google.javascript.rhino.head.Node node45 = new com.google.javascript.rhino.head.Node(24, node4, node36, node44);
        com.google.javascript.rhino.head.Node node46 = node45.getLastChild();
        com.google.javascript.rhino.head.Node node47 = new com.google.javascript.rhino.head.Node((int) '4', node46);
        com.google.javascript.rhino.head.Node node49 = node47.setType(25);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str50 = node47.getString();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: com.google.javascript.rhino.head.Node cannot be cast to com.google.javascript.rhino.head.ast.Name");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "40" + "'", str5, "40");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "40" + "'", str18, "40");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "40" + "'", str23, "40");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNull(comment31);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "23" + "'", str37, "23");
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNotNull(node49);
    }

    @Test
    public void test1707() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1707");
        com.google.javascript.rhino.head.Node node4 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str5 = node4.toString();
        boolean boolean6 = node4.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node8 = com.google.javascript.rhino.head.Node.newString("");
        node8.removeProp(23);
        node4.addChildToFront(node8);
        com.google.javascript.rhino.head.Node node13 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean14 = node13.hasChildren();
        node4.addChildrenToFront(node13);
        com.google.javascript.rhino.head.Node node17 = new com.google.javascript.rhino.head.Node((int) (byte) -1);
        java.lang.String str18 = node17.toString();
        boolean boolean19 = node17.hasChildren();
        com.google.javascript.rhino.head.Node node21 = new com.google.javascript.rhino.head.Node((int) (short) -1, node13, node17, (int) (short) 10);
        com.google.javascript.rhino.head.Node node22 = node21.getLastChild();
        com.google.javascript.rhino.head.Node node27 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str28 = node27.toString();
        boolean boolean29 = node27.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node31 = com.google.javascript.rhino.head.Node.newString("");
        node31.removeProp(23);
        node27.addChildToFront(node31);
        com.google.javascript.rhino.head.Node node35 = new com.google.javascript.rhino.head.Node((int) 'a', node27);
        com.google.javascript.rhino.head.Node node37 = com.google.javascript.rhino.head.Node.newString("-1");
        com.google.javascript.rhino.head.Node node39 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str40 = node39.toString();
        com.google.javascript.rhino.head.Node node41 = node39.getLastChild();
        com.google.javascript.rhino.head.Node node43 = new com.google.javascript.rhino.head.Node((int) (short) -1, node27, node37, node39, (int) (short) -1);
        com.google.javascript.rhino.head.Node node45 = new com.google.javascript.rhino.head.Node((int) (short) 1, node39, 12);
        com.google.javascript.rhino.head.Node node47 = new com.google.javascript.rhino.head.Node(23);
        node47.removeProp(25);
        boolean boolean50 = node47.hasChildren();
        com.google.javascript.rhino.head.Node node51 = new com.google.javascript.rhino.head.Node((-1), node22, node39, node47);
        boolean boolean52 = node39.hasSideEffects();
        com.google.javascript.rhino.head.Node node56 = com.google.javascript.rhino.head.Node.newString(0, "hi!");
        node39.putProp(22, (java.lang.Object) 0);
        com.google.javascript.rhino.head.Node node59 = new com.google.javascript.rhino.head.Node((int) '4', node39, (int) (short) 0);
        node39.setLineno(15);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "40" + "'", str5, "40");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "-1" + "'", str18, "-1");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "40" + "'", str28, "40");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "40" + "'", str40, "40");
        org.junit.Assert.assertNull(node41);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(node56);
    }

    @Test
    public void test1708() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1708");
        com.google.javascript.rhino.head.Node node2 = new com.google.javascript.rhino.head.Node((int) (short) -1, 12);
        com.google.javascript.rhino.head.Node node5 = com.google.javascript.rhino.head.Node.newString("hi!");
        com.google.javascript.rhino.head.Node node8 = com.google.javascript.rhino.head.Node.newString(23, "");
        com.google.javascript.rhino.head.Node node9 = new com.google.javascript.rhino.head.Node(0, node5, node8);
        com.google.javascript.rhino.head.Node node10 = node5.getFirstChild();
        com.google.javascript.rhino.head.Node node13 = com.google.javascript.rhino.head.Node.newString(23, "");
        java.lang.String str14 = node13.toString();
        java.lang.String str15 = node13.getString();
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor16 = node13.iterator();
        // The following exception was thrown during execution in test generation
        try {
            node2.addChildBefore(node5, node13);
            org.junit.Assert.fail("Expected exception of type java.lang.RuntimeException; message: newChild had siblings in addChildBefore");
        } catch (java.lang.RuntimeException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNull(node10);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "23" + "'", str14, "23");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(nodeItor16);
    }

    @Test
    public void test1709() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1709");
        com.google.javascript.rhino.head.Node node2 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str3 = node2.toString();
        boolean boolean4 = node2.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node6 = com.google.javascript.rhino.head.Node.newString("");
        node6.removeProp(23);
        node2.addChildToFront(node6);
        com.google.javascript.rhino.head.Node node10 = node2.getFirstChild();
        node10.setString("100");
        com.google.javascript.rhino.head.ast.Scope scope13 = node10.getScope();
        com.google.javascript.rhino.head.Node node15 = new com.google.javascript.rhino.head.Node((int) ' ', node10, 2);
        java.util.Spliterator<com.google.javascript.rhino.head.Node> nodeSpliterator16 = node10.spliterator();
        com.google.javascript.rhino.head.Node node19 = new com.google.javascript.rhino.head.Node((int) (byte) -1);
        java.lang.String str20 = node19.toString();
        com.google.javascript.rhino.head.ast.Comment comment21 = node19.getJsDocNode();
        node10.putProp((int) '#', (java.lang.Object) node19);
        java.lang.String str23 = node10.toString();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "40" + "'", str3, "40");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNull(scope13);
        org.junit.Assert.assertNotNull(nodeSpliterator16);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "-1" + "'", str20, "-1");
        org.junit.Assert.assertNull(comment21);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "41" + "'", str23, "41");
    }

    @Test
    public void test1710() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1710");
        com.google.javascript.rhino.head.Node node1 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        com.google.javascript.rhino.head.Node node3 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str4 = node3.toString();
        boolean boolean5 = node3.hasConsistentReturnUsage();
        boolean boolean6 = node3.hasSideEffects();
        node1.addChildrenToFront(node3);
        com.google.javascript.rhino.head.Node node9 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str10 = node9.toString();
        boolean boolean11 = node9.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node13 = com.google.javascript.rhino.head.Node.newString("");
        node13.removeProp(23);
        node9.addChildToFront(node13);
        com.google.javascript.rhino.head.Node node17 = node9.getFirstChild();
        com.google.javascript.rhino.head.Node node19 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        node17.addChildrenToBack(node19);
        node3.addChildrenToBack(node19);
        com.google.javascript.rhino.head.Node node24 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str25 = node24.toString();
        boolean boolean26 = node24.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node28 = com.google.javascript.rhino.head.Node.newString("");
        node28.removeProp(23);
        node24.addChildToFront(node28);
        com.google.javascript.rhino.head.Node node33 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean34 = node33.hasChildren();
        node24.addChildrenToFront(node33);
        com.google.javascript.rhino.head.Node node37 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str38 = node37.toString();
        boolean boolean39 = node37.hasConsistentReturnUsage();
        boolean boolean40 = node37.hasSideEffects();
        com.google.javascript.rhino.head.Node node42 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str43 = node42.toString();
        boolean boolean44 = node42.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node46 = com.google.javascript.rhino.head.Node.newString("");
        node46.removeProp(23);
        node42.addChildToFront(node46);
        com.google.javascript.rhino.head.Node node50 = node42.getFirstChild();
        com.google.javascript.rhino.head.ast.Comment comment51 = node42.getJsDocNode();
        node37.addChildToBack(node42);
        com.google.javascript.rhino.head.Node node53 = new com.google.javascript.rhino.head.Node(15, node24, node37);
        node19.addChildrenToFront(node24);
        boolean boolean55 = node19.hasChildren();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "40" + "'", str4, "40");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "40" + "'", str10, "40");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "40" + "'", str25, "40");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "40" + "'", str38, "40");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "40" + "'", str43, "40");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNull(comment51);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
    }

    @Test
    public void test1711() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1711");
        com.google.javascript.rhino.head.Node node1 = new com.google.javascript.rhino.head.Node((int) (byte) 1);
        node1.removeProp((int) (short) 10);
        java.lang.Object obj5 = node1.getProp(15);
        java.util.Spliterator<com.google.javascript.rhino.head.Node> nodeSpliterator6 = node1.spliterator();
        java.lang.Object obj8 = node1.getProp(25);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNotNull(nodeSpliterator6);
        org.junit.Assert.assertNull(obj8);
    }

    @Test
    public void test1712() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1712");
        com.google.javascript.rhino.head.Node node5 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str6 = node5.toString();
        boolean boolean7 = node5.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node9 = com.google.javascript.rhino.head.Node.newString("");
        node9.removeProp(23);
        node5.addChildToFront(node9);
        com.google.javascript.rhino.head.Node node13 = new com.google.javascript.rhino.head.Node((int) 'a', node5);
        com.google.javascript.rhino.head.Node node15 = com.google.javascript.rhino.head.Node.newString("-1");
        com.google.javascript.rhino.head.Node node17 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str18 = node17.toString();
        com.google.javascript.rhino.head.Node node19 = node17.getLastChild();
        com.google.javascript.rhino.head.Node node21 = new com.google.javascript.rhino.head.Node((int) (short) -1, node5, node15, node17, (int) (short) -1);
        java.lang.Object obj23 = node5.getProp(0);
        java.lang.String str24 = node5.getJsDoc();
        com.google.javascript.rhino.head.Node node27 = new com.google.javascript.rhino.head.Node(4, 8);
        com.google.javascript.rhino.head.Node node31 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str32 = node31.toString();
        boolean boolean33 = node31.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node35 = com.google.javascript.rhino.head.Node.newString("");
        node35.removeProp(23);
        node31.addChildToFront(node35);
        com.google.javascript.rhino.head.Node node39 = node31.getFirstChild();
        node39.setString("100");
        com.google.javascript.rhino.head.ast.Scope scope42 = node39.getScope();
        com.google.javascript.rhino.head.Node node44 = new com.google.javascript.rhino.head.Node((int) ' ', node39, 2);
        com.google.javascript.rhino.head.Node node45 = node39.getLastSibling();
        com.google.javascript.rhino.head.Node node48 = com.google.javascript.rhino.head.Node.newString(23, "");
        com.google.javascript.rhino.head.Node node49 = node48.getLastSibling();
        com.google.javascript.rhino.head.Node node50 = new com.google.javascript.rhino.head.Node((int) ' ', node45, node48);
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor51 = node48.iterator();
        node27.addChildrenToFront(node48);
        com.google.javascript.rhino.head.Node node54 = com.google.javascript.rhino.head.Node.newString("23");
        node54.removeChildren();
        com.google.javascript.rhino.head.Node node57 = new com.google.javascript.rhino.head.Node((int) (byte) 10, node5, node27, node54, 25);
        com.google.javascript.rhino.head.Node node58 = node54.getFirstChild();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator59 = node54.new NodeIterator();
        boolean boolean60 = node54.hasSideEffects();
        com.google.javascript.rhino.head.Node node62 = new com.google.javascript.rhino.head.Node(13, node54, 9);
        java.lang.Class<?> wildcardClass63 = node54.getClass();
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "40" + "'", str6, "40");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "40" + "'", str18, "40");
        org.junit.Assert.assertNull(node19);
        org.junit.Assert.assertNull(obj23);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "40" + "'", str32, "40");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNull(scope42);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNotNull(nodeItor51);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNull(node58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(wildcardClass63);
    }

    @Test
    public void test1713() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1713");
        com.google.javascript.rhino.head.Node node1 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str2 = node1.toString();
        boolean boolean3 = node1.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node5 = com.google.javascript.rhino.head.Node.newString("");
        node5.removeProp(23);
        node1.addChildToFront(node5);
        com.google.javascript.rhino.head.Node node9 = node5.getLastChild();
        com.google.javascript.rhino.head.Node node11 = com.google.javascript.rhino.head.Node.newString("1");
        node5.addChildrenToBack(node11);
        int int13 = node11.getLineno();
        node11.removeProp(16);
        com.google.javascript.rhino.head.Node node17 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str18 = node17.toString();
        boolean boolean19 = node17.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.ast.Comment comment20 = null;
        node17.setJsDocNode(comment20);
        com.google.javascript.rhino.head.Node node24 = com.google.javascript.rhino.head.Node.newString("");
        node24.removeProp(23);
        com.google.javascript.rhino.head.Node node29 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str30 = node29.toString();
        boolean boolean31 = node29.hasConsistentReturnUsage();
        boolean boolean32 = node29.hasSideEffects();
        com.google.javascript.rhino.head.Node node33 = new com.google.javascript.rhino.head.Node(0, node29);
        node24.addChildrenToBack(node33);
        com.google.javascript.rhino.head.Node node35 = new com.google.javascript.rhino.head.Node(9, node24);
        node17.addChildrenToFront(node35);
        com.google.javascript.rhino.head.Node node38 = node17.setType(18);
        node17.removeChildren();
        com.google.javascript.rhino.head.Node node43 = com.google.javascript.rhino.head.Node.newString("hi!");
        com.google.javascript.rhino.head.Node node44 = new com.google.javascript.rhino.head.Node(13, node43);
        com.google.javascript.rhino.head.Node node45 = new com.google.javascript.rhino.head.Node(7, node43);
        com.google.javascript.rhino.head.Node node47 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        node45.addChildToFront(node47);
        com.google.javascript.rhino.head.Node node49 = node45.getLastSibling();
        node11.addChildAfter(node17, node45);
        com.google.javascript.rhino.head.Node node54 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str55 = node54.toString();
        boolean boolean56 = node54.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node58 = com.google.javascript.rhino.head.Node.newString("");
        node58.removeProp(23);
        node54.addChildToFront(node58);
        com.google.javascript.rhino.head.Node node62 = new com.google.javascript.rhino.head.Node((int) 'a', node54);
        boolean boolean63 = node62.hasSideEffects();
        com.google.javascript.rhino.head.Node node65 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str66 = node65.toString();
        boolean boolean67 = node65.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node69 = com.google.javascript.rhino.head.Node.newString("");
        node69.removeProp(23);
        node65.addChildToFront(node69);
        com.google.javascript.rhino.head.Node node73 = node65.getFirstChild();
        com.google.javascript.rhino.head.ast.Comment comment74 = node65.getJsDocNode();
        int int75 = node65.getType();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator76 = node65.new NodeIterator();
        boolean boolean77 = nodeIterator76.hasNext();
        com.google.javascript.rhino.head.Node node78 = nodeIterator76.next();
        com.google.javascript.rhino.head.Node node82 = com.google.javascript.rhino.head.Node.newString((int) (byte) -1, "100");
        node78.putProp((int) (byte) 100, (java.lang.Object) (byte) -1);
        com.google.javascript.rhino.head.Node node84 = new com.google.javascript.rhino.head.Node((int) ' ', node62, node78);
        // The following exception was thrown during execution in test generation
        try {
            node11.removeChild(node78);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "40" + "'", str2, "40");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "40" + "'", str18, "40");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "40" + "'", str30, "40");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "40" + "'", str55, "40");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "40" + "'", str66, "40");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertNull(comment74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 40 + "'", int75 == 40);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertNotNull(node82);
    }

    @Test
    public void test1714() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1714");
        com.google.javascript.rhino.head.Node node1 = com.google.javascript.rhino.head.Node.newString("");
        node1.removeProp(23);
        com.google.javascript.rhino.head.Node node4 = node1.getFirstChild();
        com.google.javascript.rhino.head.Node node7 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str8 = node7.toString();
        com.google.javascript.rhino.head.Node node9 = node7.getLastSibling();
        com.google.javascript.rhino.head.Node node12 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str13 = node12.toString();
        boolean boolean14 = node12.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node16 = com.google.javascript.rhino.head.Node.newString("");
        node16.removeProp(23);
        node12.addChildToFront(node16);
        com.google.javascript.rhino.head.Node node20 = node12.getFirstChild();
        node20.setString("100");
        com.google.javascript.rhino.head.ast.Scope scope23 = node20.getScope();
        com.google.javascript.rhino.head.Node node25 = new com.google.javascript.rhino.head.Node((int) ' ', node20, 2);
        com.google.javascript.rhino.head.Node node26 = node20.getLastSibling();
        node9.addChildToFront(node26);
        com.google.javascript.rhino.head.Node node31 = com.google.javascript.rhino.head.Node.newString(23, "");
        com.google.javascript.rhino.head.Node node32 = node31.getLastSibling();
        com.google.javascript.rhino.head.Node node36 = com.google.javascript.rhino.head.Node.newString("hi!");
        com.google.javascript.rhino.head.Node node37 = new com.google.javascript.rhino.head.Node(13, node36);
        com.google.javascript.rhino.head.Node node40 = new com.google.javascript.rhino.head.Node(12);
        node40.putIntProp(14, 3);
        com.google.javascript.rhino.head.Node node44 = new com.google.javascript.rhino.head.Node(6, node40);
        com.google.javascript.rhino.head.Node node45 = node44.getLastChild();
        com.google.javascript.rhino.head.Node node47 = new com.google.javascript.rhino.head.Node((int) (byte) 100, node36, node44, 0);
        com.google.javascript.rhino.head.Node node50 = new com.google.javascript.rhino.head.Node((int) (byte) 1, 8);
        node50.putIntProp(20, 100);
        com.google.javascript.rhino.head.Node node54 = new com.google.javascript.rhino.head.Node(20, node32, node36, node50);
        com.google.javascript.rhino.head.Node node55 = node32.getLastChild();
        com.google.javascript.rhino.head.Node node57 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        com.google.javascript.rhino.head.Node node59 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str60 = node59.toString();
        boolean boolean61 = node59.hasConsistentReturnUsage();
        boolean boolean62 = node59.hasSideEffects();
        node57.addChildrenToFront(node59);
        com.google.javascript.rhino.head.Node node64 = node59.getLastSibling();
        com.google.javascript.rhino.head.Node node66 = new com.google.javascript.rhino.head.Node((-1), node26, node32, node64, 3);
        int int67 = node32.getLineno();
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor68 = node32.iterator();
        node32.removeProp(17);
        // The following exception was thrown during execution in test generation
        try {
            node4.addChildrenToFront(node32);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNull(node4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "40" + "'", str8, "40");
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "40" + "'", str13, "40");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNull(scope23);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNull(node55);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "40" + "'", str60, "40");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-1) + "'", int67 == (-1));
        org.junit.Assert.assertNotNull(nodeItor68);
    }

    @Test
    public void test1715() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1715");
        com.google.javascript.rhino.head.Node node2 = com.google.javascript.rhino.head.Node.newString(32, "100");
        com.google.javascript.rhino.head.Node node3 = node2.getLastChild();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNull(node3);
    }

    @Test
    public void test1716() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1716");
        com.google.javascript.rhino.head.Node node4 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str5 = node4.toString();
        boolean boolean6 = node4.hasConsistentReturnUsage();
        boolean boolean7 = node4.hasSideEffects();
        com.google.javascript.rhino.head.Node node8 = new com.google.javascript.rhino.head.Node(0, node4);
        com.google.javascript.rhino.head.Node node11 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str12 = node11.toString();
        boolean boolean13 = node11.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node15 = com.google.javascript.rhino.head.Node.newString("");
        node15.removeProp(23);
        node11.addChildToFront(node15);
        com.google.javascript.rhino.head.Node node20 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean21 = node20.hasChildren();
        node11.addChildrenToFront(node20);
        com.google.javascript.rhino.head.Node node24 = new com.google.javascript.rhino.head.Node((int) (byte) -1);
        java.lang.String str25 = node24.toString();
        boolean boolean26 = node24.hasChildren();
        com.google.javascript.rhino.head.Node node28 = new com.google.javascript.rhino.head.Node((int) (short) -1, node20, node24, (int) (short) 10);
        com.google.javascript.rhino.head.Node node31 = com.google.javascript.rhino.head.Node.newString(23, "");
        com.google.javascript.rhino.head.Node node33 = new com.google.javascript.rhino.head.Node((int) (byte) 10, node4, node24, node31, (int) (short) 0);
        com.google.javascript.rhino.head.ast.Comment comment34 = null;
        node4.setJsDocNode(comment34);
        com.google.javascript.rhino.head.Node node36 = node4.getNext();
        com.google.javascript.rhino.head.Node node39 = com.google.javascript.rhino.head.Node.newString("");
        node39.removeProp(23);
        com.google.javascript.rhino.head.Node node44 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str45 = node44.toString();
        boolean boolean46 = node44.hasConsistentReturnUsage();
        boolean boolean47 = node44.hasSideEffects();
        com.google.javascript.rhino.head.Node node48 = new com.google.javascript.rhino.head.Node(0, node44);
        node39.addChildrenToBack(node48);
        com.google.javascript.rhino.head.Node node51 = new com.google.javascript.rhino.head.Node(40, node48, 19);
        com.google.javascript.rhino.head.Node node54 = com.google.javascript.rhino.head.Node.newString("hi!");
        com.google.javascript.rhino.head.Node node57 = com.google.javascript.rhino.head.Node.newString(23, "");
        com.google.javascript.rhino.head.Node node58 = new com.google.javascript.rhino.head.Node(0, node54, node57);
        int int59 = node54.getLineno();
        int int60 = node54.getType();
        com.google.javascript.rhino.head.Node node61 = new com.google.javascript.rhino.head.Node(14, node36, node48, node54);
        com.google.javascript.rhino.head.Node node63 = new com.google.javascript.rhino.head.Node((int) (byte) -1);
        java.lang.String str64 = node63.toString();
        com.google.javascript.rhino.head.ast.Comment comment65 = node63.getJsDocNode();
        com.google.javascript.rhino.head.ast.Comment comment66 = node63.getJsDocNode();
        com.google.javascript.rhino.head.Node node68 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str69 = node68.toString();
        boolean boolean70 = node68.hasConsistentReturnUsage();
        node63.addChildToBack(node68);
        java.lang.String str72 = node68.getJsDoc();
        com.google.javascript.rhino.head.Node node76 = com.google.javascript.rhino.head.Node.newString("hi!");
        com.google.javascript.rhino.head.Node node77 = new com.google.javascript.rhino.head.Node(13, node76);
        com.google.javascript.rhino.head.Node node78 = new com.google.javascript.rhino.head.Node(7, node76);
        node78.removeChildren();
        node68.addChildrenToFront(node78);
        node48.addChildrenToFront(node68);
        boolean boolean82 = node68.hasSideEffects();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "40" + "'", str5, "40");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "40" + "'", str12, "40");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "-1" + "'", str25, "-1");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "40" + "'", str45, "40");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-1) + "'", int59 == (-1));
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 41 + "'", int60 == 41);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "-1" + "'", str64, "-1");
        org.junit.Assert.assertNull(comment65);
        org.junit.Assert.assertNull(comment66);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "40" + "'", str69, "40");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNull(str72);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
    }

    @Test
    public void test1717() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1717");
        com.google.javascript.rhino.head.Node node2 = com.google.javascript.rhino.head.Node.newString("hi!");
        com.google.javascript.rhino.head.Node node3 = new com.google.javascript.rhino.head.Node(13, node2);
        com.google.javascript.rhino.head.ast.Scope scope4 = null;
        node2.setScope(scope4);
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.head.Node.NodeIterator nodeIterator6 = scope4.new NodeIterator();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: reflection call to com.google.javascript.rhino.head.Node$NodeIterator with null for superclass argument");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
    }

    @Test
    public void test1718() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1718");
        com.google.javascript.rhino.head.Node node1 = com.google.javascript.rhino.head.Node.newString("");
        node1.removeProp(23);
        node1.setLineno((int) '4');
        java.lang.Object obj7 = node1.getProp(3);
        // The following exception was thrown during execution in test generation
        try {
            double double8 = node1.getDouble();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: com.google.javascript.rhino.head.ast.Name cannot be cast to com.google.javascript.rhino.head.ast.NumberLiteral");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNull(obj7);
    }

    @Test
    public void test1719() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1719");
        com.google.javascript.rhino.head.Node node1 = new com.google.javascript.rhino.head.Node((int) (byte) -1);
        com.google.javascript.rhino.head.Node node4 = com.google.javascript.rhino.head.Node.newString("");
        node4.removeProp(23);
        com.google.javascript.rhino.head.Node node9 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str10 = node9.toString();
        boolean boolean11 = node9.hasConsistentReturnUsage();
        boolean boolean12 = node9.hasSideEffects();
        com.google.javascript.rhino.head.Node node13 = new com.google.javascript.rhino.head.Node(0, node9);
        node4.addChildrenToBack(node13);
        com.google.javascript.rhino.head.Node node15 = new com.google.javascript.rhino.head.Node(9, node4);
        node4.removeProp(4);
        com.google.javascript.rhino.head.Node node19 = node4.setType(23);
        node1.addChildrenToFront(node19);
        com.google.javascript.rhino.head.Node node24 = com.google.javascript.rhino.head.Node.newString("hi!");
        com.google.javascript.rhino.head.Node node25 = new com.google.javascript.rhino.head.Node(13, node24);
        com.google.javascript.rhino.head.Node node26 = new com.google.javascript.rhino.head.Node(7, node24);
        com.google.javascript.rhino.head.Node node28 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        node26.addChildToFront(node28);
        com.google.javascript.rhino.head.Node node30 = node26.getLastSibling();
        com.google.javascript.rhino.head.Node node34 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str35 = node34.toString();
        boolean boolean36 = node34.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node38 = com.google.javascript.rhino.head.Node.newString("");
        node38.removeProp(23);
        node34.addChildToFront(node38);
        com.google.javascript.rhino.head.Node node43 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean44 = node43.hasChildren();
        node34.addChildrenToFront(node43);
        int int46 = node43.getLineno();
        com.google.javascript.rhino.head.Node node48 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str49 = node48.toString();
        boolean boolean50 = node48.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node52 = com.google.javascript.rhino.head.Node.newString("");
        node52.removeProp(23);
        node48.addChildToFront(node52);
        com.google.javascript.rhino.head.Node node56 = node48.getFirstChild();
        com.google.javascript.rhino.head.Node node58 = new com.google.javascript.rhino.head.Node((int) (short) 0, node43, node48, 9);
        boolean boolean59 = node43.hasSideEffects();
        com.google.javascript.rhino.head.Node node62 = com.google.javascript.rhino.head.Node.newString(23, "");
        com.google.javascript.rhino.head.Node node63 = node62.getLastSibling();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator64 = node63.new NodeIterator();
        com.google.javascript.rhino.head.Node node66 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str67 = node66.toString();
        boolean boolean68 = node66.hasConsistentReturnUsage();
        boolean boolean69 = node66.hasSideEffects();
        com.google.javascript.rhino.head.Node node71 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str72 = node71.toString();
        boolean boolean73 = node71.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node75 = com.google.javascript.rhino.head.Node.newString("");
        node75.removeProp(23);
        node71.addChildToFront(node75);
        com.google.javascript.rhino.head.Node node79 = node71.getFirstChild();
        com.google.javascript.rhino.head.ast.Comment comment80 = node71.getJsDocNode();
        node66.addChildToBack(node71);
        java.lang.String str82 = node66.toString();
        com.google.javascript.rhino.head.Node node84 = new com.google.javascript.rhino.head.Node(0, node43, node63, node66, 1);
        node30.addChildToBack(node43);
        node19.addChildToFront(node30);
        boolean boolean87 = node19.hasConsistentReturnUsage();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "40" + "'", str10, "40");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "40" + "'", str35, "40");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "40" + "'", str49, "40");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "40" + "'", str67, "40");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "40" + "'", str72, "40");
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertNull(comment80);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "40" + "'", str82, "40");
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
    }

    @Test
    public void test1720() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1720");
        com.google.javascript.rhino.head.Node node1 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        com.google.javascript.rhino.head.Node node2 = node1.getLastSibling();
        boolean boolean3 = node2.hasSideEffects();
        node2.setLineno(0);
        com.google.javascript.rhino.head.Node node7 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str8 = node7.toString();
        boolean boolean9 = node7.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node11 = com.google.javascript.rhino.head.Node.newString("");
        node11.removeProp(23);
        node7.addChildToFront(node11);
        com.google.javascript.rhino.head.Node node15 = node7.getFirstChild();
        com.google.javascript.rhino.head.ast.Comment comment16 = node7.getJsDocNode();
        int int17 = node7.getType();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator18 = node7.new NodeIterator();
        com.google.javascript.rhino.head.Node node19 = null;
        com.google.javascript.rhino.head.Node node20 = node7.getChildBefore(node19);
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.head.Node node21 = node2.getChildBefore(node7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "40" + "'", str8, "40");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNull(comment16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 40 + "'", int17 == 40);
        org.junit.Assert.assertNotNull(node20);
    }

    @Test
    public void test1721() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1721");
        com.google.javascript.rhino.head.Node node2 = new com.google.javascript.rhino.head.Node(3, 10);
    }

    @Test
    public void test1722() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1722");
        com.google.javascript.rhino.head.Node node3 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str4 = node3.toString();
        boolean boolean5 = node3.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node7 = com.google.javascript.rhino.head.Node.newString("");
        node7.removeProp(23);
        node3.addChildToFront(node7);
        com.google.javascript.rhino.head.Node node11 = node3.getFirstChild();
        node11.setString("100");
        com.google.javascript.rhino.head.ast.Scope scope14 = node11.getScope();
        com.google.javascript.rhino.head.Node node16 = new com.google.javascript.rhino.head.Node((int) ' ', node11, 2);
        com.google.javascript.rhino.head.Node node17 = node11.getLastSibling();
        com.google.javascript.rhino.head.Node node20 = new com.google.javascript.rhino.head.Node(12);
        node20.putIntProp(14, 3);
        com.google.javascript.rhino.head.Node node24 = new com.google.javascript.rhino.head.Node(6, node20);
        com.google.javascript.rhino.head.Node node25 = node24.getLastChild();
        com.google.javascript.rhino.head.Node node29 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str30 = node29.toString();
        boolean boolean31 = node29.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node33 = com.google.javascript.rhino.head.Node.newString("");
        node33.removeProp(23);
        node29.addChildToFront(node33);
        com.google.javascript.rhino.head.Node node38 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean39 = node38.hasChildren();
        node29.addChildrenToFront(node38);
        com.google.javascript.rhino.head.Node node42 = new com.google.javascript.rhino.head.Node((int) (byte) -1);
        java.lang.String str43 = node42.toString();
        boolean boolean44 = node42.hasChildren();
        com.google.javascript.rhino.head.Node node46 = new com.google.javascript.rhino.head.Node((int) (short) -1, node38, node42, (int) (short) 10);
        com.google.javascript.rhino.head.Node node47 = node46.getLastChild();
        com.google.javascript.rhino.head.Node node52 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str53 = node52.toString();
        boolean boolean54 = node52.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node56 = com.google.javascript.rhino.head.Node.newString("");
        node56.removeProp(23);
        node52.addChildToFront(node56);
        com.google.javascript.rhino.head.Node node60 = new com.google.javascript.rhino.head.Node((int) 'a', node52);
        com.google.javascript.rhino.head.Node node62 = com.google.javascript.rhino.head.Node.newString("-1");
        com.google.javascript.rhino.head.Node node64 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str65 = node64.toString();
        com.google.javascript.rhino.head.Node node66 = node64.getLastChild();
        com.google.javascript.rhino.head.Node node68 = new com.google.javascript.rhino.head.Node((int) (short) -1, node52, node62, node64, (int) (short) -1);
        com.google.javascript.rhino.head.Node node70 = new com.google.javascript.rhino.head.Node((int) (short) 1, node64, 12);
        com.google.javascript.rhino.head.Node node72 = new com.google.javascript.rhino.head.Node(23);
        node72.removeProp(25);
        boolean boolean75 = node72.hasChildren();
        com.google.javascript.rhino.head.Node node76 = new com.google.javascript.rhino.head.Node((-1), node47, node64, node72);
        node25.addChildToBack(node47);
        node11.addChildToBack(node25);
        int int79 = node25.getType();
        com.google.javascript.rhino.head.Node node81 = com.google.javascript.rhino.head.Node.newNumber((double) 7);
        com.google.javascript.rhino.head.Node node82 = new com.google.javascript.rhino.head.Node((int) '4', node25, node81);
        com.google.javascript.rhino.head.ast.Comment comment83 = null;
        node25.setJsDocNode(comment83);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "40" + "'", str4, "40");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNull(scope14);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "40" + "'", str30, "40");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "-1" + "'", str43, "-1");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "40" + "'", str53, "40");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "40" + "'", str65, "40");
        org.junit.Assert.assertNull(node66);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 12 + "'", int79 == 12);
        org.junit.Assert.assertNotNull(node81);
    }

    @Test
    public void test1723() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1723");
        com.google.javascript.rhino.head.Node node1 = com.google.javascript.rhino.head.Node.newString("");
        int int4 = node1.getIntProp(17, (int) (byte) -1);
        com.google.javascript.rhino.head.Node node7 = new com.google.javascript.rhino.head.Node(40, 8);
        com.google.javascript.rhino.head.Node node10 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str11 = node10.toString();
        boolean boolean12 = node10.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node14 = com.google.javascript.rhino.head.Node.newString("");
        node14.removeProp(23);
        node10.addChildToFront(node14);
        com.google.javascript.rhino.head.Node node18 = node10.getFirstChild();
        com.google.javascript.rhino.head.Node node20 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        node18.addChildrenToBack(node20);
        com.google.javascript.rhino.head.Node node23 = com.google.javascript.rhino.head.Node.newString("");
        int int26 = node23.getIntProp(17, (int) (byte) -1);
        com.google.javascript.rhino.head.Node node27 = new com.google.javascript.rhino.head.Node((int) (short) 10, node18, node23);
        com.google.javascript.rhino.head.Node node29 = node18.setType(18);
        node1.addChildAfter(node7, node29);
        com.google.javascript.rhino.head.Node node32 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean33 = node32.hasSideEffects();
        node7.addChildrenToFront(node32);
        com.google.javascript.rhino.head.Node node37 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str38 = node37.toString();
        boolean boolean39 = node37.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node41 = com.google.javascript.rhino.head.Node.newString("");
        node41.removeProp(23);
        node37.addChildToFront(node41);
        com.google.javascript.rhino.head.Node node46 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean47 = node46.hasChildren();
        node37.addChildrenToFront(node46);
        int int49 = node46.getLineno();
        int int50 = node46.getType();
        com.google.javascript.rhino.head.Node node51 = new com.google.javascript.rhino.head.Node((int) (byte) 100, node46);
        node7.addChildrenToFront(node51);
        java.lang.String str53 = node7.toString();
        node7.removeChildren();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "40" + "'", str11, "40");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "40" + "'", str38, "40");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 40 + "'", int50 == 40);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "40" + "'", str53, "40");
    }

    @Test
    public void test1724() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1724");
        com.google.javascript.rhino.head.Node node2 = com.google.javascript.rhino.head.Node.newString(23, "");
        com.google.javascript.rhino.head.Node node3 = node2.getLastSibling();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator4 = node3.new NodeIterator();
        node3.setLineno(13);
        com.google.javascript.rhino.head.Node node7 = node3.getNext();
        java.lang.Class<?> wildcardClass8 = node3.getClass();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNull(node7);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test1725() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1725");
        com.google.javascript.rhino.head.Node node3 = com.google.javascript.rhino.head.Node.newString("");
        node3.removeProp(23);
        node3.setLineno((int) '4');
        com.google.javascript.rhino.head.Node node12 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str13 = node12.toString();
        boolean boolean14 = node12.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node16 = com.google.javascript.rhino.head.Node.newString("");
        node16.removeProp(23);
        node12.addChildToFront(node16);
        com.google.javascript.rhino.head.Node node21 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean22 = node21.hasChildren();
        node12.addChildrenToFront(node21);
        int int24 = node21.getLineno();
        com.google.javascript.rhino.head.Node node26 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str27 = node26.toString();
        boolean boolean28 = node26.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node30 = com.google.javascript.rhino.head.Node.newString("");
        node30.removeProp(23);
        node26.addChildToFront(node30);
        com.google.javascript.rhino.head.Node node34 = node26.getFirstChild();
        com.google.javascript.rhino.head.Node node36 = new com.google.javascript.rhino.head.Node((int) (short) 0, node21, node26, 9);
        boolean boolean37 = node21.hasSideEffects();
        com.google.javascript.rhino.head.Node node39 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        com.google.javascript.rhino.head.Node node41 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str42 = node41.toString();
        boolean boolean43 = node41.hasConsistentReturnUsage();
        boolean boolean44 = node41.hasSideEffects();
        node39.addChildrenToFront(node41);
        node41.removeChildren();
        com.google.javascript.rhino.head.Node node48 = com.google.javascript.rhino.head.Node.newString("hi!");
        node41.addChildrenToBack(node48);
        com.google.javascript.rhino.head.Node node51 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str52 = node51.toString();
        boolean boolean53 = node51.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node55 = com.google.javascript.rhino.head.Node.newString("");
        node55.removeProp(23);
        node51.addChildToFront(node55);
        com.google.javascript.rhino.head.Node node59 = node51.getFirstChild();
        com.google.javascript.rhino.head.Node node61 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        node59.addChildrenToBack(node61);
        com.google.javascript.rhino.head.Node node63 = new com.google.javascript.rhino.head.Node((int) (byte) 1, node21, node41, node61);
        com.google.javascript.rhino.head.Node node64 = new com.google.javascript.rhino.head.Node(9, node21);
        com.google.javascript.rhino.head.Node node66 = com.google.javascript.rhino.head.Node.newNumber((double) 13);
        com.google.javascript.rhino.head.Node node67 = new com.google.javascript.rhino.head.Node(12, node3, node64, node66);
        com.google.javascript.rhino.head.Node node68 = new com.google.javascript.rhino.head.Node(16, node67);
        int int69 = node67.getType();
        boolean boolean70 = node67.hasChildren();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "40" + "'", str13, "40");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "40" + "'", str27, "40");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "40" + "'", str42, "40");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "40" + "'", str52, "40");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 12 + "'", int69 == 12);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
    }

    @Test
    public void test1726() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1726");
        com.google.javascript.rhino.head.Node node3 = com.google.javascript.rhino.head.Node.newString(23, "");
        com.google.javascript.rhino.head.Node node4 = node3.getLastSibling();
        com.google.javascript.rhino.head.Node node6 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        com.google.javascript.rhino.head.Node node8 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str9 = node8.toString();
        boolean boolean10 = node8.hasConsistentReturnUsage();
        boolean boolean11 = node8.hasSideEffects();
        node6.addChildrenToFront(node8);
        com.google.javascript.rhino.head.Node node14 = new com.google.javascript.rhino.head.Node(26, node3, node6, 20);
        int int15 = node14.getType();
        com.google.javascript.rhino.head.Node node17 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean18 = node17.hasChildren();
        node14.addChildrenToBack(node17);
        com.google.javascript.rhino.head.Node node20 = node14.getFirstChild();
        boolean boolean21 = node20.hasChildren();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "40" + "'", str9, "40");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 26 + "'", int15 == 26);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test1727() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1727");
        com.google.javascript.rhino.head.Node node1 = com.google.javascript.rhino.head.Node.newString("23");
        java.lang.Object obj3 = node1.getProp(17);
        com.google.javascript.rhino.head.Node node4 = node1.getFirstChild();
        // The following exception was thrown during execution in test generation
        try {
            node1.setDouble((double) 0.0f);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: com.google.javascript.rhino.head.ast.Name cannot be cast to com.google.javascript.rhino.head.ast.NumberLiteral");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(node4);
    }

    @Test
    public void test1728() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1728");
        com.google.javascript.rhino.head.Node node3 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str4 = node3.toString();
        boolean boolean5 = node3.hasConsistentReturnUsage();
        boolean boolean6 = node3.hasSideEffects();
        com.google.javascript.rhino.head.Node node7 = new com.google.javascript.rhino.head.Node(0, node3);
        com.google.javascript.rhino.head.Node node10 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str11 = node10.toString();
        boolean boolean12 = node10.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node14 = com.google.javascript.rhino.head.Node.newString("");
        node14.removeProp(23);
        node10.addChildToFront(node14);
        com.google.javascript.rhino.head.Node node19 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean20 = node19.hasChildren();
        node10.addChildrenToFront(node19);
        com.google.javascript.rhino.head.Node node23 = new com.google.javascript.rhino.head.Node((int) (byte) -1);
        java.lang.String str24 = node23.toString();
        boolean boolean25 = node23.hasChildren();
        com.google.javascript.rhino.head.Node node27 = new com.google.javascript.rhino.head.Node((int) (short) -1, node19, node23, (int) (short) 10);
        com.google.javascript.rhino.head.Node node30 = com.google.javascript.rhino.head.Node.newString(23, "");
        com.google.javascript.rhino.head.Node node32 = new com.google.javascript.rhino.head.Node((int) (byte) 10, node3, node23, node30, (int) (short) 0);
        com.google.javascript.rhino.head.Node node35 = com.google.javascript.rhino.head.Node.newNumber((double) 19);
        com.google.javascript.rhino.head.Node node38 = com.google.javascript.rhino.head.Node.newString("");
        node38.removeProp(23);
        com.google.javascript.rhino.head.Node node43 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str44 = node43.toString();
        boolean boolean45 = node43.hasConsistentReturnUsage();
        boolean boolean46 = node43.hasSideEffects();
        com.google.javascript.rhino.head.Node node47 = new com.google.javascript.rhino.head.Node(0, node43);
        node38.addChildrenToBack(node47);
        com.google.javascript.rhino.head.Node node49 = new com.google.javascript.rhino.head.Node(9, node38);
        com.google.javascript.rhino.head.Node node53 = com.google.javascript.rhino.head.Node.newString("hi!");
        com.google.javascript.rhino.head.Node node54 = new com.google.javascript.rhino.head.Node(13, node53);
        com.google.javascript.rhino.head.Node node55 = new com.google.javascript.rhino.head.Node(7, node53);
        com.google.javascript.rhino.head.Node node57 = new com.google.javascript.rhino.head.Node((int) 'a', node35, node49, node53, (int) (short) 1);
        boolean boolean58 = node35.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node60 = node35.setType(3);
        java.lang.String str61 = node60.getJsDoc();
        com.google.javascript.rhino.head.Node node64 = com.google.javascript.rhino.head.Node.newString((int) (short) 100, "24");
        // The following exception was thrown during execution in test generation
        try {
            node32.addChildBefore(node60, node64);
            org.junit.Assert.fail("Expected exception of type java.lang.RuntimeException; message: newChild had siblings in addChildBefore");
        } catch (java.lang.RuntimeException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "40" + "'", str4, "40");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "40" + "'", str11, "40");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "-1" + "'", str24, "-1");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "40" + "'", str44, "40");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNull(str61);
        org.junit.Assert.assertNotNull(node64);
    }

    @Test
    public void test1729() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1729");
        com.google.javascript.rhino.head.Node node1 = new com.google.javascript.rhino.head.Node((int) ' ');
        boolean boolean2 = node1.hasConsistentReturnUsage();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
    }

    @Test
    public void test1730() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1730");
        com.google.javascript.rhino.head.Node node1 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str2 = node1.toString();
        boolean boolean3 = node1.hasConsistentReturnUsage();
        boolean boolean4 = node1.hasSideEffects();
        com.google.javascript.rhino.head.Node node6 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str7 = node6.toString();
        boolean boolean8 = node6.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node10 = com.google.javascript.rhino.head.Node.newString("");
        node10.removeProp(23);
        node6.addChildToFront(node10);
        com.google.javascript.rhino.head.Node node14 = node6.getFirstChild();
        com.google.javascript.rhino.head.ast.Comment comment15 = node6.getJsDocNode();
        node1.addChildToBack(node6);
        boolean boolean17 = node6.hasSideEffects();
        com.google.javascript.rhino.head.Node node19 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str20 = node19.toString();
        boolean boolean21 = node19.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node23 = com.google.javascript.rhino.head.Node.newString("");
        node23.removeProp(23);
        node19.addChildToFront(node23);
        com.google.javascript.rhino.head.Node node28 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean29 = node28.hasChildren();
        node19.addChildrenToFront(node28);
        node6.addChildToBack(node28);
        // The following exception was thrown during execution in test generation
        try {
            node6.labelId(11);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "40" + "'", str2, "40");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "40" + "'", str7, "40");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNull(comment15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "40" + "'", str20, "40");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test1731() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1731");
        com.google.javascript.rhino.head.Node node2 = com.google.javascript.rhino.head.Node.newString(3, "100");
        com.google.javascript.rhino.head.Node node4 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str5 = node4.toString();
        boolean boolean6 = node4.hasConsistentReturnUsage();
        boolean boolean7 = node4.hasSideEffects();
        node4.setLineno((int) '4');
        com.google.javascript.rhino.head.Node node11 = node4.setType((int) '4');
        com.google.javascript.rhino.head.Node node15 = com.google.javascript.rhino.head.Node.newString(23, "");
        com.google.javascript.rhino.head.Node node16 = node15.getLastSibling();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator17 = node16.new NodeIterator();
        node16.setLineno(13);
        boolean boolean20 = node16.hasSideEffects();
        com.google.javascript.rhino.head.Node node24 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str25 = node24.toString();
        boolean boolean26 = node24.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node28 = com.google.javascript.rhino.head.Node.newString("");
        node28.removeProp(23);
        node24.addChildToFront(node28);
        com.google.javascript.rhino.head.Node node33 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean34 = node33.hasChildren();
        node24.addChildrenToFront(node33);
        com.google.javascript.rhino.head.Node node37 = new com.google.javascript.rhino.head.Node((int) (byte) -1);
        java.lang.String str38 = node37.toString();
        boolean boolean39 = node37.hasChildren();
        com.google.javascript.rhino.head.Node node41 = new com.google.javascript.rhino.head.Node((int) (short) -1, node33, node37, (int) (short) 10);
        com.google.javascript.rhino.head.Node node42 = node41.getLastChild();
        com.google.javascript.rhino.head.Node node47 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str48 = node47.toString();
        boolean boolean49 = node47.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node51 = com.google.javascript.rhino.head.Node.newString("");
        node51.removeProp(23);
        node47.addChildToFront(node51);
        com.google.javascript.rhino.head.Node node55 = new com.google.javascript.rhino.head.Node((int) 'a', node47);
        com.google.javascript.rhino.head.Node node57 = com.google.javascript.rhino.head.Node.newString("-1");
        com.google.javascript.rhino.head.Node node59 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str60 = node59.toString();
        com.google.javascript.rhino.head.Node node61 = node59.getLastChild();
        com.google.javascript.rhino.head.Node node63 = new com.google.javascript.rhino.head.Node((int) (short) -1, node47, node57, node59, (int) (short) -1);
        com.google.javascript.rhino.head.Node node65 = new com.google.javascript.rhino.head.Node((int) (short) 1, node59, 12);
        com.google.javascript.rhino.head.Node node67 = new com.google.javascript.rhino.head.Node(23);
        node67.removeProp(25);
        boolean boolean70 = node67.hasChildren();
        com.google.javascript.rhino.head.Node node71 = new com.google.javascript.rhino.head.Node((-1), node42, node59, node67);
        com.google.javascript.rhino.head.Node node73 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str74 = node73.toString();
        boolean boolean75 = node73.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node77 = com.google.javascript.rhino.head.Node.newString("");
        node77.removeProp(23);
        node73.addChildToFront(node77);
        com.google.javascript.rhino.head.Node node81 = node73.getFirstChild();
        com.google.javascript.rhino.head.Node node83 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        node81.addChildrenToBack(node83);
        com.google.javascript.rhino.head.Node node86 = new com.google.javascript.rhino.head.Node(19, node16, node42, node81, 6);
        com.google.javascript.rhino.head.Node node87 = node81.getFirstChild();
        node2.addChildAfter(node11, node87);
        // The following exception was thrown during execution in test generation
        try {
            int int89 = node2.labelId();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "40" + "'", str5, "40");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "40" + "'", str25, "40");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "-1" + "'", str38, "-1");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "40" + "'", str48, "40");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "40" + "'", str60, "40");
        org.junit.Assert.assertNull(node61);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "40" + "'", str74, "40");
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertNotNull(node81);
        org.junit.Assert.assertNotNull(node87);
    }

    @Test
    public void test1732() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1732");
        com.google.javascript.rhino.head.Node node2 = com.google.javascript.rhino.head.Node.newString((int) (byte) -1, "hi!");
        com.google.javascript.rhino.head.Node node5 = com.google.javascript.rhino.head.Node.newString((int) ' ', "100");
        com.google.javascript.rhino.head.Node node10 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str11 = node10.toString();
        boolean boolean12 = node10.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node14 = com.google.javascript.rhino.head.Node.newString("");
        node14.removeProp(23);
        node10.addChildToFront(node14);
        com.google.javascript.rhino.head.Node node18 = node10.getFirstChild();
        node18.setString("100");
        com.google.javascript.rhino.head.ast.Scope scope21 = node18.getScope();
        com.google.javascript.rhino.head.Node node23 = new com.google.javascript.rhino.head.Node((int) ' ', node18, 2);
        boolean boolean24 = node23.hasChildren();
        com.google.javascript.rhino.head.Node node28 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str29 = node28.toString();
        boolean boolean30 = node28.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node32 = com.google.javascript.rhino.head.Node.newString("");
        node32.removeProp(23);
        node28.addChildToFront(node32);
        com.google.javascript.rhino.head.Node node37 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean38 = node37.hasChildren();
        node28.addChildrenToFront(node37);
        int int40 = node37.getLineno();
        com.google.javascript.rhino.head.Node node42 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str43 = node42.toString();
        boolean boolean44 = node42.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node46 = com.google.javascript.rhino.head.Node.newString("");
        node46.removeProp(23);
        node42.addChildToFront(node46);
        com.google.javascript.rhino.head.Node node50 = node42.getFirstChild();
        com.google.javascript.rhino.head.Node node52 = new com.google.javascript.rhino.head.Node((int) (short) 0, node37, node42, 9);
        boolean boolean53 = node37.hasSideEffects();
        com.google.javascript.rhino.head.Node node56 = com.google.javascript.rhino.head.Node.newString(23, "");
        com.google.javascript.rhino.head.Node node57 = node56.getLastSibling();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator58 = node57.new NodeIterator();
        com.google.javascript.rhino.head.Node node60 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str61 = node60.toString();
        boolean boolean62 = node60.hasConsistentReturnUsage();
        boolean boolean63 = node60.hasSideEffects();
        com.google.javascript.rhino.head.Node node65 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str66 = node65.toString();
        boolean boolean67 = node65.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node69 = com.google.javascript.rhino.head.Node.newString("");
        node69.removeProp(23);
        node65.addChildToFront(node69);
        com.google.javascript.rhino.head.Node node73 = node65.getFirstChild();
        com.google.javascript.rhino.head.ast.Comment comment74 = node65.getJsDocNode();
        node60.addChildToBack(node65);
        java.lang.String str76 = node60.toString();
        com.google.javascript.rhino.head.Node node78 = new com.google.javascript.rhino.head.Node(0, node37, node57, node60, 1);
        com.google.javascript.rhino.head.Node node80 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        com.google.javascript.rhino.head.Node node82 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str83 = node82.toString();
        boolean boolean84 = node82.hasConsistentReturnUsage();
        boolean boolean85 = node82.hasSideEffects();
        node80.addChildrenToFront(node82);
        node82.removeChildren();
        com.google.javascript.rhino.head.Node node88 = new com.google.javascript.rhino.head.Node((int) (short) 0, node23, node57, node82);
        com.google.javascript.rhino.head.ast.Scope scope89 = null;
        node57.setScope(scope89);
        boolean boolean91 = node57.hasSideEffects();
        com.google.javascript.rhino.head.Node node92 = new com.google.javascript.rhino.head.Node(13, node57);
        com.google.javascript.rhino.head.ast.Comment comment93 = node92.getJsDocNode();
        // The following exception was thrown during execution in test generation
        try {
            node2.replaceChild(node5, (com.google.javascript.rhino.head.Node) comment93);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "40" + "'", str11, "40");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNull(scope21);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "40" + "'", str29, "40");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "40" + "'", str43, "40");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "40" + "'", str61, "40");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "40" + "'", str66, "40");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertNull(comment74);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "40" + "'", str76, "40");
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "40" + "'", str83, "40");
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNull(comment93);
    }

    @Test
    public void test1733() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1733");
        com.google.javascript.rhino.head.Node node2 = new com.google.javascript.rhino.head.Node(12);
        node2.putIntProp(14, 3);
        com.google.javascript.rhino.head.Node node6 = new com.google.javascript.rhino.head.Node(6, node2);
        int int9 = node6.getIntProp(18, 26);
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator10 = node6.new NodeIterator();
        com.google.javascript.rhino.head.Node node11 = node6.getLastSibling();
        com.google.javascript.rhino.head.Node node17 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str18 = node17.toString();
        boolean boolean19 = node17.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node21 = com.google.javascript.rhino.head.Node.newString("");
        node21.removeProp(23);
        node17.addChildToFront(node21);
        com.google.javascript.rhino.head.Node node25 = new com.google.javascript.rhino.head.Node((int) 'a', node17);
        com.google.javascript.rhino.head.Node node27 = com.google.javascript.rhino.head.Node.newString("-1");
        com.google.javascript.rhino.head.Node node29 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str30 = node29.toString();
        com.google.javascript.rhino.head.Node node31 = node29.getLastChild();
        com.google.javascript.rhino.head.Node node33 = new com.google.javascript.rhino.head.Node((int) (short) -1, node17, node27, node29, (int) (short) -1);
        com.google.javascript.rhino.head.Node node35 = com.google.javascript.rhino.head.Node.newString("23");
        com.google.javascript.rhino.head.Node node36 = new com.google.javascript.rhino.head.Node(26, node33, node35);
        int int37 = node35.getLineno();
        com.google.javascript.rhino.head.Node node39 = new com.google.javascript.rhino.head.Node(17, node35, (int) (byte) 100);
        node11.addChildToBack(node39);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 26 + "'", int9 == 26);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "40" + "'", str18, "40");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "40" + "'", str30, "40");
        org.junit.Assert.assertNull(node31);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
    }

    @Test
    public void test1734() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1734");
        com.google.javascript.rhino.head.Node node2 = new com.google.javascript.rhino.head.Node((int) (byte) 1);
        node2.removeProp((int) (short) 10);
        com.google.javascript.rhino.head.Node node7 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str8 = node7.toString();
        boolean boolean9 = node7.hasConsistentReturnUsage();
        boolean boolean10 = node7.hasSideEffects();
        com.google.javascript.rhino.head.Node node11 = new com.google.javascript.rhino.head.Node(0, node7);
        com.google.javascript.rhino.head.Node node14 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str15 = node14.toString();
        boolean boolean16 = node14.hasConsistentReturnUsage();
        boolean boolean17 = node14.hasSideEffects();
        com.google.javascript.rhino.head.Node node19 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str20 = node19.toString();
        boolean boolean21 = node19.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node23 = com.google.javascript.rhino.head.Node.newString("");
        node23.removeProp(23);
        node19.addChildToFront(node23);
        com.google.javascript.rhino.head.Node node27 = node19.getFirstChild();
        com.google.javascript.rhino.head.ast.Comment comment28 = node19.getJsDocNode();
        node14.addChildToBack(node19);
        boolean boolean30 = node19.hasConsistentReturnUsage();
        node7.putProp((int) (short) 1, (java.lang.Object) node19);
        com.google.javascript.rhino.head.Node node32 = new com.google.javascript.rhino.head.Node((int) '#', node2, node19);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode33 = null;
        java.lang.String str34 = node19.toStringTree(scriptNode33);
        com.google.javascript.rhino.head.Node node37 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str38 = node37.toString();
        boolean boolean39 = node37.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node41 = com.google.javascript.rhino.head.Node.newString("");
        node41.removeProp(23);
        node37.addChildToFront(node41);
        com.google.javascript.rhino.head.Node node46 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean47 = node46.hasChildren();
        node37.addChildrenToFront(node46);
        com.google.javascript.rhino.head.Node node50 = new com.google.javascript.rhino.head.Node((int) (byte) -1);
        java.lang.String str51 = node50.toString();
        boolean boolean52 = node50.hasChildren();
        com.google.javascript.rhino.head.Node node54 = new com.google.javascript.rhino.head.Node((int) (short) -1, node46, node50, (int) (short) 10);
        node54.removeProp(24);
        java.lang.String str57 = node54.getJsDoc();
        node19.addChildrenToFront(node54);
        node19.putIntProp(41, 2);
        com.google.javascript.rhino.head.Node node63 = com.google.javascript.rhino.head.Node.newNumber((double) 1.0f);
        java.lang.Object obj65 = node63.getProp((int) 'a');
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor66 = node63.iterator();
        int int69 = node63.getIntProp((int) (byte) -1, 17);
        com.google.javascript.rhino.head.Node node71 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str72 = node71.toString();
        boolean boolean73 = node71.hasConsistentReturnUsage();
        boolean boolean74 = node71.hasSideEffects();
        com.google.javascript.rhino.head.Node node76 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str77 = node76.toString();
        boolean boolean78 = node76.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node80 = com.google.javascript.rhino.head.Node.newString("");
        node80.removeProp(23);
        node76.addChildToFront(node80);
        com.google.javascript.rhino.head.Node node84 = node76.getFirstChild();
        com.google.javascript.rhino.head.ast.Comment comment85 = node76.getJsDocNode();
        node71.addChildToBack(node76);
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor87 = node71.iterator();
        // The following exception was thrown during execution in test generation
        try {
            node19.addChildBefore(node63, node71);
            org.junit.Assert.fail("Expected exception of type java.lang.RuntimeException; message: node is not a child");
        } catch (java.lang.RuntimeException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "40" + "'", str8, "40");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "40" + "'", str15, "40");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "40" + "'", str20, "40");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNull(comment28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "40" + "'", str38, "40");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "-1" + "'", str51, "-1");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertNull(obj65);
        org.junit.Assert.assertNotNull(nodeItor66);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 17 + "'", int69 == 17);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "40" + "'", str72, "40");
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "40" + "'", str77, "40");
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertNotNull(node80);
        org.junit.Assert.assertNotNull(node84);
        org.junit.Assert.assertNull(comment85);
        org.junit.Assert.assertNotNull(nodeItor87);
    }

    @Test
    public void test1735() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1735");
        com.google.javascript.rhino.head.Node node1 = com.google.javascript.rhino.head.Node.newString("");
        int int4 = node1.getIntProp(17, (int) (byte) -1);
        com.google.javascript.rhino.head.Node node7 = new com.google.javascript.rhino.head.Node(40, 8);
        com.google.javascript.rhino.head.Node node10 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str11 = node10.toString();
        boolean boolean12 = node10.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node14 = com.google.javascript.rhino.head.Node.newString("");
        node14.removeProp(23);
        node10.addChildToFront(node14);
        com.google.javascript.rhino.head.Node node18 = node10.getFirstChild();
        com.google.javascript.rhino.head.Node node20 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        node18.addChildrenToBack(node20);
        com.google.javascript.rhino.head.Node node23 = com.google.javascript.rhino.head.Node.newString("");
        int int26 = node23.getIntProp(17, (int) (byte) -1);
        com.google.javascript.rhino.head.Node node27 = new com.google.javascript.rhino.head.Node((int) (short) 10, node18, node23);
        com.google.javascript.rhino.head.Node node29 = node18.setType(18);
        node1.addChildAfter(node7, node29);
        com.google.javascript.rhino.head.Node node32 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean33 = node32.hasSideEffects();
        node7.addChildrenToFront(node32);
        com.google.javascript.rhino.head.Node node35 = node7.getNext();
        int int36 = node7.getLineno();
        com.google.javascript.rhino.head.Node node38 = node7.setType(25);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "40" + "'", str11, "40");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 8 + "'", int36 == 8);
        org.junit.Assert.assertNotNull(node38);
    }

    @Test
    public void test1736() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1736");
        com.google.javascript.rhino.head.Node node1 = null;
        com.google.javascript.rhino.head.Node node6 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str7 = node6.toString();
        boolean boolean8 = node6.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node10 = com.google.javascript.rhino.head.Node.newString("");
        node10.removeProp(23);
        node6.addChildToFront(node10);
        com.google.javascript.rhino.head.Node node15 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean16 = node15.hasChildren();
        node6.addChildrenToFront(node15);
        int int18 = node15.getLineno();
        com.google.javascript.rhino.head.Node node20 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str21 = node20.toString();
        boolean boolean22 = node20.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node24 = com.google.javascript.rhino.head.Node.newString("");
        node24.removeProp(23);
        node20.addChildToFront(node24);
        com.google.javascript.rhino.head.Node node28 = node20.getFirstChild();
        com.google.javascript.rhino.head.Node node30 = new com.google.javascript.rhino.head.Node((int) (short) 0, node15, node20, 9);
        com.google.javascript.rhino.head.Node node34 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str35 = node34.toString();
        boolean boolean36 = node34.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node38 = com.google.javascript.rhino.head.Node.newString("");
        node38.removeProp(23);
        node34.addChildToFront(node38);
        com.google.javascript.rhino.head.Node node42 = new com.google.javascript.rhino.head.Node((int) 'a', node34);
        com.google.javascript.rhino.head.Node node44 = com.google.javascript.rhino.head.Node.newString("-1");
        com.google.javascript.rhino.head.Node node46 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str47 = node46.toString();
        com.google.javascript.rhino.head.Node node48 = node46.getLastChild();
        com.google.javascript.rhino.head.Node node50 = new com.google.javascript.rhino.head.Node((int) (short) -1, node34, node44, node46, (int) (short) -1);
        com.google.javascript.rhino.head.Node node52 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str53 = node52.toString();
        boolean boolean54 = node52.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node56 = com.google.javascript.rhino.head.Node.newString("");
        node56.removeProp(23);
        node52.addChildToFront(node56);
        com.google.javascript.rhino.head.Node node60 = node52.getFirstChild();
        com.google.javascript.rhino.head.Node node62 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        node60.addChildrenToBack(node62);
        com.google.javascript.rhino.head.Node node64 = node62.getLastChild();
        java.lang.String str65 = node62.getJsDoc();
        java.lang.Object obj67 = node62.getProp(0);
        com.google.javascript.rhino.head.Node node68 = new com.google.javascript.rhino.head.Node(3, node15, node34, node62);
        com.google.javascript.rhino.head.Node node69 = node62.getLastSibling();
        com.google.javascript.rhino.head.Node node71 = new com.google.javascript.rhino.head.Node(52, node69, 16);
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.head.Node node73 = new com.google.javascript.rhino.head.Node(12, node1, node69, 11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "40" + "'", str7, "40");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "40" + "'", str21, "40");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "40" + "'", str35, "40");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "40" + "'", str47, "40");
        org.junit.Assert.assertNull(node48);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "40" + "'", str53, "40");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNull(node64);
        org.junit.Assert.assertNull(str65);
        org.junit.Assert.assertNull(obj67);
        org.junit.Assert.assertNotNull(node69);
    }

    @Test
    public void test1737() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1737");
        com.google.javascript.rhino.head.Node node2 = new com.google.javascript.rhino.head.Node(32, 26);
        // The following exception was thrown during execution in test generation
        try {
            node2.labelId(6);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1738() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1738");
        com.google.javascript.rhino.head.Node node3 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str4 = node3.toString();
        boolean boolean5 = node3.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node7 = com.google.javascript.rhino.head.Node.newString("");
        node7.removeProp(23);
        node3.addChildToFront(node7);
        com.google.javascript.rhino.head.Node node11 = node3.getFirstChild();
        node11.setString("100");
        com.google.javascript.rhino.head.ast.Scope scope14 = node11.getScope();
        com.google.javascript.rhino.head.Node node16 = new com.google.javascript.rhino.head.Node((int) ' ', node11, 2);
        boolean boolean17 = node16.hasChildren();
        com.google.javascript.rhino.head.Node node21 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str22 = node21.toString();
        boolean boolean23 = node21.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node25 = com.google.javascript.rhino.head.Node.newString("");
        node25.removeProp(23);
        node21.addChildToFront(node25);
        com.google.javascript.rhino.head.Node node30 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean31 = node30.hasChildren();
        node21.addChildrenToFront(node30);
        int int33 = node30.getLineno();
        com.google.javascript.rhino.head.Node node35 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str36 = node35.toString();
        boolean boolean37 = node35.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node39 = com.google.javascript.rhino.head.Node.newString("");
        node39.removeProp(23);
        node35.addChildToFront(node39);
        com.google.javascript.rhino.head.Node node43 = node35.getFirstChild();
        com.google.javascript.rhino.head.Node node45 = new com.google.javascript.rhino.head.Node((int) (short) 0, node30, node35, 9);
        boolean boolean46 = node30.hasSideEffects();
        com.google.javascript.rhino.head.Node node49 = com.google.javascript.rhino.head.Node.newString(23, "");
        com.google.javascript.rhino.head.Node node50 = node49.getLastSibling();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator51 = node50.new NodeIterator();
        com.google.javascript.rhino.head.Node node53 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str54 = node53.toString();
        boolean boolean55 = node53.hasConsistentReturnUsage();
        boolean boolean56 = node53.hasSideEffects();
        com.google.javascript.rhino.head.Node node58 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str59 = node58.toString();
        boolean boolean60 = node58.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node62 = com.google.javascript.rhino.head.Node.newString("");
        node62.removeProp(23);
        node58.addChildToFront(node62);
        com.google.javascript.rhino.head.Node node66 = node58.getFirstChild();
        com.google.javascript.rhino.head.ast.Comment comment67 = node58.getJsDocNode();
        node53.addChildToBack(node58);
        java.lang.String str69 = node53.toString();
        com.google.javascript.rhino.head.Node node71 = new com.google.javascript.rhino.head.Node(0, node30, node50, node53, 1);
        com.google.javascript.rhino.head.Node node73 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        com.google.javascript.rhino.head.Node node75 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str76 = node75.toString();
        boolean boolean77 = node75.hasConsistentReturnUsage();
        boolean boolean78 = node75.hasSideEffects();
        node73.addChildrenToFront(node75);
        node75.removeChildren();
        com.google.javascript.rhino.head.Node node81 = new com.google.javascript.rhino.head.Node((int) (short) 0, node16, node50, node75);
        node75.setDouble((double) 11);
        java.lang.String str84 = node75.toString();
        com.google.javascript.rhino.head.Node node85 = node75.getNext();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode86 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str87 = node85.toStringTree(scriptNode86);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "40" + "'", str4, "40");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNull(scope14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "40" + "'", str22, "40");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "40" + "'", str36, "40");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "40" + "'", str54, "40");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "40" + "'", str59, "40");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertNull(comment67);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "40" + "'", str69, "40");
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "40" + "'", str76, "40");
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "40" + "'", str84, "40");
        org.junit.Assert.assertNull(node85);
    }

    @Test
    public void test1739() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1739");
        com.google.javascript.rhino.head.Node node2 = new com.google.javascript.rhino.head.Node((int) (byte) -1);
        com.google.javascript.rhino.head.Node node5 = com.google.javascript.rhino.head.Node.newString("");
        node5.removeProp(23);
        com.google.javascript.rhino.head.Node node10 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str11 = node10.toString();
        boolean boolean12 = node10.hasConsistentReturnUsage();
        boolean boolean13 = node10.hasSideEffects();
        com.google.javascript.rhino.head.Node node14 = new com.google.javascript.rhino.head.Node(0, node10);
        node5.addChildrenToBack(node14);
        com.google.javascript.rhino.head.Node node16 = new com.google.javascript.rhino.head.Node(9, node5);
        node5.removeProp(4);
        com.google.javascript.rhino.head.Node node20 = node5.setType(23);
        node2.addChildrenToFront(node20);
        com.google.javascript.rhino.head.Node node23 = com.google.javascript.rhino.head.Node.newString("12");
        java.lang.String str24 = node23.getJsDoc();
        com.google.javascript.rhino.head.Node node27 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str28 = node27.toString();
        boolean boolean29 = node27.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node31 = com.google.javascript.rhino.head.Node.newString("");
        node31.removeProp(23);
        node27.addChildToFront(node31);
        java.lang.String str35 = node31.getString();
        com.google.javascript.rhino.head.ast.Scope scope36 = node31.getScope();
        com.google.javascript.rhino.head.Node node39 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str40 = node39.toString();
        boolean boolean41 = node39.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node43 = com.google.javascript.rhino.head.Node.newString("");
        node43.removeProp(23);
        node39.addChildToFront(node43);
        com.google.javascript.rhino.head.Node node47 = node39.getFirstChild();
        node47.setString("100");
        com.google.javascript.rhino.head.ast.Scope scope50 = node47.getScope();
        com.google.javascript.rhino.head.Node node52 = new com.google.javascript.rhino.head.Node((int) ' ', node47, 2);
        boolean boolean53 = node52.hasChildren();
        com.google.javascript.rhino.head.Node node56 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str57 = node56.toString();
        boolean boolean58 = node56.hasConsistentReturnUsage();
        boolean boolean59 = node56.hasSideEffects();
        com.google.javascript.rhino.head.Node node60 = new com.google.javascript.rhino.head.Node(0, node56);
        int int61 = node56.getLineno();
        node52.addChildToFront(node56);
        int int63 = node56.getType();
        boolean boolean64 = node56.hasChildren();
        com.google.javascript.rhino.head.Node node66 = new com.google.javascript.rhino.head.Node((int) (byte) -1);
        java.lang.String str67 = node66.toString();
        boolean boolean68 = node66.hasChildren();
        com.google.javascript.rhino.head.Node node72 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str73 = node72.toString();
        boolean boolean74 = node72.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node76 = com.google.javascript.rhino.head.Node.newString("");
        node76.removeProp(23);
        node72.addChildToFront(node76);
        com.google.javascript.rhino.head.Node node80 = node72.getFirstChild();
        node80.setString("100");
        com.google.javascript.rhino.head.ast.Scope scope83 = node80.getScope();
        com.google.javascript.rhino.head.Node node85 = new com.google.javascript.rhino.head.Node((int) ' ', node80, 2);
        com.google.javascript.rhino.head.Node node86 = node80.getLastSibling();
        com.google.javascript.rhino.head.Node node89 = com.google.javascript.rhino.head.Node.newString(23, "");
        com.google.javascript.rhino.head.Node node90 = node89.getLastSibling();
        com.google.javascript.rhino.head.Node node91 = new com.google.javascript.rhino.head.Node((int) ' ', node86, node89);
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor92 = node89.iterator();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator93 = node89.new NodeIterator();
        node66.addChildrenToBack(node89);
        com.google.javascript.rhino.head.Node node95 = new com.google.javascript.rhino.head.Node(0, node31, node56, node89);
        com.google.javascript.rhino.head.Node node97 = new com.google.javascript.rhino.head.Node(41, node2, node23, node56, 6);
        java.lang.Class<?> wildcardClass98 = node23.getClass();
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "40" + "'", str11, "40");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "40" + "'", str28, "40");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNull(scope36);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "40" + "'", str40, "40");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNull(scope50);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "40" + "'", str57, "40");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 40 + "'", int63 == 40);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "-1" + "'", str67, "-1");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "40" + "'", str73, "40");
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertNotNull(node80);
        org.junit.Assert.assertNull(scope83);
        org.junit.Assert.assertNotNull(node86);
        org.junit.Assert.assertNotNull(node89);
        org.junit.Assert.assertNotNull(node90);
        org.junit.Assert.assertNotNull(nodeItor92);
        org.junit.Assert.assertNotNull(wildcardClass98);
    }

    @Test
    public void test1740() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1740");
        com.google.javascript.rhino.head.Node node0 = com.google.javascript.rhino.head.Node.newTarget();
        // The following exception was thrown during execution in test generation
        try {
            node0.setDouble(32.0d);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: com.google.javascript.rhino.head.Node cannot be cast to com.google.javascript.rhino.head.ast.NumberLiteral");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node0);
    }

    @Test
    public void test1741() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1741");
        com.google.javascript.rhino.head.Node node4 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str5 = node4.toString();
        boolean boolean6 = node4.hasConsistentReturnUsage();
        boolean boolean7 = node4.hasSideEffects();
        com.google.javascript.rhino.head.Node node8 = new com.google.javascript.rhino.head.Node(0, node4);
        com.google.javascript.rhino.head.Node node11 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str12 = node11.toString();
        boolean boolean13 = node11.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node15 = com.google.javascript.rhino.head.Node.newString("");
        node15.removeProp(23);
        node11.addChildToFront(node15);
        com.google.javascript.rhino.head.Node node20 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean21 = node20.hasChildren();
        node11.addChildrenToFront(node20);
        com.google.javascript.rhino.head.Node node24 = new com.google.javascript.rhino.head.Node((int) (byte) -1);
        java.lang.String str25 = node24.toString();
        boolean boolean26 = node24.hasChildren();
        com.google.javascript.rhino.head.Node node28 = new com.google.javascript.rhino.head.Node((int) (short) -1, node20, node24, (int) (short) 10);
        com.google.javascript.rhino.head.Node node31 = com.google.javascript.rhino.head.Node.newString(23, "");
        com.google.javascript.rhino.head.Node node33 = new com.google.javascript.rhino.head.Node((int) (byte) 10, node4, node24, node31, (int) (short) 0);
        com.google.javascript.rhino.head.ast.Comment comment34 = null;
        node24.setJsDocNode(comment34);
        com.google.javascript.rhino.head.Node node38 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        java.lang.String str39 = node38.toString();
        int int40 = node38.getLineno();
        com.google.javascript.rhino.head.Node node42 = com.google.javascript.rhino.head.Node.newNumber((double) 0);
        com.google.javascript.rhino.head.ast.Comment comment43 = node42.getJsDocNode();
        com.google.javascript.rhino.head.Node node45 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        com.google.javascript.rhino.head.Node node47 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str48 = node47.toString();
        boolean boolean49 = node47.hasConsistentReturnUsage();
        boolean boolean50 = node47.hasSideEffects();
        node45.addChildrenToFront(node47);
        com.google.javascript.rhino.head.Node node52 = new com.google.javascript.rhino.head.Node(8, node38, node42, node45);
        node24.addChildrenToFront(node42);
        com.google.javascript.rhino.head.Node node55 = com.google.javascript.rhino.head.Node.newString("");
        node55.removeProp(23);
        com.google.javascript.rhino.head.Node node60 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str61 = node60.toString();
        boolean boolean62 = node60.hasConsistentReturnUsage();
        boolean boolean63 = node60.hasSideEffects();
        com.google.javascript.rhino.head.Node node64 = new com.google.javascript.rhino.head.Node(0, node60);
        node55.addChildrenToBack(node64);
        com.google.javascript.rhino.head.Node node68 = com.google.javascript.rhino.head.Node.newString(23, "");
        com.google.javascript.rhino.head.Node node69 = node68.getLastSibling();
        node64.addChildrenToBack(node69);
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator71 = node64.new NodeIterator();
        com.google.javascript.rhino.head.Node node72 = nodeIterator71.next();
        com.google.javascript.rhino.head.Node node73 = new com.google.javascript.rhino.head.Node((int) (short) 100, node42, node72);
        com.google.javascript.rhino.head.Node node76 = com.google.javascript.rhino.head.Node.newString(24, "100");
        int int77 = node76.getType();
        java.lang.String str78 = node76.getString();
        node72.addChildToFront(node76);
        boolean boolean80 = node76.hasChildren();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "40" + "'", str5, "40");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "40" + "'", str12, "40");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "-1" + "'", str25, "-1");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "100" + "'", str39, "100");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNull(comment43);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "40" + "'", str48, "40");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "40" + "'", str61, "40");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 24 + "'", int77 == 24);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "100" + "'", str78, "100");
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
    }

    @Test
    public void test1742() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1742");
        com.google.javascript.rhino.head.Node node1 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str2 = node1.toString();
        boolean boolean3 = node1.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node5 = com.google.javascript.rhino.head.Node.newString("");
        node5.removeProp(23);
        node1.addChildToFront(node5);
        com.google.javascript.rhino.head.Node node10 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean11 = node10.hasChildren();
        node1.addChildrenToFront(node10);
        int int13 = node10.getLineno();
        node10.setLineno(8);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "40" + "'", str2, "40");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
    }

    @Test
    public void test1743() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1743");
        com.google.javascript.rhino.head.Node node1 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str2 = node1.toString();
        boolean boolean3 = node1.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node5 = com.google.javascript.rhino.head.Node.newString("");
        node5.removeProp(23);
        node1.addChildToFront(node5);
        com.google.javascript.rhino.head.Node node9 = node1.getFirstChild();
        com.google.javascript.rhino.head.ast.Comment comment10 = node1.getJsDocNode();
        int int11 = node1.getType();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator12 = node1.new NodeIterator();
        com.google.javascript.rhino.head.Node node13 = nodeIterator12.next();
        nodeIterator12.remove();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.head.Node node15 = nodeIterator12.next();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "40" + "'", str2, "40");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNull(comment10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 40 + "'", int11 == 40);
        org.junit.Assert.assertNotNull(node13);
    }

    @Test
    public void test1744() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1744");
        com.google.javascript.rhino.head.Node node2 = new com.google.javascript.rhino.head.Node(11, (int) (short) 100);
        // The following exception was thrown during execution in test generation
        try {
            int int3 = node2.labelId();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1745() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1745");
        com.google.javascript.rhino.head.Node node1 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        com.google.javascript.rhino.head.Node node2 = node1.getLastSibling();
        com.google.javascript.rhino.head.ast.Comment comment3 = null;
        node2.setJsDocNode(comment3);
        node2.putIntProp(5, (int) (short) 10);
        com.google.javascript.rhino.head.ast.Comment comment8 = node2.getJsDocNode();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.head.Node node9 = comment8.getLastChild();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNull(comment8);
    }

    @Test
    public void test1746() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1746");
        com.google.javascript.rhino.head.Node node2 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str3 = node2.toString();
        boolean boolean4 = node2.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node6 = com.google.javascript.rhino.head.Node.newString("");
        node6.removeProp(23);
        node2.addChildToFront(node6);
        com.google.javascript.rhino.head.Node node10 = node2.getFirstChild();
        node10.setString("100");
        com.google.javascript.rhino.head.ast.Scope scope13 = node10.getScope();
        com.google.javascript.rhino.head.Node node15 = new com.google.javascript.rhino.head.Node((int) ' ', node10, 2);
        java.util.Spliterator<com.google.javascript.rhino.head.Node> nodeSpliterator16 = node10.spliterator();
        com.google.javascript.rhino.head.Node node18 = new com.google.javascript.rhino.head.Node(23);
        node10.addChildToBack(node18);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode20 = null;
        java.lang.String str21 = node18.toStringTree(scriptNode20);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "40" + "'", str3, "40");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNull(scope13);
        org.junit.Assert.assertNotNull(nodeSpliterator16);
        org.junit.Assert.assertNull(str21);
    }

    @Test
    public void test1747() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1747");
        com.google.javascript.rhino.head.Node node2 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str3 = node2.toString();
        boolean boolean4 = node2.hasConsistentReturnUsage();
        boolean boolean5 = node2.hasSideEffects();
        com.google.javascript.rhino.head.Node node6 = new com.google.javascript.rhino.head.Node(0, node2);
        com.google.javascript.rhino.head.Node node7 = node6.getLastChild();
        boolean boolean8 = node7.hasChildren();
        com.google.javascript.rhino.head.Node node9 = node7.getLastChild();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj11 = node9.getProp(7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "40" + "'", str3, "40");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(node9);
    }

    @Test
    public void test1748() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1748");
        com.google.javascript.rhino.head.Node node1 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str2 = node1.toString();
        com.google.javascript.rhino.head.Node node3 = node1.getLastChild();
        com.google.javascript.rhino.head.Node node7 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str8 = node7.toString();
        boolean boolean9 = node7.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node11 = com.google.javascript.rhino.head.Node.newString("");
        node11.removeProp(23);
        node7.addChildToFront(node11);
        com.google.javascript.rhino.head.Node node16 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean17 = node16.hasChildren();
        node7.addChildrenToFront(node16);
        int int19 = node16.getLineno();
        com.google.javascript.rhino.head.Node node21 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str22 = node21.toString();
        boolean boolean23 = node21.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node25 = com.google.javascript.rhino.head.Node.newString("");
        node25.removeProp(23);
        node21.addChildToFront(node25);
        com.google.javascript.rhino.head.Node node29 = node21.getFirstChild();
        com.google.javascript.rhino.head.Node node31 = new com.google.javascript.rhino.head.Node((int) (short) 0, node16, node21, 9);
        com.google.javascript.rhino.head.Node node35 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str36 = node35.toString();
        boolean boolean37 = node35.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node39 = com.google.javascript.rhino.head.Node.newString("");
        node39.removeProp(23);
        node35.addChildToFront(node39);
        com.google.javascript.rhino.head.Node node43 = new com.google.javascript.rhino.head.Node((int) 'a', node35);
        com.google.javascript.rhino.head.Node node45 = com.google.javascript.rhino.head.Node.newString("-1");
        com.google.javascript.rhino.head.Node node47 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str48 = node47.toString();
        com.google.javascript.rhino.head.Node node49 = node47.getLastChild();
        com.google.javascript.rhino.head.Node node51 = new com.google.javascript.rhino.head.Node((int) (short) -1, node35, node45, node47, (int) (short) -1);
        com.google.javascript.rhino.head.Node node53 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str54 = node53.toString();
        boolean boolean55 = node53.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node57 = com.google.javascript.rhino.head.Node.newString("");
        node57.removeProp(23);
        node53.addChildToFront(node57);
        com.google.javascript.rhino.head.Node node61 = node53.getFirstChild();
        com.google.javascript.rhino.head.Node node63 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        node61.addChildrenToBack(node63);
        com.google.javascript.rhino.head.Node node65 = node63.getLastChild();
        java.lang.String str66 = node63.getJsDoc();
        java.lang.Object obj68 = node63.getProp(0);
        com.google.javascript.rhino.head.Node node69 = new com.google.javascript.rhino.head.Node(3, node16, node35, node63);
        com.google.javascript.rhino.head.ast.Comment comment70 = node69.getJsDocNode();
        node1.addChildrenToFront(node69);
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor72 = node69.iterator();
        // The following exception was thrown during execution in test generation
        try {
            int int74 = node69.getExistingIntProp(16);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "40" + "'", str2, "40");
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "40" + "'", str8, "40");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "40" + "'", str22, "40");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "40" + "'", str36, "40");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "40" + "'", str48, "40");
        org.junit.Assert.assertNull(node49);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "40" + "'", str54, "40");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertNull(node65);
        org.junit.Assert.assertNull(str66);
        org.junit.Assert.assertNull(obj68);
        org.junit.Assert.assertNull(comment70);
        org.junit.Assert.assertNotNull(nodeItor72);
    }

    @Test
    public void test1749() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1749");
        com.google.javascript.rhino.head.Node node2 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str3 = node2.toString();
        boolean boolean4 = node2.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.ast.Comment comment5 = null;
        node2.setJsDocNode(comment5);
        com.google.javascript.rhino.head.Node node9 = com.google.javascript.rhino.head.Node.newString("");
        node9.removeProp(23);
        com.google.javascript.rhino.head.Node node14 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str15 = node14.toString();
        boolean boolean16 = node14.hasConsistentReturnUsage();
        boolean boolean17 = node14.hasSideEffects();
        com.google.javascript.rhino.head.Node node18 = new com.google.javascript.rhino.head.Node(0, node14);
        node9.addChildrenToBack(node18);
        com.google.javascript.rhino.head.Node node20 = new com.google.javascript.rhino.head.Node(9, node9);
        node2.addChildrenToFront(node20);
        com.google.javascript.rhino.head.Node node24 = new com.google.javascript.rhino.head.Node(12);
        node24.putIntProp(14, 3);
        com.google.javascript.rhino.head.Node node28 = new com.google.javascript.rhino.head.Node(6, node24);
        com.google.javascript.rhino.head.Node node29 = node28.getLastChild();
        com.google.javascript.rhino.head.Node node33 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str34 = node33.toString();
        boolean boolean35 = node33.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node37 = com.google.javascript.rhino.head.Node.newString("");
        node37.removeProp(23);
        node33.addChildToFront(node37);
        com.google.javascript.rhino.head.Node node42 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean43 = node42.hasChildren();
        node33.addChildrenToFront(node42);
        com.google.javascript.rhino.head.Node node46 = new com.google.javascript.rhino.head.Node((int) (byte) -1);
        java.lang.String str47 = node46.toString();
        boolean boolean48 = node46.hasChildren();
        com.google.javascript.rhino.head.Node node50 = new com.google.javascript.rhino.head.Node((int) (short) -1, node42, node46, (int) (short) 10);
        com.google.javascript.rhino.head.Node node51 = node50.getLastChild();
        com.google.javascript.rhino.head.Node node56 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str57 = node56.toString();
        boolean boolean58 = node56.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node60 = com.google.javascript.rhino.head.Node.newString("");
        node60.removeProp(23);
        node56.addChildToFront(node60);
        com.google.javascript.rhino.head.Node node64 = new com.google.javascript.rhino.head.Node((int) 'a', node56);
        com.google.javascript.rhino.head.Node node66 = com.google.javascript.rhino.head.Node.newString("-1");
        com.google.javascript.rhino.head.Node node68 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str69 = node68.toString();
        com.google.javascript.rhino.head.Node node70 = node68.getLastChild();
        com.google.javascript.rhino.head.Node node72 = new com.google.javascript.rhino.head.Node((int) (short) -1, node56, node66, node68, (int) (short) -1);
        com.google.javascript.rhino.head.Node node74 = new com.google.javascript.rhino.head.Node((int) (short) 1, node68, 12);
        com.google.javascript.rhino.head.Node node76 = new com.google.javascript.rhino.head.Node(23);
        node76.removeProp(25);
        boolean boolean79 = node76.hasChildren();
        com.google.javascript.rhino.head.Node node80 = new com.google.javascript.rhino.head.Node((-1), node51, node68, node76);
        node29.addChildToBack(node51);
        com.google.javascript.rhino.head.Node node84 = new com.google.javascript.rhino.head.Node((-1), 0);
        com.google.javascript.rhino.head.Node node86 = new com.google.javascript.rhino.head.Node(7, node20, node29, node84, 20);
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor87 = node29.iterator();
        java.lang.String str88 = node29.toString();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "40" + "'", str3, "40");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "40" + "'", str15, "40");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "40" + "'", str34, "40");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "-1" + "'", str47, "-1");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "40" + "'", str57, "40");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "40" + "'", str69, "40");
        org.junit.Assert.assertNull(node70);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(nodeItor87);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "12" + "'", str88, "12");
    }

    @Test
    public void test1750() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1750");
        com.google.javascript.rhino.head.Node node1 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        com.google.javascript.rhino.head.Node node3 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str4 = node3.toString();
        boolean boolean5 = node3.hasConsistentReturnUsage();
        boolean boolean6 = node3.hasSideEffects();
        node1.addChildrenToFront(node3);
        com.google.javascript.rhino.head.Node node9 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str10 = node9.toString();
        boolean boolean11 = node9.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node13 = com.google.javascript.rhino.head.Node.newString("");
        node13.removeProp(23);
        node9.addChildToFront(node13);
        com.google.javascript.rhino.head.Node node17 = node9.getFirstChild();
        com.google.javascript.rhino.head.Node node19 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        node17.addChildrenToBack(node19);
        node3.addChildrenToBack(node19);
        com.google.javascript.rhino.head.ast.Comment comment22 = node19.getJsDocNode();
        boolean boolean23 = node19.hasSideEffects();
        com.google.javascript.rhino.head.ast.Comment comment24 = null;
        node19.setJsDocNode(comment24);
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.head.ast.Scope scope26 = node19.getScope();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: com.google.javascript.rhino.head.Node cannot be cast to com.google.javascript.rhino.head.ast.Name");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "40" + "'", str4, "40");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "40" + "'", str10, "40");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNull(comment22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
    }

    @Test
    public void test1751() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1751");
        com.google.javascript.rhino.head.Node node1 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str2 = node1.toString();
        boolean boolean3 = node1.hasConsistentReturnUsage();
        boolean boolean4 = node1.hasSideEffects();
        com.google.javascript.rhino.head.Node node6 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str7 = node6.toString();
        boolean boolean8 = node6.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node10 = com.google.javascript.rhino.head.Node.newString("");
        node10.removeProp(23);
        node6.addChildToFront(node10);
        com.google.javascript.rhino.head.Node node14 = node6.getFirstChild();
        com.google.javascript.rhino.head.ast.Comment comment15 = node6.getJsDocNode();
        node1.addChildToBack(node6);
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor17 = node1.iterator();
        com.google.javascript.rhino.head.ast.Comment comment18 = node1.getJsDocNode();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator19 = node1.new NodeIterator();
        boolean boolean20 = nodeIterator19.hasNext();
        boolean boolean21 = nodeIterator19.hasNext();
        boolean boolean22 = nodeIterator19.hasNext();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "40" + "'", str2, "40");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "40" + "'", str7, "40");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNull(comment15);
        org.junit.Assert.assertNotNull(nodeItor17);
        org.junit.Assert.assertNull(comment18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
    }

    @Test
    public void test1752() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1752");
        com.google.javascript.rhino.head.Node node2 = com.google.javascript.rhino.head.Node.newString("");
        int int3 = node2.getLineno();
        com.google.javascript.rhino.head.Node node5 = node2.setType((-1));
        com.google.javascript.rhino.head.Node node7 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        java.lang.String str8 = node7.toString();
        node7.removeChildren();
        boolean boolean10 = node7.hasChildren();
        com.google.javascript.rhino.head.Node node12 = com.google.javascript.rhino.head.Node.newNumber((double) 0L);
        com.google.javascript.rhino.head.Node node14 = com.google.javascript.rhino.head.Node.newString("");
        node14.removeProp(23);
        com.google.javascript.rhino.head.Node node19 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str20 = node19.toString();
        boolean boolean21 = node19.hasConsistentReturnUsage();
        boolean boolean22 = node19.hasSideEffects();
        com.google.javascript.rhino.head.Node node23 = new com.google.javascript.rhino.head.Node(0, node19);
        node14.addChildrenToBack(node23);
        node12.addChildToFront(node14);
        com.google.javascript.rhino.head.Node node26 = new com.google.javascript.rhino.head.Node(6, node2, node7, node12);
        node2.removeProp((int) (byte) 10);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "100" + "'", str8, "100");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "40" + "'", str20, "40");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test1753() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1753");
        com.google.javascript.rhino.head.Node node1 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        com.google.javascript.rhino.head.Node node3 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str4 = node3.toString();
        boolean boolean5 = node3.hasConsistentReturnUsage();
        boolean boolean6 = node3.hasSideEffects();
        node1.addChildrenToFront(node3);
        node3.removeChildren();
        com.google.javascript.rhino.head.Node node10 = com.google.javascript.rhino.head.Node.newString("hi!");
        node3.addChildrenToBack(node10);
        boolean boolean12 = node3.hasSideEffects();
        com.google.javascript.rhino.head.Node node13 = node3.getFirstChild();
        boolean boolean14 = node3.hasSideEffects();
        double double15 = node3.getDouble();
        com.google.javascript.rhino.head.Node node17 = node3.setType((int) (short) 0);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "40" + "'", str4, "40");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 32.0d + "'", double15 == 32.0d);
        org.junit.Assert.assertNotNull(node17);
    }

    @Test
    public void test1754() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1754");
        com.google.javascript.rhino.head.Node node1 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.head.Node node2 = new com.google.javascript.rhino.head.Node(21, node1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1755() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1755");
        com.google.javascript.rhino.head.Node node3 = com.google.javascript.rhino.head.Node.newString((int) '4', "hi!");
        com.google.javascript.rhino.head.Node node7 = com.google.javascript.rhino.head.Node.newString("hi!");
        com.google.javascript.rhino.head.Node node8 = new com.google.javascript.rhino.head.Node(13, node7);
        com.google.javascript.rhino.head.Node node9 = new com.google.javascript.rhino.head.Node(7, node7);
        com.google.javascript.rhino.head.Node node11 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        node9.addChildToFront(node11);
        com.google.javascript.rhino.head.Node node15 = new com.google.javascript.rhino.head.Node(12);
        node15.putIntProp(14, 3);
        com.google.javascript.rhino.head.Node node19 = new com.google.javascript.rhino.head.Node(6, node15);
        com.google.javascript.rhino.head.Node node20 = node19.getLastChild();
        node9.addChildToFront(node19);
        com.google.javascript.rhino.head.Node node22 = new com.google.javascript.rhino.head.Node(97, node3, node9);
        boolean boolean23 = node22.hasChildren();
        java.lang.Object obj25 = node22.getProp(19);
        com.google.javascript.rhino.head.Node node26 = node22.getLastChild();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNull(obj25);
        org.junit.Assert.assertNotNull(node26);
    }

    @Test
    public void test1756() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1756");
        com.google.javascript.rhino.head.Node node2 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        com.google.javascript.rhino.head.Node node4 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str5 = node4.toString();
        boolean boolean6 = node4.hasConsistentReturnUsage();
        boolean boolean7 = node4.hasSideEffects();
        node2.addChildrenToFront(node4);
        node4.removeChildren();
        com.google.javascript.rhino.head.Node node11 = com.google.javascript.rhino.head.Node.newString("hi!");
        node4.addChildrenToBack(node11);
        com.google.javascript.rhino.head.Node node14 = node4.setType((int) (short) -1);
        com.google.javascript.rhino.head.Node node16 = node14.setType(23);
        com.google.javascript.rhino.head.Node node20 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str21 = node20.toString();
        boolean boolean22 = node20.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node24 = com.google.javascript.rhino.head.Node.newString("");
        node24.removeProp(23);
        node20.addChildToFront(node24);
        com.google.javascript.rhino.head.Node node29 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean30 = node29.hasChildren();
        node20.addChildrenToFront(node29);
        com.google.javascript.rhino.head.Node node33 = new com.google.javascript.rhino.head.Node((int) (byte) -1);
        java.lang.String str34 = node33.toString();
        boolean boolean35 = node33.hasChildren();
        com.google.javascript.rhino.head.Node node37 = new com.google.javascript.rhino.head.Node((int) (short) -1, node29, node33, (int) (short) 10);
        com.google.javascript.rhino.head.Node node38 = node37.getLastChild();
        com.google.javascript.rhino.head.Node node43 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str44 = node43.toString();
        boolean boolean45 = node43.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node47 = com.google.javascript.rhino.head.Node.newString("");
        node47.removeProp(23);
        node43.addChildToFront(node47);
        com.google.javascript.rhino.head.Node node51 = new com.google.javascript.rhino.head.Node((int) 'a', node43);
        com.google.javascript.rhino.head.Node node53 = com.google.javascript.rhino.head.Node.newString("-1");
        com.google.javascript.rhino.head.Node node55 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str56 = node55.toString();
        com.google.javascript.rhino.head.Node node57 = node55.getLastChild();
        com.google.javascript.rhino.head.Node node59 = new com.google.javascript.rhino.head.Node((int) (short) -1, node43, node53, node55, (int) (short) -1);
        com.google.javascript.rhino.head.Node node61 = new com.google.javascript.rhino.head.Node((int) (short) 1, node55, 12);
        com.google.javascript.rhino.head.Node node63 = new com.google.javascript.rhino.head.Node(23);
        node63.removeProp(25);
        boolean boolean66 = node63.hasChildren();
        com.google.javascript.rhino.head.Node node67 = new com.google.javascript.rhino.head.Node((-1), node38, node55, node63);
        com.google.javascript.rhino.head.Node node68 = new com.google.javascript.rhino.head.Node(0, node16, node67);
        // The following exception was thrown during execution in test generation
        try {
            node67.resetTargets();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "40" + "'", str5, "40");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "40" + "'", str21, "40");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "-1" + "'", str34, "-1");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "40" + "'", str44, "40");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "40" + "'", str56, "40");
        org.junit.Assert.assertNull(node57);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
    }

    @Test
    public void test1757() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1757");
        com.google.javascript.rhino.head.Node node3 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str4 = node3.toString();
        boolean boolean5 = node3.hasConsistentReturnUsage();
        boolean boolean6 = node3.hasSideEffects();
        com.google.javascript.rhino.head.Node node7 = new com.google.javascript.rhino.head.Node(0, node3);
        com.google.javascript.rhino.head.Node node10 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str11 = node10.toString();
        boolean boolean12 = node10.hasConsistentReturnUsage();
        boolean boolean13 = node10.hasSideEffects();
        com.google.javascript.rhino.head.Node node15 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str16 = node15.toString();
        boolean boolean17 = node15.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node19 = com.google.javascript.rhino.head.Node.newString("");
        node19.removeProp(23);
        node15.addChildToFront(node19);
        com.google.javascript.rhino.head.Node node23 = node15.getFirstChild();
        com.google.javascript.rhino.head.ast.Comment comment24 = node15.getJsDocNode();
        node10.addChildToBack(node15);
        boolean boolean26 = node15.hasConsistentReturnUsage();
        node3.putProp((int) (short) 1, (java.lang.Object) node15);
        com.google.javascript.rhino.head.Node node29 = new com.google.javascript.rhino.head.Node((int) '#');
        com.google.javascript.rhino.head.Node node31 = new com.google.javascript.rhino.head.Node((int) (short) 100, node3, node29, 17);
        java.util.Spliterator<com.google.javascript.rhino.head.Node> nodeSpliterator32 = node3.spliterator();
        boolean boolean33 = node3.hasChildren();
        node3.removeChildren();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "40" + "'", str4, "40");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "40" + "'", str11, "40");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "40" + "'", str16, "40");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNull(comment24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(nodeSpliterator32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test1758() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1758");
        com.google.javascript.rhino.head.Node node3 = com.google.javascript.rhino.head.Node.newString(23, "");
        com.google.javascript.rhino.head.Node node4 = node3.getLastSibling();
        com.google.javascript.rhino.head.Node node6 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        com.google.javascript.rhino.head.Node node8 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str9 = node8.toString();
        boolean boolean10 = node8.hasConsistentReturnUsage();
        boolean boolean11 = node8.hasSideEffects();
        node6.addChildrenToFront(node8);
        com.google.javascript.rhino.head.Node node14 = new com.google.javascript.rhino.head.Node(26, node3, node6, 20);
        node6.putIntProp((int) (byte) -1, 6);
        com.google.javascript.rhino.head.Node node21 = com.google.javascript.rhino.head.Node.newString(23, "");
        com.google.javascript.rhino.head.Node node22 = node21.getLastSibling();
        com.google.javascript.rhino.head.Node node24 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        com.google.javascript.rhino.head.Node node26 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str27 = node26.toString();
        boolean boolean28 = node26.hasConsistentReturnUsage();
        boolean boolean29 = node26.hasSideEffects();
        node24.addChildrenToFront(node26);
        com.google.javascript.rhino.head.Node node32 = new com.google.javascript.rhino.head.Node(26, node21, node24, 20);
        com.google.javascript.rhino.head.Node node34 = new com.google.javascript.rhino.head.Node(26);
        // The following exception was thrown during execution in test generation
        try {
            node6.replaceChild(node32, node34);
            org.junit.Assert.fail("Expected exception of type java.lang.RuntimeException; message: node is not a child");
        } catch (java.lang.RuntimeException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "40" + "'", str9, "40");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "40" + "'", str27, "40");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test1759() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1759");
        com.google.javascript.rhino.head.Node node1 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str2 = node1.toString();
        boolean boolean3 = node1.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node5 = com.google.javascript.rhino.head.Node.newString("");
        node5.removeProp(23);
        node1.addChildToFront(node5);
        com.google.javascript.rhino.head.Node node9 = node1.getFirstChild();
        node9.setString("100");
        com.google.javascript.rhino.head.Node node12 = node9.getLastSibling();
        com.google.javascript.rhino.head.Node node14 = com.google.javascript.rhino.head.Node.newString("");
        node14.removeProp(23);
        com.google.javascript.rhino.head.Node node19 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str20 = node19.toString();
        boolean boolean21 = node19.hasConsistentReturnUsage();
        boolean boolean22 = node19.hasSideEffects();
        com.google.javascript.rhino.head.Node node23 = new com.google.javascript.rhino.head.Node(0, node19);
        node14.addChildrenToBack(node23);
        com.google.javascript.rhino.head.Node node27 = com.google.javascript.rhino.head.Node.newString(23, "");
        com.google.javascript.rhino.head.Node node28 = node27.getLastSibling();
        node23.addChildrenToBack(node28);
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator30 = node23.new NodeIterator();
        com.google.javascript.rhino.head.Node node31 = nodeIterator30.next();
        com.google.javascript.rhino.head.Node node32 = nodeIterator30.next();
        com.google.javascript.rhino.head.ast.Scope scope33 = node32.getScope();
        com.google.javascript.rhino.head.Node node34 = node9.getChildBefore((com.google.javascript.rhino.head.Node) scope33);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "40" + "'", str2, "40");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "40" + "'", str20, "40");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNull(scope33);
        org.junit.Assert.assertNull(node34);
    }

    @Test
    public void test1760() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1760");
        com.google.javascript.rhino.head.Node node3 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str4 = node3.toString();
        boolean boolean5 = node3.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node7 = com.google.javascript.rhino.head.Node.newString("");
        node7.removeProp(23);
        node3.addChildToFront(node7);
        com.google.javascript.rhino.head.Node node11 = new com.google.javascript.rhino.head.Node((int) 'a', node3);
        boolean boolean12 = node11.hasSideEffects();
        com.google.javascript.rhino.head.Node node14 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str15 = node14.toString();
        boolean boolean16 = node14.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node18 = com.google.javascript.rhino.head.Node.newString("");
        node18.removeProp(23);
        node14.addChildToFront(node18);
        com.google.javascript.rhino.head.Node node22 = node14.getFirstChild();
        com.google.javascript.rhino.head.ast.Comment comment23 = node14.getJsDocNode();
        int int24 = node14.getType();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator25 = node14.new NodeIterator();
        boolean boolean26 = nodeIterator25.hasNext();
        com.google.javascript.rhino.head.Node node27 = nodeIterator25.next();
        com.google.javascript.rhino.head.Node node31 = com.google.javascript.rhino.head.Node.newString((int) (byte) -1, "100");
        node27.putProp((int) (byte) 100, (java.lang.Object) (byte) -1);
        com.google.javascript.rhino.head.Node node33 = new com.google.javascript.rhino.head.Node((int) ' ', node11, node27);
        java.lang.String str34 = node33.toString();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "40" + "'", str4, "40");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "40" + "'", str15, "40");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNull(comment23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 40 + "'", int24 == 40);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "32" + "'", str34, "32");
    }

    @Test
    public void test1761() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1761");
        com.google.javascript.rhino.head.Node node2 = new com.google.javascript.rhino.head.Node(25, (int) (byte) 1);
        com.google.javascript.rhino.head.Node node5 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        com.google.javascript.rhino.head.Node node7 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str8 = node7.toString();
        boolean boolean9 = node7.hasConsistentReturnUsage();
        boolean boolean10 = node7.hasSideEffects();
        node5.addChildrenToFront(node7);
        com.google.javascript.rhino.head.Node node12 = node7.getLastSibling();
        int int15 = node12.getIntProp(100, (int) (byte) 1);
        com.google.javascript.rhino.head.Node node19 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str20 = node19.toString();
        boolean boolean21 = node19.hasConsistentReturnUsage();
        boolean boolean22 = node19.hasSideEffects();
        com.google.javascript.rhino.head.Node node23 = new com.google.javascript.rhino.head.Node(0, node19);
        com.google.javascript.rhino.head.Node node26 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str27 = node26.toString();
        boolean boolean28 = node26.hasConsistentReturnUsage();
        boolean boolean29 = node26.hasSideEffects();
        com.google.javascript.rhino.head.Node node31 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str32 = node31.toString();
        boolean boolean33 = node31.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node35 = com.google.javascript.rhino.head.Node.newString("");
        node35.removeProp(23);
        node31.addChildToFront(node35);
        com.google.javascript.rhino.head.Node node39 = node31.getFirstChild();
        com.google.javascript.rhino.head.ast.Comment comment40 = node31.getJsDocNode();
        node26.addChildToBack(node31);
        boolean boolean42 = node31.hasConsistentReturnUsage();
        node19.putProp((int) (short) 1, (java.lang.Object) node31);
        com.google.javascript.rhino.head.ast.Comment comment44 = null;
        node31.setJsDocNode(comment44);
        com.google.javascript.rhino.head.Node node47 = com.google.javascript.rhino.head.Node.newNumber((-1.0d));
        node47.putIntProp((int) (byte) -1, (int) (byte) 0);
        com.google.javascript.rhino.head.Node node52 = new com.google.javascript.rhino.head.Node(17, node31, node47, 41);
        com.google.javascript.rhino.head.Node node56 = com.google.javascript.rhino.head.Node.newString(23, "");
        com.google.javascript.rhino.head.Node node57 = node56.getLastSibling();
        com.google.javascript.rhino.head.Node node61 = com.google.javascript.rhino.head.Node.newString("hi!");
        com.google.javascript.rhino.head.Node node62 = new com.google.javascript.rhino.head.Node(13, node61);
        com.google.javascript.rhino.head.Node node65 = new com.google.javascript.rhino.head.Node(12);
        node65.putIntProp(14, 3);
        com.google.javascript.rhino.head.Node node69 = new com.google.javascript.rhino.head.Node(6, node65);
        com.google.javascript.rhino.head.Node node70 = node69.getLastChild();
        com.google.javascript.rhino.head.Node node72 = new com.google.javascript.rhino.head.Node((int) (byte) 100, node61, node69, 0);
        com.google.javascript.rhino.head.Node node75 = new com.google.javascript.rhino.head.Node((int) (byte) 1, 8);
        node75.putIntProp(20, 100);
        com.google.javascript.rhino.head.Node node79 = new com.google.javascript.rhino.head.Node(20, node57, node61, node75);
        java.lang.String str80 = node75.getJsDoc();
        com.google.javascript.rhino.head.Node node82 = node75.setType(24);
        com.google.javascript.rhino.head.Node node83 = new com.google.javascript.rhino.head.Node(15, node12, node47, node75);
        node2.addChildToBack(node83);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "40" + "'", str8, "40");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "40" + "'", str20, "40");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "40" + "'", str27, "40");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "40" + "'", str32, "40");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNull(comment40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertNull(str80);
        org.junit.Assert.assertNotNull(node82);
    }

    @Test
    public void test1762() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1762");
        com.google.javascript.rhino.head.Node node1 = com.google.javascript.rhino.head.Node.newNumber((double) 19);
        int int2 = node1.getType();
        boolean boolean3 = node1.hasConsistentReturnUsage();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 40 + "'", int2 == 40);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
    }

    @Test
    public void test1763() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1763");
        com.google.javascript.rhino.head.Node node2 = com.google.javascript.rhino.head.Node.newString(23, "");
        com.google.javascript.rhino.head.Node node3 = node2.getLastSibling();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator4 = node3.new NodeIterator();
        node3.setLineno(13);
        java.util.Spliterator<com.google.javascript.rhino.head.Node> nodeSpliterator7 = node3.spliterator();
        com.google.javascript.rhino.head.Node node9 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str10 = node9.toString();
        boolean boolean11 = node9.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node13 = com.google.javascript.rhino.head.Node.newString("");
        node13.removeProp(23);
        node9.addChildToFront(node13);
        com.google.javascript.rhino.head.Node node17 = node13.getLastChild();
        node13.setString("");
        com.google.javascript.rhino.head.Node node21 = node13.setType(25);
        node3.addChildrenToBack(node21);
        // The following exception was thrown during execution in test generation
        try {
            node21.setDouble((double) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: com.google.javascript.rhino.head.ast.Name cannot be cast to com.google.javascript.rhino.head.ast.NumberLiteral");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(nodeSpliterator7);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "40" + "'", str10, "40");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNull(node17);
        org.junit.Assert.assertNotNull(node21);
    }

    @Test
    public void test1764() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1764");
        com.google.javascript.rhino.head.Node node1 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str2 = node1.toString();
        boolean boolean3 = node1.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node5 = com.google.javascript.rhino.head.Node.newString("");
        node5.removeProp(23);
        node1.addChildToFront(node5);
        com.google.javascript.rhino.head.Node node10 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean11 = node10.hasChildren();
        node1.addChildrenToFront(node10);
        int int13 = node10.getLineno();
        node10.removeChildren();
        // The following exception was thrown during execution in test generation
        try {
            node10.setString("1");
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: com.google.javascript.rhino.head.ast.NumberLiteral cannot be cast to com.google.javascript.rhino.head.ast.Name");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "40" + "'", str2, "40");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
    }

    @Test
    public void test1765() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1765");
        com.google.javascript.rhino.head.Node node3 = new com.google.javascript.rhino.head.Node(21, 3);
        com.google.javascript.rhino.head.Node node5 = com.google.javascript.rhino.head.Node.newNumber((double) 0);
        com.google.javascript.rhino.head.ast.Comment comment6 = node5.getJsDocNode();
        com.google.javascript.rhino.head.Node node8 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        com.google.javascript.rhino.head.Node node10 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str11 = node10.toString();
        boolean boolean12 = node10.hasConsistentReturnUsage();
        boolean boolean13 = node10.hasSideEffects();
        node8.addChildrenToFront(node10);
        boolean boolean15 = node10.hasSideEffects();
        com.google.javascript.rhino.head.Node node16 = new com.google.javascript.rhino.head.Node((int) ' ', node3, node5, node10);
        com.google.javascript.rhino.head.ast.Comment comment17 = node16.getJsDocNode();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean18 = comment17.hasSideEffects();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNull(comment6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "40" + "'", str11, "40");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(comment17);
    }

    @Test
    public void test1766() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1766");
        com.google.javascript.rhino.head.Node node3 = com.google.javascript.rhino.head.Node.newString(12, "40");
        boolean boolean4 = node3.hasConsistentReturnUsage();
        int int7 = node3.getIntProp(15, 21);
        boolean boolean8 = node3.hasChildren();
        com.google.javascript.rhino.head.Node node10 = node3.setType(0);
        com.google.javascript.rhino.head.Node node13 = com.google.javascript.rhino.head.Node.newString("hi!");
        com.google.javascript.rhino.head.Node node16 = com.google.javascript.rhino.head.Node.newString(23, "");
        com.google.javascript.rhino.head.Node node17 = new com.google.javascript.rhino.head.Node(0, node13, node16);
        com.google.javascript.rhino.head.Node node20 = com.google.javascript.rhino.head.Node.newString((int) '#', "23");
        com.google.javascript.rhino.head.Node node22 = new com.google.javascript.rhino.head.Node(10, node10, node17, node20, 11);
        node20.removeProp(15);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 21 + "'", int7 == 21);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node20);
    }

    @Test
    public void test1767() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1767");
        com.google.javascript.rhino.head.Node node2 = new com.google.javascript.rhino.head.Node(5, 11);
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator3 = node2.new NodeIterator();
        boolean boolean4 = nodeIterator3.hasNext();
        // The following exception was thrown during execution in test generation
        try {
            nodeIterator3.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: next() has not been called");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test1768() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1768");
        com.google.javascript.rhino.head.Node node2 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        com.google.javascript.rhino.head.Node node4 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str5 = node4.toString();
        boolean boolean6 = node4.hasConsistentReturnUsage();
        boolean boolean7 = node4.hasSideEffects();
        node2.addChildrenToFront(node4);
        com.google.javascript.rhino.head.Node node9 = node4.getLastSibling();
        com.google.javascript.rhino.head.Node node10 = new com.google.javascript.rhino.head.Node((int) ' ', node4);
        java.util.Spliterator<com.google.javascript.rhino.head.Node> nodeSpliterator11 = node10.spliterator();
        com.google.javascript.rhino.head.Node node15 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str16 = node15.toString();
        boolean boolean17 = node15.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node19 = com.google.javascript.rhino.head.Node.newString("");
        node19.removeProp(23);
        node15.addChildToFront(node19);
        com.google.javascript.rhino.head.Node node23 = node15.getFirstChild();
        node23.setString("100");
        com.google.javascript.rhino.head.ast.Scope scope26 = node23.getScope();
        com.google.javascript.rhino.head.Node node28 = new com.google.javascript.rhino.head.Node((int) ' ', node23, 2);
        com.google.javascript.rhino.head.Node node31 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        com.google.javascript.rhino.head.Node node33 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str34 = node33.toString();
        boolean boolean35 = node33.hasConsistentReturnUsage();
        boolean boolean36 = node33.hasSideEffects();
        node31.addChildrenToFront(node33);
        node33.removeChildren();
        com.google.javascript.rhino.head.Node node40 = com.google.javascript.rhino.head.Node.newString("hi!");
        node33.addChildrenToBack(node40);
        int int44 = node40.getIntProp(0, 22);
        node23.putProp(15, (java.lang.Object) 22);
        com.google.javascript.rhino.head.Node node47 = new com.google.javascript.rhino.head.Node((int) (short) -1, node23, 2);
        node10.addChildToFront(node47);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "40" + "'", str5, "40");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(nodeSpliterator11);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "40" + "'", str16, "40");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNull(scope26);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "40" + "'", str34, "40");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 22 + "'", int44 == 22);
    }

    @Test
    public void test1769() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1769");
        com.google.javascript.rhino.head.Node node1 = com.google.javascript.rhino.head.Node.newString("100");
        node1.removeChildren();
        // The following exception was thrown during execution in test generation
        try {
            node1.labelId(7);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
    }

    @Test
    public void test1770() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1770");
        com.google.javascript.rhino.head.Node node1 = com.google.javascript.rhino.head.Node.newNumber(0.0d);
        com.google.javascript.rhino.head.Node node5 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str6 = node5.toString();
        boolean boolean7 = node5.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node9 = com.google.javascript.rhino.head.Node.newString("");
        node9.removeProp(23);
        node5.addChildToFront(node9);
        com.google.javascript.rhino.head.Node node14 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean15 = node14.hasChildren();
        node5.addChildrenToFront(node14);
        int int17 = node14.getLineno();
        com.google.javascript.rhino.head.Node node19 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str20 = node19.toString();
        boolean boolean21 = node19.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node23 = com.google.javascript.rhino.head.Node.newString("");
        node23.removeProp(23);
        node19.addChildToFront(node23);
        com.google.javascript.rhino.head.Node node27 = node19.getFirstChild();
        com.google.javascript.rhino.head.Node node29 = new com.google.javascript.rhino.head.Node((int) (short) 0, node14, node19, 9);
        boolean boolean30 = node14.hasSideEffects();
        com.google.javascript.rhino.head.Node node32 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        com.google.javascript.rhino.head.Node node34 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str35 = node34.toString();
        boolean boolean36 = node34.hasConsistentReturnUsage();
        boolean boolean37 = node34.hasSideEffects();
        node32.addChildrenToFront(node34);
        node34.removeChildren();
        com.google.javascript.rhino.head.Node node41 = com.google.javascript.rhino.head.Node.newString("hi!");
        node34.addChildrenToBack(node41);
        com.google.javascript.rhino.head.Node node44 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str45 = node44.toString();
        boolean boolean46 = node44.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node48 = com.google.javascript.rhino.head.Node.newString("");
        node48.removeProp(23);
        node44.addChildToFront(node48);
        com.google.javascript.rhino.head.Node node52 = node44.getFirstChild();
        com.google.javascript.rhino.head.Node node54 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        node52.addChildrenToBack(node54);
        com.google.javascript.rhino.head.Node node56 = new com.google.javascript.rhino.head.Node((int) (byte) 1, node14, node34, node54);
        node1.addChildToBack(node56);
        com.google.javascript.rhino.head.Node node58 = node56.getFirstChild();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "40" + "'", str6, "40");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "40" + "'", str20, "40");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "40" + "'", str35, "40");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "40" + "'", str45, "40");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertNotNull(node58);
    }

    @Test
    public void test1771() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1771");
        com.google.javascript.rhino.head.Node node4 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str5 = node4.toString();
        boolean boolean6 = node4.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node8 = com.google.javascript.rhino.head.Node.newString("");
        node8.removeProp(23);
        node4.addChildToFront(node8);
        com.google.javascript.rhino.head.Node node12 = node4.getFirstChild();
        node12.setString("100");
        com.google.javascript.rhino.head.ast.Scope scope15 = node12.getScope();
        com.google.javascript.rhino.head.Node node17 = new com.google.javascript.rhino.head.Node((int) ' ', node12, 2);
        com.google.javascript.rhino.head.Node node18 = node12.getLastSibling();
        com.google.javascript.rhino.head.Node node21 = com.google.javascript.rhino.head.Node.newString(23, "");
        com.google.javascript.rhino.head.Node node22 = node21.getLastSibling();
        com.google.javascript.rhino.head.Node node23 = new com.google.javascript.rhino.head.Node((int) ' ', node18, node21);
        node21.setLineno((int) (byte) 0);
        com.google.javascript.rhino.head.Node node26 = new com.google.javascript.rhino.head.Node(13, node21);
        com.google.javascript.rhino.head.Node node28 = node21.setType(2);
        node21.putIntProp(40, (int) (short) 100);
        com.google.javascript.rhino.head.Node node34 = com.google.javascript.rhino.head.Node.newString("");
        int int37 = node34.getIntProp(17, (int) (byte) -1);
        com.google.javascript.rhino.head.Node node38 = node34.getFirstChild();
        node21.putProp((int) 'a', (java.lang.Object) node34);
        com.google.javascript.rhino.head.Node node41 = node34.setType((int) ' ');
        // The following exception was thrown during execution in test generation
        try {
            node34.labelId(32);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "40" + "'", str5, "40");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNull(scope15);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertNull(node38);
        org.junit.Assert.assertNotNull(node41);
    }

    @Test
    public void test1772() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1772");
        com.google.javascript.rhino.head.Node node3 = com.google.javascript.rhino.head.Node.newString(23, "");
        com.google.javascript.rhino.head.Node node4 = node3.getLastSibling();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator5 = node4.new NodeIterator();
        node4.setLineno(13);
        java.util.Spliterator<com.google.javascript.rhino.head.Node> nodeSpliterator8 = node4.spliterator();
        com.google.javascript.rhino.head.Node node9 = new com.google.javascript.rhino.head.Node(97, node4);
        // The following exception was thrown during execution in test generation
        try {
            node9.labelId((int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(nodeSpliterator8);
    }

    @Test
    public void test1773() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1773");
        com.google.javascript.rhino.head.Node node2 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str3 = node2.toString();
        boolean boolean4 = node2.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node6 = com.google.javascript.rhino.head.Node.newString("");
        node6.removeProp(23);
        node2.addChildToFront(node6);
        com.google.javascript.rhino.head.Node node10 = node2.getFirstChild();
        com.google.javascript.rhino.head.ast.Comment comment11 = node2.getJsDocNode();
        int int12 = node2.getType();
        node2.setDouble((double) 17);
        com.google.javascript.rhino.head.Node node16 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str17 = node16.toString();
        boolean boolean18 = node16.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node20 = com.google.javascript.rhino.head.Node.newString("");
        node20.removeProp(23);
        node16.addChildToFront(node20);
        java.lang.String str24 = node20.getString();
        com.google.javascript.rhino.head.Node node27 = com.google.javascript.rhino.head.Node.newString((int) (short) 0, "-1");
        com.google.javascript.rhino.head.Node node29 = new com.google.javascript.rhino.head.Node(10, node2, node20, node27, 14);
        int int32 = node29.getIntProp(0, (-1));
        java.lang.String str33 = node29.getJsDoc();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "40" + "'", str3, "40");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNull(comment11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 40 + "'", int12 == 40);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "40" + "'", str17, "40");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertNull(str33);
    }

    @Test
    public void test1774() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1774");
        com.google.javascript.rhino.head.Node node1 = com.google.javascript.rhino.head.Node.newNumber((double) 97);
        org.junit.Assert.assertNotNull(node1);
    }

    @Test
    public void test1775() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1775");
        com.google.javascript.rhino.head.Node node3 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str4 = node3.toString();
        boolean boolean5 = node3.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node7 = com.google.javascript.rhino.head.Node.newString("");
        node7.removeProp(23);
        node3.addChildToFront(node7);
        com.google.javascript.rhino.head.Node node11 = new com.google.javascript.rhino.head.Node((int) 'a', node3);
        com.google.javascript.rhino.head.Node node13 = com.google.javascript.rhino.head.Node.newString("-1");
        com.google.javascript.rhino.head.Node node15 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str16 = node15.toString();
        com.google.javascript.rhino.head.Node node17 = node15.getLastChild();
        com.google.javascript.rhino.head.Node node19 = new com.google.javascript.rhino.head.Node((int) (short) -1, node3, node13, node15, (int) (short) -1);
        java.lang.Object obj21 = node3.getProp(0);
        int int22 = node3.getLineno();
        double double23 = node3.getDouble();
        java.lang.String str24 = node3.getJsDoc();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "40" + "'", str4, "40");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "40" + "'", str16, "40");
        org.junit.Assert.assertNull(node17);
        org.junit.Assert.assertNull(obj21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 32.0d + "'", double23 == 32.0d);
        org.junit.Assert.assertNull(str24);
    }

    @Test
    public void test1776() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1776");
        com.google.javascript.rhino.head.Node node1 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        com.google.javascript.rhino.head.Node node2 = node1.getLastSibling();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator3 = node2.new NodeIterator();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.head.Node node4 = nodeIterator3.next();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNotNull(node2);
    }

    @Test
    public void test1777() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1777");
        com.google.javascript.rhino.head.Node node2 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str3 = node2.toString();
        boolean boolean4 = node2.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node6 = com.google.javascript.rhino.head.Node.newString("");
        node6.removeProp(23);
        node2.addChildToFront(node6);
        com.google.javascript.rhino.head.Node node10 = node2.getFirstChild();
        node10.setString("100");
        com.google.javascript.rhino.head.ast.Scope scope13 = node10.getScope();
        com.google.javascript.rhino.head.Node node15 = new com.google.javascript.rhino.head.Node((int) ' ', node10, 2);
        boolean boolean16 = node15.hasChildren();
        com.google.javascript.rhino.head.Node node19 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str20 = node19.toString();
        boolean boolean21 = node19.hasConsistentReturnUsage();
        boolean boolean22 = node19.hasSideEffects();
        com.google.javascript.rhino.head.Node node23 = new com.google.javascript.rhino.head.Node(0, node19);
        int int24 = node19.getLineno();
        node15.addChildToFront(node19);
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator26 = node15.new NodeIterator();
        com.google.javascript.rhino.head.Node node27 = nodeIterator26.next();
        boolean boolean28 = nodeIterator26.hasNext();
        boolean boolean29 = nodeIterator26.hasNext();
        nodeIterator26.remove();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "40" + "'", str3, "40");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNull(scope13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "40" + "'", str20, "40");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
    }

    @Test
    public void test1778() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1778");
        com.google.javascript.rhino.head.Node node3 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str4 = node3.toString();
        boolean boolean5 = node3.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node7 = com.google.javascript.rhino.head.Node.newString("");
        node7.removeProp(23);
        node3.addChildToFront(node7);
        com.google.javascript.rhino.head.Node node12 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean13 = node12.hasChildren();
        node3.addChildrenToFront(node12);
        int int15 = node12.getLineno();
        com.google.javascript.rhino.head.Node node17 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str18 = node17.toString();
        boolean boolean19 = node17.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node21 = com.google.javascript.rhino.head.Node.newString("");
        node21.removeProp(23);
        node17.addChildToFront(node21);
        com.google.javascript.rhino.head.Node node25 = node17.getFirstChild();
        com.google.javascript.rhino.head.Node node27 = new com.google.javascript.rhino.head.Node((int) (short) 0, node12, node17, 9);
        com.google.javascript.rhino.head.Node node31 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str32 = node31.toString();
        boolean boolean33 = node31.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node35 = com.google.javascript.rhino.head.Node.newString("");
        node35.removeProp(23);
        node31.addChildToFront(node35);
        com.google.javascript.rhino.head.Node node39 = new com.google.javascript.rhino.head.Node((int) 'a', node31);
        com.google.javascript.rhino.head.Node node41 = com.google.javascript.rhino.head.Node.newString("-1");
        com.google.javascript.rhino.head.Node node43 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str44 = node43.toString();
        com.google.javascript.rhino.head.Node node45 = node43.getLastChild();
        com.google.javascript.rhino.head.Node node47 = new com.google.javascript.rhino.head.Node((int) (short) -1, node31, node41, node43, (int) (short) -1);
        com.google.javascript.rhino.head.Node node49 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str50 = node49.toString();
        boolean boolean51 = node49.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node53 = com.google.javascript.rhino.head.Node.newString("");
        node53.removeProp(23);
        node49.addChildToFront(node53);
        com.google.javascript.rhino.head.Node node57 = node49.getFirstChild();
        com.google.javascript.rhino.head.Node node59 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        node57.addChildrenToBack(node59);
        com.google.javascript.rhino.head.Node node61 = node59.getLastChild();
        java.lang.String str62 = node59.getJsDoc();
        java.lang.Object obj64 = node59.getProp(0);
        com.google.javascript.rhino.head.Node node65 = new com.google.javascript.rhino.head.Node(3, node12, node31, node59);
        com.google.javascript.rhino.head.Node node66 = node59.getLastSibling();
        node59.removeProp(40);
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.head.ast.Scope scope69 = node59.getScope();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: com.google.javascript.rhino.head.Node cannot be cast to com.google.javascript.rhino.head.ast.Name");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "40" + "'", str4, "40");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "40" + "'", str18, "40");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "40" + "'", str32, "40");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "40" + "'", str44, "40");
        org.junit.Assert.assertNull(node45);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "40" + "'", str50, "40");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertNull(node61);
        org.junit.Assert.assertNull(str62);
        org.junit.Assert.assertNull(obj64);
        org.junit.Assert.assertNotNull(node66);
    }

    @Test
    public void test1779() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1779");
        com.google.javascript.rhino.head.Node node3 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str4 = node3.toString();
        boolean boolean5 = node3.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node7 = com.google.javascript.rhino.head.Node.newString("");
        node7.removeProp(23);
        node3.addChildToFront(node7);
        com.google.javascript.rhino.head.Node node11 = node3.getFirstChild();
        node11.setString("100");
        com.google.javascript.rhino.head.ast.Scope scope14 = node11.getScope();
        com.google.javascript.rhino.head.Node node16 = new com.google.javascript.rhino.head.Node((int) ' ', node11, 2);
        com.google.javascript.rhino.head.Node node19 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        com.google.javascript.rhino.head.Node node21 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str22 = node21.toString();
        boolean boolean23 = node21.hasConsistentReturnUsage();
        boolean boolean24 = node21.hasSideEffects();
        node19.addChildrenToFront(node21);
        node21.removeChildren();
        com.google.javascript.rhino.head.Node node28 = com.google.javascript.rhino.head.Node.newString("hi!");
        node21.addChildrenToBack(node28);
        int int32 = node28.getIntProp(0, 22);
        node11.putProp(15, (java.lang.Object) 22);
        com.google.javascript.rhino.head.Node node35 = new com.google.javascript.rhino.head.Node((int) (short) -1, node11, 2);
        com.google.javascript.rhino.head.Node node37 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean38 = node37.hasSideEffects();
        com.google.javascript.rhino.head.Node node40 = node37.setType(3);
        node35.addChildToFront(node37);
        double double42 = node37.getDouble();
        node37.putIntProp((int) (short) -1, 10);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "40" + "'", str4, "40");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNull(scope14);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "40" + "'", str22, "40");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 22 + "'", int32 == 22);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 32.0d + "'", double42 == 32.0d);
    }

    @Test
    public void test1780() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1780");
        com.google.javascript.rhino.head.Node node2 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str3 = node2.toString();
        boolean boolean4 = node2.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node6 = com.google.javascript.rhino.head.Node.newString("");
        node6.removeProp(23);
        node2.addChildToFront(node6);
        com.google.javascript.rhino.head.Node node10 = node2.getFirstChild();
        com.google.javascript.rhino.head.ast.Comment comment11 = node2.getJsDocNode();
        int int12 = node2.getType();
        node2.setDouble((double) 17);
        com.google.javascript.rhino.head.Node node16 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str17 = node16.toString();
        boolean boolean18 = node16.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node20 = com.google.javascript.rhino.head.Node.newString("");
        node20.removeProp(23);
        node16.addChildToFront(node20);
        java.lang.String str24 = node20.getString();
        com.google.javascript.rhino.head.Node node27 = com.google.javascript.rhino.head.Node.newString((int) (short) 0, "-1");
        com.google.javascript.rhino.head.Node node29 = new com.google.javascript.rhino.head.Node(10, node2, node20, node27, 14);
        com.google.javascript.rhino.head.Node node32 = new com.google.javascript.rhino.head.Node(97, (int) (byte) 100);
        // The following exception was thrown during execution in test generation
        try {
            node29.removeChild(node32);
            org.junit.Assert.fail("Expected exception of type java.lang.RuntimeException; message: node is not a child");
        } catch (java.lang.RuntimeException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "40" + "'", str3, "40");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNull(comment11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 40 + "'", int12 == 40);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "40" + "'", str17, "40");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(node27);
    }

    @Test
    public void test1781() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1781");
        com.google.javascript.rhino.head.Node node1 = com.google.javascript.rhino.head.Node.newString("-1");
        node1.removeProp(25);
        com.google.javascript.rhino.head.Node node5 = com.google.javascript.rhino.head.Node.newString("");
        int int8 = node5.getIntProp(17, (int) (byte) -1);
        com.google.javascript.rhino.head.Node node11 = new com.google.javascript.rhino.head.Node(40, 8);
        com.google.javascript.rhino.head.Node node14 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str15 = node14.toString();
        boolean boolean16 = node14.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node18 = com.google.javascript.rhino.head.Node.newString("");
        node18.removeProp(23);
        node14.addChildToFront(node18);
        com.google.javascript.rhino.head.Node node22 = node14.getFirstChild();
        com.google.javascript.rhino.head.Node node24 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        node22.addChildrenToBack(node24);
        com.google.javascript.rhino.head.Node node27 = com.google.javascript.rhino.head.Node.newString("");
        int int30 = node27.getIntProp(17, (int) (byte) -1);
        com.google.javascript.rhino.head.Node node31 = new com.google.javascript.rhino.head.Node((int) (short) 10, node22, node27);
        com.google.javascript.rhino.head.Node node33 = node22.setType(18);
        node5.addChildAfter(node11, node33);
        node1.addChildToFront(node33);
        com.google.javascript.rhino.head.Node node39 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str40 = node39.toString();
        boolean boolean41 = node39.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node43 = com.google.javascript.rhino.head.Node.newString("");
        node43.removeProp(23);
        node39.addChildToFront(node43);
        com.google.javascript.rhino.head.Node node48 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean49 = node48.hasChildren();
        node39.addChildrenToFront(node48);
        com.google.javascript.rhino.head.Node node52 = new com.google.javascript.rhino.head.Node((int) (byte) -1);
        java.lang.String str53 = node52.toString();
        boolean boolean54 = node52.hasChildren();
        com.google.javascript.rhino.head.Node node56 = new com.google.javascript.rhino.head.Node((int) (short) -1, node48, node52, (int) (short) 10);
        com.google.javascript.rhino.head.Node node57 = node56.getLastChild();
        com.google.javascript.rhino.head.Node node62 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str63 = node62.toString();
        boolean boolean64 = node62.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node66 = com.google.javascript.rhino.head.Node.newString("");
        node66.removeProp(23);
        node62.addChildToFront(node66);
        com.google.javascript.rhino.head.Node node70 = new com.google.javascript.rhino.head.Node((int) 'a', node62);
        com.google.javascript.rhino.head.Node node72 = com.google.javascript.rhino.head.Node.newString("-1");
        com.google.javascript.rhino.head.Node node74 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str75 = node74.toString();
        com.google.javascript.rhino.head.Node node76 = node74.getLastChild();
        com.google.javascript.rhino.head.Node node78 = new com.google.javascript.rhino.head.Node((int) (short) -1, node62, node72, node74, (int) (short) -1);
        com.google.javascript.rhino.head.Node node80 = new com.google.javascript.rhino.head.Node((int) (short) 1, node74, 12);
        com.google.javascript.rhino.head.Node node82 = new com.google.javascript.rhino.head.Node(23);
        node82.removeProp(25);
        boolean boolean85 = node82.hasChildren();
        com.google.javascript.rhino.head.Node node86 = new com.google.javascript.rhino.head.Node((-1), node57, node74, node82);
        node1.addChildrenToFront(node74);
        boolean boolean88 = node74.hasSideEffects();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "40" + "'", str15, "40");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "40" + "'", str40, "40");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "-1" + "'", str53, "-1");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "40" + "'", str63, "40");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "40" + "'", str75, "40");
        org.junit.Assert.assertNull(node76);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
    }

    @Test
    public void test1782() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1782");
        com.google.javascript.rhino.head.Node node2 = new com.google.javascript.rhino.head.Node(23, 22);
        com.google.javascript.rhino.head.ast.Scope scope3 = null;
        // The following exception was thrown during execution in test generation
        try {
            node2.setScope(scope3);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1783() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1783");
        com.google.javascript.rhino.head.Node node2 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        com.google.javascript.rhino.head.Node node4 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str5 = node4.toString();
        boolean boolean6 = node4.hasConsistentReturnUsage();
        boolean boolean7 = node4.hasSideEffects();
        node2.addChildrenToFront(node4);
        com.google.javascript.rhino.head.Node node9 = node4.getLastSibling();
        int int10 = node4.getLineno();
        com.google.javascript.rhino.head.Node node12 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str13 = node12.toString();
        boolean boolean14 = node12.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node16 = com.google.javascript.rhino.head.Node.newString("");
        node16.removeProp(23);
        node12.addChildToFront(node16);
        com.google.javascript.rhino.head.Node node21 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean22 = node21.hasChildren();
        node12.addChildrenToFront(node21);
        int int24 = node21.getLineno();
        com.google.javascript.rhino.head.Node node26 = new com.google.javascript.rhino.head.Node((int) (byte) 1);
        node26.removeProp((int) (short) 10);
        com.google.javascript.rhino.head.Node node30 = new com.google.javascript.rhino.head.Node((int) (short) 10, node4, node21, node26, 0);
        node30.removeChildren();
        java.lang.Class<?> wildcardClass32 = node30.getClass();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "40" + "'", str5, "40");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "40" + "'", str13, "40");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass32);
    }

    @Test
    public void test1784() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1784");
        com.google.javascript.rhino.head.Node node2 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str3 = node2.toString();
        boolean boolean4 = node2.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node6 = com.google.javascript.rhino.head.Node.newString("");
        node6.removeProp(23);
        node2.addChildToFront(node6);
        com.google.javascript.rhino.head.Node node10 = node2.getFirstChild();
        node10.setString("100");
        com.google.javascript.rhino.head.ast.Scope scope13 = node10.getScope();
        com.google.javascript.rhino.head.Node node15 = new com.google.javascript.rhino.head.Node((int) ' ', node10, 2);
        boolean boolean16 = node15.hasChildren();
        com.google.javascript.rhino.head.Node node19 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str20 = node19.toString();
        boolean boolean21 = node19.hasConsistentReturnUsage();
        boolean boolean22 = node19.hasSideEffects();
        com.google.javascript.rhino.head.Node node23 = new com.google.javascript.rhino.head.Node(0, node19);
        int int24 = node19.getLineno();
        node15.addChildToFront(node19);
        boolean boolean26 = node19.hasSideEffects();
        boolean boolean27 = node19.hasChildren();
        node19.setLineno((int) (short) 1);
        double double30 = node19.getDouble();
        com.google.javascript.rhino.head.Node node33 = com.google.javascript.rhino.head.Node.newString("-1");
        com.google.javascript.rhino.head.Node node37 = com.google.javascript.rhino.head.Node.newString("hi!");
        com.google.javascript.rhino.head.Node node38 = new com.google.javascript.rhino.head.Node(13, node37);
        com.google.javascript.rhino.head.Node node41 = new com.google.javascript.rhino.head.Node(12);
        node41.putIntProp(14, 3);
        com.google.javascript.rhino.head.Node node45 = new com.google.javascript.rhino.head.Node(6, node41);
        com.google.javascript.rhino.head.Node node46 = node45.getLastChild();
        com.google.javascript.rhino.head.Node node48 = new com.google.javascript.rhino.head.Node((int) (byte) 100, node37, node45, 0);
        com.google.javascript.rhino.head.Node node49 = new com.google.javascript.rhino.head.Node(17, node33, node48);
        com.google.javascript.rhino.head.Node node50 = node49.getLastSibling();
        node49.putIntProp((int) (byte) 100, (int) (byte) 0);
        node19.addChildToFront(node49);
        java.lang.String str55 = node19.toString();
        com.google.javascript.rhino.head.ast.Scope scope56 = null;
        // The following exception was thrown during execution in test generation
        try {
            node19.setScope(scope56);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "40" + "'", str3, "40");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNull(scope13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "40" + "'", str20, "40");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 32.0d + "'", double30 == 32.0d);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "40" + "'", str55, "40");
    }

    @Test
    public void test1785() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1785");
        com.google.javascript.rhino.head.Node node2 = com.google.javascript.rhino.head.Node.newNumber((double) 7);
        node2.putIntProp(0, 18);
        com.google.javascript.rhino.head.Node node6 = new com.google.javascript.rhino.head.Node(0, node2);
        node6.putIntProp(14, 13);
        java.util.Spliterator<com.google.javascript.rhino.head.Node> nodeSpliterator10 = node6.spliterator();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(nodeSpliterator10);
    }

    @Test
    public void test1786() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1786");
        com.google.javascript.rhino.head.Node node2 = com.google.javascript.rhino.head.Node.newString(5, "");
        int int3 = node2.getType();
        int int4 = node2.getType();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 5 + "'", int3 == 5);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 5 + "'", int4 == 5);
    }

    @Test
    public void test1787() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1787");
        com.google.javascript.rhino.head.Node node2 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str3 = node2.toString();
        boolean boolean4 = node2.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node6 = com.google.javascript.rhino.head.Node.newString("");
        node6.removeProp(23);
        node2.addChildToFront(node6);
        com.google.javascript.rhino.head.Node node10 = node2.getFirstChild();
        node10.setString("100");
        com.google.javascript.rhino.head.ast.Scope scope13 = node10.getScope();
        com.google.javascript.rhino.head.Node node15 = new com.google.javascript.rhino.head.Node((int) ' ', node10, 2);
        java.util.Spliterator<com.google.javascript.rhino.head.Node> nodeSpliterator16 = node10.spliterator();
        com.google.javascript.rhino.head.Node node19 = new com.google.javascript.rhino.head.Node((int) (byte) -1);
        java.lang.String str20 = node19.toString();
        com.google.javascript.rhino.head.ast.Comment comment21 = node19.getJsDocNode();
        node10.putProp((int) '#', (java.lang.Object) node19);
        com.google.javascript.rhino.head.Node node26 = com.google.javascript.rhino.head.Node.newNumber((double) 0L);
        com.google.javascript.rhino.head.Node node29 = com.google.javascript.rhino.head.Node.newString((int) '4', "hi!");
        com.google.javascript.rhino.head.Node node31 = new com.google.javascript.rhino.head.Node((int) (byte) -1);
        java.lang.String str32 = node31.toString();
        com.google.javascript.rhino.head.Node node33 = node31.getFirstChild();
        com.google.javascript.rhino.head.Node node36 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str37 = node36.toString();
        boolean boolean38 = node36.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node40 = com.google.javascript.rhino.head.Node.newString("");
        node40.removeProp(23);
        node36.addChildToFront(node40);
        com.google.javascript.rhino.head.Node node45 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean46 = node45.hasChildren();
        node36.addChildrenToFront(node45);
        int int48 = node45.getLineno();
        com.google.javascript.rhino.head.Node node50 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str51 = node50.toString();
        boolean boolean52 = node50.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node54 = com.google.javascript.rhino.head.Node.newString("");
        node54.removeProp(23);
        node50.addChildToFront(node54);
        com.google.javascript.rhino.head.Node node58 = node50.getFirstChild();
        com.google.javascript.rhino.head.Node node60 = new com.google.javascript.rhino.head.Node((int) (short) 0, node45, node50, 9);
        node31.addChildrenToFront(node60);
        com.google.javascript.rhino.head.Node node63 = new com.google.javascript.rhino.head.Node(100, node26, node29, node31, (int) ' ');
        com.google.javascript.rhino.head.Node node64 = node31.getLastSibling();
        com.google.javascript.rhino.head.Node node65 = new com.google.javascript.rhino.head.Node(21, node64);
        node10.addChildToFront(node65);
        node10.setString("");
        java.lang.Object obj70 = node10.getProp(52);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "40" + "'", str3, "40");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNull(scope13);
        org.junit.Assert.assertNotNull(nodeSpliterator16);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "-1" + "'", str20, "-1");
        org.junit.Assert.assertNull(comment21);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "-1" + "'", str32, "-1");
        org.junit.Assert.assertNull(node33);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "40" + "'", str37, "40");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "40" + "'", str51, "40");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertNull(obj70);
    }

    @Test
    public void test1788() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1788");
        com.google.javascript.rhino.head.Node node2 = new com.google.javascript.rhino.head.Node(23);
        com.google.javascript.rhino.head.Node node5 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str6 = node5.toString();
        boolean boolean7 = node5.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node9 = com.google.javascript.rhino.head.Node.newString("");
        node9.removeProp(23);
        node5.addChildToFront(node9);
        node2.putProp((int) ' ', (java.lang.Object) node9);
        com.google.javascript.rhino.head.ast.Comment comment14 = node2.getJsDocNode();
        com.google.javascript.rhino.head.Node node15 = new com.google.javascript.rhino.head.Node((int) (byte) 1, node2);
        java.lang.Object obj17 = node2.getProp(15);
        com.google.javascript.rhino.head.Node node18 = node2.getLastChild();
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "40" + "'", str6, "40");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNull(comment14);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertNull(node18);
    }

    @Test
    public void test1789() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1789");
        com.google.javascript.rhino.head.Node node3 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        com.google.javascript.rhino.head.Node node5 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str6 = node5.toString();
        boolean boolean7 = node5.hasConsistentReturnUsage();
        boolean boolean8 = node5.hasSideEffects();
        node3.addChildrenToFront(node5);
        com.google.javascript.rhino.head.Node node10 = node5.getLastSibling();
        int int11 = node5.getLineno();
        com.google.javascript.rhino.head.Node node13 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str14 = node13.toString();
        boolean boolean15 = node13.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node17 = com.google.javascript.rhino.head.Node.newString("");
        node17.removeProp(23);
        node13.addChildToFront(node17);
        com.google.javascript.rhino.head.Node node22 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean23 = node22.hasChildren();
        node13.addChildrenToFront(node22);
        int int25 = node22.getLineno();
        com.google.javascript.rhino.head.Node node27 = new com.google.javascript.rhino.head.Node((int) (byte) 1);
        node27.removeProp((int) (short) 10);
        com.google.javascript.rhino.head.Node node31 = new com.google.javascript.rhino.head.Node((int) (short) 10, node5, node22, node27, 0);
        java.lang.Object obj33 = node5.getProp((int) (byte) 1);
        com.google.javascript.rhino.head.Node node36 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str37 = node36.toString();
        boolean boolean38 = node36.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node40 = com.google.javascript.rhino.head.Node.newString("");
        node40.removeProp(23);
        node36.addChildToFront(node40);
        com.google.javascript.rhino.head.Node node45 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean46 = node45.hasChildren();
        node36.addChildrenToFront(node45);
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator48 = node45.new NodeIterator();
        com.google.javascript.rhino.head.Node node50 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str51 = node50.toString();
        com.google.javascript.rhino.head.Node node52 = node50.getLastSibling();
        com.google.javascript.rhino.head.Node node55 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str56 = node55.toString();
        boolean boolean57 = node55.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node59 = com.google.javascript.rhino.head.Node.newString("");
        node59.removeProp(23);
        node55.addChildToFront(node59);
        com.google.javascript.rhino.head.Node node63 = node55.getFirstChild();
        node63.setString("100");
        com.google.javascript.rhino.head.ast.Scope scope66 = node63.getScope();
        com.google.javascript.rhino.head.Node node68 = new com.google.javascript.rhino.head.Node((int) ' ', node63, 2);
        com.google.javascript.rhino.head.Node node69 = node63.getLastSibling();
        node52.addChildToFront(node69);
        node45.addChildrenToFront(node52);
        int int74 = node52.getIntProp(0, (int) ' ');
        int int77 = node52.getIntProp(14, 6);
        com.google.javascript.rhino.head.Node node79 = new com.google.javascript.rhino.head.Node(18, node52, (int) (short) 10);
        com.google.javascript.rhino.head.Node node81 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        com.google.javascript.rhino.head.Node node83 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str84 = node83.toString();
        boolean boolean85 = node83.hasConsistentReturnUsage();
        boolean boolean86 = node83.hasSideEffects();
        node81.addChildrenToFront(node83);
        node83.removeChildren();
        com.google.javascript.rhino.head.Node node90 = com.google.javascript.rhino.head.Node.newString("hi!");
        node83.addChildrenToBack(node90);
        boolean boolean92 = node83.hasSideEffects();
        com.google.javascript.rhino.head.Node node93 = node83.getFirstChild();
        boolean boolean94 = node83.hasSideEffects();
        com.google.javascript.rhino.head.Node node96 = new com.google.javascript.rhino.head.Node(0, node5, node52, node83, (int) '#');
        com.google.javascript.rhino.head.Node node97 = node52.getLastChild();
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "40" + "'", str6, "40");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "40" + "'", str14, "40");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertNull(obj33);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "40" + "'", str37, "40");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "40" + "'", str51, "40");
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "40" + "'", str56, "40");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertNull(scope66);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 32 + "'", int74 == 32);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 6 + "'", int77 == 6);
        org.junit.Assert.assertNotNull(node83);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "40" + "'", str84, "40");
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(node90);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertNotNull(node93);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertNotNull(node97);
    }

    @Test
    public void test1790() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1790");
        com.google.javascript.rhino.head.Node node3 = new com.google.javascript.rhino.head.Node(24);
        com.google.javascript.rhino.head.Node node5 = new com.google.javascript.rhino.head.Node(97, node3, 41);
        com.google.javascript.rhino.head.Node node7 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        com.google.javascript.rhino.head.Node node8 = node7.getLastSibling();
        boolean boolean9 = node8.hasSideEffects();
        com.google.javascript.rhino.head.Node node12 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean13 = node12.hasChildren();
        com.google.javascript.rhino.head.Node node14 = node12.getLastSibling();
        com.google.javascript.rhino.head.Node node18 = com.google.javascript.rhino.head.Node.newString(23, "");
        com.google.javascript.rhino.head.Node node19 = node18.getLastSibling();
        com.google.javascript.rhino.head.Node node23 = com.google.javascript.rhino.head.Node.newString("hi!");
        com.google.javascript.rhino.head.Node node24 = new com.google.javascript.rhino.head.Node(13, node23);
        com.google.javascript.rhino.head.Node node27 = new com.google.javascript.rhino.head.Node(12);
        node27.putIntProp(14, 3);
        com.google.javascript.rhino.head.Node node31 = new com.google.javascript.rhino.head.Node(6, node27);
        com.google.javascript.rhino.head.Node node32 = node31.getLastChild();
        com.google.javascript.rhino.head.Node node34 = new com.google.javascript.rhino.head.Node((int) (byte) 100, node23, node31, 0);
        com.google.javascript.rhino.head.Node node37 = new com.google.javascript.rhino.head.Node((int) (byte) 1, 8);
        node37.putIntProp(20, 100);
        com.google.javascript.rhino.head.Node node41 = new com.google.javascript.rhino.head.Node(20, node19, node23, node37);
        com.google.javascript.rhino.head.Node node44 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str45 = node44.toString();
        boolean boolean46 = node44.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node48 = com.google.javascript.rhino.head.Node.newString("");
        node48.removeProp(23);
        node44.addChildToFront(node48);
        com.google.javascript.rhino.head.Node node52 = new com.google.javascript.rhino.head.Node((int) 'a', node44);
        com.google.javascript.rhino.head.Node node56 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str57 = node56.toString();
        boolean boolean58 = node56.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node60 = com.google.javascript.rhino.head.Node.newString("");
        node60.removeProp(23);
        node56.addChildToFront(node60);
        com.google.javascript.rhino.head.Node node64 = node56.getFirstChild();
        node64.setString("100");
        com.google.javascript.rhino.head.ast.Scope scope67 = node64.getScope();
        com.google.javascript.rhino.head.Node node69 = new com.google.javascript.rhino.head.Node((int) ' ', node64, 2);
        com.google.javascript.rhino.head.Node node70 = node64.getLastSibling();
        com.google.javascript.rhino.head.Node node73 = com.google.javascript.rhino.head.Node.newString(23, "");
        com.google.javascript.rhino.head.Node node74 = node73.getLastSibling();
        com.google.javascript.rhino.head.Node node75 = new com.google.javascript.rhino.head.Node((int) ' ', node70, node73);
        node44.addChildrenToFront(node75);
        com.google.javascript.rhino.head.Node node78 = new com.google.javascript.rhino.head.Node(24, node14, node41, node75, (int) (short) -1);
        node8.addChildToFront(node41);
        java.util.Spliterator<com.google.javascript.rhino.head.Node> nodeSpliterator80 = node41.spliterator();
        com.google.javascript.rhino.head.Node node81 = new com.google.javascript.rhino.head.Node(8, node5, node41);
        java.lang.Class<?> wildcardClass82 = node5.getClass();
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "40" + "'", str45, "40");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "40" + "'", str57, "40");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertNull(scope67);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertNotNull(nodeSpliterator80);
        org.junit.Assert.assertNotNull(wildcardClass82);
    }

    @Test
    public void test1791() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1791");
        com.google.javascript.rhino.head.Node node3 = com.google.javascript.rhino.head.Node.newString("hi!");
        com.google.javascript.rhino.head.Node node4 = new com.google.javascript.rhino.head.Node(13, node3);
        com.google.javascript.rhino.head.Node node7 = new com.google.javascript.rhino.head.Node(12);
        node7.putIntProp(14, 3);
        com.google.javascript.rhino.head.Node node11 = new com.google.javascript.rhino.head.Node(6, node7);
        com.google.javascript.rhino.head.Node node12 = node11.getLastChild();
        com.google.javascript.rhino.head.Node node14 = new com.google.javascript.rhino.head.Node((int) (byte) 100, node3, node11, 0);
        com.google.javascript.rhino.head.Node node16 = com.google.javascript.rhino.head.Node.newNumber((double) 1.0f);
        node11.addChildrenToFront(node16);
        int int18 = node11.getLineno();
        com.google.javascript.rhino.head.Node node21 = com.google.javascript.rhino.head.Node.newNumber((double) 19);
        com.google.javascript.rhino.head.Node node24 = com.google.javascript.rhino.head.Node.newString("");
        node24.removeProp(23);
        com.google.javascript.rhino.head.Node node29 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str30 = node29.toString();
        boolean boolean31 = node29.hasConsistentReturnUsage();
        boolean boolean32 = node29.hasSideEffects();
        com.google.javascript.rhino.head.Node node33 = new com.google.javascript.rhino.head.Node(0, node29);
        node24.addChildrenToBack(node33);
        com.google.javascript.rhino.head.Node node35 = new com.google.javascript.rhino.head.Node(9, node24);
        com.google.javascript.rhino.head.Node node39 = com.google.javascript.rhino.head.Node.newString("hi!");
        com.google.javascript.rhino.head.Node node40 = new com.google.javascript.rhino.head.Node(13, node39);
        com.google.javascript.rhino.head.Node node41 = new com.google.javascript.rhino.head.Node(7, node39);
        com.google.javascript.rhino.head.Node node43 = new com.google.javascript.rhino.head.Node((int) 'a', node21, node35, node39, (int) (short) 1);
        node11.addChildrenToBack(node43);
        com.google.javascript.rhino.head.Node node46 = new com.google.javascript.rhino.head.Node((int) (byte) 1);
        java.lang.Object obj48 = node46.getProp(22);
        node43.addChildrenToFront(node46);
        // The following exception was thrown during execution in test generation
        try {
            double double50 = node43.getDouble();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: com.google.javascript.rhino.head.Node cannot be cast to com.google.javascript.rhino.head.ast.NumberLiteral");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "40" + "'", str30, "40");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNull(obj48);
    }

    @Test
    public void test1792() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1792");
        com.google.javascript.rhino.head.Node node3 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str4 = node3.toString();
        boolean boolean5 = node3.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node7 = com.google.javascript.rhino.head.Node.newString("");
        node7.removeProp(23);
        node3.addChildToFront(node7);
        com.google.javascript.rhino.head.Node node11 = node3.getFirstChild();
        node11.setString("100");
        com.google.javascript.rhino.head.ast.Scope scope14 = node11.getScope();
        com.google.javascript.rhino.head.Node node16 = new com.google.javascript.rhino.head.Node((int) ' ', node11, 2);
        com.google.javascript.rhino.head.Node node17 = node11.getLastSibling();
        com.google.javascript.rhino.head.Node node18 = node11.getLastSibling();
        java.util.Spliterator<com.google.javascript.rhino.head.Node> nodeSpliterator19 = node11.spliterator();
        com.google.javascript.rhino.head.Node node21 = new com.google.javascript.rhino.head.Node(9, node11, 10);
        int int22 = node11.getLineno();
        com.google.javascript.rhino.head.Node node24 = com.google.javascript.rhino.head.Node.newString("");
        node24.removeProp(23);
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor27 = node24.iterator();
        java.lang.Object obj29 = node24.getProp((int) (byte) 1);
        com.google.javascript.rhino.head.Node node31 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        java.lang.String str32 = node31.toString();
        com.google.javascript.rhino.head.Node node33 = node31.getNext();
        // The following exception was thrown during execution in test generation
        try {
            node11.replaceChildAfter(node24, node33);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "40" + "'", str4, "40");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNull(scope14);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(nodeSpliterator19);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(nodeItor27);
        org.junit.Assert.assertNull(obj29);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "100" + "'", str32, "100");
        org.junit.Assert.assertNull(node33);
    }

    @Test
    public void test1793() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1793");
        com.google.javascript.rhino.head.Node node4 = com.google.javascript.rhino.head.Node.newString("hi!");
        com.google.javascript.rhino.head.Node node5 = new com.google.javascript.rhino.head.Node(13, node4);
        com.google.javascript.rhino.head.Node node8 = new com.google.javascript.rhino.head.Node(12);
        node8.putIntProp(14, 3);
        com.google.javascript.rhino.head.Node node12 = new com.google.javascript.rhino.head.Node(6, node8);
        com.google.javascript.rhino.head.Node node13 = node12.getLastChild();
        com.google.javascript.rhino.head.Node node15 = new com.google.javascript.rhino.head.Node((int) (byte) 100, node4, node12, 0);
        com.google.javascript.rhino.head.Node node17 = com.google.javascript.rhino.head.Node.newNumber((double) 1.0f);
        node12.addChildrenToFront(node17);
        com.google.javascript.rhino.head.Node node22 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str23 = node22.toString();
        boolean boolean24 = node22.hasConsistentReturnUsage();
        boolean boolean25 = node22.hasSideEffects();
        com.google.javascript.rhino.head.Node node26 = new com.google.javascript.rhino.head.Node(0, node22);
        com.google.javascript.rhino.head.Node node29 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str30 = node29.toString();
        boolean boolean31 = node29.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node33 = com.google.javascript.rhino.head.Node.newString("");
        node33.removeProp(23);
        node29.addChildToFront(node33);
        com.google.javascript.rhino.head.Node node38 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean39 = node38.hasChildren();
        node29.addChildrenToFront(node38);
        com.google.javascript.rhino.head.Node node42 = new com.google.javascript.rhino.head.Node((int) (byte) -1);
        java.lang.String str43 = node42.toString();
        boolean boolean44 = node42.hasChildren();
        com.google.javascript.rhino.head.Node node46 = new com.google.javascript.rhino.head.Node((int) (short) -1, node38, node42, (int) (short) 10);
        com.google.javascript.rhino.head.Node node49 = com.google.javascript.rhino.head.Node.newString(23, "");
        com.google.javascript.rhino.head.Node node51 = new com.google.javascript.rhino.head.Node((int) (byte) 10, node22, node42, node49, (int) (short) 0);
        com.google.javascript.rhino.head.Node node53 = node51.setType(16);
        com.google.javascript.rhino.head.Node node54 = node51.getLastSibling();
        com.google.javascript.rhino.head.Node node56 = new com.google.javascript.rhino.head.Node(21, node12, node54, (int) (byte) 10);
        com.google.javascript.rhino.head.Node node57 = node56.getLastChild();
        // The following exception was thrown during execution in test generation
        try {
            node57.resetTargets();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "40" + "'", str23, "40");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "40" + "'", str30, "40");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "-1" + "'", str43, "-1");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(node57);
    }

    @Test
    public void test1794() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1794");
        com.google.javascript.rhino.head.Node node1 = com.google.javascript.rhino.head.Node.newString("");
        int int4 = node1.getIntProp(17, (int) (byte) -1);
        com.google.javascript.rhino.head.Node node7 = new com.google.javascript.rhino.head.Node(40, 8);
        com.google.javascript.rhino.head.Node node10 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str11 = node10.toString();
        boolean boolean12 = node10.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node14 = com.google.javascript.rhino.head.Node.newString("");
        node14.removeProp(23);
        node10.addChildToFront(node14);
        com.google.javascript.rhino.head.Node node18 = node10.getFirstChild();
        com.google.javascript.rhino.head.Node node20 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        node18.addChildrenToBack(node20);
        com.google.javascript.rhino.head.Node node23 = com.google.javascript.rhino.head.Node.newString("");
        int int26 = node23.getIntProp(17, (int) (byte) -1);
        com.google.javascript.rhino.head.Node node27 = new com.google.javascript.rhino.head.Node((int) (short) 10, node18, node23);
        com.google.javascript.rhino.head.Node node29 = node18.setType(18);
        node1.addChildAfter(node7, node29);
        node1.removeChildren();
        com.google.javascript.rhino.head.Node node32 = node1.getLastChild();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "40" + "'", str11, "40");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNull(node32);
    }

    @Test
    public void test1795() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1795");
        com.google.javascript.rhino.head.Node node1 = com.google.javascript.rhino.head.Node.newNumber((double) 19);
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator2 = node1.new NodeIterator();
        boolean boolean3 = node1.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.ast.Comment comment4 = null;
        node1.setJsDocNode(comment4);
        com.google.javascript.rhino.head.Node node7 = new com.google.javascript.rhino.head.Node((int) (short) -1);
        node1.addChildrenToBack(node7);
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator9 = node1.new NodeIterator();
        com.google.javascript.rhino.head.Node node10 = nodeIterator9.next();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.head.Node node11 = nodeIterator9.next();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(node10);
    }

    @Test
    public void test1796() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1796");
        com.google.javascript.rhino.head.Node node2 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str3 = node2.toString();
        boolean boolean4 = node2.hasConsistentReturnUsage();
        boolean boolean5 = node2.hasSideEffects();
        com.google.javascript.rhino.head.Node node7 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str8 = node7.toString();
        boolean boolean9 = node7.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node11 = com.google.javascript.rhino.head.Node.newString("");
        node11.removeProp(23);
        node7.addChildToFront(node11);
        com.google.javascript.rhino.head.Node node15 = node7.getFirstChild();
        com.google.javascript.rhino.head.ast.Comment comment16 = node7.getJsDocNode();
        node2.addChildToBack(node7);
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor18 = node2.iterator();
        com.google.javascript.rhino.head.ast.Comment comment19 = node2.getJsDocNode();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator20 = node2.new NodeIterator();
        double double21 = node2.getDouble();
        com.google.javascript.rhino.head.Node node27 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str28 = node27.toString();
        boolean boolean29 = node27.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node31 = com.google.javascript.rhino.head.Node.newString("");
        node31.removeProp(23);
        node27.addChildToFront(node31);
        com.google.javascript.rhino.head.Node node35 = node27.getFirstChild();
        node35.setString("100");
        com.google.javascript.rhino.head.ast.Scope scope38 = node35.getScope();
        com.google.javascript.rhino.head.Node node40 = new com.google.javascript.rhino.head.Node((int) ' ', node35, 2);
        com.google.javascript.rhino.head.Node node41 = node35.getLastSibling();
        com.google.javascript.rhino.head.Node node44 = com.google.javascript.rhino.head.Node.newString(23, "");
        com.google.javascript.rhino.head.Node node45 = node44.getLastSibling();
        com.google.javascript.rhino.head.Node node46 = new com.google.javascript.rhino.head.Node((int) ' ', node41, node44);
        java.lang.String str47 = node41.getString();
        com.google.javascript.rhino.head.Node node49 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str50 = node49.toString();
        boolean boolean51 = node49.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node53 = com.google.javascript.rhino.head.Node.newString("");
        node53.removeProp(23);
        node49.addChildToFront(node53);
        com.google.javascript.rhino.head.Node node58 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean59 = node58.hasChildren();
        node49.addChildrenToFront(node58);
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator61 = node58.new NodeIterator();
        com.google.javascript.rhino.head.Node node63 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str64 = node63.toString();
        com.google.javascript.rhino.head.Node node65 = node63.getLastSibling();
        com.google.javascript.rhino.head.Node node68 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str69 = node68.toString();
        boolean boolean70 = node68.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node72 = com.google.javascript.rhino.head.Node.newString("");
        node72.removeProp(23);
        node68.addChildToFront(node72);
        com.google.javascript.rhino.head.Node node76 = node68.getFirstChild();
        node76.setString("100");
        com.google.javascript.rhino.head.ast.Scope scope79 = node76.getScope();
        com.google.javascript.rhino.head.Node node81 = new com.google.javascript.rhino.head.Node((int) ' ', node76, 2);
        com.google.javascript.rhino.head.Node node82 = node76.getLastSibling();
        node65.addChildToFront(node82);
        node58.addChildrenToFront(node65);
        com.google.javascript.rhino.head.Node node86 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        java.lang.String str87 = node86.toString();
        com.google.javascript.rhino.head.Node node89 = new com.google.javascript.rhino.head.Node((int) (short) 10, node41, node58, node86, 24);
        com.google.javascript.rhino.head.Node node91 = new com.google.javascript.rhino.head.Node(0, node41, 17);
        com.google.javascript.rhino.head.Node node93 = new com.google.javascript.rhino.head.Node(21, node2, node41, (int) (short) 1);
        com.google.javascript.rhino.head.Node node94 = node2.getLastSibling();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "40" + "'", str3, "40");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "40" + "'", str8, "40");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNull(comment16);
        org.junit.Assert.assertNotNull(nodeItor18);
        org.junit.Assert.assertNull(comment19);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 32.0d + "'", double21 == 32.0d);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "40" + "'", str28, "40");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNull(scope38);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "100" + "'", str47, "100");
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "40" + "'", str50, "40");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "40" + "'", str64, "40");
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "40" + "'", str69, "40");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertNull(scope79);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "100" + "'", str87, "100");
        org.junit.Assert.assertNotNull(node94);
    }

    @Test
    public void test1797() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1797");
        com.google.javascript.rhino.head.Node node3 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str4 = node3.toString();
        boolean boolean5 = node3.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node7 = com.google.javascript.rhino.head.Node.newString("");
        node7.removeProp(23);
        node3.addChildToFront(node7);
        com.google.javascript.rhino.head.Node node12 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean13 = node12.hasChildren();
        node3.addChildrenToFront(node12);
        int int15 = node12.getLineno();
        com.google.javascript.rhino.head.Node node17 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str18 = node17.toString();
        boolean boolean19 = node17.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node21 = com.google.javascript.rhino.head.Node.newString("");
        node21.removeProp(23);
        node17.addChildToFront(node21);
        com.google.javascript.rhino.head.Node node25 = node17.getFirstChild();
        com.google.javascript.rhino.head.Node node27 = new com.google.javascript.rhino.head.Node((int) (short) 0, node12, node17, 9);
        com.google.javascript.rhino.head.Node node29 = com.google.javascript.rhino.head.Node.newString("1");
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor30 = node29.iterator();
        com.google.javascript.rhino.head.Node node32 = new com.google.javascript.rhino.head.Node(21, node27, node29, (int) '4');
        node27.setLineno((int) (short) 100);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "40" + "'", str4, "40");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "40" + "'", str18, "40");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(nodeItor30);
    }

    @Test
    public void test1798() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1798");
        com.google.javascript.rhino.head.Node node1 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        com.google.javascript.rhino.head.Node node3 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str4 = node3.toString();
        boolean boolean5 = node3.hasConsistentReturnUsage();
        boolean boolean6 = node3.hasSideEffects();
        node1.addChildrenToFront(node3);
        node3.removeChildren();
        com.google.javascript.rhino.head.Node node10 = com.google.javascript.rhino.head.Node.newString("hi!");
        node3.addChildrenToBack(node10);
        boolean boolean12 = node3.hasSideEffects();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator13 = node3.new NodeIterator();
        java.lang.Object obj15 = node3.getProp(17);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "40" + "'", str4, "40");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(obj15);
    }

    @Test
    public void test1799() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1799");
        com.google.javascript.rhino.head.Node node1 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str2 = node1.toString();
        boolean boolean3 = node1.hasConsistentReturnUsage();
        boolean boolean4 = node1.hasSideEffects();
        com.google.javascript.rhino.head.Node node6 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str7 = node6.toString();
        boolean boolean8 = node6.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node10 = com.google.javascript.rhino.head.Node.newString("");
        node10.removeProp(23);
        node6.addChildToFront(node10);
        com.google.javascript.rhino.head.Node node14 = node6.getFirstChild();
        com.google.javascript.rhino.head.ast.Comment comment15 = node6.getJsDocNode();
        node1.addChildToBack(node6);
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor17 = node1.iterator();
        com.google.javascript.rhino.head.ast.Comment comment18 = node1.getJsDocNode();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator19 = node1.new NodeIterator();
        // The following exception was thrown during execution in test generation
        try {
            nodeIterator19.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: next() has not been called");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "40" + "'", str2, "40");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "40" + "'", str7, "40");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNull(comment15);
        org.junit.Assert.assertNotNull(nodeItor17);
        org.junit.Assert.assertNull(comment18);
    }

    @Test
    public void test1800() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1800");
        com.google.javascript.rhino.head.Node node1 = com.google.javascript.rhino.head.Node.newNumber((double) (byte) 10);
        org.junit.Assert.assertNotNull(node1);
    }

    @Test
    public void test1801() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1801");
        com.google.javascript.rhino.head.Node node2 = com.google.javascript.rhino.head.Node.newNumber((double) 0.0f);
        com.google.javascript.rhino.head.Node node4 = new com.google.javascript.rhino.head.Node(7);
        com.google.javascript.rhino.head.Node node5 = new com.google.javascript.rhino.head.Node(22, node2, node4);
        node2.setLineno(6);
        com.google.javascript.rhino.head.Node node8 = node2.getNext();
        com.google.javascript.rhino.head.Node node9 = node8.getLastChild();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNull(node9);
    }

    @Test
    public void test1802() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1802");
        com.google.javascript.rhino.head.Node node2 = com.google.javascript.rhino.head.Node.newNumber((double) 0L);
        com.google.javascript.rhino.head.Node node5 = com.google.javascript.rhino.head.Node.newString((int) '4', "hi!");
        com.google.javascript.rhino.head.Node node7 = new com.google.javascript.rhino.head.Node((int) (byte) -1);
        java.lang.String str8 = node7.toString();
        com.google.javascript.rhino.head.Node node9 = node7.getFirstChild();
        com.google.javascript.rhino.head.Node node12 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str13 = node12.toString();
        boolean boolean14 = node12.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node16 = com.google.javascript.rhino.head.Node.newString("");
        node16.removeProp(23);
        node12.addChildToFront(node16);
        com.google.javascript.rhino.head.Node node21 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean22 = node21.hasChildren();
        node12.addChildrenToFront(node21);
        int int24 = node21.getLineno();
        com.google.javascript.rhino.head.Node node26 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str27 = node26.toString();
        boolean boolean28 = node26.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node30 = com.google.javascript.rhino.head.Node.newString("");
        node30.removeProp(23);
        node26.addChildToFront(node30);
        com.google.javascript.rhino.head.Node node34 = node26.getFirstChild();
        com.google.javascript.rhino.head.Node node36 = new com.google.javascript.rhino.head.Node((int) (short) 0, node21, node26, 9);
        node7.addChildrenToFront(node36);
        com.google.javascript.rhino.head.Node node39 = new com.google.javascript.rhino.head.Node(100, node2, node5, node7, (int) ' ');
        java.lang.String str40 = node39.toString();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "-1" + "'", str8, "-1");
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "40" + "'", str13, "40");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "40" + "'", str27, "40");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "100" + "'", str40, "100");
    }

    @Test
    public void test1803() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1803");
        com.google.javascript.rhino.head.Node node2 = com.google.javascript.rhino.head.Node.newString((int) '4', "40");
        com.google.javascript.rhino.head.Node node6 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str7 = node6.toString();
        boolean boolean8 = node6.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node10 = com.google.javascript.rhino.head.Node.newString("");
        node10.removeProp(23);
        node6.addChildToFront(node10);
        com.google.javascript.rhino.head.Node node15 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean16 = node15.hasChildren();
        node6.addChildrenToFront(node15);
        com.google.javascript.rhino.head.Node node19 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str20 = node19.toString();
        boolean boolean21 = node19.hasConsistentReturnUsage();
        boolean boolean22 = node19.hasSideEffects();
        com.google.javascript.rhino.head.Node node24 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str25 = node24.toString();
        boolean boolean26 = node24.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node28 = com.google.javascript.rhino.head.Node.newString("");
        node28.removeProp(23);
        node24.addChildToFront(node28);
        com.google.javascript.rhino.head.Node node32 = node24.getFirstChild();
        com.google.javascript.rhino.head.ast.Comment comment33 = node24.getJsDocNode();
        node19.addChildToBack(node24);
        com.google.javascript.rhino.head.Node node35 = new com.google.javascript.rhino.head.Node(15, node6, node19);
        com.google.javascript.rhino.head.Node node38 = com.google.javascript.rhino.head.Node.newString(23, "");
        java.lang.String str39 = node38.toString();
        com.google.javascript.rhino.head.Node node42 = com.google.javascript.rhino.head.Node.newString("hi!");
        com.google.javascript.rhino.head.Node node45 = com.google.javascript.rhino.head.Node.newString(23, "");
        com.google.javascript.rhino.head.Node node46 = new com.google.javascript.rhino.head.Node(0, node42, node45);
        com.google.javascript.rhino.head.Node node47 = new com.google.javascript.rhino.head.Node(24, node6, node38, node46);
        com.google.javascript.rhino.head.Node node48 = node47.getNext();
        com.google.javascript.rhino.head.Node node49 = node2.getChildBefore(node48);
        com.google.javascript.rhino.head.Node node52 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str53 = node52.toString();
        boolean boolean54 = node52.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node56 = com.google.javascript.rhino.head.Node.newString("");
        node56.removeProp(23);
        node52.addChildToFront(node56);
        com.google.javascript.rhino.head.Node node60 = node52.getFirstChild();
        node60.setString("100");
        com.google.javascript.rhino.head.ast.Scope scope63 = node60.getScope();
        com.google.javascript.rhino.head.Node node65 = new com.google.javascript.rhino.head.Node((int) ' ', node60, 2);
        java.util.Spliterator<com.google.javascript.rhino.head.Node> nodeSpliterator66 = node60.spliterator();
        com.google.javascript.rhino.head.Node node68 = new com.google.javascript.rhino.head.Node(23);
        node60.addChildToBack(node68);
        node2.addChildrenToFront(node60);
        boolean boolean71 = node60.hasChildren();
        node60.setString("22");
        java.lang.Object obj75 = node60.getProp(26);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "40" + "'", str7, "40");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "40" + "'", str20, "40");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "40" + "'", str25, "40");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNull(comment33);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "23" + "'", str39, "23");
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNull(node48);
        org.junit.Assert.assertNull(node49);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "40" + "'", str53, "40");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNull(scope63);
        org.junit.Assert.assertNotNull(nodeSpliterator66);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNull(obj75);
    }

    @Test
    public void test1804() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1804");
        com.google.javascript.rhino.head.Node node2 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str3 = node2.toString();
        boolean boolean4 = node2.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node6 = com.google.javascript.rhino.head.Node.newString("");
        node6.removeProp(23);
        node2.addChildToFront(node6);
        com.google.javascript.rhino.head.Node node10 = node2.getFirstChild();
        node10.setString("100");
        com.google.javascript.rhino.head.ast.Scope scope13 = node10.getScope();
        com.google.javascript.rhino.head.Node node15 = new com.google.javascript.rhino.head.Node((int) ' ', node10, 2);
        com.google.javascript.rhino.head.Node node16 = node10.getLastSibling();
        com.google.javascript.rhino.head.Node node18 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        com.google.javascript.rhino.head.Node node20 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str21 = node20.toString();
        boolean boolean22 = node20.hasConsistentReturnUsage();
        boolean boolean23 = node20.hasSideEffects();
        node18.addChildrenToFront(node20);
        node20.removeChildren();
        com.google.javascript.rhino.head.Node node27 = com.google.javascript.rhino.head.Node.newString("hi!");
        node20.addChildrenToBack(node27);
        node16.addChildToFront(node20);
        java.lang.String str30 = node20.toString();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode31 = null;
        java.lang.String str32 = node20.toStringTree(scriptNode31);
        node20.setLineno(2);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "40" + "'", str3, "40");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNull(scope13);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "40" + "'", str21, "40");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "40" + "'", str30, "40");
        org.junit.Assert.assertNull(str32);
    }

    @Test
    public void test1805() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1805");
        com.google.javascript.rhino.head.Node node2 = com.google.javascript.rhino.head.Node.newNumber((double) 19);
        com.google.javascript.rhino.head.Node node5 = com.google.javascript.rhino.head.Node.newString("");
        node5.removeProp(23);
        com.google.javascript.rhino.head.Node node10 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str11 = node10.toString();
        boolean boolean12 = node10.hasConsistentReturnUsage();
        boolean boolean13 = node10.hasSideEffects();
        com.google.javascript.rhino.head.Node node14 = new com.google.javascript.rhino.head.Node(0, node10);
        node5.addChildrenToBack(node14);
        com.google.javascript.rhino.head.Node node16 = new com.google.javascript.rhino.head.Node(9, node5);
        com.google.javascript.rhino.head.Node node20 = com.google.javascript.rhino.head.Node.newString("hi!");
        com.google.javascript.rhino.head.Node node21 = new com.google.javascript.rhino.head.Node(13, node20);
        com.google.javascript.rhino.head.Node node22 = new com.google.javascript.rhino.head.Node(7, node20);
        com.google.javascript.rhino.head.Node node24 = new com.google.javascript.rhino.head.Node((int) 'a', node2, node16, node20, (int) (short) 1);
        boolean boolean25 = node2.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node27 = node2.setType(3);
        com.google.javascript.rhino.head.ast.Comment comment28 = node27.getJsDocNode();
        com.google.javascript.rhino.head.Node node31 = com.google.javascript.rhino.head.Node.newNumber((double) 0L);
        com.google.javascript.rhino.head.Node node34 = com.google.javascript.rhino.head.Node.newString((int) '4', "hi!");
        com.google.javascript.rhino.head.Node node36 = new com.google.javascript.rhino.head.Node((int) (byte) -1);
        java.lang.String str37 = node36.toString();
        com.google.javascript.rhino.head.Node node38 = node36.getFirstChild();
        com.google.javascript.rhino.head.Node node41 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str42 = node41.toString();
        boolean boolean43 = node41.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node45 = com.google.javascript.rhino.head.Node.newString("");
        node45.removeProp(23);
        node41.addChildToFront(node45);
        com.google.javascript.rhino.head.Node node50 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean51 = node50.hasChildren();
        node41.addChildrenToFront(node50);
        int int53 = node50.getLineno();
        com.google.javascript.rhino.head.Node node55 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str56 = node55.toString();
        boolean boolean57 = node55.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node59 = com.google.javascript.rhino.head.Node.newString("");
        node59.removeProp(23);
        node55.addChildToFront(node59);
        com.google.javascript.rhino.head.Node node63 = node55.getFirstChild();
        com.google.javascript.rhino.head.Node node65 = new com.google.javascript.rhino.head.Node((int) (short) 0, node50, node55, 9);
        node36.addChildrenToFront(node65);
        com.google.javascript.rhino.head.Node node68 = new com.google.javascript.rhino.head.Node(100, node31, node34, node36, (int) ' ');
        com.google.javascript.rhino.head.Node node69 = node34.getNext();
        // The following exception was thrown during execution in test generation
        try {
            comment28.addChildrenToBack(node69);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "40" + "'", str11, "40");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNull(comment28);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "-1" + "'", str37, "-1");
        org.junit.Assert.assertNull(node38);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "40" + "'", str42, "40");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "40" + "'", str56, "40");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertNotNull(node69);
    }

    @Test
    public void test1806() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1806");
        com.google.javascript.rhino.head.Node node2 = new com.google.javascript.rhino.head.Node((int) (byte) 10, (int) (short) 100);
        node2.removeChildren();
    }

    @Test
    public void test1807() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1807");
        com.google.javascript.rhino.head.Node node2 = com.google.javascript.rhino.head.Node.newString((int) (byte) 0, "12");
        // The following exception was thrown during execution in test generation
        try {
            int int4 = node2.getExistingIntProp(12);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
    }

    @Test
    public void test1808() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1808");
        com.google.javascript.rhino.head.Node node1 = null;
        com.google.javascript.rhino.head.Node node3 = new com.google.javascript.rhino.head.Node(23);
        node3.removeProp(25);
        boolean boolean6 = node3.hasChildren();
        node3.putIntProp(21, 25);
        com.google.javascript.rhino.head.Node node11 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str12 = node11.toString();
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor13 = node11.iterator();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.head.Node node14 = new com.google.javascript.rhino.head.Node(10, node1, node3, node11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "40" + "'", str12, "40");
        org.junit.Assert.assertNotNull(nodeItor13);
    }

    @Test
    public void test1809() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1809");
        com.google.javascript.rhino.head.Node node1 = new com.google.javascript.rhino.head.Node(23);
        node1.setLineno(15);
        com.google.javascript.rhino.head.Node node5 = new com.google.javascript.rhino.head.Node((int) (byte) 100);
        com.google.javascript.rhino.head.Node node8 = new com.google.javascript.rhino.head.Node(12);
        node8.putIntProp(14, 3);
        com.google.javascript.rhino.head.ast.Comment comment12 = null;
        node8.setJsDocNode(comment12);
        boolean boolean14 = node8.hasSideEffects();
        com.google.javascript.rhino.head.Node node17 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str18 = node17.toString();
        boolean boolean19 = node17.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node21 = com.google.javascript.rhino.head.Node.newString("");
        node21.removeProp(23);
        node17.addChildToFront(node21);
        com.google.javascript.rhino.head.Node node25 = node17.getFirstChild();
        node25.setString("100");
        com.google.javascript.rhino.head.ast.Scope scope28 = node25.getScope();
        com.google.javascript.rhino.head.Node node30 = new com.google.javascript.rhino.head.Node((int) ' ', node25, 2);
        boolean boolean31 = node30.hasChildren();
        com.google.javascript.rhino.head.Node node34 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str35 = node34.toString();
        boolean boolean36 = node34.hasConsistentReturnUsage();
        boolean boolean37 = node34.hasSideEffects();
        com.google.javascript.rhino.head.Node node38 = new com.google.javascript.rhino.head.Node(0, node34);
        int int39 = node34.getLineno();
        node30.addChildToFront(node34);
        boolean boolean41 = node34.hasSideEffects();
        boolean boolean42 = node34.hasChildren();
        node34.setLineno((int) (short) 1);
        double double45 = node34.getDouble();
        com.google.javascript.rhino.head.Node node47 = new com.google.javascript.rhino.head.Node(24, node8, node34, (int) (short) -1);
        // The following exception was thrown during execution in test generation
        try {
            node1.replaceChild(node5, node8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "40" + "'", str18, "40");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNull(scope28);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "40" + "'", str35, "40");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 32.0d + "'", double45 == 32.0d);
    }

    @Test
    public void test1810() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1810");
        com.google.javascript.rhino.head.Node node2 = com.google.javascript.rhino.head.Node.newNumber((double) 0L);
        com.google.javascript.rhino.head.Node node4 = com.google.javascript.rhino.head.Node.newString("");
        node4.removeProp(23);
        com.google.javascript.rhino.head.Node node9 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str10 = node9.toString();
        boolean boolean11 = node9.hasConsistentReturnUsage();
        boolean boolean12 = node9.hasSideEffects();
        com.google.javascript.rhino.head.Node node13 = new com.google.javascript.rhino.head.Node(0, node9);
        node4.addChildrenToBack(node13);
        node2.addChildToFront(node4);
        java.lang.String str16 = node4.getString();
        com.google.javascript.rhino.head.Node node17 = new com.google.javascript.rhino.head.Node(13, node4);
        com.google.javascript.rhino.head.Node node18 = node4.getLastSibling();
        com.google.javascript.rhino.head.Node node19 = node4.getFirstChild();
        node4.removeProp((int) (short) 0);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "40" + "'", str10, "40");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node19);
    }

    @Test
    public void test1811() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1811");
        com.google.javascript.rhino.head.Node node4 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str5 = node4.toString();
        boolean boolean6 = node4.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node8 = com.google.javascript.rhino.head.Node.newString("");
        node8.removeProp(23);
        node4.addChildToFront(node8);
        com.google.javascript.rhino.head.Node node12 = node4.getFirstChild();
        com.google.javascript.rhino.head.ast.Comment comment13 = node4.getJsDocNode();
        int int14 = node4.getType();
        node4.setDouble((double) 17);
        com.google.javascript.rhino.head.Node node18 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str19 = node18.toString();
        boolean boolean20 = node18.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node22 = com.google.javascript.rhino.head.Node.newString("");
        node22.removeProp(23);
        node18.addChildToFront(node22);
        java.lang.String str26 = node22.getString();
        com.google.javascript.rhino.head.Node node29 = com.google.javascript.rhino.head.Node.newString((int) (short) 0, "-1");
        com.google.javascript.rhino.head.Node node31 = new com.google.javascript.rhino.head.Node(10, node4, node22, node29, 14);
        java.lang.String str32 = node31.getJsDoc();
        com.google.javascript.rhino.head.Node node34 = new com.google.javascript.rhino.head.Node(17, node31, (int) (byte) 0);
        com.google.javascript.rhino.head.Node node35 = node31.getLastChild();
        com.google.javascript.rhino.head.Node node39 = new com.google.javascript.rhino.head.Node(23, (int) (short) -1);
        com.google.javascript.rhino.head.Node node42 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str43 = node42.toString();
        boolean boolean44 = node42.hasConsistentReturnUsage();
        boolean boolean45 = node42.hasSideEffects();
        com.google.javascript.rhino.head.Node node46 = new com.google.javascript.rhino.head.Node(0, node42);
        com.google.javascript.rhino.head.Node node47 = node46.getLastChild();
        node46.removeChildren();
        com.google.javascript.rhino.head.Node node50 = new com.google.javascript.rhino.head.Node(19, node39, node46, 24);
        com.google.javascript.rhino.head.Node node51 = node39.getLastSibling();
        com.google.javascript.rhino.head.Node node52 = new com.google.javascript.rhino.head.Node(52, node35, node39);
        node39.removeProp(12);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "40" + "'", str5, "40");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNull(comment13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 40 + "'", int14 == 40);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "40" + "'", str19, "40");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "40" + "'", str43, "40");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node51);
    }

    @Test
    public void test1812() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1812");
        com.google.javascript.rhino.head.Node node4 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str5 = node4.toString();
        boolean boolean6 = node4.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node8 = com.google.javascript.rhino.head.Node.newString("");
        node8.removeProp(23);
        node4.addChildToFront(node8);
        com.google.javascript.rhino.head.Node node12 = node4.getFirstChild();
        node12.setString("100");
        com.google.javascript.rhino.head.ast.Scope scope15 = node12.getScope();
        com.google.javascript.rhino.head.Node node17 = new com.google.javascript.rhino.head.Node((int) ' ', node12, 2);
        com.google.javascript.rhino.head.Node node18 = node12.getLastSibling();
        com.google.javascript.rhino.head.Node node21 = com.google.javascript.rhino.head.Node.newString(23, "");
        com.google.javascript.rhino.head.Node node22 = node21.getLastSibling();
        com.google.javascript.rhino.head.Node node23 = new com.google.javascript.rhino.head.Node((int) ' ', node18, node21);
        node21.setLineno((int) (byte) 0);
        com.google.javascript.rhino.head.Node node26 = new com.google.javascript.rhino.head.Node(13, node21);
        com.google.javascript.rhino.head.Node node31 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str32 = node31.toString();
        boolean boolean33 = node31.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node35 = com.google.javascript.rhino.head.Node.newString("");
        node35.removeProp(23);
        node31.addChildToFront(node35);
        com.google.javascript.rhino.head.Node node39 = node31.getFirstChild();
        node39.setString("100");
        com.google.javascript.rhino.head.ast.Scope scope42 = node39.getScope();
        com.google.javascript.rhino.head.Node node44 = new com.google.javascript.rhino.head.Node((int) ' ', node39, 2);
        com.google.javascript.rhino.head.Node node45 = node39.getLastSibling();
        com.google.javascript.rhino.head.Node node48 = com.google.javascript.rhino.head.Node.newString(23, "");
        com.google.javascript.rhino.head.Node node49 = node48.getLastSibling();
        com.google.javascript.rhino.head.Node node50 = new com.google.javascript.rhino.head.Node((int) ' ', node45, node48);
        node48.setLineno((int) (byte) 0);
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator53 = node48.new NodeIterator();
        node21.putProp(40, (java.lang.Object) nodeIterator53);
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.head.Node node55 = nodeIterator53.next();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "40" + "'", str5, "40");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNull(scope15);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "40" + "'", str32, "40");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNull(scope42);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNotNull(node49);
    }

    @Test
    public void test1813() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1813");
        com.google.javascript.rhino.head.Node node3 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str4 = node3.toString();
        boolean boolean5 = node3.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node7 = com.google.javascript.rhino.head.Node.newString("");
        node7.removeProp(23);
        node3.addChildToFront(node7);
        com.google.javascript.rhino.head.Node node11 = new com.google.javascript.rhino.head.Node((int) 'a', node3);
        com.google.javascript.rhino.head.Node node13 = com.google.javascript.rhino.head.Node.newString("-1");
        com.google.javascript.rhino.head.Node node15 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str16 = node15.toString();
        com.google.javascript.rhino.head.Node node17 = node15.getLastChild();
        com.google.javascript.rhino.head.Node node19 = new com.google.javascript.rhino.head.Node((int) (short) -1, node3, node13, node15, (int) (short) -1);
        java.lang.Object obj21 = node3.getProp(0);
        java.lang.String str22 = node3.getJsDoc();
        java.util.Spliterator<com.google.javascript.rhino.head.Node> nodeSpliterator23 = node3.spliterator();
        com.google.javascript.rhino.head.Node node24 = node3.getLastChild();
        boolean boolean25 = node3.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode26 = null;
        java.lang.String str27 = node3.toStringTree(scriptNode26);
        com.google.javascript.rhino.head.ast.Scope scope28 = null;
        // The following exception was thrown during execution in test generation
        try {
            node3.setScope(scope28);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "40" + "'", str4, "40");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "40" + "'", str16, "40");
        org.junit.Assert.assertNull(node17);
        org.junit.Assert.assertNull(obj21);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(nodeSpliterator23);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNull(str27);
    }

    @Test
    public void test1814() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1814");
        com.google.javascript.rhino.head.Node node4 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str5 = node4.toString();
        boolean boolean6 = node4.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node8 = com.google.javascript.rhino.head.Node.newString("");
        node8.removeProp(23);
        node4.addChildToFront(node8);
        com.google.javascript.rhino.head.Node node12 = new com.google.javascript.rhino.head.Node((int) 'a', node4);
        com.google.javascript.rhino.head.Node node14 = com.google.javascript.rhino.head.Node.newString("-1");
        com.google.javascript.rhino.head.Node node16 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str17 = node16.toString();
        com.google.javascript.rhino.head.Node node18 = node16.getLastChild();
        com.google.javascript.rhino.head.Node node20 = new com.google.javascript.rhino.head.Node((int) (short) -1, node4, node14, node16, (int) (short) -1);
        java.lang.Object obj22 = node4.getProp(0);
        java.lang.String str23 = node4.getJsDoc();
        com.google.javascript.rhino.head.Node node26 = new com.google.javascript.rhino.head.Node(4, 8);
        com.google.javascript.rhino.head.Node node30 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str31 = node30.toString();
        boolean boolean32 = node30.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node34 = com.google.javascript.rhino.head.Node.newString("");
        node34.removeProp(23);
        node30.addChildToFront(node34);
        com.google.javascript.rhino.head.Node node38 = node30.getFirstChild();
        node38.setString("100");
        com.google.javascript.rhino.head.ast.Scope scope41 = node38.getScope();
        com.google.javascript.rhino.head.Node node43 = new com.google.javascript.rhino.head.Node((int) ' ', node38, 2);
        com.google.javascript.rhino.head.Node node44 = node38.getLastSibling();
        com.google.javascript.rhino.head.Node node47 = com.google.javascript.rhino.head.Node.newString(23, "");
        com.google.javascript.rhino.head.Node node48 = node47.getLastSibling();
        com.google.javascript.rhino.head.Node node49 = new com.google.javascript.rhino.head.Node((int) ' ', node44, node47);
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor50 = node47.iterator();
        node26.addChildrenToFront(node47);
        com.google.javascript.rhino.head.Node node53 = com.google.javascript.rhino.head.Node.newString("23");
        node53.removeChildren();
        com.google.javascript.rhino.head.Node node56 = new com.google.javascript.rhino.head.Node((int) (byte) 10, node4, node26, node53, 25);
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator57 = node4.new NodeIterator();
        // The following exception was thrown during execution in test generation
        try {
            node4.resetTargets();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "40" + "'", str5, "40");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "40" + "'", str17, "40");
        org.junit.Assert.assertNull(node18);
        org.junit.Assert.assertNull(obj22);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "40" + "'", str31, "40");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNull(scope41);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNotNull(nodeItor50);
        org.junit.Assert.assertNotNull(node53);
    }

    @Test
    public void test1815() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1815");
        com.google.javascript.rhino.head.Node node2 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str3 = node2.toString();
        com.google.javascript.rhino.head.Node node4 = node2.getLastSibling();
        com.google.javascript.rhino.head.Node node7 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str8 = node7.toString();
        boolean boolean9 = node7.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node11 = com.google.javascript.rhino.head.Node.newString("");
        node11.removeProp(23);
        node7.addChildToFront(node11);
        com.google.javascript.rhino.head.Node node15 = node7.getFirstChild();
        node15.setString("100");
        com.google.javascript.rhino.head.ast.Scope scope18 = node15.getScope();
        com.google.javascript.rhino.head.Node node20 = new com.google.javascript.rhino.head.Node((int) ' ', node15, 2);
        com.google.javascript.rhino.head.Node node21 = node15.getLastSibling();
        node4.addChildToFront(node21);
        com.google.javascript.rhino.head.Node node26 = com.google.javascript.rhino.head.Node.newString(23, "");
        com.google.javascript.rhino.head.Node node27 = node26.getLastSibling();
        com.google.javascript.rhino.head.Node node31 = com.google.javascript.rhino.head.Node.newString("hi!");
        com.google.javascript.rhino.head.Node node32 = new com.google.javascript.rhino.head.Node(13, node31);
        com.google.javascript.rhino.head.Node node35 = new com.google.javascript.rhino.head.Node(12);
        node35.putIntProp(14, 3);
        com.google.javascript.rhino.head.Node node39 = new com.google.javascript.rhino.head.Node(6, node35);
        com.google.javascript.rhino.head.Node node40 = node39.getLastChild();
        com.google.javascript.rhino.head.Node node42 = new com.google.javascript.rhino.head.Node((int) (byte) 100, node31, node39, 0);
        com.google.javascript.rhino.head.Node node45 = new com.google.javascript.rhino.head.Node((int) (byte) 1, 8);
        node45.putIntProp(20, 100);
        com.google.javascript.rhino.head.Node node49 = new com.google.javascript.rhino.head.Node(20, node27, node31, node45);
        com.google.javascript.rhino.head.Node node50 = node27.getLastChild();
        com.google.javascript.rhino.head.Node node52 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        com.google.javascript.rhino.head.Node node54 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str55 = node54.toString();
        boolean boolean56 = node54.hasConsistentReturnUsage();
        boolean boolean57 = node54.hasSideEffects();
        node52.addChildrenToFront(node54);
        com.google.javascript.rhino.head.Node node59 = node54.getLastSibling();
        com.google.javascript.rhino.head.Node node61 = new com.google.javascript.rhino.head.Node((-1), node21, node27, node59, 3);
        java.lang.String str62 = node27.toString();
        java.lang.Object obj64 = node27.getProp(52);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "40" + "'", str3, "40");
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "40" + "'", str8, "40");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNull(scope18);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNull(node50);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "40" + "'", str55, "40");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "23" + "'", str62, "23");
        org.junit.Assert.assertNull(obj64);
    }

    @Test
    public void test1816() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1816");
        com.google.javascript.rhino.head.Node node4 = com.google.javascript.rhino.head.Node.newString("");
        int int5 = node4.getLineno();
        com.google.javascript.rhino.head.Node node7 = node4.setType((-1));
        com.google.javascript.rhino.head.Node node9 = new com.google.javascript.rhino.head.Node(23, node7, 22);
        com.google.javascript.rhino.head.Node node10 = new com.google.javascript.rhino.head.Node(15, node7);
        com.google.javascript.rhino.head.Node node14 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str15 = node14.toString();
        boolean boolean16 = node14.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node18 = com.google.javascript.rhino.head.Node.newString("");
        node18.removeProp(23);
        node14.addChildToFront(node18);
        com.google.javascript.rhino.head.Node node23 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean24 = node23.hasChildren();
        node14.addChildrenToFront(node23);
        com.google.javascript.rhino.head.Node node27 = new com.google.javascript.rhino.head.Node((int) (byte) -1);
        java.lang.String str28 = node27.toString();
        boolean boolean29 = node27.hasChildren();
        com.google.javascript.rhino.head.Node node31 = new com.google.javascript.rhino.head.Node((int) (short) -1, node23, node27, (int) (short) 10);
        com.google.javascript.rhino.head.Node node32 = node31.getLastChild();
        com.google.javascript.rhino.head.Node node37 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str38 = node37.toString();
        boolean boolean39 = node37.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node41 = com.google.javascript.rhino.head.Node.newString("");
        node41.removeProp(23);
        node37.addChildToFront(node41);
        com.google.javascript.rhino.head.Node node45 = new com.google.javascript.rhino.head.Node((int) 'a', node37);
        com.google.javascript.rhino.head.Node node47 = com.google.javascript.rhino.head.Node.newString("-1");
        com.google.javascript.rhino.head.Node node49 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str50 = node49.toString();
        com.google.javascript.rhino.head.Node node51 = node49.getLastChild();
        com.google.javascript.rhino.head.Node node53 = new com.google.javascript.rhino.head.Node((int) (short) -1, node37, node47, node49, (int) (short) -1);
        com.google.javascript.rhino.head.Node node55 = new com.google.javascript.rhino.head.Node((int) (short) 1, node49, 12);
        com.google.javascript.rhino.head.Node node57 = new com.google.javascript.rhino.head.Node(23);
        node57.removeProp(25);
        boolean boolean60 = node57.hasChildren();
        com.google.javascript.rhino.head.Node node61 = new com.google.javascript.rhino.head.Node((-1), node32, node49, node57);
        int int62 = node49.getLineno();
        com.google.javascript.rhino.head.Node node66 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str67 = node66.toString();
        boolean boolean68 = node66.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node70 = com.google.javascript.rhino.head.Node.newString("");
        node70.removeProp(23);
        node66.addChildToFront(node70);
        com.google.javascript.rhino.head.Node node74 = node66.getFirstChild();
        node74.setString("100");
        com.google.javascript.rhino.head.ast.Scope scope77 = node74.getScope();
        com.google.javascript.rhino.head.Node node79 = new com.google.javascript.rhino.head.Node((int) ' ', node74, 2);
        com.google.javascript.rhino.head.Node node80 = node74.getLastSibling();
        com.google.javascript.rhino.head.Node node83 = com.google.javascript.rhino.head.Node.newString(23, "");
        com.google.javascript.rhino.head.Node node84 = node83.getLastSibling();
        com.google.javascript.rhino.head.Node node85 = new com.google.javascript.rhino.head.Node((int) ' ', node80, node83);
        node83.setLineno((int) (byte) 0);
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator88 = node83.new NodeIterator();
        com.google.javascript.rhino.head.Node node90 = new com.google.javascript.rhino.head.Node((int) '4', node10, node49, node83, 1);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "40" + "'", str15, "40");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "-1" + "'", str28, "-1");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "40" + "'", str38, "40");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "40" + "'", str50, "40");
        org.junit.Assert.assertNull(node51);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-1) + "'", int62 == (-1));
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "40" + "'", str67, "40");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertNull(scope77);
        org.junit.Assert.assertNotNull(node80);
        org.junit.Assert.assertNotNull(node83);
        org.junit.Assert.assertNotNull(node84);
    }

    @Test
    public void test1817() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1817");
        com.google.javascript.rhino.head.Node node2 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str3 = node2.toString();
        com.google.javascript.rhino.head.Node node4 = node2.getLastSibling();
        com.google.javascript.rhino.head.Node node7 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str8 = node7.toString();
        boolean boolean9 = node7.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node11 = com.google.javascript.rhino.head.Node.newString("");
        node11.removeProp(23);
        node7.addChildToFront(node11);
        com.google.javascript.rhino.head.Node node15 = node7.getFirstChild();
        node15.setString("100");
        com.google.javascript.rhino.head.ast.Scope scope18 = node15.getScope();
        com.google.javascript.rhino.head.Node node20 = new com.google.javascript.rhino.head.Node((int) ' ', node15, 2);
        com.google.javascript.rhino.head.Node node21 = node15.getLastSibling();
        node4.addChildToFront(node21);
        com.google.javascript.rhino.head.Node node26 = com.google.javascript.rhino.head.Node.newString(23, "");
        com.google.javascript.rhino.head.Node node27 = node26.getLastSibling();
        com.google.javascript.rhino.head.Node node31 = com.google.javascript.rhino.head.Node.newString("hi!");
        com.google.javascript.rhino.head.Node node32 = new com.google.javascript.rhino.head.Node(13, node31);
        com.google.javascript.rhino.head.Node node35 = new com.google.javascript.rhino.head.Node(12);
        node35.putIntProp(14, 3);
        com.google.javascript.rhino.head.Node node39 = new com.google.javascript.rhino.head.Node(6, node35);
        com.google.javascript.rhino.head.Node node40 = node39.getLastChild();
        com.google.javascript.rhino.head.Node node42 = new com.google.javascript.rhino.head.Node((int) (byte) 100, node31, node39, 0);
        com.google.javascript.rhino.head.Node node45 = new com.google.javascript.rhino.head.Node((int) (byte) 1, 8);
        node45.putIntProp(20, 100);
        com.google.javascript.rhino.head.Node node49 = new com.google.javascript.rhino.head.Node(20, node27, node31, node45);
        com.google.javascript.rhino.head.Node node50 = node27.getLastChild();
        com.google.javascript.rhino.head.Node node52 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        com.google.javascript.rhino.head.Node node54 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str55 = node54.toString();
        boolean boolean56 = node54.hasConsistentReturnUsage();
        boolean boolean57 = node54.hasSideEffects();
        node52.addChildrenToFront(node54);
        com.google.javascript.rhino.head.Node node59 = node54.getLastSibling();
        com.google.javascript.rhino.head.Node node61 = new com.google.javascript.rhino.head.Node((-1), node21, node27, node59, 3);
        java.lang.Object obj63 = node61.getProp((int) 'a');
        com.google.javascript.rhino.head.Node node64 = node61.getNext();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.head.Node node66 = node64.setType(6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "40" + "'", str3, "40");
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "40" + "'", str8, "40");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNull(scope18);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNull(node50);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "40" + "'", str55, "40");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertNull(obj63);
        org.junit.Assert.assertNull(node64);
    }

    @Test
    public void test1818() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1818");
        com.google.javascript.rhino.head.Node node2 = new com.google.javascript.rhino.head.Node(20);
        com.google.javascript.rhino.head.Node node4 = new com.google.javascript.rhino.head.Node(3, node2, (int) (byte) 10);
    }

    @Test
    public void test1819() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1819");
        com.google.javascript.rhino.head.Node node4 = com.google.javascript.rhino.head.Node.newString("");
        node4.removeProp(23);
        com.google.javascript.rhino.head.Node node9 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str10 = node9.toString();
        boolean boolean11 = node9.hasConsistentReturnUsage();
        boolean boolean12 = node9.hasSideEffects();
        com.google.javascript.rhino.head.Node node13 = new com.google.javascript.rhino.head.Node(0, node9);
        node4.addChildrenToBack(node13);
        com.google.javascript.rhino.head.Node node15 = new com.google.javascript.rhino.head.Node(9, node4);
        com.google.javascript.rhino.head.Node node16 = new com.google.javascript.rhino.head.Node((int) '#', node15);
        com.google.javascript.rhino.head.Node node18 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        com.google.javascript.rhino.head.Node node20 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str21 = node20.toString();
        boolean boolean22 = node20.hasConsistentReturnUsage();
        boolean boolean23 = node20.hasSideEffects();
        node18.addChildrenToFront(node20);
        node20.removeChildren();
        com.google.javascript.rhino.head.Node node27 = new com.google.javascript.rhino.head.Node((int) (short) 0);
        node15.addChildAfter(node20, node27);
        com.google.javascript.rhino.head.Node node29 = node15.getLastSibling();
        com.google.javascript.rhino.head.Node node30 = node29.getLastSibling();
        com.google.javascript.rhino.head.Node node33 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str34 = node33.toString();
        boolean boolean35 = node33.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node37 = com.google.javascript.rhino.head.Node.newString("");
        node37.removeProp(23);
        node33.addChildToFront(node37);
        com.google.javascript.rhino.head.Node node41 = node33.getFirstChild();
        com.google.javascript.rhino.head.ast.Comment comment42 = node33.getJsDocNode();
        int int43 = node33.getType();
        node33.setDouble((double) 17);
        com.google.javascript.rhino.head.Node node47 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str48 = node47.toString();
        boolean boolean49 = node47.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node51 = com.google.javascript.rhino.head.Node.newString("");
        node51.removeProp(23);
        node47.addChildToFront(node51);
        java.lang.String str55 = node51.getString();
        com.google.javascript.rhino.head.Node node58 = com.google.javascript.rhino.head.Node.newString((int) (short) 0, "-1");
        com.google.javascript.rhino.head.Node node60 = new com.google.javascript.rhino.head.Node(10, node33, node51, node58, 14);
        node30.addChildrenToFront(node33);
        com.google.javascript.rhino.head.Node node64 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str65 = node64.toString();
        boolean boolean66 = node64.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node68 = com.google.javascript.rhino.head.Node.newString("");
        node68.removeProp(23);
        node64.addChildToFront(node68);
        com.google.javascript.rhino.head.Node node72 = node64.getFirstChild();
        com.google.javascript.rhino.head.Node node74 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        node72.addChildrenToBack(node74);
        com.google.javascript.rhino.head.Node node77 = com.google.javascript.rhino.head.Node.newString("");
        int int80 = node77.getIntProp(17, (int) (byte) -1);
        com.google.javascript.rhino.head.Node node81 = new com.google.javascript.rhino.head.Node((int) (short) 10, node72, node77);
        boolean boolean82 = node72.hasChildren();
        com.google.javascript.rhino.head.Node node85 = new com.google.javascript.rhino.head.Node(5, 11);
        node72.addChildToFront(node85);
        com.google.javascript.rhino.head.Node node88 = new com.google.javascript.rhino.head.Node(17);
        com.google.javascript.rhino.head.Node node89 = new com.google.javascript.rhino.head.Node(97, node30, node72, node88);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str90 = node88.getString();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: com.google.javascript.rhino.head.Node cannot be cast to com.google.javascript.rhino.head.ast.Name");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "40" + "'", str10, "40");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "40" + "'", str21, "40");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "40" + "'", str34, "40");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNull(comment42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 40 + "'", int43 == 40);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "40" + "'", str48, "40");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "40" + "'", str65, "40");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + (-1) + "'", int80 == (-1));
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
    }

    @Test
    public void test1820() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1820");
        com.google.javascript.rhino.head.Node node1 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str2 = node1.toString();
        boolean boolean3 = node1.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node5 = com.google.javascript.rhino.head.Node.newString("");
        node5.removeProp(23);
        node1.addChildToFront(node5);
        com.google.javascript.rhino.head.Node node9 = node1.getFirstChild();
        com.google.javascript.rhino.head.ast.Comment comment10 = node1.getJsDocNode();
        com.google.javascript.rhino.head.ast.Comment comment11 = null;
        // The following exception was thrown during execution in test generation
        try {
            comment10.setJsDocNode(comment11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "40" + "'", str2, "40");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNull(comment10);
    }

    @Test
    public void test1821() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1821");
        com.google.javascript.rhino.head.Node node3 = com.google.javascript.rhino.head.Node.newString("");
        node3.removeProp(23);
        com.google.javascript.rhino.head.Node node8 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str9 = node8.toString();
        boolean boolean10 = node8.hasConsistentReturnUsage();
        boolean boolean11 = node8.hasSideEffects();
        com.google.javascript.rhino.head.Node node12 = new com.google.javascript.rhino.head.Node(0, node8);
        node3.addChildrenToBack(node12);
        com.google.javascript.rhino.head.Node node14 = new com.google.javascript.rhino.head.Node(9, node3);
        com.google.javascript.rhino.head.Node node15 = new com.google.javascript.rhino.head.Node((int) '#', node14);
        java.lang.String str16 = node14.getJsDoc();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "40" + "'", str9, "40");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(str16);
    }

    @Test
    public void test1822() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1822");
        com.google.javascript.rhino.head.Node node2 = new com.google.javascript.rhino.head.Node(4, 8);
        com.google.javascript.rhino.head.Node node6 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str7 = node6.toString();
        boolean boolean8 = node6.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node10 = com.google.javascript.rhino.head.Node.newString("");
        node10.removeProp(23);
        node6.addChildToFront(node10);
        com.google.javascript.rhino.head.Node node14 = node6.getFirstChild();
        node14.setString("100");
        com.google.javascript.rhino.head.ast.Scope scope17 = node14.getScope();
        com.google.javascript.rhino.head.Node node19 = new com.google.javascript.rhino.head.Node((int) ' ', node14, 2);
        com.google.javascript.rhino.head.Node node20 = node14.getLastSibling();
        com.google.javascript.rhino.head.Node node23 = com.google.javascript.rhino.head.Node.newString(23, "");
        com.google.javascript.rhino.head.Node node24 = node23.getLastSibling();
        com.google.javascript.rhino.head.Node node25 = new com.google.javascript.rhino.head.Node((int) ' ', node20, node23);
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor26 = node23.iterator();
        node2.addChildrenToFront(node23);
        node23.setString("35");
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "40" + "'", str7, "40");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNull(scope17);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(nodeItor26);
    }

    @Test
    public void test1823() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1823");
        com.google.javascript.rhino.head.Node node2 = com.google.javascript.rhino.head.Node.newString((-1), "40");
        org.junit.Assert.assertNotNull(node2);
    }

    @Test
    public void test1824() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1824");
        com.google.javascript.rhino.head.Node node3 = com.google.javascript.rhino.head.Node.newString("");
        node3.removeProp(23);
        com.google.javascript.rhino.head.Node node8 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str9 = node8.toString();
        boolean boolean10 = node8.hasConsistentReturnUsage();
        boolean boolean11 = node8.hasSideEffects();
        com.google.javascript.rhino.head.Node node12 = new com.google.javascript.rhino.head.Node(0, node8);
        node3.addChildrenToBack(node12);
        com.google.javascript.rhino.head.Node node14 = new com.google.javascript.rhino.head.Node(9, node3);
        com.google.javascript.rhino.head.Node node15 = new com.google.javascript.rhino.head.Node((int) '#', node14);
        com.google.javascript.rhino.head.Node node17 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        com.google.javascript.rhino.head.Node node19 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str20 = node19.toString();
        boolean boolean21 = node19.hasConsistentReturnUsage();
        boolean boolean22 = node19.hasSideEffects();
        node17.addChildrenToFront(node19);
        node19.removeChildren();
        com.google.javascript.rhino.head.Node node26 = new com.google.javascript.rhino.head.Node((int) (short) 0);
        node14.addChildAfter(node19, node26);
        com.google.javascript.rhino.head.Node node28 = node14.getLastSibling();
        java.util.Spliterator<com.google.javascript.rhino.head.Node> nodeSpliterator29 = node14.spliterator();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "40" + "'", str9, "40");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "40" + "'", str20, "40");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(nodeSpliterator29);
    }

    @Test
    public void test1825() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1825");
        com.google.javascript.rhino.head.Node node4 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str5 = node4.toString();
        boolean boolean6 = node4.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node8 = com.google.javascript.rhino.head.Node.newString("");
        node8.removeProp(23);
        node4.addChildToFront(node8);
        com.google.javascript.rhino.head.Node node12 = node4.getFirstChild();
        node12.setString("100");
        com.google.javascript.rhino.head.ast.Scope scope15 = node12.getScope();
        com.google.javascript.rhino.head.Node node17 = new com.google.javascript.rhino.head.Node((int) ' ', node12, 2);
        boolean boolean18 = node17.hasChildren();
        com.google.javascript.rhino.head.Node node22 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str23 = node22.toString();
        boolean boolean24 = node22.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node26 = com.google.javascript.rhino.head.Node.newString("");
        node26.removeProp(23);
        node22.addChildToFront(node26);
        com.google.javascript.rhino.head.Node node31 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean32 = node31.hasChildren();
        node22.addChildrenToFront(node31);
        int int34 = node31.getLineno();
        com.google.javascript.rhino.head.Node node36 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str37 = node36.toString();
        boolean boolean38 = node36.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node40 = com.google.javascript.rhino.head.Node.newString("");
        node40.removeProp(23);
        node36.addChildToFront(node40);
        com.google.javascript.rhino.head.Node node44 = node36.getFirstChild();
        com.google.javascript.rhino.head.Node node46 = new com.google.javascript.rhino.head.Node((int) (short) 0, node31, node36, 9);
        boolean boolean47 = node31.hasSideEffects();
        com.google.javascript.rhino.head.Node node50 = com.google.javascript.rhino.head.Node.newString(23, "");
        com.google.javascript.rhino.head.Node node51 = node50.getLastSibling();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator52 = node51.new NodeIterator();
        com.google.javascript.rhino.head.Node node54 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str55 = node54.toString();
        boolean boolean56 = node54.hasConsistentReturnUsage();
        boolean boolean57 = node54.hasSideEffects();
        com.google.javascript.rhino.head.Node node59 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str60 = node59.toString();
        boolean boolean61 = node59.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node63 = com.google.javascript.rhino.head.Node.newString("");
        node63.removeProp(23);
        node59.addChildToFront(node63);
        com.google.javascript.rhino.head.Node node67 = node59.getFirstChild();
        com.google.javascript.rhino.head.ast.Comment comment68 = node59.getJsDocNode();
        node54.addChildToBack(node59);
        java.lang.String str70 = node54.toString();
        com.google.javascript.rhino.head.Node node72 = new com.google.javascript.rhino.head.Node(0, node31, node51, node54, 1);
        com.google.javascript.rhino.head.Node node74 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        com.google.javascript.rhino.head.Node node76 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str77 = node76.toString();
        boolean boolean78 = node76.hasConsistentReturnUsage();
        boolean boolean79 = node76.hasSideEffects();
        node74.addChildrenToFront(node76);
        node76.removeChildren();
        com.google.javascript.rhino.head.Node node82 = new com.google.javascript.rhino.head.Node((int) (short) 0, node17, node51, node76);
        com.google.javascript.rhino.head.Node node85 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str86 = node85.toString();
        boolean boolean87 = node85.hasConsistentReturnUsage();
        boolean boolean88 = node85.hasSideEffects();
        com.google.javascript.rhino.head.Node node89 = new com.google.javascript.rhino.head.Node(0, node85);
        com.google.javascript.rhino.head.ast.Comment comment90 = node85.getJsDocNode();
        com.google.javascript.rhino.head.Node node91 = new com.google.javascript.rhino.head.Node(18, node17, node85);
        com.google.javascript.rhino.head.ast.Comment comment92 = node17.getJsDocNode();
        // The following exception was thrown during execution in test generation
        try {
            int int94 = node17.getExistingIntProp(26);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "40" + "'", str5, "40");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNull(scope15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "40" + "'", str23, "40");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "40" + "'", str37, "40");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "40" + "'", str55, "40");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "40" + "'", str60, "40");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertNull(comment68);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "40" + "'", str70, "40");
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "40" + "'", str77, "40");
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(node85);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "40" + "'", str86, "40");
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNull(comment90);
        org.junit.Assert.assertNull(comment92);
    }

    @Test
    public void test1826() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1826");
        com.google.javascript.rhino.head.Node node3 = com.google.javascript.rhino.head.Node.newString(23, "");
        com.google.javascript.rhino.head.Node node4 = node3.getLastSibling();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator5 = node4.new NodeIterator();
        node4.setLineno(13);
        boolean boolean8 = node4.hasSideEffects();
        com.google.javascript.rhino.head.Node node12 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str13 = node12.toString();
        boolean boolean14 = node12.hasConsistentReturnUsage();
        boolean boolean15 = node12.hasSideEffects();
        com.google.javascript.rhino.head.Node node16 = new com.google.javascript.rhino.head.Node(0, node12);
        com.google.javascript.rhino.head.Node node19 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str20 = node19.toString();
        boolean boolean21 = node19.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node23 = com.google.javascript.rhino.head.Node.newString("");
        node23.removeProp(23);
        node19.addChildToFront(node23);
        com.google.javascript.rhino.head.Node node28 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean29 = node28.hasChildren();
        node19.addChildrenToFront(node28);
        com.google.javascript.rhino.head.Node node32 = new com.google.javascript.rhino.head.Node((int) (byte) -1);
        java.lang.String str33 = node32.toString();
        boolean boolean34 = node32.hasChildren();
        com.google.javascript.rhino.head.Node node36 = new com.google.javascript.rhino.head.Node((int) (short) -1, node28, node32, (int) (short) 10);
        com.google.javascript.rhino.head.Node node39 = com.google.javascript.rhino.head.Node.newString(23, "");
        com.google.javascript.rhino.head.Node node41 = new com.google.javascript.rhino.head.Node((int) (byte) 10, node12, node32, node39, (int) (short) 0);
        com.google.javascript.rhino.head.Node node43 = node41.setType(16);
        com.google.javascript.rhino.head.Node node47 = com.google.javascript.rhino.head.Node.newString("hi!");
        com.google.javascript.rhino.head.Node node48 = new com.google.javascript.rhino.head.Node(13, node47);
        com.google.javascript.rhino.head.Node node49 = new com.google.javascript.rhino.head.Node(7, node47);
        com.google.javascript.rhino.head.Node node51 = new com.google.javascript.rhino.head.Node(97, node4, node43, node47, 8);
        com.google.javascript.rhino.head.Node node52 = node43.getLastSibling();
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor53 = node52.iterator();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "40" + "'", str13, "40");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "40" + "'", str20, "40");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "-1" + "'", str33, "-1");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertNotNull(nodeItor53);
    }

    @Test
    public void test1827() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1827");
        com.google.javascript.rhino.head.Node node1 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean2 = node1.hasChildren();
        com.google.javascript.rhino.head.Node node3 = node1.getFirstChild();
        // The following exception was thrown during execution in test generation
        try {
            node3.putIntProp(24, 15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(node3);
    }

    @Test
    public void test1828() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1828");
        com.google.javascript.rhino.head.Node node1 = new com.google.javascript.rhino.head.Node(13);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str2 = node1.getString();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: com.google.javascript.rhino.head.Node cannot be cast to com.google.javascript.rhino.head.ast.Name");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1829() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1829");
        com.google.javascript.rhino.head.Node node1 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        com.google.javascript.rhino.head.Node node2 = node1.getLastSibling();
        com.google.javascript.rhino.head.ast.Comment comment3 = null;
        node2.setJsDocNode(comment3);
        node2.putIntProp(5, (int) (short) 10);
        com.google.javascript.rhino.head.Node node9 = node2.setType(0);
        com.google.javascript.rhino.head.ast.Comment comment10 = null;
        node2.setJsDocNode(comment10);
        node2.putIntProp(23, (int) (byte) 100);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node9);
    }

    @Test
    public void test1830() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1830");
        com.google.javascript.rhino.head.Node node3 = new com.google.javascript.rhino.head.Node((int) (byte) 1, 8);
        java.lang.String str4 = node3.toString();
        com.google.javascript.rhino.head.Node node5 = node3.getLastChild();
        com.google.javascript.rhino.head.Node node8 = com.google.javascript.rhino.head.Node.newString(23, "");
        com.google.javascript.rhino.head.Node node9 = node8.getLastSibling();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator10 = node9.new NodeIterator();
        node9.setLineno(13);
        java.util.Spliterator<com.google.javascript.rhino.head.Node> nodeSpliterator13 = node9.spliterator();
        java.lang.String str14 = node9.toString();
        node3.addChildrenToBack(node9);
        node3.putIntProp(1, 11);
        com.google.javascript.rhino.head.Node node20 = new com.google.javascript.rhino.head.Node((int) ' ', node3, (int) (byte) 100);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "1" + "'", str4, "1");
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(nodeSpliterator13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "23" + "'", str14, "23");
    }

    @Test
    public void test1831() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1831");
        com.google.javascript.rhino.head.Node node2 = com.google.javascript.rhino.head.Node.newString(9, "1");
        org.junit.Assert.assertNotNull(node2);
    }

    @Test
    public void test1832() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1832");
        com.google.javascript.rhino.head.Node node3 = com.google.javascript.rhino.head.Node.newString("hi!");
        com.google.javascript.rhino.head.Node node4 = new com.google.javascript.rhino.head.Node(13, node3);
        com.google.javascript.rhino.head.Node node7 = new com.google.javascript.rhino.head.Node(12);
        node7.putIntProp(14, 3);
        com.google.javascript.rhino.head.Node node11 = new com.google.javascript.rhino.head.Node(6, node7);
        com.google.javascript.rhino.head.Node node12 = node11.getLastChild();
        com.google.javascript.rhino.head.Node node14 = new com.google.javascript.rhino.head.Node((int) (byte) 100, node3, node11, 0);
        com.google.javascript.rhino.head.Node node16 = com.google.javascript.rhino.head.Node.newNumber((double) 1.0f);
        node11.addChildrenToFront(node16);
        node11.setLineno(11);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node16);
    }

    @Test
    public void test1833() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1833");
        com.google.javascript.rhino.head.Node node3 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean4 = node3.hasChildren();
        com.google.javascript.rhino.head.Node node5 = node3.getLastSibling();
        com.google.javascript.rhino.head.Node node9 = com.google.javascript.rhino.head.Node.newString(23, "");
        com.google.javascript.rhino.head.Node node10 = node9.getLastSibling();
        com.google.javascript.rhino.head.Node node14 = com.google.javascript.rhino.head.Node.newString("hi!");
        com.google.javascript.rhino.head.Node node15 = new com.google.javascript.rhino.head.Node(13, node14);
        com.google.javascript.rhino.head.Node node18 = new com.google.javascript.rhino.head.Node(12);
        node18.putIntProp(14, 3);
        com.google.javascript.rhino.head.Node node22 = new com.google.javascript.rhino.head.Node(6, node18);
        com.google.javascript.rhino.head.Node node23 = node22.getLastChild();
        com.google.javascript.rhino.head.Node node25 = new com.google.javascript.rhino.head.Node((int) (byte) 100, node14, node22, 0);
        com.google.javascript.rhino.head.Node node28 = new com.google.javascript.rhino.head.Node((int) (byte) 1, 8);
        node28.putIntProp(20, 100);
        com.google.javascript.rhino.head.Node node32 = new com.google.javascript.rhino.head.Node(20, node10, node14, node28);
        com.google.javascript.rhino.head.Node node35 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str36 = node35.toString();
        boolean boolean37 = node35.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node39 = com.google.javascript.rhino.head.Node.newString("");
        node39.removeProp(23);
        node35.addChildToFront(node39);
        com.google.javascript.rhino.head.Node node43 = new com.google.javascript.rhino.head.Node((int) 'a', node35);
        com.google.javascript.rhino.head.Node node47 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str48 = node47.toString();
        boolean boolean49 = node47.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node51 = com.google.javascript.rhino.head.Node.newString("");
        node51.removeProp(23);
        node47.addChildToFront(node51);
        com.google.javascript.rhino.head.Node node55 = node47.getFirstChild();
        node55.setString("100");
        com.google.javascript.rhino.head.ast.Scope scope58 = node55.getScope();
        com.google.javascript.rhino.head.Node node60 = new com.google.javascript.rhino.head.Node((int) ' ', node55, 2);
        com.google.javascript.rhino.head.Node node61 = node55.getLastSibling();
        com.google.javascript.rhino.head.Node node64 = com.google.javascript.rhino.head.Node.newString(23, "");
        com.google.javascript.rhino.head.Node node65 = node64.getLastSibling();
        com.google.javascript.rhino.head.Node node66 = new com.google.javascript.rhino.head.Node((int) ' ', node61, node64);
        node35.addChildrenToFront(node66);
        com.google.javascript.rhino.head.Node node69 = new com.google.javascript.rhino.head.Node(24, node5, node32, node66, (int) (short) -1);
        int int70 = node5.getType();
        com.google.javascript.rhino.head.Node node71 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.head.Node node73 = new com.google.javascript.rhino.head.Node(8, node5, node71, 25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "40" + "'", str36, "40");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "40" + "'", str48, "40");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNull(scope58);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 40 + "'", int70 == 40);
    }

    @Test
    public void test1834() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1834");
        com.google.javascript.rhino.head.Node node5 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str6 = node5.toString();
        boolean boolean7 = node5.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node9 = com.google.javascript.rhino.head.Node.newString("");
        node9.removeProp(23);
        node5.addChildToFront(node9);
        com.google.javascript.rhino.head.Node node14 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean15 = node14.hasChildren();
        node5.addChildrenToFront(node14);
        int int17 = node14.getLineno();
        com.google.javascript.rhino.head.Node node19 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str20 = node19.toString();
        boolean boolean21 = node19.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node23 = com.google.javascript.rhino.head.Node.newString("");
        node23.removeProp(23);
        node19.addChildToFront(node23);
        com.google.javascript.rhino.head.Node node27 = node19.getFirstChild();
        com.google.javascript.rhino.head.Node node29 = new com.google.javascript.rhino.head.Node((int) (short) 0, node14, node19, 9);
        com.google.javascript.rhino.head.Node node33 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str34 = node33.toString();
        boolean boolean35 = node33.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node37 = com.google.javascript.rhino.head.Node.newString("");
        node37.removeProp(23);
        node33.addChildToFront(node37);
        com.google.javascript.rhino.head.Node node41 = new com.google.javascript.rhino.head.Node((int) 'a', node33);
        com.google.javascript.rhino.head.Node node43 = com.google.javascript.rhino.head.Node.newString("-1");
        com.google.javascript.rhino.head.Node node45 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str46 = node45.toString();
        com.google.javascript.rhino.head.Node node47 = node45.getLastChild();
        com.google.javascript.rhino.head.Node node49 = new com.google.javascript.rhino.head.Node((int) (short) -1, node33, node43, node45, (int) (short) -1);
        com.google.javascript.rhino.head.Node node51 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str52 = node51.toString();
        boolean boolean53 = node51.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node55 = com.google.javascript.rhino.head.Node.newString("");
        node55.removeProp(23);
        node51.addChildToFront(node55);
        com.google.javascript.rhino.head.Node node59 = node51.getFirstChild();
        com.google.javascript.rhino.head.Node node61 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        node59.addChildrenToBack(node61);
        com.google.javascript.rhino.head.Node node63 = node61.getLastChild();
        java.lang.String str64 = node61.getJsDoc();
        java.lang.Object obj66 = node61.getProp(0);
        com.google.javascript.rhino.head.Node node67 = new com.google.javascript.rhino.head.Node(3, node14, node33, node61);
        com.google.javascript.rhino.head.ast.Comment comment68 = node67.getJsDocNode();
        com.google.javascript.rhino.head.Node node70 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str71 = node70.toString();
        boolean boolean72 = node70.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node74 = com.google.javascript.rhino.head.Node.newString("");
        node74.removeProp(23);
        node70.addChildToFront(node74);
        com.google.javascript.rhino.head.Node node78 = node70.getFirstChild();
        node78.setString("100");
        com.google.javascript.rhino.head.Node node81 = node78.getLastSibling();
        node67.addChildrenToBack(node78);
        com.google.javascript.rhino.head.Node node84 = new com.google.javascript.rhino.head.Node(15, node67, (int) (short) -1);
        node67.putIntProp(15, (int) (byte) -1);
        com.google.javascript.rhino.head.Node node89 = new com.google.javascript.rhino.head.Node(17, node67, 17);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "40" + "'", str6, "40");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "40" + "'", str20, "40");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "40" + "'", str34, "40");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "40" + "'", str46, "40");
        org.junit.Assert.assertNull(node47);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "40" + "'", str52, "40");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertNull(node63);
        org.junit.Assert.assertNull(str64);
        org.junit.Assert.assertNull(obj66);
        org.junit.Assert.assertNull(comment68);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "40" + "'", str71, "40");
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertNotNull(node81);
    }

    @Test
    public void test1835() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1835");
        com.google.javascript.rhino.head.Node node2 = com.google.javascript.rhino.head.Node.newString("");
        node2.removeProp(23);
        com.google.javascript.rhino.head.Node node7 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str8 = node7.toString();
        boolean boolean9 = node7.hasConsistentReturnUsage();
        boolean boolean10 = node7.hasSideEffects();
        com.google.javascript.rhino.head.Node node11 = new com.google.javascript.rhino.head.Node(0, node7);
        node2.addChildrenToBack(node11);
        int int13 = node2.getLineno();
        node2.removeChildren();
        node2.setString("23");
        java.lang.String str17 = node2.toString();
        com.google.javascript.rhino.head.Node node19 = new com.google.javascript.rhino.head.Node(25, node2, (int) '4');
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor20 = node2.iterator();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "40" + "'", str8, "40");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "41" + "'", str17, "41");
        org.junit.Assert.assertNotNull(nodeItor20);
    }

    @Test
    public void test1836() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1836");
        com.google.javascript.rhino.head.Node node3 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str4 = node3.toString();
        boolean boolean5 = node3.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node7 = com.google.javascript.rhino.head.Node.newString("");
        node7.removeProp(23);
        node3.addChildToFront(node7);
        com.google.javascript.rhino.head.Node node11 = node3.getFirstChild();
        node11.setString("100");
        com.google.javascript.rhino.head.ast.Scope scope14 = node11.getScope();
        com.google.javascript.rhino.head.Node node16 = new com.google.javascript.rhino.head.Node((int) ' ', node11, 2);
        boolean boolean17 = node16.hasChildren();
        com.google.javascript.rhino.head.Node node20 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str21 = node20.toString();
        boolean boolean22 = node20.hasConsistentReturnUsage();
        boolean boolean23 = node20.hasSideEffects();
        com.google.javascript.rhino.head.Node node24 = new com.google.javascript.rhino.head.Node(0, node20);
        int int25 = node20.getLineno();
        node16.addChildToFront(node20);
        int int27 = node20.getType();
        java.lang.String str28 = node20.getJsDoc();
        com.google.javascript.rhino.head.Node node30 = new com.google.javascript.rhino.head.Node(40, node20, (int) (short) 1);
        boolean boolean31 = node20.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node35 = new com.google.javascript.rhino.head.Node((int) (byte) -1);
        java.lang.String str36 = node35.toString();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode37 = null;
        java.lang.String str38 = node35.toStringTree(scriptNode37);
        com.google.javascript.rhino.head.Node node41 = com.google.javascript.rhino.head.Node.newString(24, "100");
        com.google.javascript.rhino.head.Node node44 = new com.google.javascript.rhino.head.Node(23, 6);
        com.google.javascript.rhino.head.Node node46 = new com.google.javascript.rhino.head.Node(0, node35, node41, node44, 6);
        com.google.javascript.rhino.head.Node node47 = new com.google.javascript.rhino.head.Node(12, node46);
        node20.addChildToBack(node46);
        int int51 = node20.getIntProp((int) 'a', 18);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "40" + "'", str4, "40");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNull(scope14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "40" + "'", str21, "40");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 40 + "'", int27 == 40);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "-1" + "'", str36, "-1");
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 18 + "'", int51 == 18);
    }

    @Test
    public void test1837() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1837");
        com.google.javascript.rhino.head.Node node2 = com.google.javascript.rhino.head.Node.newString(21, "20");
        org.junit.Assert.assertNotNull(node2);
    }

    @Test
    public void test1838() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1838");
        com.google.javascript.rhino.head.Node node3 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str4 = node3.toString();
        boolean boolean5 = node3.hasConsistentReturnUsage();
        boolean boolean6 = node3.hasSideEffects();
        com.google.javascript.rhino.head.Node node7 = new com.google.javascript.rhino.head.Node(0, node3);
        com.google.javascript.rhino.head.Node node10 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str11 = node10.toString();
        boolean boolean12 = node10.hasConsistentReturnUsage();
        boolean boolean13 = node10.hasSideEffects();
        com.google.javascript.rhino.head.Node node15 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str16 = node15.toString();
        boolean boolean17 = node15.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node19 = com.google.javascript.rhino.head.Node.newString("");
        node19.removeProp(23);
        node15.addChildToFront(node19);
        com.google.javascript.rhino.head.Node node23 = node15.getFirstChild();
        com.google.javascript.rhino.head.ast.Comment comment24 = node15.getJsDocNode();
        node10.addChildToBack(node15);
        boolean boolean26 = node15.hasConsistentReturnUsage();
        node3.putProp((int) (short) 1, (java.lang.Object) node15);
        com.google.javascript.rhino.head.Node node30 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str31 = node30.toString();
        boolean boolean32 = node30.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node34 = com.google.javascript.rhino.head.Node.newString("");
        node34.removeProp(23);
        node30.addChildToFront(node34);
        com.google.javascript.rhino.head.Node node38 = node30.getFirstChild();
        node38.setString("100");
        com.google.javascript.rhino.head.ast.Scope scope41 = node38.getScope();
        com.google.javascript.rhino.head.Node node43 = new com.google.javascript.rhino.head.Node((int) ' ', node38, 2);
        java.util.Spliterator<com.google.javascript.rhino.head.Node> nodeSpliterator44 = node38.spliterator();
        node38.putIntProp(100, (int) (byte) 0);
        com.google.javascript.rhino.head.Node node49 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str50 = node49.toString();
        boolean boolean51 = node49.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node53 = com.google.javascript.rhino.head.Node.newString("");
        node53.removeProp(23);
        node49.addChildToFront(node53);
        com.google.javascript.rhino.head.Node node57 = node49.getFirstChild();
        node57.setString("100");
        com.google.javascript.rhino.head.Node node61 = new com.google.javascript.rhino.head.Node(5, node3, node38, node57, 17);
        java.lang.String str62 = node61.toString();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "40" + "'", str4, "40");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "40" + "'", str11, "40");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "40" + "'", str16, "40");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNull(comment24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "40" + "'", str31, "40");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNull(scope41);
        org.junit.Assert.assertNotNull(nodeSpliterator44);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "40" + "'", str50, "40");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "5" + "'", str62, "5");
    }

    @Test
    public void test1839() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1839");
        com.google.javascript.rhino.head.Node node1 = new com.google.javascript.rhino.head.Node(8);
        com.google.javascript.rhino.head.Node node3 = new com.google.javascript.rhino.head.Node((int) (byte) -1);
        java.lang.String str4 = node3.toString();
        com.google.javascript.rhino.head.ast.Comment comment5 = node3.getJsDocNode();
        com.google.javascript.rhino.head.Node node6 = node3.getFirstChild();
        node1.addChildToFront(node3);
        java.lang.Object obj9 = node3.getProp(24);
        com.google.javascript.rhino.head.ast.Scope scope10 = null;
        // The following exception was thrown during execution in test generation
        try {
            node3.setScope(scope10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-1" + "'", str4, "-1");
        org.junit.Assert.assertNull(comment5);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertNull(obj9);
    }

    @Test
    public void test1840() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1840");
        com.google.javascript.rhino.head.Node node1 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        com.google.javascript.rhino.head.Node node3 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str4 = node3.toString();
        boolean boolean5 = node3.hasConsistentReturnUsage();
        boolean boolean6 = node3.hasSideEffects();
        node1.addChildrenToFront(node3);
        node3.removeChildren();
        com.google.javascript.rhino.head.Node node10 = com.google.javascript.rhino.head.Node.newString("hi!");
        node3.addChildrenToBack(node10);
        boolean boolean12 = node3.hasSideEffects();
        com.google.javascript.rhino.head.Node node13 = node3.getFirstChild();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode14 = null;
        java.lang.String str15 = node3.toStringTree(scriptNode14);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "40" + "'", str4, "40");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNull(str15);
    }

    @Test
    public void test1841() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1841");
        com.google.javascript.rhino.head.Node node1 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str2 = node1.toString();
        com.google.javascript.rhino.head.Node node3 = node1.getLastChild();
        com.google.javascript.rhino.head.Node node7 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str8 = node7.toString();
        boolean boolean9 = node7.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node11 = com.google.javascript.rhino.head.Node.newString("");
        node11.removeProp(23);
        node7.addChildToFront(node11);
        com.google.javascript.rhino.head.Node node16 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean17 = node16.hasChildren();
        node7.addChildrenToFront(node16);
        int int19 = node16.getLineno();
        com.google.javascript.rhino.head.Node node21 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str22 = node21.toString();
        boolean boolean23 = node21.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node25 = com.google.javascript.rhino.head.Node.newString("");
        node25.removeProp(23);
        node21.addChildToFront(node25);
        com.google.javascript.rhino.head.Node node29 = node21.getFirstChild();
        com.google.javascript.rhino.head.Node node31 = new com.google.javascript.rhino.head.Node((int) (short) 0, node16, node21, 9);
        com.google.javascript.rhino.head.Node node35 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str36 = node35.toString();
        boolean boolean37 = node35.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node39 = com.google.javascript.rhino.head.Node.newString("");
        node39.removeProp(23);
        node35.addChildToFront(node39);
        com.google.javascript.rhino.head.Node node43 = new com.google.javascript.rhino.head.Node((int) 'a', node35);
        com.google.javascript.rhino.head.Node node45 = com.google.javascript.rhino.head.Node.newString("-1");
        com.google.javascript.rhino.head.Node node47 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str48 = node47.toString();
        com.google.javascript.rhino.head.Node node49 = node47.getLastChild();
        com.google.javascript.rhino.head.Node node51 = new com.google.javascript.rhino.head.Node((int) (short) -1, node35, node45, node47, (int) (short) -1);
        com.google.javascript.rhino.head.Node node53 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str54 = node53.toString();
        boolean boolean55 = node53.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node57 = com.google.javascript.rhino.head.Node.newString("");
        node57.removeProp(23);
        node53.addChildToFront(node57);
        com.google.javascript.rhino.head.Node node61 = node53.getFirstChild();
        com.google.javascript.rhino.head.Node node63 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        node61.addChildrenToBack(node63);
        com.google.javascript.rhino.head.Node node65 = node63.getLastChild();
        java.lang.String str66 = node63.getJsDoc();
        java.lang.Object obj68 = node63.getProp(0);
        com.google.javascript.rhino.head.Node node69 = new com.google.javascript.rhino.head.Node(3, node16, node35, node63);
        com.google.javascript.rhino.head.ast.Comment comment70 = node69.getJsDocNode();
        node1.addChildrenToFront(node69);
        int int72 = node69.getLineno();
        int int75 = node69.getIntProp(25, 9);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "40" + "'", str2, "40");
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "40" + "'", str8, "40");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "40" + "'", str22, "40");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "40" + "'", str36, "40");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "40" + "'", str48, "40");
        org.junit.Assert.assertNull(node49);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "40" + "'", str54, "40");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertNull(node65);
        org.junit.Assert.assertNull(str66);
        org.junit.Assert.assertNull(obj68);
        org.junit.Assert.assertNull(comment70);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-1) + "'", int72 == (-1));
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 9 + "'", int75 == 9);
    }

    @Test
    public void test1842() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1842");
        com.google.javascript.rhino.head.Node node2 = com.google.javascript.rhino.head.Node.newString(3, "100");
        com.google.javascript.rhino.head.Node node4 = node2.setType((int) (short) 0);
        boolean boolean5 = node4.hasConsistentReturnUsage();
        // The following exception was thrown during execution in test generation
        try {
            double double6 = node4.getDouble();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: com.google.javascript.rhino.head.ast.Name cannot be cast to com.google.javascript.rhino.head.ast.NumberLiteral");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
    }

    @Test
    public void test1843() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1843");
        com.google.javascript.rhino.head.Node node3 = com.google.javascript.rhino.head.Node.newString("hi!");
        com.google.javascript.rhino.head.Node node4 = new com.google.javascript.rhino.head.Node(13, node3);
        com.google.javascript.rhino.head.Node node7 = new com.google.javascript.rhino.head.Node(12);
        node7.putIntProp(14, 3);
        com.google.javascript.rhino.head.Node node11 = new com.google.javascript.rhino.head.Node(6, node7);
        com.google.javascript.rhino.head.Node node12 = node11.getLastChild();
        com.google.javascript.rhino.head.Node node14 = new com.google.javascript.rhino.head.Node((int) (byte) 100, node3, node11, 0);
        com.google.javascript.rhino.head.Node node16 = com.google.javascript.rhino.head.Node.newNumber((double) 1.0f);
        node11.addChildrenToFront(node16);
        int int18 = node11.getLineno();
        // The following exception was thrown during execution in test generation
        try {
            int int20 = node11.getExistingIntProp(21);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
    }

    @Test
    public void test1844() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1844");
        com.google.javascript.rhino.head.Node node1 = null;
        com.google.javascript.rhino.head.Node node4 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        com.google.javascript.rhino.head.Node node6 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str7 = node6.toString();
        boolean boolean8 = node6.hasConsistentReturnUsage();
        boolean boolean9 = node6.hasSideEffects();
        node4.addChildrenToFront(node6);
        com.google.javascript.rhino.head.Node node12 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str13 = node12.toString();
        boolean boolean14 = node12.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node16 = com.google.javascript.rhino.head.Node.newString("");
        node16.removeProp(23);
        node12.addChildToFront(node16);
        com.google.javascript.rhino.head.Node node20 = node12.getFirstChild();
        com.google.javascript.rhino.head.Node node22 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        node20.addChildrenToBack(node22);
        node6.addChildrenToBack(node22);
        com.google.javascript.rhino.head.Node node26 = new com.google.javascript.rhino.head.Node(14, node6, 26);
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.head.Node node27 = new com.google.javascript.rhino.head.Node((int) (byte) 1, node1, node26);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "40" + "'", str7, "40");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "40" + "'", str13, "40");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node20);
    }

    @Test
    public void test1845() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1845");
        com.google.javascript.rhino.head.Node node3 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str4 = node3.toString();
        boolean boolean5 = node3.hasConsistentReturnUsage();
        boolean boolean6 = node3.hasSideEffects();
        com.google.javascript.rhino.head.Node node7 = new com.google.javascript.rhino.head.Node(0, node3);
        com.google.javascript.rhino.head.Node node10 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str11 = node10.toString();
        boolean boolean12 = node10.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node14 = com.google.javascript.rhino.head.Node.newString("");
        node14.removeProp(23);
        node10.addChildToFront(node14);
        com.google.javascript.rhino.head.Node node19 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean20 = node19.hasChildren();
        node10.addChildrenToFront(node19);
        com.google.javascript.rhino.head.Node node23 = new com.google.javascript.rhino.head.Node((int) (byte) -1);
        java.lang.String str24 = node23.toString();
        boolean boolean25 = node23.hasChildren();
        com.google.javascript.rhino.head.Node node27 = new com.google.javascript.rhino.head.Node((int) (short) -1, node19, node23, (int) (short) 10);
        com.google.javascript.rhino.head.Node node30 = com.google.javascript.rhino.head.Node.newString(23, "");
        com.google.javascript.rhino.head.Node node32 = new com.google.javascript.rhino.head.Node((int) (byte) 10, node3, node23, node30, (int) (short) 0);
        com.google.javascript.rhino.head.Node node34 = com.google.javascript.rhino.head.Node.newString("");
        node34.removeProp(23);
        com.google.javascript.rhino.head.Node node39 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str40 = node39.toString();
        boolean boolean41 = node39.hasConsistentReturnUsage();
        boolean boolean42 = node39.hasSideEffects();
        com.google.javascript.rhino.head.Node node43 = new com.google.javascript.rhino.head.Node(0, node39);
        node34.addChildrenToBack(node43);
        int int47 = node43.getIntProp(4, (int) (byte) 0);
        node3.addChildToFront(node43);
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.head.ast.Scope scope49 = node3.getScope();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: com.google.javascript.rhino.head.ast.NumberLiteral cannot be cast to com.google.javascript.rhino.head.ast.Name");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "40" + "'", str4, "40");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "40" + "'", str11, "40");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "-1" + "'", str24, "-1");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "40" + "'", str40, "40");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
    }

    @Test
    public void test1846() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1846");
        com.google.javascript.rhino.head.Node node2 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean3 = node2.hasSideEffects();
        com.google.javascript.rhino.head.Node node4 = new com.google.javascript.rhino.head.Node((int) (byte) -1, node2);
        com.google.javascript.rhino.head.Node node5 = node2.getNext();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str6 = node2.getString();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: com.google.javascript.rhino.head.ast.NumberLiteral cannot be cast to com.google.javascript.rhino.head.ast.Name");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(node5);
    }

    @Test
    public void test1847() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1847");
        com.google.javascript.rhino.head.Node node2 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str3 = node2.toString();
        boolean boolean4 = node2.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node6 = com.google.javascript.rhino.head.Node.newString("");
        node6.removeProp(23);
        node2.addChildToFront(node6);
        com.google.javascript.rhino.head.Node node10 = new com.google.javascript.rhino.head.Node((int) 'a', node2);
        com.google.javascript.rhino.head.Node node14 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str15 = node14.toString();
        boolean boolean16 = node14.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node18 = com.google.javascript.rhino.head.Node.newString("");
        node18.removeProp(23);
        node14.addChildToFront(node18);
        com.google.javascript.rhino.head.Node node22 = node14.getFirstChild();
        node22.setString("100");
        com.google.javascript.rhino.head.ast.Scope scope25 = node22.getScope();
        com.google.javascript.rhino.head.Node node27 = new com.google.javascript.rhino.head.Node((int) ' ', node22, 2);
        com.google.javascript.rhino.head.Node node28 = node22.getLastSibling();
        com.google.javascript.rhino.head.Node node31 = com.google.javascript.rhino.head.Node.newString(23, "");
        com.google.javascript.rhino.head.Node node32 = node31.getLastSibling();
        com.google.javascript.rhino.head.Node node33 = new com.google.javascript.rhino.head.Node((int) ' ', node28, node31);
        node2.addChildrenToFront(node33);
        // The following exception was thrown during execution in test generation
        try {
            int int35 = node2.labelId();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "40" + "'", str3, "40");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "40" + "'", str15, "40");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNull(scope25);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(node32);
    }

    @Test
    public void test1848() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1848");
        com.google.javascript.rhino.head.Node node2 = com.google.javascript.rhino.head.Node.newString("");
        int int3 = node2.getLineno();
        com.google.javascript.rhino.head.Node node5 = node2.setType((-1));
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator6 = node2.new NodeIterator();
        com.google.javascript.rhino.head.Node node7 = new com.google.javascript.rhino.head.Node(97, node2);
        com.google.javascript.rhino.head.Node node10 = new com.google.javascript.rhino.head.Node((int) (byte) -1);
        java.lang.String str11 = node10.toString();
        boolean boolean12 = node10.hasChildren();
        com.google.javascript.rhino.head.Node node16 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str17 = node16.toString();
        boolean boolean18 = node16.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node20 = com.google.javascript.rhino.head.Node.newString("");
        node20.removeProp(23);
        node16.addChildToFront(node20);
        com.google.javascript.rhino.head.Node node24 = node16.getFirstChild();
        node24.setString("100");
        com.google.javascript.rhino.head.ast.Scope scope27 = node24.getScope();
        com.google.javascript.rhino.head.Node node29 = new com.google.javascript.rhino.head.Node((int) ' ', node24, 2);
        com.google.javascript.rhino.head.Node node30 = node24.getLastSibling();
        com.google.javascript.rhino.head.Node node33 = com.google.javascript.rhino.head.Node.newString(23, "");
        com.google.javascript.rhino.head.Node node34 = node33.getLastSibling();
        com.google.javascript.rhino.head.Node node35 = new com.google.javascript.rhino.head.Node((int) ' ', node30, node33);
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor36 = node33.iterator();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator37 = node33.new NodeIterator();
        node10.addChildrenToBack(node33);
        com.google.javascript.rhino.head.Node node41 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str42 = node41.toString();
        boolean boolean43 = node41.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node45 = com.google.javascript.rhino.head.Node.newString("");
        node45.removeProp(23);
        node41.addChildToFront(node45);
        com.google.javascript.rhino.head.Node node49 = node41.getFirstChild();
        com.google.javascript.rhino.head.Node node51 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        node49.addChildrenToBack(node51);
        com.google.javascript.rhino.head.Node node54 = com.google.javascript.rhino.head.Node.newString("");
        int int57 = node54.getIntProp(17, (int) (byte) -1);
        com.google.javascript.rhino.head.Node node58 = new com.google.javascript.rhino.head.Node((int) (short) 10, node49, node54);
        com.google.javascript.rhino.head.Node node60 = node49.setType(18);
        com.google.javascript.rhino.head.Node node61 = new com.google.javascript.rhino.head.Node(7, node10, node49);
        node2.addChildrenToBack(node61);
        // The following exception was thrown during execution in test generation
        try {
            int int63 = node61.labelId();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "-1" + "'", str11, "-1");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "40" + "'", str17, "40");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNull(scope27);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(nodeItor36);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "40" + "'", str42, "40");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertNotNull(node60);
    }

    @Test
    public void test1849() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1849");
        com.google.javascript.rhino.head.Node node1 = com.google.javascript.rhino.head.Node.newNumber((double) 1.0f);
        java.lang.Object obj3 = node1.getProp((int) 'a');
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor4 = node1.iterator();
        int int7 = node1.getIntProp((int) (byte) -1, 17);
        com.google.javascript.rhino.head.Node node12 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str13 = node12.toString();
        boolean boolean14 = node12.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node16 = com.google.javascript.rhino.head.Node.newString("");
        node16.removeProp(23);
        node12.addChildToFront(node16);
        com.google.javascript.rhino.head.Node node21 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean22 = node21.hasChildren();
        node12.addChildrenToFront(node21);
        int int24 = node21.getLineno();
        com.google.javascript.rhino.head.Node node26 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str27 = node26.toString();
        boolean boolean28 = node26.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node30 = com.google.javascript.rhino.head.Node.newString("");
        node30.removeProp(23);
        node26.addChildToFront(node30);
        com.google.javascript.rhino.head.Node node34 = node26.getFirstChild();
        com.google.javascript.rhino.head.Node node36 = new com.google.javascript.rhino.head.Node((int) (short) 0, node21, node26, 9);
        com.google.javascript.rhino.head.Node node40 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str41 = node40.toString();
        boolean boolean42 = node40.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node44 = com.google.javascript.rhino.head.Node.newString("");
        node44.removeProp(23);
        node40.addChildToFront(node44);
        com.google.javascript.rhino.head.Node node48 = new com.google.javascript.rhino.head.Node((int) 'a', node40);
        com.google.javascript.rhino.head.Node node50 = com.google.javascript.rhino.head.Node.newString("-1");
        com.google.javascript.rhino.head.Node node52 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str53 = node52.toString();
        com.google.javascript.rhino.head.Node node54 = node52.getLastChild();
        com.google.javascript.rhino.head.Node node56 = new com.google.javascript.rhino.head.Node((int) (short) -1, node40, node50, node52, (int) (short) -1);
        com.google.javascript.rhino.head.Node node58 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str59 = node58.toString();
        boolean boolean60 = node58.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node62 = com.google.javascript.rhino.head.Node.newString("");
        node62.removeProp(23);
        node58.addChildToFront(node62);
        com.google.javascript.rhino.head.Node node66 = node58.getFirstChild();
        com.google.javascript.rhino.head.Node node68 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        node66.addChildrenToBack(node68);
        com.google.javascript.rhino.head.Node node70 = node68.getLastChild();
        java.lang.String str71 = node68.getJsDoc();
        java.lang.Object obj73 = node68.getProp(0);
        com.google.javascript.rhino.head.Node node74 = new com.google.javascript.rhino.head.Node(3, node21, node40, node68);
        com.google.javascript.rhino.head.ast.Comment comment75 = node74.getJsDocNode();
        com.google.javascript.rhino.head.Node node77 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str78 = node77.toString();
        boolean boolean79 = node77.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node81 = com.google.javascript.rhino.head.Node.newString("");
        node81.removeProp(23);
        node77.addChildToFront(node81);
        com.google.javascript.rhino.head.Node node85 = node77.getFirstChild();
        node85.setString("100");
        com.google.javascript.rhino.head.Node node88 = node85.getLastSibling();
        node74.addChildrenToBack(node85);
        node74.removeChildren();
        node1.putProp(32, (java.lang.Object) node74);
        int int94 = node1.getIntProp(26, 0);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNotNull(nodeItor4);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 17 + "'", int7 == 17);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "40" + "'", str13, "40");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "40" + "'", str27, "40");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "40" + "'", str41, "40");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "40" + "'", str53, "40");
        org.junit.Assert.assertNull(node54);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "40" + "'", str59, "40");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertNull(node70);
        org.junit.Assert.assertNull(str71);
        org.junit.Assert.assertNull(obj73);
        org.junit.Assert.assertNull(comment75);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "40" + "'", str78, "40");
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertNotNull(node81);
        org.junit.Assert.assertNotNull(node85);
        org.junit.Assert.assertNotNull(node88);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 0 + "'", int94 == 0);
    }

    @Test
    public void test1850() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1850");
        com.google.javascript.rhino.head.Node node2 = com.google.javascript.rhino.head.Node.newString((int) 'a', "11");
        com.google.javascript.rhino.head.Node node4 = node2.setType((int) (short) 10);
        boolean boolean5 = node4.hasChildren();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode6 = null;
        java.lang.String str7 = node4.toStringTree(scriptNode6);
        java.util.Spliterator<com.google.javascript.rhino.head.Node> nodeSpliterator8 = node4.spliterator();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(nodeSpliterator8);
    }

    @Test
    public void test1851() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1851");
        com.google.javascript.rhino.head.Node node2 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        com.google.javascript.rhino.head.Node node4 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str5 = node4.toString();
        boolean boolean6 = node4.hasConsistentReturnUsage();
        boolean boolean7 = node4.hasSideEffects();
        node2.addChildrenToFront(node4);
        node4.removeChildren();
        com.google.javascript.rhino.head.Node node11 = com.google.javascript.rhino.head.Node.newString("hi!");
        node4.addChildrenToBack(node11);
        com.google.javascript.rhino.head.Node node13 = node4.getFirstChild();
        com.google.javascript.rhino.head.Node node17 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str18 = node17.toString();
        boolean boolean19 = node17.hasConsistentReturnUsage();
        boolean boolean20 = node17.hasSideEffects();
        com.google.javascript.rhino.head.Node node21 = new com.google.javascript.rhino.head.Node(0, node17);
        com.google.javascript.rhino.head.Node node24 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str25 = node24.toString();
        boolean boolean26 = node24.hasConsistentReturnUsage();
        boolean boolean27 = node24.hasSideEffects();
        com.google.javascript.rhino.head.Node node29 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str30 = node29.toString();
        boolean boolean31 = node29.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node33 = com.google.javascript.rhino.head.Node.newString("");
        node33.removeProp(23);
        node29.addChildToFront(node33);
        com.google.javascript.rhino.head.Node node37 = node29.getFirstChild();
        com.google.javascript.rhino.head.ast.Comment comment38 = node29.getJsDocNode();
        node24.addChildToBack(node29);
        boolean boolean40 = node29.hasConsistentReturnUsage();
        node17.putProp((int) (short) 1, (java.lang.Object) node29);
        com.google.javascript.rhino.head.Node node43 = new com.google.javascript.rhino.head.Node((int) '#');
        com.google.javascript.rhino.head.Node node45 = new com.google.javascript.rhino.head.Node((int) (short) 100, node17, node43, 17);
        com.google.javascript.rhino.head.Node node48 = com.google.javascript.rhino.head.Node.newNumber((double) 19);
        com.google.javascript.rhino.head.Node node51 = com.google.javascript.rhino.head.Node.newString("");
        node51.removeProp(23);
        com.google.javascript.rhino.head.Node node56 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str57 = node56.toString();
        boolean boolean58 = node56.hasConsistentReturnUsage();
        boolean boolean59 = node56.hasSideEffects();
        com.google.javascript.rhino.head.Node node60 = new com.google.javascript.rhino.head.Node(0, node56);
        node51.addChildrenToBack(node60);
        com.google.javascript.rhino.head.Node node62 = new com.google.javascript.rhino.head.Node(9, node51);
        com.google.javascript.rhino.head.Node node66 = com.google.javascript.rhino.head.Node.newString("hi!");
        com.google.javascript.rhino.head.Node node67 = new com.google.javascript.rhino.head.Node(13, node66);
        com.google.javascript.rhino.head.Node node68 = new com.google.javascript.rhino.head.Node(7, node66);
        com.google.javascript.rhino.head.Node node70 = new com.google.javascript.rhino.head.Node((int) 'a', node48, node62, node66, (int) (short) 1);
        java.lang.String str71 = node66.getString();
        com.google.javascript.rhino.head.Node node73 = new com.google.javascript.rhino.head.Node(1, node13, node17, node66, 19);
        int int74 = node17.getLineno();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "40" + "'", str5, "40");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "40" + "'", str18, "40");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "40" + "'", str25, "40");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "40" + "'", str30, "40");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNull(comment38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "40" + "'", str57, "40");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "hi!" + "'", str71, "hi!");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + (-1) + "'", int74 == (-1));
    }

    @Test
    public void test1852() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1852");
        com.google.javascript.rhino.head.Node node2 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str3 = node2.toString();
        boolean boolean4 = node2.hasConsistentReturnUsage();
        boolean boolean5 = node2.hasSideEffects();
        com.google.javascript.rhino.head.Node node6 = new com.google.javascript.rhino.head.Node(0, node2);
        int int7 = node2.getLineno();
        node2.removeProp(0);
        com.google.javascript.rhino.head.Node node13 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str14 = node13.toString();
        boolean boolean15 = node13.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node17 = com.google.javascript.rhino.head.Node.newString("");
        node17.removeProp(23);
        node13.addChildToFront(node17);
        com.google.javascript.rhino.head.Node node22 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean23 = node22.hasChildren();
        node13.addChildrenToFront(node22);
        int int25 = node22.getLineno();
        com.google.javascript.rhino.head.Node node27 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str28 = node27.toString();
        boolean boolean29 = node27.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node31 = com.google.javascript.rhino.head.Node.newString("");
        node31.removeProp(23);
        node27.addChildToFront(node31);
        com.google.javascript.rhino.head.Node node35 = node27.getFirstChild();
        com.google.javascript.rhino.head.Node node37 = new com.google.javascript.rhino.head.Node((int) (short) 0, node22, node27, 9);
        boolean boolean38 = node22.hasSideEffects();
        com.google.javascript.rhino.head.Node node40 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        com.google.javascript.rhino.head.Node node42 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str43 = node42.toString();
        boolean boolean44 = node42.hasConsistentReturnUsage();
        boolean boolean45 = node42.hasSideEffects();
        node40.addChildrenToFront(node42);
        node42.removeChildren();
        com.google.javascript.rhino.head.Node node49 = com.google.javascript.rhino.head.Node.newString("hi!");
        node42.addChildrenToBack(node49);
        com.google.javascript.rhino.head.Node node52 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str53 = node52.toString();
        boolean boolean54 = node52.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node56 = com.google.javascript.rhino.head.Node.newString("");
        node56.removeProp(23);
        node52.addChildToFront(node56);
        com.google.javascript.rhino.head.Node node60 = node52.getFirstChild();
        com.google.javascript.rhino.head.Node node62 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        node60.addChildrenToBack(node62);
        com.google.javascript.rhino.head.Node node64 = new com.google.javascript.rhino.head.Node((int) (byte) 1, node22, node42, node62);
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator65 = node64.new NodeIterator();
        int int66 = node64.getLineno();
        node2.addChildToBack(node64);
        node2.removeChildren();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "40" + "'", str3, "40");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "40" + "'", str14, "40");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "40" + "'", str28, "40");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "40" + "'", str43, "40");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "40" + "'", str53, "40");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
    }

    @Test
    public void test1853() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1853");
        com.google.javascript.rhino.head.Node node4 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str5 = node4.toString();
        boolean boolean6 = node4.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node8 = com.google.javascript.rhino.head.Node.newString("");
        node8.removeProp(23);
        node4.addChildToFront(node8);
        com.google.javascript.rhino.head.Node node12 = node4.getFirstChild();
        node12.setString("100");
        com.google.javascript.rhino.head.ast.Scope scope15 = node12.getScope();
        com.google.javascript.rhino.head.Node node17 = new com.google.javascript.rhino.head.Node((int) ' ', node12, 2);
        com.google.javascript.rhino.head.Node node18 = node12.getLastSibling();
        com.google.javascript.rhino.head.Node node21 = com.google.javascript.rhino.head.Node.newString(23, "");
        com.google.javascript.rhino.head.Node node22 = node21.getLastSibling();
        com.google.javascript.rhino.head.Node node23 = new com.google.javascript.rhino.head.Node((int) ' ', node18, node21);
        node21.setLineno((int) (byte) 0);
        com.google.javascript.rhino.head.Node node26 = new com.google.javascript.rhino.head.Node(13, node21);
        com.google.javascript.rhino.head.Node node28 = node21.setType(2);
        node21.putIntProp(40, (int) (short) 100);
        com.google.javascript.rhino.head.Node node34 = com.google.javascript.rhino.head.Node.newString("");
        int int37 = node34.getIntProp(17, (int) (byte) -1);
        com.google.javascript.rhino.head.Node node38 = node34.getFirstChild();
        node21.putProp((int) 'a', (java.lang.Object) node34);
        boolean boolean40 = node34.hasConsistentReturnUsage();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "40" + "'", str5, "40");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNull(scope15);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertNull(node38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
    }

    @Test
    public void test1854() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1854");
        com.google.javascript.rhino.head.Node node2 = com.google.javascript.rhino.head.Node.newString("23");
        node2.removeChildren();
        com.google.javascript.rhino.head.Node node7 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str8 = node7.toString();
        boolean boolean9 = node7.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node11 = com.google.javascript.rhino.head.Node.newString("");
        node11.removeProp(23);
        node7.addChildToFront(node11);
        com.google.javascript.rhino.head.Node node16 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean17 = node16.hasChildren();
        node7.addChildrenToFront(node16);
        int int19 = node16.getLineno();
        com.google.javascript.rhino.head.Node node21 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str22 = node21.toString();
        boolean boolean23 = node21.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node25 = com.google.javascript.rhino.head.Node.newString("");
        node25.removeProp(23);
        node21.addChildToFront(node25);
        com.google.javascript.rhino.head.Node node29 = node21.getFirstChild();
        com.google.javascript.rhino.head.Node node31 = new com.google.javascript.rhino.head.Node((int) (short) 0, node16, node21, 9);
        com.google.javascript.rhino.head.Node node35 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str36 = node35.toString();
        boolean boolean37 = node35.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node39 = com.google.javascript.rhino.head.Node.newString("");
        node39.removeProp(23);
        node35.addChildToFront(node39);
        com.google.javascript.rhino.head.Node node43 = new com.google.javascript.rhino.head.Node((int) 'a', node35);
        com.google.javascript.rhino.head.Node node45 = com.google.javascript.rhino.head.Node.newString("-1");
        com.google.javascript.rhino.head.Node node47 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str48 = node47.toString();
        com.google.javascript.rhino.head.Node node49 = node47.getLastChild();
        com.google.javascript.rhino.head.Node node51 = new com.google.javascript.rhino.head.Node((int) (short) -1, node35, node45, node47, (int) (short) -1);
        com.google.javascript.rhino.head.Node node53 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str54 = node53.toString();
        boolean boolean55 = node53.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node57 = com.google.javascript.rhino.head.Node.newString("");
        node57.removeProp(23);
        node53.addChildToFront(node57);
        com.google.javascript.rhino.head.Node node61 = node53.getFirstChild();
        com.google.javascript.rhino.head.Node node63 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        node61.addChildrenToBack(node63);
        com.google.javascript.rhino.head.Node node65 = node63.getLastChild();
        java.lang.String str66 = node63.getJsDoc();
        java.lang.Object obj68 = node63.getProp(0);
        com.google.javascript.rhino.head.Node node69 = new com.google.javascript.rhino.head.Node(3, node16, node35, node63);
        com.google.javascript.rhino.head.ast.Comment comment70 = node69.getJsDocNode();
        com.google.javascript.rhino.head.Node node72 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str73 = node72.toString();
        boolean boolean74 = node72.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node76 = com.google.javascript.rhino.head.Node.newString("");
        node76.removeProp(23);
        node72.addChildToFront(node76);
        com.google.javascript.rhino.head.Node node80 = node72.getFirstChild();
        node80.setString("100");
        com.google.javascript.rhino.head.Node node83 = node80.getLastSibling();
        node69.addChildrenToBack(node80);
        com.google.javascript.rhino.head.Node node85 = new com.google.javascript.rhino.head.Node(10, node2, node80);
        int int86 = node85.getType();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "40" + "'", str8, "40");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "40" + "'", str22, "40");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "40" + "'", str36, "40");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "40" + "'", str48, "40");
        org.junit.Assert.assertNull(node49);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "40" + "'", str54, "40");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertNull(node65);
        org.junit.Assert.assertNull(str66);
        org.junit.Assert.assertNull(obj68);
        org.junit.Assert.assertNull(comment70);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "40" + "'", str73, "40");
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertNotNull(node80);
        org.junit.Assert.assertNotNull(node83);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 10 + "'", int86 == 10);
    }

    @Test
    public void test1855() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1855");
        com.google.javascript.rhino.head.Node node3 = com.google.javascript.rhino.head.Node.newString("hi!");
        com.google.javascript.rhino.head.Node node4 = new com.google.javascript.rhino.head.Node(13, node3);
        com.google.javascript.rhino.head.Node node5 = new com.google.javascript.rhino.head.Node(7, node3);
        node5.putIntProp((int) (byte) 100, (int) (byte) 1);
        org.junit.Assert.assertNotNull(node3);
    }

    @Test
    public void test1856() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1856");
        com.google.javascript.rhino.head.Node node1 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        com.google.javascript.rhino.head.Node node3 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str4 = node3.toString();
        boolean boolean5 = node3.hasConsistentReturnUsage();
        boolean boolean6 = node3.hasSideEffects();
        node1.addChildrenToFront(node3);
        com.google.javascript.rhino.head.Node node8 = node3.getLastSibling();
        int int9 = node3.getLineno();
        com.google.javascript.rhino.head.ast.Comment comment10 = node3.getJsDocNode();
        com.google.javascript.rhino.head.ast.Scope scope11 = null;
        // The following exception was thrown during execution in test generation
        try {
            node3.setScope(scope11);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "40" + "'", str4, "40");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNull(comment10);
    }

    @Test
    public void test1857() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1857");
        com.google.javascript.rhino.head.Node node1 = com.google.javascript.rhino.head.Node.newNumber((double) 1.0f);
        java.lang.Object obj3 = node1.getProp((int) 'a');
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor4 = node1.iterator();
        int int7 = node1.getIntProp((int) (byte) -1, 17);
        com.google.javascript.rhino.head.Node node11 = com.google.javascript.rhino.head.Node.newString("hi!");
        com.google.javascript.rhino.head.Node node12 = new com.google.javascript.rhino.head.Node(13, node11);
        com.google.javascript.rhino.head.Node node13 = new com.google.javascript.rhino.head.Node(7, node11);
        com.google.javascript.rhino.head.Node node15 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        node13.addChildToFront(node15);
        com.google.javascript.rhino.head.Node node19 = new com.google.javascript.rhino.head.Node(12);
        node19.putIntProp(14, 3);
        com.google.javascript.rhino.head.Node node23 = new com.google.javascript.rhino.head.Node(6, node19);
        com.google.javascript.rhino.head.Node node24 = node23.getLastChild();
        node13.addChildToFront(node23);
        node1.addChildToFront(node23);
        node1.putIntProp(0, 0);
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor30 = node1.iterator();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str31 = node1.getString();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: com.google.javascript.rhino.head.ast.NumberLiteral cannot be cast to com.google.javascript.rhino.head.ast.Name");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNotNull(nodeItor4);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 17 + "'", int7 == 17);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(nodeItor30);
    }

    @Test
    public void test1858() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1858");
        com.google.javascript.rhino.head.Node node3 = new com.google.javascript.rhino.head.Node(23, (int) (short) -1);
        com.google.javascript.rhino.head.Node node6 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str7 = node6.toString();
        boolean boolean8 = node6.hasConsistentReturnUsage();
        boolean boolean9 = node6.hasSideEffects();
        com.google.javascript.rhino.head.Node node10 = new com.google.javascript.rhino.head.Node(0, node6);
        com.google.javascript.rhino.head.Node node11 = node10.getLastChild();
        node10.removeChildren();
        com.google.javascript.rhino.head.Node node14 = new com.google.javascript.rhino.head.Node(19, node3, node10, 24);
        com.google.javascript.rhino.head.Node node17 = new com.google.javascript.rhino.head.Node(11, (int) (byte) 100);
        com.google.javascript.rhino.head.Node node20 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str21 = node20.toString();
        boolean boolean22 = node20.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node24 = com.google.javascript.rhino.head.Node.newString("");
        node24.removeProp(23);
        node20.addChildToFront(node24);
        com.google.javascript.rhino.head.Node node29 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean30 = node29.hasChildren();
        node20.addChildrenToFront(node29);
        com.google.javascript.rhino.head.Node node33 = new com.google.javascript.rhino.head.Node((int) (byte) -1);
        java.lang.String str34 = node33.toString();
        boolean boolean35 = node33.hasChildren();
        com.google.javascript.rhino.head.Node node37 = new com.google.javascript.rhino.head.Node((int) (short) -1, node29, node33, (int) (short) 10);
        com.google.javascript.rhino.head.Node node39 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str40 = node39.toString();
        boolean boolean41 = node39.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node43 = com.google.javascript.rhino.head.Node.newString("");
        node43.removeProp(23);
        node39.addChildToFront(node43);
        com.google.javascript.rhino.head.Node node47 = node43.getLastChild();
        com.google.javascript.rhino.head.Node node49 = com.google.javascript.rhino.head.Node.newString("1");
        node43.addChildrenToBack(node49);
        node17.replaceChildAfter(node29, node43);
        com.google.javascript.rhino.head.Node node52 = null;
        // The following exception was thrown during execution in test generation
        try {
            node3.replaceChild(node29, node52);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "40" + "'", str7, "40");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "40" + "'", str21, "40");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "-1" + "'", str34, "-1");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "40" + "'", str40, "40");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNull(node47);
        org.junit.Assert.assertNotNull(node49);
    }

    @Test
    public void test1859() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1859");
        com.google.javascript.rhino.head.Node node4 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str5 = node4.toString();
        boolean boolean6 = node4.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node8 = com.google.javascript.rhino.head.Node.newString("");
        node8.removeProp(23);
        node4.addChildToFront(node8);
        com.google.javascript.rhino.head.Node node12 = node4.getFirstChild();
        node12.setString("100");
        com.google.javascript.rhino.head.ast.Scope scope15 = node12.getScope();
        com.google.javascript.rhino.head.Node node17 = new com.google.javascript.rhino.head.Node((int) ' ', node12, 2);
        com.google.javascript.rhino.head.Node node18 = node12.getLastSibling();
        com.google.javascript.rhino.head.Node node21 = com.google.javascript.rhino.head.Node.newString(23, "");
        com.google.javascript.rhino.head.Node node22 = node21.getLastSibling();
        com.google.javascript.rhino.head.Node node23 = new com.google.javascript.rhino.head.Node((int) ' ', node18, node21);
        java.lang.String str24 = node18.getString();
        com.google.javascript.rhino.head.Node node26 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str27 = node26.toString();
        boolean boolean28 = node26.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node30 = com.google.javascript.rhino.head.Node.newString("");
        node30.removeProp(23);
        node26.addChildToFront(node30);
        com.google.javascript.rhino.head.Node node35 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean36 = node35.hasChildren();
        node26.addChildrenToFront(node35);
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator38 = node35.new NodeIterator();
        com.google.javascript.rhino.head.Node node40 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str41 = node40.toString();
        com.google.javascript.rhino.head.Node node42 = node40.getLastSibling();
        com.google.javascript.rhino.head.Node node45 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str46 = node45.toString();
        boolean boolean47 = node45.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node49 = com.google.javascript.rhino.head.Node.newString("");
        node49.removeProp(23);
        node45.addChildToFront(node49);
        com.google.javascript.rhino.head.Node node53 = node45.getFirstChild();
        node53.setString("100");
        com.google.javascript.rhino.head.ast.Scope scope56 = node53.getScope();
        com.google.javascript.rhino.head.Node node58 = new com.google.javascript.rhino.head.Node((int) ' ', node53, 2);
        com.google.javascript.rhino.head.Node node59 = node53.getLastSibling();
        node42.addChildToFront(node59);
        node35.addChildrenToFront(node42);
        com.google.javascript.rhino.head.Node node63 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        java.lang.String str64 = node63.toString();
        com.google.javascript.rhino.head.Node node66 = new com.google.javascript.rhino.head.Node((int) (short) 10, node18, node35, node63, 24);
        java.lang.Class<?> wildcardClass67 = node18.getClass();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "40" + "'", str5, "40");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNull(scope15);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "100" + "'", str24, "100");
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "40" + "'", str27, "40");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "40" + "'", str41, "40");
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "40" + "'", str46, "40");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNull(scope56);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "100" + "'", str64, "100");
        org.junit.Assert.assertNotNull(wildcardClass67);
    }

    @Test
    public void test1860() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1860");
        com.google.javascript.rhino.head.Node node3 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str4 = node3.toString();
        boolean boolean5 = node3.hasConsistentReturnUsage();
        boolean boolean6 = node3.hasSideEffects();
        com.google.javascript.rhino.head.Node node7 = new com.google.javascript.rhino.head.Node(0, node3);
        com.google.javascript.rhino.head.Node node10 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str11 = node10.toString();
        boolean boolean12 = node10.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node14 = com.google.javascript.rhino.head.Node.newString("");
        node14.removeProp(23);
        node10.addChildToFront(node14);
        com.google.javascript.rhino.head.Node node19 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean20 = node19.hasChildren();
        node10.addChildrenToFront(node19);
        com.google.javascript.rhino.head.Node node23 = new com.google.javascript.rhino.head.Node((int) (byte) -1);
        java.lang.String str24 = node23.toString();
        boolean boolean25 = node23.hasChildren();
        com.google.javascript.rhino.head.Node node27 = new com.google.javascript.rhino.head.Node((int) (short) -1, node19, node23, (int) (short) 10);
        com.google.javascript.rhino.head.Node node30 = com.google.javascript.rhino.head.Node.newString(23, "");
        com.google.javascript.rhino.head.Node node32 = new com.google.javascript.rhino.head.Node((int) (byte) 10, node3, node23, node30, (int) (short) 0);
        com.google.javascript.rhino.head.Node node34 = node32.setType(16);
        com.google.javascript.rhino.head.Node node35 = node32.getLastSibling();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode36 = null;
        java.lang.String str37 = node35.toStringTree(scriptNode36);
        java.util.Spliterator<com.google.javascript.rhino.head.Node> nodeSpliterator38 = node35.spliterator();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "40" + "'", str4, "40");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "40" + "'", str11, "40");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "-1" + "'", str24, "-1");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNotNull(nodeSpliterator38);
    }

    @Test
    public void test1861() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1861");
        com.google.javascript.rhino.head.Node node2 = com.google.javascript.rhino.head.Node.newNumber((double) 19);
        com.google.javascript.rhino.head.Node node5 = com.google.javascript.rhino.head.Node.newString("");
        node5.removeProp(23);
        com.google.javascript.rhino.head.Node node10 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str11 = node10.toString();
        boolean boolean12 = node10.hasConsistentReturnUsage();
        boolean boolean13 = node10.hasSideEffects();
        com.google.javascript.rhino.head.Node node14 = new com.google.javascript.rhino.head.Node(0, node10);
        node5.addChildrenToBack(node14);
        com.google.javascript.rhino.head.Node node16 = new com.google.javascript.rhino.head.Node(9, node5);
        com.google.javascript.rhino.head.Node node20 = com.google.javascript.rhino.head.Node.newString("hi!");
        com.google.javascript.rhino.head.Node node21 = new com.google.javascript.rhino.head.Node(13, node20);
        com.google.javascript.rhino.head.Node node22 = new com.google.javascript.rhino.head.Node(7, node20);
        com.google.javascript.rhino.head.Node node24 = new com.google.javascript.rhino.head.Node((int) 'a', node2, node16, node20, (int) (short) 1);
        boolean boolean25 = node2.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node27 = node2.setType(3);
        java.lang.String str28 = node27.getJsDoc();
        // The following exception was thrown during execution in test generation
        try {
            int int29 = node27.labelId();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "40" + "'", str11, "40");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNull(str28);
    }

    @Test
    public void test1862() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1862");
        com.google.javascript.rhino.head.Node node1 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str2 = node1.toString();
        boolean boolean3 = node1.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node5 = com.google.javascript.rhino.head.Node.newString("");
        node5.removeProp(23);
        node1.addChildToFront(node5);
        com.google.javascript.rhino.head.Node node9 = node1.getFirstChild();
        com.google.javascript.rhino.head.Node node10 = null;
        // The following exception was thrown during execution in test generation
        try {
            node1.removeChild(node10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "40" + "'", str2, "40");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNotNull(node9);
    }

    @Test
    public void test1863() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1863");
        com.google.javascript.rhino.head.Node node1 = com.google.javascript.rhino.head.Node.newNumber((double) 17);
        org.junit.Assert.assertNotNull(node1);
    }

    @Test
    public void test1864() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1864");
        com.google.javascript.rhino.head.Node node1 = com.google.javascript.rhino.head.Node.newString("22");
        // The following exception was thrown during execution in test generation
        try {
            node1.setDouble((double) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: com.google.javascript.rhino.head.ast.Name cannot be cast to com.google.javascript.rhino.head.ast.NumberLiteral");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
    }

    @Test
    public void test1865() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1865");
        com.google.javascript.rhino.head.Node node3 = com.google.javascript.rhino.head.Node.newString(24, "100");
        int int4 = node3.getType();
        boolean boolean5 = node3.hasChildren();
        com.google.javascript.rhino.head.Node node7 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str8 = node7.toString();
        boolean boolean9 = node7.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node11 = com.google.javascript.rhino.head.Node.newString("");
        node11.removeProp(23);
        node7.addChildToFront(node11);
        com.google.javascript.rhino.head.Node node16 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean17 = node16.hasChildren();
        node7.addChildrenToFront(node16);
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator19 = node16.new NodeIterator();
        boolean boolean20 = node16.hasChildren();
        com.google.javascript.rhino.head.Node node21 = new com.google.javascript.rhino.head.Node(11, node3, node16);
        java.lang.String str22 = node3.toString();
        // The following exception was thrown during execution in test generation
        try {
            int int23 = node3.labelId();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 24 + "'", int4 == 24);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "40" + "'", str8, "40");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "24" + "'", str22, "24");
    }

    @Test
    public void test1866() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1866");
        com.google.javascript.rhino.head.Node node2 = com.google.javascript.rhino.head.Node.newString(23, "");
        com.google.javascript.rhino.head.Node node3 = node2.getLastSibling();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator4 = node3.new NodeIterator();
        node3.setLineno(13);
        java.util.Spliterator<com.google.javascript.rhino.head.Node> nodeSpliterator7 = node3.spliterator();
        com.google.javascript.rhino.head.Node node9 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str10 = node9.toString();
        boolean boolean11 = node9.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node13 = com.google.javascript.rhino.head.Node.newString("");
        node13.removeProp(23);
        node9.addChildToFront(node13);
        com.google.javascript.rhino.head.Node node17 = node13.getLastChild();
        node13.setString("");
        com.google.javascript.rhino.head.Node node21 = node13.setType(25);
        node3.addChildrenToBack(node21);
        java.lang.String str23 = node3.getJsDoc();
        // The following exception was thrown during execution in test generation
        try {
            node3.resetTargets();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(nodeSpliterator7);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "40" + "'", str10, "40");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNull(node17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNull(str23);
    }

    @Test
    public void test1867() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1867");
        com.google.javascript.rhino.head.Node node2 = com.google.javascript.rhino.head.Node.newString((int) 'a', "11");
        com.google.javascript.rhino.head.Node node4 = node2.setType((int) (short) 10);
        boolean boolean5 = node4.hasChildren();
        com.google.javascript.rhino.head.Node node8 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str9 = node8.toString();
        boolean boolean10 = node8.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node12 = com.google.javascript.rhino.head.Node.newString("");
        node12.removeProp(23);
        node8.addChildToFront(node12);
        com.google.javascript.rhino.head.Node node17 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean18 = node17.hasChildren();
        node8.addChildrenToFront(node17);
        int int20 = node17.getLineno();
        com.google.javascript.rhino.head.Node node22 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str23 = node22.toString();
        boolean boolean24 = node22.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node26 = com.google.javascript.rhino.head.Node.newString("");
        node26.removeProp(23);
        node22.addChildToFront(node26);
        com.google.javascript.rhino.head.Node node30 = node22.getFirstChild();
        com.google.javascript.rhino.head.Node node32 = new com.google.javascript.rhino.head.Node((int) (short) 0, node17, node22, 9);
        boolean boolean33 = node17.hasSideEffects();
        node17.removeProp((int) (byte) -1);
        node4.addChildToFront(node17);
        boolean boolean37 = node17.hasChildren();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "40" + "'", str9, "40");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "40" + "'", str23, "40");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    }

    @Test
    public void test1868() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1868");
        com.google.javascript.rhino.head.Node node1 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        com.google.javascript.rhino.head.Node node3 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str4 = node3.toString();
        boolean boolean5 = node3.hasConsistentReturnUsage();
        boolean boolean6 = node3.hasSideEffects();
        node1.addChildrenToFront(node3);
        com.google.javascript.rhino.head.Node node9 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str10 = node9.toString();
        boolean boolean11 = node9.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node13 = com.google.javascript.rhino.head.Node.newString("");
        node13.removeProp(23);
        node9.addChildToFront(node13);
        com.google.javascript.rhino.head.Node node17 = node9.getFirstChild();
        com.google.javascript.rhino.head.Node node19 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        node17.addChildrenToBack(node19);
        node3.addChildrenToBack(node19);
        com.google.javascript.rhino.head.Node node23 = node3.setType(23);
        int int24 = node23.getType();
        com.google.javascript.rhino.head.Node node27 = new com.google.javascript.rhino.head.Node(23);
        com.google.javascript.rhino.head.Node node30 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str31 = node30.toString();
        boolean boolean32 = node30.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node34 = com.google.javascript.rhino.head.Node.newString("");
        node34.removeProp(23);
        node30.addChildToFront(node34);
        node27.putProp((int) ' ', (java.lang.Object) node34);
        com.google.javascript.rhino.head.ast.Comment comment39 = node27.getJsDocNode();
        com.google.javascript.rhino.head.Node node40 = new com.google.javascript.rhino.head.Node((int) (byte) 1, node27);
        com.google.javascript.rhino.head.ast.Comment comment41 = null;
        node40.setJsDocNode(comment41);
        com.google.javascript.rhino.head.Node node46 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str47 = node46.toString();
        boolean boolean48 = node46.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node50 = com.google.javascript.rhino.head.Node.newString("");
        node50.removeProp(23);
        node46.addChildToFront(node50);
        com.google.javascript.rhino.head.Node node54 = new com.google.javascript.rhino.head.Node((int) 'a', node46);
        com.google.javascript.rhino.head.Node node56 = com.google.javascript.rhino.head.Node.newString("-1");
        com.google.javascript.rhino.head.Node node58 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str59 = node58.toString();
        com.google.javascript.rhino.head.Node node60 = node58.getLastChild();
        com.google.javascript.rhino.head.Node node62 = new com.google.javascript.rhino.head.Node((int) (short) -1, node46, node56, node58, (int) (short) -1);
        java.lang.Object obj64 = node46.getProp(0);
        java.lang.String str65 = node46.getJsDoc();
        java.util.Spliterator<com.google.javascript.rhino.head.Node> nodeSpliterator66 = node46.spliterator();
        com.google.javascript.rhino.head.Node node69 = new com.google.javascript.rhino.head.Node(40, 8);
        com.google.javascript.rhino.head.Node node71 = node69.setType((int) (short) 10);
        node46.addChildToBack(node69);
        node40.addChildToFront(node46);
        node23.addChildToBack(node40);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "40" + "'", str4, "40");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "40" + "'", str10, "40");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 23 + "'", int24 == 23);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "40" + "'", str31, "40");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNull(comment39);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "40" + "'", str47, "40");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "40" + "'", str59, "40");
        org.junit.Assert.assertNull(node60);
        org.junit.Assert.assertNull(obj64);
        org.junit.Assert.assertNull(str65);
        org.junit.Assert.assertNotNull(nodeSpliterator66);
        org.junit.Assert.assertNotNull(node71);
    }

    @Test
    public void test1869() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1869");
        com.google.javascript.rhino.head.Node node2 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str3 = node2.toString();
        boolean boolean4 = node2.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node6 = com.google.javascript.rhino.head.Node.newString("");
        node6.removeProp(23);
        node2.addChildToFront(node6);
        com.google.javascript.rhino.head.Node node11 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean12 = node11.hasChildren();
        node2.addChildrenToFront(node11);
        int int14 = node11.getLineno();
        com.google.javascript.rhino.head.Node node16 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str17 = node16.toString();
        boolean boolean18 = node16.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node20 = com.google.javascript.rhino.head.Node.newString("");
        node20.removeProp(23);
        node16.addChildToFront(node20);
        com.google.javascript.rhino.head.Node node24 = node16.getFirstChild();
        com.google.javascript.rhino.head.Node node26 = new com.google.javascript.rhino.head.Node((int) (short) 0, node11, node16, 9);
        com.google.javascript.rhino.head.Node node30 = com.google.javascript.rhino.head.Node.newString(23, "");
        com.google.javascript.rhino.head.Node node31 = node30.getLastSibling();
        com.google.javascript.rhino.head.Node node33 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        com.google.javascript.rhino.head.Node node35 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str36 = node35.toString();
        boolean boolean37 = node35.hasConsistentReturnUsage();
        boolean boolean38 = node35.hasSideEffects();
        node33.addChildrenToFront(node35);
        com.google.javascript.rhino.head.Node node41 = new com.google.javascript.rhino.head.Node(26, node30, node33, 20);
        com.google.javascript.rhino.head.Node node43 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        com.google.javascript.rhino.head.Node node45 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str46 = node45.toString();
        boolean boolean47 = node45.hasConsistentReturnUsage();
        boolean boolean48 = node45.hasSideEffects();
        node43.addChildrenToFront(node45);
        node45.removeChildren();
        com.google.javascript.rhino.head.Node node52 = com.google.javascript.rhino.head.Node.newString("hi!");
        node45.addChildrenToBack(node52);
        boolean boolean54 = node45.hasSideEffects();
        com.google.javascript.rhino.head.Node node55 = node45.getFirstChild();
        node11.replaceChildAfter(node30, node45);
        // The following exception was thrown during execution in test generation
        try {
            node30.labelId((int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "40" + "'", str3, "40");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "40" + "'", str17, "40");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "40" + "'", str36, "40");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "40" + "'", str46, "40");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(node55);
    }

    @Test
    public void test1870() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1870");
        com.google.javascript.rhino.head.Node node1 = new com.google.javascript.rhino.head.Node((int) (short) -1);
        com.google.javascript.rhino.head.Node node2 = node1.getFirstChild();
        org.junit.Assert.assertNull(node2);
    }

    @Test
    public void test1871() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1871");
        com.google.javascript.rhino.head.Node node3 = com.google.javascript.rhino.head.Node.newString("hi!");
        com.google.javascript.rhino.head.Node node4 = new com.google.javascript.rhino.head.Node(13, node3);
        com.google.javascript.rhino.head.Node node5 = new com.google.javascript.rhino.head.Node(7, node3);
        com.google.javascript.rhino.head.Node node7 = com.google.javascript.rhino.head.Node.newString("52");
        com.google.javascript.rhino.head.Node node10 = new com.google.javascript.rhino.head.Node(12, 25);
        boolean boolean11 = node10.hasChildren();
        com.google.javascript.rhino.head.Node node14 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str15 = node14.toString();
        boolean boolean16 = node14.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node18 = com.google.javascript.rhino.head.Node.newString("");
        node18.removeProp(23);
        node14.addChildToFront(node18);
        com.google.javascript.rhino.head.Node node23 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean24 = node23.hasChildren();
        node14.addChildrenToFront(node23);
        int int26 = node23.getLineno();
        com.google.javascript.rhino.head.Node node28 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str29 = node28.toString();
        boolean boolean30 = node28.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node32 = com.google.javascript.rhino.head.Node.newString("");
        node32.removeProp(23);
        node28.addChildToFront(node32);
        com.google.javascript.rhino.head.Node node36 = node28.getFirstChild();
        com.google.javascript.rhino.head.Node node38 = new com.google.javascript.rhino.head.Node((int) (short) 0, node23, node28, 9);
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator39 = node28.new NodeIterator();
        com.google.javascript.rhino.head.Node node43 = com.google.javascript.rhino.head.Node.newString(23, "");
        com.google.javascript.rhino.head.Node node44 = node43.getLastSibling();
        int int45 = node43.getLineno();
        java.util.Spliterator<com.google.javascript.rhino.head.Node> nodeSpliterator46 = node43.spliterator();
        node28.putProp((int) '4', (java.lang.Object) node43);
        com.google.javascript.rhino.head.Node node50 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        java.lang.String str51 = node50.toString();
        int int52 = node50.getLineno();
        com.google.javascript.rhino.head.Node node54 = com.google.javascript.rhino.head.Node.newNumber((double) 0);
        com.google.javascript.rhino.head.ast.Comment comment55 = node54.getJsDocNode();
        com.google.javascript.rhino.head.Node node57 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        com.google.javascript.rhino.head.Node node59 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str60 = node59.toString();
        boolean boolean61 = node59.hasConsistentReturnUsage();
        boolean boolean62 = node59.hasSideEffects();
        node57.addChildrenToFront(node59);
        com.google.javascript.rhino.head.Node node64 = new com.google.javascript.rhino.head.Node(8, node50, node54, node57);
        com.google.javascript.rhino.head.ast.Comment comment65 = null;
        node57.setJsDocNode(comment65);
        node10.addChildBefore(node28, (com.google.javascript.rhino.head.Node) comment65);
        // The following exception was thrown during execution in test generation
        try {
            node5.replaceChild(node7, (com.google.javascript.rhino.head.Node) comment65);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "40" + "'", str15, "40");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "40" + "'", str29, "40");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertNotNull(nodeSpliterator46);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "100" + "'", str51, "100");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNull(comment55);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "40" + "'", str60, "40");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
    }

    @Test
    public void test1872() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1872");
        com.google.javascript.rhino.head.Node node2 = new com.google.javascript.rhino.head.Node(25, 4);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str3 = node2.getString();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: com.google.javascript.rhino.head.Node cannot be cast to com.google.javascript.rhino.head.ast.Name");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1873() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1873");
        com.google.javascript.rhino.head.Node node3 = com.google.javascript.rhino.head.Node.newString(23, "");
        com.google.javascript.rhino.head.Node node4 = node3.getLastSibling();
        com.google.javascript.rhino.head.Node node6 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        com.google.javascript.rhino.head.Node node8 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str9 = node8.toString();
        boolean boolean10 = node8.hasConsistentReturnUsage();
        boolean boolean11 = node8.hasSideEffects();
        node6.addChildrenToFront(node8);
        com.google.javascript.rhino.head.Node node14 = new com.google.javascript.rhino.head.Node(26, node3, node6, 20);
        java.lang.String str15 = node14.getJsDoc();
        boolean boolean16 = node14.hasConsistentReturnUsage();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "40" + "'", str9, "40");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
    }

    @Test
    public void test1874() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1874");
        com.google.javascript.rhino.head.Node node4 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str5 = node4.toString();
        boolean boolean6 = node4.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node8 = com.google.javascript.rhino.head.Node.newString("");
        node8.removeProp(23);
        node4.addChildToFront(node8);
        com.google.javascript.rhino.head.Node node12 = node4.getFirstChild();
        node12.setString("100");
        com.google.javascript.rhino.head.ast.Scope scope15 = node12.getScope();
        com.google.javascript.rhino.head.Node node17 = new com.google.javascript.rhino.head.Node((int) ' ', node12, 2);
        java.util.Spliterator<com.google.javascript.rhino.head.Node> nodeSpliterator18 = node12.spliterator();
        node12.putIntProp(100, (int) (byte) 0);
        com.google.javascript.rhino.head.Node node23 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        com.google.javascript.rhino.head.Node node25 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str26 = node25.toString();
        boolean boolean27 = node25.hasConsistentReturnUsage();
        boolean boolean28 = node25.hasSideEffects();
        node23.addChildrenToFront(node25);
        com.google.javascript.rhino.head.Node node32 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str33 = node32.toString();
        boolean boolean34 = node32.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node36 = com.google.javascript.rhino.head.Node.newString("");
        node36.removeProp(23);
        node32.addChildToFront(node36);
        com.google.javascript.rhino.head.Node node41 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean42 = node41.hasChildren();
        node32.addChildrenToFront(node41);
        int int44 = node41.getLineno();
        com.google.javascript.rhino.head.Node node46 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str47 = node46.toString();
        boolean boolean48 = node46.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node50 = com.google.javascript.rhino.head.Node.newString("");
        node50.removeProp(23);
        node46.addChildToFront(node50);
        com.google.javascript.rhino.head.Node node54 = node46.getFirstChild();
        com.google.javascript.rhino.head.Node node56 = new com.google.javascript.rhino.head.Node((int) (short) 0, node41, node46, 9);
        com.google.javascript.rhino.head.Node node58 = new com.google.javascript.rhino.head.Node((int) (short) 100, node12, node25, node41, 25);
        com.google.javascript.rhino.head.Node node61 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str62 = node61.toString();
        boolean boolean63 = node61.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node65 = com.google.javascript.rhino.head.Node.newString("");
        node65.removeProp(23);
        node61.addChildToFront(node65);
        com.google.javascript.rhino.head.Node node70 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean71 = node70.hasChildren();
        node61.addChildrenToFront(node70);
        int int73 = node70.getLineno();
        com.google.javascript.rhino.head.Node node75 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str76 = node75.toString();
        boolean boolean77 = node75.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node79 = com.google.javascript.rhino.head.Node.newString("");
        node79.removeProp(23);
        node75.addChildToFront(node79);
        com.google.javascript.rhino.head.Node node83 = node75.getFirstChild();
        com.google.javascript.rhino.head.Node node85 = new com.google.javascript.rhino.head.Node((int) (short) 0, node70, node75, 9);
        boolean boolean86 = node70.hasSideEffects();
        com.google.javascript.rhino.head.Node node88 = new com.google.javascript.rhino.head.Node((int) (byte) 0, node41, node70, 7);
        com.google.javascript.rhino.head.Node node89 = node70.getLastChild();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "40" + "'", str5, "40");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNull(scope15);
        org.junit.Assert.assertNotNull(nodeSpliterator18);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "40" + "'", str26, "40");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "40" + "'", str33, "40");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "40" + "'", str47, "40");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "40" + "'", str62, "40");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + (-1) + "'", int73 == (-1));
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "40" + "'", str76, "40");
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertNotNull(node83);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNull(node89);
    }

    @Test
    public void test1875() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1875");
        com.google.javascript.rhino.head.Node node2 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str3 = node2.toString();
        boolean boolean4 = node2.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node6 = com.google.javascript.rhino.head.Node.newString("");
        node6.removeProp(23);
        node2.addChildToFront(node6);
        com.google.javascript.rhino.head.Node node10 = node2.getFirstChild();
        com.google.javascript.rhino.head.ast.Comment comment11 = node2.getJsDocNode();
        int int12 = node2.getType();
        node2.setDouble((double) 17);
        com.google.javascript.rhino.head.Node node16 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str17 = node16.toString();
        boolean boolean18 = node16.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node20 = com.google.javascript.rhino.head.Node.newString("");
        node20.removeProp(23);
        node16.addChildToFront(node20);
        java.lang.String str24 = node20.getString();
        com.google.javascript.rhino.head.Node node27 = com.google.javascript.rhino.head.Node.newString((int) (short) 0, "-1");
        com.google.javascript.rhino.head.Node node29 = new com.google.javascript.rhino.head.Node(10, node2, node20, node27, 14);
        com.google.javascript.rhino.head.Node node33 = com.google.javascript.rhino.head.Node.newString("hi!");
        com.google.javascript.rhino.head.Node node34 = new com.google.javascript.rhino.head.Node(13, node33);
        com.google.javascript.rhino.head.Node node35 = new com.google.javascript.rhino.head.Node(7, node33);
        com.google.javascript.rhino.head.Node node38 = com.google.javascript.rhino.head.Node.newString("hi!");
        com.google.javascript.rhino.head.Node node41 = com.google.javascript.rhino.head.Node.newString(23, "");
        com.google.javascript.rhino.head.Node node42 = new com.google.javascript.rhino.head.Node(0, node38, node41);
        com.google.javascript.rhino.head.Node node43 = node42.getLastSibling();
        node27.addChildAfter(node35, node42);
        com.google.javascript.rhino.head.Node node46 = com.google.javascript.rhino.head.Node.newNumber((double) 0L);
        com.google.javascript.rhino.head.Node node48 = com.google.javascript.rhino.head.Node.newString("");
        node48.removeProp(23);
        com.google.javascript.rhino.head.Node node53 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str54 = node53.toString();
        boolean boolean55 = node53.hasConsistentReturnUsage();
        boolean boolean56 = node53.hasSideEffects();
        com.google.javascript.rhino.head.Node node57 = new com.google.javascript.rhino.head.Node(0, node53);
        node48.addChildrenToBack(node57);
        node46.addChildToFront(node48);
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor60 = node46.iterator();
        com.google.javascript.rhino.head.Node node61 = node46.getFirstChild();
        com.google.javascript.rhino.head.ast.Scope scope62 = node61.getScope();
        // The following exception was thrown during execution in test generation
        try {
            node42.addChildrenToFront((com.google.javascript.rhino.head.Node) scope62);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "40" + "'", str3, "40");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNull(comment11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 40 + "'", int12 == 40);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "40" + "'", str17, "40");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "40" + "'", str54, "40");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(nodeItor60);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertNull(scope62);
    }

    @Test
    public void test1876() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1876");
        com.google.javascript.rhino.head.Node node2 = com.google.javascript.rhino.head.Node.newNumber((double) 19);
        com.google.javascript.rhino.head.Node node5 = com.google.javascript.rhino.head.Node.newString("");
        node5.removeProp(23);
        com.google.javascript.rhino.head.Node node10 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str11 = node10.toString();
        boolean boolean12 = node10.hasConsistentReturnUsage();
        boolean boolean13 = node10.hasSideEffects();
        com.google.javascript.rhino.head.Node node14 = new com.google.javascript.rhino.head.Node(0, node10);
        node5.addChildrenToBack(node14);
        com.google.javascript.rhino.head.Node node16 = new com.google.javascript.rhino.head.Node(9, node5);
        com.google.javascript.rhino.head.Node node20 = com.google.javascript.rhino.head.Node.newString("hi!");
        com.google.javascript.rhino.head.Node node21 = new com.google.javascript.rhino.head.Node(13, node20);
        com.google.javascript.rhino.head.Node node22 = new com.google.javascript.rhino.head.Node(7, node20);
        com.google.javascript.rhino.head.Node node24 = new com.google.javascript.rhino.head.Node((int) 'a', node2, node16, node20, (int) (short) 1);
        boolean boolean25 = node2.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node27 = node2.setType(3);
        com.google.javascript.rhino.head.ast.Comment comment28 = node27.getJsDocNode();
        // The following exception was thrown during execution in test generation
        try {
            int int31 = comment28.getIntProp((int) (short) 100, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "40" + "'", str11, "40");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNull(comment28);
    }

    @Test
    public void test1877() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1877");
        com.google.javascript.rhino.head.Node node1 = null;
        com.google.javascript.rhino.head.Node node4 = com.google.javascript.rhino.head.Node.newString("");
        int int7 = node4.getIntProp(17, (int) (byte) -1);
        com.google.javascript.rhino.head.Node node10 = new com.google.javascript.rhino.head.Node(40, 8);
        com.google.javascript.rhino.head.Node node13 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str14 = node13.toString();
        boolean boolean15 = node13.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node17 = com.google.javascript.rhino.head.Node.newString("");
        node17.removeProp(23);
        node13.addChildToFront(node17);
        com.google.javascript.rhino.head.Node node21 = node13.getFirstChild();
        com.google.javascript.rhino.head.Node node23 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        node21.addChildrenToBack(node23);
        com.google.javascript.rhino.head.Node node26 = com.google.javascript.rhino.head.Node.newString("");
        int int29 = node26.getIntProp(17, (int) (byte) -1);
        com.google.javascript.rhino.head.Node node30 = new com.google.javascript.rhino.head.Node((int) (short) 10, node21, node26);
        com.google.javascript.rhino.head.Node node32 = node21.setType(18);
        node4.addChildAfter(node10, node32);
        com.google.javascript.rhino.head.Node node35 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean36 = node35.hasSideEffects();
        node10.addChildrenToFront(node35);
        com.google.javascript.rhino.head.Node node38 = node10.getNext();
        node10.setLineno(7);
        boolean boolean41 = node10.hasSideEffects();
        com.google.javascript.rhino.head.Node node44 = new com.google.javascript.rhino.head.Node(4, 8);
        com.google.javascript.rhino.head.Node node48 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str49 = node48.toString();
        boolean boolean50 = node48.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node52 = com.google.javascript.rhino.head.Node.newString("");
        node52.removeProp(23);
        node48.addChildToFront(node52);
        com.google.javascript.rhino.head.Node node56 = node48.getFirstChild();
        node56.setString("100");
        com.google.javascript.rhino.head.ast.Scope scope59 = node56.getScope();
        com.google.javascript.rhino.head.Node node61 = new com.google.javascript.rhino.head.Node((int) ' ', node56, 2);
        com.google.javascript.rhino.head.Node node62 = node56.getLastSibling();
        com.google.javascript.rhino.head.Node node65 = com.google.javascript.rhino.head.Node.newString(23, "");
        com.google.javascript.rhino.head.Node node66 = node65.getLastSibling();
        com.google.javascript.rhino.head.Node node67 = new com.google.javascript.rhino.head.Node((int) ' ', node62, node65);
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor68 = node65.iterator();
        node44.addChildrenToFront(node65);
        com.google.javascript.rhino.head.Node node71 = new com.google.javascript.rhino.head.Node(4, node10, node65, 32);
        com.google.javascript.rhino.head.Node node74 = new com.google.javascript.rhino.head.Node(0, (int) (short) 10);
        com.google.javascript.rhino.head.Node node75 = node74.getLastSibling();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.head.Node node76 = new com.google.javascript.rhino.head.Node((int) (short) 0, node1, node10, node74);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "40" + "'", str14, "40");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "40" + "'", str49, "40");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertNull(scope59);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertNotNull(nodeItor68);
        org.junit.Assert.assertNotNull(node75);
    }

    @Test
    public void test1878() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1878");
        com.google.javascript.rhino.head.Node node3 = com.google.javascript.rhino.head.Node.newString(24, "100");
        int int4 = node3.getType();
        boolean boolean5 = node3.hasChildren();
        com.google.javascript.rhino.head.Node node7 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str8 = node7.toString();
        boolean boolean9 = node7.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node11 = com.google.javascript.rhino.head.Node.newString("");
        node11.removeProp(23);
        node7.addChildToFront(node11);
        com.google.javascript.rhino.head.Node node16 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean17 = node16.hasChildren();
        node7.addChildrenToFront(node16);
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator19 = node16.new NodeIterator();
        boolean boolean20 = node16.hasChildren();
        com.google.javascript.rhino.head.Node node21 = new com.google.javascript.rhino.head.Node(11, node3, node16);
        boolean boolean22 = node21.hasConsistentReturnUsage();
        java.lang.String str23 = node21.toString();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 24 + "'", int4 == 24);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "40" + "'", str8, "40");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "11" + "'", str23, "11");
    }

    @Test
    public void test1879() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1879");
        com.google.javascript.rhino.head.Node node6 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str7 = node6.toString();
        boolean boolean8 = node6.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node10 = com.google.javascript.rhino.head.Node.newString("");
        node10.removeProp(23);
        node6.addChildToFront(node10);
        com.google.javascript.rhino.head.Node node14 = node6.getFirstChild();
        node14.setString("100");
        com.google.javascript.rhino.head.ast.Scope scope17 = node14.getScope();
        com.google.javascript.rhino.head.Node node19 = new com.google.javascript.rhino.head.Node((int) ' ', node14, 2);
        com.google.javascript.rhino.head.Node node20 = node14.getLastSibling();
        com.google.javascript.rhino.head.Node node23 = com.google.javascript.rhino.head.Node.newString(23, "");
        com.google.javascript.rhino.head.Node node24 = node23.getLastSibling();
        com.google.javascript.rhino.head.Node node25 = new com.google.javascript.rhino.head.Node((int) ' ', node20, node23);
        node23.setLineno((int) (byte) 0);
        com.google.javascript.rhino.head.Node node28 = new com.google.javascript.rhino.head.Node(13, node23);
        com.google.javascript.rhino.head.Node node30 = com.google.javascript.rhino.head.Node.newNumber((double) 16);
        com.google.javascript.rhino.head.Node node32 = new com.google.javascript.rhino.head.Node(20, node28, node30, 11);
        com.google.javascript.rhino.head.Node node34 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        com.google.javascript.rhino.head.Node node36 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str37 = node36.toString();
        boolean boolean38 = node36.hasConsistentReturnUsage();
        boolean boolean39 = node36.hasSideEffects();
        node34.addChildrenToFront(node36);
        node36.removeChildren();
        com.google.javascript.rhino.head.Node node43 = com.google.javascript.rhino.head.Node.newString("hi!");
        node36.addChildrenToBack(node43);
        com.google.javascript.rhino.head.Node node45 = node36.getFirstChild();
        java.lang.String str46 = node45.getJsDoc();
        com.google.javascript.rhino.head.Node node50 = com.google.javascript.rhino.head.Node.newString("");
        node50.removeProp(23);
        com.google.javascript.rhino.head.Node node55 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str56 = node55.toString();
        boolean boolean57 = node55.hasConsistentReturnUsage();
        boolean boolean58 = node55.hasSideEffects();
        com.google.javascript.rhino.head.Node node59 = new com.google.javascript.rhino.head.Node(0, node55);
        node50.addChildrenToBack(node59);
        com.google.javascript.rhino.head.Node node61 = new com.google.javascript.rhino.head.Node(9, node50);
        com.google.javascript.rhino.head.Node node62 = new com.google.javascript.rhino.head.Node((int) '#', node61);
        com.google.javascript.rhino.head.Node node64 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        com.google.javascript.rhino.head.Node node66 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str67 = node66.toString();
        boolean boolean68 = node66.hasConsistentReturnUsage();
        boolean boolean69 = node66.hasSideEffects();
        node64.addChildrenToFront(node66);
        node66.removeChildren();
        com.google.javascript.rhino.head.Node node73 = new com.google.javascript.rhino.head.Node((int) (short) 0);
        node61.addChildAfter(node66, node73);
        com.google.javascript.rhino.head.Node node75 = node61.getLastSibling();
        com.google.javascript.rhino.head.Node node78 = com.google.javascript.rhino.head.Node.newString("");
        node78.removeProp(23);
        com.google.javascript.rhino.head.Node node83 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str84 = node83.toString();
        boolean boolean85 = node83.hasConsistentReturnUsage();
        boolean boolean86 = node83.hasSideEffects();
        com.google.javascript.rhino.head.Node node87 = new com.google.javascript.rhino.head.Node(0, node83);
        node78.addChildrenToBack(node87);
        com.google.javascript.rhino.head.Node node89 = new com.google.javascript.rhino.head.Node(9, node78);
        node78.removeProp(4);
        com.google.javascript.rhino.head.ast.Scope scope92 = null;
        node78.setScope(scope92);
        node45.addChildAfter(node75, node78);
        com.google.javascript.rhino.head.ast.Scope scope95 = node78.getScope();
        com.google.javascript.rhino.head.Node node97 = new com.google.javascript.rhino.head.Node(21, node30, node78, (int) (byte) 1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode98 = null;
        java.lang.String str99 = node30.toStringTree(scriptNode98);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "40" + "'", str7, "40");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNull(scope17);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "40" + "'", str37, "40");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "40" + "'", str56, "40");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "40" + "'", str67, "40");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertNotNull(node83);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "40" + "'", str84, "40");
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNull(scope95);
        org.junit.Assert.assertNull(str99);
    }

    @Test
    public void test1880() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1880");
        com.google.javascript.rhino.head.Node node1 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        com.google.javascript.rhino.head.Node node3 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str4 = node3.toString();
        boolean boolean5 = node3.hasConsistentReturnUsage();
        boolean boolean6 = node3.hasSideEffects();
        node1.addChildrenToFront(node3);
        com.google.javascript.rhino.head.Node node9 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str10 = node9.toString();
        boolean boolean11 = node9.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node13 = com.google.javascript.rhino.head.Node.newString("");
        node13.removeProp(23);
        node9.addChildToFront(node13);
        com.google.javascript.rhino.head.Node node17 = node9.getFirstChild();
        com.google.javascript.rhino.head.Node node19 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        node17.addChildrenToBack(node19);
        node3.addChildrenToBack(node19);
        node3.setDouble((double) 4);
        // The following exception was thrown during execution in test generation
        try {
            node3.setString("32");
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: com.google.javascript.rhino.head.ast.NumberLiteral cannot be cast to com.google.javascript.rhino.head.ast.Name");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "40" + "'", str4, "40");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "40" + "'", str10, "40");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
    }

    @Test
    public void test1881() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1881");
        com.google.javascript.rhino.head.Node node2 = com.google.javascript.rhino.head.Node.newString(0, "5");
        org.junit.Assert.assertNotNull(node2);
    }

    @Test
    public void test1882() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1882");
        com.google.javascript.rhino.head.Node node2 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str3 = node2.toString();
        boolean boolean4 = node2.hasConsistentReturnUsage();
        boolean boolean5 = node2.hasSideEffects();
        com.google.javascript.rhino.head.Node node7 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str8 = node7.toString();
        boolean boolean9 = node7.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node11 = com.google.javascript.rhino.head.Node.newString("");
        node11.removeProp(23);
        node7.addChildToFront(node11);
        com.google.javascript.rhino.head.Node node15 = node7.getFirstChild();
        com.google.javascript.rhino.head.ast.Comment comment16 = node7.getJsDocNode();
        node2.addChildToBack(node7);
        java.lang.String str18 = node2.toString();
        com.google.javascript.rhino.head.Node node19 = null;
        com.google.javascript.rhino.head.Node node23 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str24 = node23.toString();
        boolean boolean25 = node23.hasConsistentReturnUsage();
        boolean boolean26 = node23.hasSideEffects();
        com.google.javascript.rhino.head.Node node27 = new com.google.javascript.rhino.head.Node(0, node23);
        com.google.javascript.rhino.head.Node node30 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str31 = node30.toString();
        boolean boolean32 = node30.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node34 = com.google.javascript.rhino.head.Node.newString("");
        node34.removeProp(23);
        node30.addChildToFront(node34);
        com.google.javascript.rhino.head.Node node39 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean40 = node39.hasChildren();
        node30.addChildrenToFront(node39);
        com.google.javascript.rhino.head.Node node43 = new com.google.javascript.rhino.head.Node((int) (byte) -1);
        java.lang.String str44 = node43.toString();
        boolean boolean45 = node43.hasChildren();
        com.google.javascript.rhino.head.Node node47 = new com.google.javascript.rhino.head.Node((int) (short) -1, node39, node43, (int) (short) 10);
        com.google.javascript.rhino.head.Node node50 = com.google.javascript.rhino.head.Node.newString(23, "");
        com.google.javascript.rhino.head.Node node52 = new com.google.javascript.rhino.head.Node((int) (byte) 10, node23, node43, node50, (int) (short) 0);
        com.google.javascript.rhino.head.ast.Comment comment53 = null;
        node52.setJsDocNode(comment53);
        com.google.javascript.rhino.head.Node node55 = node52.getLastChild();
        com.google.javascript.rhino.head.Node node57 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str58 = node57.toString();
        boolean boolean59 = node57.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node61 = com.google.javascript.rhino.head.Node.newString("");
        node61.removeProp(23);
        node57.addChildToFront(node61);
        com.google.javascript.rhino.head.Node node66 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean67 = node66.hasChildren();
        node57.addChildrenToFront(node66);
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator69 = node66.new NodeIterator();
        com.google.javascript.rhino.head.Node node71 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str72 = node71.toString();
        com.google.javascript.rhino.head.Node node73 = node71.getLastSibling();
        com.google.javascript.rhino.head.Node node76 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str77 = node76.toString();
        boolean boolean78 = node76.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node80 = com.google.javascript.rhino.head.Node.newString("");
        node80.removeProp(23);
        node76.addChildToFront(node80);
        com.google.javascript.rhino.head.Node node84 = node76.getFirstChild();
        node84.setString("100");
        com.google.javascript.rhino.head.ast.Scope scope87 = node84.getScope();
        com.google.javascript.rhino.head.Node node89 = new com.google.javascript.rhino.head.Node((int) ' ', node84, 2);
        com.google.javascript.rhino.head.Node node90 = node84.getLastSibling();
        node73.addChildToFront(node90);
        node66.addChildrenToFront(node73);
        node55.addChildToFront(node73);
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.head.Node node95 = new com.google.javascript.rhino.head.Node(8, node2, node19, node55, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "40" + "'", str3, "40");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "40" + "'", str8, "40");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNull(comment16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "40" + "'", str18, "40");
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "40" + "'", str24, "40");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "40" + "'", str31, "40");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "-1" + "'", str44, "-1");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "40" + "'", str58, "40");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "40" + "'", str72, "40");
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "40" + "'", str77, "40");
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertNotNull(node80);
        org.junit.Assert.assertNotNull(node84);
        org.junit.Assert.assertNull(scope87);
        org.junit.Assert.assertNotNull(node90);
    }

    @Test
    public void test1883() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1883");
        com.google.javascript.rhino.head.Node node2 = new com.google.javascript.rhino.head.Node((int) ' ', 4);
        com.google.javascript.rhino.head.ast.Comment comment3 = null;
        node2.setJsDocNode(comment3);
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor5 = node2.iterator();
        org.junit.Assert.assertNotNull(nodeItor5);
    }

    @Test
    public void test1884() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1884");
        com.google.javascript.rhino.head.Node node2 = new com.google.javascript.rhino.head.Node(12);
        node2.putIntProp(14, 3);
        com.google.javascript.rhino.head.Node node6 = new com.google.javascript.rhino.head.Node(6, node2);
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor7 = node6.iterator();
        java.lang.Object obj9 = node6.getProp(3);
        com.google.javascript.rhino.head.ast.Scope scope10 = null;
        // The following exception was thrown during execution in test generation
        try {
            node6.setScope(scope10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeItor7);
        org.junit.Assert.assertNull(obj9);
    }

    @Test
    public void test1885() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1885");
        com.google.javascript.rhino.head.Node node1 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str2 = node1.toString();
        boolean boolean3 = node1.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node5 = com.google.javascript.rhino.head.Node.newString("");
        node5.removeProp(23);
        node1.addChildToFront(node5);
        com.google.javascript.rhino.head.Node node9 = node5.getLastChild();
        com.google.javascript.rhino.head.Node node11 = com.google.javascript.rhino.head.Node.newString("1");
        node5.addChildrenToBack(node11);
        com.google.javascript.rhino.head.Node node16 = com.google.javascript.rhino.head.Node.newString(12, "40");
        boolean boolean17 = node16.hasConsistentReturnUsage();
        int int20 = node16.getIntProp(15, 21);
        boolean boolean21 = node16.hasChildren();
        com.google.javascript.rhino.head.Node node23 = node16.setType(0);
        node5.putProp(17, (java.lang.Object) node16);
        node5.putIntProp(13, 10);
        java.lang.String str28 = node5.getString();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "40" + "'", str2, "40");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 21 + "'", int20 == 21);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
    }

    @Test
    public void test1886() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1886");
        com.google.javascript.rhino.head.Node node2 = com.google.javascript.rhino.head.Node.newString(7, "1");
        org.junit.Assert.assertNotNull(node2);
    }

    @Test
    public void test1887() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1887");
        com.google.javascript.rhino.head.Node node4 = new com.google.javascript.rhino.head.Node(12);
        node4.putIntProp(14, 3);
        com.google.javascript.rhino.head.Node node8 = new com.google.javascript.rhino.head.Node(6, node4);
        com.google.javascript.rhino.head.Node node9 = node8.getLastChild();
        com.google.javascript.rhino.head.Node node12 = com.google.javascript.rhino.head.Node.newString(23, "");
        com.google.javascript.rhino.head.Node node13 = node12.getLastSibling();
        com.google.javascript.rhino.head.Node node14 = node12.getLastSibling();
        com.google.javascript.rhino.head.Node node16 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str17 = node16.toString();
        boolean boolean18 = node16.hasConsistentReturnUsage();
        boolean boolean19 = node16.hasSideEffects();
        node16.setLineno((int) '4');
        com.google.javascript.rhino.head.Node node23 = node16.setType((int) '4');
        int int24 = node23.getLineno();
        com.google.javascript.rhino.head.Node node26 = new com.google.javascript.rhino.head.Node(24, node9, node12, node23, 8);
        com.google.javascript.rhino.head.Node node29 = new com.google.javascript.rhino.head.Node((int) (byte) 1, 8);
        com.google.javascript.rhino.head.Node node32 = com.google.javascript.rhino.head.Node.newString("hi!");
        com.google.javascript.rhino.head.Node node35 = com.google.javascript.rhino.head.Node.newString(23, "");
        com.google.javascript.rhino.head.Node node36 = new com.google.javascript.rhino.head.Node(0, node32, node35);
        int int37 = node32.getLineno();
        boolean boolean38 = node32.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node39 = new com.google.javascript.rhino.head.Node(8, node12, node29, node32);
        com.google.javascript.rhino.head.ast.Comment comment40 = node12.getJsDocNode();
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "40" + "'", str17, "40");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 52 + "'", int24 == 52);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNull(comment40);
    }

    @Test
    public void test1888() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1888");
        com.google.javascript.rhino.head.Node node3 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str4 = node3.toString();
        boolean boolean5 = node3.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node7 = com.google.javascript.rhino.head.Node.newString("");
        node7.removeProp(23);
        node3.addChildToFront(node7);
        com.google.javascript.rhino.head.Node node11 = node3.getFirstChild();
        com.google.javascript.rhino.head.Node node13 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        node11.addChildrenToBack(node13);
        com.google.javascript.rhino.head.Node node16 = com.google.javascript.rhino.head.Node.newString("");
        int int19 = node16.getIntProp(17, (int) (byte) -1);
        com.google.javascript.rhino.head.Node node20 = new com.google.javascript.rhino.head.Node((int) (short) 10, node11, node16);
        com.google.javascript.rhino.head.Node node21 = node11.getNext();
        node21.removeProp(6);
        com.google.javascript.rhino.head.Node node25 = node21.setType(6);
        com.google.javascript.rhino.head.Node node26 = new com.google.javascript.rhino.head.Node((int) (byte) 10, node25);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "40" + "'", str4, "40");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node25);
    }

    @Test
    public void test1889() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1889");
        com.google.javascript.rhino.head.Node node2 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str3 = node2.toString();
        boolean boolean4 = node2.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node6 = com.google.javascript.rhino.head.Node.newString("");
        node6.removeProp(23);
        node2.addChildToFront(node6);
        com.google.javascript.rhino.head.Node node11 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean12 = node11.hasChildren();
        node2.addChildrenToFront(node11);
        int int14 = node11.getLineno();
        com.google.javascript.rhino.head.Node node16 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str17 = node16.toString();
        boolean boolean18 = node16.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node20 = com.google.javascript.rhino.head.Node.newString("");
        node20.removeProp(23);
        node16.addChildToFront(node20);
        com.google.javascript.rhino.head.Node node24 = node16.getFirstChild();
        com.google.javascript.rhino.head.Node node26 = new com.google.javascript.rhino.head.Node((int) (short) 0, node11, node16, 9);
        boolean boolean27 = node11.hasSideEffects();
        node11.removeProp((int) (byte) -1);
        com.google.javascript.rhino.head.Node node32 = new com.google.javascript.rhino.head.Node(52, (int) 'a');
        node11.addChildrenToFront(node32);
        com.google.javascript.rhino.head.Node node36 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str37 = node36.toString();
        boolean boolean38 = node36.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node40 = com.google.javascript.rhino.head.Node.newString("");
        node40.removeProp(23);
        node36.addChildToFront(node40);
        com.google.javascript.rhino.head.Node node44 = node36.getFirstChild();
        node44.setString("100");
        com.google.javascript.rhino.head.ast.Scope scope47 = node44.getScope();
        com.google.javascript.rhino.head.Node node49 = new com.google.javascript.rhino.head.Node((int) ' ', node44, 2);
        boolean boolean50 = node49.hasChildren();
        com.google.javascript.rhino.head.Node node53 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str54 = node53.toString();
        boolean boolean55 = node53.hasConsistentReturnUsage();
        boolean boolean56 = node53.hasSideEffects();
        com.google.javascript.rhino.head.Node node57 = new com.google.javascript.rhino.head.Node(0, node53);
        int int58 = node53.getLineno();
        node49.addChildToFront(node53);
        boolean boolean60 = node53.hasSideEffects();
        boolean boolean61 = node53.hasChildren();
        node11.addChildrenToFront(node53);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "40" + "'", str3, "40");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "40" + "'", str17, "40");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "40" + "'", str37, "40");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNull(scope47);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "40" + "'", str54, "40");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-1) + "'", int58 == (-1));
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
    }

    @Test
    public void test1890() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1890");
        com.google.javascript.rhino.head.Node node2 = com.google.javascript.rhino.head.Node.newString(22, "hi!");
        org.junit.Assert.assertNotNull(node2);
    }

    @Test
    public void test1891() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1891");
        com.google.javascript.rhino.head.Node node3 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str4 = node3.toString();
        boolean boolean5 = node3.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node7 = com.google.javascript.rhino.head.Node.newString("");
        node7.removeProp(23);
        node3.addChildToFront(node7);
        com.google.javascript.rhino.head.Node node12 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean13 = node12.hasChildren();
        node3.addChildrenToFront(node12);
        int int15 = node12.getLineno();
        com.google.javascript.rhino.head.Node node17 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str18 = node17.toString();
        boolean boolean19 = node17.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node21 = com.google.javascript.rhino.head.Node.newString("");
        node21.removeProp(23);
        node17.addChildToFront(node21);
        com.google.javascript.rhino.head.Node node25 = node17.getFirstChild();
        com.google.javascript.rhino.head.Node node27 = new com.google.javascript.rhino.head.Node((int) (short) 0, node12, node17, 9);
        com.google.javascript.rhino.head.Node node31 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str32 = node31.toString();
        boolean boolean33 = node31.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node35 = com.google.javascript.rhino.head.Node.newString("");
        node35.removeProp(23);
        node31.addChildToFront(node35);
        com.google.javascript.rhino.head.Node node39 = new com.google.javascript.rhino.head.Node((int) 'a', node31);
        com.google.javascript.rhino.head.Node node41 = com.google.javascript.rhino.head.Node.newString("-1");
        com.google.javascript.rhino.head.Node node43 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str44 = node43.toString();
        com.google.javascript.rhino.head.Node node45 = node43.getLastChild();
        com.google.javascript.rhino.head.Node node47 = new com.google.javascript.rhino.head.Node((int) (short) -1, node31, node41, node43, (int) (short) -1);
        com.google.javascript.rhino.head.Node node49 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str50 = node49.toString();
        boolean boolean51 = node49.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node53 = com.google.javascript.rhino.head.Node.newString("");
        node53.removeProp(23);
        node49.addChildToFront(node53);
        com.google.javascript.rhino.head.Node node57 = node49.getFirstChild();
        com.google.javascript.rhino.head.Node node59 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        node57.addChildrenToBack(node59);
        com.google.javascript.rhino.head.Node node61 = node59.getLastChild();
        java.lang.String str62 = node59.getJsDoc();
        java.lang.Object obj64 = node59.getProp(0);
        com.google.javascript.rhino.head.Node node65 = new com.google.javascript.rhino.head.Node(3, node12, node31, node59);
        com.google.javascript.rhino.head.Node node66 = node59.getLastSibling();
        node59.removeProp(40);
        com.google.javascript.rhino.head.Node node69 = null;
        // The following exception was thrown during execution in test generation
        try {
            node59.addChildrenToBack(node69);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "40" + "'", str4, "40");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "40" + "'", str18, "40");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "40" + "'", str32, "40");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "40" + "'", str44, "40");
        org.junit.Assert.assertNull(node45);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "40" + "'", str50, "40");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertNull(node61);
        org.junit.Assert.assertNull(str62);
        org.junit.Assert.assertNull(obj64);
        org.junit.Assert.assertNotNull(node66);
    }

    @Test
    public void test1892() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1892");
        com.google.javascript.rhino.head.Node node3 = com.google.javascript.rhino.head.Node.newString((int) '4', "hi!");
        com.google.javascript.rhino.head.Node node7 = com.google.javascript.rhino.head.Node.newString("hi!");
        com.google.javascript.rhino.head.Node node8 = new com.google.javascript.rhino.head.Node(13, node7);
        com.google.javascript.rhino.head.Node node9 = new com.google.javascript.rhino.head.Node(7, node7);
        com.google.javascript.rhino.head.Node node11 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        node9.addChildToFront(node11);
        com.google.javascript.rhino.head.Node node15 = new com.google.javascript.rhino.head.Node(12);
        node15.putIntProp(14, 3);
        com.google.javascript.rhino.head.Node node19 = new com.google.javascript.rhino.head.Node(6, node15);
        com.google.javascript.rhino.head.Node node20 = node19.getLastChild();
        node9.addChildToFront(node19);
        com.google.javascript.rhino.head.Node node22 = new com.google.javascript.rhino.head.Node(97, node3, node9);
        // The following exception was thrown during execution in test generation
        try {
            double double23 = node9.getDouble();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: com.google.javascript.rhino.head.Node cannot be cast to com.google.javascript.rhino.head.ast.NumberLiteral");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node20);
    }

    @Test
    public void test1893() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1893");
        com.google.javascript.rhino.head.Node node3 = new com.google.javascript.rhino.head.Node(25, 26);
        com.google.javascript.rhino.head.ast.Comment comment4 = node3.getJsDocNode();
        com.google.javascript.rhino.head.Node node6 = new com.google.javascript.rhino.head.Node(7, node3, 25);
        com.google.javascript.rhino.head.ast.Comment comment7 = node3.getJsDocNode();
        org.junit.Assert.assertNull(comment4);
        org.junit.Assert.assertNull(comment7);
    }

    @Test
    public void test1894() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1894");
        com.google.javascript.rhino.head.Node node2 = new com.google.javascript.rhino.head.Node(40, 8);
        com.google.javascript.rhino.head.Node node4 = node2.setType((int) (short) 10);
        com.google.javascript.rhino.head.Node node6 = new com.google.javascript.rhino.head.Node((int) (byte) -1);
        java.lang.String str7 = node6.toString();
        com.google.javascript.rhino.head.ast.Comment comment8 = node6.getJsDocNode();
        com.google.javascript.rhino.head.ast.Comment comment9 = node6.getJsDocNode();
        com.google.javascript.rhino.head.Node node11 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str12 = node11.toString();
        boolean boolean13 = node11.hasConsistentReturnUsage();
        node6.addChildToBack(node11);
        com.google.javascript.rhino.head.Node node17 = new com.google.javascript.rhino.head.Node((int) (byte) -1);
        java.lang.String str18 = node17.toString();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode19 = null;
        java.lang.String str20 = node17.toStringTree(scriptNode19);
        com.google.javascript.rhino.head.Node node23 = com.google.javascript.rhino.head.Node.newString(24, "100");
        com.google.javascript.rhino.head.Node node26 = new com.google.javascript.rhino.head.Node(23, 6);
        com.google.javascript.rhino.head.Node node28 = new com.google.javascript.rhino.head.Node(0, node17, node23, node26, 6);
        node4.addChildAfter(node6, node26);
        // The following exception was thrown during execution in test generation
        try {
            node4.setString("8");
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: com.google.javascript.rhino.head.Node cannot be cast to com.google.javascript.rhino.head.ast.Name");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "-1" + "'", str7, "-1");
        org.junit.Assert.assertNull(comment8);
        org.junit.Assert.assertNull(comment9);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "40" + "'", str12, "40");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "-1" + "'", str18, "-1");
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(node23);
    }

    @Test
    public void test1895() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1895");
        com.google.javascript.rhino.head.Node node1 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str2 = node1.toString();
        boolean boolean3 = node1.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node5 = com.google.javascript.rhino.head.Node.newString("");
        node5.removeProp(23);
        node1.addChildToFront(node5);
        com.google.javascript.rhino.head.Node node9 = node1.getFirstChild();
        com.google.javascript.rhino.head.ast.Comment comment10 = node1.getJsDocNode();
        int int11 = node1.getType();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator12 = node1.new NodeIterator();
        boolean boolean13 = nodeIterator12.hasNext();
        boolean boolean14 = nodeIterator12.hasNext();
        // The following exception was thrown during execution in test generation
        try {
            nodeIterator12.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: next() has not been called");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "40" + "'", str2, "40");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNull(comment10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 40 + "'", int11 == 40);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
    }

    @Test
    public void test1896() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1896");
        com.google.javascript.rhino.head.Node node2 = com.google.javascript.rhino.head.Node.newNumber((double) 19);
        com.google.javascript.rhino.head.Node node5 = com.google.javascript.rhino.head.Node.newString("");
        node5.removeProp(23);
        com.google.javascript.rhino.head.Node node10 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str11 = node10.toString();
        boolean boolean12 = node10.hasConsistentReturnUsage();
        boolean boolean13 = node10.hasSideEffects();
        com.google.javascript.rhino.head.Node node14 = new com.google.javascript.rhino.head.Node(0, node10);
        node5.addChildrenToBack(node14);
        com.google.javascript.rhino.head.Node node16 = new com.google.javascript.rhino.head.Node(9, node5);
        com.google.javascript.rhino.head.Node node20 = com.google.javascript.rhino.head.Node.newString("hi!");
        com.google.javascript.rhino.head.Node node21 = new com.google.javascript.rhino.head.Node(13, node20);
        com.google.javascript.rhino.head.Node node22 = new com.google.javascript.rhino.head.Node(7, node20);
        com.google.javascript.rhino.head.Node node24 = new com.google.javascript.rhino.head.Node((int) 'a', node2, node16, node20, (int) (short) 1);
        com.google.javascript.rhino.head.Node node26 = new com.google.javascript.rhino.head.Node(7);
        node20.addChildrenToBack(node26);
        // The following exception was thrown during execution in test generation
        try {
            node26.setString("-1");
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: com.google.javascript.rhino.head.Node cannot be cast to com.google.javascript.rhino.head.ast.Name");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "40" + "'", str11, "40");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node20);
    }

    @Test
    public void test1897() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1897");
        com.google.javascript.rhino.head.Node node1 = com.google.javascript.rhino.head.Node.newString("52");
        node1.setLineno(11);
        com.google.javascript.rhino.head.ast.Scope scope4 = null;
        node1.setScope(scope4);
        org.junit.Assert.assertNotNull(node1);
    }

    @Test
    public void test1898() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1898");
        com.google.javascript.rhino.head.Node node3 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str4 = node3.toString();
        boolean boolean5 = node3.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node7 = com.google.javascript.rhino.head.Node.newString("");
        node7.removeProp(23);
        node3.addChildToFront(node7);
        com.google.javascript.rhino.head.Node node12 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean13 = node12.hasChildren();
        node3.addChildrenToFront(node12);
        com.google.javascript.rhino.head.Node node16 = new com.google.javascript.rhino.head.Node((int) (byte) -1);
        java.lang.String str17 = node16.toString();
        boolean boolean18 = node16.hasChildren();
        com.google.javascript.rhino.head.Node node20 = new com.google.javascript.rhino.head.Node((int) (short) -1, node12, node16, (int) (short) 10);
        com.google.javascript.rhino.head.Node node21 = node20.getLastChild();
        com.google.javascript.rhino.head.Node node26 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str27 = node26.toString();
        boolean boolean28 = node26.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node30 = com.google.javascript.rhino.head.Node.newString("");
        node30.removeProp(23);
        node26.addChildToFront(node30);
        com.google.javascript.rhino.head.Node node34 = new com.google.javascript.rhino.head.Node((int) 'a', node26);
        com.google.javascript.rhino.head.Node node36 = com.google.javascript.rhino.head.Node.newString("-1");
        com.google.javascript.rhino.head.Node node38 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str39 = node38.toString();
        com.google.javascript.rhino.head.Node node40 = node38.getLastChild();
        com.google.javascript.rhino.head.Node node42 = new com.google.javascript.rhino.head.Node((int) (short) -1, node26, node36, node38, (int) (short) -1);
        com.google.javascript.rhino.head.Node node44 = new com.google.javascript.rhino.head.Node((int) (short) 1, node38, 12);
        com.google.javascript.rhino.head.Node node46 = new com.google.javascript.rhino.head.Node(23);
        node46.removeProp(25);
        boolean boolean49 = node46.hasChildren();
        com.google.javascript.rhino.head.Node node50 = new com.google.javascript.rhino.head.Node((-1), node21, node38, node46);
        com.google.javascript.rhino.head.Node node51 = node50.getLastSibling();
        node51.removeProp(40);
        java.lang.Object obj55 = node51.getProp((int) (byte) -1);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "40" + "'", str4, "40");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "-1" + "'", str17, "-1");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "40" + "'", str27, "40");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "40" + "'", str39, "40");
        org.junit.Assert.assertNull(node40);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNull(obj55);
    }

    @Test
    public void test1899() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1899");
        com.google.javascript.rhino.head.Node node1 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str2 = node1.toString();
        boolean boolean3 = node1.hasConsistentReturnUsage();
        boolean boolean4 = node1.hasSideEffects();
        com.google.javascript.rhino.head.Node node6 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str7 = node6.toString();
        boolean boolean8 = node6.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node10 = com.google.javascript.rhino.head.Node.newString("");
        node10.removeProp(23);
        node6.addChildToFront(node10);
        com.google.javascript.rhino.head.Node node14 = node6.getFirstChild();
        com.google.javascript.rhino.head.ast.Comment comment15 = node6.getJsDocNode();
        node1.addChildToBack(node6);
        java.lang.String str17 = node1.toString();
        com.google.javascript.rhino.head.Node node19 = node1.setType(25);
        int int22 = node1.getIntProp(100, (int) (byte) 0);
        com.google.javascript.rhino.head.Node node27 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str28 = node27.toString();
        boolean boolean29 = node27.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node31 = com.google.javascript.rhino.head.Node.newString("");
        node31.removeProp(23);
        node27.addChildToFront(node31);
        com.google.javascript.rhino.head.Node node35 = node27.getFirstChild();
        node35.setString("100");
        com.google.javascript.rhino.head.ast.Scope scope38 = node35.getScope();
        com.google.javascript.rhino.head.Node node40 = new com.google.javascript.rhino.head.Node((int) ' ', node35, 2);
        java.util.Spliterator<com.google.javascript.rhino.head.Node> nodeSpliterator41 = node35.spliterator();
        node35.putIntProp(100, (int) (byte) 0);
        com.google.javascript.rhino.head.Node node46 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        com.google.javascript.rhino.head.Node node48 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str49 = node48.toString();
        boolean boolean50 = node48.hasConsistentReturnUsage();
        boolean boolean51 = node48.hasSideEffects();
        node46.addChildrenToFront(node48);
        com.google.javascript.rhino.head.Node node55 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str56 = node55.toString();
        boolean boolean57 = node55.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node59 = com.google.javascript.rhino.head.Node.newString("");
        node59.removeProp(23);
        node55.addChildToFront(node59);
        com.google.javascript.rhino.head.Node node64 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean65 = node64.hasChildren();
        node55.addChildrenToFront(node64);
        int int67 = node64.getLineno();
        com.google.javascript.rhino.head.Node node69 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str70 = node69.toString();
        boolean boolean71 = node69.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node73 = com.google.javascript.rhino.head.Node.newString("");
        node73.removeProp(23);
        node69.addChildToFront(node73);
        com.google.javascript.rhino.head.Node node77 = node69.getFirstChild();
        com.google.javascript.rhino.head.Node node79 = new com.google.javascript.rhino.head.Node((int) (short) 0, node64, node69, 9);
        com.google.javascript.rhino.head.Node node81 = new com.google.javascript.rhino.head.Node((int) (short) 100, node35, node48, node64, 25);
        node35.setLineno(4);
        node1.putProp(1, (java.lang.Object) node35);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "40" + "'", str2, "40");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "40" + "'", str7, "40");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNull(comment15);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "40" + "'", str17, "40");
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "40" + "'", str28, "40");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNull(scope38);
        org.junit.Assert.assertNotNull(nodeSpliterator41);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "40" + "'", str49, "40");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "40" + "'", str56, "40");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-1) + "'", int67 == (-1));
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "40" + "'", str70, "40");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertNotNull(node77);
    }

    @Test
    public void test1900() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1900");
        com.google.javascript.rhino.head.Node node2 = new com.google.javascript.rhino.head.Node(25, 0);
        com.google.javascript.rhino.head.Node node4 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        com.google.javascript.rhino.head.Node node6 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str7 = node6.toString();
        boolean boolean8 = node6.hasConsistentReturnUsage();
        boolean boolean9 = node6.hasSideEffects();
        node4.addChildrenToFront(node6);
        node6.removeChildren();
        com.google.javascript.rhino.head.Node node13 = com.google.javascript.rhino.head.Node.newString("hi!");
        node6.addChildrenToBack(node13);
        com.google.javascript.rhino.head.Node node16 = node6.setType((int) (short) -1);
        com.google.javascript.rhino.head.Node node18 = node16.setType(23);
        node2.addChildrenToBack(node16);
        com.google.javascript.rhino.head.Node node20 = node16.getFirstChild();
        int int21 = node16.getLineno();
        com.google.javascript.rhino.head.Node node24 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str25 = node24.toString();
        com.google.javascript.rhino.head.Node node26 = node24.getLastSibling();
        com.google.javascript.rhino.head.Node node29 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str30 = node29.toString();
        boolean boolean31 = node29.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node33 = com.google.javascript.rhino.head.Node.newString("");
        node33.removeProp(23);
        node29.addChildToFront(node33);
        com.google.javascript.rhino.head.Node node37 = node29.getFirstChild();
        node37.setString("100");
        com.google.javascript.rhino.head.ast.Scope scope40 = node37.getScope();
        com.google.javascript.rhino.head.Node node42 = new com.google.javascript.rhino.head.Node((int) ' ', node37, 2);
        com.google.javascript.rhino.head.Node node43 = node37.getLastSibling();
        node26.addChildToFront(node43);
        com.google.javascript.rhino.head.Node node48 = com.google.javascript.rhino.head.Node.newString(23, "");
        com.google.javascript.rhino.head.Node node49 = node48.getLastSibling();
        com.google.javascript.rhino.head.Node node53 = com.google.javascript.rhino.head.Node.newString("hi!");
        com.google.javascript.rhino.head.Node node54 = new com.google.javascript.rhino.head.Node(13, node53);
        com.google.javascript.rhino.head.Node node57 = new com.google.javascript.rhino.head.Node(12);
        node57.putIntProp(14, 3);
        com.google.javascript.rhino.head.Node node61 = new com.google.javascript.rhino.head.Node(6, node57);
        com.google.javascript.rhino.head.Node node62 = node61.getLastChild();
        com.google.javascript.rhino.head.Node node64 = new com.google.javascript.rhino.head.Node((int) (byte) 100, node53, node61, 0);
        com.google.javascript.rhino.head.Node node67 = new com.google.javascript.rhino.head.Node((int) (byte) 1, 8);
        node67.putIntProp(20, 100);
        com.google.javascript.rhino.head.Node node71 = new com.google.javascript.rhino.head.Node(20, node49, node53, node67);
        com.google.javascript.rhino.head.Node node72 = node49.getLastChild();
        com.google.javascript.rhino.head.Node node74 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        com.google.javascript.rhino.head.Node node76 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str77 = node76.toString();
        boolean boolean78 = node76.hasConsistentReturnUsage();
        boolean boolean79 = node76.hasSideEffects();
        node74.addChildrenToFront(node76);
        com.google.javascript.rhino.head.Node node81 = node76.getLastSibling();
        com.google.javascript.rhino.head.Node node83 = new com.google.javascript.rhino.head.Node((-1), node43, node49, node81, 3);
        node16.addChildrenToBack(node49);
        // The following exception was thrown during execution in test generation
        try {
            double double85 = node49.getDouble();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: com.google.javascript.rhino.head.ast.Name cannot be cast to com.google.javascript.rhino.head.ast.NumberLiteral");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "40" + "'", str7, "40");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "40" + "'", str25, "40");
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "40" + "'", str30, "40");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNull(scope40);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNull(node72);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "40" + "'", str77, "40");
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(node81);
    }

    @Test
    public void test1901() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1901");
        com.google.javascript.rhino.head.Node node1 = new com.google.javascript.rhino.head.Node((int) (byte) 1);
        node1.removeProp((int) (short) 10);
        java.lang.Object obj5 = node1.getProp(15);
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor6 = node1.iterator();
        com.google.javascript.rhino.head.ast.Comment comment7 = null;
        node1.setJsDocNode(comment7);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNotNull(nodeItor6);
    }

    @Test
    public void test1902() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1902");
        com.google.javascript.rhino.head.Node node2 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str3 = node2.toString();
        boolean boolean4 = node2.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.ast.Comment comment5 = null;
        node2.setJsDocNode(comment5);
        com.google.javascript.rhino.head.Node node9 = com.google.javascript.rhino.head.Node.newString("");
        node9.removeProp(23);
        com.google.javascript.rhino.head.Node node14 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str15 = node14.toString();
        boolean boolean16 = node14.hasConsistentReturnUsage();
        boolean boolean17 = node14.hasSideEffects();
        com.google.javascript.rhino.head.Node node18 = new com.google.javascript.rhino.head.Node(0, node14);
        node9.addChildrenToBack(node18);
        com.google.javascript.rhino.head.Node node20 = new com.google.javascript.rhino.head.Node(9, node9);
        node2.addChildrenToFront(node20);
        com.google.javascript.rhino.head.Node node24 = new com.google.javascript.rhino.head.Node(12);
        node24.putIntProp(14, 3);
        com.google.javascript.rhino.head.Node node28 = new com.google.javascript.rhino.head.Node(6, node24);
        com.google.javascript.rhino.head.Node node29 = node28.getLastChild();
        com.google.javascript.rhino.head.Node node33 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str34 = node33.toString();
        boolean boolean35 = node33.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node37 = com.google.javascript.rhino.head.Node.newString("");
        node37.removeProp(23);
        node33.addChildToFront(node37);
        com.google.javascript.rhino.head.Node node42 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean43 = node42.hasChildren();
        node33.addChildrenToFront(node42);
        com.google.javascript.rhino.head.Node node46 = new com.google.javascript.rhino.head.Node((int) (byte) -1);
        java.lang.String str47 = node46.toString();
        boolean boolean48 = node46.hasChildren();
        com.google.javascript.rhino.head.Node node50 = new com.google.javascript.rhino.head.Node((int) (short) -1, node42, node46, (int) (short) 10);
        com.google.javascript.rhino.head.Node node51 = node50.getLastChild();
        com.google.javascript.rhino.head.Node node56 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str57 = node56.toString();
        boolean boolean58 = node56.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node60 = com.google.javascript.rhino.head.Node.newString("");
        node60.removeProp(23);
        node56.addChildToFront(node60);
        com.google.javascript.rhino.head.Node node64 = new com.google.javascript.rhino.head.Node((int) 'a', node56);
        com.google.javascript.rhino.head.Node node66 = com.google.javascript.rhino.head.Node.newString("-1");
        com.google.javascript.rhino.head.Node node68 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str69 = node68.toString();
        com.google.javascript.rhino.head.Node node70 = node68.getLastChild();
        com.google.javascript.rhino.head.Node node72 = new com.google.javascript.rhino.head.Node((int) (short) -1, node56, node66, node68, (int) (short) -1);
        com.google.javascript.rhino.head.Node node74 = new com.google.javascript.rhino.head.Node((int) (short) 1, node68, 12);
        com.google.javascript.rhino.head.Node node76 = new com.google.javascript.rhino.head.Node(23);
        node76.removeProp(25);
        boolean boolean79 = node76.hasChildren();
        com.google.javascript.rhino.head.Node node80 = new com.google.javascript.rhino.head.Node((-1), node51, node68, node76);
        node29.addChildToBack(node51);
        com.google.javascript.rhino.head.Node node84 = new com.google.javascript.rhino.head.Node((-1), 0);
        com.google.javascript.rhino.head.Node node86 = new com.google.javascript.rhino.head.Node(7, node20, node29, node84, 20);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode87 = null;
        java.lang.String str88 = node84.toStringTree(scriptNode87);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "40" + "'", str3, "40");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "40" + "'", str15, "40");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "40" + "'", str34, "40");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "-1" + "'", str47, "-1");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "40" + "'", str57, "40");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "40" + "'", str69, "40");
        org.junit.Assert.assertNull(node70);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNull(str88);
    }

    @Test
    public void test1903() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1903");
        com.google.javascript.rhino.head.Node node2 = new com.google.javascript.rhino.head.Node((int) (byte) 1);
        com.google.javascript.rhino.head.Node node7 = new com.google.javascript.rhino.head.Node((int) (byte) 1, 8);
        node7.putIntProp(20, 100);
        com.google.javascript.rhino.head.Node node11 = new com.google.javascript.rhino.head.Node((int) 'a', node7);
        com.google.javascript.rhino.head.Node node13 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str14 = node13.toString();
        boolean boolean15 = node13.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node17 = com.google.javascript.rhino.head.Node.newString("");
        node17.removeProp(23);
        node13.addChildToFront(node17);
        com.google.javascript.rhino.head.Node node21 = node13.getFirstChild();
        com.google.javascript.rhino.head.Node node23 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        node21.addChildrenToBack(node23);
        node21.setString("40");
        com.google.javascript.rhino.head.Node node27 = new com.google.javascript.rhino.head.Node(40, node7, node21);
        com.google.javascript.rhino.head.Node node30 = new com.google.javascript.rhino.head.Node(23);
        com.google.javascript.rhino.head.Node node33 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str34 = node33.toString();
        boolean boolean35 = node33.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node37 = com.google.javascript.rhino.head.Node.newString("");
        node37.removeProp(23);
        node33.addChildToFront(node37);
        node30.putProp((int) ' ', (java.lang.Object) node37);
        com.google.javascript.rhino.head.ast.Comment comment42 = node30.getJsDocNode();
        com.google.javascript.rhino.head.Node node43 = new com.google.javascript.rhino.head.Node((int) (byte) 1, node30);
        com.google.javascript.rhino.head.Node node45 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str46 = node45.toString();
        boolean boolean47 = node45.hasConsistentReturnUsage();
        boolean boolean48 = node45.hasSideEffects();
        com.google.javascript.rhino.head.Node node50 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str51 = node50.toString();
        boolean boolean52 = node50.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node54 = com.google.javascript.rhino.head.Node.newString("");
        node54.removeProp(23);
        node50.addChildToFront(node54);
        com.google.javascript.rhino.head.Node node58 = node50.getFirstChild();
        com.google.javascript.rhino.head.ast.Comment comment59 = node50.getJsDocNode();
        node45.addChildToBack(node50);
        boolean boolean61 = node50.hasSideEffects();
        com.google.javascript.rhino.head.Node node63 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str64 = node63.toString();
        boolean boolean65 = node63.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node67 = com.google.javascript.rhino.head.Node.newString("");
        node67.removeProp(23);
        node63.addChildToFront(node67);
        com.google.javascript.rhino.head.Node node72 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean73 = node72.hasChildren();
        node63.addChildrenToFront(node72);
        node50.addChildToBack(node72);
        node30.addChildrenToBack(node72);
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor77 = node30.iterator();
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor78 = node30.iterator();
        com.google.javascript.rhino.head.Node node80 = node30.setType((int) (byte) 1);
        com.google.javascript.rhino.head.Node node81 = new com.google.javascript.rhino.head.Node(8, node2, node27, node80);
        boolean boolean82 = node80.hasConsistentReturnUsage();
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "40" + "'", str14, "40");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "40" + "'", str34, "40");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNull(comment42);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "40" + "'", str46, "40");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "40" + "'", str51, "40");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertNull(comment59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "40" + "'", str64, "40");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(nodeItor77);
        org.junit.Assert.assertNotNull(nodeItor78);
        org.junit.Assert.assertNotNull(node80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
    }

    @Test
    public void test1904() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1904");
        com.google.javascript.rhino.head.Node node2 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str3 = node2.toString();
        boolean boolean4 = node2.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node6 = com.google.javascript.rhino.head.Node.newString("");
        node6.removeProp(23);
        node2.addChildToFront(node6);
        com.google.javascript.rhino.head.Node node10 = node2.getFirstChild();
        node10.setString("100");
        com.google.javascript.rhino.head.ast.Scope scope13 = node10.getScope();
        com.google.javascript.rhino.head.Node node15 = new com.google.javascript.rhino.head.Node((int) ' ', node10, 2);
        com.google.javascript.rhino.head.Node node16 = node10.getLastSibling();
        com.google.javascript.rhino.head.Node node17 = node10.getLastSibling();
        int int20 = node10.getIntProp((int) ' ', 7);
        java.lang.Object obj22 = node10.getProp(23);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "40" + "'", str3, "40");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNull(scope13);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 7 + "'", int20 == 7);
        org.junit.Assert.assertNull(obj22);
    }

    @Test
    public void test1905() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1905");
        com.google.javascript.rhino.head.Node node3 = new com.google.javascript.rhino.head.Node((int) ' ', 4);
        com.google.javascript.rhino.head.ast.Comment comment4 = null;
        node3.setJsDocNode(comment4);
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.head.Node node6 = new com.google.javascript.rhino.head.Node((-1), (com.google.javascript.rhino.head.Node) comment4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1906() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1906");
        com.google.javascript.rhino.head.Node node2 = com.google.javascript.rhino.head.Node.newString(15, "41");
        org.junit.Assert.assertNotNull(node2);
    }

    @Test
    public void test1907() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1907");
        com.google.javascript.rhino.head.Node node2 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str3 = node2.toString();
        boolean boolean4 = node2.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node6 = com.google.javascript.rhino.head.Node.newString("");
        node6.removeProp(23);
        node2.addChildToFront(node6);
        com.google.javascript.rhino.head.Node node10 = node2.getFirstChild();
        com.google.javascript.rhino.head.ast.Comment comment11 = node2.getJsDocNode();
        int int12 = node2.getType();
        node2.setDouble((double) 17);
        com.google.javascript.rhino.head.Node node18 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str19 = node18.toString();
        boolean boolean20 = node18.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node22 = com.google.javascript.rhino.head.Node.newString("");
        node22.removeProp(23);
        node18.addChildToFront(node22);
        com.google.javascript.rhino.head.Node node27 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean28 = node27.hasChildren();
        node18.addChildrenToFront(node27);
        com.google.javascript.rhino.head.Node node31 = new com.google.javascript.rhino.head.Node((int) (byte) -1);
        java.lang.String str32 = node31.toString();
        boolean boolean33 = node31.hasChildren();
        com.google.javascript.rhino.head.Node node35 = new com.google.javascript.rhino.head.Node((int) (short) -1, node27, node31, (int) (short) 10);
        com.google.javascript.rhino.head.Node node36 = node35.getLastChild();
        com.google.javascript.rhino.head.Node node41 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str42 = node41.toString();
        boolean boolean43 = node41.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node45 = com.google.javascript.rhino.head.Node.newString("");
        node45.removeProp(23);
        node41.addChildToFront(node45);
        com.google.javascript.rhino.head.Node node49 = new com.google.javascript.rhino.head.Node((int) 'a', node41);
        com.google.javascript.rhino.head.Node node51 = com.google.javascript.rhino.head.Node.newString("-1");
        com.google.javascript.rhino.head.Node node53 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str54 = node53.toString();
        com.google.javascript.rhino.head.Node node55 = node53.getLastChild();
        com.google.javascript.rhino.head.Node node57 = new com.google.javascript.rhino.head.Node((int) (short) -1, node41, node51, node53, (int) (short) -1);
        com.google.javascript.rhino.head.Node node59 = new com.google.javascript.rhino.head.Node((int) (short) 1, node53, 12);
        com.google.javascript.rhino.head.Node node61 = new com.google.javascript.rhino.head.Node(23);
        node61.removeProp(25);
        boolean boolean64 = node61.hasChildren();
        com.google.javascript.rhino.head.Node node65 = new com.google.javascript.rhino.head.Node((-1), node36, node53, node61);
        node2.addChildrenToBack(node36);
        java.lang.Object obj68 = node36.getProp((int) (short) 0);
        com.google.javascript.rhino.head.Node node70 = new com.google.javascript.rhino.head.Node((int) '#', node36, (int) ' ');
        node36.removeChildren();
        java.lang.String str72 = node36.getJsDoc();
        boolean boolean73 = node36.hasSideEffects();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "40" + "'", str3, "40");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNull(comment11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 40 + "'", int12 == 40);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "40" + "'", str19, "40");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "-1" + "'", str32, "-1");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "40" + "'", str42, "40");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "40" + "'", str54, "40");
        org.junit.Assert.assertNull(node55);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNull(obj68);
        org.junit.Assert.assertNull(str72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
    }

    @Test
    public void test1908() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1908");
        com.google.javascript.rhino.head.Node node1 = new com.google.javascript.rhino.head.Node((int) (byte) -1);
        java.lang.String str2 = node1.toString();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode3 = null;
        java.lang.String str4 = node1.toStringTree(scriptNode3);
        // The following exception was thrown during execution in test generation
        try {
            int int6 = node1.getExistingIntProp(4);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "-1" + "'", str2, "-1");
        org.junit.Assert.assertNull(str4);
    }

    @Test
    public void test1909() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1909");
        com.google.javascript.rhino.head.Node node2 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        com.google.javascript.rhino.head.Node node4 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str5 = node4.toString();
        boolean boolean6 = node4.hasConsistentReturnUsage();
        boolean boolean7 = node4.hasSideEffects();
        node2.addChildrenToFront(node4);
        com.google.javascript.rhino.head.Node node9 = node4.getLastSibling();
        int int12 = node9.getIntProp(100, (int) (byte) 1);
        com.google.javascript.rhino.head.Node node16 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str17 = node16.toString();
        boolean boolean18 = node16.hasConsistentReturnUsage();
        boolean boolean19 = node16.hasSideEffects();
        com.google.javascript.rhino.head.Node node20 = new com.google.javascript.rhino.head.Node(0, node16);
        com.google.javascript.rhino.head.Node node23 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str24 = node23.toString();
        boolean boolean25 = node23.hasConsistentReturnUsage();
        boolean boolean26 = node23.hasSideEffects();
        com.google.javascript.rhino.head.Node node28 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str29 = node28.toString();
        boolean boolean30 = node28.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node32 = com.google.javascript.rhino.head.Node.newString("");
        node32.removeProp(23);
        node28.addChildToFront(node32);
        com.google.javascript.rhino.head.Node node36 = node28.getFirstChild();
        com.google.javascript.rhino.head.ast.Comment comment37 = node28.getJsDocNode();
        node23.addChildToBack(node28);
        boolean boolean39 = node28.hasConsistentReturnUsage();
        node16.putProp((int) (short) 1, (java.lang.Object) node28);
        com.google.javascript.rhino.head.ast.Comment comment41 = null;
        node28.setJsDocNode(comment41);
        com.google.javascript.rhino.head.Node node44 = com.google.javascript.rhino.head.Node.newNumber((-1.0d));
        node44.putIntProp((int) (byte) -1, (int) (byte) 0);
        com.google.javascript.rhino.head.Node node49 = new com.google.javascript.rhino.head.Node(17, node28, node44, 41);
        com.google.javascript.rhino.head.Node node53 = com.google.javascript.rhino.head.Node.newString(23, "");
        com.google.javascript.rhino.head.Node node54 = node53.getLastSibling();
        com.google.javascript.rhino.head.Node node58 = com.google.javascript.rhino.head.Node.newString("hi!");
        com.google.javascript.rhino.head.Node node59 = new com.google.javascript.rhino.head.Node(13, node58);
        com.google.javascript.rhino.head.Node node62 = new com.google.javascript.rhino.head.Node(12);
        node62.putIntProp(14, 3);
        com.google.javascript.rhino.head.Node node66 = new com.google.javascript.rhino.head.Node(6, node62);
        com.google.javascript.rhino.head.Node node67 = node66.getLastChild();
        com.google.javascript.rhino.head.Node node69 = new com.google.javascript.rhino.head.Node((int) (byte) 100, node58, node66, 0);
        com.google.javascript.rhino.head.Node node72 = new com.google.javascript.rhino.head.Node((int) (byte) 1, 8);
        node72.putIntProp(20, 100);
        com.google.javascript.rhino.head.Node node76 = new com.google.javascript.rhino.head.Node(20, node54, node58, node72);
        java.lang.String str77 = node72.getJsDoc();
        com.google.javascript.rhino.head.Node node79 = node72.setType(24);
        com.google.javascript.rhino.head.Node node80 = new com.google.javascript.rhino.head.Node(15, node9, node44, node72);
        // The following exception was thrown during execution in test generation
        try {
            node72.labelId(16);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "40" + "'", str5, "40");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "40" + "'", str17, "40");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "40" + "'", str24, "40");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "40" + "'", str29, "40");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNull(comment37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertNull(str77);
        org.junit.Assert.assertNotNull(node79);
    }

    @Test
    public void test1910() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1910");
        com.google.javascript.rhino.head.Node node2 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str3 = node2.toString();
        boolean boolean4 = node2.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node6 = com.google.javascript.rhino.head.Node.newString("");
        node6.removeProp(23);
        node2.addChildToFront(node6);
        com.google.javascript.rhino.head.Node node11 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean12 = node11.hasChildren();
        node2.addChildrenToFront(node11);
        com.google.javascript.rhino.head.Node node15 = new com.google.javascript.rhino.head.Node((int) (byte) -1);
        java.lang.String str16 = node15.toString();
        boolean boolean17 = node15.hasChildren();
        com.google.javascript.rhino.head.Node node19 = new com.google.javascript.rhino.head.Node((int) (short) -1, node11, node15, (int) (short) 10);
        // The following exception was thrown during execution in test generation
        try {
            node15.setDouble((double) 19);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: com.google.javascript.rhino.head.Node cannot be cast to com.google.javascript.rhino.head.ast.NumberLiteral");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "40" + "'", str3, "40");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "-1" + "'", str16, "-1");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test1911() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1911");
        com.google.javascript.rhino.head.Node node2 = new com.google.javascript.rhino.head.Node(24, 0);
        com.google.javascript.rhino.head.ast.Comment comment3 = null;
        node2.setJsDocNode(comment3);
        // The following exception was thrown during execution in test generation
        try {
            node2.labelId(13);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1912() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1912");
        com.google.javascript.rhino.head.Node node2 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str3 = node2.toString();
        boolean boolean4 = node2.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node6 = com.google.javascript.rhino.head.Node.newString("");
        node6.removeProp(23);
        node2.addChildToFront(node6);
        com.google.javascript.rhino.head.Node node10 = node2.getFirstChild();
        node10.setString("100");
        com.google.javascript.rhino.head.ast.Scope scope13 = node10.getScope();
        com.google.javascript.rhino.head.Node node15 = new com.google.javascript.rhino.head.Node((int) ' ', node10, 2);
        boolean boolean16 = node15.hasChildren();
        com.google.javascript.rhino.head.Node node19 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str20 = node19.toString();
        boolean boolean21 = node19.hasConsistentReturnUsage();
        boolean boolean22 = node19.hasSideEffects();
        com.google.javascript.rhino.head.Node node23 = new com.google.javascript.rhino.head.Node(0, node19);
        int int24 = node19.getLineno();
        node15.addChildToFront(node19);
        com.google.javascript.rhino.head.Node node26 = node19.getLastSibling();
        int int29 = node26.getIntProp(7, 7);
        com.google.javascript.rhino.head.ast.Comment comment30 = null;
        node26.setJsDocNode(comment30);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "40" + "'", str3, "40");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNull(scope13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "40" + "'", str20, "40");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 7 + "'", int29 == 7);
    }

    @Test
    public void test1913() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1913");
        com.google.javascript.rhino.head.Node node1 = new com.google.javascript.rhino.head.Node((int) (byte) -1);
        java.lang.String str2 = node1.toString();
        com.google.javascript.rhino.head.ast.Comment comment3 = node1.getJsDocNode();
        com.google.javascript.rhino.head.ast.Comment comment4 = node1.getJsDocNode();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor5 = comment4.iterator();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "-1" + "'", str2, "-1");
        org.junit.Assert.assertNull(comment3);
        org.junit.Assert.assertNull(comment4);
    }

    @Test
    public void test1914() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1914");
        com.google.javascript.rhino.head.Node node4 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str5 = node4.toString();
        boolean boolean6 = node4.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node8 = com.google.javascript.rhino.head.Node.newString("");
        node8.removeProp(23);
        node4.addChildToFront(node8);
        com.google.javascript.rhino.head.Node node12 = new com.google.javascript.rhino.head.Node((int) 'a', node4);
        com.google.javascript.rhino.head.Node node14 = com.google.javascript.rhino.head.Node.newString("-1");
        com.google.javascript.rhino.head.Node node16 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str17 = node16.toString();
        com.google.javascript.rhino.head.Node node18 = node16.getLastChild();
        com.google.javascript.rhino.head.Node node20 = new com.google.javascript.rhino.head.Node((int) (short) -1, node4, node14, node16, (int) (short) -1);
        com.google.javascript.rhino.head.Node node22 = new com.google.javascript.rhino.head.Node((int) (short) 1, node16, 12);
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator23 = node22.new NodeIterator();
        int int24 = node22.getLineno();
        boolean boolean25 = node22.hasSideEffects();
        node22.putIntProp(0, (int) (short) 10);
        // The following exception was thrown during execution in test generation
        try {
            node22.setDouble((double) 0L);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: com.google.javascript.rhino.head.Node cannot be cast to com.google.javascript.rhino.head.ast.NumberLiteral");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "40" + "'", str5, "40");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "40" + "'", str17, "40");
        org.junit.Assert.assertNull(node18);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 12 + "'", int24 == 12);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test1915() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1915");
        com.google.javascript.rhino.head.Node node2 = new com.google.javascript.rhino.head.Node(25, 9);
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor3 = node2.iterator();
        org.junit.Assert.assertNotNull(nodeItor3);
    }

    @Test
    public void test1916() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1916");
        com.google.javascript.rhino.head.Node node1 = com.google.javascript.rhino.head.Node.newString("");
        int int4 = node1.getIntProp(17, (int) (byte) -1);
        com.google.javascript.rhino.head.Node node7 = new com.google.javascript.rhino.head.Node(40, 8);
        com.google.javascript.rhino.head.Node node10 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str11 = node10.toString();
        boolean boolean12 = node10.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node14 = com.google.javascript.rhino.head.Node.newString("");
        node14.removeProp(23);
        node10.addChildToFront(node14);
        com.google.javascript.rhino.head.Node node18 = node10.getFirstChild();
        com.google.javascript.rhino.head.Node node20 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        node18.addChildrenToBack(node20);
        com.google.javascript.rhino.head.Node node23 = com.google.javascript.rhino.head.Node.newString("");
        int int26 = node23.getIntProp(17, (int) (byte) -1);
        com.google.javascript.rhino.head.Node node27 = new com.google.javascript.rhino.head.Node((int) (short) 10, node18, node23);
        com.google.javascript.rhino.head.Node node29 = node18.setType(18);
        node1.addChildAfter(node7, node29);
        com.google.javascript.rhino.head.Node node32 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean33 = node32.hasSideEffects();
        node7.addChildrenToFront(node32);
        com.google.javascript.rhino.head.Node node35 = node7.getNext();
        // The following exception was thrown during execution in test generation
        try {
            int int36 = node35.labelId();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "40" + "'", str11, "40");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node35);
    }

    @Test
    public void test1917() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1917");
        com.google.javascript.rhino.head.Node node4 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str5 = node4.toString();
        boolean boolean6 = node4.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node8 = com.google.javascript.rhino.head.Node.newString("");
        node8.removeProp(23);
        node4.addChildToFront(node8);
        com.google.javascript.rhino.head.Node node12 = node4.getFirstChild();
        node12.setString("100");
        com.google.javascript.rhino.head.ast.Scope scope15 = node12.getScope();
        com.google.javascript.rhino.head.Node node17 = new com.google.javascript.rhino.head.Node((int) ' ', node12, 2);
        com.google.javascript.rhino.head.Node node18 = node12.getLastSibling();
        com.google.javascript.rhino.head.Node node21 = com.google.javascript.rhino.head.Node.newString(23, "");
        com.google.javascript.rhino.head.Node node22 = node21.getLastSibling();
        com.google.javascript.rhino.head.Node node23 = new com.google.javascript.rhino.head.Node((int) ' ', node18, node21);
        java.lang.String str24 = node18.getString();
        com.google.javascript.rhino.head.Node node26 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str27 = node26.toString();
        boolean boolean28 = node26.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node30 = com.google.javascript.rhino.head.Node.newString("");
        node30.removeProp(23);
        node26.addChildToFront(node30);
        com.google.javascript.rhino.head.Node node35 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean36 = node35.hasChildren();
        node26.addChildrenToFront(node35);
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator38 = node35.new NodeIterator();
        com.google.javascript.rhino.head.Node node40 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str41 = node40.toString();
        com.google.javascript.rhino.head.Node node42 = node40.getLastSibling();
        com.google.javascript.rhino.head.Node node45 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str46 = node45.toString();
        boolean boolean47 = node45.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node49 = com.google.javascript.rhino.head.Node.newString("");
        node49.removeProp(23);
        node45.addChildToFront(node49);
        com.google.javascript.rhino.head.Node node53 = node45.getFirstChild();
        node53.setString("100");
        com.google.javascript.rhino.head.ast.Scope scope56 = node53.getScope();
        com.google.javascript.rhino.head.Node node58 = new com.google.javascript.rhino.head.Node((int) ' ', node53, 2);
        com.google.javascript.rhino.head.Node node59 = node53.getLastSibling();
        node42.addChildToFront(node59);
        node35.addChildrenToFront(node42);
        com.google.javascript.rhino.head.Node node63 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        java.lang.String str64 = node63.toString();
        com.google.javascript.rhino.head.Node node66 = new com.google.javascript.rhino.head.Node((int) (short) 10, node18, node35, node63, 24);
        com.google.javascript.rhino.head.Node node67 = node66.getFirstChild();
        int int68 = node67.getLineno();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "40" + "'", str5, "40");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNull(scope15);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "100" + "'", str24, "100");
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "40" + "'", str27, "40");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "40" + "'", str41, "40");
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "40" + "'", str46, "40");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNull(scope56);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "100" + "'", str64, "100");
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-1) + "'", int68 == (-1));
    }

    @Test
    public void test1918() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1918");
        com.google.javascript.rhino.head.Node node3 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        com.google.javascript.rhino.head.Node node5 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str6 = node5.toString();
        boolean boolean7 = node5.hasConsistentReturnUsage();
        boolean boolean8 = node5.hasSideEffects();
        node3.addChildrenToFront(node5);
        node5.removeChildren();
        com.google.javascript.rhino.head.Node node12 = com.google.javascript.rhino.head.Node.newString("hi!");
        node5.addChildrenToBack(node12);
        com.google.javascript.rhino.head.Node node15 = node5.setType((int) (short) -1);
        com.google.javascript.rhino.head.Node node17 = node15.setType(23);
        double double18 = node17.getDouble();
        com.google.javascript.rhino.head.Node node19 = node17.getLastSibling();
        com.google.javascript.rhino.head.Node node20 = new com.google.javascript.rhino.head.Node((int) (byte) 10, node19);
        com.google.javascript.rhino.head.Node node23 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        com.google.javascript.rhino.head.Node node25 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str26 = node25.toString();
        boolean boolean27 = node25.hasConsistentReturnUsage();
        boolean boolean28 = node25.hasSideEffects();
        node23.addChildrenToFront(node25);
        com.google.javascript.rhino.head.Node node30 = node25.getLastSibling();
        int int31 = node25.getLineno();
        com.google.javascript.rhino.head.Node node33 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str34 = node33.toString();
        boolean boolean35 = node33.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node37 = com.google.javascript.rhino.head.Node.newString("");
        node37.removeProp(23);
        node33.addChildToFront(node37);
        com.google.javascript.rhino.head.Node node42 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean43 = node42.hasChildren();
        node33.addChildrenToFront(node42);
        int int45 = node42.getLineno();
        com.google.javascript.rhino.head.Node node47 = new com.google.javascript.rhino.head.Node((int) (byte) 1);
        node47.removeProp((int) (short) 10);
        com.google.javascript.rhino.head.Node node51 = new com.google.javascript.rhino.head.Node((int) (short) 10, node25, node42, node47, 0);
        com.google.javascript.rhino.head.ast.Comment comment52 = node47.getJsDocNode();
        com.google.javascript.rhino.head.Node node54 = new com.google.javascript.rhino.head.Node(11, node19, node47, (int) (short) 1);
        java.lang.String str55 = node19.getJsDoc();
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "40" + "'", str6, "40");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 32.0d + "'", double18 == 32.0d);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "40" + "'", str26, "40");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "40" + "'", str34, "40");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertNull(comment52);
        org.junit.Assert.assertNull(str55);
    }

    @Test
    public void test1919() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1919");
        com.google.javascript.rhino.head.Node node1 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        com.google.javascript.rhino.head.Node node3 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str4 = node3.toString();
        boolean boolean5 = node3.hasConsistentReturnUsage();
        boolean boolean6 = node3.hasSideEffects();
        node1.addChildrenToFront(node3);
        node3.removeChildren();
        com.google.javascript.rhino.head.Node node10 = com.google.javascript.rhino.head.Node.newString("hi!");
        node3.addChildrenToBack(node10);
        node10.setLineno(22);
        boolean boolean14 = node10.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node15 = node10.getFirstChild();
        int int16 = node10.getType();
        com.google.javascript.rhino.head.Node node17 = node10.getFirstChild();
        com.google.javascript.rhino.head.ast.Scope scope18 = null;
        // The following exception was thrown during execution in test generation
        try {
            node17.setScope(scope18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "40" + "'", str4, "40");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNull(node15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 41 + "'", int16 == 41);
        org.junit.Assert.assertNull(node17);
    }

    @Test
    public void test1920() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1920");
        com.google.javascript.rhino.head.Node node2 = com.google.javascript.rhino.head.Node.newString("hi!");
        com.google.javascript.rhino.head.Node node5 = com.google.javascript.rhino.head.Node.newString(23, "");
        com.google.javascript.rhino.head.Node node6 = new com.google.javascript.rhino.head.Node(0, node2, node5);
        int int7 = node2.getLineno();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator8 = node2.new NodeIterator();
        com.google.javascript.rhino.head.Node node12 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str13 = node12.toString();
        boolean boolean14 = node12.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node16 = com.google.javascript.rhino.head.Node.newString("");
        node16.removeProp(23);
        node12.addChildToFront(node16);
        com.google.javascript.rhino.head.Node node21 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean22 = node21.hasChildren();
        node12.addChildrenToFront(node21);
        com.google.javascript.rhino.head.Node node25 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str26 = node25.toString();
        boolean boolean27 = node25.hasConsistentReturnUsage();
        boolean boolean28 = node25.hasSideEffects();
        com.google.javascript.rhino.head.Node node30 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str31 = node30.toString();
        boolean boolean32 = node30.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node34 = com.google.javascript.rhino.head.Node.newString("");
        node34.removeProp(23);
        node30.addChildToFront(node34);
        com.google.javascript.rhino.head.Node node38 = node30.getFirstChild();
        com.google.javascript.rhino.head.ast.Comment comment39 = node30.getJsDocNode();
        node25.addChildToBack(node30);
        com.google.javascript.rhino.head.Node node41 = new com.google.javascript.rhino.head.Node(15, node12, node25);
        node2.putProp(24, (java.lang.Object) node41);
        node41.removeProp((int) (byte) -1);
        // The following exception was thrown during execution in test generation
        try {
            int int46 = node41.getExistingIntProp(0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "40" + "'", str13, "40");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "40" + "'", str26, "40");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "40" + "'", str31, "40");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNull(comment39);
    }

    @Test
    public void test1921() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1921");
        com.google.javascript.rhino.head.Node node1 = com.google.javascript.rhino.head.Node.newNumber((double) 'a');
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str2 = node1.getString();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: com.google.javascript.rhino.head.ast.NumberLiteral cannot be cast to com.google.javascript.rhino.head.ast.Name");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
    }

    @Test
    public void test1922() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1922");
        com.google.javascript.rhino.head.Node node2 = com.google.javascript.rhino.head.Node.newString("hi!");
        com.google.javascript.rhino.head.Node node3 = new com.google.javascript.rhino.head.Node(13, node2);
        // The following exception was thrown during execution in test generation
        try {
            int int4 = node3.labelId();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
    }

    @Test
    public void test1923() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1923");
        com.google.javascript.rhino.head.Node node3 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str4 = node3.toString();
        boolean boolean5 = node3.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node7 = com.google.javascript.rhino.head.Node.newString("");
        node7.removeProp(23);
        node3.addChildToFront(node7);
        com.google.javascript.rhino.head.Node node12 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean13 = node12.hasChildren();
        node3.addChildrenToFront(node12);
        int int15 = node12.getLineno();
        com.google.javascript.rhino.head.Node node17 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str18 = node17.toString();
        boolean boolean19 = node17.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node21 = com.google.javascript.rhino.head.Node.newString("");
        node21.removeProp(23);
        node17.addChildToFront(node21);
        com.google.javascript.rhino.head.Node node25 = node17.getFirstChild();
        com.google.javascript.rhino.head.Node node27 = new com.google.javascript.rhino.head.Node((int) (short) 0, node12, node17, 9);
        com.google.javascript.rhino.head.Node node31 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str32 = node31.toString();
        boolean boolean33 = node31.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node35 = com.google.javascript.rhino.head.Node.newString("");
        node35.removeProp(23);
        node31.addChildToFront(node35);
        com.google.javascript.rhino.head.Node node39 = new com.google.javascript.rhino.head.Node((int) 'a', node31);
        com.google.javascript.rhino.head.Node node41 = com.google.javascript.rhino.head.Node.newString("-1");
        com.google.javascript.rhino.head.Node node43 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str44 = node43.toString();
        com.google.javascript.rhino.head.Node node45 = node43.getLastChild();
        com.google.javascript.rhino.head.Node node47 = new com.google.javascript.rhino.head.Node((int) (short) -1, node31, node41, node43, (int) (short) -1);
        com.google.javascript.rhino.head.Node node49 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str50 = node49.toString();
        boolean boolean51 = node49.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node53 = com.google.javascript.rhino.head.Node.newString("");
        node53.removeProp(23);
        node49.addChildToFront(node53);
        com.google.javascript.rhino.head.Node node57 = node49.getFirstChild();
        com.google.javascript.rhino.head.Node node59 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        node57.addChildrenToBack(node59);
        com.google.javascript.rhino.head.Node node61 = node59.getLastChild();
        java.lang.String str62 = node59.getJsDoc();
        java.lang.Object obj64 = node59.getProp(0);
        com.google.javascript.rhino.head.Node node65 = new com.google.javascript.rhino.head.Node(3, node12, node31, node59);
        com.google.javascript.rhino.head.ast.Comment comment66 = node65.getJsDocNode();
        com.google.javascript.rhino.head.Node node68 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str69 = node68.toString();
        boolean boolean70 = node68.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node72 = com.google.javascript.rhino.head.Node.newString("");
        node72.removeProp(23);
        node68.addChildToFront(node72);
        com.google.javascript.rhino.head.Node node76 = node68.getFirstChild();
        node76.setString("100");
        com.google.javascript.rhino.head.Node node79 = node76.getLastSibling();
        node65.addChildrenToBack(node76);
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor81 = node65.iterator();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "40" + "'", str4, "40");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "40" + "'", str18, "40");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "40" + "'", str32, "40");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "40" + "'", str44, "40");
        org.junit.Assert.assertNull(node45);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "40" + "'", str50, "40");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertNull(node61);
        org.junit.Assert.assertNull(str62);
        org.junit.Assert.assertNull(obj64);
        org.junit.Assert.assertNull(comment66);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "40" + "'", str69, "40");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertNotNull(nodeItor81);
    }

    @Test
    public void test1924() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1924");
        com.google.javascript.rhino.head.Node node2 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str3 = node2.toString();
        boolean boolean4 = node2.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node6 = com.google.javascript.rhino.head.Node.newString("");
        node6.removeProp(23);
        node2.addChildToFront(node6);
        com.google.javascript.rhino.head.Node node10 = node2.getFirstChild();
        node10.setString("100");
        com.google.javascript.rhino.head.ast.Scope scope13 = node10.getScope();
        com.google.javascript.rhino.head.Node node15 = new com.google.javascript.rhino.head.Node((int) ' ', node10, 2);
        boolean boolean16 = node15.hasChildren();
        com.google.javascript.rhino.head.Node node19 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str20 = node19.toString();
        boolean boolean21 = node19.hasConsistentReturnUsage();
        boolean boolean22 = node19.hasSideEffects();
        com.google.javascript.rhino.head.Node node23 = new com.google.javascript.rhino.head.Node(0, node19);
        int int24 = node19.getLineno();
        node15.addChildToFront(node19);
        boolean boolean26 = node19.hasSideEffects();
        boolean boolean27 = node19.hasChildren();
        com.google.javascript.rhino.head.Node node30 = new com.google.javascript.rhino.head.Node((int) (byte) 1);
        node30.removeProp((int) (short) 10);
        com.google.javascript.rhino.head.Node node35 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str36 = node35.toString();
        boolean boolean37 = node35.hasConsistentReturnUsage();
        boolean boolean38 = node35.hasSideEffects();
        com.google.javascript.rhino.head.Node node39 = new com.google.javascript.rhino.head.Node(0, node35);
        com.google.javascript.rhino.head.Node node42 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str43 = node42.toString();
        boolean boolean44 = node42.hasConsistentReturnUsage();
        boolean boolean45 = node42.hasSideEffects();
        com.google.javascript.rhino.head.Node node47 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str48 = node47.toString();
        boolean boolean49 = node47.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node51 = com.google.javascript.rhino.head.Node.newString("");
        node51.removeProp(23);
        node47.addChildToFront(node51);
        com.google.javascript.rhino.head.Node node55 = node47.getFirstChild();
        com.google.javascript.rhino.head.ast.Comment comment56 = node47.getJsDocNode();
        node42.addChildToBack(node47);
        boolean boolean58 = node47.hasConsistentReturnUsage();
        node35.putProp((int) (short) 1, (java.lang.Object) node47);
        com.google.javascript.rhino.head.Node node60 = new com.google.javascript.rhino.head.Node((int) '#', node30, node47);
        node19.addChildrenToBack(node60);
        node60.removeChildren();
        com.google.javascript.rhino.head.ast.Comment comment63 = node60.getJsDocNode();
        // The following exception was thrown during execution in test generation
        try {
            comment63.putIntProp(11, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "40" + "'", str3, "40");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNull(scope13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "40" + "'", str20, "40");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "40" + "'", str36, "40");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "40" + "'", str43, "40");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "40" + "'", str48, "40");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNull(comment56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNull(comment63);
    }

    @Test
    public void test1925() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1925");
        com.google.javascript.rhino.head.Node node1 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        com.google.javascript.rhino.head.Node node3 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str4 = node3.toString();
        boolean boolean5 = node3.hasConsistentReturnUsage();
        boolean boolean6 = node3.hasSideEffects();
        node1.addChildrenToFront(node3);
        com.google.javascript.rhino.head.Node node8 = node3.getLastSibling();
        int int9 = node3.getLineno();
        node3.removeChildren();
        com.google.javascript.rhino.head.Node node12 = com.google.javascript.rhino.head.Node.newString("");
        node12.removeProp(23);
        com.google.javascript.rhino.head.Node node17 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str18 = node17.toString();
        boolean boolean19 = node17.hasConsistentReturnUsage();
        boolean boolean20 = node17.hasSideEffects();
        com.google.javascript.rhino.head.Node node21 = new com.google.javascript.rhino.head.Node(0, node17);
        node12.addChildrenToBack(node21);
        com.google.javascript.rhino.head.Node node25 = com.google.javascript.rhino.head.Node.newString(23, "");
        com.google.javascript.rhino.head.Node node26 = node25.getLastSibling();
        node21.addChildrenToBack(node26);
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator28 = node21.new NodeIterator();
        boolean boolean29 = node21.hasConsistentReturnUsage();
        node3.addChildrenToFront(node21);
        java.util.Spliterator<com.google.javascript.rhino.head.Node> nodeSpliterator31 = node21.spliterator();
        // The following exception was thrown during execution in test generation
        try {
            node21.resetTargets();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "40" + "'", str4, "40");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "40" + "'", str18, "40");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(nodeSpliterator31);
    }

    @Test
    public void test1926() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1926");
        com.google.javascript.rhino.head.Node node1 = com.google.javascript.rhino.head.Node.newNumber((double) '4');
        // The following exception was thrown during execution in test generation
        try {
            node1.labelId(19);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
    }

    @Test
    public void test1927() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1927");
        com.google.javascript.rhino.head.Node node3 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str4 = node3.toString();
        boolean boolean5 = node3.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node7 = com.google.javascript.rhino.head.Node.newString("");
        node7.removeProp(23);
        node3.addChildToFront(node7);
        com.google.javascript.rhino.head.Node node11 = new com.google.javascript.rhino.head.Node((int) 'a', node3);
        com.google.javascript.rhino.head.Node node13 = com.google.javascript.rhino.head.Node.newString("-1");
        com.google.javascript.rhino.head.Node node15 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str16 = node15.toString();
        com.google.javascript.rhino.head.Node node17 = node15.getLastChild();
        com.google.javascript.rhino.head.Node node19 = new com.google.javascript.rhino.head.Node((int) (short) -1, node3, node13, node15, (int) (short) -1);
        int int22 = node3.getIntProp((int) ' ', 3);
        com.google.javascript.rhino.head.Node node24 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str25 = node24.toString();
        boolean boolean26 = node24.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node28 = com.google.javascript.rhino.head.Node.newString("");
        node28.removeProp(23);
        node24.addChildToFront(node28);
        com.google.javascript.rhino.head.Node node33 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean34 = node33.hasChildren();
        node24.addChildrenToFront(node33);
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator36 = node33.new NodeIterator();
        com.google.javascript.rhino.head.Node node38 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str39 = node38.toString();
        com.google.javascript.rhino.head.Node node40 = node38.getLastSibling();
        com.google.javascript.rhino.head.Node node43 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str44 = node43.toString();
        boolean boolean45 = node43.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node47 = com.google.javascript.rhino.head.Node.newString("");
        node47.removeProp(23);
        node43.addChildToFront(node47);
        com.google.javascript.rhino.head.Node node51 = node43.getFirstChild();
        node51.setString("100");
        com.google.javascript.rhino.head.ast.Scope scope54 = node51.getScope();
        com.google.javascript.rhino.head.Node node56 = new com.google.javascript.rhino.head.Node((int) ' ', node51, 2);
        com.google.javascript.rhino.head.Node node57 = node51.getLastSibling();
        node40.addChildToFront(node57);
        node33.addChildrenToFront(node40);
        boolean boolean60 = node33.hasSideEffects();
        node3.addChildrenToBack(node33);
        java.lang.String str62 = node33.getJsDoc();
        com.google.javascript.rhino.head.Node node63 = node33.getFirstChild();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "40" + "'", str4, "40");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "40" + "'", str16, "40");
        org.junit.Assert.assertNull(node17);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 3 + "'", int22 == 3);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "40" + "'", str25, "40");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "40" + "'", str39, "40");
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "40" + "'", str44, "40");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNull(scope54);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNull(str62);
        org.junit.Assert.assertNotNull(node63);
    }

    @Test
    public void test1928() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1928");
        com.google.javascript.rhino.head.Node node3 = com.google.javascript.rhino.head.Node.newString(23, "");
        com.google.javascript.rhino.head.Node node4 = node3.getLastSibling();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator5 = node4.new NodeIterator();
        node4.setLineno(13);
        boolean boolean8 = node4.hasSideEffects();
        com.google.javascript.rhino.head.Node node12 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str13 = node12.toString();
        boolean boolean14 = node12.hasConsistentReturnUsage();
        boolean boolean15 = node12.hasSideEffects();
        com.google.javascript.rhino.head.Node node16 = new com.google.javascript.rhino.head.Node(0, node12);
        com.google.javascript.rhino.head.Node node19 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str20 = node19.toString();
        boolean boolean21 = node19.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node23 = com.google.javascript.rhino.head.Node.newString("");
        node23.removeProp(23);
        node19.addChildToFront(node23);
        com.google.javascript.rhino.head.Node node28 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean29 = node28.hasChildren();
        node19.addChildrenToFront(node28);
        com.google.javascript.rhino.head.Node node32 = new com.google.javascript.rhino.head.Node((int) (byte) -1);
        java.lang.String str33 = node32.toString();
        boolean boolean34 = node32.hasChildren();
        com.google.javascript.rhino.head.Node node36 = new com.google.javascript.rhino.head.Node((int) (short) -1, node28, node32, (int) (short) 10);
        com.google.javascript.rhino.head.Node node39 = com.google.javascript.rhino.head.Node.newString(23, "");
        com.google.javascript.rhino.head.Node node41 = new com.google.javascript.rhino.head.Node((int) (byte) 10, node12, node32, node39, (int) (short) 0);
        com.google.javascript.rhino.head.Node node43 = node41.setType(16);
        com.google.javascript.rhino.head.Node node47 = com.google.javascript.rhino.head.Node.newString("hi!");
        com.google.javascript.rhino.head.Node node48 = new com.google.javascript.rhino.head.Node(13, node47);
        com.google.javascript.rhino.head.Node node49 = new com.google.javascript.rhino.head.Node(7, node47);
        com.google.javascript.rhino.head.Node node51 = new com.google.javascript.rhino.head.Node(97, node4, node43, node47, 8);
        // The following exception was thrown during execution in test generation
        try {
            node51.labelId(1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "40" + "'", str13, "40");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "40" + "'", str20, "40");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "-1" + "'", str33, "-1");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(node47);
    }

    @Test
    public void test1929() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1929");
        com.google.javascript.rhino.head.Node node2 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str3 = node2.toString();
        boolean boolean4 = node2.hasConsistentReturnUsage();
        boolean boolean5 = node2.hasSideEffects();
        com.google.javascript.rhino.head.Node node6 = new com.google.javascript.rhino.head.Node(0, node2);
        int int7 = node2.getLineno();
        node2.removeProp(0);
        com.google.javascript.rhino.head.Node node13 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str14 = node13.toString();
        boolean boolean15 = node13.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node17 = com.google.javascript.rhino.head.Node.newString("");
        node17.removeProp(23);
        node13.addChildToFront(node17);
        com.google.javascript.rhino.head.Node node22 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean23 = node22.hasChildren();
        node13.addChildrenToFront(node22);
        int int25 = node22.getLineno();
        com.google.javascript.rhino.head.Node node27 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str28 = node27.toString();
        boolean boolean29 = node27.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node31 = com.google.javascript.rhino.head.Node.newString("");
        node31.removeProp(23);
        node27.addChildToFront(node31);
        com.google.javascript.rhino.head.Node node35 = node27.getFirstChild();
        com.google.javascript.rhino.head.Node node37 = new com.google.javascript.rhino.head.Node((int) (short) 0, node22, node27, 9);
        boolean boolean38 = node22.hasSideEffects();
        com.google.javascript.rhino.head.Node node40 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        com.google.javascript.rhino.head.Node node42 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str43 = node42.toString();
        boolean boolean44 = node42.hasConsistentReturnUsage();
        boolean boolean45 = node42.hasSideEffects();
        node40.addChildrenToFront(node42);
        node42.removeChildren();
        com.google.javascript.rhino.head.Node node49 = com.google.javascript.rhino.head.Node.newString("hi!");
        node42.addChildrenToBack(node49);
        com.google.javascript.rhino.head.Node node52 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str53 = node52.toString();
        boolean boolean54 = node52.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node56 = com.google.javascript.rhino.head.Node.newString("");
        node56.removeProp(23);
        node52.addChildToFront(node56);
        com.google.javascript.rhino.head.Node node60 = node52.getFirstChild();
        com.google.javascript.rhino.head.Node node62 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        node60.addChildrenToBack(node62);
        com.google.javascript.rhino.head.Node node64 = new com.google.javascript.rhino.head.Node((int) (byte) 1, node22, node42, node62);
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator65 = node64.new NodeIterator();
        int int66 = node64.getLineno();
        node2.addChildToBack(node64);
        boolean boolean68 = node64.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node69 = node64.getNext();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "40" + "'", str3, "40");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "40" + "'", str14, "40");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "40" + "'", str28, "40");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "40" + "'", str43, "40");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "40" + "'", str53, "40");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNull(node69);
    }

    @Test
    public void test1930() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1930");
        com.google.javascript.rhino.head.Node node4 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str5 = node4.toString();
        boolean boolean6 = node4.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node8 = com.google.javascript.rhino.head.Node.newString("");
        node8.removeProp(23);
        node4.addChildToFront(node8);
        com.google.javascript.rhino.head.Node node12 = node4.getFirstChild();
        node12.setString("100");
        com.google.javascript.rhino.head.ast.Scope scope15 = node12.getScope();
        com.google.javascript.rhino.head.Node node17 = new com.google.javascript.rhino.head.Node((int) ' ', node12, 2);
        java.util.Spliterator<com.google.javascript.rhino.head.Node> nodeSpliterator18 = node12.spliterator();
        node12.putIntProp(100, (int) (byte) 0);
        com.google.javascript.rhino.head.Node node23 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        com.google.javascript.rhino.head.Node node25 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str26 = node25.toString();
        boolean boolean27 = node25.hasConsistentReturnUsage();
        boolean boolean28 = node25.hasSideEffects();
        node23.addChildrenToFront(node25);
        com.google.javascript.rhino.head.Node node32 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str33 = node32.toString();
        boolean boolean34 = node32.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node36 = com.google.javascript.rhino.head.Node.newString("");
        node36.removeProp(23);
        node32.addChildToFront(node36);
        com.google.javascript.rhino.head.Node node41 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean42 = node41.hasChildren();
        node32.addChildrenToFront(node41);
        int int44 = node41.getLineno();
        com.google.javascript.rhino.head.Node node46 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str47 = node46.toString();
        boolean boolean48 = node46.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node50 = com.google.javascript.rhino.head.Node.newString("");
        node50.removeProp(23);
        node46.addChildToFront(node50);
        com.google.javascript.rhino.head.Node node54 = node46.getFirstChild();
        com.google.javascript.rhino.head.Node node56 = new com.google.javascript.rhino.head.Node((int) (short) 0, node41, node46, 9);
        com.google.javascript.rhino.head.Node node58 = new com.google.javascript.rhino.head.Node((int) (short) 100, node12, node25, node41, 25);
        com.google.javascript.rhino.head.Node node61 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str62 = node61.toString();
        boolean boolean63 = node61.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node65 = com.google.javascript.rhino.head.Node.newString("");
        node65.removeProp(23);
        node61.addChildToFront(node65);
        com.google.javascript.rhino.head.Node node70 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean71 = node70.hasChildren();
        node61.addChildrenToFront(node70);
        int int73 = node70.getLineno();
        com.google.javascript.rhino.head.Node node75 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str76 = node75.toString();
        boolean boolean77 = node75.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node79 = com.google.javascript.rhino.head.Node.newString("");
        node79.removeProp(23);
        node75.addChildToFront(node79);
        com.google.javascript.rhino.head.Node node83 = node75.getFirstChild();
        com.google.javascript.rhino.head.Node node85 = new com.google.javascript.rhino.head.Node((int) (short) 0, node70, node75, 9);
        boolean boolean86 = node70.hasSideEffects();
        com.google.javascript.rhino.head.Node node88 = new com.google.javascript.rhino.head.Node((int) (byte) 0, node41, node70, 7);
        java.lang.String str89 = node41.toString();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "40" + "'", str5, "40");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNull(scope15);
        org.junit.Assert.assertNotNull(nodeSpliterator18);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "40" + "'", str26, "40");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "40" + "'", str33, "40");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "40" + "'", str47, "40");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "40" + "'", str62, "40");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + (-1) + "'", int73 == (-1));
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "40" + "'", str76, "40");
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertNotNull(node83);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "40" + "'", str89, "40");
    }

    @Test
    public void test1931() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1931");
        com.google.javascript.rhino.head.Node node1 = com.google.javascript.rhino.head.Node.newString("");
        int int2 = node1.getLineno();
        com.google.javascript.rhino.head.Node node4 = node1.setType((-1));
        int int5 = node1.getType();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
    }

    @Test
    public void test1932() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1932");
        com.google.javascript.rhino.head.Node node2 = com.google.javascript.rhino.head.Node.newString("");
        int int3 = node2.getLineno();
        com.google.javascript.rhino.head.Node node5 = node2.setType((-1));
        com.google.javascript.rhino.head.Node node7 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        java.lang.String str8 = node7.toString();
        node7.removeChildren();
        boolean boolean10 = node7.hasChildren();
        com.google.javascript.rhino.head.Node node12 = com.google.javascript.rhino.head.Node.newNumber((double) 0L);
        com.google.javascript.rhino.head.Node node14 = com.google.javascript.rhino.head.Node.newString("");
        node14.removeProp(23);
        com.google.javascript.rhino.head.Node node19 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str20 = node19.toString();
        boolean boolean21 = node19.hasConsistentReturnUsage();
        boolean boolean22 = node19.hasSideEffects();
        com.google.javascript.rhino.head.Node node23 = new com.google.javascript.rhino.head.Node(0, node19);
        node14.addChildrenToBack(node23);
        node12.addChildToFront(node14);
        com.google.javascript.rhino.head.Node node26 = new com.google.javascript.rhino.head.Node(6, node2, node7, node12);
        com.google.javascript.rhino.head.Node node27 = node12.getLastChild();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "100" + "'", str8, "100");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "40" + "'", str20, "40");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node27);
    }

    @Test
    public void test1933() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1933");
        com.google.javascript.rhino.head.Node node2 = com.google.javascript.rhino.head.Node.newString(23, "");
        com.google.javascript.rhino.head.Node node3 = node2.getLastSibling();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator4 = node3.new NodeIterator();
        node3.setLineno(13);
        java.util.Spliterator<com.google.javascript.rhino.head.Node> nodeSpliterator7 = node3.spliterator();
        com.google.javascript.rhino.head.Node node9 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str10 = node9.toString();
        boolean boolean11 = node9.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node13 = com.google.javascript.rhino.head.Node.newString("");
        node13.removeProp(23);
        node9.addChildToFront(node13);
        com.google.javascript.rhino.head.Node node17 = node13.getLastChild();
        node13.setString("");
        com.google.javascript.rhino.head.Node node21 = node13.setType(25);
        node3.addChildrenToBack(node21);
        java.lang.String str23 = node3.getJsDoc();
        node3.setString("2");
        // The following exception was thrown during execution in test generation
        try {
            int int27 = node3.getExistingIntProp(0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(nodeSpliterator7);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "40" + "'", str10, "40");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNull(node17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNull(str23);
    }

    @Test
    public void test1934() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1934");
        com.google.javascript.rhino.head.Node node2 = com.google.javascript.rhino.head.Node.newString(7, "40");
        node2.setString("41");
        org.junit.Assert.assertNotNull(node2);
    }

    @Test
    public void test1935() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1935");
        com.google.javascript.rhino.head.Node node2 = new com.google.javascript.rhino.head.Node(0, (int) (short) 10);
        com.google.javascript.rhino.head.Node node3 = node2.getLastSibling();
        java.lang.Class<?> wildcardClass4 = node3.getClass();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test1936() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1936");
        com.google.javascript.rhino.head.Node node4 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str5 = node4.toString();
        boolean boolean6 = node4.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node8 = com.google.javascript.rhino.head.Node.newString("");
        node8.removeProp(23);
        node4.addChildToFront(node8);
        com.google.javascript.rhino.head.Node node13 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean14 = node13.hasChildren();
        node4.addChildrenToFront(node13);
        int int16 = node13.getLineno();
        com.google.javascript.rhino.head.Node node18 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str19 = node18.toString();
        boolean boolean20 = node18.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node22 = com.google.javascript.rhino.head.Node.newString("");
        node22.removeProp(23);
        node18.addChildToFront(node22);
        com.google.javascript.rhino.head.Node node26 = node18.getFirstChild();
        com.google.javascript.rhino.head.Node node28 = new com.google.javascript.rhino.head.Node((int) (short) 0, node13, node18, 9);
        boolean boolean29 = node13.hasSideEffects();
        com.google.javascript.rhino.head.Node node31 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        com.google.javascript.rhino.head.Node node33 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str34 = node33.toString();
        boolean boolean35 = node33.hasConsistentReturnUsage();
        boolean boolean36 = node33.hasSideEffects();
        node31.addChildrenToFront(node33);
        node33.removeChildren();
        com.google.javascript.rhino.head.Node node40 = com.google.javascript.rhino.head.Node.newString("hi!");
        node33.addChildrenToBack(node40);
        com.google.javascript.rhino.head.Node node43 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str44 = node43.toString();
        boolean boolean45 = node43.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node47 = com.google.javascript.rhino.head.Node.newString("");
        node47.removeProp(23);
        node43.addChildToFront(node47);
        com.google.javascript.rhino.head.Node node51 = node43.getFirstChild();
        com.google.javascript.rhino.head.Node node53 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        node51.addChildrenToBack(node53);
        com.google.javascript.rhino.head.Node node55 = new com.google.javascript.rhino.head.Node((int) (byte) 1, node13, node33, node53);
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator56 = node55.new NodeIterator();
        com.google.javascript.rhino.head.Node node57 = nodeIterator56.next();
        com.google.javascript.rhino.head.Node node59 = node57.setType(2);
        com.google.javascript.rhino.head.ast.Comment comment60 = node57.getJsDocNode();
        com.google.javascript.rhino.head.Node node62 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str63 = node62.toString();
        boolean boolean64 = node62.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node66 = com.google.javascript.rhino.head.Node.newString("");
        node66.removeProp(23);
        node62.addChildToFront(node66);
        com.google.javascript.rhino.head.Node node71 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean72 = node71.hasChildren();
        node62.addChildrenToFront(node71);
        int int74 = node71.getLineno();
        com.google.javascript.rhino.head.Node node77 = new com.google.javascript.rhino.head.Node((int) (byte) -1);
        java.lang.String str78 = node77.toString();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode79 = null;
        java.lang.String str80 = node77.toStringTree(scriptNode79);
        com.google.javascript.rhino.head.Node node83 = com.google.javascript.rhino.head.Node.newString(24, "100");
        com.google.javascript.rhino.head.Node node86 = new com.google.javascript.rhino.head.Node(23, 6);
        com.google.javascript.rhino.head.Node node88 = new com.google.javascript.rhino.head.Node(0, node77, node83, node86, 6);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode89 = null;
        java.lang.String str90 = node83.toStringTree(scriptNode89);
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.head.Node node92 = new com.google.javascript.rhino.head.Node(17, (com.google.javascript.rhino.head.Node) comment60, node71, (com.google.javascript.rhino.head.Node) scriptNode89, 2);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "40" + "'", str5, "40");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "40" + "'", str19, "40");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "40" + "'", str34, "40");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "40" + "'", str44, "40");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertNull(comment60);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "40" + "'", str63, "40");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + (-1) + "'", int74 == (-1));
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "-1" + "'", str78, "-1");
        org.junit.Assert.assertNull(str80);
        org.junit.Assert.assertNotNull(node83);
        org.junit.Assert.assertNull(str90);
    }

    @Test
    public void test1937() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1937");
        com.google.javascript.rhino.head.Node node2 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        com.google.javascript.rhino.head.Node node4 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str5 = node4.toString();
        boolean boolean6 = node4.hasConsistentReturnUsage();
        boolean boolean7 = node4.hasSideEffects();
        node2.addChildrenToFront(node4);
        com.google.javascript.rhino.head.Node node9 = node4.getLastSibling();
        int int10 = node4.getLineno();
        com.google.javascript.rhino.head.Node node12 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str13 = node12.toString();
        boolean boolean14 = node12.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node16 = com.google.javascript.rhino.head.Node.newString("");
        node16.removeProp(23);
        node12.addChildToFront(node16);
        com.google.javascript.rhino.head.Node node21 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean22 = node21.hasChildren();
        node12.addChildrenToFront(node21);
        int int24 = node21.getLineno();
        com.google.javascript.rhino.head.Node node26 = new com.google.javascript.rhino.head.Node((int) (byte) 1);
        node26.removeProp((int) (short) 10);
        com.google.javascript.rhino.head.Node node30 = new com.google.javascript.rhino.head.Node((int) (short) 10, node4, node21, node26, 0);
        java.lang.Object obj32 = node4.getProp((int) (byte) 1);
        boolean boolean33 = node4.hasSideEffects();
        com.google.javascript.rhino.head.ast.Scope scope34 = null;
        // The following exception was thrown during execution in test generation
        try {
            node4.setScope(scope34);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "40" + "'", str5, "40");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "40" + "'", str13, "40");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertNull(obj32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test1938() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1938");
        com.google.javascript.rhino.head.Node node4 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str5 = node4.toString();
        boolean boolean6 = node4.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node8 = com.google.javascript.rhino.head.Node.newString("");
        node8.removeProp(23);
        node4.addChildToFront(node8);
        com.google.javascript.rhino.head.Node node12 = node4.getFirstChild();
        node12.setString("100");
        com.google.javascript.rhino.head.ast.Scope scope15 = node12.getScope();
        com.google.javascript.rhino.head.Node node17 = new com.google.javascript.rhino.head.Node((int) ' ', node12, 2);
        com.google.javascript.rhino.head.Node node18 = node12.getLastSibling();
        com.google.javascript.rhino.head.Node node21 = com.google.javascript.rhino.head.Node.newString(23, "");
        com.google.javascript.rhino.head.Node node22 = node21.getLastSibling();
        com.google.javascript.rhino.head.Node node23 = new com.google.javascript.rhino.head.Node((int) ' ', node18, node21);
        node21.setLineno((int) (byte) 0);
        com.google.javascript.rhino.head.Node node26 = new com.google.javascript.rhino.head.Node(13, node21);
        int int29 = node21.getIntProp(40, (int) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            node21.resetTargets();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "40" + "'", str5, "40");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNull(scope15);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
    }

    @Test
    public void test1939() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1939");
        com.google.javascript.rhino.head.Node node2 = new com.google.javascript.rhino.head.Node(12);
        node2.putIntProp(14, 3);
        com.google.javascript.rhino.head.Node node6 = new com.google.javascript.rhino.head.Node(6, node2);
        int int9 = node6.getIntProp(18, 26);
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator10 = node6.new NodeIterator();
        boolean boolean11 = nodeIterator10.hasNext();
        boolean boolean12 = nodeIterator10.hasNext();
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 26 + "'", int9 == 26);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
    }

    @Test
    public void test1940() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1940");
        com.google.javascript.rhino.head.Node node3 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str4 = node3.toString();
        boolean boolean5 = node3.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node7 = com.google.javascript.rhino.head.Node.newString("");
        node7.removeProp(23);
        node3.addChildToFront(node7);
        com.google.javascript.rhino.head.Node node11 = new com.google.javascript.rhino.head.Node((int) 'a', node3);
        com.google.javascript.rhino.head.Node node15 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str16 = node15.toString();
        boolean boolean17 = node15.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node19 = com.google.javascript.rhino.head.Node.newString("");
        node19.removeProp(23);
        node15.addChildToFront(node19);
        com.google.javascript.rhino.head.Node node23 = node15.getFirstChild();
        node23.setString("100");
        com.google.javascript.rhino.head.ast.Scope scope26 = node23.getScope();
        com.google.javascript.rhino.head.Node node28 = new com.google.javascript.rhino.head.Node((int) ' ', node23, 2);
        com.google.javascript.rhino.head.Node node29 = node23.getLastSibling();
        com.google.javascript.rhino.head.Node node32 = com.google.javascript.rhino.head.Node.newString(23, "");
        com.google.javascript.rhino.head.Node node33 = node32.getLastSibling();
        com.google.javascript.rhino.head.Node node34 = new com.google.javascript.rhino.head.Node((int) ' ', node29, node32);
        node3.addChildrenToFront(node34);
        com.google.javascript.rhino.head.Node node37 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str38 = node37.toString();
        boolean boolean39 = node37.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node41 = com.google.javascript.rhino.head.Node.newString("");
        node41.removeProp(23);
        node37.addChildToFront(node41);
        com.google.javascript.rhino.head.Node node46 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean47 = node46.hasChildren();
        node37.addChildrenToFront(node46);
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator49 = node46.new NodeIterator();
        com.google.javascript.rhino.head.Node node51 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str52 = node51.toString();
        com.google.javascript.rhino.head.Node node53 = node51.getLastSibling();
        com.google.javascript.rhino.head.Node node56 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str57 = node56.toString();
        boolean boolean58 = node56.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node60 = com.google.javascript.rhino.head.Node.newString("");
        node60.removeProp(23);
        node56.addChildToFront(node60);
        com.google.javascript.rhino.head.Node node64 = node56.getFirstChild();
        node64.setString("100");
        com.google.javascript.rhino.head.ast.Scope scope67 = node64.getScope();
        com.google.javascript.rhino.head.Node node69 = new com.google.javascript.rhino.head.Node((int) ' ', node64, 2);
        com.google.javascript.rhino.head.Node node70 = node64.getLastSibling();
        node53.addChildToFront(node70);
        node46.addChildrenToFront(node53);
        node3.addChildrenToBack(node53);
        com.google.javascript.rhino.head.Node node75 = new com.google.javascript.rhino.head.Node(3);
        com.google.javascript.rhino.head.Node node76 = node75.getFirstChild();
        com.google.javascript.rhino.head.Node node80 = com.google.javascript.rhino.head.Node.newString("hi!");
        com.google.javascript.rhino.head.Node node81 = new com.google.javascript.rhino.head.Node(13, node80);
        com.google.javascript.rhino.head.Node node82 = new com.google.javascript.rhino.head.Node(7, node80);
        com.google.javascript.rhino.head.Node node84 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        node82.addChildToFront(node84);
        com.google.javascript.rhino.head.ast.Comment comment86 = null;
        node82.setJsDocNode(comment86);
        node82.removeProp(10);
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.head.Node node90 = new com.google.javascript.rhino.head.Node(9, node3, node76, node82);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "40" + "'", str4, "40");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "40" + "'", str16, "40");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNull(scope26);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "40" + "'", str38, "40");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "40" + "'", str52, "40");
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "40" + "'", str57, "40");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertNull(scope67);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertNull(node76);
        org.junit.Assert.assertNotNull(node80);
        org.junit.Assert.assertNotNull(node84);
    }

    @Test
    public void test1941() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1941");
        com.google.javascript.rhino.head.Node node3 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str4 = node3.toString();
        boolean boolean5 = node3.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node7 = com.google.javascript.rhino.head.Node.newString("");
        node7.removeProp(23);
        node3.addChildToFront(node7);
        com.google.javascript.rhino.head.Node node11 = node3.getFirstChild();
        node11.setString("100");
        com.google.javascript.rhino.head.ast.Scope scope14 = node11.getScope();
        com.google.javascript.rhino.head.Node node16 = new com.google.javascript.rhino.head.Node((int) ' ', node11, 2);
        com.google.javascript.rhino.head.Node node19 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        com.google.javascript.rhino.head.Node node21 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str22 = node21.toString();
        boolean boolean23 = node21.hasConsistentReturnUsage();
        boolean boolean24 = node21.hasSideEffects();
        node19.addChildrenToFront(node21);
        node21.removeChildren();
        com.google.javascript.rhino.head.Node node28 = com.google.javascript.rhino.head.Node.newString("hi!");
        node21.addChildrenToBack(node28);
        int int32 = node28.getIntProp(0, 22);
        node11.putProp(15, (java.lang.Object) 22);
        com.google.javascript.rhino.head.Node node35 = new com.google.javascript.rhino.head.Node((int) (short) -1, node11, 2);
        com.google.javascript.rhino.head.Node node37 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean38 = node37.hasSideEffects();
        com.google.javascript.rhino.head.Node node40 = node37.setType(3);
        node35.addChildToFront(node37);
        com.google.javascript.rhino.head.Node node42 = node37.getLastSibling();
        com.google.javascript.rhino.head.Node node46 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str47 = node46.toString();
        boolean boolean48 = node46.hasConsistentReturnUsage();
        boolean boolean49 = node46.hasSideEffects();
        com.google.javascript.rhino.head.Node node50 = new com.google.javascript.rhino.head.Node(0, node46);
        com.google.javascript.rhino.head.Node node53 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str54 = node53.toString();
        boolean boolean55 = node53.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node57 = com.google.javascript.rhino.head.Node.newString("");
        node57.removeProp(23);
        node53.addChildToFront(node57);
        com.google.javascript.rhino.head.Node node62 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean63 = node62.hasChildren();
        node53.addChildrenToFront(node62);
        com.google.javascript.rhino.head.Node node66 = new com.google.javascript.rhino.head.Node((int) (byte) -1);
        java.lang.String str67 = node66.toString();
        boolean boolean68 = node66.hasChildren();
        com.google.javascript.rhino.head.Node node70 = new com.google.javascript.rhino.head.Node((int) (short) -1, node62, node66, (int) (short) 10);
        com.google.javascript.rhino.head.Node node73 = com.google.javascript.rhino.head.Node.newString(23, "");
        com.google.javascript.rhino.head.Node node75 = new com.google.javascript.rhino.head.Node((int) (byte) 10, node46, node66, node73, (int) (short) 0);
        com.google.javascript.rhino.head.ast.Comment comment76 = null;
        node66.setJsDocNode(comment76);
        com.google.javascript.rhino.head.Node node80 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        java.lang.String str81 = node80.toString();
        int int82 = node80.getLineno();
        com.google.javascript.rhino.head.Node node84 = com.google.javascript.rhino.head.Node.newNumber((double) 0);
        com.google.javascript.rhino.head.ast.Comment comment85 = node84.getJsDocNode();
        com.google.javascript.rhino.head.Node node87 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        com.google.javascript.rhino.head.Node node89 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str90 = node89.toString();
        boolean boolean91 = node89.hasConsistentReturnUsage();
        boolean boolean92 = node89.hasSideEffects();
        node87.addChildrenToFront(node89);
        com.google.javascript.rhino.head.Node node94 = new com.google.javascript.rhino.head.Node(8, node80, node84, node87);
        node66.addChildrenToFront(node84);
        com.google.javascript.rhino.head.Node node96 = node84.getFirstChild();
        // The following exception was thrown during execution in test generation
        try {
            node42.removeChild(node96);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "40" + "'", str4, "40");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNull(scope14);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "40" + "'", str22, "40");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 22 + "'", int32 == 22);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "40" + "'", str47, "40");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "40" + "'", str54, "40");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "-1" + "'", str67, "-1");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "100" + "'", str81, "100");
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + (-1) + "'", int82 == (-1));
        org.junit.Assert.assertNotNull(node84);
        org.junit.Assert.assertNull(comment85);
        org.junit.Assert.assertNotNull(node89);
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "40" + "'", str90, "40");
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertNull(node96);
    }

    @Test
    public void test1942() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1942");
        com.google.javascript.rhino.head.Node node2 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str3 = node2.toString();
        boolean boolean4 = node2.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node6 = com.google.javascript.rhino.head.Node.newString("");
        node6.removeProp(23);
        node2.addChildToFront(node6);
        com.google.javascript.rhino.head.Node node10 = node2.getFirstChild();
        node10.setString("100");
        com.google.javascript.rhino.head.ast.Scope scope13 = node10.getScope();
        com.google.javascript.rhino.head.Node node15 = new com.google.javascript.rhino.head.Node((int) ' ', node10, 2);
        com.google.javascript.rhino.head.Node node16 = node10.getLastSibling();
        boolean boolean17 = node10.hasConsistentReturnUsage();
        node10.removeChildren();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "40" + "'", str3, "40");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNull(scope13);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
    }

    @Test
    public void test1943() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1943");
        com.google.javascript.rhino.head.Node node3 = com.google.javascript.rhino.head.Node.newNumber((double) '#');
        com.google.javascript.rhino.head.Node node5 = com.google.javascript.rhino.head.Node.newString("");
        node5.removeProp(23);
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor8 = node5.iterator();
        java.lang.Object obj10 = node5.getProp((int) (byte) 1);
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator11 = node5.new NodeIterator();
        com.google.javascript.rhino.head.Node node12 = node5.getLastSibling();
        com.google.javascript.rhino.head.Node node15 = new com.google.javascript.rhino.head.Node(12, 25);
        com.google.javascript.rhino.head.Node node18 = new com.google.javascript.rhino.head.Node(12, 25);
        boolean boolean19 = node18.hasChildren();
        com.google.javascript.rhino.head.Node node22 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str23 = node22.toString();
        boolean boolean24 = node22.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node26 = com.google.javascript.rhino.head.Node.newString("");
        node26.removeProp(23);
        node22.addChildToFront(node26);
        com.google.javascript.rhino.head.Node node31 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean32 = node31.hasChildren();
        node22.addChildrenToFront(node31);
        int int34 = node31.getLineno();
        com.google.javascript.rhino.head.Node node36 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str37 = node36.toString();
        boolean boolean38 = node36.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node40 = com.google.javascript.rhino.head.Node.newString("");
        node40.removeProp(23);
        node36.addChildToFront(node40);
        com.google.javascript.rhino.head.Node node44 = node36.getFirstChild();
        com.google.javascript.rhino.head.Node node46 = new com.google.javascript.rhino.head.Node((int) (short) 0, node31, node36, 9);
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator47 = node36.new NodeIterator();
        com.google.javascript.rhino.head.Node node51 = com.google.javascript.rhino.head.Node.newString(23, "");
        com.google.javascript.rhino.head.Node node52 = node51.getLastSibling();
        int int53 = node51.getLineno();
        java.util.Spliterator<com.google.javascript.rhino.head.Node> nodeSpliterator54 = node51.spliterator();
        node36.putProp((int) '4', (java.lang.Object) node51);
        com.google.javascript.rhino.head.Node node58 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        java.lang.String str59 = node58.toString();
        int int60 = node58.getLineno();
        com.google.javascript.rhino.head.Node node62 = com.google.javascript.rhino.head.Node.newNumber((double) 0);
        com.google.javascript.rhino.head.ast.Comment comment63 = node62.getJsDocNode();
        com.google.javascript.rhino.head.Node node65 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        com.google.javascript.rhino.head.Node node67 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str68 = node67.toString();
        boolean boolean69 = node67.hasConsistentReturnUsage();
        boolean boolean70 = node67.hasSideEffects();
        node65.addChildrenToFront(node67);
        com.google.javascript.rhino.head.Node node72 = new com.google.javascript.rhino.head.Node(8, node58, node62, node65);
        com.google.javascript.rhino.head.ast.Comment comment73 = null;
        node65.setJsDocNode(comment73);
        node18.addChildBefore(node36, (com.google.javascript.rhino.head.Node) comment73);
        com.google.javascript.rhino.head.Node node77 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        com.google.javascript.rhino.head.Node node79 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str80 = node79.toString();
        boolean boolean81 = node79.hasConsistentReturnUsage();
        boolean boolean82 = node79.hasSideEffects();
        node77.addChildrenToFront(node79);
        node79.removeChildren();
        com.google.javascript.rhino.head.Node node86 = com.google.javascript.rhino.head.Node.newString("hi!");
        node79.addChildrenToBack(node86);
        com.google.javascript.rhino.head.Node node88 = node79.getFirstChild();
        java.lang.String str89 = node88.getJsDoc();
        int int92 = node88.getIntProp(12, 8);
        int int93 = node88.getLineno();
        node15.addChildAfter(node18, node88);
        com.google.javascript.rhino.head.Node node96 = new com.google.javascript.rhino.head.Node((-1), node3, node5, node18, 32);
        com.google.javascript.rhino.head.Node node97 = new com.google.javascript.rhino.head.Node((int) (short) 1, node5);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNotNull(nodeItor8);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "40" + "'", str23, "40");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "40" + "'", str37, "40");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
        org.junit.Assert.assertNotNull(nodeSpliterator54);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "100" + "'", str59, "100");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-1) + "'", int60 == (-1));
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNull(comment63);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "40" + "'", str68, "40");
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "40" + "'", str80, "40");
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(node86);
        org.junit.Assert.assertNotNull(node88);
        org.junit.Assert.assertNull(str89);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 8 + "'", int92 == 8);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + (-1) + "'", int93 == (-1));
    }

    @Test
    public void test1944() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1944");
        com.google.javascript.rhino.head.Node node2 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        com.google.javascript.rhino.head.Node node4 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str5 = node4.toString();
        boolean boolean6 = node4.hasConsistentReturnUsage();
        boolean boolean7 = node4.hasSideEffects();
        node2.addChildrenToFront(node4);
        node4.removeChildren();
        com.google.javascript.rhino.head.Node node11 = com.google.javascript.rhino.head.Node.newString("hi!");
        node4.addChildrenToBack(node11);
        node11.setLineno(22);
        boolean boolean15 = node11.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node17 = com.google.javascript.rhino.head.Node.newString("-1");
        node17.removeProp(25);
        com.google.javascript.rhino.head.Node node21 = com.google.javascript.rhino.head.Node.newString("");
        int int24 = node21.getIntProp(17, (int) (byte) -1);
        com.google.javascript.rhino.head.Node node27 = new com.google.javascript.rhino.head.Node(40, 8);
        com.google.javascript.rhino.head.Node node30 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str31 = node30.toString();
        boolean boolean32 = node30.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node34 = com.google.javascript.rhino.head.Node.newString("");
        node34.removeProp(23);
        node30.addChildToFront(node34);
        com.google.javascript.rhino.head.Node node38 = node30.getFirstChild();
        com.google.javascript.rhino.head.Node node40 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        node38.addChildrenToBack(node40);
        com.google.javascript.rhino.head.Node node43 = com.google.javascript.rhino.head.Node.newString("");
        int int46 = node43.getIntProp(17, (int) (byte) -1);
        com.google.javascript.rhino.head.Node node47 = new com.google.javascript.rhino.head.Node((int) (short) 10, node38, node43);
        com.google.javascript.rhino.head.Node node49 = node38.setType(18);
        node21.addChildAfter(node27, node49);
        node17.addChildToFront(node49);
        com.google.javascript.rhino.head.Node node52 = new com.google.javascript.rhino.head.Node((int) (byte) 100, node11, node49);
        com.google.javascript.rhino.head.Node node53 = node49.getNext();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "40" + "'", str5, "40");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "40" + "'", str31, "40");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNull(node53);
    }

    @Test
    public void test1945() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1945");
        com.google.javascript.rhino.head.Node node2 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        com.google.javascript.rhino.head.Node node4 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str5 = node4.toString();
        boolean boolean6 = node4.hasConsistentReturnUsage();
        boolean boolean7 = node4.hasSideEffects();
        node2.addChildrenToFront(node4);
        com.google.javascript.rhino.head.Node node9 = node4.getLastSibling();
        int int12 = node9.getIntProp(100, (int) (byte) 1);
        com.google.javascript.rhino.head.Node node16 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str17 = node16.toString();
        boolean boolean18 = node16.hasConsistentReturnUsage();
        boolean boolean19 = node16.hasSideEffects();
        com.google.javascript.rhino.head.Node node20 = new com.google.javascript.rhino.head.Node(0, node16);
        com.google.javascript.rhino.head.Node node23 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str24 = node23.toString();
        boolean boolean25 = node23.hasConsistentReturnUsage();
        boolean boolean26 = node23.hasSideEffects();
        com.google.javascript.rhino.head.Node node28 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str29 = node28.toString();
        boolean boolean30 = node28.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node32 = com.google.javascript.rhino.head.Node.newString("");
        node32.removeProp(23);
        node28.addChildToFront(node32);
        com.google.javascript.rhino.head.Node node36 = node28.getFirstChild();
        com.google.javascript.rhino.head.ast.Comment comment37 = node28.getJsDocNode();
        node23.addChildToBack(node28);
        boolean boolean39 = node28.hasConsistentReturnUsage();
        node16.putProp((int) (short) 1, (java.lang.Object) node28);
        com.google.javascript.rhino.head.ast.Comment comment41 = null;
        node28.setJsDocNode(comment41);
        com.google.javascript.rhino.head.Node node44 = com.google.javascript.rhino.head.Node.newNumber((-1.0d));
        node44.putIntProp((int) (byte) -1, (int) (byte) 0);
        com.google.javascript.rhino.head.Node node49 = new com.google.javascript.rhino.head.Node(17, node28, node44, 41);
        com.google.javascript.rhino.head.Node node53 = com.google.javascript.rhino.head.Node.newString(23, "");
        com.google.javascript.rhino.head.Node node54 = node53.getLastSibling();
        com.google.javascript.rhino.head.Node node58 = com.google.javascript.rhino.head.Node.newString("hi!");
        com.google.javascript.rhino.head.Node node59 = new com.google.javascript.rhino.head.Node(13, node58);
        com.google.javascript.rhino.head.Node node62 = new com.google.javascript.rhino.head.Node(12);
        node62.putIntProp(14, 3);
        com.google.javascript.rhino.head.Node node66 = new com.google.javascript.rhino.head.Node(6, node62);
        com.google.javascript.rhino.head.Node node67 = node66.getLastChild();
        com.google.javascript.rhino.head.Node node69 = new com.google.javascript.rhino.head.Node((int) (byte) 100, node58, node66, 0);
        com.google.javascript.rhino.head.Node node72 = new com.google.javascript.rhino.head.Node((int) (byte) 1, 8);
        node72.putIntProp(20, 100);
        com.google.javascript.rhino.head.Node node76 = new com.google.javascript.rhino.head.Node(20, node54, node58, node72);
        java.lang.String str77 = node72.getJsDoc();
        com.google.javascript.rhino.head.Node node79 = node72.setType(24);
        com.google.javascript.rhino.head.Node node80 = new com.google.javascript.rhino.head.Node(15, node9, node44, node72);
        java.util.Spliterator<com.google.javascript.rhino.head.Node> nodeSpliterator81 = node80.spliterator();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "40" + "'", str5, "40");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "40" + "'", str17, "40");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "40" + "'", str24, "40");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "40" + "'", str29, "40");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNull(comment37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertNull(str77);
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertNotNull(nodeSpliterator81);
    }

    @Test
    public void test1946() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1946");
        com.google.javascript.rhino.head.Node node2 = com.google.javascript.rhino.head.Node.newNumber((double) 19);
        com.google.javascript.rhino.head.Node node5 = com.google.javascript.rhino.head.Node.newString("");
        node5.removeProp(23);
        com.google.javascript.rhino.head.Node node10 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str11 = node10.toString();
        boolean boolean12 = node10.hasConsistentReturnUsage();
        boolean boolean13 = node10.hasSideEffects();
        com.google.javascript.rhino.head.Node node14 = new com.google.javascript.rhino.head.Node(0, node10);
        node5.addChildrenToBack(node14);
        com.google.javascript.rhino.head.Node node16 = new com.google.javascript.rhino.head.Node(9, node5);
        com.google.javascript.rhino.head.Node node20 = com.google.javascript.rhino.head.Node.newString("hi!");
        com.google.javascript.rhino.head.Node node21 = new com.google.javascript.rhino.head.Node(13, node20);
        com.google.javascript.rhino.head.Node node22 = new com.google.javascript.rhino.head.Node(7, node20);
        com.google.javascript.rhino.head.Node node24 = new com.google.javascript.rhino.head.Node((int) 'a', node2, node16, node20, (int) (short) 1);
        com.google.javascript.rhino.head.Node node26 = new com.google.javascript.rhino.head.Node(7);
        node20.addChildrenToBack(node26);
        com.google.javascript.rhino.head.Node node28 = node26.getLastSibling();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode29 = null;
        java.lang.String str30 = node28.toStringTree(scriptNode29);
        com.google.javascript.rhino.head.Node node33 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str34 = node33.toString();
        com.google.javascript.rhino.head.ast.Comment comment35 = null;
        node33.setJsDocNode(comment35);
        java.lang.String str37 = node33.toString();
        com.google.javascript.rhino.head.Node node38 = new com.google.javascript.rhino.head.Node(6, node33);
        node28.addChildrenToBack(node33);
        // The following exception was thrown during execution in test generation
        try {
            double double40 = node28.getDouble();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: com.google.javascript.rhino.head.Node cannot be cast to com.google.javascript.rhino.head.ast.NumberLiteral");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "40" + "'", str11, "40");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "40" + "'", str34, "40");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "40" + "'", str37, "40");
    }

    @Test
    public void test1947() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1947");
        com.google.javascript.rhino.head.Node node3 = com.google.javascript.rhino.head.Node.newString(23, "");
        com.google.javascript.rhino.head.Node node4 = node3.getLastSibling();
        com.google.javascript.rhino.head.Node node8 = com.google.javascript.rhino.head.Node.newString("hi!");
        com.google.javascript.rhino.head.Node node9 = new com.google.javascript.rhino.head.Node(13, node8);
        com.google.javascript.rhino.head.Node node12 = new com.google.javascript.rhino.head.Node(12);
        node12.putIntProp(14, 3);
        com.google.javascript.rhino.head.Node node16 = new com.google.javascript.rhino.head.Node(6, node12);
        com.google.javascript.rhino.head.Node node17 = node16.getLastChild();
        com.google.javascript.rhino.head.Node node19 = new com.google.javascript.rhino.head.Node((int) (byte) 100, node8, node16, 0);
        com.google.javascript.rhino.head.Node node22 = new com.google.javascript.rhino.head.Node((int) (byte) 1, 8);
        node22.putIntProp(20, 100);
        com.google.javascript.rhino.head.Node node26 = new com.google.javascript.rhino.head.Node(20, node4, node8, node22);
        com.google.javascript.rhino.head.Node node28 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        node4.addChildToFront(node28);
        node28.removeChildren();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node17);
    }

    @Test
    public void test1948() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1948");
        com.google.javascript.rhino.head.Node node3 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        java.lang.String str4 = node3.toString();
        int int5 = node3.getLineno();
        com.google.javascript.rhino.head.Node node7 = com.google.javascript.rhino.head.Node.newNumber((double) 0);
        com.google.javascript.rhino.head.ast.Comment comment8 = node7.getJsDocNode();
        com.google.javascript.rhino.head.Node node10 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        com.google.javascript.rhino.head.Node node12 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str13 = node12.toString();
        boolean boolean14 = node12.hasConsistentReturnUsage();
        boolean boolean15 = node12.hasSideEffects();
        node10.addChildrenToFront(node12);
        com.google.javascript.rhino.head.Node node17 = new com.google.javascript.rhino.head.Node(8, node3, node7, node10);
        com.google.javascript.rhino.head.Node node20 = new com.google.javascript.rhino.head.Node((int) (byte) -1);
        java.lang.String str21 = node20.toString();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode22 = null;
        java.lang.String str23 = node20.toStringTree(scriptNode22);
        com.google.javascript.rhino.head.Node node26 = com.google.javascript.rhino.head.Node.newString(24, "100");
        com.google.javascript.rhino.head.Node node29 = new com.google.javascript.rhino.head.Node(23, 6);
        com.google.javascript.rhino.head.Node node31 = new com.google.javascript.rhino.head.Node(0, node20, node26, node29, 6);
        com.google.javascript.rhino.head.Node node33 = node31.setType((int) '4');
        com.google.javascript.rhino.head.Node node35 = new com.google.javascript.rhino.head.Node((-1), node3, node31, 19);
        com.google.javascript.rhino.head.Node node36 = node3.getNext();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "100" + "'", str4, "100");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(comment8);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "40" + "'", str13, "40");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "-1" + "'", str21, "-1");
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(node36);
    }

    @Test
    public void test1949() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1949");
        com.google.javascript.rhino.head.Node node2 = com.google.javascript.rhino.head.Node.newString(41, "23");
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor3 = node2.iterator();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(nodeItor3);
    }

    @Test
    public void test1950() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1950");
        com.google.javascript.rhino.head.Node node3 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str4 = node3.toString();
        boolean boolean5 = node3.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node7 = com.google.javascript.rhino.head.Node.newString("");
        node7.removeProp(23);
        node3.addChildToFront(node7);
        com.google.javascript.rhino.head.Node node11 = node3.getFirstChild();
        node11.setString("100");
        com.google.javascript.rhino.head.ast.Scope scope14 = node11.getScope();
        com.google.javascript.rhino.head.Node node16 = new com.google.javascript.rhino.head.Node((int) ' ', node11, 2);
        com.google.javascript.rhino.head.Node node17 = node11.getLastSibling();
        com.google.javascript.rhino.head.Node node20 = new com.google.javascript.rhino.head.Node(12);
        node20.putIntProp(14, 3);
        com.google.javascript.rhino.head.Node node24 = new com.google.javascript.rhino.head.Node(6, node20);
        com.google.javascript.rhino.head.Node node25 = node24.getLastChild();
        com.google.javascript.rhino.head.Node node29 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str30 = node29.toString();
        boolean boolean31 = node29.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node33 = com.google.javascript.rhino.head.Node.newString("");
        node33.removeProp(23);
        node29.addChildToFront(node33);
        com.google.javascript.rhino.head.Node node38 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean39 = node38.hasChildren();
        node29.addChildrenToFront(node38);
        com.google.javascript.rhino.head.Node node42 = new com.google.javascript.rhino.head.Node((int) (byte) -1);
        java.lang.String str43 = node42.toString();
        boolean boolean44 = node42.hasChildren();
        com.google.javascript.rhino.head.Node node46 = new com.google.javascript.rhino.head.Node((int) (short) -1, node38, node42, (int) (short) 10);
        com.google.javascript.rhino.head.Node node47 = node46.getLastChild();
        com.google.javascript.rhino.head.Node node52 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str53 = node52.toString();
        boolean boolean54 = node52.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node56 = com.google.javascript.rhino.head.Node.newString("");
        node56.removeProp(23);
        node52.addChildToFront(node56);
        com.google.javascript.rhino.head.Node node60 = new com.google.javascript.rhino.head.Node((int) 'a', node52);
        com.google.javascript.rhino.head.Node node62 = com.google.javascript.rhino.head.Node.newString("-1");
        com.google.javascript.rhino.head.Node node64 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str65 = node64.toString();
        com.google.javascript.rhino.head.Node node66 = node64.getLastChild();
        com.google.javascript.rhino.head.Node node68 = new com.google.javascript.rhino.head.Node((int) (short) -1, node52, node62, node64, (int) (short) -1);
        com.google.javascript.rhino.head.Node node70 = new com.google.javascript.rhino.head.Node((int) (short) 1, node64, 12);
        com.google.javascript.rhino.head.Node node72 = new com.google.javascript.rhino.head.Node(23);
        node72.removeProp(25);
        boolean boolean75 = node72.hasChildren();
        com.google.javascript.rhino.head.Node node76 = new com.google.javascript.rhino.head.Node((-1), node47, node64, node72);
        node25.addChildToBack(node47);
        node11.addChildToBack(node25);
        int int79 = node25.getType();
        com.google.javascript.rhino.head.Node node81 = com.google.javascript.rhino.head.Node.newNumber((double) 7);
        com.google.javascript.rhino.head.Node node82 = new com.google.javascript.rhino.head.Node((int) '4', node25, node81);
        // The following exception was thrown during execution in test generation
        try {
            int int84 = node25.getExistingIntProp(4);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "40" + "'", str4, "40");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNull(scope14);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "40" + "'", str30, "40");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "-1" + "'", str43, "-1");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "40" + "'", str53, "40");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "40" + "'", str65, "40");
        org.junit.Assert.assertNull(node66);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 12 + "'", int79 == 12);
        org.junit.Assert.assertNotNull(node81);
    }

    @Test
    public void test1951() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1951");
        com.google.javascript.rhino.head.Node node2 = com.google.javascript.rhino.head.Node.newString(23, "");
        com.google.javascript.rhino.head.Node node3 = node2.getLastSibling();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator4 = node3.new NodeIterator();
        boolean boolean5 = nodeIterator4.hasNext();
        boolean boolean6 = nodeIterator4.hasNext();
        boolean boolean7 = nodeIterator4.hasNext();
        boolean boolean8 = nodeIterator4.hasNext();
        // The following exception was thrown during execution in test generation
        try {
            nodeIterator4.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: next() has not been called");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test1952() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1952");
        com.google.javascript.rhino.head.Node node2 = com.google.javascript.rhino.head.Node.newString("hi!");
        com.google.javascript.rhino.head.Node node5 = com.google.javascript.rhino.head.Node.newString(23, "");
        com.google.javascript.rhino.head.Node node6 = new com.google.javascript.rhino.head.Node(0, node2, node5);
        com.google.javascript.rhino.head.Node node7 = node6.getLastSibling();
        boolean boolean8 = node6.hasSideEffects();
        com.google.javascript.rhino.head.ast.Comment comment9 = node6.getJsDocNode();
        com.google.javascript.rhino.head.Node node14 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str15 = node14.toString();
        boolean boolean16 = node14.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node18 = com.google.javascript.rhino.head.Node.newString("");
        node18.removeProp(23);
        node14.addChildToFront(node18);
        com.google.javascript.rhino.head.Node node23 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean24 = node23.hasChildren();
        node14.addChildrenToFront(node23);
        com.google.javascript.rhino.head.Node node27 = new com.google.javascript.rhino.head.Node((int) (byte) -1);
        java.lang.String str28 = node27.toString();
        boolean boolean29 = node27.hasChildren();
        com.google.javascript.rhino.head.Node node31 = new com.google.javascript.rhino.head.Node((int) (short) -1, node23, node27, (int) (short) 10);
        com.google.javascript.rhino.head.Node node32 = node31.getLastChild();
        com.google.javascript.rhino.head.Node node37 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str38 = node37.toString();
        boolean boolean39 = node37.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node41 = com.google.javascript.rhino.head.Node.newString("");
        node41.removeProp(23);
        node37.addChildToFront(node41);
        com.google.javascript.rhino.head.Node node45 = new com.google.javascript.rhino.head.Node((int) 'a', node37);
        com.google.javascript.rhino.head.Node node47 = com.google.javascript.rhino.head.Node.newString("-1");
        com.google.javascript.rhino.head.Node node49 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str50 = node49.toString();
        com.google.javascript.rhino.head.Node node51 = node49.getLastChild();
        com.google.javascript.rhino.head.Node node53 = new com.google.javascript.rhino.head.Node((int) (short) -1, node37, node47, node49, (int) (short) -1);
        com.google.javascript.rhino.head.Node node55 = new com.google.javascript.rhino.head.Node((int) (short) 1, node49, 12);
        com.google.javascript.rhino.head.Node node57 = new com.google.javascript.rhino.head.Node(23);
        node57.removeProp(25);
        boolean boolean60 = node57.hasChildren();
        com.google.javascript.rhino.head.Node node61 = new com.google.javascript.rhino.head.Node((-1), node32, node49, node57);
        boolean boolean62 = node49.hasSideEffects();
        com.google.javascript.rhino.head.Node node66 = com.google.javascript.rhino.head.Node.newString(0, "hi!");
        node49.putProp(22, (java.lang.Object) 0);
        node6.putProp(10, (java.lang.Object) node49);
        com.google.javascript.rhino.head.Node node69 = null;
        // The following exception was thrown during execution in test generation
        try {
            node49.addChildToFront(node69);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(comment9);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "40" + "'", str15, "40");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "-1" + "'", str28, "-1");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "40" + "'", str38, "40");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "40" + "'", str50, "40");
        org.junit.Assert.assertNull(node51);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(node66);
    }

    @Test
    public void test1953() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1953");
        com.google.javascript.rhino.head.Node node2 = com.google.javascript.rhino.head.Node.newString(0, "hi!");
        com.google.javascript.rhino.head.ast.Scope scope3 = node2.getScope();
        // The following exception was thrown during execution in test generation
        try {
            int int6 = scope3.getIntProp(20, 12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNull(scope3);
    }

    @Test
    public void test1954() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1954");
        com.google.javascript.rhino.head.Node node3 = com.google.javascript.rhino.head.Node.newString("");
        node3.removeProp(23);
        com.google.javascript.rhino.head.Node node8 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str9 = node8.toString();
        boolean boolean10 = node8.hasConsistentReturnUsage();
        boolean boolean11 = node8.hasSideEffects();
        com.google.javascript.rhino.head.Node node12 = new com.google.javascript.rhino.head.Node(0, node8);
        node3.addChildrenToBack(node12);
        com.google.javascript.rhino.head.Node node14 = new com.google.javascript.rhino.head.Node(9, node3);
        com.google.javascript.rhino.head.Node node15 = new com.google.javascript.rhino.head.Node((int) '#', node14);
        com.google.javascript.rhino.head.Node node17 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        com.google.javascript.rhino.head.Node node19 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str20 = node19.toString();
        boolean boolean21 = node19.hasConsistentReturnUsage();
        boolean boolean22 = node19.hasSideEffects();
        node17.addChildrenToFront(node19);
        node19.removeChildren();
        com.google.javascript.rhino.head.Node node26 = new com.google.javascript.rhino.head.Node((int) (short) 0);
        node14.addChildAfter(node19, node26);
        com.google.javascript.rhino.head.Node node28 = node14.getLastSibling();
        com.google.javascript.rhino.head.Node node29 = node28.getLastSibling();
        com.google.javascript.rhino.head.Node node32 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str33 = node32.toString();
        boolean boolean34 = node32.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node36 = com.google.javascript.rhino.head.Node.newString("");
        node36.removeProp(23);
        node32.addChildToFront(node36);
        com.google.javascript.rhino.head.Node node40 = node32.getFirstChild();
        com.google.javascript.rhino.head.ast.Comment comment41 = node32.getJsDocNode();
        int int42 = node32.getType();
        node32.setDouble((double) 17);
        com.google.javascript.rhino.head.Node node46 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str47 = node46.toString();
        boolean boolean48 = node46.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node50 = com.google.javascript.rhino.head.Node.newString("");
        node50.removeProp(23);
        node46.addChildToFront(node50);
        java.lang.String str54 = node50.getString();
        com.google.javascript.rhino.head.Node node57 = com.google.javascript.rhino.head.Node.newString((int) (short) 0, "-1");
        com.google.javascript.rhino.head.Node node59 = new com.google.javascript.rhino.head.Node(10, node32, node50, node57, 14);
        node29.addChildrenToFront(node32);
        // The following exception was thrown during execution in test generation
        try {
            node29.setDouble(32.0d);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: com.google.javascript.rhino.head.Node cannot be cast to com.google.javascript.rhino.head.ast.NumberLiteral");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "40" + "'", str9, "40");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "40" + "'", str20, "40");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "40" + "'", str33, "40");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNull(comment41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 40 + "'", int42 == 40);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "40" + "'", str47, "40");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertNotNull(node57);
    }

    @Test
    public void test1955() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1955");
        com.google.javascript.rhino.head.Node node2 = new com.google.javascript.rhino.head.Node(3, 0);
        com.google.javascript.rhino.head.Node node4 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str5 = node4.toString();
        boolean boolean6 = node4.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node8 = com.google.javascript.rhino.head.Node.newString("");
        node8.removeProp(23);
        node4.addChildToFront(node8);
        com.google.javascript.rhino.head.Node node13 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean14 = node13.hasChildren();
        node4.addChildrenToFront(node13);
        boolean boolean16 = node13.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator17 = node13.new NodeIterator();
        com.google.javascript.rhino.head.Node node19 = com.google.javascript.rhino.head.Node.newNumber((double) 0L);
        node2.replaceChildAfter(node13, node19);
        // The following exception was thrown during execution in test generation
        try {
            int int22 = node2.getExistingIntProp(16);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "40" + "'", str5, "40");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(node19);
    }

    @Test
    public void test1956() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1956");
        com.google.javascript.rhino.head.Node node3 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str4 = node3.toString();
        boolean boolean5 = node3.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node7 = com.google.javascript.rhino.head.Node.newString("");
        node7.removeProp(23);
        node3.addChildToFront(node7);
        com.google.javascript.rhino.head.Node node11 = new com.google.javascript.rhino.head.Node((int) 'a', node3);
        com.google.javascript.rhino.head.Node node15 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str16 = node15.toString();
        boolean boolean17 = node15.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node19 = com.google.javascript.rhino.head.Node.newString("");
        node19.removeProp(23);
        node15.addChildToFront(node19);
        com.google.javascript.rhino.head.Node node23 = node15.getFirstChild();
        node23.setString("100");
        com.google.javascript.rhino.head.ast.Scope scope26 = node23.getScope();
        com.google.javascript.rhino.head.Node node28 = new com.google.javascript.rhino.head.Node((int) ' ', node23, 2);
        com.google.javascript.rhino.head.Node node29 = node23.getLastSibling();
        com.google.javascript.rhino.head.Node node32 = com.google.javascript.rhino.head.Node.newString(23, "");
        com.google.javascript.rhino.head.Node node33 = node32.getLastSibling();
        com.google.javascript.rhino.head.Node node34 = new com.google.javascript.rhino.head.Node((int) ' ', node29, node32);
        node3.addChildrenToFront(node34);
        com.google.javascript.rhino.head.Node node37 = new com.google.javascript.rhino.head.Node(26, node34, 11);
        java.lang.Object obj39 = node34.getProp((int) 'a');
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "40" + "'", str4, "40");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "40" + "'", str16, "40");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNull(scope26);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNull(obj39);
    }

    @Test
    public void test1957() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1957");
        com.google.javascript.rhino.head.Node node2 = com.google.javascript.rhino.head.Node.newString(23, "");
        com.google.javascript.rhino.head.Node node3 = node2.getLastSibling();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator4 = node3.new NodeIterator();
        node3.setLineno(13);
        // The following exception was thrown during execution in test generation
        try {
            node3.resetTargets();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node3);
    }

    @Test
    public void test1958() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1958");
        com.google.javascript.rhino.head.Node node2 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str3 = node2.toString();
        boolean boolean4 = node2.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node6 = com.google.javascript.rhino.head.Node.newString("");
        node6.removeProp(23);
        node2.addChildToFront(node6);
        com.google.javascript.rhino.head.Node node11 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean12 = node11.hasChildren();
        node2.addChildrenToFront(node11);
        com.google.javascript.rhino.head.Node node15 = new com.google.javascript.rhino.head.Node((int) (byte) -1);
        java.lang.String str16 = node15.toString();
        boolean boolean17 = node15.hasChildren();
        com.google.javascript.rhino.head.Node node19 = new com.google.javascript.rhino.head.Node((int) (short) -1, node11, node15, (int) (short) 10);
        boolean boolean20 = node11.hasChildren();
        com.google.javascript.rhino.head.Node node23 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        com.google.javascript.rhino.head.Node node25 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str26 = node25.toString();
        boolean boolean27 = node25.hasConsistentReturnUsage();
        boolean boolean28 = node25.hasSideEffects();
        node23.addChildrenToFront(node25);
        node25.removeChildren();
        com.google.javascript.rhino.head.Node node32 = com.google.javascript.rhino.head.Node.newString("hi!");
        node25.addChildrenToBack(node32);
        node11.putProp(23, (java.lang.Object) node32);
        node11.setLineno((int) '4');
        // The following exception was thrown during execution in test generation
        try {
            int int37 = node11.labelId();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "40" + "'", str3, "40");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "-1" + "'", str16, "-1");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "40" + "'", str26, "40");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node32);
    }

    @Test
    public void test1959() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1959");
        com.google.javascript.rhino.head.Node node1 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str2 = node1.toString();
        boolean boolean3 = node1.hasConsistentReturnUsage();
        boolean boolean4 = node1.hasSideEffects();
        com.google.javascript.rhino.head.Node node6 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str7 = node6.toString();
        boolean boolean8 = node6.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node10 = com.google.javascript.rhino.head.Node.newString("");
        node10.removeProp(23);
        node6.addChildToFront(node10);
        com.google.javascript.rhino.head.Node node14 = node6.getFirstChild();
        com.google.javascript.rhino.head.ast.Comment comment15 = node6.getJsDocNode();
        node1.addChildToBack(node6);
        java.lang.String str17 = node1.toString();
        node1.setDouble((double) 10.0f);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "40" + "'", str2, "40");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "40" + "'", str7, "40");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNull(comment15);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "40" + "'", str17, "40");
    }

    @Test
    public void test1960() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1960");
        com.google.javascript.rhino.head.Node node2 = new com.google.javascript.rhino.head.Node(24, (int) (byte) 0);
    }

    @Test
    public void test1961() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1961");
        com.google.javascript.rhino.head.Node node2 = com.google.javascript.rhino.head.Node.newString(2, "");
        org.junit.Assert.assertNotNull(node2);
    }

    @Test
    public void test1962() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1962");
        com.google.javascript.rhino.head.Node node2 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str3 = node2.toString();
        boolean boolean4 = node2.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node6 = com.google.javascript.rhino.head.Node.newString("");
        node6.removeProp(23);
        node2.addChildToFront(node6);
        com.google.javascript.rhino.head.Node node10 = node2.getFirstChild();
        node10.setString("100");
        com.google.javascript.rhino.head.ast.Scope scope13 = node10.getScope();
        com.google.javascript.rhino.head.Node node15 = new com.google.javascript.rhino.head.Node((int) ' ', node10, 2);
        boolean boolean16 = node15.hasChildren();
        com.google.javascript.rhino.head.Node node19 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str20 = node19.toString();
        boolean boolean21 = node19.hasConsistentReturnUsage();
        boolean boolean22 = node19.hasSideEffects();
        com.google.javascript.rhino.head.Node node23 = new com.google.javascript.rhino.head.Node(0, node19);
        int int24 = node19.getLineno();
        node15.addChildToFront(node19);
        boolean boolean26 = node19.hasSideEffects();
        boolean boolean27 = node19.hasChildren();
        com.google.javascript.rhino.head.Node node30 = new com.google.javascript.rhino.head.Node((int) (byte) 1);
        node30.removeProp((int) (short) 10);
        com.google.javascript.rhino.head.Node node35 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str36 = node35.toString();
        boolean boolean37 = node35.hasConsistentReturnUsage();
        boolean boolean38 = node35.hasSideEffects();
        com.google.javascript.rhino.head.Node node39 = new com.google.javascript.rhino.head.Node(0, node35);
        com.google.javascript.rhino.head.Node node42 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str43 = node42.toString();
        boolean boolean44 = node42.hasConsistentReturnUsage();
        boolean boolean45 = node42.hasSideEffects();
        com.google.javascript.rhino.head.Node node47 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str48 = node47.toString();
        boolean boolean49 = node47.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node51 = com.google.javascript.rhino.head.Node.newString("");
        node51.removeProp(23);
        node47.addChildToFront(node51);
        com.google.javascript.rhino.head.Node node55 = node47.getFirstChild();
        com.google.javascript.rhino.head.ast.Comment comment56 = node47.getJsDocNode();
        node42.addChildToBack(node47);
        boolean boolean58 = node47.hasConsistentReturnUsage();
        node35.putProp((int) (short) 1, (java.lang.Object) node47);
        com.google.javascript.rhino.head.Node node60 = new com.google.javascript.rhino.head.Node((int) '#', node30, node47);
        node19.addChildrenToBack(node60);
        com.google.javascript.rhino.head.Node node63 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        com.google.javascript.rhino.head.Node node65 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str66 = node65.toString();
        boolean boolean67 = node65.hasConsistentReturnUsage();
        boolean boolean68 = node65.hasSideEffects();
        node63.addChildrenToFront(node65);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode70 = null;
        java.lang.String str71 = node65.toStringTree(scriptNode70);
        java.lang.String str72 = node65.toString();
        com.google.javascript.rhino.head.Node node74 = com.google.javascript.rhino.head.Node.newString("2");
        int int75 = node74.getType();
        java.lang.String str76 = node74.getJsDoc();
        // The following exception was thrown during execution in test generation
        try {
            node19.replaceChildAfter(node65, node74);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "40" + "'", str3, "40");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNull(scope13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "40" + "'", str20, "40");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "40" + "'", str36, "40");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "40" + "'", str43, "40");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "40" + "'", str48, "40");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNull(comment56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "40" + "'", str66, "40");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNull(str71);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "40" + "'", str72, "40");
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 41 + "'", int75 == 41);
        org.junit.Assert.assertNull(str76);
    }

    @Test
    public void test1963() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1963");
        com.google.javascript.rhino.head.Node node2 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str3 = node2.toString();
        boolean boolean4 = node2.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node6 = com.google.javascript.rhino.head.Node.newString("");
        node6.removeProp(23);
        node2.addChildToFront(node6);
        com.google.javascript.rhino.head.Node node10 = node2.getFirstChild();
        node10.setString("100");
        com.google.javascript.rhino.head.ast.Scope scope13 = node10.getScope();
        com.google.javascript.rhino.head.Node node15 = new com.google.javascript.rhino.head.Node((int) ' ', node10, 2);
        com.google.javascript.rhino.head.Node node16 = node10.getLastSibling();
        node10.removeChildren();
        boolean boolean18 = node10.hasChildren();
        com.google.javascript.rhino.head.Node node19 = node10.getNext();
        com.google.javascript.rhino.head.Node node24 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str25 = node24.toString();
        boolean boolean26 = node24.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node28 = com.google.javascript.rhino.head.Node.newString("");
        node28.removeProp(23);
        node24.addChildToFront(node28);
        com.google.javascript.rhino.head.Node node32 = node24.getFirstChild();
        node32.setString("100");
        com.google.javascript.rhino.head.ast.Scope scope35 = node32.getScope();
        com.google.javascript.rhino.head.Node node37 = new com.google.javascript.rhino.head.Node((int) ' ', node32, 2);
        boolean boolean38 = node37.hasChildren();
        com.google.javascript.rhino.head.Node node41 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str42 = node41.toString();
        boolean boolean43 = node41.hasConsistentReturnUsage();
        boolean boolean44 = node41.hasSideEffects();
        com.google.javascript.rhino.head.Node node45 = new com.google.javascript.rhino.head.Node(0, node41);
        int int46 = node41.getLineno();
        node37.addChildToFront(node41);
        com.google.javascript.rhino.head.Node node49 = com.google.javascript.rhino.head.Node.newString("-1");
        node49.removeProp(25);
        com.google.javascript.rhino.head.Node node53 = new com.google.javascript.rhino.head.Node(7, node41, node49, 1);
        int int54 = node53.getLineno();
        com.google.javascript.rhino.head.Node node57 = com.google.javascript.rhino.head.Node.newString(10, "100");
        com.google.javascript.rhino.head.Node node61 = com.google.javascript.rhino.head.Node.newString("hi!");
        com.google.javascript.rhino.head.Node node62 = new com.google.javascript.rhino.head.Node(13, node61);
        com.google.javascript.rhino.head.Node node63 = new com.google.javascript.rhino.head.Node(7, node61);
        com.google.javascript.rhino.head.Node node65 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        node63.addChildToFront(node65);
        com.google.javascript.rhino.head.Node node69 = new com.google.javascript.rhino.head.Node(12);
        node69.putIntProp(14, 3);
        com.google.javascript.rhino.head.Node node73 = new com.google.javascript.rhino.head.Node(6, node69);
        com.google.javascript.rhino.head.Node node74 = node73.getLastChild();
        node63.addChildToFront(node73);
        node57.addChildToFront(node63);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode77 = null;
        java.lang.String str78 = node57.toStringTree(scriptNode77);
        com.google.javascript.rhino.head.Node node79 = new com.google.javascript.rhino.head.Node(18, node53, node57);
        // The following exception was thrown during execution in test generation
        try {
            node19.addChildrenToFront(node57);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "40" + "'", str3, "40");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNull(scope13);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(node19);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "40" + "'", str25, "40");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNull(scope35);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "40" + "'", str42, "40");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertNull(str78);
    }

    @Test
    public void test1964() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1964");
        com.google.javascript.rhino.head.Node node1 = new com.google.javascript.rhino.head.Node((int) (byte) 0);
        boolean boolean2 = node1.hasChildren();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test1965() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1965");
        com.google.javascript.rhino.head.Node node1 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str2 = node1.toString();
        boolean boolean3 = node1.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node5 = com.google.javascript.rhino.head.Node.newString("");
        node5.removeProp(23);
        node1.addChildToFront(node5);
        com.google.javascript.rhino.head.Node node9 = node5.getLastChild();
        com.google.javascript.rhino.head.Node node11 = com.google.javascript.rhino.head.Node.newString("1");
        node5.addChildrenToBack(node11);
        int int13 = node11.getLineno();
        node11.removeProp(16);
        com.google.javascript.rhino.head.Node node17 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str18 = node17.toString();
        boolean boolean19 = node17.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.ast.Comment comment20 = null;
        node17.setJsDocNode(comment20);
        com.google.javascript.rhino.head.Node node24 = com.google.javascript.rhino.head.Node.newString("");
        node24.removeProp(23);
        com.google.javascript.rhino.head.Node node29 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str30 = node29.toString();
        boolean boolean31 = node29.hasConsistentReturnUsage();
        boolean boolean32 = node29.hasSideEffects();
        com.google.javascript.rhino.head.Node node33 = new com.google.javascript.rhino.head.Node(0, node29);
        node24.addChildrenToBack(node33);
        com.google.javascript.rhino.head.Node node35 = new com.google.javascript.rhino.head.Node(9, node24);
        node17.addChildrenToFront(node35);
        com.google.javascript.rhino.head.Node node38 = node17.setType(18);
        node17.removeChildren();
        com.google.javascript.rhino.head.Node node43 = com.google.javascript.rhino.head.Node.newString("hi!");
        com.google.javascript.rhino.head.Node node44 = new com.google.javascript.rhino.head.Node(13, node43);
        com.google.javascript.rhino.head.Node node45 = new com.google.javascript.rhino.head.Node(7, node43);
        com.google.javascript.rhino.head.Node node47 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        node45.addChildToFront(node47);
        com.google.javascript.rhino.head.Node node49 = node45.getLastSibling();
        node11.addChildAfter(node17, node45);
        com.google.javascript.rhino.head.Node node54 = com.google.javascript.rhino.head.Node.newString("hi!");
        com.google.javascript.rhino.head.Node node55 = new com.google.javascript.rhino.head.Node(13, node54);
        com.google.javascript.rhino.head.Node node56 = new com.google.javascript.rhino.head.Node(7, node54);
        com.google.javascript.rhino.head.Node node58 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        node56.addChildToFront(node58);
        com.google.javascript.rhino.head.Node node60 = node56.getLastSibling();
        boolean boolean61 = node60.hasConsistentReturnUsage();
        // The following exception was thrown during execution in test generation
        try {
            node11.removeChild(node60);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "40" + "'", str2, "40");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "40" + "'", str18, "40");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "40" + "'", str30, "40");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
    }

    @Test
    public void test1966() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1966");
        com.google.javascript.rhino.head.Node node4 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str5 = node4.toString();
        boolean boolean6 = node4.hasConsistentReturnUsage();
        boolean boolean7 = node4.hasSideEffects();
        com.google.javascript.rhino.head.Node node8 = new com.google.javascript.rhino.head.Node(0, node4);
        com.google.javascript.rhino.head.Node node11 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str12 = node11.toString();
        boolean boolean13 = node11.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node15 = com.google.javascript.rhino.head.Node.newString("");
        node15.removeProp(23);
        node11.addChildToFront(node15);
        com.google.javascript.rhino.head.Node node20 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean21 = node20.hasChildren();
        node11.addChildrenToFront(node20);
        com.google.javascript.rhino.head.Node node24 = new com.google.javascript.rhino.head.Node((int) (byte) -1);
        java.lang.String str25 = node24.toString();
        boolean boolean26 = node24.hasChildren();
        com.google.javascript.rhino.head.Node node28 = new com.google.javascript.rhino.head.Node((int) (short) -1, node20, node24, (int) (short) 10);
        com.google.javascript.rhino.head.Node node31 = com.google.javascript.rhino.head.Node.newString(23, "");
        com.google.javascript.rhino.head.Node node33 = new com.google.javascript.rhino.head.Node((int) (byte) 10, node4, node24, node31, (int) (short) 0);
        com.google.javascript.rhino.head.ast.Comment comment34 = null;
        node33.setJsDocNode(comment34);
        com.google.javascript.rhino.head.Node node36 = node33.getLastChild();
        com.google.javascript.rhino.head.Node node38 = new com.google.javascript.rhino.head.Node(4);
        com.google.javascript.rhino.head.Node node43 = com.google.javascript.rhino.head.Node.newString(23, "");
        com.google.javascript.rhino.head.Node node44 = node43.getLastSibling();
        com.google.javascript.rhino.head.Node node46 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        com.google.javascript.rhino.head.Node node48 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str49 = node48.toString();
        boolean boolean50 = node48.hasConsistentReturnUsage();
        boolean boolean51 = node48.hasSideEffects();
        node46.addChildrenToFront(node48);
        com.google.javascript.rhino.head.Node node54 = new com.google.javascript.rhino.head.Node(26, node43, node46, 20);
        boolean boolean55 = node54.hasSideEffects();
        com.google.javascript.rhino.head.Node node57 = new com.google.javascript.rhino.head.Node(97);
        int int58 = node57.getType();
        com.google.javascript.rhino.head.Node node60 = node57.setType(97);
        com.google.javascript.rhino.head.Node node62 = new com.google.javascript.rhino.head.Node(22, node54, node60, 25);
        com.google.javascript.rhino.head.Node node63 = new com.google.javascript.rhino.head.Node((int) (short) 1, node33, node38, node62);
        node38.removeChildren();
        // The following exception was thrown during execution in test generation
        try {
            node38.resetTargets();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "40" + "'", str5, "40");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "40" + "'", str12, "40");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "-1" + "'", str25, "-1");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "40" + "'", str49, "40");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 97 + "'", int58 == 97);
        org.junit.Assert.assertNotNull(node60);
    }

    @Test
    public void test1967() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1967");
        com.google.javascript.rhino.head.Node node1 = com.google.javascript.rhino.head.Node.newString("hi!");
        java.lang.String str2 = node1.getJsDoc();
        com.google.javascript.rhino.head.Node node3 = node1.getLastChild();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str4 = node3.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(node3);
    }

    @Test
    public void test1968() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1968");
        com.google.javascript.rhino.head.Node node1 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str2 = node1.toString();
        boolean boolean3 = node1.hasConsistentReturnUsage();
        boolean boolean4 = node1.hasSideEffects();
        com.google.javascript.rhino.head.Node node6 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str7 = node6.toString();
        boolean boolean8 = node6.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node10 = com.google.javascript.rhino.head.Node.newString("");
        node10.removeProp(23);
        node6.addChildToFront(node10);
        com.google.javascript.rhino.head.Node node14 = node6.getFirstChild();
        com.google.javascript.rhino.head.ast.Comment comment15 = node6.getJsDocNode();
        node1.addChildToBack(node6);
        java.lang.String str17 = node1.toString();
        com.google.javascript.rhino.head.Node node19 = node1.setType(25);
        com.google.javascript.rhino.head.Node node20 = node1.getFirstChild();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator21 = node20.new NodeIterator();
        // The following exception was thrown during execution in test generation
        try {
            int int22 = node20.labelId();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "40" + "'", str2, "40");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "40" + "'", str7, "40");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNull(comment15);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "40" + "'", str17, "40");
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node20);
    }

    @Test
    public void test1969() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1969");
        com.google.javascript.rhino.head.Node node1 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str2 = node1.toString();
        boolean boolean3 = node1.hasConsistentReturnUsage();
        boolean boolean4 = node1.hasSideEffects();
        com.google.javascript.rhino.head.Node node6 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str7 = node6.toString();
        boolean boolean8 = node6.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node10 = com.google.javascript.rhino.head.Node.newString("");
        node10.removeProp(23);
        node6.addChildToFront(node10);
        com.google.javascript.rhino.head.Node node14 = node6.getFirstChild();
        com.google.javascript.rhino.head.ast.Comment comment15 = node6.getJsDocNode();
        node1.addChildToBack(node6);
        java.lang.String str17 = node1.toString();
        com.google.javascript.rhino.head.Node node19 = node1.setType(25);
        com.google.javascript.rhino.head.Node node20 = node1.getFirstChild();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator21 = node20.new NodeIterator();
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor22 = node20.iterator();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "40" + "'", str2, "40");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "40" + "'", str7, "40");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNull(comment15);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "40" + "'", str17, "40");
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(nodeItor22);
    }

    @Test
    public void test1970() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1970");
        com.google.javascript.rhino.head.Node node3 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str4 = node3.toString();
        boolean boolean5 = node3.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node7 = com.google.javascript.rhino.head.Node.newString("");
        node7.removeProp(23);
        node3.addChildToFront(node7);
        com.google.javascript.rhino.head.Node node11 = node3.getFirstChild();
        node11.setString("100");
        com.google.javascript.rhino.head.ast.Scope scope14 = node11.getScope();
        com.google.javascript.rhino.head.Node node16 = new com.google.javascript.rhino.head.Node((int) ' ', node11, 2);
        boolean boolean17 = node16.hasChildren();
        com.google.javascript.rhino.head.Node node20 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str21 = node20.toString();
        boolean boolean22 = node20.hasConsistentReturnUsage();
        boolean boolean23 = node20.hasSideEffects();
        com.google.javascript.rhino.head.Node node24 = new com.google.javascript.rhino.head.Node(0, node20);
        int int25 = node20.getLineno();
        node16.addChildToFront(node20);
        boolean boolean27 = node20.hasSideEffects();
        boolean boolean28 = node20.hasChildren();
        com.google.javascript.rhino.head.Node node31 = new com.google.javascript.rhino.head.Node((int) (byte) 1);
        node31.removeProp((int) (short) 10);
        com.google.javascript.rhino.head.Node node36 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str37 = node36.toString();
        boolean boolean38 = node36.hasConsistentReturnUsage();
        boolean boolean39 = node36.hasSideEffects();
        com.google.javascript.rhino.head.Node node40 = new com.google.javascript.rhino.head.Node(0, node36);
        com.google.javascript.rhino.head.Node node43 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str44 = node43.toString();
        boolean boolean45 = node43.hasConsistentReturnUsage();
        boolean boolean46 = node43.hasSideEffects();
        com.google.javascript.rhino.head.Node node48 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str49 = node48.toString();
        boolean boolean50 = node48.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node52 = com.google.javascript.rhino.head.Node.newString("");
        node52.removeProp(23);
        node48.addChildToFront(node52);
        com.google.javascript.rhino.head.Node node56 = node48.getFirstChild();
        com.google.javascript.rhino.head.ast.Comment comment57 = node48.getJsDocNode();
        node43.addChildToBack(node48);
        boolean boolean59 = node48.hasConsistentReturnUsage();
        node36.putProp((int) (short) 1, (java.lang.Object) node48);
        com.google.javascript.rhino.head.Node node61 = new com.google.javascript.rhino.head.Node((int) '#', node31, node48);
        node20.addChildrenToBack(node61);
        com.google.javascript.rhino.head.Node node64 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str65 = node64.toString();
        boolean boolean66 = node64.hasConsistentReturnUsage();
        boolean boolean67 = node64.hasSideEffects();
        com.google.javascript.rhino.head.Node node69 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str70 = node69.toString();
        boolean boolean71 = node69.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node73 = com.google.javascript.rhino.head.Node.newString("");
        node73.removeProp(23);
        node69.addChildToFront(node73);
        com.google.javascript.rhino.head.Node node77 = node69.getFirstChild();
        com.google.javascript.rhino.head.ast.Comment comment78 = node69.getJsDocNode();
        node64.addChildToBack(node69);
        java.lang.String str80 = node64.toString();
        com.google.javascript.rhino.head.Node node82 = node64.setType(25);
        int int85 = node64.getIntProp(100, (int) (byte) 0);
        com.google.javascript.rhino.head.Node node87 = node64.setType(10);
        com.google.javascript.rhino.head.Node node89 = new com.google.javascript.rhino.head.Node(41, node61, node64, 0);
        java.lang.Object obj91 = node61.getProp(20);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "40" + "'", str4, "40");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNull(scope14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "40" + "'", str21, "40");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "40" + "'", str37, "40");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "40" + "'", str44, "40");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "40" + "'", str49, "40");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertNull(comment57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "40" + "'", str65, "40");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "40" + "'", str70, "40");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertNull(comment78);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "40" + "'", str80, "40");
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertNotNull(node87);
        org.junit.Assert.assertNull(obj91);
    }

    @Test
    public void test1971() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1971");
        com.google.javascript.rhino.head.Node node2 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        com.google.javascript.rhino.head.Node node4 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str5 = node4.toString();
        boolean boolean6 = node4.hasConsistentReturnUsage();
        boolean boolean7 = node4.hasSideEffects();
        node2.addChildrenToFront(node4);
        node4.removeChildren();
        com.google.javascript.rhino.head.Node node11 = com.google.javascript.rhino.head.Node.newString("hi!");
        node4.addChildrenToBack(node11);
        boolean boolean13 = node4.hasSideEffects();
        com.google.javascript.rhino.head.Node node14 = node4.getFirstChild();
        boolean boolean15 = node4.hasSideEffects();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator16 = node4.new NodeIterator();
        com.google.javascript.rhino.head.Node node17 = nodeIterator16.next();
        com.google.javascript.rhino.head.Node node19 = com.google.javascript.rhino.head.Node.newString("");
        node19.removeProp(23);
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor22 = node19.iterator();
        java.lang.Object obj24 = node19.getProp((int) (byte) 1);
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator25 = node19.new NodeIterator();
        java.lang.String str26 = node19.getJsDoc();
        java.lang.String str27 = node19.getJsDoc();
        com.google.javascript.rhino.head.Node node29 = new com.google.javascript.rhino.head.Node(2, node17, node19, (int) (byte) 0);
        node17.setString("11");
        com.google.javascript.rhino.head.Node node34 = com.google.javascript.rhino.head.Node.newString("");
        node34.removeProp(23);
        com.google.javascript.rhino.head.Node node39 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str40 = node39.toString();
        boolean boolean41 = node39.hasConsistentReturnUsage();
        boolean boolean42 = node39.hasSideEffects();
        com.google.javascript.rhino.head.Node node43 = new com.google.javascript.rhino.head.Node(0, node39);
        node34.addChildrenToBack(node43);
        com.google.javascript.rhino.head.Node node45 = new com.google.javascript.rhino.head.Node(9, node34);
        node34.removeProp(4);
        com.google.javascript.rhino.head.Node node49 = node34.setType(23);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode50 = null;
        java.lang.String str51 = node49.toStringTree(scriptNode50);
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor52 = node49.iterator();
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor53 = node49.iterator();
        node17.addChildToFront(node49);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "40" + "'", str5, "40");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(nodeItor22);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "40" + "'", str40, "40");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertNotNull(nodeItor52);
        org.junit.Assert.assertNotNull(nodeItor53);
    }

    @Test
    public void test1972() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1972");
        com.google.javascript.rhino.head.Node node3 = com.google.javascript.rhino.head.Node.newString((int) '4', "hi!");
        com.google.javascript.rhino.head.Node node7 = com.google.javascript.rhino.head.Node.newString("hi!");
        com.google.javascript.rhino.head.Node node8 = new com.google.javascript.rhino.head.Node(13, node7);
        com.google.javascript.rhino.head.Node node9 = new com.google.javascript.rhino.head.Node(7, node7);
        com.google.javascript.rhino.head.Node node11 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        node9.addChildToFront(node11);
        com.google.javascript.rhino.head.Node node15 = new com.google.javascript.rhino.head.Node(12);
        node15.putIntProp(14, 3);
        com.google.javascript.rhino.head.Node node19 = new com.google.javascript.rhino.head.Node(6, node15);
        com.google.javascript.rhino.head.Node node20 = node19.getLastChild();
        node9.addChildToFront(node19);
        com.google.javascript.rhino.head.Node node22 = new com.google.javascript.rhino.head.Node(97, node3, node9);
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor23 = node22.iterator();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(nodeItor23);
    }

    @Test
    public void test1973() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1973");
        com.google.javascript.rhino.head.Node node4 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str5 = node4.toString();
        boolean boolean6 = node4.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node8 = com.google.javascript.rhino.head.Node.newString("");
        node8.removeProp(23);
        node4.addChildToFront(node8);
        com.google.javascript.rhino.head.Node node12 = node4.getFirstChild();
        node12.setString("100");
        com.google.javascript.rhino.head.ast.Scope scope15 = node12.getScope();
        com.google.javascript.rhino.head.Node node17 = new com.google.javascript.rhino.head.Node((int) ' ', node12, 2);
        com.google.javascript.rhino.head.Node node20 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        com.google.javascript.rhino.head.Node node22 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str23 = node22.toString();
        boolean boolean24 = node22.hasConsistentReturnUsage();
        boolean boolean25 = node22.hasSideEffects();
        node20.addChildrenToFront(node22);
        node22.removeChildren();
        com.google.javascript.rhino.head.Node node29 = com.google.javascript.rhino.head.Node.newString("hi!");
        node22.addChildrenToBack(node29);
        int int33 = node29.getIntProp(0, 22);
        node12.putProp(15, (java.lang.Object) 22);
        com.google.javascript.rhino.head.Node node36 = new com.google.javascript.rhino.head.Node((int) (short) -1, node12, 2);
        com.google.javascript.rhino.head.Node node38 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean39 = node38.hasSideEffects();
        com.google.javascript.rhino.head.Node node41 = node38.setType(3);
        node36.addChildToFront(node38);
        com.google.javascript.rhino.head.Node node45 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str46 = node45.toString();
        boolean boolean47 = node45.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node49 = com.google.javascript.rhino.head.Node.newString("");
        node49.removeProp(23);
        node45.addChildToFront(node49);
        com.google.javascript.rhino.head.Node node53 = node45.getFirstChild();
        node53.setString("100");
        com.google.javascript.rhino.head.ast.Scope scope56 = node53.getScope();
        com.google.javascript.rhino.head.Node node58 = new com.google.javascript.rhino.head.Node((int) ' ', node53, 2);
        boolean boolean59 = node58.hasChildren();
        com.google.javascript.rhino.head.Node node62 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str63 = node62.toString();
        boolean boolean64 = node62.hasConsistentReturnUsage();
        boolean boolean65 = node62.hasSideEffects();
        com.google.javascript.rhino.head.Node node66 = new com.google.javascript.rhino.head.Node(0, node62);
        int int67 = node62.getLineno();
        node58.addChildToFront(node62);
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor69 = node62.iterator();
        int int70 = node62.getType();
        com.google.javascript.rhino.head.Node node72 = new com.google.javascript.rhino.head.Node(52, node38, node62, 2);
        node72.removeProp(41);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "40" + "'", str5, "40");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNull(scope15);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "40" + "'", str23, "40");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 22 + "'", int33 == 22);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "40" + "'", str46, "40");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNull(scope56);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "40" + "'", str63, "40");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-1) + "'", int67 == (-1));
        org.junit.Assert.assertNotNull(nodeItor69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 40 + "'", int70 == 40);
    }

    @Test
    public void test1974() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1974");
        com.google.javascript.rhino.head.Node node1 = com.google.javascript.rhino.head.Node.newNumber((double) 0L);
        node1.putIntProp(26, 20);
        org.junit.Assert.assertNotNull(node1);
    }

    @Test
    public void test1975() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1975");
        com.google.javascript.rhino.head.Node node1 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str2 = node1.toString();
        boolean boolean3 = node1.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node5 = com.google.javascript.rhino.head.Node.newString("");
        node5.removeProp(23);
        node1.addChildToFront(node5);
        com.google.javascript.rhino.head.Node node9 = node1.getFirstChild();
        node9.setString("100");
        boolean boolean12 = node9.hasSideEffects();
        boolean boolean13 = node9.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode14 = null;
        java.lang.String str15 = node9.toStringTree(scriptNode14);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "40" + "'", str2, "40");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNull(str15);
    }

    @Test
    public void test1976() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1976");
        com.google.javascript.rhino.head.Node node1 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str2 = node1.toString();
        boolean boolean3 = node1.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node5 = com.google.javascript.rhino.head.Node.newString("");
        node5.removeProp(23);
        node1.addChildToFront(node5);
        com.google.javascript.rhino.head.Node node9 = node1.getFirstChild();
        node9.setLineno(18);
        boolean boolean12 = node9.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node16 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str17 = node16.toString();
        boolean boolean18 = node16.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node20 = com.google.javascript.rhino.head.Node.newString("");
        node20.removeProp(23);
        node16.addChildToFront(node20);
        com.google.javascript.rhino.head.Node node25 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean26 = node25.hasChildren();
        node16.addChildrenToFront(node25);
        com.google.javascript.rhino.head.Node node29 = new com.google.javascript.rhino.head.Node((int) (byte) -1);
        java.lang.String str30 = node29.toString();
        boolean boolean31 = node29.hasChildren();
        com.google.javascript.rhino.head.Node node33 = new com.google.javascript.rhino.head.Node((int) (short) -1, node25, node29, (int) (short) 10);
        com.google.javascript.rhino.head.Node node34 = node33.getLastChild();
        com.google.javascript.rhino.head.Node node39 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str40 = node39.toString();
        boolean boolean41 = node39.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node43 = com.google.javascript.rhino.head.Node.newString("");
        node43.removeProp(23);
        node39.addChildToFront(node43);
        com.google.javascript.rhino.head.Node node47 = new com.google.javascript.rhino.head.Node((int) 'a', node39);
        com.google.javascript.rhino.head.Node node49 = com.google.javascript.rhino.head.Node.newString("-1");
        com.google.javascript.rhino.head.Node node51 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str52 = node51.toString();
        com.google.javascript.rhino.head.Node node53 = node51.getLastChild();
        com.google.javascript.rhino.head.Node node55 = new com.google.javascript.rhino.head.Node((int) (short) -1, node39, node49, node51, (int) (short) -1);
        com.google.javascript.rhino.head.Node node57 = new com.google.javascript.rhino.head.Node((int) (short) 1, node51, 12);
        com.google.javascript.rhino.head.Node node59 = new com.google.javascript.rhino.head.Node(23);
        node59.removeProp(25);
        boolean boolean62 = node59.hasChildren();
        com.google.javascript.rhino.head.Node node63 = new com.google.javascript.rhino.head.Node((-1), node34, node51, node59);
        com.google.javascript.rhino.head.Node node64 = node63.getLastSibling();
        java.util.Spliterator<com.google.javascript.rhino.head.Node> nodeSpliterator65 = node63.spliterator();
        node9.addChildToFront(node63);
        com.google.javascript.rhino.head.Node node67 = node9.getLastChild();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "40" + "'", str2, "40");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "40" + "'", str17, "40");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "-1" + "'", str30, "-1");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "40" + "'", str40, "40");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "40" + "'", str52, "40");
        org.junit.Assert.assertNull(node53);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertNotNull(nodeSpliterator65);
        org.junit.Assert.assertNotNull(node67);
    }

    @Test
    public void test1977() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1977");
        com.google.javascript.rhino.head.Node node2 = com.google.javascript.rhino.head.Node.newString("");
        node2.removeProp(23);
        node2.setLineno((int) '4');
        com.google.javascript.rhino.head.Node node11 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str12 = node11.toString();
        boolean boolean13 = node11.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node15 = com.google.javascript.rhino.head.Node.newString("");
        node15.removeProp(23);
        node11.addChildToFront(node15);
        com.google.javascript.rhino.head.Node node20 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean21 = node20.hasChildren();
        node11.addChildrenToFront(node20);
        int int23 = node20.getLineno();
        com.google.javascript.rhino.head.Node node25 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str26 = node25.toString();
        boolean boolean27 = node25.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node29 = com.google.javascript.rhino.head.Node.newString("");
        node29.removeProp(23);
        node25.addChildToFront(node29);
        com.google.javascript.rhino.head.Node node33 = node25.getFirstChild();
        com.google.javascript.rhino.head.Node node35 = new com.google.javascript.rhino.head.Node((int) (short) 0, node20, node25, 9);
        boolean boolean36 = node20.hasSideEffects();
        com.google.javascript.rhino.head.Node node38 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        com.google.javascript.rhino.head.Node node40 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str41 = node40.toString();
        boolean boolean42 = node40.hasConsistentReturnUsage();
        boolean boolean43 = node40.hasSideEffects();
        node38.addChildrenToFront(node40);
        node40.removeChildren();
        com.google.javascript.rhino.head.Node node47 = com.google.javascript.rhino.head.Node.newString("hi!");
        node40.addChildrenToBack(node47);
        com.google.javascript.rhino.head.Node node50 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str51 = node50.toString();
        boolean boolean52 = node50.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node54 = com.google.javascript.rhino.head.Node.newString("");
        node54.removeProp(23);
        node50.addChildToFront(node54);
        com.google.javascript.rhino.head.Node node58 = node50.getFirstChild();
        com.google.javascript.rhino.head.Node node60 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        node58.addChildrenToBack(node60);
        com.google.javascript.rhino.head.Node node62 = new com.google.javascript.rhino.head.Node((int) (byte) 1, node20, node40, node60);
        com.google.javascript.rhino.head.Node node63 = new com.google.javascript.rhino.head.Node(9, node20);
        com.google.javascript.rhino.head.Node node65 = com.google.javascript.rhino.head.Node.newNumber((double) 13);
        com.google.javascript.rhino.head.Node node66 = new com.google.javascript.rhino.head.Node(12, node2, node63, node65);
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator67 = node66.new NodeIterator();
        com.google.javascript.rhino.head.Node node68 = nodeIterator67.next();
        com.google.javascript.rhino.head.Node node69 = nodeIterator67.next();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.head.ast.Scope scope70 = node69.getScope();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: com.google.javascript.rhino.head.Node cannot be cast to com.google.javascript.rhino.head.ast.Name");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "40" + "'", str12, "40");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "40" + "'", str26, "40");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "40" + "'", str41, "40");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "40" + "'", str51, "40");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertNotNull(node69);
    }

    @Test
    public void test1978() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1978");
        com.google.javascript.rhino.head.Node node3 = com.google.javascript.rhino.head.Node.newString("");
        node3.removeProp(23);
        com.google.javascript.rhino.head.Node node8 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str9 = node8.toString();
        boolean boolean10 = node8.hasConsistentReturnUsage();
        boolean boolean11 = node8.hasSideEffects();
        com.google.javascript.rhino.head.Node node12 = new com.google.javascript.rhino.head.Node(0, node8);
        node3.addChildrenToBack(node12);
        com.google.javascript.rhino.head.Node node14 = new com.google.javascript.rhino.head.Node(9, node3);
        com.google.javascript.rhino.head.Node node15 = new com.google.javascript.rhino.head.Node((int) '#', node14);
        com.google.javascript.rhino.head.Node node17 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        com.google.javascript.rhino.head.Node node19 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str20 = node19.toString();
        boolean boolean21 = node19.hasConsistentReturnUsage();
        boolean boolean22 = node19.hasSideEffects();
        node17.addChildrenToFront(node19);
        node19.removeChildren();
        com.google.javascript.rhino.head.Node node26 = new com.google.javascript.rhino.head.Node((int) (short) 0);
        node14.addChildAfter(node19, node26);
        com.google.javascript.rhino.head.Node node28 = node14.getLastSibling();
        com.google.javascript.rhino.head.Node node29 = node28.getLastSibling();
        com.google.javascript.rhino.head.Node node33 = com.google.javascript.rhino.head.Node.newNumber((double) 0L);
        com.google.javascript.rhino.head.Node node36 = com.google.javascript.rhino.head.Node.newString((int) '4', "hi!");
        com.google.javascript.rhino.head.Node node38 = new com.google.javascript.rhino.head.Node((int) (byte) -1);
        java.lang.String str39 = node38.toString();
        com.google.javascript.rhino.head.Node node40 = node38.getFirstChild();
        com.google.javascript.rhino.head.Node node43 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str44 = node43.toString();
        boolean boolean45 = node43.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node47 = com.google.javascript.rhino.head.Node.newString("");
        node47.removeProp(23);
        node43.addChildToFront(node47);
        com.google.javascript.rhino.head.Node node52 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean53 = node52.hasChildren();
        node43.addChildrenToFront(node52);
        int int55 = node52.getLineno();
        com.google.javascript.rhino.head.Node node57 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str58 = node57.toString();
        boolean boolean59 = node57.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node61 = com.google.javascript.rhino.head.Node.newString("");
        node61.removeProp(23);
        node57.addChildToFront(node61);
        com.google.javascript.rhino.head.Node node65 = node57.getFirstChild();
        com.google.javascript.rhino.head.Node node67 = new com.google.javascript.rhino.head.Node((int) (short) 0, node52, node57, 9);
        node38.addChildrenToFront(node67);
        com.google.javascript.rhino.head.Node node70 = new com.google.javascript.rhino.head.Node(100, node33, node36, node38, (int) ' ');
        com.google.javascript.rhino.head.Node node71 = node38.getLastSibling();
        com.google.javascript.rhino.head.Node node72 = new com.google.javascript.rhino.head.Node(21, node71);
        com.google.javascript.rhino.head.Node node76 = new com.google.javascript.rhino.head.Node(23, (int) (short) -1);
        com.google.javascript.rhino.head.Node node79 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str80 = node79.toString();
        boolean boolean81 = node79.hasConsistentReturnUsage();
        boolean boolean82 = node79.hasSideEffects();
        com.google.javascript.rhino.head.Node node83 = new com.google.javascript.rhino.head.Node(0, node79);
        com.google.javascript.rhino.head.Node node84 = node83.getLastChild();
        node83.removeChildren();
        com.google.javascript.rhino.head.Node node87 = new com.google.javascript.rhino.head.Node(19, node76, node83, 24);
        com.google.javascript.rhino.head.Node node88 = node76.getLastSibling();
        // The following exception was thrown during execution in test generation
        try {
            node29.addChildBefore(node72, node76);
            org.junit.Assert.fail("Expected exception of type java.lang.RuntimeException; message: node is not a child");
        } catch (java.lang.RuntimeException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "40" + "'", str9, "40");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "40" + "'", str20, "40");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "-1" + "'", str39, "-1");
        org.junit.Assert.assertNull(node40);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "40" + "'", str44, "40");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "40" + "'", str58, "40");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "40" + "'", str80, "40");
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(node84);
        org.junit.Assert.assertNotNull(node88);
    }

    @Test
    public void test1979() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1979");
        com.google.javascript.rhino.head.Node node3 = new com.google.javascript.rhino.head.Node(12);
        node3.putIntProp(14, 3);
        com.google.javascript.rhino.head.Node node7 = new com.google.javascript.rhino.head.Node(6, node3);
        com.google.javascript.rhino.head.Node node8 = node7.getLastChild();
        com.google.javascript.rhino.head.Node node11 = com.google.javascript.rhino.head.Node.newString(23, "");
        com.google.javascript.rhino.head.Node node12 = node11.getLastSibling();
        com.google.javascript.rhino.head.Node node13 = node11.getLastSibling();
        com.google.javascript.rhino.head.Node node15 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str16 = node15.toString();
        boolean boolean17 = node15.hasConsistentReturnUsage();
        boolean boolean18 = node15.hasSideEffects();
        node15.setLineno((int) '4');
        com.google.javascript.rhino.head.Node node22 = node15.setType((int) '4');
        int int23 = node22.getLineno();
        com.google.javascript.rhino.head.Node node25 = new com.google.javascript.rhino.head.Node(24, node8, node11, node22, 8);
        // The following exception was thrown during execution in test generation
        try {
            node8.labelId((int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "40" + "'", str16, "40");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 52 + "'", int23 == 52);
    }

    @Test
    public void test1980() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1980");
        com.google.javascript.rhino.head.Node node4 = com.google.javascript.rhino.head.Node.newString(23, "");
        com.google.javascript.rhino.head.Node node5 = node4.getLastSibling();
        com.google.javascript.rhino.head.Node node9 = com.google.javascript.rhino.head.Node.newString("hi!");
        com.google.javascript.rhino.head.Node node10 = new com.google.javascript.rhino.head.Node(13, node9);
        com.google.javascript.rhino.head.Node node13 = new com.google.javascript.rhino.head.Node(12);
        node13.putIntProp(14, 3);
        com.google.javascript.rhino.head.Node node17 = new com.google.javascript.rhino.head.Node(6, node13);
        com.google.javascript.rhino.head.Node node18 = node17.getLastChild();
        com.google.javascript.rhino.head.Node node20 = new com.google.javascript.rhino.head.Node((int) (byte) 100, node9, node17, 0);
        com.google.javascript.rhino.head.Node node23 = new com.google.javascript.rhino.head.Node((int) (byte) 1, 8);
        node23.putIntProp(20, 100);
        com.google.javascript.rhino.head.Node node27 = new com.google.javascript.rhino.head.Node(20, node5, node9, node23);
        com.google.javascript.rhino.head.Node node28 = new com.google.javascript.rhino.head.Node((int) (short) 0, node23);
        node28.removeChildren();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node18);
    }

    @Test
    public void test1981() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1981");
        com.google.javascript.rhino.head.Node node3 = com.google.javascript.rhino.head.Node.newString(3, "100");
        com.google.javascript.rhino.head.Node node5 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str6 = node5.toString();
        boolean boolean7 = node5.hasConsistentReturnUsage();
        boolean boolean8 = node5.hasSideEffects();
        node5.setLineno((int) '4');
        com.google.javascript.rhino.head.Node node12 = node5.setType((int) '4');
        com.google.javascript.rhino.head.Node node16 = com.google.javascript.rhino.head.Node.newString(23, "");
        com.google.javascript.rhino.head.Node node17 = node16.getLastSibling();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator18 = node17.new NodeIterator();
        node17.setLineno(13);
        boolean boolean21 = node17.hasSideEffects();
        com.google.javascript.rhino.head.Node node25 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str26 = node25.toString();
        boolean boolean27 = node25.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node29 = com.google.javascript.rhino.head.Node.newString("");
        node29.removeProp(23);
        node25.addChildToFront(node29);
        com.google.javascript.rhino.head.Node node34 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean35 = node34.hasChildren();
        node25.addChildrenToFront(node34);
        com.google.javascript.rhino.head.Node node38 = new com.google.javascript.rhino.head.Node((int) (byte) -1);
        java.lang.String str39 = node38.toString();
        boolean boolean40 = node38.hasChildren();
        com.google.javascript.rhino.head.Node node42 = new com.google.javascript.rhino.head.Node((int) (short) -1, node34, node38, (int) (short) 10);
        com.google.javascript.rhino.head.Node node43 = node42.getLastChild();
        com.google.javascript.rhino.head.Node node48 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str49 = node48.toString();
        boolean boolean50 = node48.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node52 = com.google.javascript.rhino.head.Node.newString("");
        node52.removeProp(23);
        node48.addChildToFront(node52);
        com.google.javascript.rhino.head.Node node56 = new com.google.javascript.rhino.head.Node((int) 'a', node48);
        com.google.javascript.rhino.head.Node node58 = com.google.javascript.rhino.head.Node.newString("-1");
        com.google.javascript.rhino.head.Node node60 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str61 = node60.toString();
        com.google.javascript.rhino.head.Node node62 = node60.getLastChild();
        com.google.javascript.rhino.head.Node node64 = new com.google.javascript.rhino.head.Node((int) (short) -1, node48, node58, node60, (int) (short) -1);
        com.google.javascript.rhino.head.Node node66 = new com.google.javascript.rhino.head.Node((int) (short) 1, node60, 12);
        com.google.javascript.rhino.head.Node node68 = new com.google.javascript.rhino.head.Node(23);
        node68.removeProp(25);
        boolean boolean71 = node68.hasChildren();
        com.google.javascript.rhino.head.Node node72 = new com.google.javascript.rhino.head.Node((-1), node43, node60, node68);
        com.google.javascript.rhino.head.Node node74 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str75 = node74.toString();
        boolean boolean76 = node74.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node78 = com.google.javascript.rhino.head.Node.newString("");
        node78.removeProp(23);
        node74.addChildToFront(node78);
        com.google.javascript.rhino.head.Node node82 = node74.getFirstChild();
        com.google.javascript.rhino.head.Node node84 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        node82.addChildrenToBack(node84);
        com.google.javascript.rhino.head.Node node87 = new com.google.javascript.rhino.head.Node(19, node17, node43, node82, 6);
        com.google.javascript.rhino.head.Node node88 = node82.getFirstChild();
        node3.addChildAfter(node12, node88);
        com.google.javascript.rhino.head.Node node91 = new com.google.javascript.rhino.head.Node(8, node3, 97);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str92 = node91.getString();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: com.google.javascript.rhino.head.Node cannot be cast to com.google.javascript.rhino.head.ast.Name");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "40" + "'", str6, "40");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "40" + "'", str26, "40");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "-1" + "'", str39, "-1");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "40" + "'", str49, "40");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "40" + "'", str61, "40");
        org.junit.Assert.assertNull(node62);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "40" + "'", str75, "40");
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertNotNull(node88);
    }

    @Test
    public void test1982() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1982");
        com.google.javascript.rhino.head.Node node2 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str3 = node2.toString();
        boolean boolean4 = node2.hasConsistentReturnUsage();
        boolean boolean5 = node2.hasSideEffects();
        com.google.javascript.rhino.head.Node node6 = new com.google.javascript.rhino.head.Node(0, node2);
        com.google.javascript.rhino.head.Node node7 = node6.getLastChild();
        node7.setDouble((double) 100.0f);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str10 = node7.getString();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: com.google.javascript.rhino.head.ast.NumberLiteral cannot be cast to com.google.javascript.rhino.head.ast.Name");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "40" + "'", str3, "40");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node7);
    }

    @Test
    public void test1983() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1983");
        com.google.javascript.rhino.head.Node node3 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str4 = node3.toString();
        boolean boolean5 = node3.hasConsistentReturnUsage();
        boolean boolean6 = node3.hasSideEffects();
        com.google.javascript.rhino.head.Node node8 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str9 = node8.toString();
        boolean boolean10 = node8.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node12 = com.google.javascript.rhino.head.Node.newString("");
        node12.removeProp(23);
        node8.addChildToFront(node12);
        com.google.javascript.rhino.head.Node node16 = node8.getFirstChild();
        com.google.javascript.rhino.head.ast.Comment comment17 = node8.getJsDocNode();
        node3.addChildToBack(node8);
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor19 = node3.iterator();
        com.google.javascript.rhino.head.ast.Comment comment20 = node3.getJsDocNode();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator21 = node3.new NodeIterator();
        double double22 = node3.getDouble();
        com.google.javascript.rhino.head.Node node28 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str29 = node28.toString();
        boolean boolean30 = node28.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node32 = com.google.javascript.rhino.head.Node.newString("");
        node32.removeProp(23);
        node28.addChildToFront(node32);
        com.google.javascript.rhino.head.Node node36 = node28.getFirstChild();
        node36.setString("100");
        com.google.javascript.rhino.head.ast.Scope scope39 = node36.getScope();
        com.google.javascript.rhino.head.Node node41 = new com.google.javascript.rhino.head.Node((int) ' ', node36, 2);
        com.google.javascript.rhino.head.Node node42 = node36.getLastSibling();
        com.google.javascript.rhino.head.Node node45 = com.google.javascript.rhino.head.Node.newString(23, "");
        com.google.javascript.rhino.head.Node node46 = node45.getLastSibling();
        com.google.javascript.rhino.head.Node node47 = new com.google.javascript.rhino.head.Node((int) ' ', node42, node45);
        java.lang.String str48 = node42.getString();
        com.google.javascript.rhino.head.Node node50 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str51 = node50.toString();
        boolean boolean52 = node50.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node54 = com.google.javascript.rhino.head.Node.newString("");
        node54.removeProp(23);
        node50.addChildToFront(node54);
        com.google.javascript.rhino.head.Node node59 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean60 = node59.hasChildren();
        node50.addChildrenToFront(node59);
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator62 = node59.new NodeIterator();
        com.google.javascript.rhino.head.Node node64 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str65 = node64.toString();
        com.google.javascript.rhino.head.Node node66 = node64.getLastSibling();
        com.google.javascript.rhino.head.Node node69 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str70 = node69.toString();
        boolean boolean71 = node69.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node73 = com.google.javascript.rhino.head.Node.newString("");
        node73.removeProp(23);
        node69.addChildToFront(node73);
        com.google.javascript.rhino.head.Node node77 = node69.getFirstChild();
        node77.setString("100");
        com.google.javascript.rhino.head.ast.Scope scope80 = node77.getScope();
        com.google.javascript.rhino.head.Node node82 = new com.google.javascript.rhino.head.Node((int) ' ', node77, 2);
        com.google.javascript.rhino.head.Node node83 = node77.getLastSibling();
        node66.addChildToFront(node83);
        node59.addChildrenToFront(node66);
        com.google.javascript.rhino.head.Node node87 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        java.lang.String str88 = node87.toString();
        com.google.javascript.rhino.head.Node node90 = new com.google.javascript.rhino.head.Node((int) (short) 10, node42, node59, node87, 24);
        com.google.javascript.rhino.head.Node node92 = new com.google.javascript.rhino.head.Node(0, node42, 17);
        com.google.javascript.rhino.head.Node node94 = new com.google.javascript.rhino.head.Node(21, node3, node42, (int) (short) 1);
        com.google.javascript.rhino.head.Node node96 = new com.google.javascript.rhino.head.Node(97, node42, 0);
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.head.ast.Scope scope97 = node96.getScope();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: com.google.javascript.rhino.head.Node cannot be cast to com.google.javascript.rhino.head.ast.Name");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "40" + "'", str4, "40");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "40" + "'", str9, "40");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNull(comment17);
        org.junit.Assert.assertNotNull(nodeItor19);
        org.junit.Assert.assertNull(comment20);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 32.0d + "'", double22 == 32.0d);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "40" + "'", str29, "40");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNull(scope39);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "100" + "'", str48, "100");
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "40" + "'", str51, "40");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "40" + "'", str65, "40");
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "40" + "'", str70, "40");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertNull(scope80);
        org.junit.Assert.assertNotNull(node83);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "100" + "'", str88, "100");
    }

    @Test
    public void test1984() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1984");
        com.google.javascript.rhino.head.Node node4 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str5 = node4.toString();
        boolean boolean6 = node4.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node8 = com.google.javascript.rhino.head.Node.newString("");
        node8.removeProp(23);
        node4.addChildToFront(node8);
        com.google.javascript.rhino.head.Node node13 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean14 = node13.hasChildren();
        node4.addChildrenToFront(node13);
        int int16 = node13.getLineno();
        com.google.javascript.rhino.head.Node node18 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str19 = node18.toString();
        boolean boolean20 = node18.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node22 = com.google.javascript.rhino.head.Node.newString("");
        node22.removeProp(23);
        node18.addChildToFront(node22);
        com.google.javascript.rhino.head.Node node26 = node18.getFirstChild();
        com.google.javascript.rhino.head.Node node28 = new com.google.javascript.rhino.head.Node((int) (short) 0, node13, node18, 9);
        boolean boolean29 = node13.hasSideEffects();
        com.google.javascript.rhino.head.Node node31 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        com.google.javascript.rhino.head.Node node33 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str34 = node33.toString();
        boolean boolean35 = node33.hasConsistentReturnUsage();
        boolean boolean36 = node33.hasSideEffects();
        node31.addChildrenToFront(node33);
        node33.removeChildren();
        com.google.javascript.rhino.head.Node node40 = com.google.javascript.rhino.head.Node.newString("hi!");
        node33.addChildrenToBack(node40);
        com.google.javascript.rhino.head.Node node43 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str44 = node43.toString();
        boolean boolean45 = node43.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node47 = com.google.javascript.rhino.head.Node.newString("");
        node47.removeProp(23);
        node43.addChildToFront(node47);
        com.google.javascript.rhino.head.Node node51 = node43.getFirstChild();
        com.google.javascript.rhino.head.Node node53 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        node51.addChildrenToBack(node53);
        com.google.javascript.rhino.head.Node node55 = new com.google.javascript.rhino.head.Node((int) (byte) 1, node13, node33, node53);
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator56 = node55.new NodeIterator();
        com.google.javascript.rhino.head.Node node60 = com.google.javascript.rhino.head.Node.newString(23, "");
        com.google.javascript.rhino.head.Node node61 = node60.getLastSibling();
        com.google.javascript.rhino.head.Node node63 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        com.google.javascript.rhino.head.Node node65 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str66 = node65.toString();
        boolean boolean67 = node65.hasConsistentReturnUsage();
        boolean boolean68 = node65.hasSideEffects();
        node63.addChildrenToFront(node65);
        com.google.javascript.rhino.head.Node node71 = new com.google.javascript.rhino.head.Node(26, node60, node63, 20);
        com.google.javascript.rhino.head.Node node72 = new com.google.javascript.rhino.head.Node(12, node55, node63);
        node63.removeChildren();
        node63.putIntProp(24, 6);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "40" + "'", str5, "40");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "40" + "'", str19, "40");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "40" + "'", str34, "40");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "40" + "'", str44, "40");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "40" + "'", str66, "40");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
    }

    @Test
    public void test1985() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1985");
        com.google.javascript.rhino.head.Node node3 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        com.google.javascript.rhino.head.Node node5 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str6 = node5.toString();
        boolean boolean7 = node5.hasConsistentReturnUsage();
        boolean boolean8 = node5.hasSideEffects();
        node3.addChildrenToFront(node5);
        com.google.javascript.rhino.head.Node node11 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str12 = node11.toString();
        boolean boolean13 = node11.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node15 = com.google.javascript.rhino.head.Node.newString("");
        node15.removeProp(23);
        node11.addChildToFront(node15);
        com.google.javascript.rhino.head.Node node19 = node11.getFirstChild();
        com.google.javascript.rhino.head.Node node21 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        node19.addChildrenToBack(node21);
        node5.addChildrenToBack(node21);
        com.google.javascript.rhino.head.ast.Comment comment24 = node21.getJsDocNode();
        com.google.javascript.rhino.head.Node node26 = new com.google.javascript.rhino.head.Node(8, node21, (int) (short) 1);
        com.google.javascript.rhino.head.Node node28 = new com.google.javascript.rhino.head.Node((int) (byte) -1);
        java.lang.String str29 = node28.toString();
        boolean boolean30 = node28.hasChildren();
        com.google.javascript.rhino.head.Node node34 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str35 = node34.toString();
        boolean boolean36 = node34.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node38 = com.google.javascript.rhino.head.Node.newString("");
        node38.removeProp(23);
        node34.addChildToFront(node38);
        com.google.javascript.rhino.head.Node node42 = node34.getFirstChild();
        node42.setString("100");
        com.google.javascript.rhino.head.ast.Scope scope45 = node42.getScope();
        com.google.javascript.rhino.head.Node node47 = new com.google.javascript.rhino.head.Node((int) ' ', node42, 2);
        com.google.javascript.rhino.head.Node node48 = node42.getLastSibling();
        com.google.javascript.rhino.head.Node node51 = com.google.javascript.rhino.head.Node.newString(23, "");
        com.google.javascript.rhino.head.Node node52 = node51.getLastSibling();
        com.google.javascript.rhino.head.Node node53 = new com.google.javascript.rhino.head.Node((int) ' ', node48, node51);
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor54 = node51.iterator();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator55 = node51.new NodeIterator();
        node28.addChildrenToBack(node51);
        com.google.javascript.rhino.head.ast.Comment comment57 = null;
        node51.setJsDocNode(comment57);
        com.google.javascript.rhino.head.Node node59 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.head.Node node61 = new com.google.javascript.rhino.head.Node(41, node26, (com.google.javascript.rhino.head.Node) comment57, node59, 24);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "40" + "'", str6, "40");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "40" + "'", str12, "40");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNull(comment24);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "-1" + "'", str29, "-1");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "40" + "'", str35, "40");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNull(scope45);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertNotNull(nodeItor54);
    }

    @Test
    public void test1986() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1986");
        com.google.javascript.rhino.head.Node node1 = new com.google.javascript.rhino.head.Node((int) (byte) 1);
        node1.removeProp((int) (short) 10);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode4 = null;
        java.lang.String str5 = node1.toStringTree(scriptNode4);
        org.junit.Assert.assertNull(str5);
    }

    @Test
    public void test1987() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1987");
        com.google.javascript.rhino.head.Node node3 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str4 = node3.toString();
        boolean boolean5 = node3.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node7 = com.google.javascript.rhino.head.Node.newString("");
        node7.removeProp(23);
        node3.addChildToFront(node7);
        com.google.javascript.rhino.head.Node node11 = node3.getFirstChild();
        com.google.javascript.rhino.head.Node node13 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        node11.addChildrenToBack(node13);
        com.google.javascript.rhino.head.Node node15 = node13.getLastChild();
        java.lang.String str16 = node13.getJsDoc();
        java.lang.Object obj18 = node13.getProp(0);
        com.google.javascript.rhino.head.Node node19 = node13.getLastSibling();
        com.google.javascript.rhino.head.Node node23 = com.google.javascript.rhino.head.Node.newString(23, "");
        com.google.javascript.rhino.head.Node node24 = node23.getLastSibling();
        com.google.javascript.rhino.head.Node node26 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        com.google.javascript.rhino.head.Node node28 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str29 = node28.toString();
        boolean boolean30 = node28.hasConsistentReturnUsage();
        boolean boolean31 = node28.hasSideEffects();
        node26.addChildrenToFront(node28);
        com.google.javascript.rhino.head.Node node34 = new com.google.javascript.rhino.head.Node(26, node23, node26, 20);
        int int35 = node34.getType();
        com.google.javascript.rhino.head.Node node36 = node34.getNext();
        java.util.Spliterator<com.google.javascript.rhino.head.Node> nodeSpliterator37 = node34.spliterator();
        com.google.javascript.rhino.head.Node node39 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean40 = node39.hasSideEffects();
        com.google.javascript.rhino.head.Node node42 = node39.setType(3);
        com.google.javascript.rhino.head.Node node44 = new com.google.javascript.rhino.head.Node(18, node19, node34, node39, 13);
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator45 = node39.new NodeIterator();
        com.google.javascript.rhino.head.Node node49 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str50 = node49.toString();
        boolean boolean51 = node49.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node53 = com.google.javascript.rhino.head.Node.newString("");
        node53.removeProp(23);
        node49.addChildToFront(node53);
        com.google.javascript.rhino.head.Node node57 = node49.getFirstChild();
        node57.setString("100");
        com.google.javascript.rhino.head.ast.Scope scope60 = node57.getScope();
        com.google.javascript.rhino.head.Node node62 = new com.google.javascript.rhino.head.Node((int) ' ', node57, 2);
        com.google.javascript.rhino.head.Node node63 = node57.getLastSibling();
        com.google.javascript.rhino.head.Node node66 = com.google.javascript.rhino.head.Node.newString(23, "");
        com.google.javascript.rhino.head.Node node67 = node66.getLastSibling();
        com.google.javascript.rhino.head.Node node68 = new com.google.javascript.rhino.head.Node((int) ' ', node63, node66);
        java.lang.String str69 = node63.getString();
        com.google.javascript.rhino.head.Node node70 = new com.google.javascript.rhino.head.Node(6, node39, node63);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "40" + "'", str4, "40");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNull(node15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "40" + "'", str29, "40");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 26 + "'", int35 == 26);
        org.junit.Assert.assertNull(node36);
        org.junit.Assert.assertNotNull(nodeSpliterator37);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "40" + "'", str50, "40");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertNull(scope60);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "100" + "'", str69, "100");
    }

    @Test
    public void test1988() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1988");
        com.google.javascript.rhino.head.Node node3 = com.google.javascript.rhino.head.Node.newString("");
        node3.removeProp(23);
        com.google.javascript.rhino.head.Node node8 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str9 = node8.toString();
        boolean boolean10 = node8.hasConsistentReturnUsage();
        boolean boolean11 = node8.hasSideEffects();
        com.google.javascript.rhino.head.Node node12 = new com.google.javascript.rhino.head.Node(0, node8);
        node3.addChildrenToBack(node12);
        com.google.javascript.rhino.head.Node node15 = new com.google.javascript.rhino.head.Node(24, node3, (int) (short) 10);
        com.google.javascript.rhino.head.Node node19 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str20 = node19.toString();
        boolean boolean21 = node19.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node23 = com.google.javascript.rhino.head.Node.newString("");
        node23.removeProp(23);
        node19.addChildToFront(node23);
        com.google.javascript.rhino.head.Node node27 = node19.getFirstChild();
        node27.setString("100");
        com.google.javascript.rhino.head.ast.Scope scope30 = node27.getScope();
        com.google.javascript.rhino.head.Node node32 = new com.google.javascript.rhino.head.Node((int) ' ', node27, 2);
        com.google.javascript.rhino.head.Node node33 = node27.getLastSibling();
        com.google.javascript.rhino.head.ast.Comment comment34 = node27.getJsDocNode();
        node27.putIntProp(4, 2);
        int int38 = node27.getType();
        node3.putProp((int) '#', (java.lang.Object) int38);
        int int40 = node3.getType();
        com.google.javascript.rhino.head.Node node42 = new com.google.javascript.rhino.head.Node(7, node3, (int) (byte) 100);
        com.google.javascript.rhino.head.ast.Comment comment43 = null;
        node3.setJsDocNode(comment43);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "40" + "'", str9, "40");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "40" + "'", str20, "40");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNull(scope30);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNull(comment34);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 41 + "'", int38 == 41);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 41 + "'", int40 == 41);
    }

    @Test
    public void test1989() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1989");
        com.google.javascript.rhino.head.Node node1 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        com.google.javascript.rhino.head.Node node3 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str4 = node3.toString();
        boolean boolean5 = node3.hasConsistentReturnUsage();
        boolean boolean6 = node3.hasSideEffects();
        node1.addChildrenToFront(node3);
        node3.removeChildren();
        com.google.javascript.rhino.head.Node node10 = com.google.javascript.rhino.head.Node.newString("hi!");
        node3.addChildrenToBack(node10);
        com.google.javascript.rhino.head.Node node12 = node3.getFirstChild();
        java.lang.String str13 = node12.getJsDoc();
        node12.removeProp((int) (byte) 1);
        com.google.javascript.rhino.head.Node node16 = node12.getLastChild();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "40" + "'", str4, "40");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNull(node16);
    }

    @Test
    public void test1990() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1990");
        com.google.javascript.rhino.head.Node node1 = com.google.javascript.rhino.head.Node.newString("");
        int int4 = node1.getIntProp(17, (int) (byte) -1);
        com.google.javascript.rhino.head.Node node7 = new com.google.javascript.rhino.head.Node(40, 8);
        com.google.javascript.rhino.head.Node node10 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str11 = node10.toString();
        boolean boolean12 = node10.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node14 = com.google.javascript.rhino.head.Node.newString("");
        node14.removeProp(23);
        node10.addChildToFront(node14);
        com.google.javascript.rhino.head.Node node18 = node10.getFirstChild();
        com.google.javascript.rhino.head.Node node20 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        node18.addChildrenToBack(node20);
        com.google.javascript.rhino.head.Node node23 = com.google.javascript.rhino.head.Node.newString("");
        int int26 = node23.getIntProp(17, (int) (byte) -1);
        com.google.javascript.rhino.head.Node node27 = new com.google.javascript.rhino.head.Node((int) (short) 10, node18, node23);
        com.google.javascript.rhino.head.Node node29 = node18.setType(18);
        node1.addChildAfter(node7, node29);
        com.google.javascript.rhino.head.Node node32 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean33 = node32.hasSideEffects();
        node7.addChildrenToFront(node32);
        com.google.javascript.rhino.head.Node node37 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str38 = node37.toString();
        boolean boolean39 = node37.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node41 = com.google.javascript.rhino.head.Node.newString("");
        node41.removeProp(23);
        node37.addChildToFront(node41);
        com.google.javascript.rhino.head.Node node46 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean47 = node46.hasChildren();
        node37.addChildrenToFront(node46);
        int int49 = node46.getLineno();
        int int50 = node46.getType();
        com.google.javascript.rhino.head.Node node51 = new com.google.javascript.rhino.head.Node((int) (byte) 100, node46);
        node7.addChildrenToFront(node51);
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator53 = node7.new NodeIterator();
        boolean boolean54 = nodeIterator53.hasNext();
        boolean boolean55 = nodeIterator53.hasNext();
        // The following exception was thrown during execution in test generation
        try {
            nodeIterator53.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: next() has not been called");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "40" + "'", str11, "40");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "40" + "'", str38, "40");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 40 + "'", int50 == 40);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
    }

    @Test
    public void test1991() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1991");
        com.google.javascript.rhino.head.Node node2 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str3 = node2.toString();
        boolean boolean4 = node2.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node6 = com.google.javascript.rhino.head.Node.newString("");
        node6.removeProp(23);
        node2.addChildToFront(node6);
        java.lang.String str10 = node6.getString();
        com.google.javascript.rhino.head.ast.Scope scope11 = node6.getScope();
        com.google.javascript.rhino.head.Node node14 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str15 = node14.toString();
        boolean boolean16 = node14.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node18 = com.google.javascript.rhino.head.Node.newString("");
        node18.removeProp(23);
        node14.addChildToFront(node18);
        com.google.javascript.rhino.head.Node node22 = node14.getFirstChild();
        node22.setString("100");
        com.google.javascript.rhino.head.ast.Scope scope25 = node22.getScope();
        com.google.javascript.rhino.head.Node node27 = new com.google.javascript.rhino.head.Node((int) ' ', node22, 2);
        boolean boolean28 = node27.hasChildren();
        com.google.javascript.rhino.head.Node node31 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str32 = node31.toString();
        boolean boolean33 = node31.hasConsistentReturnUsage();
        boolean boolean34 = node31.hasSideEffects();
        com.google.javascript.rhino.head.Node node35 = new com.google.javascript.rhino.head.Node(0, node31);
        int int36 = node31.getLineno();
        node27.addChildToFront(node31);
        int int38 = node31.getType();
        boolean boolean39 = node31.hasChildren();
        com.google.javascript.rhino.head.Node node41 = new com.google.javascript.rhino.head.Node((int) (byte) -1);
        java.lang.String str42 = node41.toString();
        boolean boolean43 = node41.hasChildren();
        com.google.javascript.rhino.head.Node node47 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str48 = node47.toString();
        boolean boolean49 = node47.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node51 = com.google.javascript.rhino.head.Node.newString("");
        node51.removeProp(23);
        node47.addChildToFront(node51);
        com.google.javascript.rhino.head.Node node55 = node47.getFirstChild();
        node55.setString("100");
        com.google.javascript.rhino.head.ast.Scope scope58 = node55.getScope();
        com.google.javascript.rhino.head.Node node60 = new com.google.javascript.rhino.head.Node((int) ' ', node55, 2);
        com.google.javascript.rhino.head.Node node61 = node55.getLastSibling();
        com.google.javascript.rhino.head.Node node64 = com.google.javascript.rhino.head.Node.newString(23, "");
        com.google.javascript.rhino.head.Node node65 = node64.getLastSibling();
        com.google.javascript.rhino.head.Node node66 = new com.google.javascript.rhino.head.Node((int) ' ', node61, node64);
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor67 = node64.iterator();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator68 = node64.new NodeIterator();
        node41.addChildrenToBack(node64);
        com.google.javascript.rhino.head.Node node70 = new com.google.javascript.rhino.head.Node(0, node6, node31, node64);
        // The following exception was thrown during execution in test generation
        try {
            node6.labelId(7);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "40" + "'", str3, "40");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNull(scope11);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "40" + "'", str15, "40");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNull(scope25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "40" + "'", str32, "40");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 40 + "'", int38 == 40);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "-1" + "'", str42, "-1");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "40" + "'", str48, "40");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNull(scope58);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertNotNull(nodeItor67);
    }

    @Test
    public void test1992() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1992");
        com.google.javascript.rhino.head.Node node1 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str2 = node1.toString();
        boolean boolean3 = node1.hasConsistentReturnUsage();
        boolean boolean4 = node1.hasSideEffects();
        com.google.javascript.rhino.head.Node node6 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str7 = node6.toString();
        boolean boolean8 = node6.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node10 = com.google.javascript.rhino.head.Node.newString("");
        node10.removeProp(23);
        node6.addChildToFront(node10);
        com.google.javascript.rhino.head.Node node14 = node6.getFirstChild();
        com.google.javascript.rhino.head.ast.Comment comment15 = node6.getJsDocNode();
        node1.addChildToBack(node6);
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor17 = node1.iterator();
        com.google.javascript.rhino.head.Node node20 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        com.google.javascript.rhino.head.Node node22 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str23 = node22.toString();
        boolean boolean24 = node22.hasConsistentReturnUsage();
        boolean boolean25 = node22.hasSideEffects();
        node20.addChildrenToFront(node22);
        double double27 = node22.getDouble();
        com.google.javascript.rhino.head.Node node29 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        com.google.javascript.rhino.head.Node node31 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str32 = node31.toString();
        boolean boolean33 = node31.hasConsistentReturnUsage();
        boolean boolean34 = node31.hasSideEffects();
        node29.addChildrenToFront(node31);
        node31.removeChildren();
        com.google.javascript.rhino.head.Node node38 = com.google.javascript.rhino.head.Node.newString("hi!");
        node31.addChildrenToBack(node38);
        com.google.javascript.rhino.head.Node node41 = node31.setType((int) (short) -1);
        com.google.javascript.rhino.head.Node node43 = node41.setType(23);
        com.google.javascript.rhino.head.Node node45 = new com.google.javascript.rhino.head.Node(16, node22, node43, 18);
        node1.addChildrenToBack(node22);
        node22.setLineno(18);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "40" + "'", str2, "40");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "40" + "'", str7, "40");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNull(comment15);
        org.junit.Assert.assertNotNull(nodeItor17);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "40" + "'", str23, "40");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 32.0d + "'", double27 == 32.0d);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "40" + "'", str32, "40");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNotNull(node43);
    }

    @Test
    public void test1993() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1993");
        com.google.javascript.rhino.head.Node node2 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str3 = node2.toString();
        boolean boolean4 = node2.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node6 = com.google.javascript.rhino.head.Node.newString("");
        node6.removeProp(23);
        node2.addChildToFront(node6);
        com.google.javascript.rhino.head.Node node10 = node2.getFirstChild();
        node10.setString("100");
        com.google.javascript.rhino.head.ast.Scope scope13 = node10.getScope();
        com.google.javascript.rhino.head.Node node15 = new com.google.javascript.rhino.head.Node((int) ' ', node10, 2);
        boolean boolean16 = node15.hasChildren();
        com.google.javascript.rhino.head.Node node19 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str20 = node19.toString();
        boolean boolean21 = node19.hasConsistentReturnUsage();
        boolean boolean22 = node19.hasSideEffects();
        com.google.javascript.rhino.head.Node node23 = new com.google.javascript.rhino.head.Node(0, node19);
        int int24 = node19.getLineno();
        node15.addChildToFront(node19);
        boolean boolean26 = node19.hasSideEffects();
        boolean boolean27 = node19.hasChildren();
        java.util.Spliterator<com.google.javascript.rhino.head.Node> nodeSpliterator28 = node19.spliterator();
        com.google.javascript.rhino.head.ast.Scope scope29 = null;
        // The following exception was thrown during execution in test generation
        try {
            node19.setScope(scope29);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "40" + "'", str3, "40");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNull(scope13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "40" + "'", str20, "40");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(nodeSpliterator28);
    }

    @Test
    public void test1994() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1994");
        com.google.javascript.rhino.head.Node node1 = com.google.javascript.rhino.head.Node.newNumber((double) 1.0f);
        java.lang.Object obj3 = node1.getProp((int) 'a');
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor4 = node1.iterator();
        int int7 = node1.getIntProp((int) (byte) -1, 17);
        com.google.javascript.rhino.head.Node node11 = com.google.javascript.rhino.head.Node.newString("hi!");
        com.google.javascript.rhino.head.Node node12 = new com.google.javascript.rhino.head.Node(13, node11);
        com.google.javascript.rhino.head.Node node13 = new com.google.javascript.rhino.head.Node(7, node11);
        com.google.javascript.rhino.head.Node node15 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        node13.addChildToFront(node15);
        com.google.javascript.rhino.head.Node node19 = new com.google.javascript.rhino.head.Node(12);
        node19.putIntProp(14, 3);
        com.google.javascript.rhino.head.Node node23 = new com.google.javascript.rhino.head.Node(6, node19);
        com.google.javascript.rhino.head.Node node24 = node23.getLastChild();
        node13.addChildToFront(node23);
        node1.addChildToFront(node23);
        // The following exception was thrown during execution in test generation
        try {
            int int27 = node1.labelId();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNotNull(nodeItor4);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 17 + "'", int7 == 17);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node24);
    }

    @Test
    public void test1995() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1995");
        com.google.javascript.rhino.head.Node node1 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        com.google.javascript.rhino.head.Node node2 = node1.getLastSibling();
        com.google.javascript.rhino.head.ast.Comment comment3 = null;
        node2.setJsDocNode(comment3);
        node2.putIntProp(5, (int) (short) 10);
        com.google.javascript.rhino.head.Node node9 = node2.setType(0);
        com.google.javascript.rhino.head.Node node10 = node9.getFirstChild();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.head.Node node11 = node10.getNext();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNull(node10);
    }

    @Test
    public void test1996() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1996");
        com.google.javascript.rhino.head.Node node2 = com.google.javascript.rhino.head.Node.newString("");
        int int3 = node2.getLineno();
        com.google.javascript.rhino.head.Node node5 = node2.setType((-1));
        com.google.javascript.rhino.head.Node node7 = new com.google.javascript.rhino.head.Node(23, node5, 22);
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator8 = node5.new NodeIterator();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.head.Node node9 = nodeIterator8.next();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(node5);
    }

    @Test
    public void test1997() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1997");
        com.google.javascript.rhino.head.Node node1 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        com.google.javascript.rhino.head.Node node3 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str4 = node3.toString();
        boolean boolean5 = node3.hasConsistentReturnUsage();
        boolean boolean6 = node3.hasSideEffects();
        node1.addChildrenToFront(node3);
        node3.removeChildren();
        com.google.javascript.rhino.head.Node node10 = com.google.javascript.rhino.head.Node.newString("hi!");
        node3.addChildrenToBack(node10);
        boolean boolean12 = node3.hasSideEffects();
        java.lang.String str13 = node3.getJsDoc();
        com.google.javascript.rhino.head.ast.Comment comment14 = node3.getJsDocNode();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass15 = comment14.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "40" + "'", str4, "40");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNull(comment14);
    }

    @Test
    public void test1998() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1998");
        com.google.javascript.rhino.head.Node node2 = com.google.javascript.rhino.head.Node.newString("");
        int int3 = node2.getLineno();
        com.google.javascript.rhino.head.Node node5 = node2.setType((-1));
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator6 = node2.new NodeIterator();
        com.google.javascript.rhino.head.Node node7 = new com.google.javascript.rhino.head.Node(97, node2);
        com.google.javascript.rhino.head.Node node8 = null;
        com.google.javascript.rhino.head.Node node11 = com.google.javascript.rhino.head.Node.newNumber((double) 19);
        com.google.javascript.rhino.head.Node node14 = com.google.javascript.rhino.head.Node.newString("");
        node14.removeProp(23);
        com.google.javascript.rhino.head.Node node19 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str20 = node19.toString();
        boolean boolean21 = node19.hasConsistentReturnUsage();
        boolean boolean22 = node19.hasSideEffects();
        com.google.javascript.rhino.head.Node node23 = new com.google.javascript.rhino.head.Node(0, node19);
        node14.addChildrenToBack(node23);
        com.google.javascript.rhino.head.Node node25 = new com.google.javascript.rhino.head.Node(9, node14);
        com.google.javascript.rhino.head.Node node29 = com.google.javascript.rhino.head.Node.newString("hi!");
        com.google.javascript.rhino.head.Node node30 = new com.google.javascript.rhino.head.Node(13, node29);
        com.google.javascript.rhino.head.Node node31 = new com.google.javascript.rhino.head.Node(7, node29);
        com.google.javascript.rhino.head.Node node33 = new com.google.javascript.rhino.head.Node((int) 'a', node11, node25, node29, (int) (short) 1);
        java.lang.String str34 = node29.getString();
        // The following exception was thrown during execution in test generation
        try {
            node7.replaceChild(node8, node29);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "40" + "'", str20, "40");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "hi!" + "'", str34, "hi!");
    }

    @Test
    public void test1999() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1999");
        com.google.javascript.rhino.head.Node node4 = com.google.javascript.rhino.head.Node.newString(23, "");
        com.google.javascript.rhino.head.Node node5 = node4.getLastSibling();
        com.google.javascript.rhino.head.Node node7 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        com.google.javascript.rhino.head.Node node9 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str10 = node9.toString();
        boolean boolean11 = node9.hasConsistentReturnUsage();
        boolean boolean12 = node9.hasSideEffects();
        node7.addChildrenToFront(node9);
        com.google.javascript.rhino.head.Node node15 = new com.google.javascript.rhino.head.Node(26, node4, node7, 20);
        int int16 = node7.getLineno();
        com.google.javascript.rhino.head.Node node19 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str20 = node19.toString();
        boolean boolean21 = node19.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node23 = com.google.javascript.rhino.head.Node.newString("");
        node23.removeProp(23);
        node19.addChildToFront(node23);
        com.google.javascript.rhino.head.Node node28 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean29 = node28.hasChildren();
        node19.addChildrenToFront(node28);
        com.google.javascript.rhino.head.Node node32 = new com.google.javascript.rhino.head.Node((int) (byte) -1);
        java.lang.String str33 = node32.toString();
        boolean boolean34 = node32.hasChildren();
        com.google.javascript.rhino.head.Node node36 = new com.google.javascript.rhino.head.Node((int) (short) -1, node28, node32, (int) (short) 10);
        node36.removeProp(24);
        com.google.javascript.rhino.head.Node node39 = node36.getLastChild();
        com.google.javascript.rhino.head.Node node41 = com.google.javascript.rhino.head.Node.newNumber((double) 0);
        com.google.javascript.rhino.head.ast.Comment comment42 = node41.getJsDocNode();
        com.google.javascript.rhino.head.Node node43 = new com.google.javascript.rhino.head.Node(12, node7, node36, node41);
        java.lang.String str44 = node43.getJsDoc();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator45 = node43.new NodeIterator();
        // The following exception was thrown during execution in test generation
        try {
            nodeIterator45.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: next() has not been called");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "40" + "'", str10, "40");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "40" + "'", str20, "40");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "-1" + "'", str33, "-1");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNull(comment42);
        org.junit.Assert.assertNull(str44);
    }

    @Test
    public void test2000() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test2000");
        com.google.javascript.rhino.head.Node node2 = com.google.javascript.rhino.head.Node.newNumber((double) 1.0f);
        java.lang.Object obj4 = node2.getProp((int) 'a');
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor5 = node2.iterator();
        int int8 = node2.getIntProp((int) (byte) -1, 17);
        com.google.javascript.rhino.head.Node node12 = com.google.javascript.rhino.head.Node.newString("hi!");
        com.google.javascript.rhino.head.Node node13 = new com.google.javascript.rhino.head.Node(13, node12);
        com.google.javascript.rhino.head.Node node14 = new com.google.javascript.rhino.head.Node(7, node12);
        com.google.javascript.rhino.head.Node node16 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        node14.addChildToFront(node16);
        com.google.javascript.rhino.head.Node node20 = new com.google.javascript.rhino.head.Node(12);
        node20.putIntProp(14, 3);
        com.google.javascript.rhino.head.Node node24 = new com.google.javascript.rhino.head.Node(6, node20);
        com.google.javascript.rhino.head.Node node25 = node24.getLastChild();
        node14.addChildToFront(node24);
        node2.addChildToFront(node24);
        com.google.javascript.rhino.head.Node node29 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        com.google.javascript.rhino.head.Node node30 = new com.google.javascript.rhino.head.Node((int) (byte) 10, node2, node29);
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator31 = node2.new NodeIterator();
        boolean boolean32 = node2.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode33 = null;
        java.lang.String str34 = node2.toStringTree(scriptNode33);
        com.google.javascript.rhino.head.Node node36 = node2.setType(23);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNotNull(nodeItor5);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 17 + "'", int8 == 17);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNotNull(node36);
    }
}


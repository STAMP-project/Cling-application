import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.Ignore;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest3 {

    public static boolean debug = false;

    @Test
    public void test1501() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1501");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MutableInterval mutableInterval4 = new org.joda.time.MutableInterval(0L, 1L, chronology3);
        org.joda.time.Interval interval5 = mutableInterval4.toInterval();
        mutableInterval4.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MutableInterval mutableInterval11 = new org.joda.time.MutableInterval(0L, 1L, chronology10);
        org.joda.time.Interval interval12 = mutableInterval11.toInterval();
        long long13 = interval12.getEndMillis();
        boolean boolean15 = interval12.isAfter((long) (byte) 100);
        boolean boolean16 = mutableInterval4.overlaps((org.joda.time.ReadableInterval) interval12);
        long long17 = mutableInterval4.toDurationMillis();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MutableInterval mutableInterval21 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology20);
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        mutableInterval21.setPeriodBeforeEnd(readablePeriod22);
        mutableInterval21.setStartMillis((-1L));
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.MutableInterval mutableInterval28 = new org.joda.time.MutableInterval(readableInstant26, readablePeriod27);
        long long29 = mutableInterval28.getEndMillis();
        boolean boolean30 = mutableInterval21.overlaps((org.joda.time.ReadableInterval) mutableInterval28);
        boolean boolean31 = mutableInterval28.isAfterNow();
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.ReadablePeriod readablePeriod33 = null;
        org.joda.time.MutableInterval mutableInterval34 = new org.joda.time.MutableInterval(readableInstant32, readablePeriod33);
        mutableInterval34.setDurationBeforeEnd(1L);
        org.joda.time.MutableInterval mutableInterval37 = mutableInterval34.toMutableInterval();
        org.joda.time.DateTime dateTime38 = mutableInterval37.getEnd();
        org.joda.time.MutableInterval mutableInterval39 = mutableInterval37.toMutableInterval();
        boolean boolean40 = mutableInterval28.equals((java.lang.Object) mutableInterval37);
        org.joda.time.Period period41 = mutableInterval28.toPeriod();
        mutableInterval4.setPeriodAfterStart((org.joda.time.ReadablePeriod) period41);
        org.joda.time.MutableInterval mutableInterval43 = new org.joda.time.MutableInterval(readableInstant0, (org.joda.time.ReadablePeriod) period41);
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1L + "'", long13 == 1L);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1L + "'", long17 == 1L);
// flaky:         org.junit.Assert.assertTrue("'" + long29 + "' != '" + 1606267566148L + "'", long29 == 1606267566148L);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(mutableInterval37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(mutableInterval39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(period41);
    }

    @Test
    @Ignore
  public void test1502() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1502");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        java.lang.Object obj5 = mutableInterval3.clone();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval(obj5, chronology6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        mutableInterval7.setPeriodBeforeEnd(readablePeriod8);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutableInterval mutableInterval13 = new org.joda.time.MutableInterval(0L, 1L, chronology12);
        org.joda.time.Interval interval14 = mutableInterval13.toInterval();
        mutableInterval13.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval(0L, 1L, chronology19);
        org.joda.time.Interval interval21 = mutableInterval20.toInterval();
        long long22 = interval21.getEndMillis();
        boolean boolean24 = interval21.isAfter((long) (byte) 100);
        boolean boolean25 = mutableInterval13.overlaps((org.joda.time.ReadableInterval) interval21);
        org.joda.time.Duration duration26 = mutableInterval13.toDuration();
        boolean boolean27 = mutableInterval7.isBefore((org.joda.time.ReadableInterval) mutableInterval13);
        org.joda.time.MutableInterval mutableInterval28 = mutableInterval13.toMutableInterval();
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        org.joda.time.MutableInterval mutableInterval32 = new org.joda.time.MutableInterval(readableInstant30, readablePeriod31);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.MutableInterval mutableInterval36 = new org.joda.time.MutableInterval(0L, 1L, chronology35);
        org.joda.time.Interval interval37 = mutableInterval36.toInterval();
        org.joda.time.DateTime dateTime38 = mutableInterval36.getStart();
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.MutableInterval mutableInterval42 = new org.joda.time.MutableInterval(0L, 1L, chronology41);
        org.joda.time.Interval interval43 = mutableInterval42.toInterval();
        org.joda.time.DateTime dateTime44 = mutableInterval42.getStart();
        mutableInterval32.setInterval((org.joda.time.ReadableInstant) dateTime38, (org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.MutableInterval mutableInterval46 = new org.joda.time.MutableInterval(readablePeriod29, (org.joda.time.ReadableInstant) dateTime38);
        mutableInterval13.setEnd((org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.DateTime dateTime48 = mutableInterval13.getEnd();
        org.joda.time.PeriodType periodType49 = null;
        org.joda.time.Period period50 = mutableInterval13.toPeriod(periodType49);
        org.joda.time.MutableInterval mutableInterval51 = new org.joda.time.MutableInterval((java.lang.Object) mutableInterval13);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 1L + "'", long22 == 1L);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(mutableInterval28);
        org.junit.Assert.assertNotNull(interval37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(interval43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(period50);
    }

    @Test
    public void test1503() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1503");
        org.joda.time.ReadableDuration readableDuration0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval(readableDuration0, readableInstant1);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.MutableInterval mutableInterval6 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology5);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        mutableInterval6.setPeriodBeforeEnd(readablePeriod7);
        mutableInterval2.setInterval((org.joda.time.ReadableInterval) mutableInterval6);
        boolean boolean10 = mutableInterval2.isAfterNow();
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.MutableInterval mutableInterval13 = new org.joda.time.MutableInterval(readableInstant11, readablePeriod12);
        mutableInterval13.setDurationBeforeEnd(1L);
        org.joda.time.MutableInterval mutableInterval16 = mutableInterval13.toMutableInterval();
        java.lang.String str17 = mutableInterval13.toString();
        long long18 = mutableInterval13.getStartMillis();
        mutableInterval13.setInterval(1606267445776L, 1606267466518L);
        boolean boolean22 = mutableInterval2.contains((org.joda.time.ReadableInterval) mutableInterval13);
        long long23 = mutableInterval2.toDurationMillis();
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(mutableInterval16);
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "2020-11-25T01:26:06.425Z/2020-11-25T01:26:06.426Z" + "'", str17, "2020-11-25T01:26:06.425Z/2020-11-25T01:26:06.426Z");
// flaky:         org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1606267566425L + "'", long18 == 1606267566425L);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
    }

    @Test
    @Ignore
  public void test1504() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1504");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        java.lang.Object obj5 = mutableInterval3.clone();
        org.joda.time.Interval interval6 = mutableInterval3.toInterval();
        mutableInterval3.setDurationBeforeEnd(0L);
        boolean boolean10 = mutableInterval3.contains((long) (short) 0);
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.MutableInterval mutableInterval13 = new org.joda.time.MutableInterval(readableInstant11, readablePeriod12);
        mutableInterval13.setDurationBeforeEnd(1L);
        org.joda.time.MutableInterval mutableInterval16 = mutableInterval13.toMutableInterval();
        long long17 = mutableInterval13.toDurationMillis();
        boolean boolean18 = mutableInterval3.isAfter((org.joda.time.ReadableInterval) mutableInterval13);
        org.joda.time.Period period19 = mutableInterval3.toPeriod();
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(mutableInterval16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1L + "'", long17 == 1L);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(period19);
    }

    @Test
    @Ignore
  public void test1505() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1505");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MutableInterval mutableInterval5 = new org.joda.time.MutableInterval(0L, 1L, chronology4);
        org.joda.time.Interval interval6 = mutableInterval5.toInterval();
        java.lang.Object obj7 = mutableInterval5.clone();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutableInterval mutableInterval9 = new org.joda.time.MutableInterval(obj7, chronology8);
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        mutableInterval9.setPeriodBeforeEnd(readablePeriod10);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutableInterval mutableInterval15 = new org.joda.time.MutableInterval(0L, 1L, chronology14);
        org.joda.time.Interval interval16 = mutableInterval15.toInterval();
        mutableInterval15.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.MutableInterval mutableInterval22 = new org.joda.time.MutableInterval(0L, 1L, chronology21);
        org.joda.time.Interval interval23 = mutableInterval22.toInterval();
        long long24 = interval23.getEndMillis();
        boolean boolean26 = interval23.isAfter((long) (byte) 100);
        boolean boolean27 = mutableInterval15.overlaps((org.joda.time.ReadableInterval) interval23);
        org.joda.time.Duration duration28 = mutableInterval15.toDuration();
        boolean boolean29 = mutableInterval9.isBefore((org.joda.time.ReadableInterval) mutableInterval15);
        org.joda.time.MutableInterval mutableInterval30 = mutableInterval15.toMutableInterval();
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.ReadablePeriod readablePeriod33 = null;
        org.joda.time.MutableInterval mutableInterval34 = new org.joda.time.MutableInterval(readableInstant32, readablePeriod33);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.MutableInterval mutableInterval38 = new org.joda.time.MutableInterval(0L, 1L, chronology37);
        org.joda.time.Interval interval39 = mutableInterval38.toInterval();
        org.joda.time.DateTime dateTime40 = mutableInterval38.getStart();
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.MutableInterval mutableInterval44 = new org.joda.time.MutableInterval(0L, 1L, chronology43);
        org.joda.time.Interval interval45 = mutableInterval44.toInterval();
        org.joda.time.DateTime dateTime46 = mutableInterval44.getStart();
        mutableInterval34.setInterval((org.joda.time.ReadableInstant) dateTime40, (org.joda.time.ReadableInstant) dateTime46);
        org.joda.time.MutableInterval mutableInterval48 = new org.joda.time.MutableInterval(readablePeriod31, (org.joda.time.ReadableInstant) dateTime40);
        mutableInterval15.setEnd((org.joda.time.ReadableInstant) dateTime40);
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.MutableInterval mutableInterval53 = new org.joda.time.MutableInterval(0L, 1L, chronology52);
        org.joda.time.Interval interval54 = mutableInterval53.toInterval();
        mutableInterval53.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.MutableInterval mutableInterval60 = new org.joda.time.MutableInterval(0L, 1L, chronology59);
        org.joda.time.Interval interval61 = mutableInterval60.toInterval();
        long long62 = interval61.getEndMillis();
        boolean boolean64 = interval61.isAfter((long) (byte) 100);
        boolean boolean65 = mutableInterval53.overlaps((org.joda.time.ReadableInterval) interval61);
        boolean boolean66 = mutableInterval15.contains((org.joda.time.ReadableInterval) mutableInterval53);
        org.joda.time.Chronology chronology69 = null;
        org.joda.time.MutableInterval mutableInterval70 = new org.joda.time.MutableInterval(0L, 1L, chronology69);
        org.joda.time.Interval interval71 = mutableInterval70.toInterval();
        org.joda.time.DateTime dateTime72 = mutableInterval70.getStart();
        boolean boolean73 = mutableInterval15.contains((org.joda.time.ReadableInstant) dateTime72);
        org.joda.time.Chronology chronology76 = null;
        org.joda.time.MutableInterval mutableInterval77 = new org.joda.time.MutableInterval(0L, 1L, chronology76);
        org.joda.time.Interval interval78 = mutableInterval77.toInterval();
        java.lang.Object obj79 = mutableInterval77.clone();
        mutableInterval77.setStartMillis((long) (short) -1);
        org.joda.time.Chronology chronology82 = mutableInterval77.getChronology();
        mutableInterval15.setChronology(chronology82);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableInterval mutableInterval84 = new org.joda.time.MutableInterval(1606267490794L, 1606267446643L, chronology82);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 1L + "'", long24 == 1L);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(mutableInterval30);
        org.junit.Assert.assertNotNull(interval39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(interval45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(interval54);
        org.junit.Assert.assertNotNull(interval61);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 1L + "'", long62 == 1L);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(interval71);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(interval78);
        org.junit.Assert.assertNotNull(obj79);
        org.junit.Assert.assertEquals(obj79.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj79), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj79), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(chronology82);
    }

    @Test
    public void test1506() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1506");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        mutableInterval3.setPeriodBeforeEnd(readablePeriod4);
        mutableInterval3.setStartMillis((-1L));
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval(readableInstant8, readablePeriod9);
        long long11 = mutableInterval10.getEndMillis();
        boolean boolean12 = mutableInterval3.overlaps((org.joda.time.ReadableInterval) mutableInterval10);
        java.lang.String str13 = mutableInterval10.toString();
        boolean boolean14 = mutableInterval10.isBeforeNow();
        org.joda.time.MutableInterval mutableInterval15 = mutableInterval10.copy();
// flaky:         org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1606267566708L + "'", long11 == 1606267566708L);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "2020-11-25T01:26:06.708Z/2020-11-25T01:26:06.708Z" + "'", str13, "2020-11-25T01:26:06.708Z/2020-11-25T01:26:06.708Z");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(mutableInterval15);
    }

    @Test
    public void test1507() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1507");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval(1606267469481L, 1606267387920L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    @Ignore
  public void test1508() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1508");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        org.joda.time.DateTime dateTime5 = mutableInterval3.getStart();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutableInterval mutableInterval9 = new org.joda.time.MutableInterval(0L, 1L, chronology8);
        org.joda.time.Interval interval10 = mutableInterval9.toInterval();
        java.lang.Object obj11 = mutableInterval9.clone();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutableInterval mutableInterval13 = new org.joda.time.MutableInterval(obj11, chronology12);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        mutableInterval13.setPeriodAfterStart(readablePeriod14);
        org.joda.time.Period period16 = mutableInterval13.toPeriod();
        org.joda.time.MutableInterval mutableInterval17 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime5, (org.joda.time.ReadablePeriod) period16);
        // The following exception was thrown during execution in test generation
        try {
            mutableInterval17.setInterval(1606267522405L, 1606267497834L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertEquals(obj11.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj11), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj11), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(period16);
    }

    @Test
    @Ignore
  public void test1509() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1509");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        java.lang.Object obj5 = mutableInterval3.clone();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval(obj5, chronology6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        mutableInterval7.setPeriodBeforeEnd(readablePeriod8);
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval(readableInstant10, readablePeriod11);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MutableInterval mutableInterval16 = new org.joda.time.MutableInterval(0L, 1L, chronology15);
        org.joda.time.Interval interval17 = mutableInterval16.toInterval();
        org.joda.time.DateTime dateTime18 = mutableInterval16.getStart();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.MutableInterval mutableInterval22 = new org.joda.time.MutableInterval(0L, 1L, chronology21);
        org.joda.time.Interval interval23 = mutableInterval22.toInterval();
        org.joda.time.DateTime dateTime24 = mutableInterval22.getStart();
        mutableInterval12.setInterval((org.joda.time.ReadableInstant) dateTime18, (org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MutableInterval mutableInterval29 = new org.joda.time.MutableInterval(0L, 1L, chronology28);
        org.joda.time.Interval interval30 = mutableInterval29.toInterval();
        java.lang.Object obj31 = mutableInterval29.clone();
        org.joda.time.Interval interval32 = mutableInterval29.toInterval();
        org.joda.time.ReadableInterval readableInterval33 = null;
        boolean boolean34 = mutableInterval29.isBefore(readableInterval33);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.MutableInterval mutableInterval38 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology37);
        boolean boolean39 = mutableInterval29.isAfter((org.joda.time.ReadableInterval) mutableInterval38);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.MutableInterval mutableInterval43 = new org.joda.time.MutableInterval(0L, 1L, chronology42);
        org.joda.time.Interval interval44 = mutableInterval43.toInterval();
        org.joda.time.DateTime dateTime45 = mutableInterval43.getStart();
        boolean boolean46 = mutableInterval29.isBefore((org.joda.time.ReadableInstant) dateTime45);
        mutableInterval7.setInterval((org.joda.time.ReadableInstant) dateTime18, (org.joda.time.ReadableInstant) dateTime45);
        org.joda.time.ReadableInstant readableInstant48 = null;
        org.joda.time.ReadablePeriod readablePeriod49 = null;
        org.joda.time.MutableInterval mutableInterval50 = new org.joda.time.MutableInterval(readableInstant48, readablePeriod49);
        mutableInterval50.setDurationBeforeEnd(1L);
        org.joda.time.MutableInterval mutableInterval53 = mutableInterval50.toMutableInterval();
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.MutableInterval mutableInterval57 = new org.joda.time.MutableInterval(0L, 1L, chronology56);
        long long58 = mutableInterval57.toDurationMillis();
        mutableInterval50.setInterval((org.joda.time.ReadableInterval) mutableInterval57);
        org.joda.time.Duration duration60 = mutableInterval57.toDuration();
        mutableInterval7.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration60);
        mutableInterval7.setDurationAfterStart(0L);
        org.joda.time.MutableInterval mutableInterval64 = new org.joda.time.MutableInterval((java.lang.Object) mutableInterval7);
        boolean boolean65 = mutableInterval7.containsNow();
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(interval30);
        org.junit.Assert.assertNotNull(obj31);
        org.junit.Assert.assertEquals(obj31.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj31), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj31), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(interval44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(mutableInterval53);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 1L + "'", long58 == 1L);
        org.junit.Assert.assertNotNull(duration60);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
    }

    @Test
    @Ignore
  public void test1510() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1510");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        mutableInterval3.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval(0L, 1L, chronology9);
        org.joda.time.Interval interval11 = mutableInterval10.toInterval();
        java.lang.Object obj12 = mutableInterval10.clone();
        org.joda.time.Interval interval13 = mutableInterval10.toInterval();
        org.joda.time.ReadableInterval readableInterval14 = null;
        boolean boolean15 = mutableInterval10.isBefore(readableInterval14);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.MutableInterval mutableInterval19 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology18);
        boolean boolean20 = mutableInterval10.isAfter((org.joda.time.ReadableInterval) mutableInterval19);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MutableInterval mutableInterval24 = new org.joda.time.MutableInterval(0L, 1L, chronology23);
        org.joda.time.Interval interval25 = mutableInterval24.toInterval();
        org.joda.time.DateTime dateTime26 = mutableInterval24.getStart();
        boolean boolean27 = mutableInterval10.isBefore((org.joda.time.ReadableInstant) dateTime26);
        boolean boolean28 = mutableInterval3.contains((org.joda.time.ReadableInstant) dateTime26);
        mutableInterval3.setDurationAfterStart(1606267332482L);
        org.joda.time.MutableInterval mutableInterval31 = mutableInterval3.toMutableInterval();
        boolean boolean33 = mutableInterval31.isBefore(1606267480922L);
        mutableInterval31.setInterval(1606267294061L, 1606267409681L);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(obj12);
        org.junit.Assert.assertEquals(obj12.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj12), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj12), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(mutableInterval31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
    }

    @Test
    @Ignore
  public void test1511() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1511");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        boolean boolean6 = mutableInterval3.contains((long) ' ');
        org.joda.time.MutableInterval mutableInterval7 = mutableInterval3.copy();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MutableInterval mutableInterval11 = new org.joda.time.MutableInterval(0L, 1L, chronology10);
        org.joda.time.Interval interval12 = mutableInterval11.toInterval();
        java.lang.Object obj13 = mutableInterval11.clone();
        mutableInterval11.setStartMillis((long) (short) -1);
        org.joda.time.Chronology chronology16 = mutableInterval11.getChronology();
        org.joda.time.MutableInterval mutableInterval17 = mutableInterval11.toMutableInterval();
        org.joda.time.MutableInterval mutableInterval18 = mutableInterval11.copy();
        org.joda.time.Duration duration19 = mutableInterval11.toDuration();
        org.joda.time.DateTime dateTime20 = mutableInterval11.getStart();
        mutableInterval3.setStart((org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MutableInterval mutableInterval25 = new org.joda.time.MutableInterval(0L, 1L, chronology24);
        org.joda.time.Interval interval26 = mutableInterval25.toInterval();
        mutableInterval25.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MutableInterval mutableInterval32 = new org.joda.time.MutableInterval(0L, 1L, chronology31);
        org.joda.time.Interval interval33 = mutableInterval32.toInterval();
        long long34 = interval33.getEndMillis();
        boolean boolean36 = interval33.isAfter((long) (byte) 100);
        boolean boolean37 = mutableInterval25.overlaps((org.joda.time.ReadableInterval) interval33);
        org.joda.time.Duration duration38 = mutableInterval25.toDuration();
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.MutableInterval mutableInterval42 = new org.joda.time.MutableInterval(0L, 1L, chronology41);
        org.joda.time.Interval interval43 = mutableInterval42.toInterval();
        org.joda.time.DateTime dateTime44 = mutableInterval42.getStart();
        org.joda.time.ReadableInstant readableInstant45 = null;
        org.joda.time.ReadablePeriod readablePeriod46 = null;
        org.joda.time.MutableInterval mutableInterval47 = new org.joda.time.MutableInterval(readableInstant45, readablePeriod46);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.MutableInterval mutableInterval51 = new org.joda.time.MutableInterval(0L, 1L, chronology50);
        org.joda.time.Interval interval52 = mutableInterval51.toInterval();
        org.joda.time.DateTime dateTime53 = mutableInterval51.getStart();
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.MutableInterval mutableInterval57 = new org.joda.time.MutableInterval(0L, 1L, chronology56);
        org.joda.time.Interval interval58 = mutableInterval57.toInterval();
        org.joda.time.DateTime dateTime59 = mutableInterval57.getStart();
        mutableInterval47.setInterval((org.joda.time.ReadableInstant) dateTime53, (org.joda.time.ReadableInstant) dateTime59);
        org.joda.time.MutableInterval mutableInterval61 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime44, (org.joda.time.ReadableInstant) dateTime59);
        org.joda.time.MutableInterval mutableInterval62 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration38, (org.joda.time.ReadableInstant) dateTime59);
        org.joda.time.ReadablePeriod readablePeriod63 = null;
        mutableInterval62.setPeriodAfterStart(readablePeriod63);
        org.joda.time.Duration duration65 = mutableInterval62.toDuration();
        org.joda.time.MutableInterval mutableInterval66 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime20, (org.joda.time.ReadableDuration) duration65);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(mutableInterval7);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(obj13.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(mutableInterval17);
        org.junit.Assert.assertNotNull(mutableInterval18);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertNotNull(interval33);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 1L + "'", long34 == 1L);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(interval43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(interval52);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(interval58);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(duration65);
    }

    @Test
    public void test1512() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1512");
        org.joda.time.ReadablePeriod readablePeriod0 = null;
        org.joda.time.ReadablePeriod readablePeriod1 = null;
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        org.joda.time.MutableInterval mutableInterval4 = new org.joda.time.MutableInterval(readableInstant2, readablePeriod3);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutableInterval mutableInterval8 = new org.joda.time.MutableInterval(0L, 1L, chronology7);
        org.joda.time.Interval interval9 = mutableInterval8.toInterval();
        org.joda.time.DateTime dateTime10 = mutableInterval8.getStart();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutableInterval mutableInterval14 = new org.joda.time.MutableInterval(0L, 1L, chronology13);
        org.joda.time.Interval interval15 = mutableInterval14.toInterval();
        org.joda.time.DateTime dateTime16 = mutableInterval14.getStart();
        mutableInterval4.setInterval((org.joda.time.ReadableInstant) dateTime10, (org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.MutableInterval mutableInterval18 = new org.joda.time.MutableInterval(readablePeriod1, (org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.MutableInterval mutableInterval19 = new org.joda.time.MutableInterval(readablePeriod0, (org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.MutableInterval mutableInterval22 = new org.joda.time.MutableInterval(readableInstant20, readablePeriod21);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MutableInterval mutableInterval26 = new org.joda.time.MutableInterval(0L, 1L, chronology25);
        org.joda.time.Interval interval27 = mutableInterval26.toInterval();
        org.joda.time.DateTime dateTime28 = mutableInterval26.getStart();
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MutableInterval mutableInterval32 = new org.joda.time.MutableInterval(0L, 1L, chronology31);
        org.joda.time.Interval interval33 = mutableInterval32.toInterval();
        org.joda.time.DateTime dateTime34 = mutableInterval32.getStart();
        mutableInterval22.setInterval((org.joda.time.ReadableInstant) dateTime28, (org.joda.time.ReadableInstant) dateTime34);
        org.joda.time.MutableInterval mutableInterval36 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime10, (org.joda.time.ReadableInstant) dateTime28);
        org.joda.time.DateTime dateTime37 = mutableInterval36.getStart();
        mutableInterval36.setInterval((long) (byte) 1, (long) (short) 1);
        org.joda.time.DateTime dateTime41 = mutableInterval36.getEnd();
        org.junit.Assert.assertNotNull(interval9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(interval33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime41);
    }

    @Test
    @Ignore
  public void test1513() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1513");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        java.lang.Object obj5 = mutableInterval3.clone();
        java.lang.Object obj6 = mutableInterval3.clone();
        boolean boolean7 = mutableInterval3.isBeforeNow();
        boolean boolean9 = mutableInterval3.isAfter(1606267379550L);
        mutableInterval3.setInterval(1606267309568L, 1606267497659L);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertEquals(obj6.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test1514() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1514");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        long long4 = mutableInterval3.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval6 = org.joda.time.MutableInterval.parse("2020-11-25T01:22:32.203Z/2020-11-25T01:22:32.204Z");
        boolean boolean7 = mutableInterval3.contains((org.joda.time.ReadableInterval) mutableInterval6);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MutableInterval mutableInterval11 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology10);
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        mutableInterval11.setPeriodBeforeEnd(readablePeriod12);
        mutableInterval11.setStartMillis((-1L));
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.MutableInterval mutableInterval18 = new org.joda.time.MutableInterval(readableInstant16, readablePeriod17);
        long long19 = mutableInterval18.getEndMillis();
        boolean boolean20 = mutableInterval11.overlaps((org.joda.time.ReadableInterval) mutableInterval18);
        boolean boolean21 = mutableInterval18.isAfterNow();
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.MutableInterval mutableInterval24 = new org.joda.time.MutableInterval(readableInstant22, readablePeriod23);
        mutableInterval24.setDurationBeforeEnd(1L);
        org.joda.time.MutableInterval mutableInterval27 = mutableInterval24.toMutableInterval();
        org.joda.time.DateTime dateTime28 = mutableInterval27.getEnd();
        org.joda.time.MutableInterval mutableInterval29 = mutableInterval27.toMutableInterval();
        boolean boolean30 = mutableInterval18.equals((java.lang.Object) mutableInterval27);
        org.joda.time.Period period31 = mutableInterval18.toPeriod();
        mutableInterval3.setPeriodAfterStart((org.joda.time.ReadablePeriod) period31);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1L + "'", long4 == 1L);
        org.junit.Assert.assertNotNull(mutableInterval6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long19 + "' != '" + 1606267567458L + "'", long19 == 1606267567458L);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(mutableInterval27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(mutableInterval29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(period31);
    }

    @Test
    public void test1515() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1515");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        mutableInterval3.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval(0L, 1L, chronology9);
        org.joda.time.Interval interval11 = mutableInterval10.toInterval();
        long long12 = interval11.getEndMillis();
        boolean boolean14 = interval11.isAfter((long) (byte) 100);
        boolean boolean15 = mutableInterval3.overlaps((org.joda.time.ReadableInterval) interval11);
        long long16 = mutableInterval3.toDurationMillis();
        long long17 = mutableInterval3.toDurationMillis();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MutableInterval mutableInterval21 = new org.joda.time.MutableInterval(0L, 1L, chronology20);
        org.joda.time.Interval interval22 = mutableInterval21.toInterval();
        mutableInterval21.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.MutableInterval mutableInterval28 = new org.joda.time.MutableInterval(0L, 1L, chronology27);
        org.joda.time.Interval interval29 = mutableInterval28.toInterval();
        mutableInterval28.setDurationAfterStart((long) (byte) 1);
        boolean boolean33 = mutableInterval28.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology34 = mutableInterval28.getChronology();
        mutableInterval21.setChronology(chronology34);
        mutableInterval21.setEndMillis((long) '#');
        org.joda.time.PeriodType periodType38 = null;
        org.joda.time.Period period39 = mutableInterval21.toPeriod(periodType38);
        mutableInterval3.setPeriodAfterStart((org.joda.time.ReadablePeriod) period39);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 1L + "'", long16 == 1L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1L + "'", long17 == 1L);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertNotNull(interval29);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(period39);
    }

    @Test
    @Ignore
  public void test1516() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1516");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval(10L, (long) (short) 100);
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval(readableDuration8, readableInstant9);
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.Period period12 = mutableInterval10.toPeriod(periodType11);
        mutableInterval7.setPeriodBeforeEnd((org.joda.time.ReadablePeriod) period12);
        boolean boolean14 = interval4.contains((org.joda.time.ReadableInterval) mutableInterval7);
        org.joda.time.DateTime dateTime15 = mutableInterval7.getStart();
        long long16 = mutableInterval7.toDurationMillis();
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        org.joda.time.MutableInterval mutableInterval19 = new org.joda.time.MutableInterval(readableInstant17, readablePeriod18);
        mutableInterval19.setDurationBeforeEnd(1L);
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.MutableInterval mutableInterval24 = new org.joda.time.MutableInterval(readableInstant22, readablePeriod23);
        long long25 = mutableInterval24.getEndMillis();
        org.joda.time.MutableInterval mutableInterval26 = mutableInterval24.copy();
        org.joda.time.ReadableDuration readableDuration27 = null;
        org.joda.time.ReadableInstant readableInstant28 = null;
        org.joda.time.MutableInterval mutableInterval29 = new org.joda.time.MutableInterval(readableDuration27, readableInstant28);
        org.joda.time.PeriodType periodType30 = null;
        org.joda.time.Period period31 = mutableInterval29.toPeriod(periodType30);
        mutableInterval24.setPeriodBeforeEnd((org.joda.time.ReadablePeriod) period31);
        org.joda.time.DateTime dateTime33 = mutableInterval24.getStart();
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.MutableInterval mutableInterval37 = new org.joda.time.MutableInterval(0L, 1L, chronology36);
        org.joda.time.Interval interval38 = mutableInterval37.toInterval();
        java.lang.Object obj39 = mutableInterval37.clone();
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.MutableInterval mutableInterval41 = new org.joda.time.MutableInterval(obj39, chronology40);
        org.joda.time.ReadablePeriod readablePeriod42 = null;
        mutableInterval41.setPeriodBeforeEnd(readablePeriod42);
        org.joda.time.ReadableInstant readableInstant44 = null;
        org.joda.time.ReadablePeriod readablePeriod45 = null;
        org.joda.time.MutableInterval mutableInterval46 = new org.joda.time.MutableInterval(readableInstant44, readablePeriod45);
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.MutableInterval mutableInterval50 = new org.joda.time.MutableInterval(0L, 1L, chronology49);
        org.joda.time.Interval interval51 = mutableInterval50.toInterval();
        org.joda.time.DateTime dateTime52 = mutableInterval50.getStart();
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.MutableInterval mutableInterval56 = new org.joda.time.MutableInterval(0L, 1L, chronology55);
        org.joda.time.Interval interval57 = mutableInterval56.toInterval();
        org.joda.time.DateTime dateTime58 = mutableInterval56.getStart();
        mutableInterval46.setInterval((org.joda.time.ReadableInstant) dateTime52, (org.joda.time.ReadableInstant) dateTime58);
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.MutableInterval mutableInterval63 = new org.joda.time.MutableInterval(0L, 1L, chronology62);
        org.joda.time.Interval interval64 = mutableInterval63.toInterval();
        java.lang.Object obj65 = mutableInterval63.clone();
        org.joda.time.Interval interval66 = mutableInterval63.toInterval();
        org.joda.time.ReadableInterval readableInterval67 = null;
        boolean boolean68 = mutableInterval63.isBefore(readableInterval67);
        org.joda.time.Chronology chronology71 = null;
        org.joda.time.MutableInterval mutableInterval72 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology71);
        boolean boolean73 = mutableInterval63.isAfter((org.joda.time.ReadableInterval) mutableInterval72);
        org.joda.time.Chronology chronology76 = null;
        org.joda.time.MutableInterval mutableInterval77 = new org.joda.time.MutableInterval(0L, 1L, chronology76);
        org.joda.time.Interval interval78 = mutableInterval77.toInterval();
        org.joda.time.DateTime dateTime79 = mutableInterval77.getStart();
        boolean boolean80 = mutableInterval63.isBefore((org.joda.time.ReadableInstant) dateTime79);
        mutableInterval41.setInterval((org.joda.time.ReadableInstant) dateTime52, (org.joda.time.ReadableInstant) dateTime79);
        boolean boolean82 = mutableInterval24.isAfter((org.joda.time.ReadableInstant) dateTime79);
        boolean boolean83 = mutableInterval19.overlaps((org.joda.time.ReadableInterval) mutableInterval24);
        org.joda.time.Chronology chronology84 = mutableInterval19.getChronology();
        org.joda.time.Duration duration85 = mutableInterval19.toDuration();
        boolean boolean86 = mutableInterval7.overlaps((org.joda.time.ReadableInterval) mutableInterval19);
        org.joda.time.Chronology chronology87 = mutableInterval7.getChronology();
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
// flaky:         org.junit.Assert.assertTrue("'" + long25 + "' != '" + 1606267567590L + "'", long25 == 1606267567590L);
        org.junit.Assert.assertNotNull(mutableInterval26);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(interval38);
        org.junit.Assert.assertNotNull(obj39);
        org.junit.Assert.assertEquals(obj39.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj39), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj39), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval51);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(interval57);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(interval64);
        org.junit.Assert.assertNotNull(obj65);
        org.junit.Assert.assertEquals(obj65.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj65), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj65), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(interval78);
        org.junit.Assert.assertNotNull(dateTime79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(chronology84);
        org.junit.Assert.assertNotNull(duration85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(chronology87);
    }

    @Test
    @Ignore
  public void test1517() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1517");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        java.lang.Object obj5 = mutableInterval3.clone();
        org.joda.time.Interval interval6 = mutableInterval3.toInterval();
        org.joda.time.ReadableInterval readableInterval7 = null;
        boolean boolean8 = mutableInterval3.isBefore(readableInterval7);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology11);
        boolean boolean13 = mutableInterval3.isAfter((org.joda.time.ReadableInterval) mutableInterval12);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MutableInterval mutableInterval17 = new org.joda.time.MutableInterval(0L, 1L, chronology16);
        org.joda.time.Interval interval18 = mutableInterval17.toInterval();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.MutableInterval mutableInterval22 = new org.joda.time.MutableInterval(0L, 1L, chronology21);
        org.joda.time.Interval interval23 = mutableInterval22.toInterval();
        mutableInterval22.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MutableInterval mutableInterval29 = new org.joda.time.MutableInterval(0L, 1L, chronology28);
        org.joda.time.Interval interval30 = mutableInterval29.toInterval();
        long long31 = interval30.getEndMillis();
        boolean boolean33 = interval30.isAfter((long) (byte) 100);
        boolean boolean34 = mutableInterval22.overlaps((org.joda.time.ReadableInterval) interval30);
        org.joda.time.Duration duration35 = mutableInterval22.toDuration();
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.MutableInterval mutableInterval39 = new org.joda.time.MutableInterval(0L, 1L, chronology38);
        org.joda.time.Interval interval40 = mutableInterval39.toInterval();
        org.joda.time.DateTime dateTime41 = mutableInterval39.getStart();
        org.joda.time.ReadableInstant readableInstant42 = null;
        org.joda.time.ReadablePeriod readablePeriod43 = null;
        org.joda.time.MutableInterval mutableInterval44 = new org.joda.time.MutableInterval(readableInstant42, readablePeriod43);
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.MutableInterval mutableInterval48 = new org.joda.time.MutableInterval(0L, 1L, chronology47);
        org.joda.time.Interval interval49 = mutableInterval48.toInterval();
        org.joda.time.DateTime dateTime50 = mutableInterval48.getStart();
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.MutableInterval mutableInterval54 = new org.joda.time.MutableInterval(0L, 1L, chronology53);
        org.joda.time.Interval interval55 = mutableInterval54.toInterval();
        org.joda.time.DateTime dateTime56 = mutableInterval54.getStart();
        mutableInterval44.setInterval((org.joda.time.ReadableInstant) dateTime50, (org.joda.time.ReadableInstant) dateTime56);
        org.joda.time.MutableInterval mutableInterval58 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime41, (org.joda.time.ReadableInstant) dateTime56);
        org.joda.time.MutableInterval mutableInterval59 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration35, (org.joda.time.ReadableInstant) dateTime56);
        mutableInterval17.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration35);
        mutableInterval3.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration35);
        java.lang.String str62 = mutableInterval3.toString();
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertNotNull(interval30);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 1L + "'", long31 == 1L);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(interval49);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(interval55);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z" + "'", str62, "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
    }

    @Test
    @Ignore
  public void test1518() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1518");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MutableInterval mutableInterval5 = new org.joda.time.MutableInterval(0L, 1L, chronology4);
        org.joda.time.Interval interval6 = mutableInterval5.toInterval();
        boolean boolean7 = mutableInterval5.isAfterNow();
        org.joda.time.MutableInterval mutableInterval8 = mutableInterval5.toMutableInterval();
        org.joda.time.DateTime dateTime9 = mutableInterval5.getStart();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutableInterval mutableInterval13 = new org.joda.time.MutableInterval(0L, 1L, chronology12);
        org.joda.time.Interval interval14 = mutableInterval13.toInterval();
        java.lang.Object obj15 = mutableInterval13.clone();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MutableInterval mutableInterval17 = new org.joda.time.MutableInterval(obj15, chronology16);
        long long18 = mutableInterval17.getStartMillis();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.MutableInterval mutableInterval22 = new org.joda.time.MutableInterval(0L, 1L, chronology21);
        org.joda.time.Interval interval23 = mutableInterval22.toInterval();
        java.lang.Object obj24 = mutableInterval22.clone();
        long long25 = mutableInterval22.getStartMillis();
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.ReadableInstant readableInstant28 = null;
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        org.joda.time.MutableInterval mutableInterval30 = new org.joda.time.MutableInterval(readableInstant28, readablePeriod29);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.MutableInterval mutableInterval34 = new org.joda.time.MutableInterval(0L, 1L, chronology33);
        org.joda.time.Interval interval35 = mutableInterval34.toInterval();
        org.joda.time.DateTime dateTime36 = mutableInterval34.getStart();
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.MutableInterval mutableInterval40 = new org.joda.time.MutableInterval(0L, 1L, chronology39);
        org.joda.time.Interval interval41 = mutableInterval40.toInterval();
        org.joda.time.DateTime dateTime42 = mutableInterval40.getStart();
        mutableInterval30.setInterval((org.joda.time.ReadableInstant) dateTime36, (org.joda.time.ReadableInstant) dateTime42);
        org.joda.time.MutableInterval mutableInterval44 = new org.joda.time.MutableInterval(readablePeriod27, (org.joda.time.ReadableInstant) dateTime36);
        org.joda.time.MutableInterval mutableInterval45 = new org.joda.time.MutableInterval(readablePeriod26, (org.joda.time.ReadableInstant) dateTime36);
        org.joda.time.ReadableInstant readableInstant46 = null;
        org.joda.time.ReadablePeriod readablePeriod47 = null;
        org.joda.time.MutableInterval mutableInterval48 = new org.joda.time.MutableInterval(readableInstant46, readablePeriod47);
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.MutableInterval mutableInterval52 = new org.joda.time.MutableInterval(0L, 1L, chronology51);
        org.joda.time.Interval interval53 = mutableInterval52.toInterval();
        org.joda.time.DateTime dateTime54 = mutableInterval52.getStart();
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.MutableInterval mutableInterval58 = new org.joda.time.MutableInterval(0L, 1L, chronology57);
        org.joda.time.Interval interval59 = mutableInterval58.toInterval();
        org.joda.time.DateTime dateTime60 = mutableInterval58.getStart();
        mutableInterval48.setInterval((org.joda.time.ReadableInstant) dateTime54, (org.joda.time.ReadableInstant) dateTime60);
        org.joda.time.MutableInterval mutableInterval62 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime36, (org.joda.time.ReadableInstant) dateTime54);
        boolean boolean63 = mutableInterval22.isBefore((org.joda.time.ReadableInstant) dateTime36);
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.MutableInterval mutableInterval67 = new org.joda.time.MutableInterval(0L, 1L, chronology66);
        org.joda.time.Interval interval68 = mutableInterval67.toInterval();
        mutableInterval67.setDurationAfterStart((long) (byte) 1);
        boolean boolean72 = mutableInterval67.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology75 = null;
        org.joda.time.MutableInterval mutableInterval76 = new org.joda.time.MutableInterval(0L, 1L, chronology75);
        org.joda.time.Interval interval77 = mutableInterval76.toInterval();
        java.lang.Object obj78 = mutableInterval76.clone();
        mutableInterval76.setStartMillis((long) (short) -1);
        org.joda.time.Chronology chronology81 = mutableInterval76.getChronology();
        mutableInterval67.setChronology(chronology81);
        org.joda.time.MutableInterval mutableInterval83 = new org.joda.time.MutableInterval((java.lang.Object) mutableInterval22, chronology81);
        org.joda.time.MutableInterval mutableInterval84 = new org.joda.time.MutableInterval((java.lang.Object) mutableInterval17, chronology81);
        org.joda.time.MutableInterval mutableInterval85 = new org.joda.time.MutableInterval((java.lang.Object) mutableInterval5, chronology81);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableInterval mutableInterval86 = new org.joda.time.MutableInterval(1606267537187L, 1606267383659L, chronology81);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(mutableInterval8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(obj15);
        org.junit.Assert.assertEquals(obj15.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj15), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj15), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertNotNull(obj24);
        org.junit.Assert.assertEquals(obj24.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj24), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj24), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertNotNull(interval35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(interval41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(interval53);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(interval59);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(interval68);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(interval77);
        org.junit.Assert.assertNotNull(obj78);
        org.junit.Assert.assertEquals(obj78.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj78), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj78), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(chronology81);
    }

    @Test
    public void test1519() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1519");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadablePeriod readablePeriod1 = null;
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval(readableInstant0, readablePeriod1);
        long long3 = mutableInterval2.getEndMillis();
        org.joda.time.MutableInterval mutableInterval4 = mutableInterval2.copy();
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval(readableDuration5, readableInstant6);
        org.joda.time.PeriodType periodType8 = null;
        org.joda.time.Period period9 = mutableInterval7.toPeriod(periodType8);
        mutableInterval2.setPeriodBeforeEnd((org.joda.time.ReadablePeriod) period9);
        org.joda.time.DateTime dateTime11 = mutableInterval2.getStart();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutableInterval mutableInterval15 = new org.joda.time.MutableInterval(0L, 1L, chronology14);
        org.joda.time.Interval interval16 = mutableInterval15.toInterval();
        boolean boolean18 = mutableInterval15.contains((long) ' ');
        org.joda.time.MutableInterval mutableInterval19 = mutableInterval15.copy();
        boolean boolean20 = mutableInterval2.equals((java.lang.Object) mutableInterval19);
        org.joda.time.ReadableDuration readableDuration21 = null;
        mutableInterval2.setDurationBeforeEnd(readableDuration21);
        long long23 = mutableInterval2.getStartMillis();
        boolean boolean25 = mutableInterval2.isAfter(1606267407677L);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MutableInterval mutableInterval29 = new org.joda.time.MutableInterval(0L, 1L, chronology28);
        org.joda.time.Interval interval30 = mutableInterval29.toInterval();
        mutableInterval29.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.MutableInterval mutableInterval36 = new org.joda.time.MutableInterval(0L, 1L, chronology35);
        org.joda.time.Interval interval37 = mutableInterval36.toInterval();
        long long38 = interval37.getEndMillis();
        boolean boolean40 = interval37.isAfter((long) (byte) 100);
        boolean boolean41 = mutableInterval29.overlaps((org.joda.time.ReadableInterval) interval37);
        org.joda.time.Duration duration42 = mutableInterval29.toDuration();
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.MutableInterval mutableInterval46 = new org.joda.time.MutableInterval(0L, 1L, chronology45);
        org.joda.time.Interval interval47 = mutableInterval46.toInterval();
        org.joda.time.DateTime dateTime48 = mutableInterval46.getStart();
        org.joda.time.ReadableInstant readableInstant49 = null;
        org.joda.time.ReadablePeriod readablePeriod50 = null;
        org.joda.time.MutableInterval mutableInterval51 = new org.joda.time.MutableInterval(readableInstant49, readablePeriod50);
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.MutableInterval mutableInterval55 = new org.joda.time.MutableInterval(0L, 1L, chronology54);
        org.joda.time.Interval interval56 = mutableInterval55.toInterval();
        org.joda.time.DateTime dateTime57 = mutableInterval55.getStart();
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.MutableInterval mutableInterval61 = new org.joda.time.MutableInterval(0L, 1L, chronology60);
        org.joda.time.Interval interval62 = mutableInterval61.toInterval();
        org.joda.time.DateTime dateTime63 = mutableInterval61.getStart();
        mutableInterval51.setInterval((org.joda.time.ReadableInstant) dateTime57, (org.joda.time.ReadableInstant) dateTime63);
        org.joda.time.MutableInterval mutableInterval65 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime48, (org.joda.time.ReadableInstant) dateTime63);
        org.joda.time.MutableInterval mutableInterval66 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration42, (org.joda.time.ReadableInstant) dateTime63);
        long long67 = mutableInterval66.toDurationMillis();
        org.joda.time.ReadableDuration readableDuration68 = null;
        org.joda.time.ReadableInstant readableInstant69 = null;
        org.joda.time.MutableInterval mutableInterval70 = new org.joda.time.MutableInterval(readableDuration68, readableInstant69);
        org.joda.time.MutableInterval mutableInterval71 = mutableInterval70.toMutableInterval();
        org.joda.time.Interval interval72 = mutableInterval70.toInterval();
        mutableInterval70.setStartMillis((long) ' ');
        boolean boolean75 = mutableInterval66.overlaps((org.joda.time.ReadableInterval) mutableInterval70);
        mutableInterval2.setInterval((org.joda.time.ReadableInterval) mutableInterval66);
// flaky:         org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1606267568077L + "'", long3 == 1606267568077L);
        org.junit.Assert.assertNotNull(mutableInterval4);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(mutableInterval19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long23 + "' != '" + 1606267568077L + "'", long23 == 1606267568077L);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(interval30);
        org.junit.Assert.assertNotNull(interval37);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 1L + "'", long38 == 1L);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertNotNull(interval47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(interval56);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(interval62);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 1L + "'", long67 == 1L);
        org.junit.Assert.assertNotNull(mutableInterval71);
        org.junit.Assert.assertNotNull(interval72);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
    }

    @Test
    @Ignore
  public void test1520() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1520");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        java.lang.Object obj5 = mutableInterval3.clone();
        org.joda.time.Interval interval6 = mutableInterval3.toInterval();
        mutableInterval3.setDurationBeforeEnd(0L);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval(0L, 1L, chronology11);
        org.joda.time.Interval interval13 = mutableInterval12.toInterval();
        mutableInterval12.setDurationAfterStart((long) (byte) 1);
        boolean boolean17 = mutableInterval12.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology18 = mutableInterval12.getChronology();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.MutableInterval mutableInterval22 = new org.joda.time.MutableInterval(0L, 1L, chronology21);
        org.joda.time.Interval interval23 = mutableInterval22.toInterval();
        java.lang.Object obj24 = mutableInterval22.clone();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MutableInterval mutableInterval26 = new org.joda.time.MutableInterval(obj24, chronology25);
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        mutableInterval26.setPeriodAfterStart(readablePeriod27);
        org.joda.time.Period period29 = mutableInterval26.toPeriod();
        mutableInterval12.setPeriodBeforeEnd((org.joda.time.ReadablePeriod) period29);
        mutableInterval3.setPeriodBeforeEnd((org.joda.time.ReadablePeriod) period29);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MutableInterval mutableInterval35 = new org.joda.time.MutableInterval(0L, 1L, chronology34);
        org.joda.time.Interval interval36 = mutableInterval35.toInterval();
        mutableInterval35.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.MutableInterval mutableInterval42 = new org.joda.time.MutableInterval(0L, 1L, chronology41);
        org.joda.time.Interval interval43 = mutableInterval42.toInterval();
        long long44 = interval43.getEndMillis();
        boolean boolean46 = interval43.isAfter((long) (byte) 100);
        boolean boolean47 = mutableInterval35.overlaps((org.joda.time.ReadableInterval) interval43);
        org.joda.time.Duration duration48 = mutableInterval35.toDuration();
        mutableInterval3.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration48);
        org.joda.time.ReadablePeriod readablePeriod50 = null;
        org.joda.time.ReadablePeriod readablePeriod51 = null;
        org.joda.time.ReadableInstant readableInstant52 = null;
        org.joda.time.ReadablePeriod readablePeriod53 = null;
        org.joda.time.MutableInterval mutableInterval54 = new org.joda.time.MutableInterval(readableInstant52, readablePeriod53);
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.MutableInterval mutableInterval58 = new org.joda.time.MutableInterval(0L, 1L, chronology57);
        org.joda.time.Interval interval59 = mutableInterval58.toInterval();
        org.joda.time.DateTime dateTime60 = mutableInterval58.getStart();
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.MutableInterval mutableInterval64 = new org.joda.time.MutableInterval(0L, 1L, chronology63);
        org.joda.time.Interval interval65 = mutableInterval64.toInterval();
        org.joda.time.DateTime dateTime66 = mutableInterval64.getStart();
        mutableInterval54.setInterval((org.joda.time.ReadableInstant) dateTime60, (org.joda.time.ReadableInstant) dateTime66);
        org.joda.time.MutableInterval mutableInterval68 = new org.joda.time.MutableInterval(readablePeriod51, (org.joda.time.ReadableInstant) dateTime60);
        org.joda.time.MutableInterval mutableInterval69 = new org.joda.time.MutableInterval(readablePeriod50, (org.joda.time.ReadableInstant) dateTime60);
        mutableInterval3.setEnd((org.joda.time.ReadableInstant) dateTime60);
        org.joda.time.Period period71 = mutableInterval3.toPeriod();
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertNotNull(obj24);
        org.junit.Assert.assertEquals(obj24.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj24), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj24), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(interval36);
        org.junit.Assert.assertNotNull(interval43);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 1L + "'", long44 == 1L);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(duration48);
        org.junit.Assert.assertNotNull(interval59);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(interval65);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(period71);
    }

    @Test
    @Ignore
  public void test1521() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1521");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        java.lang.Object obj5 = mutableInterval3.clone();
        java.lang.Object obj6 = mutableInterval3.clone();
        org.joda.time.MutableInterval mutableInterval7 = mutableInterval3.copy();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MutableInterval mutableInterval11 = new org.joda.time.MutableInterval(0L, 1L, chronology10);
        org.joda.time.Interval interval12 = mutableInterval11.toInterval();
        org.joda.time.DateTime dateTime13 = mutableInterval11.getStart();
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.MutableInterval mutableInterval16 = new org.joda.time.MutableInterval(readableInstant14, readablePeriod15);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval(0L, 1L, chronology19);
        org.joda.time.Interval interval21 = mutableInterval20.toInterval();
        org.joda.time.DateTime dateTime22 = mutableInterval20.getStart();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MutableInterval mutableInterval26 = new org.joda.time.MutableInterval(0L, 1L, chronology25);
        org.joda.time.Interval interval27 = mutableInterval26.toInterval();
        org.joda.time.DateTime dateTime28 = mutableInterval26.getStart();
        mutableInterval16.setInterval((org.joda.time.ReadableInstant) dateTime22, (org.joda.time.ReadableInstant) dateTime28);
        org.joda.time.MutableInterval mutableInterval30 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime13, (org.joda.time.ReadableInstant) dateTime28);
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.ReadablePeriod readablePeriod32 = null;
        org.joda.time.MutableInterval mutableInterval33 = new org.joda.time.MutableInterval(readableInstant31, readablePeriod32);
        mutableInterval33.setDurationBeforeEnd(1L);
        boolean boolean36 = mutableInterval30.contains((org.joda.time.ReadableInterval) mutableInterval33);
        org.joda.time.MutableInterval mutableInterval37 = new org.joda.time.MutableInterval((java.lang.Object) mutableInterval33);
        org.joda.time.ReadableInstant readableInstant38 = null;
        org.joda.time.ReadablePeriod readablePeriod39 = null;
        org.joda.time.MutableInterval mutableInterval40 = new org.joda.time.MutableInterval(readableInstant38, readablePeriod39);
        mutableInterval40.setDurationBeforeEnd(1L);
        org.joda.time.MutableInterval mutableInterval43 = mutableInterval40.toMutableInterval();
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.MutableInterval mutableInterval47 = new org.joda.time.MutableInterval(0L, 1L, chronology46);
        long long48 = mutableInterval47.toDurationMillis();
        mutableInterval40.setInterval((org.joda.time.ReadableInterval) mutableInterval47);
        org.joda.time.Duration duration50 = mutableInterval47.toDuration();
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.MutableInterval mutableInterval54 = new org.joda.time.MutableInterval(0L, 1L, chronology53);
        org.joda.time.Interval interval55 = mutableInterval54.toInterval();
        java.lang.Object obj56 = mutableInterval54.clone();
        org.joda.time.Interval interval57 = mutableInterval54.toInterval();
        org.joda.time.ReadablePeriod readablePeriod58 = null;
        mutableInterval54.setPeriodAfterStart(readablePeriod58);
        mutableInterval54.setEndMillis((long) 100);
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.MutableInterval mutableInterval65 = new org.joda.time.MutableInterval(0L, 1L, chronology64);
        org.joda.time.Interval interval66 = mutableInterval65.toInterval();
        mutableInterval65.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology71 = null;
        org.joda.time.MutableInterval mutableInterval72 = new org.joda.time.MutableInterval(0L, 1L, chronology71);
        org.joda.time.Interval interval73 = mutableInterval72.toInterval();
        java.lang.Object obj74 = mutableInterval72.clone();
        org.joda.time.Interval interval75 = mutableInterval72.toInterval();
        org.joda.time.ReadableInterval readableInterval76 = null;
        boolean boolean77 = mutableInterval72.isBefore(readableInterval76);
        org.joda.time.Chronology chronology80 = null;
        org.joda.time.MutableInterval mutableInterval81 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology80);
        boolean boolean82 = mutableInterval72.isAfter((org.joda.time.ReadableInterval) mutableInterval81);
        org.joda.time.Chronology chronology85 = null;
        org.joda.time.MutableInterval mutableInterval86 = new org.joda.time.MutableInterval(0L, 1L, chronology85);
        org.joda.time.Interval interval87 = mutableInterval86.toInterval();
        org.joda.time.DateTime dateTime88 = mutableInterval86.getStart();
        boolean boolean89 = mutableInterval72.isBefore((org.joda.time.ReadableInstant) dateTime88);
        boolean boolean90 = mutableInterval65.contains((org.joda.time.ReadableInstant) dateTime88);
        boolean boolean91 = mutableInterval54.isBefore((org.joda.time.ReadableInstant) dateTime88);
        org.joda.time.MutableInterval mutableInterval92 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration50, (org.joda.time.ReadableInstant) dateTime88);
        mutableInterval37.setDurationAfterStart((org.joda.time.ReadableDuration) duration50);
        mutableInterval7.setDurationAfterStart((org.joda.time.ReadableDuration) duration50);
        org.joda.time.MutableInterval mutableInterval95 = mutableInterval7.copy();
        long long96 = mutableInterval95.getEndMillis();
        mutableInterval95.setInterval(1606267376918L, 1606267382055L);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertEquals(obj6.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(mutableInterval7);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(mutableInterval43);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 1L + "'", long48 == 1L);
        org.junit.Assert.assertNotNull(duration50);
        org.junit.Assert.assertNotNull(interval55);
        org.junit.Assert.assertNotNull(obj56);
        org.junit.Assert.assertEquals(obj56.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj56), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj56), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval57);
        org.junit.Assert.assertNotNull(interval66);
        org.junit.Assert.assertNotNull(interval73);
        org.junit.Assert.assertNotNull(obj74);
        org.junit.Assert.assertEquals(obj74.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj74), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj74), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(interval87);
        org.junit.Assert.assertNotNull(dateTime88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNotNull(mutableInterval95);
        org.junit.Assert.assertTrue("'" + long96 + "' != '" + 1L + "'", long96 == 1L);
    }

    @Test
    public void test1522() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1522");
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval(10L, (long) (short) 100);
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.MutableInterval mutableInterval5 = new org.joda.time.MutableInterval(readableDuration3, readableInstant4);
        org.joda.time.PeriodType periodType6 = null;
        org.joda.time.Period period7 = mutableInterval5.toPeriod(periodType6);
        mutableInterval2.setPeriodBeforeEnd((org.joda.time.ReadablePeriod) period7);
        boolean boolean9 = mutableInterval2.isAfterNow();
        boolean boolean11 = mutableInterval2.isBefore(1606267303786L);
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.MutableInterval mutableInterval14 = new org.joda.time.MutableInterval(readableInstant12, readablePeriod13);
        mutableInterval14.setDurationBeforeEnd(1L);
        org.joda.time.MutableInterval mutableInterval17 = mutableInterval14.toMutableInterval();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MutableInterval mutableInterval21 = new org.joda.time.MutableInterval(0L, 1L, chronology20);
        long long22 = mutableInterval21.toDurationMillis();
        mutableInterval14.setInterval((org.joda.time.ReadableInterval) mutableInterval21);
        org.joda.time.DateTime dateTime24 = mutableInterval14.getEnd();
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.MutableInterval mutableInterval28 = new org.joda.time.MutableInterval(0L, 1L, chronology27);
        org.joda.time.Interval interval29 = mutableInterval28.toInterval();
        mutableInterval28.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MutableInterval mutableInterval35 = new org.joda.time.MutableInterval(0L, 1L, chronology34);
        org.joda.time.Interval interval36 = mutableInterval35.toInterval();
        long long37 = interval36.getEndMillis();
        boolean boolean39 = interval36.isAfter((long) (byte) 100);
        boolean boolean40 = mutableInterval28.overlaps((org.joda.time.ReadableInterval) interval36);
        org.joda.time.Duration duration41 = mutableInterval28.toDuration();
        org.joda.time.ReadableInstant readableInstant42 = null;
        org.joda.time.ReadablePeriod readablePeriod43 = null;
        org.joda.time.MutableInterval mutableInterval44 = new org.joda.time.MutableInterval(readableInstant42, readablePeriod43);
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.MutableInterval mutableInterval48 = new org.joda.time.MutableInterval(0L, 1L, chronology47);
        org.joda.time.Interval interval49 = mutableInterval48.toInterval();
        org.joda.time.DateTime dateTime50 = mutableInterval48.getStart();
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.MutableInterval mutableInterval54 = new org.joda.time.MutableInterval(0L, 1L, chronology53);
        org.joda.time.Interval interval55 = mutableInterval54.toInterval();
        org.joda.time.DateTime dateTime56 = mutableInterval54.getStart();
        mutableInterval44.setInterval((org.joda.time.ReadableInstant) dateTime50, (org.joda.time.ReadableInstant) dateTime56);
        org.joda.time.MutableInterval mutableInterval58 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration41, (org.joda.time.ReadableInstant) dateTime56);
        org.joda.time.MutableInterval mutableInterval59 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime24, (org.joda.time.ReadableDuration) duration41);
        mutableInterval2.setDurationAfterStart((org.joda.time.ReadableDuration) duration41);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(mutableInterval17);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 1L + "'", long22 == 1L);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(interval29);
        org.junit.Assert.assertNotNull(interval36);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 1L + "'", long37 == 1L);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertNotNull(interval49);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(interval55);
        org.junit.Assert.assertNotNull(dateTime56);
    }

    @Test
    @Ignore
  public void test1523() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1523");
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval((-1L), 1606267320597L);
        org.joda.time.DateTime dateTime3 = mutableInterval2.getEnd();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval(0L, 1L, chronology6);
        org.joda.time.Interval interval8 = mutableInterval7.toInterval();
        java.lang.Object obj9 = mutableInterval7.clone();
        org.joda.time.Interval interval10 = mutableInterval7.toInterval();
        org.joda.time.ReadableInterval readableInterval11 = null;
        boolean boolean12 = mutableInterval7.isBefore(readableInterval11);
        org.joda.time.MutableInterval mutableInterval13 = mutableInterval7.copy();
        boolean boolean15 = mutableInterval7.contains(1606267294061L);
        org.joda.time.DateTime dateTime16 = mutableInterval7.getStart();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval(0L, 1L, chronology19);
        org.joda.time.Interval interval21 = mutableInterval20.toInterval();
        mutableInterval20.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MutableInterval mutableInterval27 = new org.joda.time.MutableInterval(0L, 1L, chronology26);
        org.joda.time.Interval interval28 = mutableInterval27.toInterval();
        long long29 = interval28.getEndMillis();
        boolean boolean31 = interval28.isAfter((long) (byte) 100);
        boolean boolean32 = mutableInterval20.overlaps((org.joda.time.ReadableInterval) interval28);
        org.joda.time.Duration duration33 = mutableInterval20.toDuration();
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.MutableInterval mutableInterval37 = new org.joda.time.MutableInterval(0L, 1L, chronology36);
        org.joda.time.Interval interval38 = mutableInterval37.toInterval();
        org.joda.time.DateTime dateTime39 = mutableInterval37.getStart();
        org.joda.time.ReadableInstant readableInstant40 = null;
        org.joda.time.ReadablePeriod readablePeriod41 = null;
        org.joda.time.MutableInterval mutableInterval42 = new org.joda.time.MutableInterval(readableInstant40, readablePeriod41);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.MutableInterval mutableInterval46 = new org.joda.time.MutableInterval(0L, 1L, chronology45);
        org.joda.time.Interval interval47 = mutableInterval46.toInterval();
        org.joda.time.DateTime dateTime48 = mutableInterval46.getStart();
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.MutableInterval mutableInterval52 = new org.joda.time.MutableInterval(0L, 1L, chronology51);
        org.joda.time.Interval interval53 = mutableInterval52.toInterval();
        org.joda.time.DateTime dateTime54 = mutableInterval52.getStart();
        mutableInterval42.setInterval((org.joda.time.ReadableInstant) dateTime48, (org.joda.time.ReadableInstant) dateTime54);
        org.joda.time.MutableInterval mutableInterval56 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime39, (org.joda.time.ReadableInstant) dateTime54);
        org.joda.time.MutableInterval mutableInterval57 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration33, (org.joda.time.ReadableInstant) dateTime54);
        org.joda.time.ReadableInstant readableInstant58 = null;
        org.joda.time.ReadablePeriod readablePeriod59 = null;
        org.joda.time.MutableInterval mutableInterval60 = new org.joda.time.MutableInterval(readableInstant58, readablePeriod59);
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.MutableInterval mutableInterval64 = new org.joda.time.MutableInterval(0L, 1L, chronology63);
        org.joda.time.Interval interval65 = mutableInterval64.toInterval();
        org.joda.time.DateTime dateTime66 = mutableInterval64.getStart();
        org.joda.time.Chronology chronology69 = null;
        org.joda.time.MutableInterval mutableInterval70 = new org.joda.time.MutableInterval(0L, 1L, chronology69);
        org.joda.time.Interval interval71 = mutableInterval70.toInterval();
        org.joda.time.DateTime dateTime72 = mutableInterval70.getStart();
        mutableInterval60.setInterval((org.joda.time.ReadableInstant) dateTime66, (org.joda.time.ReadableInstant) dateTime72);
        org.joda.time.MutableInterval mutableInterval74 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration33, (org.joda.time.ReadableInstant) dateTime66);
        org.joda.time.ReadableInstant readableInstant75 = null;
        org.joda.time.ReadablePeriod readablePeriod76 = null;
        org.joda.time.MutableInterval mutableInterval77 = new org.joda.time.MutableInterval(readableInstant75, readablePeriod76);
        org.joda.time.Chronology chronology80 = null;
        org.joda.time.MutableInterval mutableInterval81 = new org.joda.time.MutableInterval(0L, 1L, chronology80);
        org.joda.time.Interval interval82 = mutableInterval81.toInterval();
        org.joda.time.DateTime dateTime83 = mutableInterval81.getStart();
        org.joda.time.Chronology chronology86 = null;
        org.joda.time.MutableInterval mutableInterval87 = new org.joda.time.MutableInterval(0L, 1L, chronology86);
        org.joda.time.Interval interval88 = mutableInterval87.toInterval();
        org.joda.time.DateTime dateTime89 = mutableInterval87.getStart();
        mutableInterval77.setInterval((org.joda.time.ReadableInstant) dateTime83, (org.joda.time.ReadableInstant) dateTime89);
        org.joda.time.MutableInterval mutableInterval91 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration33, (org.joda.time.ReadableInstant) dateTime89);
        mutableInterval91.setEndMillis((long) ' ');
        mutableInterval7.setInterval((org.joda.time.ReadableInterval) mutableInterval91);
        org.joda.time.Duration duration95 = mutableInterval7.toDuration();
        org.joda.time.MutableInterval mutableInterval96 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime3, (org.joda.time.ReadableDuration) duration95);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(obj9);
        org.junit.Assert.assertEquals(obj9.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj9), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj9), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(mutableInterval13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 1L + "'", long29 == 1L);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(interval38);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(interval47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(interval53);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(interval65);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(interval71);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertNotNull(interval82);
        org.junit.Assert.assertNotNull(dateTime83);
        org.junit.Assert.assertNotNull(interval88);
        org.junit.Assert.assertNotNull(dateTime89);
        org.junit.Assert.assertNotNull(duration95);
    }

    @Test
    public void test1524() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1524");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadablePeriod readablePeriod1 = null;
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval(readableInstant0, readablePeriod1);
        mutableInterval2.setDurationBeforeEnd(1L);
        org.joda.time.MutableInterval mutableInterval5 = mutableInterval2.toMutableInterval();
        org.joda.time.Period period6 = mutableInterval2.toPeriod();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.MutableInterval mutableInterval11 = new org.joda.time.MutableInterval(readableInstant9, readablePeriod10);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutableInterval mutableInterval15 = new org.joda.time.MutableInterval(0L, 1L, chronology14);
        org.joda.time.Interval interval16 = mutableInterval15.toInterval();
        org.joda.time.DateTime dateTime17 = mutableInterval15.getStart();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MutableInterval mutableInterval21 = new org.joda.time.MutableInterval(0L, 1L, chronology20);
        org.joda.time.Interval interval22 = mutableInterval21.toInterval();
        org.joda.time.DateTime dateTime23 = mutableInterval21.getStart();
        mutableInterval11.setInterval((org.joda.time.ReadableInstant) dateTime17, (org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.MutableInterval mutableInterval25 = new org.joda.time.MutableInterval(readablePeriod8, (org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.MutableInterval mutableInterval26 = new org.joda.time.MutableInterval(readablePeriod7, (org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.ReadableInstant readableInstant27 = null;
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.MutableInterval mutableInterval29 = new org.joda.time.MutableInterval(readableInstant27, readablePeriod28);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.MutableInterval mutableInterval33 = new org.joda.time.MutableInterval(0L, 1L, chronology32);
        org.joda.time.Interval interval34 = mutableInterval33.toInterval();
        org.joda.time.DateTime dateTime35 = mutableInterval33.getStart();
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.MutableInterval mutableInterval39 = new org.joda.time.MutableInterval(0L, 1L, chronology38);
        org.joda.time.Interval interval40 = mutableInterval39.toInterval();
        org.joda.time.DateTime dateTime41 = mutableInterval39.getStart();
        mutableInterval29.setInterval((org.joda.time.ReadableInstant) dateTime35, (org.joda.time.ReadableInstant) dateTime41);
        org.joda.time.MutableInterval mutableInterval43 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime17, (org.joda.time.ReadableInstant) dateTime35);
        boolean boolean44 = mutableInterval2.isAfter((org.joda.time.ReadableInstant) dateTime35);
        org.joda.time.Interval interval45 = mutableInterval2.toInterval();
        long long46 = interval45.toDurationMillis();
        org.joda.time.ReadableInstant readableInstant47 = null;
        org.joda.time.ReadablePeriod readablePeriod48 = null;
        org.joda.time.MutableInterval mutableInterval49 = new org.joda.time.MutableInterval(readableInstant47, readablePeriod48);
        mutableInterval49.setDurationBeforeEnd(1L);
        org.joda.time.MutableInterval mutableInterval52 = mutableInterval49.toMutableInterval();
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.MutableInterval mutableInterval56 = new org.joda.time.MutableInterval(0L, 1L, chronology55);
        long long57 = mutableInterval56.toDurationMillis();
        mutableInterval49.setInterval((org.joda.time.ReadableInterval) mutableInterval56);
        org.joda.time.DateTime dateTime59 = mutableInterval49.getEnd();
        boolean boolean60 = interval45.contains((org.joda.time.ReadableInstant) dateTime59);
        org.junit.Assert.assertNotNull(mutableInterval5);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(interval34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(interval45);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 1L + "'", long46 == 1L);
        org.junit.Assert.assertNotNull(mutableInterval52);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 1L + "'", long57 == 1L);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
    }

    @Test
    public void test1525() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1525");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadablePeriod readablePeriod1 = null;
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval(readableInstant0, readablePeriod1);
        mutableInterval2.setDurationBeforeEnd(1L);
        org.joda.time.MutableInterval mutableInterval5 = mutableInterval2.toMutableInterval();
        org.joda.time.Period period6 = mutableInterval2.toPeriod();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.MutableInterval mutableInterval11 = new org.joda.time.MutableInterval(readableInstant9, readablePeriod10);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutableInterval mutableInterval15 = new org.joda.time.MutableInterval(0L, 1L, chronology14);
        org.joda.time.Interval interval16 = mutableInterval15.toInterval();
        org.joda.time.DateTime dateTime17 = mutableInterval15.getStart();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MutableInterval mutableInterval21 = new org.joda.time.MutableInterval(0L, 1L, chronology20);
        org.joda.time.Interval interval22 = mutableInterval21.toInterval();
        org.joda.time.DateTime dateTime23 = mutableInterval21.getStart();
        mutableInterval11.setInterval((org.joda.time.ReadableInstant) dateTime17, (org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.MutableInterval mutableInterval25 = new org.joda.time.MutableInterval(readablePeriod8, (org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.MutableInterval mutableInterval26 = new org.joda.time.MutableInterval(readablePeriod7, (org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.ReadableInstant readableInstant27 = null;
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.MutableInterval mutableInterval29 = new org.joda.time.MutableInterval(readableInstant27, readablePeriod28);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.MutableInterval mutableInterval33 = new org.joda.time.MutableInterval(0L, 1L, chronology32);
        org.joda.time.Interval interval34 = mutableInterval33.toInterval();
        org.joda.time.DateTime dateTime35 = mutableInterval33.getStart();
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.MutableInterval mutableInterval39 = new org.joda.time.MutableInterval(0L, 1L, chronology38);
        org.joda.time.Interval interval40 = mutableInterval39.toInterval();
        org.joda.time.DateTime dateTime41 = mutableInterval39.getStart();
        mutableInterval29.setInterval((org.joda.time.ReadableInstant) dateTime35, (org.joda.time.ReadableInstant) dateTime41);
        org.joda.time.MutableInterval mutableInterval43 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime17, (org.joda.time.ReadableInstant) dateTime35);
        boolean boolean44 = mutableInterval2.isAfter((org.joda.time.ReadableInstant) dateTime35);
        org.joda.time.ReadableInstant readableInstant45 = null;
        org.joda.time.MutableInterval mutableInterval46 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime35, readableInstant45);
        java.lang.String str47 = mutableInterval46.toString();
        org.junit.Assert.assertNotNull(mutableInterval5);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(interval34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str47 + "' != '" + "1970-01-01T00:00:00.000Z/2020-11-25T01:26:09.273Z" + "'", str47, "1970-01-01T00:00:00.000Z/2020-11-25T01:26:09.273Z");
    }

    @Test
    public void test1526() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1526");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        mutableInterval3.setDurationAfterStart((long) (byte) 1);
        org.joda.time.ReadableInstant readableInstant7 = null;
        mutableInterval3.setEnd(readableInstant7);
        mutableInterval3.setEndMillis((long) (byte) 10);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutableInterval mutableInterval14 = new org.joda.time.MutableInterval(0L, 1L, chronology13);
        org.joda.time.Interval interval15 = mutableInterval14.toInterval();
        mutableInterval14.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MutableInterval mutableInterval21 = new org.joda.time.MutableInterval(0L, 1L, chronology20);
        org.joda.time.Interval interval22 = mutableInterval21.toInterval();
        mutableInterval21.setDurationAfterStart((long) (byte) 1);
        boolean boolean26 = mutableInterval21.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology27 = mutableInterval21.getChronology();
        mutableInterval14.setChronology(chronology27);
        mutableInterval3.setChronology(chronology27);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(chronology27);
    }

    @Test
    @Ignore
  public void test1527() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1527");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadablePeriod readablePeriod1 = null;
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval(readableInstant0, readablePeriod1);
        mutableInterval2.setDurationBeforeEnd(1L);
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval(readableInstant5, readablePeriod6);
        long long8 = mutableInterval7.getEndMillis();
        org.joda.time.MutableInterval mutableInterval9 = mutableInterval7.copy();
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval(readableDuration10, readableInstant11);
        org.joda.time.PeriodType periodType13 = null;
        org.joda.time.Period period14 = mutableInterval12.toPeriod(periodType13);
        mutableInterval7.setPeriodBeforeEnd((org.joda.time.ReadablePeriod) period14);
        org.joda.time.DateTime dateTime16 = mutableInterval7.getStart();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval(0L, 1L, chronology19);
        org.joda.time.Interval interval21 = mutableInterval20.toInterval();
        java.lang.Object obj22 = mutableInterval20.clone();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MutableInterval mutableInterval24 = new org.joda.time.MutableInterval(obj22, chronology23);
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        mutableInterval24.setPeriodBeforeEnd(readablePeriod25);
        org.joda.time.ReadableInstant readableInstant27 = null;
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.MutableInterval mutableInterval29 = new org.joda.time.MutableInterval(readableInstant27, readablePeriod28);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.MutableInterval mutableInterval33 = new org.joda.time.MutableInterval(0L, 1L, chronology32);
        org.joda.time.Interval interval34 = mutableInterval33.toInterval();
        org.joda.time.DateTime dateTime35 = mutableInterval33.getStart();
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.MutableInterval mutableInterval39 = new org.joda.time.MutableInterval(0L, 1L, chronology38);
        org.joda.time.Interval interval40 = mutableInterval39.toInterval();
        org.joda.time.DateTime dateTime41 = mutableInterval39.getStart();
        mutableInterval29.setInterval((org.joda.time.ReadableInstant) dateTime35, (org.joda.time.ReadableInstant) dateTime41);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.MutableInterval mutableInterval46 = new org.joda.time.MutableInterval(0L, 1L, chronology45);
        org.joda.time.Interval interval47 = mutableInterval46.toInterval();
        java.lang.Object obj48 = mutableInterval46.clone();
        org.joda.time.Interval interval49 = mutableInterval46.toInterval();
        org.joda.time.ReadableInterval readableInterval50 = null;
        boolean boolean51 = mutableInterval46.isBefore(readableInterval50);
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.MutableInterval mutableInterval55 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology54);
        boolean boolean56 = mutableInterval46.isAfter((org.joda.time.ReadableInterval) mutableInterval55);
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.MutableInterval mutableInterval60 = new org.joda.time.MutableInterval(0L, 1L, chronology59);
        org.joda.time.Interval interval61 = mutableInterval60.toInterval();
        org.joda.time.DateTime dateTime62 = mutableInterval60.getStart();
        boolean boolean63 = mutableInterval46.isBefore((org.joda.time.ReadableInstant) dateTime62);
        mutableInterval24.setInterval((org.joda.time.ReadableInstant) dateTime35, (org.joda.time.ReadableInstant) dateTime62);
        boolean boolean65 = mutableInterval7.isAfter((org.joda.time.ReadableInstant) dateTime62);
        boolean boolean66 = mutableInterval2.overlaps((org.joda.time.ReadableInterval) mutableInterval7);
        boolean boolean67 = mutableInterval2.isBeforeNow();
        org.joda.time.Chronology chronology70 = null;
        org.joda.time.MutableInterval mutableInterval71 = new org.joda.time.MutableInterval(0L, 1L, chronology70);
        org.joda.time.Interval interval72 = mutableInterval71.toInterval();
        mutableInterval71.setDurationAfterStart((long) (byte) 1);
        boolean boolean76 = mutableInterval71.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology77 = mutableInterval71.getChronology();
        long long78 = mutableInterval71.getStartMillis();
        org.joda.time.Duration duration79 = mutableInterval71.toDuration();
        org.joda.time.PeriodType periodType80 = null;
        org.joda.time.Period period81 = mutableInterval71.toPeriod(periodType80);
        boolean boolean82 = mutableInterval2.equals((java.lang.Object) mutableInterval71);
// flaky:         org.junit.Assert.assertTrue("'" + long8 + "' != '" + 1606267569394L + "'", long8 == 1606267569394L);
        org.junit.Assert.assertNotNull(mutableInterval9);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertEquals(obj22.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj22), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj22), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(interval47);
        org.junit.Assert.assertNotNull(obj48);
        org.junit.Assert.assertEquals(obj48.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj48), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj48), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(interval61);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(interval72);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(chronology77);
        org.junit.Assert.assertTrue("'" + long78 + "' != '" + 0L + "'", long78 == 0L);
        org.junit.Assert.assertNotNull(duration79);
        org.junit.Assert.assertNotNull(period81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
    }

    @Test
    public void test1528() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1528");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        mutableInterval3.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval(0L, 1L, chronology9);
        org.joda.time.Interval interval11 = mutableInterval10.toInterval();
        long long12 = interval11.getEndMillis();
        boolean boolean14 = interval11.isAfter((long) (byte) 100);
        boolean boolean15 = mutableInterval3.overlaps((org.joda.time.ReadableInterval) interval11);
        org.joda.time.Duration duration16 = mutableInterval3.toDuration();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval(0L, 1L, chronology19);
        org.joda.time.Interval interval21 = mutableInterval20.toInterval();
        org.joda.time.DateTime dateTime22 = mutableInterval20.getStart();
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.MutableInterval mutableInterval25 = new org.joda.time.MutableInterval(readableInstant23, readablePeriod24);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MutableInterval mutableInterval29 = new org.joda.time.MutableInterval(0L, 1L, chronology28);
        org.joda.time.Interval interval30 = mutableInterval29.toInterval();
        org.joda.time.DateTime dateTime31 = mutableInterval29.getStart();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MutableInterval mutableInterval35 = new org.joda.time.MutableInterval(0L, 1L, chronology34);
        org.joda.time.Interval interval36 = mutableInterval35.toInterval();
        org.joda.time.DateTime dateTime37 = mutableInterval35.getStart();
        mutableInterval25.setInterval((org.joda.time.ReadableInstant) dateTime31, (org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.MutableInterval mutableInterval39 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime22, (org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.MutableInterval mutableInterval40 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration16, (org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.ReadablePeriod readablePeriod41 = null;
        mutableInterval40.setPeriodAfterStart(readablePeriod41);
        org.joda.time.Chronology chronology43 = mutableInterval40.getChronology();
        long long44 = mutableInterval40.getStartMillis();
        org.joda.time.MutableInterval mutableInterval45 = mutableInterval40.copy();
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.MutableInterval mutableInterval49 = new org.joda.time.MutableInterval(0L, 1L, chronology48);
        org.joda.time.Interval interval50 = mutableInterval49.toInterval();
        mutableInterval49.setDurationAfterStart((long) (byte) 1);
        org.joda.time.ReadableInstant readableInstant53 = null;
        mutableInterval49.setEnd(readableInstant53);
        mutableInterval49.setDurationBeforeEnd(0L);
        long long57 = mutableInterval49.toDurationMillis();
        boolean boolean58 = mutableInterval40.isBefore((org.joda.time.ReadableInterval) mutableInterval49);
        org.joda.time.MutableInterval mutableInterval60 = org.joda.time.MutableInterval.parse("2020-11-25T01:21:49.998Z/2020-11-25T01:21:49.999Z");
        boolean boolean61 = mutableInterval40.isBefore((org.joda.time.ReadableInterval) mutableInterval60);
        // The following exception was thrown during execution in test generation
        try {
            mutableInterval40.setStartMillis(1606267522052L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(interval30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(interval36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + (-1L) + "'", long44 == (-1L));
        org.junit.Assert.assertNotNull(mutableInterval45);
        org.junit.Assert.assertNotNull(interval50);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 0L + "'", long57 == 0L);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(mutableInterval60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
    }

    @Test
    public void test1529() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1529");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadablePeriod readablePeriod1 = null;
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval(readableInstant0, readablePeriod1);
        mutableInterval2.setDurationBeforeEnd(1L);
        boolean boolean5 = mutableInterval2.isAfterNow();
        mutableInterval2.setStartMillis(1606267335264L);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableInterval mutableInterval8 = new org.joda.time.MutableInterval((java.lang.Object) 1606267335264L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No interval converter found for type: java.lang.Long");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test1530() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1530");
        org.joda.time.MutableInterval mutableInterval1 = org.joda.time.MutableInterval.parse("2020-11-25T01:26:03.114Z/2020-11-25T01:26:03.115Z");
        org.junit.Assert.assertNotNull(mutableInterval1);
    }

    @Test
    public void test1531() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1531");
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval(1606267336055L, 1606267417827L);
    }

    @Test
    public void test1532() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1532");
        org.joda.time.ReadablePeriod readablePeriod0 = null;
        org.joda.time.ReadablePeriod readablePeriod1 = null;
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        org.joda.time.MutableInterval mutableInterval4 = new org.joda.time.MutableInterval(readableInstant2, readablePeriod3);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutableInterval mutableInterval8 = new org.joda.time.MutableInterval(0L, 1L, chronology7);
        org.joda.time.Interval interval9 = mutableInterval8.toInterval();
        org.joda.time.DateTime dateTime10 = mutableInterval8.getStart();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutableInterval mutableInterval14 = new org.joda.time.MutableInterval(0L, 1L, chronology13);
        org.joda.time.Interval interval15 = mutableInterval14.toInterval();
        org.joda.time.DateTime dateTime16 = mutableInterval14.getStart();
        mutableInterval4.setInterval((org.joda.time.ReadableInstant) dateTime10, (org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.MutableInterval mutableInterval18 = new org.joda.time.MutableInterval(readablePeriod1, (org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.MutableInterval mutableInterval19 = new org.joda.time.MutableInterval(readablePeriod0, (org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.MutableInterval mutableInterval22 = new org.joda.time.MutableInterval(readableInstant20, readablePeriod21);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MutableInterval mutableInterval26 = new org.joda.time.MutableInterval(0L, 1L, chronology25);
        org.joda.time.Interval interval27 = mutableInterval26.toInterval();
        org.joda.time.DateTime dateTime28 = mutableInterval26.getStart();
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MutableInterval mutableInterval32 = new org.joda.time.MutableInterval(0L, 1L, chronology31);
        org.joda.time.Interval interval33 = mutableInterval32.toInterval();
        org.joda.time.DateTime dateTime34 = mutableInterval32.getStart();
        mutableInterval22.setInterval((org.joda.time.ReadableInstant) dateTime28, (org.joda.time.ReadableInstant) dateTime34);
        org.joda.time.MutableInterval mutableInterval36 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime10, (org.joda.time.ReadableInstant) dateTime28);
        org.joda.time.DateTime dateTime37 = mutableInterval36.getStart();
        org.joda.time.Period period38 = mutableInterval36.toPeriod();
        org.joda.time.Duration duration39 = mutableInterval36.toDuration();
        org.junit.Assert.assertNotNull(interval9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(interval33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(period38);
        org.junit.Assert.assertNotNull(duration39);
    }

    @Test
    @Ignore
  public void test1533() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1533");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        java.lang.Object obj5 = mutableInterval3.clone();
        org.joda.time.Interval interval6 = mutableInterval3.toInterval();
        org.joda.time.ReadableInterval readableInterval7 = null;
        boolean boolean8 = mutableInterval3.isBefore(readableInterval7);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology11);
        boolean boolean13 = mutableInterval3.isAfter((org.joda.time.ReadableInterval) mutableInterval12);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MutableInterval mutableInterval17 = new org.joda.time.MutableInterval(0L, 1L, chronology16);
        org.joda.time.Interval interval18 = mutableInterval17.toInterval();
        java.lang.Object obj19 = mutableInterval17.clone();
        org.joda.time.ReadableDuration readableDuration20 = null;
        mutableInterval17.setDurationAfterStart(readableDuration20);
        boolean boolean22 = mutableInterval17.isAfterNow();
        mutableInterval3.setInterval((org.joda.time.ReadableInterval) mutableInterval17);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MutableInterval mutableInterval27 = new org.joda.time.MutableInterval(0L, 1L, chronology26);
        org.joda.time.Interval interval28 = mutableInterval27.toInterval();
        org.joda.time.DateTime dateTime29 = mutableInterval27.getStart();
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        org.joda.time.MutableInterval mutableInterval32 = new org.joda.time.MutableInterval(readableInstant30, readablePeriod31);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.MutableInterval mutableInterval36 = new org.joda.time.MutableInterval(0L, 1L, chronology35);
        org.joda.time.Interval interval37 = mutableInterval36.toInterval();
        org.joda.time.DateTime dateTime38 = mutableInterval36.getStart();
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.MutableInterval mutableInterval42 = new org.joda.time.MutableInterval(0L, 1L, chronology41);
        org.joda.time.Interval interval43 = mutableInterval42.toInterval();
        org.joda.time.DateTime dateTime44 = mutableInterval42.getStart();
        mutableInterval32.setInterval((org.joda.time.ReadableInstant) dateTime38, (org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.MutableInterval mutableInterval46 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime29, (org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.DateTime dateTime47 = mutableInterval46.getStart();
        boolean boolean49 = mutableInterval46.isBefore((long) (short) 10);
        mutableInterval17.setInterval((org.joda.time.ReadableInterval) mutableInterval46);
        org.joda.time.ReadableInstant readableInstant51 = null;
        org.joda.time.ReadablePeriod readablePeriod52 = null;
        org.joda.time.MutableInterval mutableInterval53 = new org.joda.time.MutableInterval(readableInstant51, readablePeriod52);
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.MutableInterval mutableInterval57 = new org.joda.time.MutableInterval(0L, 1L, chronology56);
        org.joda.time.Interval interval58 = mutableInterval57.toInterval();
        org.joda.time.DateTime dateTime59 = mutableInterval57.getStart();
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.MutableInterval mutableInterval63 = new org.joda.time.MutableInterval(0L, 1L, chronology62);
        org.joda.time.Interval interval64 = mutableInterval63.toInterval();
        org.joda.time.DateTime dateTime65 = mutableInterval63.getStart();
        mutableInterval53.setInterval((org.joda.time.ReadableInstant) dateTime59, (org.joda.time.ReadableInstant) dateTime65);
        org.joda.time.Chronology chronology69 = null;
        org.joda.time.MutableInterval mutableInterval70 = new org.joda.time.MutableInterval(0L, 1L, chronology69);
        org.joda.time.Interval interval71 = mutableInterval70.toInterval();
        org.joda.time.ReadableDuration readableDuration72 = null;
        org.joda.time.ReadableInstant readableInstant73 = null;
        org.joda.time.MutableInterval mutableInterval74 = new org.joda.time.MutableInterval(readableDuration72, readableInstant73);
        org.joda.time.Chronology chronology77 = null;
        org.joda.time.MutableInterval mutableInterval78 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology77);
        org.joda.time.ReadablePeriod readablePeriod79 = null;
        mutableInterval78.setPeriodBeforeEnd(readablePeriod79);
        mutableInterval74.setInterval((org.joda.time.ReadableInterval) mutableInterval78);
        mutableInterval74.setDurationAfterStart(1606267304978L);
        boolean boolean84 = interval71.contains((org.joda.time.ReadableInterval) mutableInterval74);
        org.joda.time.Chronology chronology87 = null;
        org.joda.time.MutableInterval mutableInterval88 = new org.joda.time.MutableInterval(0L, 1L, chronology87);
        org.joda.time.Interval interval89 = mutableInterval88.toInterval();
        java.lang.Object obj90 = mutableInterval88.clone();
        org.joda.time.Chronology chronology91 = null;
        org.joda.time.MutableInterval mutableInterval92 = new org.joda.time.MutableInterval(obj90, chronology91);
        org.joda.time.ReadablePeriod readablePeriod93 = null;
        mutableInterval92.setPeriodBeforeEnd(readablePeriod93);
        mutableInterval92.setDurationBeforeEnd((long) 100);
        mutableInterval74.setInterval((org.joda.time.ReadableInterval) mutableInterval92);
        org.joda.time.DateTime dateTime98 = mutableInterval92.getStart();
        // The following exception was thrown during execution in test generation
        try {
            mutableInterval17.setInterval((org.joda.time.ReadableInstant) dateTime59, (org.joda.time.ReadableInstant) dateTime98);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertNotNull(obj19);
        org.junit.Assert.assertEquals(obj19.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj19), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj19), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(interval37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(interval43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(interval58);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(interval64);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(interval71);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(interval89);
        org.junit.Assert.assertNotNull(obj90);
        org.junit.Assert.assertEquals(obj90.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj90), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj90), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(dateTime98);
    }

    @Test
    @Ignore
  public void test1534() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1534");
        org.joda.time.MutableInterval mutableInterval1 = org.joda.time.MutableInterval.parse("2020-11-25T01:21:49.998Z/2020-11-25T01:21:49.999Z");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MutableInterval mutableInterval5 = new org.joda.time.MutableInterval(0L, 1L, chronology4);
        org.joda.time.Interval interval6 = mutableInterval5.toInterval();
        java.lang.Object obj7 = mutableInterval5.clone();
        org.joda.time.ReadableDuration readableDuration8 = null;
        mutableInterval5.setDurationAfterStart(readableDuration8);
        org.joda.time.Duration duration10 = mutableInterval5.toDuration();
        boolean boolean11 = mutableInterval1.isAfter((org.joda.time.ReadableInterval) mutableInterval5);
        java.lang.Object obj12 = mutableInterval1.clone();
        org.junit.Assert.assertNotNull(mutableInterval1);
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(obj12);
        org.junit.Assert.assertEquals(obj12.toString(), "2020-11-25T01:21:49.998Z/2020-11-25T01:21:49.999Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj12), "2020-11-25T01:21:49.998Z/2020-11-25T01:21:49.999Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj12), "2020-11-25T01:21:49.998Z/2020-11-25T01:21:49.999Z");
    }

    @Test
    public void test1535() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1535");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        mutableInterval3.setDurationAfterStart((long) (byte) 1);
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval((java.lang.Object) mutableInterval3);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MutableInterval mutableInterval11 = new org.joda.time.MutableInterval(0L, 1L, chronology10);
        org.joda.time.Interval interval12 = mutableInterval11.toInterval();
        mutableInterval11.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutableInterval mutableInterval18 = new org.joda.time.MutableInterval(0L, 1L, chronology17);
        org.joda.time.Interval interval19 = mutableInterval18.toInterval();
        mutableInterval18.setDurationAfterStart((long) (byte) 1);
        boolean boolean23 = mutableInterval18.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology24 = mutableInterval18.getChronology();
        mutableInterval11.setChronology(chronology24);
        mutableInterval11.setEndMillis((long) '#');
        org.joda.time.Duration duration28 = mutableInterval11.toDuration();
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MutableInterval mutableInterval32 = new org.joda.time.MutableInterval(0L, 1L, chronology31);
        org.joda.time.ReadablePeriod readablePeriod33 = null;
        org.joda.time.ReadablePeriod readablePeriod34 = null;
        org.joda.time.ReadableInstant readableInstant35 = null;
        org.joda.time.ReadablePeriod readablePeriod36 = null;
        org.joda.time.MutableInterval mutableInterval37 = new org.joda.time.MutableInterval(readableInstant35, readablePeriod36);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.MutableInterval mutableInterval41 = new org.joda.time.MutableInterval(0L, 1L, chronology40);
        org.joda.time.Interval interval42 = mutableInterval41.toInterval();
        org.joda.time.DateTime dateTime43 = mutableInterval41.getStart();
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.MutableInterval mutableInterval47 = new org.joda.time.MutableInterval(0L, 1L, chronology46);
        org.joda.time.Interval interval48 = mutableInterval47.toInterval();
        org.joda.time.DateTime dateTime49 = mutableInterval47.getStart();
        mutableInterval37.setInterval((org.joda.time.ReadableInstant) dateTime43, (org.joda.time.ReadableInstant) dateTime49);
        org.joda.time.MutableInterval mutableInterval51 = new org.joda.time.MutableInterval(readablePeriod34, (org.joda.time.ReadableInstant) dateTime43);
        org.joda.time.MutableInterval mutableInterval52 = new org.joda.time.MutableInterval(readablePeriod33, (org.joda.time.ReadableInstant) dateTime43);
        org.joda.time.ReadableInstant readableInstant53 = null;
        org.joda.time.ReadablePeriod readablePeriod54 = null;
        org.joda.time.MutableInterval mutableInterval55 = new org.joda.time.MutableInterval(readableInstant53, readablePeriod54);
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.MutableInterval mutableInterval59 = new org.joda.time.MutableInterval(0L, 1L, chronology58);
        org.joda.time.Interval interval60 = mutableInterval59.toInterval();
        org.joda.time.DateTime dateTime61 = mutableInterval59.getStart();
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.MutableInterval mutableInterval65 = new org.joda.time.MutableInterval(0L, 1L, chronology64);
        org.joda.time.Interval interval66 = mutableInterval65.toInterval();
        org.joda.time.DateTime dateTime67 = mutableInterval65.getStart();
        mutableInterval55.setInterval((org.joda.time.ReadableInstant) dateTime61, (org.joda.time.ReadableInstant) dateTime67);
        org.joda.time.MutableInterval mutableInterval69 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime43, (org.joda.time.ReadableInstant) dateTime61);
        org.joda.time.DateTime dateTime70 = mutableInterval69.getStart();
        mutableInterval69.setInterval((long) (byte) 1, (long) (short) 1);
        boolean boolean74 = mutableInterval32.overlaps((org.joda.time.ReadableInterval) mutableInterval69);
        org.joda.time.ReadablePeriod readablePeriod75 = null;
        org.joda.time.Chronology chronology78 = null;
        org.joda.time.MutableInterval mutableInterval79 = new org.joda.time.MutableInterval(0L, 1L, chronology78);
        org.joda.time.Interval interval80 = mutableInterval79.toInterval();
        org.joda.time.DateTime dateTime81 = mutableInterval79.getStart();
        org.joda.time.MutableInterval mutableInterval82 = new org.joda.time.MutableInterval(readablePeriod75, (org.joda.time.ReadableInstant) dateTime81);
        mutableInterval69.setStart((org.joda.time.ReadableInstant) dateTime81);
        org.joda.time.MutableInterval mutableInterval84 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration28, (org.joda.time.ReadableInstant) dateTime81);
        mutableInterval3.setDurationAfterStart((org.joda.time.ReadableDuration) duration28);
        org.joda.time.MutableInterval mutableInterval86 = mutableInterval3.toMutableInterval();
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(interval42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(interval48);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(interval60);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(interval66);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(interval80);
        org.junit.Assert.assertNotNull(dateTime81);
        org.junit.Assert.assertNotNull(mutableInterval86);
    }

    @Test
    @Ignore
  public void test1536() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1536");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        long long4 = mutableInterval3.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval5 = mutableInterval3.copy();
        mutableInterval3.setDurationBeforeEnd(1606267392018L);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MutableInterval mutableInterval11 = new org.joda.time.MutableInterval(0L, 1L, chronology10);
        org.joda.time.Interval interval12 = mutableInterval11.toInterval();
        mutableInterval11.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutableInterval mutableInterval18 = new org.joda.time.MutableInterval(0L, 1L, chronology17);
        org.joda.time.Interval interval19 = mutableInterval18.toInterval();
        long long20 = interval19.getEndMillis();
        boolean boolean22 = interval19.isAfter((long) (byte) 100);
        boolean boolean23 = mutableInterval11.overlaps((org.joda.time.ReadableInterval) interval19);
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        org.joda.time.MutableInterval mutableInterval26 = new org.joda.time.MutableInterval(readableInstant24, readablePeriod25);
        mutableInterval26.setDurationBeforeEnd(1L);
        org.joda.time.MutableInterval mutableInterval29 = mutableInterval26.toMutableInterval();
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.MutableInterval mutableInterval33 = new org.joda.time.MutableInterval(0L, 1L, chronology32);
        long long34 = mutableInterval33.toDurationMillis();
        mutableInterval26.setInterval((org.joda.time.ReadableInterval) mutableInterval33);
        org.joda.time.Duration duration36 = mutableInterval33.toDuration();
        mutableInterval11.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration36);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.MutableInterval mutableInterval41 = new org.joda.time.MutableInterval(0L, 1L, chronology40);
        org.joda.time.Interval interval42 = mutableInterval41.toInterval();
        java.lang.Object obj43 = mutableInterval41.clone();
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.MutableInterval mutableInterval45 = new org.joda.time.MutableInterval(obj43, chronology44);
        org.joda.time.DateTime dateTime46 = mutableInterval45.getEnd();
        org.joda.time.MutableInterval mutableInterval47 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration36, (org.joda.time.ReadableInstant) dateTime46);
        mutableInterval3.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration36);
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.MutableInterval mutableInterval52 = new org.joda.time.MutableInterval(0L, 1L, chronology51);
        org.joda.time.Interval interval53 = mutableInterval52.toInterval();
        java.lang.Object obj54 = mutableInterval52.clone();
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.MutableInterval mutableInterval58 = new org.joda.time.MutableInterval(0L, 1L, chronology57);
        org.joda.time.Interval interval59 = mutableInterval58.toInterval();
        java.lang.Object obj60 = mutableInterval58.clone();
        java.lang.Object obj61 = mutableInterval58.clone();
        boolean boolean62 = mutableInterval52.equals((java.lang.Object) mutableInterval58);
        mutableInterval58.setDurationAfterStart(1606267370473L);
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.MutableInterval mutableInterval68 = new org.joda.time.MutableInterval(0L, 1L, chronology67);
        org.joda.time.Interval interval69 = mutableInterval68.toInterval();
        java.lang.Object obj70 = mutableInterval68.clone();
        org.joda.time.Chronology chronology71 = null;
        org.joda.time.MutableInterval mutableInterval72 = new org.joda.time.MutableInterval(obj70, chronology71);
        org.joda.time.ReadablePeriod readablePeriod73 = null;
        mutableInterval72.setPeriodBeforeEnd(readablePeriod73);
        org.joda.time.Chronology chronology77 = null;
        org.joda.time.MutableInterval mutableInterval78 = new org.joda.time.MutableInterval(0L, 1L, chronology77);
        org.joda.time.Interval interval79 = mutableInterval78.toInterval();
        mutableInterval78.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology84 = null;
        org.joda.time.MutableInterval mutableInterval85 = new org.joda.time.MutableInterval(0L, 1L, chronology84);
        org.joda.time.Interval interval86 = mutableInterval85.toInterval();
        long long87 = interval86.getEndMillis();
        boolean boolean89 = interval86.isAfter((long) (byte) 100);
        boolean boolean90 = mutableInterval78.overlaps((org.joda.time.ReadableInterval) interval86);
        org.joda.time.Duration duration91 = mutableInterval78.toDuration();
        boolean boolean92 = mutableInterval72.isBefore((org.joda.time.ReadableInterval) mutableInterval78);
        org.joda.time.Period period93 = mutableInterval72.toPeriod();
        mutableInterval58.setPeriodBeforeEnd((org.joda.time.ReadablePeriod) period93);
        mutableInterval3.setPeriodBeforeEnd((org.joda.time.ReadablePeriod) period93);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1L + "'", long4 == 1L);
        org.junit.Assert.assertNotNull(mutableInterval5);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 1L + "'", long20 == 1L);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(mutableInterval29);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 1L + "'", long34 == 1L);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertNotNull(interval42);
        org.junit.Assert.assertNotNull(obj43);
        org.junit.Assert.assertEquals(obj43.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj43), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj43), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(interval53);
        org.junit.Assert.assertNotNull(obj54);
        org.junit.Assert.assertEquals(obj54.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj54), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj54), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval59);
        org.junit.Assert.assertNotNull(obj60);
        org.junit.Assert.assertEquals(obj60.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj60), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj60), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(obj61);
        org.junit.Assert.assertEquals(obj61.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj61), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj61), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(interval69);
        org.junit.Assert.assertNotNull(obj70);
        org.junit.Assert.assertEquals(obj70.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj70), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj70), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval79);
        org.junit.Assert.assertNotNull(interval86);
        org.junit.Assert.assertTrue("'" + long87 + "' != '" + 1L + "'", long87 == 1L);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertNotNull(duration91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertNotNull(period93);
    }

    @Test
    @Ignore
  public void test1537() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1537");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        mutableInterval3.setPeriodAfterStart(readablePeriod4);
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.MutableInterval mutableInterval8 = new org.joda.time.MutableInterval(readableInstant6, readablePeriod7);
        mutableInterval8.setDurationBeforeEnd(1L);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutableInterval mutableInterval14 = new org.joda.time.MutableInterval(0L, 1L, chronology13);
        org.joda.time.Interval interval15 = mutableInterval14.toInterval();
        mutableInterval14.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MutableInterval mutableInterval21 = new org.joda.time.MutableInterval(0L, 1L, chronology20);
        org.joda.time.Interval interval22 = mutableInterval21.toInterval();
        long long23 = interval22.getEndMillis();
        boolean boolean25 = interval22.isAfter((long) (byte) 100);
        boolean boolean26 = mutableInterval14.overlaps((org.joda.time.ReadableInterval) interval22);
        org.joda.time.Duration duration27 = mutableInterval14.toDuration();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.MutableInterval mutableInterval31 = new org.joda.time.MutableInterval(0L, 1L, chronology30);
        org.joda.time.Interval interval32 = mutableInterval31.toInterval();
        mutableInterval31.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.MutableInterval mutableInterval38 = new org.joda.time.MutableInterval(0L, 1L, chronology37);
        org.joda.time.Interval interval39 = mutableInterval38.toInterval();
        long long40 = interval39.getEndMillis();
        boolean boolean42 = interval39.isAfter((long) (byte) 100);
        boolean boolean43 = mutableInterval31.overlaps((org.joda.time.ReadableInterval) interval39);
        org.joda.time.Duration duration44 = mutableInterval31.toDuration();
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.MutableInterval mutableInterval48 = new org.joda.time.MutableInterval(0L, 1L, chronology47);
        org.joda.time.Interval interval49 = mutableInterval48.toInterval();
        org.joda.time.DateTime dateTime50 = mutableInterval48.getStart();
        org.joda.time.ReadableInstant readableInstant51 = null;
        org.joda.time.ReadablePeriod readablePeriod52 = null;
        org.joda.time.MutableInterval mutableInterval53 = new org.joda.time.MutableInterval(readableInstant51, readablePeriod52);
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.MutableInterval mutableInterval57 = new org.joda.time.MutableInterval(0L, 1L, chronology56);
        org.joda.time.Interval interval58 = mutableInterval57.toInterval();
        org.joda.time.DateTime dateTime59 = mutableInterval57.getStart();
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.MutableInterval mutableInterval63 = new org.joda.time.MutableInterval(0L, 1L, chronology62);
        org.joda.time.Interval interval64 = mutableInterval63.toInterval();
        org.joda.time.DateTime dateTime65 = mutableInterval63.getStart();
        mutableInterval53.setInterval((org.joda.time.ReadableInstant) dateTime59, (org.joda.time.ReadableInstant) dateTime65);
        org.joda.time.MutableInterval mutableInterval67 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime50, (org.joda.time.ReadableInstant) dateTime65);
        org.joda.time.MutableInterval mutableInterval68 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration44, (org.joda.time.ReadableInstant) dateTime65);
        mutableInterval14.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration44);
        mutableInterval8.setInterval((org.joda.time.ReadableInterval) mutableInterval14);
        boolean boolean71 = mutableInterval3.contains((org.joda.time.ReadableInterval) mutableInterval14);
        java.lang.Object obj72 = mutableInterval14.clone();
        java.lang.Object obj73 = mutableInterval14.clone();
        org.joda.time.Duration duration74 = mutableInterval14.toDuration();
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 1L + "'", long23 == 1L);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(interval32);
        org.junit.Assert.assertNotNull(interval39);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 1L + "'", long40 == 1L);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertNotNull(interval49);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(interval58);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(interval64);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(obj72);
        org.junit.Assert.assertEquals(obj72.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj72), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj72), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(obj73);
        org.junit.Assert.assertEquals(obj73.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj73), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj73), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(duration74);
    }

    @Test
    @Ignore
  public void test1538() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1538");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        java.lang.Object obj5 = mutableInterval3.clone();
        long long6 = mutableInterval3.getStartMillis();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.MutableInterval mutableInterval11 = new org.joda.time.MutableInterval(readableInstant9, readablePeriod10);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutableInterval mutableInterval15 = new org.joda.time.MutableInterval(0L, 1L, chronology14);
        org.joda.time.Interval interval16 = mutableInterval15.toInterval();
        org.joda.time.DateTime dateTime17 = mutableInterval15.getStart();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MutableInterval mutableInterval21 = new org.joda.time.MutableInterval(0L, 1L, chronology20);
        org.joda.time.Interval interval22 = mutableInterval21.toInterval();
        org.joda.time.DateTime dateTime23 = mutableInterval21.getStart();
        mutableInterval11.setInterval((org.joda.time.ReadableInstant) dateTime17, (org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.MutableInterval mutableInterval25 = new org.joda.time.MutableInterval(readablePeriod8, (org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.MutableInterval mutableInterval26 = new org.joda.time.MutableInterval(readablePeriod7, (org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.ReadableInstant readableInstant27 = null;
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.MutableInterval mutableInterval29 = new org.joda.time.MutableInterval(readableInstant27, readablePeriod28);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.MutableInterval mutableInterval33 = new org.joda.time.MutableInterval(0L, 1L, chronology32);
        org.joda.time.Interval interval34 = mutableInterval33.toInterval();
        org.joda.time.DateTime dateTime35 = mutableInterval33.getStart();
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.MutableInterval mutableInterval39 = new org.joda.time.MutableInterval(0L, 1L, chronology38);
        org.joda.time.Interval interval40 = mutableInterval39.toInterval();
        org.joda.time.DateTime dateTime41 = mutableInterval39.getStart();
        mutableInterval29.setInterval((org.joda.time.ReadableInstant) dateTime35, (org.joda.time.ReadableInstant) dateTime41);
        org.joda.time.MutableInterval mutableInterval43 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime17, (org.joda.time.ReadableInstant) dateTime35);
        boolean boolean44 = mutableInterval3.isBefore((org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.MutableInterval mutableInterval48 = new org.joda.time.MutableInterval(0L, 1L, chronology47);
        org.joda.time.Interval interval49 = mutableInterval48.toInterval();
        java.lang.Object obj50 = mutableInterval48.clone();
        org.joda.time.Interval interval51 = mutableInterval48.toInterval();
        org.joda.time.ReadableInterval readableInterval52 = null;
        boolean boolean53 = mutableInterval48.isBefore(readableInterval52);
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.MutableInterval mutableInterval57 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology56);
        boolean boolean58 = mutableInterval48.isAfter((org.joda.time.ReadableInterval) mutableInterval57);
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.MutableInterval mutableInterval62 = new org.joda.time.MutableInterval(0L, 1L, chronology61);
        org.joda.time.Interval interval63 = mutableInterval62.toInterval();
        org.joda.time.DateTime dateTime64 = mutableInterval62.getStart();
        boolean boolean65 = mutableInterval48.isBefore((org.joda.time.ReadableInstant) dateTime64);
        org.joda.time.Period period66 = mutableInterval48.toPeriod();
        org.joda.time.MutableInterval mutableInterval67 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime17, (org.joda.time.ReadablePeriod) period66);
        boolean boolean68 = mutableInterval67.isAfterNow();
        org.joda.time.Chronology chronology69 = null;
        org.joda.time.MutableInterval mutableInterval70 = new org.joda.time.MutableInterval((java.lang.Object) mutableInterval67, chronology69);
        org.joda.time.Duration duration71 = mutableInterval67.toDuration();
        org.joda.time.Interval interval72 = mutableInterval67.toInterval();
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(interval34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(interval49);
        org.junit.Assert.assertNotNull(obj50);
        org.junit.Assert.assertEquals(obj50.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj50), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj50), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(interval63);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(period66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(duration71);
        org.junit.Assert.assertNotNull(interval72);
    }

    @Test
    public void test1539() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1539");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadablePeriod readablePeriod1 = null;
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval(readableInstant0, readablePeriod1);
        long long3 = mutableInterval2.getEndMillis();
        org.joda.time.MutableInterval mutableInterval4 = mutableInterval2.copy();
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval(readableDuration5, readableInstant6);
        org.joda.time.PeriodType periodType8 = null;
        org.joda.time.Period period9 = mutableInterval7.toPeriod(periodType8);
        mutableInterval2.setPeriodBeforeEnd((org.joda.time.ReadablePeriod) period9);
        org.joda.time.DateTime dateTime11 = mutableInterval2.getStart();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutableInterval mutableInterval15 = new org.joda.time.MutableInterval(0L, 1L, chronology14);
        org.joda.time.Interval interval16 = mutableInterval15.toInterval();
        boolean boolean18 = mutableInterval15.contains((long) ' ');
        org.joda.time.MutableInterval mutableInterval19 = mutableInterval15.copy();
        boolean boolean20 = mutableInterval2.equals((java.lang.Object) mutableInterval19);
        boolean boolean22 = mutableInterval2.contains(1606267447619L);
// flaky:         org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1606267571119L + "'", long3 == 1606267571119L);
        org.junit.Assert.assertNotNull(mutableInterval4);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(mutableInterval19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    @Ignore
  public void test1540() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1540");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        java.lang.Object obj5 = mutableInterval3.clone();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval(obj5, chronology6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        mutableInterval7.setPeriodBeforeEnd(readablePeriod8);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutableInterval mutableInterval13 = new org.joda.time.MutableInterval(0L, 1L, chronology12);
        org.joda.time.Interval interval14 = mutableInterval13.toInterval();
        mutableInterval13.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval(0L, 1L, chronology19);
        org.joda.time.Interval interval21 = mutableInterval20.toInterval();
        long long22 = interval21.getEndMillis();
        boolean boolean24 = interval21.isAfter((long) (byte) 100);
        boolean boolean25 = mutableInterval13.overlaps((org.joda.time.ReadableInterval) interval21);
        org.joda.time.Duration duration26 = mutableInterval13.toDuration();
        boolean boolean27 = mutableInterval7.isBefore((org.joda.time.ReadableInterval) mutableInterval13);
        org.joda.time.MutableInterval mutableInterval28 = mutableInterval13.toMutableInterval();
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        org.joda.time.MutableInterval mutableInterval32 = new org.joda.time.MutableInterval(readableInstant30, readablePeriod31);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.MutableInterval mutableInterval36 = new org.joda.time.MutableInterval(0L, 1L, chronology35);
        org.joda.time.Interval interval37 = mutableInterval36.toInterval();
        org.joda.time.DateTime dateTime38 = mutableInterval36.getStart();
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.MutableInterval mutableInterval42 = new org.joda.time.MutableInterval(0L, 1L, chronology41);
        org.joda.time.Interval interval43 = mutableInterval42.toInterval();
        org.joda.time.DateTime dateTime44 = mutableInterval42.getStart();
        mutableInterval32.setInterval((org.joda.time.ReadableInstant) dateTime38, (org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.MutableInterval mutableInterval46 = new org.joda.time.MutableInterval(readablePeriod29, (org.joda.time.ReadableInstant) dateTime38);
        mutableInterval13.setEnd((org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.MutableInterval mutableInterval51 = new org.joda.time.MutableInterval(0L, 1L, chronology50);
        org.joda.time.Interval interval52 = mutableInterval51.toInterval();
        mutableInterval51.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.MutableInterval mutableInterval58 = new org.joda.time.MutableInterval(0L, 1L, chronology57);
        org.joda.time.Interval interval59 = mutableInterval58.toInterval();
        long long60 = interval59.getEndMillis();
        boolean boolean62 = interval59.isAfter((long) (byte) 100);
        boolean boolean63 = mutableInterval51.overlaps((org.joda.time.ReadableInterval) interval59);
        boolean boolean64 = mutableInterval13.contains((org.joda.time.ReadableInterval) mutableInterval51);
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.MutableInterval mutableInterval68 = new org.joda.time.MutableInterval(0L, 1L, chronology67);
        org.joda.time.Interval interval69 = mutableInterval68.toInterval();
        org.joda.time.DateTime dateTime70 = mutableInterval68.getStart();
        boolean boolean71 = mutableInterval13.contains((org.joda.time.ReadableInstant) dateTime70);
        org.joda.time.Chronology chronology74 = null;
        org.joda.time.MutableInterval mutableInterval75 = new org.joda.time.MutableInterval(0L, 1L, chronology74);
        org.joda.time.Interval interval76 = mutableInterval75.toInterval();
        java.lang.Object obj77 = mutableInterval75.clone();
        mutableInterval75.setStartMillis((long) (short) -1);
        org.joda.time.Chronology chronology80 = mutableInterval75.getChronology();
        mutableInterval13.setChronology(chronology80);
        org.joda.time.Chronology chronology84 = null;
        org.joda.time.MutableInterval mutableInterval85 = new org.joda.time.MutableInterval(0L, 1L, chronology84);
        org.joda.time.Interval interval86 = mutableInterval85.toInterval();
        java.lang.Object obj87 = mutableInterval85.clone();
        org.joda.time.ReadableDuration readableDuration88 = null;
        mutableInterval85.setDurationAfterStart(readableDuration88);
        boolean boolean90 = mutableInterval85.isAfterNow();
        boolean boolean91 = mutableInterval13.contains((org.joda.time.ReadableInterval) mutableInterval85);
        org.joda.time.Interval interval92 = mutableInterval85.toInterval();
        org.joda.time.Interval interval93 = mutableInterval85.toInterval();
        org.joda.time.Interval interval94 = interval93.toInterval();
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 1L + "'", long22 == 1L);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(mutableInterval28);
        org.junit.Assert.assertNotNull(interval37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(interval43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(interval52);
        org.junit.Assert.assertNotNull(interval59);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 1L + "'", long60 == 1L);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(interval69);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(interval76);
        org.junit.Assert.assertNotNull(obj77);
        org.junit.Assert.assertEquals(obj77.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj77), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj77), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(chronology80);
        org.junit.Assert.assertNotNull(interval86);
        org.junit.Assert.assertNotNull(obj87);
        org.junit.Assert.assertEquals(obj87.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj87), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj87), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNotNull(interval92);
        org.junit.Assert.assertNotNull(interval93);
        org.junit.Assert.assertNotNull(interval94);
    }

    @Test
    @Ignore
  public void test1541() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1541");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        java.lang.Object obj5 = mutableInterval3.clone();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval(obj5, chronology6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        mutableInterval7.setPeriodBeforeEnd(readablePeriod8);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutableInterval mutableInterval13 = new org.joda.time.MutableInterval(0L, 1L, chronology12);
        org.joda.time.Interval interval14 = mutableInterval13.toInterval();
        mutableInterval13.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval(0L, 1L, chronology19);
        org.joda.time.Interval interval21 = mutableInterval20.toInterval();
        long long22 = interval21.getEndMillis();
        boolean boolean24 = interval21.isAfter((long) (byte) 100);
        boolean boolean25 = mutableInterval13.overlaps((org.joda.time.ReadableInterval) interval21);
        org.joda.time.Duration duration26 = mutableInterval13.toDuration();
        boolean boolean27 = mutableInterval7.isBefore((org.joda.time.ReadableInterval) mutableInterval13);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.MutableInterval mutableInterval31 = new org.joda.time.MutableInterval(0L, 1L, chronology30);
        org.joda.time.Interval interval32 = mutableInterval31.toInterval();
        java.lang.Object obj33 = mutableInterval31.clone();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MutableInterval mutableInterval35 = new org.joda.time.MutableInterval(obj33, chronology34);
        org.joda.time.ReadablePeriod readablePeriod36 = null;
        mutableInterval35.setPeriodAfterStart(readablePeriod36);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.MutableInterval mutableInterval41 = new org.joda.time.MutableInterval(0L, 1L, chronology40);
        org.joda.time.Interval interval42 = mutableInterval41.toInterval();
        java.lang.Object obj43 = mutableInterval41.clone();
        mutableInterval41.setStartMillis((long) (short) -1);
        org.joda.time.Chronology chronology46 = mutableInterval41.getChronology();
        org.joda.time.MutableInterval mutableInterval47 = mutableInterval41.toMutableInterval();
        boolean boolean48 = mutableInterval35.isAfter((org.joda.time.ReadableInterval) mutableInterval47);
        mutableInterval13.setInterval((org.joda.time.ReadableInterval) mutableInterval35);
        org.joda.time.MutableInterval mutableInterval50 = mutableInterval13.copy();
        org.joda.time.ReadablePeriod readablePeriod51 = null;
        org.joda.time.ReadableInstant readableInstant52 = null;
        org.joda.time.ReadablePeriod readablePeriod53 = null;
        org.joda.time.MutableInterval mutableInterval54 = new org.joda.time.MutableInterval(readableInstant52, readablePeriod53);
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.MutableInterval mutableInterval58 = new org.joda.time.MutableInterval(0L, 1L, chronology57);
        org.joda.time.Interval interval59 = mutableInterval58.toInterval();
        org.joda.time.DateTime dateTime60 = mutableInterval58.getStart();
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.MutableInterval mutableInterval64 = new org.joda.time.MutableInterval(0L, 1L, chronology63);
        org.joda.time.Interval interval65 = mutableInterval64.toInterval();
        org.joda.time.DateTime dateTime66 = mutableInterval64.getStart();
        mutableInterval54.setInterval((org.joda.time.ReadableInstant) dateTime60, (org.joda.time.ReadableInstant) dateTime66);
        org.joda.time.MutableInterval mutableInterval68 = new org.joda.time.MutableInterval(readablePeriod51, (org.joda.time.ReadableInstant) dateTime60);
        org.joda.time.Chronology chronology71 = null;
        org.joda.time.MutableInterval mutableInterval72 = new org.joda.time.MutableInterval(0L, 1L, chronology71);
        org.joda.time.Interval interval73 = mutableInterval72.toInterval();
        mutableInterval72.setDurationAfterStart((long) (byte) 1);
        boolean boolean77 = mutableInterval72.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology78 = mutableInterval72.getChronology();
        org.joda.time.Chronology chronology81 = null;
        org.joda.time.MutableInterval mutableInterval82 = new org.joda.time.MutableInterval(0L, 1L, chronology81);
        org.joda.time.Interval interval83 = mutableInterval82.toInterval();
        java.lang.Object obj84 = mutableInterval82.clone();
        org.joda.time.Chronology chronology85 = null;
        org.joda.time.MutableInterval mutableInterval86 = new org.joda.time.MutableInterval(obj84, chronology85);
        org.joda.time.ReadablePeriod readablePeriod87 = null;
        mutableInterval86.setPeriodAfterStart(readablePeriod87);
        org.joda.time.Period period89 = mutableInterval86.toPeriod();
        mutableInterval72.setPeriodBeforeEnd((org.joda.time.ReadablePeriod) period89);
        org.joda.time.MutableInterval mutableInterval91 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime60, (org.joda.time.ReadablePeriod) period89);
        mutableInterval50.setPeriodAfterStart((org.joda.time.ReadablePeriod) period89);
        org.joda.time.MutableInterval mutableInterval93 = mutableInterval50.copy();
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 1L + "'", long22 == 1L);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(interval32);
        org.junit.Assert.assertNotNull(obj33);
        org.junit.Assert.assertEquals(obj33.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj33), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj33), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval42);
        org.junit.Assert.assertNotNull(obj43);
        org.junit.Assert.assertEquals(obj43.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj43), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj43), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(mutableInterval47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(mutableInterval50);
        org.junit.Assert.assertNotNull(interval59);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(interval65);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(interval73);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(chronology78);
        org.junit.Assert.assertNotNull(interval83);
        org.junit.Assert.assertNotNull(obj84);
        org.junit.Assert.assertEquals(obj84.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj84), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj84), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(period89);
        org.junit.Assert.assertNotNull(mutableInterval93);
    }

    @Test
    @Ignore
  public void test1542() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1542");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadablePeriod readablePeriod1 = null;
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval(readableInstant0, readablePeriod1);
        mutableInterval2.setDurationBeforeEnd(1L);
        org.joda.time.MutableInterval mutableInterval5 = mutableInterval2.toMutableInterval();
        org.joda.time.DateTime dateTime6 = mutableInterval5.getEnd();
        org.joda.time.MutableInterval mutableInterval7 = mutableInterval5.toMutableInterval();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MutableInterval mutableInterval11 = new org.joda.time.MutableInterval(0L, 1L, chronology10);
        org.joda.time.Interval interval12 = mutableInterval11.toInterval();
        mutableInterval11.setDurationAfterStart((long) (byte) 1);
        mutableInterval11.setDurationAfterStart((long) '#');
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval(0L, 1L, chronology19);
        org.joda.time.Interval interval21 = mutableInterval20.toInterval();
        org.joda.time.DateTime dateTime22 = mutableInterval20.getStart();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MutableInterval mutableInterval26 = new org.joda.time.MutableInterval(0L, 1L, chronology25);
        org.joda.time.Interval interval27 = mutableInterval26.toInterval();
        java.lang.Object obj28 = mutableInterval26.clone();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MutableInterval mutableInterval30 = new org.joda.time.MutableInterval(obj28, chronology29);
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        mutableInterval30.setPeriodAfterStart(readablePeriod31);
        org.joda.time.Period period33 = mutableInterval30.toPeriod();
        org.joda.time.MutableInterval mutableInterval34 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime22, (org.joda.time.ReadablePeriod) period33);
        boolean boolean35 = mutableInterval11.isBefore((org.joda.time.ReadableInstant) dateTime22);
        boolean boolean36 = mutableInterval7.contains((org.joda.time.ReadableInstant) dateTime22);
        boolean boolean38 = mutableInterval7.isBefore(1606267309568L);
        boolean boolean40 = mutableInterval7.isBefore(1606267437198L);
        org.junit.Assert.assertNotNull(mutableInterval5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(mutableInterval7);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertNotNull(obj28);
        org.junit.Assert.assertEquals(obj28.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj28), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj28), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    @Ignore
  public void test1543() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1543");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        java.lang.Object obj5 = mutableInterval3.clone();
        java.lang.Object obj6 = mutableInterval3.clone();
        org.joda.time.MutableInterval mutableInterval7 = mutableInterval3.copy();
        java.lang.Object obj8 = mutableInterval7.clone();
        org.joda.time.MutableInterval mutableInterval11 = new org.joda.time.MutableInterval((long) 1, 1606267382055L);
        boolean boolean12 = mutableInterval7.overlaps((org.joda.time.ReadableInterval) mutableInterval11);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertEquals(obj6.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(mutableInterval7);
        org.junit.Assert.assertNotNull(obj8);
        org.junit.Assert.assertEquals(obj8.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj8), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj8), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    @Ignore
  public void test1544() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1544");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        java.lang.Object obj5 = mutableInterval3.clone();
        mutableInterval3.setStartMillis((long) (short) -1);
        boolean boolean8 = mutableInterval3.isAfterNow();
        long long9 = mutableInterval3.getEndMillis();
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1L + "'", long9 == 1L);
    }

    @Test
    @Ignore
  public void test1545() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1545");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.ReadableDuration readableDuration4 = null;
        mutableInterval3.setDurationBeforeEnd(readableDuration4);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutableInterval mutableInterval9 = new org.joda.time.MutableInterval(0L, 1L, chronology8);
        org.joda.time.Interval interval10 = mutableInterval9.toInterval();
        java.lang.Object obj11 = mutableInterval9.clone();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutableInterval mutableInterval13 = new org.joda.time.MutableInterval(obj11, chronology12);
        long long14 = mutableInterval13.getStartMillis();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutableInterval mutableInterval18 = new org.joda.time.MutableInterval(0L, 1L, chronology17);
        org.joda.time.Interval interval19 = mutableInterval18.toInterval();
        mutableInterval18.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MutableInterval mutableInterval25 = new org.joda.time.MutableInterval(0L, 1L, chronology24);
        org.joda.time.Interval interval26 = mutableInterval25.toInterval();
        mutableInterval25.setDurationAfterStart((long) (byte) 1);
        boolean boolean30 = mutableInterval25.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology31 = mutableInterval25.getChronology();
        mutableInterval18.setChronology(chronology31);
        mutableInterval18.setEndMillis((long) '#');
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.MutableInterval mutableInterval38 = new org.joda.time.MutableInterval(0L, 1L, chronology37);
        org.joda.time.Interval interval39 = mutableInterval38.toInterval();
        java.lang.Object obj40 = mutableInterval38.clone();
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.MutableInterval mutableInterval42 = new org.joda.time.MutableInterval(obj40, chronology41);
        org.joda.time.ReadablePeriod readablePeriod43 = null;
        mutableInterval42.setPeriodBeforeEnd(readablePeriod43);
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.MutableInterval mutableInterval48 = new org.joda.time.MutableInterval(0L, 1L, chronology47);
        org.joda.time.Interval interval49 = mutableInterval48.toInterval();
        mutableInterval48.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.MutableInterval mutableInterval55 = new org.joda.time.MutableInterval(0L, 1L, chronology54);
        org.joda.time.Interval interval56 = mutableInterval55.toInterval();
        long long57 = interval56.getEndMillis();
        boolean boolean59 = interval56.isAfter((long) (byte) 100);
        boolean boolean60 = mutableInterval48.overlaps((org.joda.time.ReadableInterval) interval56);
        org.joda.time.Duration duration61 = mutableInterval48.toDuration();
        boolean boolean62 = mutableInterval42.isBefore((org.joda.time.ReadableInterval) mutableInterval48);
        org.joda.time.MutableInterval mutableInterval63 = mutableInterval48.toMutableInterval();
        java.lang.String str64 = mutableInterval63.toString();
        java.lang.String str65 = mutableInterval63.toString();
        boolean boolean66 = mutableInterval18.isAfter((org.joda.time.ReadableInterval) mutableInterval63);
        boolean boolean67 = mutableInterval18.isAfterNow();
        org.joda.time.Duration duration68 = mutableInterval18.toDuration();
        mutableInterval13.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration68);
        org.joda.time.ReadableInstant readableInstant70 = null;
        org.joda.time.MutableInterval mutableInterval71 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration68, readableInstant70);
        mutableInterval3.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration68);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertEquals(obj11.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj11), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj11), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(interval39);
        org.junit.Assert.assertNotNull(obj40);
        org.junit.Assert.assertEquals(obj40.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj40), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj40), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval49);
        org.junit.Assert.assertNotNull(interval56);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 1L + "'", long57 == 1L);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(duration61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(mutableInterval63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z" + "'", str64, "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z" + "'", str65, "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(duration68);
    }

    @Test
    @Ignore
  public void test1546() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1546");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        org.joda.time.DateTime dateTime5 = mutableInterval3.getStart();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutableInterval mutableInterval9 = new org.joda.time.MutableInterval(0L, 1L, chronology8);
        org.joda.time.Interval interval10 = mutableInterval9.toInterval();
        java.lang.Object obj11 = mutableInterval9.clone();
        org.joda.time.Interval interval12 = mutableInterval9.toInterval();
        org.joda.time.ReadableInterval readableInterval13 = null;
        boolean boolean14 = mutableInterval9.isBefore(readableInterval13);
        org.joda.time.MutableInterval mutableInterval15 = mutableInterval9.copy();
        boolean boolean16 = mutableInterval3.contains((org.joda.time.ReadableInterval) mutableInterval9);
        mutableInterval9.setInterval((long) '#', 1606267292730L);
        org.joda.time.Chronology chronology20 = mutableInterval9.getChronology();
        boolean boolean21 = mutableInterval9.isBeforeNow();
        long long22 = mutableInterval9.getStartMillis();
        org.joda.time.Interval interval23 = mutableInterval9.toInterval();
        mutableInterval9.setEndMillis(1606267440786L);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MutableInterval mutableInterval29 = new org.joda.time.MutableInterval(0L, 1L, chronology28);
        org.joda.time.Interval interval30 = mutableInterval29.toInterval();
        org.joda.time.DateTime dateTime31 = mutableInterval29.getStart();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MutableInterval mutableInterval35 = new org.joda.time.MutableInterval(0L, 1L, chronology34);
        org.joda.time.Interval interval36 = mutableInterval35.toInterval();
        java.lang.Object obj37 = mutableInterval35.clone();
        org.joda.time.Interval interval38 = mutableInterval35.toInterval();
        org.joda.time.ReadableInterval readableInterval39 = null;
        boolean boolean40 = mutableInterval35.isBefore(readableInterval39);
        org.joda.time.MutableInterval mutableInterval41 = mutableInterval35.copy();
        boolean boolean42 = mutableInterval29.contains((org.joda.time.ReadableInterval) mutableInterval35);
        mutableInterval35.setInterval((long) '#', 1606267292730L);
        org.joda.time.Chronology chronology46 = mutableInterval35.getChronology();
        boolean boolean47 = mutableInterval35.isBeforeNow();
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.MutableInterval mutableInterval51 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology50);
        org.joda.time.ReadablePeriod readablePeriod52 = null;
        mutableInterval51.setPeriodBeforeEnd(readablePeriod52);
        org.joda.time.ReadableInstant readableInstant54 = null;
        org.joda.time.ReadablePeriod readablePeriod55 = null;
        org.joda.time.MutableInterval mutableInterval56 = new org.joda.time.MutableInterval(readableInstant54, readablePeriod55);
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.MutableInterval mutableInterval60 = new org.joda.time.MutableInterval(0L, 1L, chronology59);
        org.joda.time.Interval interval61 = mutableInterval60.toInterval();
        org.joda.time.DateTime dateTime62 = mutableInterval60.getStart();
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.MutableInterval mutableInterval66 = new org.joda.time.MutableInterval(0L, 1L, chronology65);
        org.joda.time.Interval interval67 = mutableInterval66.toInterval();
        org.joda.time.DateTime dateTime68 = mutableInterval66.getStart();
        mutableInterval56.setInterval((org.joda.time.ReadableInstant) dateTime62, (org.joda.time.ReadableInstant) dateTime68);
        boolean boolean70 = mutableInterval51.isAfter((org.joda.time.ReadableInstant) dateTime68);
        boolean boolean71 = mutableInterval35.isAfter((org.joda.time.ReadableInstant) dateTime68);
        org.joda.time.Chronology chronology74 = null;
        org.joda.time.MutableInterval mutableInterval75 = new org.joda.time.MutableInterval(0L, 1L, chronology74);
        org.joda.time.Interval interval76 = mutableInterval75.toInterval();
        org.joda.time.DateTime dateTime77 = mutableInterval75.getStart();
        org.joda.time.ReadableInstant readableInstant78 = null;
        org.joda.time.ReadablePeriod readablePeriod79 = null;
        org.joda.time.MutableInterval mutableInterval80 = new org.joda.time.MutableInterval(readableInstant78, readablePeriod79);
        org.joda.time.Chronology chronology83 = null;
        org.joda.time.MutableInterval mutableInterval84 = new org.joda.time.MutableInterval(0L, 1L, chronology83);
        org.joda.time.Interval interval85 = mutableInterval84.toInterval();
        org.joda.time.DateTime dateTime86 = mutableInterval84.getStart();
        org.joda.time.Chronology chronology89 = null;
        org.joda.time.MutableInterval mutableInterval90 = new org.joda.time.MutableInterval(0L, 1L, chronology89);
        org.joda.time.Interval interval91 = mutableInterval90.toInterval();
        org.joda.time.DateTime dateTime92 = mutableInterval90.getStart();
        mutableInterval80.setInterval((org.joda.time.ReadableInstant) dateTime86, (org.joda.time.ReadableInstant) dateTime92);
        org.joda.time.MutableInterval mutableInterval94 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime77, (org.joda.time.ReadableInstant) dateTime92);
        org.joda.time.DateTime dateTime95 = mutableInterval94.getStart();
        org.joda.time.Duration duration96 = mutableInterval94.toDuration();
        org.joda.time.MutableInterval mutableInterval97 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime68, (org.joda.time.ReadableDuration) duration96);
        boolean boolean98 = mutableInterval9.contains((org.joda.time.ReadableInstant) dateTime68);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertEquals(obj11.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj11), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj11), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(mutableInterval15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 35L + "'", long22 == 35L);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertNotNull(interval30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(interval36);
        org.junit.Assert.assertNotNull(obj37);
        org.junit.Assert.assertEquals(obj37.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj37), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj37), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(mutableInterval41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(interval61);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(interval67);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(interval76);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertNotNull(interval85);
        org.junit.Assert.assertNotNull(dateTime86);
        org.junit.Assert.assertNotNull(interval91);
        org.junit.Assert.assertNotNull(dateTime92);
        org.junit.Assert.assertNotNull(dateTime95);
        org.junit.Assert.assertNotNull(duration96);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
    }

    @Test
    @Ignore
  public void test1547() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1547");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        org.joda.time.DateTime dateTime5 = mutableInterval3.getStart();
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.MutableInterval mutableInterval8 = new org.joda.time.MutableInterval(readableInstant6, readablePeriod7);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval(0L, 1L, chronology11);
        org.joda.time.Interval interval13 = mutableInterval12.toInterval();
        org.joda.time.DateTime dateTime14 = mutableInterval12.getStart();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutableInterval mutableInterval18 = new org.joda.time.MutableInterval(0L, 1L, chronology17);
        org.joda.time.Interval interval19 = mutableInterval18.toInterval();
        org.joda.time.DateTime dateTime20 = mutableInterval18.getStart();
        mutableInterval8.setInterval((org.joda.time.ReadableInstant) dateTime14, (org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.MutableInterval mutableInterval22 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime5, (org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.DateTime dateTime23 = mutableInterval22.getStart();
        mutableInterval22.setDurationAfterStart((long) 10);
        boolean boolean27 = mutableInterval22.isBefore(1606267411334L);
        java.lang.Object obj28 = mutableInterval22.clone();
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(obj28);
        org.junit.Assert.assertEquals(obj28.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.010Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj28), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.010Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj28), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.010Z");
    }

    @Test
    public void test1548() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1548");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval(0L, 1L, chronology6);
        org.joda.time.Interval interval8 = mutableInterval7.toInterval();
        mutableInterval7.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutableInterval mutableInterval14 = new org.joda.time.MutableInterval(0L, 1L, chronology13);
        org.joda.time.Interval interval15 = mutableInterval14.toInterval();
        mutableInterval14.setDurationAfterStart((long) (byte) 1);
        boolean boolean19 = mutableInterval14.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology20 = mutableInterval14.getChronology();
        mutableInterval7.setChronology(chronology20);
        org.joda.time.MutableInterval mutableInterval22 = new org.joda.time.MutableInterval((long) (-1), (long) '4', chronology20);
        org.joda.time.MutableInterval mutableInterval23 = new org.joda.time.MutableInterval(1606267328566L, 1606267335999L, chronology20);
        boolean boolean24 = mutableInterval23.isAfterNow();
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    @Ignore
  public void test1549() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1549");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        mutableInterval3.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval(0L, 1L, chronology9);
        org.joda.time.Interval interval11 = mutableInterval10.toInterval();
        mutableInterval10.setDurationAfterStart((long) (byte) 1);
        boolean boolean15 = mutableInterval10.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology16 = mutableInterval10.getChronology();
        mutableInterval3.setChronology(chronology16);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MutableInterval mutableInterval21 = new org.joda.time.MutableInterval(0L, 1L, chronology20);
        org.joda.time.Interval interval22 = mutableInterval21.toInterval();
        java.lang.Object obj23 = mutableInterval21.clone();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MutableInterval mutableInterval25 = new org.joda.time.MutableInterval(obj23, chronology24);
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        mutableInterval25.setPeriodAfterStart(readablePeriod26);
        org.joda.time.Period period28 = mutableInterval25.toPeriod();
        org.joda.time.MutableInterval mutableInterval29 = mutableInterval25.copy();
        boolean boolean30 = mutableInterval3.isAfter((org.joda.time.ReadableInterval) mutableInterval25);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.MutableInterval mutableInterval34 = new org.joda.time.MutableInterval(0L, 1L, chronology33);
        org.joda.time.Interval interval35 = mutableInterval34.toInterval();
        java.lang.Object obj36 = mutableInterval34.clone();
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.MutableInterval mutableInterval38 = new org.joda.time.MutableInterval(obj36, chronology37);
        boolean boolean39 = mutableInterval3.equals((java.lang.Object) mutableInterval38);
        org.joda.time.MutableInterval mutableInterval40 = new org.joda.time.MutableInterval((java.lang.Object) mutableInterval3);
        org.joda.time.MutableInterval mutableInterval42 = org.joda.time.MutableInterval.parse("1969-12-31T23:59:59.999Z/1969-12-31T23:59:59.999Z");
        org.joda.time.Interval interval43 = mutableInterval42.toInterval();
        boolean boolean44 = mutableInterval3.isBefore((org.joda.time.ReadableInterval) mutableInterval42);
        java.lang.Object obj45 = mutableInterval3.clone();
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertNotNull(obj23);
        org.junit.Assert.assertEquals(obj23.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj23), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj23), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(mutableInterval29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(interval35);
        org.junit.Assert.assertNotNull(obj36);
        org.junit.Assert.assertEquals(obj36.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj36), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj36), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(mutableInterval42);
        org.junit.Assert.assertNotNull(interval43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(obj45);
        org.junit.Assert.assertEquals(obj45.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj45), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj45), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
    }

    @Test
    @Ignore
  public void test1550() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1550");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadablePeriod readablePeriod1 = null;
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval(readableInstant0, readablePeriod1);
        mutableInterval2.setDurationBeforeEnd(1L);
        org.joda.time.MutableInterval mutableInterval5 = mutableInterval2.toMutableInterval();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutableInterval mutableInterval9 = new org.joda.time.MutableInterval(0L, 1L, chronology8);
        long long10 = mutableInterval9.toDurationMillis();
        mutableInterval2.setInterval((org.joda.time.ReadableInterval) mutableInterval9);
        org.joda.time.Duration duration12 = mutableInterval9.toDuration();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MutableInterval mutableInterval16 = new org.joda.time.MutableInterval(0L, 1L, chronology15);
        org.joda.time.Interval interval17 = mutableInterval16.toInterval();
        java.lang.Object obj18 = mutableInterval16.clone();
        org.joda.time.Interval interval19 = mutableInterval16.toInterval();
        org.joda.time.ReadableInterval readableInterval20 = null;
        boolean boolean21 = mutableInterval16.isBefore(readableInterval20);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MutableInterval mutableInterval25 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology24);
        boolean boolean26 = mutableInterval16.isAfter((org.joda.time.ReadableInterval) mutableInterval25);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MutableInterval mutableInterval30 = new org.joda.time.MutableInterval(0L, 1L, chronology29);
        org.joda.time.Interval interval31 = mutableInterval30.toInterval();
        org.joda.time.DateTime dateTime32 = mutableInterval30.getStart();
        boolean boolean33 = mutableInterval16.isBefore((org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.MutableInterval mutableInterval34 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration12, (org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.MutableInterval mutableInterval35 = new org.joda.time.MutableInterval((java.lang.Object) mutableInterval34);
        org.joda.time.Chronology chronology36 = mutableInterval35.getChronology();
        mutableInterval35.setDurationBeforeEnd(1606267309568L);
        org.junit.Assert.assertNotNull(mutableInterval5);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1L + "'", long10 == 1L);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(interval17);
        org.junit.Assert.assertNotNull(obj18);
        org.junit.Assert.assertEquals(obj18.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj18), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj18), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(interval31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(chronology36);
    }

    @Test
    public void test1551() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1551");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.ReadableDuration readableDuration4 = null;
        mutableInterval3.setDurationBeforeEnd(readableDuration4);
        boolean boolean6 = mutableInterval3.isBeforeNow();
        org.joda.time.MutableInterval mutableInterval7 = mutableInterval3.toMutableInterval();
        org.joda.time.Interval interval8 = mutableInterval7.toInterval();
        org.joda.time.MutableInterval mutableInterval9 = mutableInterval7.toMutableInterval();
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.MutableInterval mutableInterval14 = new org.joda.time.MutableInterval(readableInstant12, readablePeriod13);
        mutableInterval14.setDurationBeforeEnd(1L);
        org.joda.time.MutableInterval mutableInterval17 = mutableInterval14.toMutableInterval();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MutableInterval mutableInterval21 = new org.joda.time.MutableInterval(0L, 1L, chronology20);
        long long22 = mutableInterval21.toDurationMillis();
        mutableInterval14.setInterval((org.joda.time.ReadableInterval) mutableInterval21);
        mutableInterval14.setDurationAfterStart(100L);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.MutableInterval mutableInterval33 = new org.joda.time.MutableInterval(0L, 1L, chronology32);
        org.joda.time.Interval interval34 = mutableInterval33.toInterval();
        mutableInterval33.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.MutableInterval mutableInterval40 = new org.joda.time.MutableInterval(0L, 1L, chronology39);
        org.joda.time.Interval interval41 = mutableInterval40.toInterval();
        mutableInterval40.setDurationAfterStart((long) (byte) 1);
        boolean boolean45 = mutableInterval40.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology46 = mutableInterval40.getChronology();
        mutableInterval33.setChronology(chronology46);
        org.joda.time.MutableInterval mutableInterval48 = new org.joda.time.MutableInterval((long) (-1), (long) '4', chronology46);
        org.joda.time.MutableInterval mutableInterval49 = new org.joda.time.MutableInterval((long) (short) 1, (long) 100, chronology46);
        org.joda.time.MutableInterval mutableInterval50 = new org.joda.time.MutableInterval((java.lang.Object) mutableInterval14, chronology46);
        org.joda.time.MutableInterval mutableInterval51 = new org.joda.time.MutableInterval((long) (short) 1, (long) ' ', chronology46);
        mutableInterval7.setChronology(chronology46);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(mutableInterval7);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(mutableInterval9);
        org.junit.Assert.assertNotNull(mutableInterval17);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 1L + "'", long22 == 1L);
        org.junit.Assert.assertNotNull(interval34);
        org.junit.Assert.assertNotNull(interval41);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(chronology46);
    }

    @Test
    @Ignore
  public void test1552() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1552");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        mutableInterval3.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval(0L, 1L, chronology9);
        org.joda.time.Interval interval11 = mutableInterval10.toInterval();
        long long12 = interval11.getEndMillis();
        boolean boolean14 = interval11.isAfter((long) (byte) 100);
        boolean boolean15 = mutableInterval3.overlaps((org.joda.time.ReadableInterval) interval11);
        org.joda.time.Duration duration16 = mutableInterval3.toDuration();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval(0L, 1L, chronology19);
        org.joda.time.Interval interval21 = mutableInterval20.toInterval();
        org.joda.time.DateTime dateTime22 = mutableInterval20.getStart();
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.MutableInterval mutableInterval25 = new org.joda.time.MutableInterval(readableInstant23, readablePeriod24);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MutableInterval mutableInterval29 = new org.joda.time.MutableInterval(0L, 1L, chronology28);
        org.joda.time.Interval interval30 = mutableInterval29.toInterval();
        org.joda.time.DateTime dateTime31 = mutableInterval29.getStart();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MutableInterval mutableInterval35 = new org.joda.time.MutableInterval(0L, 1L, chronology34);
        org.joda.time.Interval interval36 = mutableInterval35.toInterval();
        org.joda.time.DateTime dateTime37 = mutableInterval35.getStart();
        mutableInterval25.setInterval((org.joda.time.ReadableInstant) dateTime31, (org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.MutableInterval mutableInterval39 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime22, (org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.MutableInterval mutableInterval40 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration16, (org.joda.time.ReadableInstant) dateTime37);
        long long41 = mutableInterval40.toDurationMillis();
        org.joda.time.ReadableDuration readableDuration42 = null;
        org.joda.time.ReadableInstant readableInstant43 = null;
        org.joda.time.MutableInterval mutableInterval44 = new org.joda.time.MutableInterval(readableDuration42, readableInstant43);
        org.joda.time.MutableInterval mutableInterval45 = mutableInterval44.toMutableInterval();
        org.joda.time.Interval interval46 = mutableInterval44.toInterval();
        mutableInterval44.setStartMillis((long) ' ');
        boolean boolean49 = mutableInterval40.overlaps((org.joda.time.ReadableInterval) mutableInterval44);
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.MutableInterval mutableInterval53 = new org.joda.time.MutableInterval(0L, 1L, chronology52);
        org.joda.time.Interval interval54 = mutableInterval53.toInterval();
        java.lang.Object obj55 = mutableInterval53.clone();
        java.lang.Object obj56 = mutableInterval53.clone();
        org.joda.time.MutableInterval mutableInterval57 = mutableInterval53.copy();
        org.joda.time.Duration duration58 = mutableInterval53.toDuration();
        mutableInterval44.setDurationAfterStart((org.joda.time.ReadableDuration) duration58);
        java.lang.Class<?> wildcardClass60 = mutableInterval44.getClass();
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(interval30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(interval36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 1L + "'", long41 == 1L);
        org.junit.Assert.assertNotNull(mutableInterval45);
        org.junit.Assert.assertNotNull(interval46);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(interval54);
        org.junit.Assert.assertNotNull(obj55);
        org.junit.Assert.assertEquals(obj55.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj55), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj55), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(obj56);
        org.junit.Assert.assertEquals(obj56.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj56), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj56), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(mutableInterval57);
        org.junit.Assert.assertNotNull(duration58);
        org.junit.Assert.assertNotNull(wildcardClass60);
    }

    @Test
    @Ignore
  public void test1553() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1553");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        java.lang.Object obj5 = mutableInterval3.clone();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval(obj5, chronology6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        mutableInterval7.setPeriodAfterStart(readablePeriod8);
        org.joda.time.MutableInterval mutableInterval10 = mutableInterval7.toMutableInterval();
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(mutableInterval10);
    }

    @Test
    @Ignore
  public void test1554() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1554");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        java.lang.Object obj5 = mutableInterval3.clone();
        org.joda.time.Interval interval6 = mutableInterval3.toInterval();
        boolean boolean8 = interval6.contains(1606267340662L);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval(0L, 1L, chronology11);
        org.joda.time.Interval interval13 = mutableInterval12.toInterval();
        org.joda.time.DateTime dateTime14 = mutableInterval12.getStart();
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.MutableInterval mutableInterval17 = new org.joda.time.MutableInterval(readableInstant15, readablePeriod16);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MutableInterval mutableInterval21 = new org.joda.time.MutableInterval(0L, 1L, chronology20);
        org.joda.time.Interval interval22 = mutableInterval21.toInterval();
        org.joda.time.DateTime dateTime23 = mutableInterval21.getStart();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MutableInterval mutableInterval27 = new org.joda.time.MutableInterval(0L, 1L, chronology26);
        org.joda.time.Interval interval28 = mutableInterval27.toInterval();
        org.joda.time.DateTime dateTime29 = mutableInterval27.getStart();
        mutableInterval17.setInterval((org.joda.time.ReadableInstant) dateTime23, (org.joda.time.ReadableInstant) dateTime29);
        org.joda.time.MutableInterval mutableInterval31 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime14, (org.joda.time.ReadableInstant) dateTime29);
        org.joda.time.DateTime dateTime32 = mutableInterval31.getStart();
        org.joda.time.DateTime dateTime33 = mutableInterval31.getEnd();
        boolean boolean34 = interval6.contains((org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.MutableInterval mutableInterval38 = new org.joda.time.MutableInterval(0L, 1L, chronology37);
        org.joda.time.Interval interval39 = mutableInterval38.toInterval();
        org.joda.time.DateTime dateTime40 = mutableInterval38.getStart();
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.MutableInterval mutableInterval44 = new org.joda.time.MutableInterval(0L, 1L, chronology43);
        org.joda.time.Interval interval45 = mutableInterval44.toInterval();
        java.lang.Object obj46 = mutableInterval44.clone();
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.MutableInterval mutableInterval48 = new org.joda.time.MutableInterval(obj46, chronology47);
        org.joda.time.ReadablePeriod readablePeriod49 = null;
        mutableInterval48.setPeriodAfterStart(readablePeriod49);
        org.joda.time.Period period51 = mutableInterval48.toPeriod();
        org.joda.time.MutableInterval mutableInterval52 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime40, (org.joda.time.ReadablePeriod) period51);
        org.joda.time.Chronology chronology53 = mutableInterval52.getChronology();
        boolean boolean54 = interval6.isAfter((org.joda.time.ReadableInterval) mutableInterval52);
        long long55 = mutableInterval52.getStartMillis();
        mutableInterval52.setDurationBeforeEnd(1606267442437L);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(interval39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(interval45);
        org.junit.Assert.assertNotNull(obj46);
        org.junit.Assert.assertEquals(obj46.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj46), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj46), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(period51);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 0L + "'", long55 == 0L);
    }

    @Test
    public void test1555() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1555");
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval(1606267319007L, 1606267379667L);
    }

    @Test
    @Ignore
  public void test1556() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1556");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        org.joda.time.DateTime dateTime5 = mutableInterval3.getStart();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutableInterval mutableInterval9 = new org.joda.time.MutableInterval(0L, 1L, chronology8);
        org.joda.time.Interval interval10 = mutableInterval9.toInterval();
        java.lang.Object obj11 = mutableInterval9.clone();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutableInterval mutableInterval13 = new org.joda.time.MutableInterval(obj11, chronology12);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        mutableInterval13.setPeriodAfterStart(readablePeriod14);
        org.joda.time.Period period16 = mutableInterval13.toPeriod();
        org.joda.time.MutableInterval mutableInterval17 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime5, (org.joda.time.ReadablePeriod) period16);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MutableInterval mutableInterval21 = new org.joda.time.MutableInterval(0L, 1L, chronology20);
        org.joda.time.Interval interval22 = mutableInterval21.toInterval();
        java.lang.Object obj23 = mutableInterval21.clone();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MutableInterval mutableInterval25 = new org.joda.time.MutableInterval(obj23, chronology24);
        org.joda.time.Duration duration26 = mutableInterval25.toDuration();
        org.joda.time.MutableInterval mutableInterval27 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime5, (org.joda.time.ReadableDuration) duration26);
        org.joda.time.MutableInterval mutableInterval30 = new org.joda.time.MutableInterval((long) (-1), (long) (byte) 100);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.MutableInterval mutableInterval34 = new org.joda.time.MutableInterval(0L, 1L, chronology33);
        org.joda.time.Interval interval35 = mutableInterval34.toInterval();
        java.lang.Object obj36 = mutableInterval34.clone();
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.MutableInterval mutableInterval38 = new org.joda.time.MutableInterval(obj36, chronology37);
        org.joda.time.DateTime dateTime39 = mutableInterval38.getEnd();
        boolean boolean40 = mutableInterval30.isBefore((org.joda.time.ReadableInstant) dateTime39);
        boolean boolean41 = mutableInterval27.isBefore((org.joda.time.ReadableInstant) dateTime39);
        boolean boolean43 = mutableInterval27.equals((java.lang.Object) "1970-01-01T00:00:00.000Z/2020-11-25T01:22:12.425Z");
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertEquals(obj11.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj11), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj11), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertNotNull(obj23);
        org.junit.Assert.assertEquals(obj23.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj23), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj23), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(interval35);
        org.junit.Assert.assertNotNull(obj36);
        org.junit.Assert.assertEquals(obj36.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj36), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj36), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
    }

    @Test
    @Ignore
  public void test1557() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1557");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        mutableInterval3.setDurationAfterStart((long) (byte) 1);
        mutableInterval3.setDurationAfterStart((long) '#');
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval(0L, 1L, chronology11);
        org.joda.time.Interval interval13 = mutableInterval12.toInterval();
        java.lang.Object obj14 = mutableInterval12.clone();
        org.joda.time.Interval interval15 = mutableInterval12.toInterval();
        mutableInterval12.setDurationBeforeEnd(0L);
        boolean boolean19 = mutableInterval12.contains((long) (short) 0);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.MutableInterval mutableInterval23 = new org.joda.time.MutableInterval(0L, 1L, chronology22);
        org.joda.time.Interval interval24 = mutableInterval23.toInterval();
        mutableInterval23.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MutableInterval mutableInterval30 = new org.joda.time.MutableInterval(0L, 1L, chronology29);
        org.joda.time.Interval interval31 = mutableInterval30.toInterval();
        long long32 = interval31.getEndMillis();
        boolean boolean34 = interval31.isAfter((long) (byte) 100);
        boolean boolean35 = mutableInterval23.overlaps((org.joda.time.ReadableInterval) interval31);
        org.joda.time.Duration duration36 = mutableInterval23.toDuration();
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.MutableInterval mutableInterval40 = new org.joda.time.MutableInterval(0L, 1L, chronology39);
        org.joda.time.Interval interval41 = mutableInterval40.toInterval();
        org.joda.time.DateTime dateTime42 = mutableInterval40.getStart();
        org.joda.time.ReadableInstant readableInstant43 = null;
        org.joda.time.ReadablePeriod readablePeriod44 = null;
        org.joda.time.MutableInterval mutableInterval45 = new org.joda.time.MutableInterval(readableInstant43, readablePeriod44);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.MutableInterval mutableInterval49 = new org.joda.time.MutableInterval(0L, 1L, chronology48);
        org.joda.time.Interval interval50 = mutableInterval49.toInterval();
        org.joda.time.DateTime dateTime51 = mutableInterval49.getStart();
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.MutableInterval mutableInterval55 = new org.joda.time.MutableInterval(0L, 1L, chronology54);
        org.joda.time.Interval interval56 = mutableInterval55.toInterval();
        org.joda.time.DateTime dateTime57 = mutableInterval55.getStart();
        mutableInterval45.setInterval((org.joda.time.ReadableInstant) dateTime51, (org.joda.time.ReadableInstant) dateTime57);
        org.joda.time.MutableInterval mutableInterval59 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime42, (org.joda.time.ReadableInstant) dateTime57);
        org.joda.time.MutableInterval mutableInterval60 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration36, (org.joda.time.ReadableInstant) dateTime57);
        org.joda.time.ReadableInstant readableInstant61 = null;
        org.joda.time.ReadablePeriod readablePeriod62 = null;
        org.joda.time.MutableInterval mutableInterval63 = new org.joda.time.MutableInterval(readableInstant61, readablePeriod62);
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.MutableInterval mutableInterval67 = new org.joda.time.MutableInterval(0L, 1L, chronology66);
        org.joda.time.Interval interval68 = mutableInterval67.toInterval();
        org.joda.time.DateTime dateTime69 = mutableInterval67.getStart();
        org.joda.time.Chronology chronology72 = null;
        org.joda.time.MutableInterval mutableInterval73 = new org.joda.time.MutableInterval(0L, 1L, chronology72);
        org.joda.time.Interval interval74 = mutableInterval73.toInterval();
        org.joda.time.DateTime dateTime75 = mutableInterval73.getStart();
        mutableInterval63.setInterval((org.joda.time.ReadableInstant) dateTime69, (org.joda.time.ReadableInstant) dateTime75);
        org.joda.time.MutableInterval mutableInterval77 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration36, (org.joda.time.ReadableInstant) dateTime69);
        mutableInterval12.setDurationAfterStart((org.joda.time.ReadableDuration) duration36);
        mutableInterval3.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration36);
        org.joda.time.MutableInterval mutableInterval80 = new org.joda.time.MutableInterval((java.lang.Object) mutableInterval3);
        boolean boolean81 = mutableInterval3.isAfterNow();
        org.joda.time.Chronology chronology84 = null;
        org.joda.time.MutableInterval mutableInterval85 = new org.joda.time.MutableInterval(0L, 1L, chronology84);
        org.joda.time.Interval interval86 = mutableInterval85.toInterval();
        java.lang.Object obj87 = mutableInterval85.clone();
        org.joda.time.Interval interval88 = mutableInterval85.toInterval();
        org.joda.time.ReadableInterval readableInterval89 = null;
        boolean boolean90 = mutableInterval85.isBefore(readableInterval89);
        org.joda.time.MutableInterval mutableInterval91 = mutableInterval85.copy();
        boolean boolean93 = mutableInterval85.contains(1606267294061L);
        org.joda.time.DateTime dateTime94 = mutableInterval85.getStart();
        java.lang.Object obj95 = mutableInterval85.clone();
        org.joda.time.Duration duration96 = mutableInterval85.toDuration();
        boolean boolean97 = mutableInterval3.overlaps((org.joda.time.ReadableInterval) mutableInterval85);
        org.joda.time.Chronology chronology98 = mutableInterval3.getChronology();
        org.joda.time.Interval interval99 = mutableInterval3.toInterval();
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(obj14);
        org.junit.Assert.assertEquals(obj14.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj14), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj14), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(interval31);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 1L + "'", long32 == 1L);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertNotNull(interval41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(interval50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(interval56);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(interval68);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(interval74);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(interval86);
        org.junit.Assert.assertNotNull(obj87);
        org.junit.Assert.assertEquals(obj87.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj87), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj87), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval88);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertNotNull(mutableInterval91);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertNotNull(dateTime94);
        org.junit.Assert.assertNotNull(obj95);
        org.junit.Assert.assertEquals(obj95.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj95), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj95), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(duration96);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
        org.junit.Assert.assertNotNull(chronology98);
        org.junit.Assert.assertNotNull(interval99);
    }

    @Test
    @Ignore
  public void test1558() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1558");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        org.joda.time.DateTime dateTime5 = mutableInterval3.getStart();
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.MutableInterval mutableInterval8 = new org.joda.time.MutableInterval(readableInstant6, readablePeriod7);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval(0L, 1L, chronology11);
        org.joda.time.Interval interval13 = mutableInterval12.toInterval();
        org.joda.time.DateTime dateTime14 = mutableInterval12.getStart();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutableInterval mutableInterval18 = new org.joda.time.MutableInterval(0L, 1L, chronology17);
        org.joda.time.Interval interval19 = mutableInterval18.toInterval();
        org.joda.time.DateTime dateTime20 = mutableInterval18.getStart();
        mutableInterval8.setInterval((org.joda.time.ReadableInstant) dateTime14, (org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.MutableInterval mutableInterval22 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime5, (org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.MutableInterval mutableInterval25 = new org.joda.time.MutableInterval(readableInstant23, readablePeriod24);
        mutableInterval25.setDurationBeforeEnd(1L);
        boolean boolean28 = mutableInterval22.contains((org.joda.time.ReadableInterval) mutableInterval25);
        boolean boolean30 = mutableInterval22.contains(1606267387733L);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.MutableInterval mutableInterval34 = new org.joda.time.MutableInterval(0L, 1L, chronology33);
        org.joda.time.Interval interval35 = mutableInterval34.toInterval();
        java.lang.Object obj36 = mutableInterval34.clone();
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.MutableInterval mutableInterval38 = new org.joda.time.MutableInterval(obj36, chronology37);
        org.joda.time.ReadablePeriod readablePeriod39 = null;
        mutableInterval38.setPeriodBeforeEnd(readablePeriod39);
        mutableInterval38.setDurationBeforeEnd((long) 100);
        mutableInterval38.setStartMillis(1L);
        org.joda.time.MutableInterval mutableInterval45 = mutableInterval38.toMutableInterval();
        org.joda.time.ReadablePeriod readablePeriod46 = null;
        mutableInterval45.setPeriodAfterStart(readablePeriod46);
        boolean boolean48 = mutableInterval22.overlaps((org.joda.time.ReadableInterval) mutableInterval45);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(interval35);
        org.junit.Assert.assertNotNull(obj36);
        org.junit.Assert.assertEquals(obj36.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj36), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj36), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(mutableInterval45);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
    }

    @Test
    @Ignore
  public void test1559() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1559");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadablePeriod readablePeriod1 = null;
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval(readableInstant0, readablePeriod1);
        mutableInterval2.setDurationBeforeEnd(1L);
        org.joda.time.MutableInterval mutableInterval5 = mutableInterval2.toMutableInterval();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutableInterval mutableInterval9 = new org.joda.time.MutableInterval(0L, 1L, chronology8);
        long long10 = mutableInterval9.toDurationMillis();
        mutableInterval2.setInterval((org.joda.time.ReadableInterval) mutableInterval9);
        org.joda.time.Duration duration12 = mutableInterval9.toDuration();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MutableInterval mutableInterval16 = new org.joda.time.MutableInterval(0L, 1L, chronology15);
        org.joda.time.Interval interval17 = mutableInterval16.toInterval();
        java.lang.Object obj18 = mutableInterval16.clone();
        org.joda.time.Interval interval19 = mutableInterval16.toInterval();
        org.joda.time.ReadableInterval readableInterval20 = null;
        boolean boolean21 = mutableInterval16.isBefore(readableInterval20);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MutableInterval mutableInterval25 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology24);
        boolean boolean26 = mutableInterval16.isAfter((org.joda.time.ReadableInterval) mutableInterval25);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MutableInterval mutableInterval30 = new org.joda.time.MutableInterval(0L, 1L, chronology29);
        org.joda.time.Interval interval31 = mutableInterval30.toInterval();
        org.joda.time.DateTime dateTime32 = mutableInterval30.getStart();
        boolean boolean33 = mutableInterval16.isBefore((org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.MutableInterval mutableInterval34 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration12, (org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.Interval interval35 = mutableInterval34.toInterval();
        org.joda.time.Period period36 = mutableInterval34.toPeriod();
        org.joda.time.MutableInterval mutableInterval37 = new org.joda.time.MutableInterval((java.lang.Object) mutableInterval34);
        org.joda.time.ReadableInterval readableInterval38 = null;
        boolean boolean39 = mutableInterval34.isAfter(readableInterval38);
        org.junit.Assert.assertNotNull(mutableInterval5);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1L + "'", long10 == 1L);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(interval17);
        org.junit.Assert.assertNotNull(obj18);
        org.junit.Assert.assertEquals(obj18.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj18), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj18), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(interval31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(interval35);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
    }

    @Test
    @Ignore
  public void test1560() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1560");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        mutableInterval3.setDurationAfterStart((long) (byte) 1);
        org.joda.time.ReadableInstant readableInstant7 = null;
        mutableInterval3.setEnd(readableInstant7);
        mutableInterval3.setEndMillis((long) (byte) 10);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutableInterval mutableInterval14 = new org.joda.time.MutableInterval(0L, 1L, chronology13);
        org.joda.time.Interval interval15 = mutableInterval14.toInterval();
        boolean boolean17 = mutableInterval14.contains((long) ' ');
        org.joda.time.MutableInterval mutableInterval18 = mutableInterval14.copy();
        org.joda.time.MutableInterval mutableInterval21 = new org.joda.time.MutableInterval(10L, (long) (short) 100);
        org.joda.time.ReadableDuration readableDuration22 = null;
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.MutableInterval mutableInterval24 = new org.joda.time.MutableInterval(readableDuration22, readableInstant23);
        org.joda.time.PeriodType periodType25 = null;
        org.joda.time.Period period26 = mutableInterval24.toPeriod(periodType25);
        mutableInterval21.setPeriodBeforeEnd((org.joda.time.ReadablePeriod) period26);
        mutableInterval18.setPeriodAfterStart((org.joda.time.ReadablePeriod) period26);
        org.joda.time.Interval interval29 = mutableInterval18.toInterval();
        long long30 = mutableInterval18.getStartMillis();
        boolean boolean31 = mutableInterval3.contains((org.joda.time.ReadableInterval) mutableInterval18);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MutableInterval mutableInterval35 = new org.joda.time.MutableInterval(0L, 1L, chronology34);
        org.joda.time.Interval interval36 = mutableInterval35.toInterval();
        mutableInterval35.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.MutableInterval mutableInterval42 = new org.joda.time.MutableInterval(0L, 1L, chronology41);
        org.joda.time.Interval interval43 = mutableInterval42.toInterval();
        mutableInterval42.setDurationAfterStart((long) (byte) 1);
        boolean boolean47 = mutableInterval42.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology48 = mutableInterval42.getChronology();
        mutableInterval35.setChronology(chronology48);
        mutableInterval35.setEndMillis((long) '#');
        org.joda.time.Duration duration52 = mutableInterval35.toDuration();
        org.joda.time.Duration duration53 = mutableInterval35.toDuration();
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.MutableInterval mutableInterval57 = new org.joda.time.MutableInterval(0L, 1L, chronology56);
        org.joda.time.Interval interval58 = mutableInterval57.toInterval();
        java.lang.Object obj59 = mutableInterval57.clone();
        org.joda.time.Interval interval60 = mutableInterval57.toInterval();
        boolean boolean62 = interval60.contains(1606267340662L);
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.MutableInterval mutableInterval66 = new org.joda.time.MutableInterval(0L, 1L, chronology65);
        org.joda.time.Interval interval67 = mutableInterval66.toInterval();
        org.joda.time.DateTime dateTime68 = mutableInterval66.getStart();
        org.joda.time.ReadableInstant readableInstant69 = null;
        org.joda.time.ReadablePeriod readablePeriod70 = null;
        org.joda.time.MutableInterval mutableInterval71 = new org.joda.time.MutableInterval(readableInstant69, readablePeriod70);
        org.joda.time.Chronology chronology74 = null;
        org.joda.time.MutableInterval mutableInterval75 = new org.joda.time.MutableInterval(0L, 1L, chronology74);
        org.joda.time.Interval interval76 = mutableInterval75.toInterval();
        org.joda.time.DateTime dateTime77 = mutableInterval75.getStart();
        org.joda.time.Chronology chronology80 = null;
        org.joda.time.MutableInterval mutableInterval81 = new org.joda.time.MutableInterval(0L, 1L, chronology80);
        org.joda.time.Interval interval82 = mutableInterval81.toInterval();
        org.joda.time.DateTime dateTime83 = mutableInterval81.getStart();
        mutableInterval71.setInterval((org.joda.time.ReadableInstant) dateTime77, (org.joda.time.ReadableInstant) dateTime83);
        org.joda.time.MutableInterval mutableInterval85 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime68, (org.joda.time.ReadableInstant) dateTime83);
        org.joda.time.DateTime dateTime86 = mutableInterval85.getStart();
        org.joda.time.DateTime dateTime87 = mutableInterval85.getEnd();
        boolean boolean88 = interval60.contains((org.joda.time.ReadableInstant) dateTime87);
        org.joda.time.MutableInterval mutableInterval89 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration53, (org.joda.time.ReadableInstant) dateTime87);
        boolean boolean90 = mutableInterval18.contains((org.joda.time.ReadableInstant) dateTime87);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(mutableInterval18);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(interval29);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(interval36);
        org.junit.Assert.assertNotNull(interval43);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(duration52);
        org.junit.Assert.assertNotNull(duration53);
        org.junit.Assert.assertNotNull(interval58);
        org.junit.Assert.assertNotNull(obj59);
        org.junit.Assert.assertEquals(obj59.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj59), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj59), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(interval67);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(interval76);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertNotNull(interval82);
        org.junit.Assert.assertNotNull(dateTime83);
        org.junit.Assert.assertNotNull(dateTime86);
        org.junit.Assert.assertNotNull(dateTime87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
    }

    @Test
    @Ignore
  public void test1561() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1561");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadablePeriod readablePeriod1 = null;
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval(readableInstant0, readablePeriod1);
        mutableInterval2.setDurationBeforeEnd(1L);
        org.joda.time.MutableInterval mutableInterval5 = mutableInterval2.toMutableInterval();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutableInterval mutableInterval9 = new org.joda.time.MutableInterval(0L, 1L, chronology8);
        long long10 = mutableInterval9.toDurationMillis();
        mutableInterval2.setInterval((org.joda.time.ReadableInterval) mutableInterval9);
        org.joda.time.Duration duration12 = mutableInterval9.toDuration();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MutableInterval mutableInterval16 = new org.joda.time.MutableInterval(0L, 1L, chronology15);
        org.joda.time.Interval interval17 = mutableInterval16.toInterval();
        java.lang.Object obj18 = mutableInterval16.clone();
        org.joda.time.Interval interval19 = mutableInterval16.toInterval();
        org.joda.time.ReadableInterval readableInterval20 = null;
        boolean boolean21 = mutableInterval16.isBefore(readableInterval20);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MutableInterval mutableInterval25 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology24);
        boolean boolean26 = mutableInterval16.isAfter((org.joda.time.ReadableInterval) mutableInterval25);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MutableInterval mutableInterval30 = new org.joda.time.MutableInterval(0L, 1L, chronology29);
        org.joda.time.Interval interval31 = mutableInterval30.toInterval();
        org.joda.time.DateTime dateTime32 = mutableInterval30.getStart();
        boolean boolean33 = mutableInterval16.isBefore((org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.MutableInterval mutableInterval34 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration12, (org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.MutableInterval mutableInterval35 = new org.joda.time.MutableInterval((java.lang.Object) mutableInterval34);
        org.joda.time.Chronology chronology36 = mutableInterval35.getChronology();
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.MutableInterval mutableInterval40 = new org.joda.time.MutableInterval(0L, 1L, chronology39);
        org.joda.time.Interval interval41 = mutableInterval40.toInterval();
        java.lang.Object obj42 = mutableInterval40.clone();
        mutableInterval40.setStartMillis((long) (short) -1);
        org.joda.time.Chronology chronology45 = mutableInterval40.getChronology();
        org.joda.time.MutableInterval mutableInterval46 = mutableInterval40.toMutableInterval();
        org.joda.time.MutableInterval mutableInterval47 = mutableInterval40.copy();
        boolean boolean49 = mutableInterval47.isBefore((long) (short) -1);
        mutableInterval47.setDurationAfterStart(1606267332482L);
        org.joda.time.DateTime dateTime52 = mutableInterval47.getEnd();
        mutableInterval35.setEnd((org.joda.time.ReadableInstant) dateTime52);
        org.junit.Assert.assertNotNull(mutableInterval5);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1L + "'", long10 == 1L);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(interval17);
        org.junit.Assert.assertNotNull(obj18);
        org.junit.Assert.assertEquals(obj18.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj18), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj18), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(interval31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(interval41);
        org.junit.Assert.assertNotNull(obj42);
        org.junit.Assert.assertEquals(obj42.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj42), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj42), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(mutableInterval46);
        org.junit.Assert.assertNotNull(mutableInterval47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(dateTime52);
    }

    @Test
    public void test1562() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1562");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MutableInterval mutableInterval5 = new org.joda.time.MutableInterval(0L, 1L, chronology4);
        org.joda.time.Interval interval6 = mutableInterval5.toInterval();
        mutableInterval5.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval(0L, 1L, chronology11);
        org.joda.time.Interval interval13 = mutableInterval12.toInterval();
        mutableInterval12.setDurationAfterStart((long) (byte) 1);
        boolean boolean17 = mutableInterval12.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology18 = mutableInterval12.getChronology();
        mutableInterval5.setChronology(chronology18);
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval((long) (-1), (long) '4', chronology18);
        mutableInterval20.setDurationBeforeEnd(1606267451910L);
        org.joda.time.DateTime dateTime23 = mutableInterval20.getEnd();
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTime23);
    }

    @Test
    @Ignore
  public void test1563() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1563");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadablePeriod readablePeriod1 = null;
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval(readableInstant0, readablePeriod1);
        mutableInterval2.setDurationBeforeEnd(1L);
        org.joda.time.MutableInterval mutableInterval5 = mutableInterval2.toMutableInterval();
        org.joda.time.MutableInterval mutableInterval7 = org.joda.time.MutableInterval.parse("1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MutableInterval mutableInterval11 = new org.joda.time.MutableInterval(0L, 1L, chronology10);
        org.joda.time.Interval interval12 = mutableInterval11.toInterval();
        java.lang.Object obj13 = mutableInterval11.clone();
        org.joda.time.Interval interval14 = mutableInterval11.toInterval();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutableInterval mutableInterval18 = new org.joda.time.MutableInterval(0L, 1L, chronology17);
        org.joda.time.Interval interval19 = mutableInterval18.toInterval();
        java.lang.Object obj20 = mutableInterval18.clone();
        boolean boolean21 = interval14.isBefore((org.joda.time.ReadableInterval) mutableInterval18);
        boolean boolean22 = mutableInterval7.isAfter((org.joda.time.ReadableInterval) mutableInterval18);
        org.joda.time.MutableInterval mutableInterval23 = mutableInterval18.toMutableInterval();
        org.joda.time.PeriodType periodType24 = null;
        org.joda.time.Period period25 = mutableInterval18.toPeriod(periodType24);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MutableInterval mutableInterval29 = new org.joda.time.MutableInterval(0L, 1L, chronology28);
        org.joda.time.Interval interval30 = mutableInterval29.toInterval();
        java.lang.Object obj31 = mutableInterval29.clone();
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.MutableInterval mutableInterval33 = new org.joda.time.MutableInterval(obj31, chronology32);
        org.joda.time.DateTime dateTime34 = mutableInterval33.getEnd();
        boolean boolean35 = mutableInterval18.contains((org.joda.time.ReadableInterval) mutableInterval33);
        org.joda.time.PeriodType periodType36 = null;
        org.joda.time.Period period37 = mutableInterval18.toPeriod(periodType36);
        mutableInterval5.setPeriodAfterStart((org.joda.time.ReadablePeriod) period37);
        boolean boolean40 = mutableInterval5.isBefore(1606267425918L);
        org.junit.Assert.assertNotNull(mutableInterval5);
        org.junit.Assert.assertNotNull(mutableInterval7);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(obj13.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertNotNull(obj20);
        org.junit.Assert.assertEquals(obj20.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj20), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj20), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(mutableInterval23);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(interval30);
        org.junit.Assert.assertNotNull(obj31);
        org.junit.Assert.assertEquals(obj31.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj31), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj31), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    @Ignore
  public void test1564() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1564");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        mutableInterval3.setDurationAfterStart((long) (byte) 1);
        boolean boolean8 = mutableInterval3.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology9 = mutableInterval3.getChronology();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutableInterval mutableInterval13 = new org.joda.time.MutableInterval(0L, 1L, chronology12);
        org.joda.time.Interval interval14 = mutableInterval13.toInterval();
        java.lang.Object obj15 = mutableInterval13.clone();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MutableInterval mutableInterval17 = new org.joda.time.MutableInterval(obj15, chronology16);
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        mutableInterval17.setPeriodAfterStart(readablePeriod18);
        org.joda.time.Period period20 = mutableInterval17.toPeriod();
        mutableInterval3.setPeriodBeforeEnd((org.joda.time.ReadablePeriod) period20);
        java.lang.Object obj22 = mutableInterval3.clone();
        org.joda.time.MutableInterval mutableInterval23 = new org.joda.time.MutableInterval((java.lang.Object) mutableInterval3);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(obj15);
        org.junit.Assert.assertEquals(obj15.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj15), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj15), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertEquals(obj22.toString(), "1970-01-01T00:00:00.001Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj22), "1970-01-01T00:00:00.001Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj22), "1970-01-01T00:00:00.001Z/1970-01-01T00:00:00.001Z");
    }

    @Test
    @Ignore
  public void test1565() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1565");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        java.lang.Object obj5 = mutableInterval3.clone();
        org.joda.time.Interval interval6 = mutableInterval3.toInterval();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval(0L, 1L, chronology9);
        org.joda.time.Interval interval11 = mutableInterval10.toInterval();
        java.lang.Object obj12 = mutableInterval10.clone();
        boolean boolean13 = interval6.isBefore((org.joda.time.ReadableInterval) mutableInterval10);
        mutableInterval10.setDurationBeforeEnd((long) 10);
        // The following exception was thrown during execution in test generation
        try {
            mutableInterval10.setStartMillis(1606267417414L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(obj12);
        org.junit.Assert.assertEquals(obj12.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj12), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj12), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    @Ignore
  public void test1566() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1566");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        mutableInterval3.setDurationAfterStart((long) (byte) 1);
        org.joda.time.ReadableInstant readableInstant7 = null;
        mutableInterval3.setEnd(readableInstant7);
        mutableInterval3.setEndMillis((long) (byte) 10);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutableInterval mutableInterval14 = new org.joda.time.MutableInterval(0L, 1L, chronology13);
        org.joda.time.Interval interval15 = mutableInterval14.toInterval();
        org.joda.time.DateTime dateTime16 = mutableInterval14.getStart();
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        org.joda.time.MutableInterval mutableInterval19 = new org.joda.time.MutableInterval(readableInstant17, readablePeriod18);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.MutableInterval mutableInterval23 = new org.joda.time.MutableInterval(0L, 1L, chronology22);
        org.joda.time.Interval interval24 = mutableInterval23.toInterval();
        org.joda.time.DateTime dateTime25 = mutableInterval23.getStart();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MutableInterval mutableInterval29 = new org.joda.time.MutableInterval(0L, 1L, chronology28);
        org.joda.time.Interval interval30 = mutableInterval29.toInterval();
        org.joda.time.DateTime dateTime31 = mutableInterval29.getStart();
        mutableInterval19.setInterval((org.joda.time.ReadableInstant) dateTime25, (org.joda.time.ReadableInstant) dateTime31);
        org.joda.time.MutableInterval mutableInterval33 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime16, (org.joda.time.ReadableInstant) dateTime31);
        org.joda.time.DateTime dateTime34 = mutableInterval33.getStart();
        org.joda.time.DateTime dateTime35 = mutableInterval33.getEnd();
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.MutableInterval mutableInterval39 = new org.joda.time.MutableInterval(0L, 1L, chronology38);
        org.joda.time.Interval interval40 = mutableInterval39.toInterval();
        mutableInterval39.setDurationAfterStart((long) (byte) 1);
        boolean boolean44 = mutableInterval39.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.MutableInterval mutableInterval48 = new org.joda.time.MutableInterval(0L, 1L, chronology47);
        org.joda.time.Interval interval49 = mutableInterval48.toInterval();
        java.lang.Object obj50 = mutableInterval48.clone();
        mutableInterval48.setStartMillis((long) (short) -1);
        org.joda.time.Chronology chronology53 = mutableInterval48.getChronology();
        mutableInterval39.setChronology(chronology53);
        mutableInterval33.setChronology(chronology53);
        org.joda.time.MutableInterval mutableInterval56 = new org.joda.time.MutableInterval((java.lang.Object) mutableInterval3, chronology53);
        org.joda.time.Chronology chronology57 = mutableInterval3.getChronology();
        java.lang.Object obj58 = mutableInterval3.clone();
        java.lang.String str59 = mutableInterval3.toString();
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(interval30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(interval49);
        org.junit.Assert.assertNotNull(obj50);
        org.junit.Assert.assertEquals(obj50.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj50), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj50), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertNotNull(obj58);
        org.junit.Assert.assertEquals(obj58.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.010Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj58), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.010Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj58), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.010Z");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.010Z" + "'", str59, "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.010Z");
    }

    @Test
    @Ignore
  public void test1567() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1567");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        java.lang.Object obj5 = mutableInterval3.clone();
        org.joda.time.Interval interval6 = mutableInterval3.toInterval();
        org.joda.time.ReadableInterval readableInterval7 = null;
        boolean boolean8 = mutableInterval3.isBefore(readableInterval7);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology11);
        boolean boolean13 = mutableInterval3.isAfter((org.joda.time.ReadableInterval) mutableInterval12);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MutableInterval mutableInterval17 = new org.joda.time.MutableInterval(0L, 1L, chronology16);
        org.joda.time.Interval interval18 = mutableInterval17.toInterval();
        mutableInterval17.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MutableInterval mutableInterval24 = new org.joda.time.MutableInterval(0L, 1L, chronology23);
        org.joda.time.Interval interval25 = mutableInterval24.toInterval();
        long long26 = interval25.getEndMillis();
        boolean boolean28 = interval25.isAfter((long) (byte) 100);
        boolean boolean29 = mutableInterval17.overlaps((org.joda.time.ReadableInterval) interval25);
        mutableInterval12.setInterval((org.joda.time.ReadableInterval) interval25);
        mutableInterval12.setDurationAfterStart((long) 1);
        org.joda.time.MutableInterval mutableInterval33 = mutableInterval12.toMutableInterval();
        org.joda.time.MutableInterval mutableInterval34 = mutableInterval33.toMutableInterval();
        mutableInterval33.setDurationBeforeEnd(1606267425918L);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 1L + "'", long26 == 1L);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(mutableInterval33);
        org.junit.Assert.assertNotNull(mutableInterval34);
    }

    @Test
    public void test1568() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1568");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        boolean boolean6 = mutableInterval3.contains((long) ' ');
        org.joda.time.MutableInterval mutableInterval7 = mutableInterval3.copy();
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval(10L, (long) (short) 100);
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.MutableInterval mutableInterval13 = new org.joda.time.MutableInterval(readableDuration11, readableInstant12);
        org.joda.time.PeriodType periodType14 = null;
        org.joda.time.Period period15 = mutableInterval13.toPeriod(periodType14);
        mutableInterval10.setPeriodBeforeEnd((org.joda.time.ReadablePeriod) period15);
        mutableInterval7.setPeriodAfterStart((org.joda.time.ReadablePeriod) period15);
        org.joda.time.Interval interval18 = mutableInterval7.toInterval();
        long long19 = mutableInterval7.toDurationMillis();
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(mutableInterval7);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
    }

    @Test
    @Ignore
  public void test1569() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1569");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        java.lang.Object obj5 = mutableInterval3.clone();
        mutableInterval3.setStartMillis((long) (short) -1);
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval(readableInstant8, readablePeriod9);
        mutableInterval10.setDurationBeforeEnd(1L);
        org.joda.time.MutableInterval mutableInterval13 = mutableInterval10.toMutableInterval();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MutableInterval mutableInterval17 = new org.joda.time.MutableInterval(0L, 1L, chronology16);
        long long18 = mutableInterval17.toDurationMillis();
        mutableInterval10.setInterval((org.joda.time.ReadableInterval) mutableInterval17);
        org.joda.time.Duration duration20 = mutableInterval17.toDuration();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MutableInterval mutableInterval24 = new org.joda.time.MutableInterval(0L, 1L, chronology23);
        org.joda.time.Interval interval25 = mutableInterval24.toInterval();
        java.lang.Object obj26 = mutableInterval24.clone();
        org.joda.time.Interval interval27 = mutableInterval24.toInterval();
        org.joda.time.ReadableInterval readableInterval28 = null;
        boolean boolean29 = mutableInterval24.isBefore(readableInterval28);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.MutableInterval mutableInterval33 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology32);
        boolean boolean34 = mutableInterval24.isAfter((org.joda.time.ReadableInterval) mutableInterval33);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.MutableInterval mutableInterval38 = new org.joda.time.MutableInterval(0L, 1L, chronology37);
        org.joda.time.Interval interval39 = mutableInterval38.toInterval();
        org.joda.time.DateTime dateTime40 = mutableInterval38.getStart();
        boolean boolean41 = mutableInterval24.isBefore((org.joda.time.ReadableInstant) dateTime40);
        org.joda.time.MutableInterval mutableInterval42 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration20, (org.joda.time.ReadableInstant) dateTime40);
        boolean boolean43 = mutableInterval3.contains((org.joda.time.ReadableInstant) dateTime40);
        boolean boolean45 = mutableInterval3.contains(1606267320597L);
        mutableInterval3.setInterval((long) '#', 1606267294061L);
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.MutableInterval mutableInterval52 = new org.joda.time.MutableInterval(0L, 1L, chronology51);
        org.joda.time.Interval interval53 = mutableInterval52.toInterval();
        java.lang.Object obj54 = mutableInterval52.clone();
        org.joda.time.Interval interval55 = mutableInterval52.toInterval();
        org.joda.time.ReadableInterval readableInterval56 = null;
        boolean boolean57 = mutableInterval52.isBefore(readableInterval56);
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.MutableInterval mutableInterval61 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology60);
        boolean boolean62 = mutableInterval52.isAfter((org.joda.time.ReadableInterval) mutableInterval61);
        boolean boolean63 = mutableInterval61.isAfterNow();
        boolean boolean64 = mutableInterval3.overlaps((org.joda.time.ReadableInterval) mutableInterval61);
        java.lang.Class<?> wildcardClass65 = mutableInterval3.getClass();
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(mutableInterval13);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1L + "'", long18 == 1L);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(obj26);
        org.junit.Assert.assertEquals(obj26.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj26), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj26), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(interval39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(interval53);
        org.junit.Assert.assertNotNull(obj54);
        org.junit.Assert.assertEquals(obj54.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj54), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj54), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(wildcardClass65);
    }

    @Test
    @Ignore
  public void test1570() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1570");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        java.lang.Object obj5 = mutableInterval3.clone();
        org.joda.time.Interval interval6 = mutableInterval3.toInterval();
        org.joda.time.ReadableInterval readableInterval7 = null;
        boolean boolean8 = mutableInterval3.isBefore(readableInterval7);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology11);
        boolean boolean13 = mutableInterval3.isAfter((org.joda.time.ReadableInterval) mutableInterval12);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MutableInterval mutableInterval17 = new org.joda.time.MutableInterval(0L, 1L, chronology16);
        org.joda.time.Interval interval18 = mutableInterval17.toInterval();
        mutableInterval17.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MutableInterval mutableInterval24 = new org.joda.time.MutableInterval(0L, 1L, chronology23);
        org.joda.time.Interval interval25 = mutableInterval24.toInterval();
        long long26 = interval25.getEndMillis();
        boolean boolean28 = interval25.isAfter((long) (byte) 100);
        boolean boolean29 = mutableInterval17.overlaps((org.joda.time.ReadableInterval) interval25);
        mutableInterval12.setInterval((org.joda.time.ReadableInterval) interval25);
        mutableInterval12.setDurationAfterStart((long) 1);
        org.joda.time.MutableInterval mutableInterval33 = mutableInterval12.toMutableInterval();
        org.joda.time.MutableInterval mutableInterval34 = mutableInterval33.toMutableInterval();
        org.joda.time.DateTime dateTime35 = mutableInterval34.getStart();
        org.joda.time.DateTime dateTime36 = mutableInterval34.getStart();
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.MutableInterval mutableInterval40 = new org.joda.time.MutableInterval(0L, 1L, chronology39);
        org.joda.time.Interval interval41 = mutableInterval40.toInterval();
        java.lang.Object obj42 = mutableInterval40.clone();
        mutableInterval40.setStartMillis((long) 1);
        org.joda.time.DateTime dateTime45 = mutableInterval40.getStart();
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.MutableInterval mutableInterval49 = new org.joda.time.MutableInterval(0L, 1L, chronology48);
        long long50 = mutableInterval49.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval51 = mutableInterval49.copy();
        org.joda.time.ReadablePeriod readablePeriod52 = null;
        mutableInterval49.setPeriodAfterStart(readablePeriod52);
        java.lang.Object obj54 = mutableInterval49.clone();
        org.joda.time.PeriodType periodType55 = null;
        org.joda.time.Period period56 = mutableInterval49.toPeriod(periodType55);
        org.joda.time.MutableInterval mutableInterval57 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime45, (org.joda.time.ReadablePeriod) period56);
        org.joda.time.MutableInterval mutableInterval58 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime36, (org.joda.time.ReadablePeriod) period56);
        long long59 = mutableInterval58.getStartMillis();
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.MutableInterval mutableInterval63 = new org.joda.time.MutableInterval(0L, 1L, chronology62);
        org.joda.time.Interval interval64 = mutableInterval63.toInterval();
        java.lang.Object obj65 = mutableInterval63.clone();
        org.joda.time.Interval interval66 = mutableInterval63.toInterval();
        org.joda.time.ReadableInterval readableInterval67 = null;
        boolean boolean68 = mutableInterval63.isBefore(readableInterval67);
        org.joda.time.Chronology chronology71 = null;
        org.joda.time.MutableInterval mutableInterval72 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology71);
        boolean boolean73 = mutableInterval63.isAfter((org.joda.time.ReadableInterval) mutableInterval72);
        org.joda.time.Interval interval74 = mutableInterval63.toInterval();
        org.joda.time.Period period75 = mutableInterval63.toPeriod();
        mutableInterval58.setPeriodBeforeEnd((org.joda.time.ReadablePeriod) period75);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 1L + "'", long26 == 1L);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(mutableInterval33);
        org.junit.Assert.assertNotNull(mutableInterval34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(interval41);
        org.junit.Assert.assertNotNull(obj42);
        org.junit.Assert.assertEquals(obj42.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj42), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj42), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 1L + "'", long50 == 1L);
        org.junit.Assert.assertNotNull(mutableInterval51);
        org.junit.Assert.assertNotNull(obj54);
        org.junit.Assert.assertEquals(obj54.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj54), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj54), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertNotNull(period56);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 0L + "'", long59 == 0L);
        org.junit.Assert.assertNotNull(interval64);
        org.junit.Assert.assertNotNull(obj65);
        org.junit.Assert.assertEquals(obj65.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj65), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj65), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(interval74);
        org.junit.Assert.assertNotNull(period75);
    }

    @Test
    @Ignore
  public void test1571() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1571");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.MutableInterval mutableInterval8 = new org.joda.time.MutableInterval(readableInstant6, readablePeriod7);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval(0L, 1L, chronology11);
        org.joda.time.Interval interval13 = mutableInterval12.toInterval();
        org.joda.time.DateTime dateTime14 = mutableInterval12.getStart();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutableInterval mutableInterval18 = new org.joda.time.MutableInterval(0L, 1L, chronology17);
        org.joda.time.Interval interval19 = mutableInterval18.toInterval();
        org.joda.time.DateTime dateTime20 = mutableInterval18.getStart();
        mutableInterval8.setInterval((org.joda.time.ReadableInstant) dateTime14, (org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.MutableInterval mutableInterval22 = new org.joda.time.MutableInterval(readablePeriod5, (org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.MutableInterval mutableInterval23 = new org.joda.time.MutableInterval(readablePeriod4, (org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        org.joda.time.MutableInterval mutableInterval26 = new org.joda.time.MutableInterval(readableInstant24, readablePeriod25);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MutableInterval mutableInterval30 = new org.joda.time.MutableInterval(0L, 1L, chronology29);
        org.joda.time.Interval interval31 = mutableInterval30.toInterval();
        org.joda.time.DateTime dateTime32 = mutableInterval30.getStart();
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.MutableInterval mutableInterval36 = new org.joda.time.MutableInterval(0L, 1L, chronology35);
        org.joda.time.Interval interval37 = mutableInterval36.toInterval();
        org.joda.time.DateTime dateTime38 = mutableInterval36.getStart();
        mutableInterval26.setInterval((org.joda.time.ReadableInstant) dateTime32, (org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.MutableInterval mutableInterval40 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime14, (org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.DateTime dateTime41 = mutableInterval40.getStart();
        mutableInterval40.setInterval((long) (byte) 1, (long) (short) 1);
        boolean boolean45 = mutableInterval3.overlaps((org.joda.time.ReadableInterval) mutableInterval40);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.MutableInterval mutableInterval49 = new org.joda.time.MutableInterval(0L, 1L, chronology48);
        org.joda.time.Interval interval50 = mutableInterval49.toInterval();
        java.lang.Object obj51 = mutableInterval49.clone();
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.MutableInterval mutableInterval53 = new org.joda.time.MutableInterval(obj51, chronology52);
        org.joda.time.ReadablePeriod readablePeriod54 = null;
        mutableInterval53.setPeriodBeforeEnd(readablePeriod54);
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.MutableInterval mutableInterval59 = new org.joda.time.MutableInterval(0L, 1L, chronology58);
        org.joda.time.Interval interval60 = mutableInterval59.toInterval();
        mutableInterval59.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.MutableInterval mutableInterval66 = new org.joda.time.MutableInterval(0L, 1L, chronology65);
        org.joda.time.Interval interval67 = mutableInterval66.toInterval();
        long long68 = interval67.getEndMillis();
        boolean boolean70 = interval67.isAfter((long) (byte) 100);
        boolean boolean71 = mutableInterval59.overlaps((org.joda.time.ReadableInterval) interval67);
        org.joda.time.Duration duration72 = mutableInterval59.toDuration();
        boolean boolean73 = mutableInterval53.isBefore((org.joda.time.ReadableInterval) mutableInterval59);
        org.joda.time.MutableInterval mutableInterval74 = mutableInterval59.toMutableInterval();
        java.lang.String str75 = mutableInterval74.toString();
        java.lang.String str76 = mutableInterval74.toString();
        boolean boolean77 = mutableInterval40.isBefore((org.joda.time.ReadableInterval) mutableInterval74);
        org.joda.time.ReadableInterval readableInterval78 = null;
        boolean boolean79 = mutableInterval74.isAfter(readableInterval78);
        org.joda.time.Interval interval80 = mutableInterval74.toInterval();
        org.joda.time.MutableInterval mutableInterval81 = mutableInterval74.toMutableInterval();
        org.joda.time.ReadableInstant readableInstant82 = null;
        boolean boolean83 = mutableInterval74.isBefore(readableInstant82);
        org.joda.time.Chronology chronology84 = mutableInterval74.getChronology();
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(interval31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(interval37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(interval50);
        org.junit.Assert.assertNotNull(obj51);
        org.junit.Assert.assertEquals(obj51.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj51), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj51), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval60);
        org.junit.Assert.assertNotNull(interval67);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 1L + "'", long68 == 1L);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(duration72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(mutableInterval74);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z" + "'", str75, "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z" + "'", str76, "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(interval80);
        org.junit.Assert.assertNotNull(mutableInterval81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertNotNull(chronology84);
    }

    @Test
    public void test1572() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1572");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        mutableInterval3.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval(0L, 1L, chronology9);
        org.joda.time.Interval interval11 = mutableInterval10.toInterval();
        long long12 = interval11.getEndMillis();
        boolean boolean14 = interval11.isAfter((long) (byte) 100);
        boolean boolean15 = mutableInterval3.overlaps((org.joda.time.ReadableInterval) interval11);
        org.joda.time.Duration duration16 = mutableInterval3.toDuration();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval(0L, 1L, chronology19);
        org.joda.time.Interval interval21 = mutableInterval20.toInterval();
        org.joda.time.DateTime dateTime22 = mutableInterval20.getStart();
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.MutableInterval mutableInterval25 = new org.joda.time.MutableInterval(readableInstant23, readablePeriod24);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MutableInterval mutableInterval29 = new org.joda.time.MutableInterval(0L, 1L, chronology28);
        org.joda.time.Interval interval30 = mutableInterval29.toInterval();
        org.joda.time.DateTime dateTime31 = mutableInterval29.getStart();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MutableInterval mutableInterval35 = new org.joda.time.MutableInterval(0L, 1L, chronology34);
        org.joda.time.Interval interval36 = mutableInterval35.toInterval();
        org.joda.time.DateTime dateTime37 = mutableInterval35.getStart();
        mutableInterval25.setInterval((org.joda.time.ReadableInstant) dateTime31, (org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.MutableInterval mutableInterval39 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime22, (org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.MutableInterval mutableInterval40 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration16, (org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.MutableInterval mutableInterval44 = new org.joda.time.MutableInterval(0L, 1L, chronology43);
        org.joda.time.Interval interval45 = mutableInterval44.toInterval();
        org.joda.time.DateTime dateTime46 = mutableInterval44.getStart();
        org.joda.time.ReadableInstant readableInstant47 = null;
        org.joda.time.ReadablePeriod readablePeriod48 = null;
        org.joda.time.MutableInterval mutableInterval49 = new org.joda.time.MutableInterval(readableInstant47, readablePeriod48);
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.MutableInterval mutableInterval53 = new org.joda.time.MutableInterval(0L, 1L, chronology52);
        org.joda.time.Interval interval54 = mutableInterval53.toInterval();
        org.joda.time.DateTime dateTime55 = mutableInterval53.getStart();
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.MutableInterval mutableInterval59 = new org.joda.time.MutableInterval(0L, 1L, chronology58);
        org.joda.time.Interval interval60 = mutableInterval59.toInterval();
        org.joda.time.DateTime dateTime61 = mutableInterval59.getStart();
        mutableInterval49.setInterval((org.joda.time.ReadableInstant) dateTime55, (org.joda.time.ReadableInstant) dateTime61);
        org.joda.time.MutableInterval mutableInterval63 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime46, (org.joda.time.ReadableInstant) dateTime61);
        org.joda.time.DateTime dateTime64 = mutableInterval63.getStart();
        org.joda.time.MutableInterval mutableInterval65 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime37, (org.joda.time.ReadableInstant) dateTime64);
        org.joda.time.ReadableDuration readableDuration66 = null;
        org.joda.time.MutableInterval mutableInterval67 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime64, readableDuration66);
        long long68 = mutableInterval67.getStartMillis();
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(interval30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(interval36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(interval45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(interval54);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(interval60);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 0L + "'", long68 == 0L);
    }

    @Test
    @Ignore
  public void test1573() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1573");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        java.lang.Object obj4 = mutableInterval3.clone();
        org.junit.Assert.assertNotNull(obj4);
        org.junit.Assert.assertEquals(obj4.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj4), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj4), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
    }

    @Test
    public void test1574() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1574");
        java.lang.Object obj0 = null;
        org.joda.time.MutableInterval mutableInterval1 = new org.joda.time.MutableInterval(obj0);
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval(obj0);
    }

    @Test
    @Ignore
  public void test1575() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1575");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        java.lang.Object obj5 = mutableInterval3.clone();
        mutableInterval3.setStartMillis((long) (short) -1);
        org.joda.time.Chronology chronology8 = mutableInterval3.getChronology();
        org.joda.time.DateTime dateTime9 = mutableInterval3.getStart();
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime9);
    }

    @Test
    @Ignore
  public void test1576() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1576");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.MutableInterval mutableInterval8 = new org.joda.time.MutableInterval(readableInstant6, readablePeriod7);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval(0L, 1L, chronology11);
        org.joda.time.Interval interval13 = mutableInterval12.toInterval();
        org.joda.time.DateTime dateTime14 = mutableInterval12.getStart();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutableInterval mutableInterval18 = new org.joda.time.MutableInterval(0L, 1L, chronology17);
        org.joda.time.Interval interval19 = mutableInterval18.toInterval();
        org.joda.time.DateTime dateTime20 = mutableInterval18.getStart();
        mutableInterval8.setInterval((org.joda.time.ReadableInstant) dateTime14, (org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.MutableInterval mutableInterval22 = new org.joda.time.MutableInterval(readablePeriod5, (org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.MutableInterval mutableInterval23 = new org.joda.time.MutableInterval(readablePeriod4, (org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        org.joda.time.MutableInterval mutableInterval26 = new org.joda.time.MutableInterval(readableInstant24, readablePeriod25);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MutableInterval mutableInterval30 = new org.joda.time.MutableInterval(0L, 1L, chronology29);
        org.joda.time.Interval interval31 = mutableInterval30.toInterval();
        org.joda.time.DateTime dateTime32 = mutableInterval30.getStart();
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.MutableInterval mutableInterval36 = new org.joda.time.MutableInterval(0L, 1L, chronology35);
        org.joda.time.Interval interval37 = mutableInterval36.toInterval();
        org.joda.time.DateTime dateTime38 = mutableInterval36.getStart();
        mutableInterval26.setInterval((org.joda.time.ReadableInstant) dateTime32, (org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.MutableInterval mutableInterval40 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime14, (org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.DateTime dateTime41 = mutableInterval40.getStart();
        mutableInterval40.setInterval((long) (byte) 1, (long) (short) 1);
        boolean boolean45 = mutableInterval3.overlaps((org.joda.time.ReadableInterval) mutableInterval40);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.MutableInterval mutableInterval49 = new org.joda.time.MutableInterval(0L, 1L, chronology48);
        org.joda.time.Interval interval50 = mutableInterval49.toInterval();
        java.lang.Object obj51 = mutableInterval49.clone();
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.MutableInterval mutableInterval53 = new org.joda.time.MutableInterval(obj51, chronology52);
        org.joda.time.ReadablePeriod readablePeriod54 = null;
        mutableInterval53.setPeriodBeforeEnd(readablePeriod54);
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.MutableInterval mutableInterval59 = new org.joda.time.MutableInterval(0L, 1L, chronology58);
        org.joda.time.Interval interval60 = mutableInterval59.toInterval();
        mutableInterval59.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.MutableInterval mutableInterval66 = new org.joda.time.MutableInterval(0L, 1L, chronology65);
        org.joda.time.Interval interval67 = mutableInterval66.toInterval();
        long long68 = interval67.getEndMillis();
        boolean boolean70 = interval67.isAfter((long) (byte) 100);
        boolean boolean71 = mutableInterval59.overlaps((org.joda.time.ReadableInterval) interval67);
        org.joda.time.Duration duration72 = mutableInterval59.toDuration();
        boolean boolean73 = mutableInterval53.isBefore((org.joda.time.ReadableInterval) mutableInterval59);
        org.joda.time.MutableInterval mutableInterval74 = mutableInterval59.toMutableInterval();
        java.lang.String str75 = mutableInterval74.toString();
        java.lang.String str76 = mutableInterval74.toString();
        boolean boolean77 = mutableInterval40.isBefore((org.joda.time.ReadableInterval) mutableInterval74);
        org.joda.time.ReadableInterval readableInterval78 = null;
        boolean boolean79 = mutableInterval74.isAfter(readableInterval78);
        org.joda.time.Interval interval80 = mutableInterval74.toInterval();
        org.joda.time.MutableInterval mutableInterval81 = mutableInterval74.copy();
        long long82 = mutableInterval81.toDurationMillis();
        org.joda.time.Duration duration83 = mutableInterval81.toDuration();
        long long84 = mutableInterval81.toDurationMillis();
        boolean boolean86 = mutableInterval81.isAfter(1606267440670L);
        org.joda.time.PeriodType periodType87 = null;
        org.joda.time.Period period88 = mutableInterval81.toPeriod(periodType87);
        boolean boolean89 = mutableInterval81.containsNow();
        boolean boolean90 = mutableInterval81.isAfterNow();
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(interval31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(interval37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(interval50);
        org.junit.Assert.assertNotNull(obj51);
        org.junit.Assert.assertEquals(obj51.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj51), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj51), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval60);
        org.junit.Assert.assertNotNull(interval67);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 1L + "'", long68 == 1L);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(duration72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(mutableInterval74);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z" + "'", str75, "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z" + "'", str76, "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(interval80);
        org.junit.Assert.assertNotNull(mutableInterval81);
        org.junit.Assert.assertTrue("'" + long82 + "' != '" + 1L + "'", long82 == 1L);
        org.junit.Assert.assertNotNull(duration83);
        org.junit.Assert.assertTrue("'" + long84 + "' != '" + 1L + "'", long84 == 1L);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(period88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
    }

    @Test
    public void test1577() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1577");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        long long4 = mutableInterval3.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval5 = mutableInterval3.copy();
        org.joda.time.Period period6 = mutableInterval3.toPeriod();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval(0L, 1L, chronology9);
        org.joda.time.Interval interval11 = mutableInterval10.toInterval();
        mutableInterval10.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MutableInterval mutableInterval17 = new org.joda.time.MutableInterval(0L, 1L, chronology16);
        org.joda.time.Interval interval18 = mutableInterval17.toInterval();
        mutableInterval17.setDurationAfterStart((long) (byte) 1);
        boolean boolean22 = mutableInterval17.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology23 = mutableInterval17.getChronology();
        mutableInterval10.setChronology(chronology23);
        mutableInterval10.setEndMillis((long) '#');
        org.joda.time.Duration duration27 = mutableInterval10.toDuration();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.MutableInterval mutableInterval31 = new org.joda.time.MutableInterval(0L, 1L, chronology30);
        org.joda.time.ReadablePeriod readablePeriod32 = null;
        org.joda.time.ReadablePeriod readablePeriod33 = null;
        org.joda.time.ReadableInstant readableInstant34 = null;
        org.joda.time.ReadablePeriod readablePeriod35 = null;
        org.joda.time.MutableInterval mutableInterval36 = new org.joda.time.MutableInterval(readableInstant34, readablePeriod35);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.MutableInterval mutableInterval40 = new org.joda.time.MutableInterval(0L, 1L, chronology39);
        org.joda.time.Interval interval41 = mutableInterval40.toInterval();
        org.joda.time.DateTime dateTime42 = mutableInterval40.getStart();
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.MutableInterval mutableInterval46 = new org.joda.time.MutableInterval(0L, 1L, chronology45);
        org.joda.time.Interval interval47 = mutableInterval46.toInterval();
        org.joda.time.DateTime dateTime48 = mutableInterval46.getStart();
        mutableInterval36.setInterval((org.joda.time.ReadableInstant) dateTime42, (org.joda.time.ReadableInstant) dateTime48);
        org.joda.time.MutableInterval mutableInterval50 = new org.joda.time.MutableInterval(readablePeriod33, (org.joda.time.ReadableInstant) dateTime42);
        org.joda.time.MutableInterval mutableInterval51 = new org.joda.time.MutableInterval(readablePeriod32, (org.joda.time.ReadableInstant) dateTime42);
        org.joda.time.ReadableInstant readableInstant52 = null;
        org.joda.time.ReadablePeriod readablePeriod53 = null;
        org.joda.time.MutableInterval mutableInterval54 = new org.joda.time.MutableInterval(readableInstant52, readablePeriod53);
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.MutableInterval mutableInterval58 = new org.joda.time.MutableInterval(0L, 1L, chronology57);
        org.joda.time.Interval interval59 = mutableInterval58.toInterval();
        org.joda.time.DateTime dateTime60 = mutableInterval58.getStart();
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.MutableInterval mutableInterval64 = new org.joda.time.MutableInterval(0L, 1L, chronology63);
        org.joda.time.Interval interval65 = mutableInterval64.toInterval();
        org.joda.time.DateTime dateTime66 = mutableInterval64.getStart();
        mutableInterval54.setInterval((org.joda.time.ReadableInstant) dateTime60, (org.joda.time.ReadableInstant) dateTime66);
        org.joda.time.MutableInterval mutableInterval68 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime42, (org.joda.time.ReadableInstant) dateTime60);
        org.joda.time.DateTime dateTime69 = mutableInterval68.getStart();
        mutableInterval68.setInterval((long) (byte) 1, (long) (short) 1);
        boolean boolean73 = mutableInterval31.overlaps((org.joda.time.ReadableInterval) mutableInterval68);
        org.joda.time.ReadablePeriod readablePeriod74 = null;
        org.joda.time.Chronology chronology77 = null;
        org.joda.time.MutableInterval mutableInterval78 = new org.joda.time.MutableInterval(0L, 1L, chronology77);
        org.joda.time.Interval interval79 = mutableInterval78.toInterval();
        org.joda.time.DateTime dateTime80 = mutableInterval78.getStart();
        org.joda.time.MutableInterval mutableInterval81 = new org.joda.time.MutableInterval(readablePeriod74, (org.joda.time.ReadableInstant) dateTime80);
        mutableInterval68.setStart((org.joda.time.ReadableInstant) dateTime80);
        org.joda.time.MutableInterval mutableInterval83 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration27, (org.joda.time.ReadableInstant) dateTime80);
        org.joda.time.Period period84 = mutableInterval83.toPeriod();
        boolean boolean85 = mutableInterval3.equals((java.lang.Object) mutableInterval83);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1L + "'", long4 == 1L);
        org.junit.Assert.assertNotNull(mutableInterval5);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(interval41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(interval47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(interval59);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(interval65);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(interval79);
        org.junit.Assert.assertNotNull(dateTime80);
        org.junit.Assert.assertNotNull(period84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
    }

    @Test
    public void test1578() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1578");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        org.joda.time.MutableInterval mutableInterval5 = new org.joda.time.MutableInterval((java.lang.Object) mutableInterval3);
        // The following exception was thrown during execution in test generation
        try {
            mutableInterval5.setStartMillis(1606267522405L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(interval4);
    }

    @Test
    @Ignore
  public void test1579() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1579");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadablePeriod readablePeriod1 = null;
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval(readableInstant0, readablePeriod1);
        mutableInterval2.setDurationBeforeEnd(1L);
        org.joda.time.MutableInterval mutableInterval5 = mutableInterval2.toMutableInterval();
        org.joda.time.DateTime dateTime6 = mutableInterval5.getEnd();
        org.joda.time.MutableInterval mutableInterval7 = mutableInterval5.toMutableInterval();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MutableInterval mutableInterval11 = new org.joda.time.MutableInterval(0L, 1L, chronology10);
        org.joda.time.Interval interval12 = mutableInterval11.toInterval();
        mutableInterval11.setDurationAfterStart((long) (byte) 1);
        mutableInterval11.setDurationAfterStart((long) '#');
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval(0L, 1L, chronology19);
        org.joda.time.Interval interval21 = mutableInterval20.toInterval();
        org.joda.time.DateTime dateTime22 = mutableInterval20.getStart();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MutableInterval mutableInterval26 = new org.joda.time.MutableInterval(0L, 1L, chronology25);
        org.joda.time.Interval interval27 = mutableInterval26.toInterval();
        java.lang.Object obj28 = mutableInterval26.clone();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MutableInterval mutableInterval30 = new org.joda.time.MutableInterval(obj28, chronology29);
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        mutableInterval30.setPeriodAfterStart(readablePeriod31);
        org.joda.time.Period period33 = mutableInterval30.toPeriod();
        org.joda.time.MutableInterval mutableInterval34 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime22, (org.joda.time.ReadablePeriod) period33);
        boolean boolean35 = mutableInterval11.isBefore((org.joda.time.ReadableInstant) dateTime22);
        boolean boolean36 = mutableInterval7.contains((org.joda.time.ReadableInstant) dateTime22);
        boolean boolean38 = mutableInterval7.isBefore(1606267309568L);
        mutableInterval7.setStartMillis((long) 0);
        org.joda.time.MutableInterval mutableInterval41 = mutableInterval7.toMutableInterval();
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.MutableInterval mutableInterval45 = new org.joda.time.MutableInterval(0L, 1L, chronology44);
        org.joda.time.Interval interval46 = mutableInterval45.toInterval();
        java.lang.Object obj47 = mutableInterval45.clone();
        org.joda.time.Interval interval48 = mutableInterval45.toInterval();
        org.joda.time.ReadableInterval readableInterval49 = null;
        boolean boolean50 = mutableInterval45.isBefore(readableInterval49);
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.MutableInterval mutableInterval54 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology53);
        boolean boolean55 = mutableInterval45.isAfter((org.joda.time.ReadableInterval) mutableInterval54);
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.MutableInterval mutableInterval59 = new org.joda.time.MutableInterval(0L, 1L, chronology58);
        org.joda.time.Interval interval60 = mutableInterval59.toInterval();
        mutableInterval59.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.MutableInterval mutableInterval66 = new org.joda.time.MutableInterval(0L, 1L, chronology65);
        org.joda.time.Interval interval67 = mutableInterval66.toInterval();
        long long68 = interval67.getEndMillis();
        boolean boolean70 = interval67.isAfter((long) (byte) 100);
        boolean boolean71 = mutableInterval59.overlaps((org.joda.time.ReadableInterval) interval67);
        mutableInterval54.setInterval((org.joda.time.ReadableInterval) interval67);
        mutableInterval54.setDurationAfterStart((long) 1);
        boolean boolean75 = mutableInterval41.equals((java.lang.Object) mutableInterval54);
        org.joda.time.MutableInterval mutableInterval76 = mutableInterval54.toMutableInterval();
        org.joda.time.PeriodType periodType77 = null;
        org.joda.time.Period period78 = mutableInterval76.toPeriod(periodType77);
        boolean boolean80 = mutableInterval76.equals((java.lang.Object) 1606267355846L);
        org.junit.Assert.assertNotNull(mutableInterval5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(mutableInterval7);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertNotNull(obj28);
        org.junit.Assert.assertEquals(obj28.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj28), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj28), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(mutableInterval41);
        org.junit.Assert.assertNotNull(interval46);
        org.junit.Assert.assertNotNull(obj47);
        org.junit.Assert.assertEquals(obj47.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj47), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj47), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(interval60);
        org.junit.Assert.assertNotNull(interval67);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 1L + "'", long68 == 1L);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(mutableInterval76);
        org.junit.Assert.assertNotNull(period78);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
    }

    @Test
    public void test1580() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1580");
        org.joda.time.MutableInterval mutableInterval1 = org.joda.time.MutableInterval.parse("2020-11-25T01:22:12.425Z/2020-11-25T01:22:12.425Z");
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.MutableInterval mutableInterval8 = new org.joda.time.MutableInterval(readableInstant6, readablePeriod7);
        mutableInterval8.setDurationBeforeEnd(1L);
        org.joda.time.MutableInterval mutableInterval11 = mutableInterval8.toMutableInterval();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutableInterval mutableInterval15 = new org.joda.time.MutableInterval(0L, 1L, chronology14);
        long long16 = mutableInterval15.toDurationMillis();
        mutableInterval8.setInterval((org.joda.time.ReadableInterval) mutableInterval15);
        mutableInterval8.setDurationAfterStart(100L);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MutableInterval mutableInterval27 = new org.joda.time.MutableInterval(0L, 1L, chronology26);
        org.joda.time.Interval interval28 = mutableInterval27.toInterval();
        mutableInterval27.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.MutableInterval mutableInterval34 = new org.joda.time.MutableInterval(0L, 1L, chronology33);
        org.joda.time.Interval interval35 = mutableInterval34.toInterval();
        mutableInterval34.setDurationAfterStart((long) (byte) 1);
        boolean boolean39 = mutableInterval34.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology40 = mutableInterval34.getChronology();
        mutableInterval27.setChronology(chronology40);
        org.joda.time.MutableInterval mutableInterval42 = new org.joda.time.MutableInterval((long) (-1), (long) '4', chronology40);
        org.joda.time.MutableInterval mutableInterval43 = new org.joda.time.MutableInterval((long) (short) 1, (long) 100, chronology40);
        org.joda.time.MutableInterval mutableInterval44 = new org.joda.time.MutableInterval((java.lang.Object) mutableInterval8, chronology40);
        org.joda.time.MutableInterval mutableInterval45 = new org.joda.time.MutableInterval((long) (short) 1, (long) ' ', chronology40);
        org.joda.time.MutableInterval mutableInterval46 = new org.joda.time.MutableInterval(1606267332270L, 1606267332425L, chronology40);
        mutableInterval1.setChronology(chronology40);
        org.joda.time.ReadablePeriod readablePeriod48 = null;
        org.joda.time.ReadablePeriod readablePeriod49 = null;
        org.joda.time.ReadableInstant readableInstant50 = null;
        org.joda.time.ReadablePeriod readablePeriod51 = null;
        org.joda.time.MutableInterval mutableInterval52 = new org.joda.time.MutableInterval(readableInstant50, readablePeriod51);
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.MutableInterval mutableInterval56 = new org.joda.time.MutableInterval(0L, 1L, chronology55);
        org.joda.time.Interval interval57 = mutableInterval56.toInterval();
        org.joda.time.DateTime dateTime58 = mutableInterval56.getStart();
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.MutableInterval mutableInterval62 = new org.joda.time.MutableInterval(0L, 1L, chronology61);
        org.joda.time.Interval interval63 = mutableInterval62.toInterval();
        org.joda.time.DateTime dateTime64 = mutableInterval62.getStart();
        mutableInterval52.setInterval((org.joda.time.ReadableInstant) dateTime58, (org.joda.time.ReadableInstant) dateTime64);
        org.joda.time.MutableInterval mutableInterval66 = new org.joda.time.MutableInterval(readablePeriod49, (org.joda.time.ReadableInstant) dateTime58);
        org.joda.time.MutableInterval mutableInterval67 = new org.joda.time.MutableInterval(readablePeriod48, (org.joda.time.ReadableInstant) dateTime58);
        org.joda.time.ReadableInstant readableInstant68 = null;
        org.joda.time.ReadablePeriod readablePeriod69 = null;
        org.joda.time.MutableInterval mutableInterval70 = new org.joda.time.MutableInterval(readableInstant68, readablePeriod69);
        org.joda.time.Chronology chronology73 = null;
        org.joda.time.MutableInterval mutableInterval74 = new org.joda.time.MutableInterval(0L, 1L, chronology73);
        org.joda.time.Interval interval75 = mutableInterval74.toInterval();
        org.joda.time.DateTime dateTime76 = mutableInterval74.getStart();
        org.joda.time.Chronology chronology79 = null;
        org.joda.time.MutableInterval mutableInterval80 = new org.joda.time.MutableInterval(0L, 1L, chronology79);
        org.joda.time.Interval interval81 = mutableInterval80.toInterval();
        org.joda.time.DateTime dateTime82 = mutableInterval80.getStart();
        mutableInterval70.setInterval((org.joda.time.ReadableInstant) dateTime76, (org.joda.time.ReadableInstant) dateTime82);
        org.joda.time.MutableInterval mutableInterval84 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime58, (org.joda.time.ReadableInstant) dateTime76);
        boolean boolean85 = mutableInterval1.contains((org.joda.time.ReadableInstant) dateTime76);
        org.joda.time.Chronology chronology86 = mutableInterval1.getChronology();
        org.junit.Assert.assertNotNull(mutableInterval1);
        org.junit.Assert.assertNotNull(mutableInterval11);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 1L + "'", long16 == 1L);
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertNotNull(interval35);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(interval57);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(interval63);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(interval75);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertNotNull(interval81);
        org.junit.Assert.assertNotNull(dateTime82);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(chronology86);
    }

    @Test
    @Ignore
  public void test1581() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1581");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        org.joda.time.DateTime dateTime5 = mutableInterval3.getStart();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutableInterval mutableInterval9 = new org.joda.time.MutableInterval(0L, 1L, chronology8);
        org.joda.time.Interval interval10 = mutableInterval9.toInterval();
        java.lang.Object obj11 = mutableInterval9.clone();
        org.joda.time.Interval interval12 = mutableInterval9.toInterval();
        org.joda.time.ReadableInterval readableInterval13 = null;
        boolean boolean14 = mutableInterval9.isBefore(readableInterval13);
        org.joda.time.MutableInterval mutableInterval15 = mutableInterval9.copy();
        boolean boolean16 = mutableInterval3.contains((org.joda.time.ReadableInterval) mutableInterval9);
        mutableInterval9.setInterval((long) '#', 1606267292730L);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.MutableInterval mutableInterval23 = new org.joda.time.MutableInterval(0L, 1L, chronology22);
        org.joda.time.Interval interval24 = mutableInterval23.toInterval();
        org.joda.time.DateTime dateTime25 = mutableInterval23.getStart();
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.MutableInterval mutableInterval28 = new org.joda.time.MutableInterval(readableInstant26, readablePeriod27);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MutableInterval mutableInterval32 = new org.joda.time.MutableInterval(0L, 1L, chronology31);
        org.joda.time.Interval interval33 = mutableInterval32.toInterval();
        org.joda.time.DateTime dateTime34 = mutableInterval32.getStart();
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.MutableInterval mutableInterval38 = new org.joda.time.MutableInterval(0L, 1L, chronology37);
        org.joda.time.Interval interval39 = mutableInterval38.toInterval();
        org.joda.time.DateTime dateTime40 = mutableInterval38.getStart();
        mutableInterval28.setInterval((org.joda.time.ReadableInstant) dateTime34, (org.joda.time.ReadableInstant) dateTime40);
        org.joda.time.MutableInterval mutableInterval42 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime25, (org.joda.time.ReadableInstant) dateTime40);
        boolean boolean43 = mutableInterval9.isAfter((org.joda.time.ReadableInstant) dateTime40);
        mutableInterval9.setEndMillis(1606267319007L);
        mutableInterval9.setDurationBeforeEnd(52L);
        boolean boolean48 = mutableInterval9.containsNow();
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertEquals(obj11.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj11), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj11), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(mutableInterval15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(interval33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(interval39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
    }

    @Test
    @Ignore
  public void test1582() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1582");
        org.joda.time.ReadablePeriod readablePeriod0 = null;
        org.joda.time.ReadablePeriod readablePeriod1 = null;
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        org.joda.time.MutableInterval mutableInterval4 = new org.joda.time.MutableInterval(readableInstant2, readablePeriod3);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutableInterval mutableInterval8 = new org.joda.time.MutableInterval(0L, 1L, chronology7);
        org.joda.time.Interval interval9 = mutableInterval8.toInterval();
        org.joda.time.DateTime dateTime10 = mutableInterval8.getStart();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutableInterval mutableInterval14 = new org.joda.time.MutableInterval(0L, 1L, chronology13);
        org.joda.time.Interval interval15 = mutableInterval14.toInterval();
        org.joda.time.DateTime dateTime16 = mutableInterval14.getStart();
        mutableInterval4.setInterval((org.joda.time.ReadableInstant) dateTime10, (org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.MutableInterval mutableInterval18 = new org.joda.time.MutableInterval(readablePeriod1, (org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.MutableInterval mutableInterval19 = new org.joda.time.MutableInterval(readablePeriod0, (org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.MutableInterval mutableInterval22 = new org.joda.time.MutableInterval(readableInstant20, readablePeriod21);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MutableInterval mutableInterval26 = new org.joda.time.MutableInterval(0L, 1L, chronology25);
        org.joda.time.Interval interval27 = mutableInterval26.toInterval();
        org.joda.time.DateTime dateTime28 = mutableInterval26.getStart();
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MutableInterval mutableInterval32 = new org.joda.time.MutableInterval(0L, 1L, chronology31);
        org.joda.time.Interval interval33 = mutableInterval32.toInterval();
        org.joda.time.DateTime dateTime34 = mutableInterval32.getStart();
        mutableInterval22.setInterval((org.joda.time.ReadableInstant) dateTime28, (org.joda.time.ReadableInstant) dateTime34);
        org.joda.time.MutableInterval mutableInterval36 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime10, (org.joda.time.ReadableInstant) dateTime28);
        org.joda.time.DateTime dateTime37 = mutableInterval36.getStart();
        org.joda.time.Period period38 = mutableInterval36.toPeriod();
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.MutableInterval mutableInterval42 = new org.joda.time.MutableInterval(0L, 1L, chronology41);
        org.joda.time.Interval interval43 = mutableInterval42.toInterval();
        mutableInterval42.setDurationAfterStart((long) (byte) 1);
        boolean boolean47 = mutableInterval42.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.MutableInterval mutableInterval51 = new org.joda.time.MutableInterval(0L, 1L, chronology50);
        org.joda.time.Interval interval52 = mutableInterval51.toInterval();
        java.lang.Object obj53 = mutableInterval51.clone();
        mutableInterval51.setStartMillis((long) (short) -1);
        org.joda.time.Chronology chronology56 = mutableInterval51.getChronology();
        mutableInterval42.setChronology(chronology56);
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.MutableInterval mutableInterval61 = new org.joda.time.MutableInterval(0L, 1L, chronology60);
        org.joda.time.Interval interval62 = mutableInterval61.toInterval();
        mutableInterval61.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.MutableInterval mutableInterval68 = new org.joda.time.MutableInterval(0L, 1L, chronology67);
        org.joda.time.Interval interval69 = mutableInterval68.toInterval();
        java.lang.Object obj70 = mutableInterval68.clone();
        org.joda.time.Interval interval71 = mutableInterval68.toInterval();
        org.joda.time.ReadableInterval readableInterval72 = null;
        boolean boolean73 = mutableInterval68.isBefore(readableInterval72);
        org.joda.time.Chronology chronology76 = null;
        org.joda.time.MutableInterval mutableInterval77 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology76);
        boolean boolean78 = mutableInterval68.isAfter((org.joda.time.ReadableInterval) mutableInterval77);
        org.joda.time.Chronology chronology81 = null;
        org.joda.time.MutableInterval mutableInterval82 = new org.joda.time.MutableInterval(0L, 1L, chronology81);
        org.joda.time.Interval interval83 = mutableInterval82.toInterval();
        org.joda.time.DateTime dateTime84 = mutableInterval82.getStart();
        boolean boolean85 = mutableInterval68.isBefore((org.joda.time.ReadableInstant) dateTime84);
        boolean boolean86 = mutableInterval61.contains((org.joda.time.ReadableInstant) dateTime84);
        boolean boolean87 = mutableInterval42.isAfter((org.joda.time.ReadableInstant) dateTime84);
        org.joda.time.Interval interval88 = mutableInterval42.toInterval();
        org.joda.time.DateTime dateTime89 = interval88.getStart();
        boolean boolean90 = mutableInterval36.isBefore((org.joda.time.ReadableInstant) dateTime89);
        org.junit.Assert.assertNotNull(interval9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(interval33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(period38);
        org.junit.Assert.assertNotNull(interval43);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(interval52);
        org.junit.Assert.assertNotNull(obj53);
        org.junit.Assert.assertEquals(obj53.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj53), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj53), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(chronology56);
        org.junit.Assert.assertNotNull(interval62);
        org.junit.Assert.assertNotNull(interval69);
        org.junit.Assert.assertNotNull(obj70);
        org.junit.Assert.assertEquals(obj70.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj70), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj70), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(interval83);
        org.junit.Assert.assertNotNull(dateTime84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(interval88);
        org.junit.Assert.assertNotNull(dateTime89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
    }

    @Test
    @Ignore
  public void test1583() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1583");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadablePeriod readablePeriod1 = null;
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval(readableInstant0, readablePeriod1);
        long long3 = mutableInterval2.getEndMillis();
        org.joda.time.MutableInterval mutableInterval4 = mutableInterval2.copy();
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval(readableDuration5, readableInstant6);
        org.joda.time.PeriodType periodType8 = null;
        org.joda.time.Period period9 = mutableInterval7.toPeriod(periodType8);
        mutableInterval2.setPeriodBeforeEnd((org.joda.time.ReadablePeriod) period9);
        org.joda.time.DateTime dateTime11 = mutableInterval2.getStart();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutableInterval mutableInterval15 = new org.joda.time.MutableInterval(0L, 1L, chronology14);
        org.joda.time.Interval interval16 = mutableInterval15.toInterval();
        boolean boolean18 = mutableInterval15.contains((long) ' ');
        org.joda.time.MutableInterval mutableInterval19 = mutableInterval15.copy();
        boolean boolean20 = mutableInterval2.equals((java.lang.Object) mutableInterval19);
        org.joda.time.ReadableDuration readableDuration21 = null;
        mutableInterval2.setDurationBeforeEnd(readableDuration21);
        long long23 = mutableInterval2.getStartMillis();
        boolean boolean25 = mutableInterval2.isAfter(1606267407677L);
        boolean boolean26 = mutableInterval2.containsNow();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MutableInterval mutableInterval30 = new org.joda.time.MutableInterval(0L, 1L, chronology29);
        org.joda.time.Interval interval31 = mutableInterval30.toInterval();
        mutableInterval30.setDurationAfterStart((long) (byte) 1);
        boolean boolean35 = mutableInterval30.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology36 = mutableInterval30.getChronology();
        long long37 = mutableInterval30.getStartMillis();
        org.joda.time.Duration duration38 = mutableInterval30.toDuration();
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.MutableInterval mutableInterval42 = new org.joda.time.MutableInterval(0L, 1L, chronology41);
        org.joda.time.Interval interval43 = mutableInterval42.toInterval();
        mutableInterval42.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.MutableInterval mutableInterval49 = new org.joda.time.MutableInterval(0L, 1L, chronology48);
        org.joda.time.Interval interval50 = mutableInterval49.toInterval();
        long long51 = interval50.getEndMillis();
        boolean boolean53 = interval50.isAfter((long) (byte) 100);
        boolean boolean54 = mutableInterval42.overlaps((org.joda.time.ReadableInterval) interval50);
        org.joda.time.Duration duration55 = mutableInterval42.toDuration();
        mutableInterval30.setInterval((org.joda.time.ReadableInterval) mutableInterval42);
        long long57 = mutableInterval30.getStartMillis();
        java.lang.Object obj58 = mutableInterval30.clone();
        boolean boolean59 = mutableInterval2.contains((org.joda.time.ReadableInterval) mutableInterval30);
// flaky:         org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1606267576981L + "'", long3 == 1606267576981L);
        org.junit.Assert.assertNotNull(mutableInterval4);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(mutableInterval19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long23 + "' != '" + 1606267576981L + "'", long23 == 1606267576981L);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(interval31);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(interval43);
        org.junit.Assert.assertNotNull(interval50);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 1L + "'", long51 == 1L);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(duration55);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 0L + "'", long57 == 0L);
        org.junit.Assert.assertNotNull(obj58);
        org.junit.Assert.assertEquals(obj58.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj58), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj58), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
    }

    @Test
    @Ignore
  public void test1584() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1584");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        java.lang.Object obj5 = mutableInterval3.clone();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval(obj5, chronology6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        mutableInterval7.setPeriodBeforeEnd(readablePeriod8);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutableInterval mutableInterval13 = new org.joda.time.MutableInterval(0L, 1L, chronology12);
        org.joda.time.Interval interval14 = mutableInterval13.toInterval();
        mutableInterval13.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval(0L, 1L, chronology19);
        org.joda.time.Interval interval21 = mutableInterval20.toInterval();
        long long22 = interval21.getEndMillis();
        boolean boolean24 = interval21.isAfter((long) (byte) 100);
        boolean boolean25 = mutableInterval13.overlaps((org.joda.time.ReadableInterval) interval21);
        org.joda.time.Duration duration26 = mutableInterval13.toDuration();
        boolean boolean27 = mutableInterval7.isBefore((org.joda.time.ReadableInterval) mutableInterval13);
        org.joda.time.MutableInterval mutableInterval28 = mutableInterval13.toMutableInterval();
        java.lang.String str29 = mutableInterval28.toString();
        boolean boolean30 = mutableInterval28.containsNow();
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.MutableInterval mutableInterval34 = new org.joda.time.MutableInterval(0L, 1L, chronology33);
        org.joda.time.Interval interval35 = mutableInterval34.toInterval();
        org.joda.time.DateTime dateTime36 = mutableInterval34.getStart();
        org.joda.time.ReadableInstant readableInstant37 = null;
        org.joda.time.ReadablePeriod readablePeriod38 = null;
        org.joda.time.MutableInterval mutableInterval39 = new org.joda.time.MutableInterval(readableInstant37, readablePeriod38);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.MutableInterval mutableInterval43 = new org.joda.time.MutableInterval(0L, 1L, chronology42);
        org.joda.time.Interval interval44 = mutableInterval43.toInterval();
        org.joda.time.DateTime dateTime45 = mutableInterval43.getStart();
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.MutableInterval mutableInterval49 = new org.joda.time.MutableInterval(0L, 1L, chronology48);
        org.joda.time.Interval interval50 = mutableInterval49.toInterval();
        org.joda.time.DateTime dateTime51 = mutableInterval49.getStart();
        mutableInterval39.setInterval((org.joda.time.ReadableInstant) dateTime45, (org.joda.time.ReadableInstant) dateTime51);
        org.joda.time.MutableInterval mutableInterval53 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime36, (org.joda.time.ReadableInstant) dateTime51);
        org.joda.time.DateTime dateTime54 = mutableInterval53.getStart();
        boolean boolean55 = mutableInterval28.contains((org.joda.time.ReadableInstant) dateTime54);
        boolean boolean57 = mutableInterval28.isAfter(1606267392018L);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 1L + "'", long22 == 1L);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(mutableInterval28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z" + "'", str29, "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(interval35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(interval44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(interval50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
    }

    @Test
    @Ignore
  public void test1585() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1585");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadablePeriod readablePeriod1 = null;
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval(readableInstant0, readablePeriod1);
        long long3 = mutableInterval2.getEndMillis();
        org.joda.time.MutableInterval mutableInterval4 = mutableInterval2.copy();
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval(readableDuration5, readableInstant6);
        org.joda.time.PeriodType periodType8 = null;
        org.joda.time.Period period9 = mutableInterval7.toPeriod(periodType8);
        mutableInterval2.setPeriodBeforeEnd((org.joda.time.ReadablePeriod) period9);
        org.joda.time.DateTime dateTime11 = mutableInterval2.getStart();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutableInterval mutableInterval15 = new org.joda.time.MutableInterval(0L, 1L, chronology14);
        org.joda.time.Interval interval16 = mutableInterval15.toInterval();
        boolean boolean18 = mutableInterval15.contains((long) ' ');
        org.joda.time.MutableInterval mutableInterval19 = mutableInterval15.copy();
        boolean boolean20 = mutableInterval2.equals((java.lang.Object) mutableInterval19);
        org.joda.time.ReadableDuration readableDuration21 = null;
        mutableInterval2.setDurationBeforeEnd(readableDuration21);
        org.joda.time.ReadableInstant readableInstant23 = null;
        boolean boolean24 = mutableInterval2.isBefore(readableInstant23);
        mutableInterval2.setDurationAfterStart(1606267400951L);
        org.joda.time.ReadableInstant readableInstant27 = null;
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.MutableInterval mutableInterval29 = new org.joda.time.MutableInterval(readableInstant27, readablePeriod28);
        mutableInterval29.setDurationBeforeEnd(1L);
        org.joda.time.MutableInterval mutableInterval32 = mutableInterval29.toMutableInterval();
        org.joda.time.Period period33 = mutableInterval29.toPeriod();
        org.joda.time.ReadablePeriod readablePeriod34 = null;
        org.joda.time.ReadablePeriod readablePeriod35 = null;
        org.joda.time.ReadableInstant readableInstant36 = null;
        org.joda.time.ReadablePeriod readablePeriod37 = null;
        org.joda.time.MutableInterval mutableInterval38 = new org.joda.time.MutableInterval(readableInstant36, readablePeriod37);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.MutableInterval mutableInterval42 = new org.joda.time.MutableInterval(0L, 1L, chronology41);
        org.joda.time.Interval interval43 = mutableInterval42.toInterval();
        org.joda.time.DateTime dateTime44 = mutableInterval42.getStart();
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.MutableInterval mutableInterval48 = new org.joda.time.MutableInterval(0L, 1L, chronology47);
        org.joda.time.Interval interval49 = mutableInterval48.toInterval();
        org.joda.time.DateTime dateTime50 = mutableInterval48.getStart();
        mutableInterval38.setInterval((org.joda.time.ReadableInstant) dateTime44, (org.joda.time.ReadableInstant) dateTime50);
        org.joda.time.MutableInterval mutableInterval52 = new org.joda.time.MutableInterval(readablePeriod35, (org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.MutableInterval mutableInterval53 = new org.joda.time.MutableInterval(readablePeriod34, (org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.ReadableInstant readableInstant54 = null;
        org.joda.time.ReadablePeriod readablePeriod55 = null;
        org.joda.time.MutableInterval mutableInterval56 = new org.joda.time.MutableInterval(readableInstant54, readablePeriod55);
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.MutableInterval mutableInterval60 = new org.joda.time.MutableInterval(0L, 1L, chronology59);
        org.joda.time.Interval interval61 = mutableInterval60.toInterval();
        org.joda.time.DateTime dateTime62 = mutableInterval60.getStart();
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.MutableInterval mutableInterval66 = new org.joda.time.MutableInterval(0L, 1L, chronology65);
        org.joda.time.Interval interval67 = mutableInterval66.toInterval();
        org.joda.time.DateTime dateTime68 = mutableInterval66.getStart();
        mutableInterval56.setInterval((org.joda.time.ReadableInstant) dateTime62, (org.joda.time.ReadableInstant) dateTime68);
        org.joda.time.MutableInterval mutableInterval70 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime44, (org.joda.time.ReadableInstant) dateTime62);
        boolean boolean71 = mutableInterval29.isAfter((org.joda.time.ReadableInstant) dateTime62);
        org.joda.time.ReadableInstant readableInstant72 = null;
        org.joda.time.MutableInterval mutableInterval73 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime62, readableInstant72);
        boolean boolean74 = mutableInterval2.isAfter((org.joda.time.ReadableInterval) mutableInterval73);
        org.joda.time.MutableInterval mutableInterval76 = org.joda.time.MutableInterval.parse("1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.joda.time.Chronology chronology79 = null;
        org.joda.time.MutableInterval mutableInterval80 = new org.joda.time.MutableInterval(0L, 1L, chronology79);
        org.joda.time.Interval interval81 = mutableInterval80.toInterval();
        java.lang.Object obj82 = mutableInterval80.clone();
        org.joda.time.Interval interval83 = mutableInterval80.toInterval();
        org.joda.time.Chronology chronology86 = null;
        org.joda.time.MutableInterval mutableInterval87 = new org.joda.time.MutableInterval(0L, 1L, chronology86);
        org.joda.time.Interval interval88 = mutableInterval87.toInterval();
        java.lang.Object obj89 = mutableInterval87.clone();
        boolean boolean90 = interval83.isBefore((org.joda.time.ReadableInterval) mutableInterval87);
        boolean boolean91 = mutableInterval76.isAfter((org.joda.time.ReadableInterval) mutableInterval87);
        org.joda.time.Chronology chronology92 = mutableInterval87.getChronology();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableInterval mutableInterval93 = new org.joda.time.MutableInterval((java.lang.Object) boolean74, chronology92);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No interval converter found for type: java.lang.Boolean");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
// flaky:         org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1606267577210L + "'", long3 == 1606267577210L);
        org.junit.Assert.assertNotNull(mutableInterval4);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(mutableInterval19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(mutableInterval32);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(interval43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(interval49);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(interval61);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(interval67);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(mutableInterval76);
        org.junit.Assert.assertNotNull(interval81);
        org.junit.Assert.assertNotNull(obj82);
        org.junit.Assert.assertEquals(obj82.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj82), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj82), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval83);
        org.junit.Assert.assertNotNull(interval88);
        org.junit.Assert.assertNotNull(obj89);
        org.junit.Assert.assertEquals(obj89.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj89), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj89), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNotNull(chronology92);
    }

    @Test
    public void test1586() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1586");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        long long5 = interval4.getEndMillis();
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.MutableInterval mutableInterval8 = new org.joda.time.MutableInterval(readableInstant6, readablePeriod7);
        mutableInterval8.setDurationBeforeEnd(1L);
        org.joda.time.MutableInterval mutableInterval11 = mutableInterval8.toMutableInterval();
        boolean boolean12 = interval4.overlaps((org.joda.time.ReadableInterval) mutableInterval8);
        org.joda.time.MutableInterval mutableInterval13 = mutableInterval8.copy();
        org.joda.time.MutableInterval mutableInterval14 = mutableInterval13.toMutableInterval();
        long long15 = mutableInterval13.toDurationMillis();
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1L + "'", long5 == 1L);
        org.junit.Assert.assertNotNull(mutableInterval11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(mutableInterval13);
        org.junit.Assert.assertNotNull(mutableInterval14);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1L + "'", long15 == 1L);
    }

    @Test
    @Ignore
  public void test1587() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1587");
        org.joda.time.ReadableDuration readableDuration0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval(readableDuration0, readableInstant1);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.MutableInterval mutableInterval5 = new org.joda.time.MutableInterval(readableInstant3, readablePeriod4);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutableInterval mutableInterval9 = new org.joda.time.MutableInterval(0L, 1L, chronology8);
        org.joda.time.Interval interval10 = mutableInterval9.toInterval();
        org.joda.time.DateTime dateTime11 = mutableInterval9.getStart();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutableInterval mutableInterval15 = new org.joda.time.MutableInterval(0L, 1L, chronology14);
        org.joda.time.Interval interval16 = mutableInterval15.toInterval();
        org.joda.time.DateTime dateTime17 = mutableInterval15.getStart();
        mutableInterval5.setInterval((org.joda.time.ReadableInstant) dateTime11, (org.joda.time.ReadableInstant) dateTime17);
        boolean boolean19 = mutableInterval2.contains((org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.MutableInterval mutableInterval21 = org.joda.time.MutableInterval.parse("1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MutableInterval mutableInterval25 = new org.joda.time.MutableInterval(0L, 1L, chronology24);
        org.joda.time.Interval interval26 = mutableInterval25.toInterval();
        java.lang.Object obj27 = mutableInterval25.clone();
        org.joda.time.Interval interval28 = mutableInterval25.toInterval();
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MutableInterval mutableInterval32 = new org.joda.time.MutableInterval(0L, 1L, chronology31);
        org.joda.time.Interval interval33 = mutableInterval32.toInterval();
        java.lang.Object obj34 = mutableInterval32.clone();
        boolean boolean35 = interval28.isBefore((org.joda.time.ReadableInterval) mutableInterval32);
        boolean boolean36 = mutableInterval21.isAfter((org.joda.time.ReadableInterval) mutableInterval32);
        org.joda.time.MutableInterval mutableInterval37 = mutableInterval32.toMutableInterval();
        org.joda.time.PeriodType periodType38 = null;
        org.joda.time.Period period39 = mutableInterval32.toPeriod(periodType38);
        org.joda.time.MutableInterval mutableInterval40 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime17, (org.joda.time.ReadablePeriod) period39);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.MutableInterval mutableInterval44 = new org.joda.time.MutableInterval(0L, 1L, chronology43);
        org.joda.time.Interval interval45 = mutableInterval44.toInterval();
        org.joda.time.DateTime dateTime46 = mutableInterval44.getStart();
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.MutableInterval mutableInterval50 = new org.joda.time.MutableInterval(0L, 1L, chronology49);
        org.joda.time.Interval interval51 = mutableInterval50.toInterval();
        java.lang.Object obj52 = mutableInterval50.clone();
        org.joda.time.Interval interval53 = mutableInterval50.toInterval();
        org.joda.time.ReadableInterval readableInterval54 = null;
        boolean boolean55 = mutableInterval50.isBefore(readableInterval54);
        org.joda.time.MutableInterval mutableInterval56 = mutableInterval50.copy();
        boolean boolean57 = mutableInterval44.contains((org.joda.time.ReadableInterval) mutableInterval50);
        mutableInterval50.setInterval((long) '#', 1606267292730L);
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.MutableInterval mutableInterval64 = new org.joda.time.MutableInterval(0L, 1L, chronology63);
        org.joda.time.Interval interval65 = mutableInterval64.toInterval();
        org.joda.time.DateTime dateTime66 = mutableInterval64.getStart();
        org.joda.time.ReadableInstant readableInstant67 = null;
        org.joda.time.ReadablePeriod readablePeriod68 = null;
        org.joda.time.MutableInterval mutableInterval69 = new org.joda.time.MutableInterval(readableInstant67, readablePeriod68);
        org.joda.time.Chronology chronology72 = null;
        org.joda.time.MutableInterval mutableInterval73 = new org.joda.time.MutableInterval(0L, 1L, chronology72);
        org.joda.time.Interval interval74 = mutableInterval73.toInterval();
        org.joda.time.DateTime dateTime75 = mutableInterval73.getStart();
        org.joda.time.Chronology chronology78 = null;
        org.joda.time.MutableInterval mutableInterval79 = new org.joda.time.MutableInterval(0L, 1L, chronology78);
        org.joda.time.Interval interval80 = mutableInterval79.toInterval();
        org.joda.time.DateTime dateTime81 = mutableInterval79.getStart();
        mutableInterval69.setInterval((org.joda.time.ReadableInstant) dateTime75, (org.joda.time.ReadableInstant) dateTime81);
        org.joda.time.MutableInterval mutableInterval83 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime66, (org.joda.time.ReadableInstant) dateTime81);
        boolean boolean84 = mutableInterval50.isAfter((org.joda.time.ReadableInstant) dateTime81);
        org.joda.time.MutableInterval mutableInterval85 = new org.joda.time.MutableInterval((org.joda.time.ReadablePeriod) period39, (org.joda.time.ReadableInstant) dateTime81);
        // The following exception was thrown during execution in test generation
        try {
            mutableInterval85.setInterval(1606267539410L, 1606267537077L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(mutableInterval21);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertNotNull(obj27);
        org.junit.Assert.assertEquals(obj27.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj27), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj27), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertNotNull(interval33);
        org.junit.Assert.assertNotNull(obj34);
        org.junit.Assert.assertEquals(obj34.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj34), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj34), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(mutableInterval37);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertNotNull(interval45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(interval51);
        org.junit.Assert.assertNotNull(obj52);
        org.junit.Assert.assertEquals(obj52.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj52), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj52), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(mutableInterval56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(interval65);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(interval74);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertNotNull(interval80);
        org.junit.Assert.assertNotNull(dateTime81);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
    }

    @Test
    public void test1588() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1588");
        org.joda.time.MutableInterval mutableInterval1 = org.joda.time.MutableInterval.parse("1970-01-01T00:00:00.000Z/2020-11-25T01:24:59.386Z");
        org.junit.Assert.assertNotNull(mutableInterval1);
    }

    @Test
    public void test1589() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1589");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval(1606267461696L, 1606267383659L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    @Ignore
  public void test1590() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1590");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        mutableInterval3.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval(0L, 1L, chronology9);
        org.joda.time.Interval interval11 = mutableInterval10.toInterval();
        long long12 = interval11.getEndMillis();
        boolean boolean14 = interval11.isAfter((long) (byte) 100);
        boolean boolean15 = mutableInterval3.overlaps((org.joda.time.ReadableInterval) interval11);
        org.joda.time.Duration duration16 = mutableInterval3.toDuration();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval(0L, 1L, chronology19);
        org.joda.time.Interval interval21 = mutableInterval20.toInterval();
        org.joda.time.DateTime dateTime22 = mutableInterval20.getStart();
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.MutableInterval mutableInterval25 = new org.joda.time.MutableInterval(readableInstant23, readablePeriod24);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MutableInterval mutableInterval29 = new org.joda.time.MutableInterval(0L, 1L, chronology28);
        org.joda.time.Interval interval30 = mutableInterval29.toInterval();
        org.joda.time.DateTime dateTime31 = mutableInterval29.getStart();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MutableInterval mutableInterval35 = new org.joda.time.MutableInterval(0L, 1L, chronology34);
        org.joda.time.Interval interval36 = mutableInterval35.toInterval();
        org.joda.time.DateTime dateTime37 = mutableInterval35.getStart();
        mutableInterval25.setInterval((org.joda.time.ReadableInstant) dateTime31, (org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.MutableInterval mutableInterval39 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime22, (org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.MutableInterval mutableInterval40 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration16, (org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.MutableInterval mutableInterval44 = new org.joda.time.MutableInterval(0L, 1L, chronology43);
        org.joda.time.Interval interval45 = mutableInterval44.toInterval();
        mutableInterval44.setDurationAfterStart((long) (byte) 1);
        boolean boolean49 = mutableInterval44.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology50 = mutableInterval44.getChronology();
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.MutableInterval mutableInterval54 = new org.joda.time.MutableInterval(0L, 1L, chronology53);
        org.joda.time.Interval interval55 = mutableInterval54.toInterval();
        java.lang.Object obj56 = mutableInterval54.clone();
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.MutableInterval mutableInterval58 = new org.joda.time.MutableInterval(obj56, chronology57);
        org.joda.time.ReadablePeriod readablePeriod59 = null;
        mutableInterval58.setPeriodAfterStart(readablePeriod59);
        org.joda.time.Period period61 = mutableInterval58.toPeriod();
        mutableInterval44.setPeriodBeforeEnd((org.joda.time.ReadablePeriod) period61);
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.MutableInterval mutableInterval66 = new org.joda.time.MutableInterval(0L, 1L, chronology65);
        org.joda.time.Interval interval67 = mutableInterval66.toInterval();
        java.lang.Object obj68 = mutableInterval66.clone();
        org.joda.time.Interval interval69 = mutableInterval66.toInterval();
        org.joda.time.ReadableInterval readableInterval70 = null;
        boolean boolean71 = mutableInterval66.isBefore(readableInterval70);
        org.joda.time.Chronology chronology74 = null;
        org.joda.time.MutableInterval mutableInterval75 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology74);
        boolean boolean76 = mutableInterval66.isAfter((org.joda.time.ReadableInterval) mutableInterval75);
        org.joda.time.Chronology chronology79 = null;
        org.joda.time.MutableInterval mutableInterval80 = new org.joda.time.MutableInterval(0L, 1L, chronology79);
        org.joda.time.Interval interval81 = mutableInterval80.toInterval();
        org.joda.time.DateTime dateTime82 = mutableInterval80.getStart();
        boolean boolean83 = mutableInterval66.isBefore((org.joda.time.ReadableInstant) dateTime82);
        org.joda.time.MutableInterval mutableInterval84 = new org.joda.time.MutableInterval((org.joda.time.ReadablePeriod) period61, (org.joda.time.ReadableInstant) dateTime82);
        org.joda.time.MutableInterval mutableInterval85 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime37, (org.joda.time.ReadablePeriod) period61);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(interval30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(interval36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(interval45);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(interval55);
        org.junit.Assert.assertNotNull(obj56);
        org.junit.Assert.assertEquals(obj56.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj56), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj56), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(period61);
        org.junit.Assert.assertNotNull(interval67);
        org.junit.Assert.assertNotNull(obj68);
        org.junit.Assert.assertEquals(obj68.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj68), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj68), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(interval81);
        org.junit.Assert.assertNotNull(dateTime82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
    }

    @Test
    public void test1591() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1591");
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval(1606267340662L, 1606267431138L);
        org.joda.time.ReadableDuration readableDuration3 = null;
        mutableInterval2.setDurationBeforeEnd(readableDuration3);
    }

    @Test
    @Ignore
  public void test1592() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1592");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        org.joda.time.DateTime dateTime5 = mutableInterval3.getStart();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutableInterval mutableInterval9 = new org.joda.time.MutableInterval(0L, 1L, chronology8);
        org.joda.time.Interval interval10 = mutableInterval9.toInterval();
        java.lang.Object obj11 = mutableInterval9.clone();
        org.joda.time.Interval interval12 = mutableInterval9.toInterval();
        org.joda.time.ReadableInterval readableInterval13 = null;
        boolean boolean14 = mutableInterval9.isBefore(readableInterval13);
        org.joda.time.MutableInterval mutableInterval15 = mutableInterval9.copy();
        boolean boolean16 = mutableInterval3.contains((org.joda.time.ReadableInterval) mutableInterval9);
        org.joda.time.MutableInterval mutableInterval17 = mutableInterval9.toMutableInterval();
        org.joda.time.MutableInterval mutableInterval18 = mutableInterval9.copy();
        org.joda.time.Interval interval19 = mutableInterval18.toInterval();
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertEquals(obj11.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj11), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj11), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(mutableInterval15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(mutableInterval17);
        org.junit.Assert.assertNotNull(mutableInterval18);
        org.junit.Assert.assertNotNull(interval19);
    }

    @Test
    @Ignore
  public void test1593() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1593");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        long long4 = mutableInterval3.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval5 = mutableInterval3.copy();
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        mutableInterval3.setPeriodAfterStart(readablePeriod6);
        java.lang.Object obj8 = mutableInterval3.clone();
        org.joda.time.DateTime dateTime9 = mutableInterval3.getStart();
        long long10 = mutableInterval3.getStartMillis();
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.MutableInterval mutableInterval13 = new org.joda.time.MutableInterval(readableDuration11, readableInstant12);
        org.joda.time.PeriodType periodType14 = null;
        org.joda.time.Period period15 = mutableInterval13.toPeriod(periodType14);
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.MutableInterval mutableInterval18 = new org.joda.time.MutableInterval(readableInstant16, readablePeriod17);
        long long19 = mutableInterval18.getEndMillis();
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.MutableInterval mutableInterval22 = new org.joda.time.MutableInterval(readableInstant20, readablePeriod21);
        mutableInterval22.setDurationBeforeEnd(1L);
        org.joda.time.MutableInterval mutableInterval25 = mutableInterval22.toMutableInterval();
        org.joda.time.DateTime dateTime26 = mutableInterval25.getEnd();
        boolean boolean27 = mutableInterval18.isAfter((org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.MutableInterval mutableInterval28 = new org.joda.time.MutableInterval((org.joda.time.ReadablePeriod) period15, (org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MutableInterval mutableInterval32 = new org.joda.time.MutableInterval(0L, 1L, chronology31);
        org.joda.time.Interval interval33 = mutableInterval32.toInterval();
        java.lang.Object obj34 = mutableInterval32.clone();
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.MutableInterval mutableInterval36 = new org.joda.time.MutableInterval(obj34, chronology35);
        org.joda.time.ReadablePeriod readablePeriod37 = null;
        mutableInterval36.setPeriodAfterStart(readablePeriod37);
        org.joda.time.Period period39 = mutableInterval36.toPeriod();
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.MutableInterval mutableInterval43 = new org.joda.time.MutableInterval(0L, 1L, chronology42);
        org.joda.time.Interval interval44 = mutableInterval43.toInterval();
        java.lang.Object obj45 = mutableInterval43.clone();
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.MutableInterval mutableInterval47 = new org.joda.time.MutableInterval(obj45, chronology46);
        org.joda.time.ReadablePeriod readablePeriod48 = null;
        mutableInterval47.setPeriodAfterStart(readablePeriod48);
        org.joda.time.Period period50 = mutableInterval47.toPeriod();
        mutableInterval36.setPeriodAfterStart((org.joda.time.ReadablePeriod) period50);
        org.joda.time.MutableInterval mutableInterval52 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime26, (org.joda.time.ReadablePeriod) period50);
        mutableInterval3.setPeriodAfterStart((org.joda.time.ReadablePeriod) period50);
        org.joda.time.PeriodType periodType54 = null;
        org.joda.time.Period period55 = mutableInterval3.toPeriod(periodType54);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1L + "'", long4 == 1L);
        org.junit.Assert.assertNotNull(mutableInterval5);
        org.junit.Assert.assertNotNull(obj8);
        org.junit.Assert.assertEquals(obj8.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj8), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj8), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(period15);
// flaky:         org.junit.Assert.assertTrue("'" + long19 + "' != '" + 1606267578006L + "'", long19 == 1606267578006L);
        org.junit.Assert.assertNotNull(mutableInterval25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(interval33);
        org.junit.Assert.assertNotNull(obj34);
        org.junit.Assert.assertEquals(obj34.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj34), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj34), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertNotNull(interval44);
        org.junit.Assert.assertNotNull(obj45);
        org.junit.Assert.assertEquals(obj45.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj45), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj45), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(period50);
        org.junit.Assert.assertNotNull(period55);
    }

    @Test
    public void test1594() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1594");
        org.joda.time.MutableInterval mutableInterval1 = org.joda.time.MutableInterval.parse("1969-12-31T23:59:59.999Z/1969-12-31T23:59:59.999Z");
        java.lang.Class<?> wildcardClass2 = mutableInterval1.getClass();
        org.junit.Assert.assertNotNull(mutableInterval1);
        org.junit.Assert.assertNotNull(wildcardClass2);
    }

    @Test
    @Ignore
  public void test1595() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1595");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        java.lang.Object obj5 = mutableInterval3.clone();
        java.lang.Object obj6 = mutableInterval3.clone();
        org.joda.time.MutableInterval mutableInterval7 = mutableInterval3.copy();
        org.joda.time.MutableInterval mutableInterval8 = mutableInterval7.toMutableInterval();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval(0L, 1L, chronology11);
        org.joda.time.Interval interval13 = mutableInterval12.toInterval();
        mutableInterval12.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.MutableInterval mutableInterval19 = new org.joda.time.MutableInterval(0L, 1L, chronology18);
        org.joda.time.Interval interval20 = mutableInterval19.toInterval();
        mutableInterval19.setDurationAfterStart((long) (byte) 1);
        boolean boolean24 = mutableInterval19.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology25 = mutableInterval19.getChronology();
        mutableInterval12.setChronology(chronology25);
        mutableInterval12.setEndMillis((long) '#');
        org.joda.time.Duration duration29 = mutableInterval12.toDuration();
        org.joda.time.ReadableDuration readableDuration30 = null;
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.MutableInterval mutableInterval32 = new org.joda.time.MutableInterval(readableDuration30, readableInstant31);
        org.joda.time.ReadableInstant readableInstant33 = null;
        org.joda.time.ReadablePeriod readablePeriod34 = null;
        org.joda.time.MutableInterval mutableInterval35 = new org.joda.time.MutableInterval(readableInstant33, readablePeriod34);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.MutableInterval mutableInterval39 = new org.joda.time.MutableInterval(0L, 1L, chronology38);
        org.joda.time.Interval interval40 = mutableInterval39.toInterval();
        org.joda.time.DateTime dateTime41 = mutableInterval39.getStart();
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.MutableInterval mutableInterval45 = new org.joda.time.MutableInterval(0L, 1L, chronology44);
        org.joda.time.Interval interval46 = mutableInterval45.toInterval();
        org.joda.time.DateTime dateTime47 = mutableInterval45.getStart();
        mutableInterval35.setInterval((org.joda.time.ReadableInstant) dateTime41, (org.joda.time.ReadableInstant) dateTime47);
        boolean boolean49 = mutableInterval32.contains((org.joda.time.ReadableInstant) dateTime47);
        org.joda.time.MutableInterval mutableInterval51 = org.joda.time.MutableInterval.parse("1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.MutableInterval mutableInterval55 = new org.joda.time.MutableInterval(0L, 1L, chronology54);
        org.joda.time.Interval interval56 = mutableInterval55.toInterval();
        java.lang.Object obj57 = mutableInterval55.clone();
        org.joda.time.Interval interval58 = mutableInterval55.toInterval();
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.MutableInterval mutableInterval62 = new org.joda.time.MutableInterval(0L, 1L, chronology61);
        org.joda.time.Interval interval63 = mutableInterval62.toInterval();
        java.lang.Object obj64 = mutableInterval62.clone();
        boolean boolean65 = interval58.isBefore((org.joda.time.ReadableInterval) mutableInterval62);
        boolean boolean66 = mutableInterval51.isAfter((org.joda.time.ReadableInterval) mutableInterval62);
        org.joda.time.MutableInterval mutableInterval67 = mutableInterval62.toMutableInterval();
        org.joda.time.PeriodType periodType68 = null;
        org.joda.time.Period period69 = mutableInterval62.toPeriod(periodType68);
        org.joda.time.MutableInterval mutableInterval70 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime47, (org.joda.time.ReadablePeriod) period69);
        org.joda.time.MutableInterval mutableInterval71 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration29, (org.joda.time.ReadableInstant) dateTime47);
        boolean boolean72 = mutableInterval7.isBefore((org.joda.time.ReadableInstant) dateTime47);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertEquals(obj6.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(mutableInterval7);
        org.junit.Assert.assertNotNull(mutableInterval8);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(interval20);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(interval46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(mutableInterval51);
        org.junit.Assert.assertNotNull(interval56);
        org.junit.Assert.assertNotNull(obj57);
        org.junit.Assert.assertEquals(obj57.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj57), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj57), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval58);
        org.junit.Assert.assertNotNull(interval63);
        org.junit.Assert.assertNotNull(obj64);
        org.junit.Assert.assertEquals(obj64.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj64), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj64), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(mutableInterval67);
        org.junit.Assert.assertNotNull(period69);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
    }

    @Test
    @Ignore
  public void test1596() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1596");
        org.joda.time.MutableInterval mutableInterval1 = org.joda.time.MutableInterval.parse("2020-11-25T01:22:00.162Z/2020-11-25T01:22:00.163Z");
        org.joda.time.MutableInterval mutableInterval2 = mutableInterval1.toMutableInterval();
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.MutableInterval mutableInterval5 = new org.joda.time.MutableInterval(readableInstant3, readablePeriod4);
        mutableInterval5.setDurationBeforeEnd(1L);
        org.joda.time.MutableInterval mutableInterval8 = mutableInterval5.toMutableInterval();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval(0L, 1L, chronology11);
        long long13 = mutableInterval12.toDurationMillis();
        mutableInterval5.setInterval((org.joda.time.ReadableInterval) mutableInterval12);
        org.joda.time.Duration duration15 = mutableInterval12.toDuration();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.MutableInterval mutableInterval19 = new org.joda.time.MutableInterval(0L, 1L, chronology18);
        org.joda.time.Interval interval20 = mutableInterval19.toInterval();
        java.lang.Object obj21 = mutableInterval19.clone();
        org.joda.time.Interval interval22 = mutableInterval19.toInterval();
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        mutableInterval19.setPeriodAfterStart(readablePeriod23);
        mutableInterval19.setEndMillis((long) 100);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MutableInterval mutableInterval30 = new org.joda.time.MutableInterval(0L, 1L, chronology29);
        org.joda.time.Interval interval31 = mutableInterval30.toInterval();
        mutableInterval30.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.MutableInterval mutableInterval37 = new org.joda.time.MutableInterval(0L, 1L, chronology36);
        org.joda.time.Interval interval38 = mutableInterval37.toInterval();
        java.lang.Object obj39 = mutableInterval37.clone();
        org.joda.time.Interval interval40 = mutableInterval37.toInterval();
        org.joda.time.ReadableInterval readableInterval41 = null;
        boolean boolean42 = mutableInterval37.isBefore(readableInterval41);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.MutableInterval mutableInterval46 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology45);
        boolean boolean47 = mutableInterval37.isAfter((org.joda.time.ReadableInterval) mutableInterval46);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.MutableInterval mutableInterval51 = new org.joda.time.MutableInterval(0L, 1L, chronology50);
        org.joda.time.Interval interval52 = mutableInterval51.toInterval();
        org.joda.time.DateTime dateTime53 = mutableInterval51.getStart();
        boolean boolean54 = mutableInterval37.isBefore((org.joda.time.ReadableInstant) dateTime53);
        boolean boolean55 = mutableInterval30.contains((org.joda.time.ReadableInstant) dateTime53);
        boolean boolean56 = mutableInterval19.isBefore((org.joda.time.ReadableInstant) dateTime53);
        org.joda.time.MutableInterval mutableInterval57 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration15, (org.joda.time.ReadableInstant) dateTime53);
        boolean boolean58 = mutableInterval1.contains((org.joda.time.ReadableInstant) dateTime53);
        org.joda.time.MutableInterval mutableInterval59 = mutableInterval1.toMutableInterval();
        boolean boolean61 = mutableInterval1.contains((long) ' ');
        org.junit.Assert.assertNotNull(mutableInterval1);
        org.junit.Assert.assertNotNull(mutableInterval2);
        org.junit.Assert.assertNotNull(mutableInterval8);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1L + "'", long13 == 1L);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(interval20);
        org.junit.Assert.assertNotNull(obj21);
        org.junit.Assert.assertEquals(obj21.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj21), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj21), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertNotNull(interval31);
        org.junit.Assert.assertNotNull(interval38);
        org.junit.Assert.assertNotNull(obj39);
        org.junit.Assert.assertEquals(obj39.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj39), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj39), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(interval52);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(mutableInterval59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
    }

    @Test
    public void test1597() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1597");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MutableInterval mutableInterval5 = new org.joda.time.MutableInterval(0L, 1L, chronology4);
        org.joda.time.Interval interval6 = mutableInterval5.toInterval();
        mutableInterval5.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval(0L, 1L, chronology11);
        org.joda.time.Interval interval13 = mutableInterval12.toInterval();
        mutableInterval12.setDurationAfterStart((long) (byte) 1);
        boolean boolean17 = mutableInterval12.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology18 = mutableInterval12.getChronology();
        mutableInterval5.setChronology(chronology18);
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval((long) '4', (long) 'a', chronology18);
        boolean boolean21 = mutableInterval20.isBeforeNow();
        org.joda.time.DateTime dateTime22 = mutableInterval20.getEnd();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MutableInterval mutableInterval26 = new org.joda.time.MutableInterval(0L, 1L, chronology25);
        org.joda.time.Interval interval27 = mutableInterval26.toInterval();
        mutableInterval26.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.MutableInterval mutableInterval33 = new org.joda.time.MutableInterval(0L, 1L, chronology32);
        org.joda.time.Interval interval34 = mutableInterval33.toInterval();
        long long35 = interval34.getEndMillis();
        boolean boolean37 = interval34.isAfter((long) (byte) 100);
        boolean boolean38 = mutableInterval26.overlaps((org.joda.time.ReadableInterval) interval34);
        org.joda.time.Duration duration39 = mutableInterval26.toDuration();
        org.joda.time.ReadableInstant readableInstant40 = null;
        org.joda.time.ReadablePeriod readablePeriod41 = null;
        org.joda.time.MutableInterval mutableInterval42 = new org.joda.time.MutableInterval(readableInstant40, readablePeriod41);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.MutableInterval mutableInterval46 = new org.joda.time.MutableInterval(0L, 1L, chronology45);
        org.joda.time.Interval interval47 = mutableInterval46.toInterval();
        org.joda.time.DateTime dateTime48 = mutableInterval46.getStart();
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.MutableInterval mutableInterval52 = new org.joda.time.MutableInterval(0L, 1L, chronology51);
        org.joda.time.Interval interval53 = mutableInterval52.toInterval();
        org.joda.time.DateTime dateTime54 = mutableInterval52.getStart();
        mutableInterval42.setInterval((org.joda.time.ReadableInstant) dateTime48, (org.joda.time.ReadableInstant) dateTime54);
        org.joda.time.MutableInterval mutableInterval56 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration39, (org.joda.time.ReadableInstant) dateTime54);
        org.joda.time.MutableInterval mutableInterval57 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime22, (org.joda.time.ReadableDuration) duration39);
        org.joda.time.ReadableInstant readableInstant58 = null;
        org.joda.time.ReadablePeriod readablePeriod59 = null;
        org.joda.time.MutableInterval mutableInterval60 = new org.joda.time.MutableInterval(readableInstant58, readablePeriod59);
        long long61 = mutableInterval60.getEndMillis();
        org.joda.time.MutableInterval mutableInterval62 = mutableInterval60.copy();
        org.joda.time.ReadableDuration readableDuration63 = null;
        org.joda.time.ReadableInstant readableInstant64 = null;
        org.joda.time.MutableInterval mutableInterval65 = new org.joda.time.MutableInterval(readableDuration63, readableInstant64);
        org.joda.time.PeriodType periodType66 = null;
        org.joda.time.Period period67 = mutableInterval65.toPeriod(periodType66);
        mutableInterval60.setPeriodBeforeEnd((org.joda.time.ReadablePeriod) period67);
        org.joda.time.DateTime dateTime69 = mutableInterval60.getStart();
        org.joda.time.MutableInterval mutableInterval70 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration39, (org.joda.time.ReadableInstant) dateTime69);
        mutableInterval70.setStartMillis(1606267417828L);
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertNotNull(interval34);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 1L + "'", long35 == 1L);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertNotNull(interval47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(interval53);
        org.junit.Assert.assertNotNull(dateTime54);
// flaky:         org.junit.Assert.assertTrue("'" + long61 + "' != '" + 1606267578486L + "'", long61 == 1606267578486L);
        org.junit.Assert.assertNotNull(mutableInterval62);
        org.junit.Assert.assertNotNull(period67);
        org.junit.Assert.assertNotNull(dateTime69);
    }

    @Test
    @Ignore
  public void test1598() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1598");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        java.lang.Object obj5 = mutableInterval3.clone();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval(obj5, chronology6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        mutableInterval7.setPeriodBeforeEnd(readablePeriod8);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutableInterval mutableInterval13 = new org.joda.time.MutableInterval(0L, 1L, chronology12);
        org.joda.time.Interval interval14 = mutableInterval13.toInterval();
        mutableInterval13.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval(0L, 1L, chronology19);
        org.joda.time.Interval interval21 = mutableInterval20.toInterval();
        long long22 = interval21.getEndMillis();
        boolean boolean24 = interval21.isAfter((long) (byte) 100);
        boolean boolean25 = mutableInterval13.overlaps((org.joda.time.ReadableInterval) interval21);
        org.joda.time.Duration duration26 = mutableInterval13.toDuration();
        boolean boolean27 = mutableInterval7.isBefore((org.joda.time.ReadableInterval) mutableInterval13);
        org.joda.time.MutableInterval mutableInterval28 = mutableInterval13.toMutableInterval();
        java.lang.String str29 = mutableInterval28.toString();
        org.joda.time.MutableInterval mutableInterval30 = new org.joda.time.MutableInterval((java.lang.Object) str29);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.MutableInterval mutableInterval34 = new org.joda.time.MutableInterval(0L, 1L, chronology33);
        org.joda.time.Interval interval35 = mutableInterval34.toInterval();
        org.joda.time.DateTime dateTime36 = mutableInterval34.getStart();
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.MutableInterval mutableInterval40 = new org.joda.time.MutableInterval(0L, 1L, chronology39);
        org.joda.time.Interval interval41 = mutableInterval40.toInterval();
        java.lang.Object obj42 = mutableInterval40.clone();
        org.joda.time.Interval interval43 = mutableInterval40.toInterval();
        org.joda.time.ReadableInterval readableInterval44 = null;
        boolean boolean45 = mutableInterval40.isBefore(readableInterval44);
        org.joda.time.MutableInterval mutableInterval46 = mutableInterval40.copy();
        boolean boolean47 = mutableInterval34.contains((org.joda.time.ReadableInterval) mutableInterval40);
        mutableInterval40.setInterval((long) '#', 1606267292730L);
        org.joda.time.Chronology chronology51 = mutableInterval40.getChronology();
        long long52 = mutableInterval40.toDurationMillis();
        mutableInterval40.setDurationAfterStart(1606267339733L);
        org.joda.time.ReadableInstant readableInstant55 = null;
        org.joda.time.ReadablePeriod readablePeriod56 = null;
        org.joda.time.MutableInterval mutableInterval57 = new org.joda.time.MutableInterval(readableInstant55, readablePeriod56);
        mutableInterval57.setDurationBeforeEnd(1L);
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.MutableInterval mutableInterval63 = new org.joda.time.MutableInterval(0L, 1L, chronology62);
        org.joda.time.Interval interval64 = mutableInterval63.toInterval();
        java.lang.Object obj65 = mutableInterval63.clone();
        mutableInterval63.setStartMillis((long) (short) -1);
        org.joda.time.Chronology chronology68 = mutableInterval63.getChronology();
        mutableInterval57.setChronology(chronology68);
        mutableInterval40.setChronology(chronology68);
        boolean boolean71 = mutableInterval30.isBefore((org.joda.time.ReadableInterval) mutableInterval40);
        org.joda.time.Chronology chronology72 = mutableInterval40.getChronology();
        org.joda.time.DateTime dateTime73 = mutableInterval40.getEnd();
        mutableInterval40.setStartMillis((long) (short) 0);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 1L + "'", long22 == 1L);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(mutableInterval28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z" + "'", str29, "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(interval41);
        org.junit.Assert.assertNotNull(obj42);
        org.junit.Assert.assertEquals(obj42.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj42), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj42), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(mutableInterval46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 1606267292695L + "'", long52 == 1606267292695L);
        org.junit.Assert.assertNotNull(interval64);
        org.junit.Assert.assertNotNull(obj65);
        org.junit.Assert.assertEquals(obj65.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj65), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj65), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(chronology68);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(chronology72);
        org.junit.Assert.assertNotNull(dateTime73);
    }

    @Test
    public void test1599() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1599");
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval((long) (byte) 0, (long) (short) 100);
        mutableInterval2.setDurationAfterStart(1606267294061L);
        org.joda.time.MutableInterval mutableInterval5 = mutableInterval2.copy();
        org.joda.time.DateTime dateTime6 = mutableInterval5.getEnd();
        org.junit.Assert.assertNotNull(mutableInterval5);
        org.junit.Assert.assertNotNull(dateTime6);
    }

    @Test
    @Ignore
  public void test1600() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1600");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        org.joda.time.ReadableInterval readableInterval5 = null;
        boolean boolean6 = mutableInterval3.isAfter(readableInterval5);
        boolean boolean8 = mutableInterval3.isBefore(1606267316350L);
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.MutableInterval mutableInterval11 = new org.joda.time.MutableInterval(readableInstant9, readablePeriod10);
        mutableInterval11.setDurationBeforeEnd(1L);
        org.joda.time.MutableInterval mutableInterval14 = mutableInterval11.toMutableInterval();
        org.joda.time.Period period15 = mutableInterval11.toPeriod();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.MutableInterval mutableInterval19 = new org.joda.time.MutableInterval(0L, 1L, chronology18);
        org.joda.time.Interval interval20 = mutableInterval19.toInterval();
        mutableInterval19.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MutableInterval mutableInterval26 = new org.joda.time.MutableInterval(0L, 1L, chronology25);
        org.joda.time.Interval interval27 = mutableInterval26.toInterval();
        java.lang.Object obj28 = mutableInterval26.clone();
        org.joda.time.Interval interval29 = mutableInterval26.toInterval();
        org.joda.time.ReadableInterval readableInterval30 = null;
        boolean boolean31 = mutableInterval26.isBefore(readableInterval30);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MutableInterval mutableInterval35 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology34);
        boolean boolean36 = mutableInterval26.isAfter((org.joda.time.ReadableInterval) mutableInterval35);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.MutableInterval mutableInterval40 = new org.joda.time.MutableInterval(0L, 1L, chronology39);
        org.joda.time.Interval interval41 = mutableInterval40.toInterval();
        org.joda.time.DateTime dateTime42 = mutableInterval40.getStart();
        boolean boolean43 = mutableInterval26.isBefore((org.joda.time.ReadableInstant) dateTime42);
        boolean boolean44 = mutableInterval19.contains((org.joda.time.ReadableInstant) dateTime42);
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.MutableInterval mutableInterval48 = new org.joda.time.MutableInterval(0L, 1L, chronology47);
        org.joda.time.Interval interval49 = mutableInterval48.toInterval();
        java.lang.Object obj50 = mutableInterval48.clone();
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.MutableInterval mutableInterval52 = new org.joda.time.MutableInterval(obj50, chronology51);
        org.joda.time.ReadablePeriod readablePeriod53 = null;
        mutableInterval52.setPeriodAfterStart(readablePeriod53);
        org.joda.time.Period period55 = mutableInterval52.toPeriod();
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.MutableInterval mutableInterval59 = new org.joda.time.MutableInterval(0L, 1L, chronology58);
        org.joda.time.Interval interval60 = mutableInterval59.toInterval();
        java.lang.Object obj61 = mutableInterval59.clone();
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.MutableInterval mutableInterval63 = new org.joda.time.MutableInterval(obj61, chronology62);
        org.joda.time.ReadablePeriod readablePeriod64 = null;
        mutableInterval63.setPeriodAfterStart(readablePeriod64);
        org.joda.time.Period period66 = mutableInterval63.toPeriod();
        mutableInterval52.setPeriodAfterStart((org.joda.time.ReadablePeriod) period66);
        org.joda.time.MutableInterval mutableInterval68 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime42, (org.joda.time.ReadablePeriod) period66);
        boolean boolean69 = mutableInterval11.contains((org.joda.time.ReadableInstant) dateTime42);
        org.joda.time.Chronology chronology72 = null;
        org.joda.time.MutableInterval mutableInterval73 = new org.joda.time.MutableInterval(0L, 1L, chronology72);
        org.joda.time.Interval interval74 = mutableInterval73.toInterval();
        java.lang.Object obj75 = mutableInterval73.clone();
        org.joda.time.Chronology chronology76 = null;
        org.joda.time.MutableInterval mutableInterval77 = new org.joda.time.MutableInterval(obj75, chronology76);
        org.joda.time.Duration duration78 = mutableInterval77.toDuration();
        org.joda.time.MutableInterval mutableInterval79 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime42, (org.joda.time.ReadableDuration) duration78);
        mutableInterval3.setStart((org.joda.time.ReadableInstant) dateTime42);
        org.joda.time.MutableInterval mutableInterval81 = mutableInterval3.copy();
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(mutableInterval14);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(interval20);
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertNotNull(obj28);
        org.junit.Assert.assertEquals(obj28.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj28), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj28), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(interval41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(interval49);
        org.junit.Assert.assertNotNull(obj50);
        org.junit.Assert.assertEquals(obj50.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj50), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj50), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(period55);
        org.junit.Assert.assertNotNull(interval60);
        org.junit.Assert.assertNotNull(obj61);
        org.junit.Assert.assertEquals(obj61.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj61), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj61), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(period66);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(interval74);
        org.junit.Assert.assertNotNull(obj75);
        org.junit.Assert.assertEquals(obj75.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj75), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj75), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(duration78);
        org.junit.Assert.assertNotNull(mutableInterval81);
    }

    @Test
    public void test1601() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1601");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        mutableInterval3.setPeriodBeforeEnd(readablePeriod4);
        mutableInterval3.setStartMillis((-1L));
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval(readableInstant8, readablePeriod9);
        long long11 = mutableInterval10.getEndMillis();
        boolean boolean12 = mutableInterval3.overlaps((org.joda.time.ReadableInterval) mutableInterval10);
        boolean boolean13 = mutableInterval10.isAfterNow();
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.MutableInterval mutableInterval16 = new org.joda.time.MutableInterval(readableInstant14, readablePeriod15);
        mutableInterval16.setDurationBeforeEnd(1L);
        org.joda.time.MutableInterval mutableInterval19 = mutableInterval16.toMutableInterval();
        org.joda.time.DateTime dateTime20 = mutableInterval19.getEnd();
        org.joda.time.MutableInterval mutableInterval21 = mutableInterval19.toMutableInterval();
        boolean boolean22 = mutableInterval10.equals((java.lang.Object) mutableInterval19);
        boolean boolean23 = mutableInterval19.containsNow();
// flaky:         org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1606267578998L + "'", long11 == 1606267578998L);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(mutableInterval19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(mutableInterval21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    @Ignore
  public void test1602() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1602");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadablePeriod readablePeriod1 = null;
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval(readableInstant0, readablePeriod1);
        mutableInterval2.setDurationBeforeEnd(1L);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutableInterval mutableInterval8 = new org.joda.time.MutableInterval(0L, 1L, chronology7);
        org.joda.time.Interval interval9 = mutableInterval8.toInterval();
        java.lang.Object obj10 = mutableInterval8.clone();
        mutableInterval8.setStartMillis((long) (short) -1);
        org.joda.time.Chronology chronology13 = mutableInterval8.getChronology();
        mutableInterval2.setChronology(chronology13);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.MutableInterval mutableInterval22 = new org.joda.time.MutableInterval(0L, 1L, chronology21);
        org.joda.time.Interval interval23 = mutableInterval22.toInterval();
        java.lang.Object obj24 = mutableInterval22.clone();
        mutableInterval22.setStartMillis((long) (short) -1);
        org.joda.time.Chronology chronology27 = mutableInterval22.getChronology();
        org.joda.time.MutableInterval mutableInterval28 = mutableInterval22.toMutableInterval();
        org.joda.time.MutableInterval mutableInterval29 = mutableInterval22.copy();
        org.joda.time.Duration duration30 = mutableInterval22.toDuration();
        org.joda.time.ReadableInstant readableInstant33 = null;
        org.joda.time.ReadablePeriod readablePeriod34 = null;
        org.joda.time.MutableInterval mutableInterval35 = new org.joda.time.MutableInterval(readableInstant33, readablePeriod34);
        mutableInterval35.setDurationBeforeEnd(1L);
        org.joda.time.MutableInterval mutableInterval38 = mutableInterval35.toMutableInterval();
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.MutableInterval mutableInterval42 = new org.joda.time.MutableInterval(0L, 1L, chronology41);
        long long43 = mutableInterval42.toDurationMillis();
        mutableInterval35.setInterval((org.joda.time.ReadableInterval) mutableInterval42);
        mutableInterval35.setDurationAfterStart(100L);
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.MutableInterval mutableInterval54 = new org.joda.time.MutableInterval(0L, 1L, chronology53);
        org.joda.time.Interval interval55 = mutableInterval54.toInterval();
        mutableInterval54.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.MutableInterval mutableInterval61 = new org.joda.time.MutableInterval(0L, 1L, chronology60);
        org.joda.time.Interval interval62 = mutableInterval61.toInterval();
        mutableInterval61.setDurationAfterStart((long) (byte) 1);
        boolean boolean66 = mutableInterval61.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology67 = mutableInterval61.getChronology();
        mutableInterval54.setChronology(chronology67);
        org.joda.time.MutableInterval mutableInterval69 = new org.joda.time.MutableInterval((long) (-1), (long) '4', chronology67);
        org.joda.time.MutableInterval mutableInterval70 = new org.joda.time.MutableInterval((long) (short) 1, (long) 100, chronology67);
        org.joda.time.MutableInterval mutableInterval71 = new org.joda.time.MutableInterval((java.lang.Object) mutableInterval35, chronology67);
        org.joda.time.MutableInterval mutableInterval72 = new org.joda.time.MutableInterval((long) (short) 1, (long) ' ', chronology67);
        mutableInterval22.setChronology(chronology67);
        org.joda.time.MutableInterval mutableInterval74 = new org.joda.time.MutableInterval((long) (short) 0, 1606267316350L, chronology67);
        org.joda.time.MutableInterval mutableInterval75 = new org.joda.time.MutableInterval(10L, 1606267304978L, chronology67);
        org.joda.time.MutableInterval mutableInterval76 = new org.joda.time.MutableInterval((java.lang.Object) mutableInterval2, chronology67);
        org.junit.Assert.assertNotNull(interval9);
        org.junit.Assert.assertNotNull(obj10);
        org.junit.Assert.assertEquals(obj10.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj10), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj10), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertNotNull(obj24);
        org.junit.Assert.assertEquals(obj24.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj24), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj24), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(mutableInterval28);
        org.junit.Assert.assertNotNull(mutableInterval29);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(mutableInterval38);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 1L + "'", long43 == 1L);
        org.junit.Assert.assertNotNull(interval55);
        org.junit.Assert.assertNotNull(interval62);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(chronology67);
    }

    @Test
    @Ignore
  public void test1603() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1603");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        org.joda.time.DateTime dateTime5 = mutableInterval3.getStart();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutableInterval mutableInterval9 = new org.joda.time.MutableInterval(0L, 1L, chronology8);
        org.joda.time.Interval interval10 = mutableInterval9.toInterval();
        java.lang.Object obj11 = mutableInterval9.clone();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutableInterval mutableInterval13 = new org.joda.time.MutableInterval(obj11, chronology12);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        mutableInterval13.setPeriodAfterStart(readablePeriod14);
        org.joda.time.Period period16 = mutableInterval13.toPeriod();
        org.joda.time.MutableInterval mutableInterval17 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime5, (org.joda.time.ReadablePeriod) period16);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MutableInterval mutableInterval21 = new org.joda.time.MutableInterval(0L, 1L, chronology20);
        org.joda.time.Interval interval22 = mutableInterval21.toInterval();
        java.lang.Object obj23 = mutableInterval21.clone();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MutableInterval mutableInterval25 = new org.joda.time.MutableInterval(obj23, chronology24);
        org.joda.time.Duration duration26 = mutableInterval25.toDuration();
        org.joda.time.MutableInterval mutableInterval27 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime5, (org.joda.time.ReadableDuration) duration26);
        org.joda.time.ReadableInstant readableInstant28 = null;
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        org.joda.time.MutableInterval mutableInterval30 = new org.joda.time.MutableInterval(readableInstant28, readablePeriod29);
        long long31 = mutableInterval30.getEndMillis();
        org.joda.time.MutableInterval mutableInterval32 = mutableInterval30.copy();
        org.joda.time.ReadableDuration readableDuration33 = null;
        org.joda.time.ReadableInstant readableInstant34 = null;
        org.joda.time.MutableInterval mutableInterval35 = new org.joda.time.MutableInterval(readableDuration33, readableInstant34);
        org.joda.time.PeriodType periodType36 = null;
        org.joda.time.Period period37 = mutableInterval35.toPeriod(periodType36);
        mutableInterval30.setPeriodBeforeEnd((org.joda.time.ReadablePeriod) period37);
        org.joda.time.DateTime dateTime39 = mutableInterval30.getStart();
        org.joda.time.MutableInterval mutableInterval40 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration26, (org.joda.time.ReadableInstant) dateTime39);
        org.joda.time.MutableInterval mutableInterval41 = mutableInterval40.toMutableInterval();
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.MutableInterval mutableInterval45 = new org.joda.time.MutableInterval(0L, 1L, chronology44);
        org.joda.time.Interval interval46 = mutableInterval45.toInterval();
        java.lang.Object obj47 = mutableInterval45.clone();
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.MutableInterval mutableInterval49 = new org.joda.time.MutableInterval(obj47, chronology48);
        org.joda.time.DateTime dateTime50 = mutableInterval49.getEnd();
        mutableInterval41.setStart((org.joda.time.ReadableInstant) dateTime50);
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.MutableInterval mutableInterval55 = new org.joda.time.MutableInterval(0L, 1L, chronology54);
        org.joda.time.Interval interval56 = mutableInterval55.toInterval();
        java.lang.Object obj57 = mutableInterval55.clone();
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.MutableInterval mutableInterval59 = new org.joda.time.MutableInterval(obj57, chronology58);
        org.joda.time.Duration duration60 = mutableInterval59.toDuration();
        org.joda.time.MutableInterval mutableInterval61 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime50, (org.joda.time.ReadableDuration) duration60);
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.MutableInterval mutableInterval65 = new org.joda.time.MutableInterval(0L, 1L, chronology64);
        org.joda.time.Interval interval66 = mutableInterval65.toInterval();
        mutableInterval65.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology71 = null;
        org.joda.time.MutableInterval mutableInterval72 = new org.joda.time.MutableInterval(0L, 1L, chronology71);
        org.joda.time.Interval interval73 = mutableInterval72.toInterval();
        long long74 = interval73.getEndMillis();
        boolean boolean76 = interval73.isAfter((long) (byte) 100);
        boolean boolean77 = mutableInterval65.overlaps((org.joda.time.ReadableInterval) interval73);
        long long78 = mutableInterval65.toDurationMillis();
        org.joda.time.DateTime dateTime79 = mutableInterval65.getStart();
        org.joda.time.MutableInterval mutableInterval80 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration60, (org.joda.time.ReadableInstant) dateTime79);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertEquals(obj11.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj11), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj11), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertNotNull(obj23);
        org.junit.Assert.assertEquals(obj23.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj23), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj23), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(duration26);
// flaky:         org.junit.Assert.assertTrue("'" + long31 + "' != '" + 1606267579142L + "'", long31 == 1606267579142L);
        org.junit.Assert.assertNotNull(mutableInterval32);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(mutableInterval41);
        org.junit.Assert.assertNotNull(interval46);
        org.junit.Assert.assertNotNull(obj47);
        org.junit.Assert.assertEquals(obj47.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj47), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj47), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(interval56);
        org.junit.Assert.assertNotNull(obj57);
        org.junit.Assert.assertEquals(obj57.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj57), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj57), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(duration60);
        org.junit.Assert.assertNotNull(interval66);
        org.junit.Assert.assertNotNull(interval73);
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 1L + "'", long74 == 1L);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertTrue("'" + long78 + "' != '" + 1L + "'", long78 == 1L);
        org.junit.Assert.assertNotNull(dateTime79);
    }

    @Test
    @Ignore
  public void test1604() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1604");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        java.lang.Object obj5 = mutableInterval3.clone();
        org.joda.time.Interval interval6 = mutableInterval3.toInterval();
        mutableInterval3.setDurationBeforeEnd(0L);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval(0L, 1L, chronology11);
        org.joda.time.Interval interval13 = mutableInterval12.toInterval();
        mutableInterval12.setDurationAfterStart((long) (byte) 1);
        boolean boolean17 = mutableInterval12.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology18 = mutableInterval12.getChronology();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.MutableInterval mutableInterval22 = new org.joda.time.MutableInterval(0L, 1L, chronology21);
        org.joda.time.Interval interval23 = mutableInterval22.toInterval();
        java.lang.Object obj24 = mutableInterval22.clone();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MutableInterval mutableInterval26 = new org.joda.time.MutableInterval(obj24, chronology25);
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        mutableInterval26.setPeriodAfterStart(readablePeriod27);
        org.joda.time.Period period29 = mutableInterval26.toPeriod();
        mutableInterval12.setPeriodBeforeEnd((org.joda.time.ReadablePeriod) period29);
        mutableInterval3.setPeriodBeforeEnd((org.joda.time.ReadablePeriod) period29);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MutableInterval mutableInterval35 = new org.joda.time.MutableInterval(0L, 1L, chronology34);
        org.joda.time.Interval interval36 = mutableInterval35.toInterval();
        mutableInterval35.setDurationAfterStart((long) (byte) 1);
        boolean boolean40 = mutableInterval35.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology41 = mutableInterval35.getChronology();
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.MutableInterval mutableInterval45 = new org.joda.time.MutableInterval(0L, 1L, chronology44);
        org.joda.time.Interval interval46 = mutableInterval45.toInterval();
        java.lang.Object obj47 = mutableInterval45.clone();
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.MutableInterval mutableInterval49 = new org.joda.time.MutableInterval(obj47, chronology48);
        org.joda.time.ReadablePeriod readablePeriod50 = null;
        mutableInterval49.setPeriodAfterStart(readablePeriod50);
        org.joda.time.Period period52 = mutableInterval49.toPeriod();
        mutableInterval35.setPeriodBeforeEnd((org.joda.time.ReadablePeriod) period52);
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.MutableInterval mutableInterval57 = new org.joda.time.MutableInterval(0L, 1L, chronology56);
        org.joda.time.Interval interval58 = mutableInterval57.toInterval();
        java.lang.Object obj59 = mutableInterval57.clone();
        org.joda.time.Interval interval60 = mutableInterval57.toInterval();
        org.joda.time.ReadableInterval readableInterval61 = null;
        boolean boolean62 = mutableInterval57.isBefore(readableInterval61);
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.MutableInterval mutableInterval66 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology65);
        boolean boolean67 = mutableInterval57.isAfter((org.joda.time.ReadableInterval) mutableInterval66);
        org.joda.time.Chronology chronology70 = null;
        org.joda.time.MutableInterval mutableInterval71 = new org.joda.time.MutableInterval(0L, 1L, chronology70);
        org.joda.time.Interval interval72 = mutableInterval71.toInterval();
        org.joda.time.DateTime dateTime73 = mutableInterval71.getStart();
        boolean boolean74 = mutableInterval57.isBefore((org.joda.time.ReadableInstant) dateTime73);
        org.joda.time.MutableInterval mutableInterval75 = new org.joda.time.MutableInterval((org.joda.time.ReadablePeriod) period52, (org.joda.time.ReadableInstant) dateTime73);
        org.joda.time.MutableInterval mutableInterval76 = new org.joda.time.MutableInterval((org.joda.time.ReadablePeriod) period29, (org.joda.time.ReadableInstant) dateTime73);
        org.joda.time.Interval interval77 = mutableInterval76.toInterval();
        org.joda.time.DateTime dateTime78 = mutableInterval76.getEnd();
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertNotNull(obj24);
        org.junit.Assert.assertEquals(obj24.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj24), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj24), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(interval36);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(interval46);
        org.junit.Assert.assertNotNull(obj47);
        org.junit.Assert.assertEquals(obj47.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj47), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj47), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(period52);
        org.junit.Assert.assertNotNull(interval58);
        org.junit.Assert.assertNotNull(obj59);
        org.junit.Assert.assertEquals(obj59.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj59), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj59), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(interval72);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(interval77);
        org.junit.Assert.assertNotNull(dateTime78);
    }

    @Test
    @Ignore
  public void test1605() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1605");
        org.joda.time.ReadablePeriod readablePeriod0 = null;
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MutableInterval mutableInterval4 = new org.joda.time.MutableInterval(0L, 1L, chronology3);
        org.joda.time.Interval interval5 = mutableInterval4.toInterval();
        mutableInterval4.setDurationAfterStart((long) (byte) 1);
        boolean boolean9 = mutableInterval4.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology10 = mutableInterval4.getChronology();
        mutableInterval4.setStartMillis((long) (byte) 0);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MutableInterval mutableInterval16 = new org.joda.time.MutableInterval(0L, 1L, chronology15);
        org.joda.time.Interval interval17 = mutableInterval16.toInterval();
        org.joda.time.DateTime dateTime18 = mutableInterval16.getStart();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.MutableInterval mutableInterval22 = new org.joda.time.MutableInterval(0L, 1L, chronology21);
        org.joda.time.Interval interval23 = mutableInterval22.toInterval();
        java.lang.Object obj24 = mutableInterval22.clone();
        org.joda.time.Interval interval25 = mutableInterval22.toInterval();
        org.joda.time.ReadableInterval readableInterval26 = null;
        boolean boolean27 = mutableInterval22.isBefore(readableInterval26);
        org.joda.time.MutableInterval mutableInterval28 = mutableInterval22.copy();
        boolean boolean29 = mutableInterval16.contains((org.joda.time.ReadableInterval) mutableInterval22);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.MutableInterval mutableInterval33 = new org.joda.time.MutableInterval(0L, 1L, chronology32);
        org.joda.time.Interval interval34 = mutableInterval33.toInterval();
        java.lang.Object obj35 = mutableInterval33.clone();
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.MutableInterval mutableInterval37 = new org.joda.time.MutableInterval(obj35, chronology36);
        org.joda.time.ReadablePeriod readablePeriod38 = null;
        mutableInterval37.setPeriodBeforeEnd(readablePeriod38);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.MutableInterval mutableInterval43 = new org.joda.time.MutableInterval(0L, 1L, chronology42);
        org.joda.time.Interval interval44 = mutableInterval43.toInterval();
        mutableInterval43.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.MutableInterval mutableInterval50 = new org.joda.time.MutableInterval(0L, 1L, chronology49);
        org.joda.time.Interval interval51 = mutableInterval50.toInterval();
        long long52 = interval51.getEndMillis();
        boolean boolean54 = interval51.isAfter((long) (byte) 100);
        boolean boolean55 = mutableInterval43.overlaps((org.joda.time.ReadableInterval) interval51);
        org.joda.time.Duration duration56 = mutableInterval43.toDuration();
        boolean boolean57 = mutableInterval37.isBefore((org.joda.time.ReadableInterval) mutableInterval43);
        org.joda.time.MutableInterval mutableInterval58 = mutableInterval43.toMutableInterval();
        java.lang.String str59 = mutableInterval58.toString();
        boolean boolean60 = mutableInterval58.containsNow();
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.MutableInterval mutableInterval64 = new org.joda.time.MutableInterval(0L, 1L, chronology63);
        org.joda.time.Interval interval65 = mutableInterval64.toInterval();
        org.joda.time.DateTime dateTime66 = mutableInterval64.getStart();
        org.joda.time.ReadableInstant readableInstant67 = null;
        org.joda.time.ReadablePeriod readablePeriod68 = null;
        org.joda.time.MutableInterval mutableInterval69 = new org.joda.time.MutableInterval(readableInstant67, readablePeriod68);
        org.joda.time.Chronology chronology72 = null;
        org.joda.time.MutableInterval mutableInterval73 = new org.joda.time.MutableInterval(0L, 1L, chronology72);
        org.joda.time.Interval interval74 = mutableInterval73.toInterval();
        org.joda.time.DateTime dateTime75 = mutableInterval73.getStart();
        org.joda.time.Chronology chronology78 = null;
        org.joda.time.MutableInterval mutableInterval79 = new org.joda.time.MutableInterval(0L, 1L, chronology78);
        org.joda.time.Interval interval80 = mutableInterval79.toInterval();
        org.joda.time.DateTime dateTime81 = mutableInterval79.getStart();
        mutableInterval69.setInterval((org.joda.time.ReadableInstant) dateTime75, (org.joda.time.ReadableInstant) dateTime81);
        org.joda.time.MutableInterval mutableInterval83 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime66, (org.joda.time.ReadableInstant) dateTime81);
        org.joda.time.DateTime dateTime84 = mutableInterval83.getStart();
        boolean boolean85 = mutableInterval58.contains((org.joda.time.ReadableInstant) dateTime84);
        boolean boolean86 = mutableInterval22.contains((org.joda.time.ReadableInstant) dateTime84);
        mutableInterval4.setStart((org.joda.time.ReadableInstant) dateTime84);
        org.joda.time.MutableInterval mutableInterval88 = new org.joda.time.MutableInterval(readablePeriod0, (org.joda.time.ReadableInstant) dateTime84);
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(interval17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertNotNull(obj24);
        org.junit.Assert.assertEquals(obj24.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj24), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj24), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(mutableInterval28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(interval34);
        org.junit.Assert.assertNotNull(obj35);
        org.junit.Assert.assertEquals(obj35.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj35), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj35), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval44);
        org.junit.Assert.assertNotNull(interval51);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 1L + "'", long52 == 1L);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(duration56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(mutableInterval58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z" + "'", str59, "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(interval65);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(interval74);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertNotNull(interval80);
        org.junit.Assert.assertNotNull(dateTime81);
        org.junit.Assert.assertNotNull(dateTime84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
    }

    @Test
    @Ignore
  public void test1606() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1606");
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval((long) (-1), (long) (byte) 100);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.MutableInterval mutableInterval6 = new org.joda.time.MutableInterval(0L, 1L, chronology5);
        org.joda.time.Interval interval7 = mutableInterval6.toInterval();
        org.joda.time.DateTime dateTime8 = mutableInterval6.getStart();
        org.joda.time.Interval interval9 = mutableInterval6.toInterval();
        boolean boolean10 = mutableInterval2.isAfter((org.joda.time.ReadableInterval) mutableInterval6);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutableInterval mutableInterval14 = new org.joda.time.MutableInterval(0L, 1L, chronology13);
        org.joda.time.Interval interval15 = mutableInterval14.toInterval();
        java.lang.Object obj16 = mutableInterval14.clone();
        java.lang.Object obj17 = mutableInterval14.clone();
        org.joda.time.MutableInterval mutableInterval18 = mutableInterval14.copy();
        org.joda.time.Chronology chronology19 = mutableInterval18.getChronology();
        mutableInterval18.setInterval(1606267332270L, 1606267365382L);
        boolean boolean23 = mutableInterval6.isAfter((org.joda.time.ReadableInterval) mutableInterval18);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MutableInterval mutableInterval27 = new org.joda.time.MutableInterval(0L, 1L, chronology26);
        org.joda.time.Interval interval28 = mutableInterval27.toInterval();
        java.lang.Object obj29 = mutableInterval27.clone();
        java.lang.Object obj30 = mutableInterval27.clone();
        org.joda.time.MutableInterval mutableInterval31 = mutableInterval27.copy();
        org.joda.time.DateTime dateTime32 = mutableInterval27.getStart();
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.MutableInterval mutableInterval36 = new org.joda.time.MutableInterval(0L, 1L, chronology35);
        org.joda.time.Interval interval37 = mutableInterval36.toInterval();
        java.lang.Object obj38 = mutableInterval36.clone();
        org.joda.time.Interval interval39 = mutableInterval36.toInterval();
        org.joda.time.ReadableInterval readableInterval40 = null;
        boolean boolean41 = mutableInterval36.isBefore(readableInterval40);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.MutableInterval mutableInterval45 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology44);
        boolean boolean46 = mutableInterval36.isAfter((org.joda.time.ReadableInterval) mutableInterval45);
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.MutableInterval mutableInterval50 = new org.joda.time.MutableInterval(0L, 1L, chronology49);
        org.joda.time.Interval interval51 = mutableInterval50.toInterval();
        mutableInterval50.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.MutableInterval mutableInterval57 = new org.joda.time.MutableInterval(0L, 1L, chronology56);
        org.joda.time.Interval interval58 = mutableInterval57.toInterval();
        long long59 = interval58.getEndMillis();
        boolean boolean61 = interval58.isAfter((long) (byte) 100);
        boolean boolean62 = mutableInterval50.overlaps((org.joda.time.ReadableInterval) interval58);
        mutableInterval45.setInterval((org.joda.time.ReadableInterval) interval58);
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.MutableInterval mutableInterval67 = new org.joda.time.MutableInterval(0L, 1L, chronology66);
        org.joda.time.Interval interval68 = mutableInterval67.toInterval();
        long long69 = interval68.getEndMillis();
        org.joda.time.DateTime dateTime70 = interval68.getEnd();
        boolean boolean71 = interval58.isAfter((org.joda.time.ReadableInstant) dateTime70);
        org.joda.time.MutableInterval mutableInterval72 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime32, (org.joda.time.ReadableInstant) dateTime70);
        boolean boolean73 = mutableInterval18.isAfter((org.joda.time.ReadableInstant) dateTime32);
        org.junit.Assert.assertNotNull(interval7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(interval9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(obj16);
        org.junit.Assert.assertEquals(obj16.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj16), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj16), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(obj17);
        org.junit.Assert.assertEquals(obj17.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj17), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj17), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(mutableInterval18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertNotNull(obj29);
        org.junit.Assert.assertEquals(obj29.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj29), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj29), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(obj30);
        org.junit.Assert.assertEquals(obj30.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj30), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj30), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(mutableInterval31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(interval37);
        org.junit.Assert.assertNotNull(obj38);
        org.junit.Assert.assertEquals(obj38.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj38), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj38), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(interval51);
        org.junit.Assert.assertNotNull(interval58);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 1L + "'", long59 == 1L);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(interval68);
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + 1L + "'", long69 == 1L);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
    }

    @Test
    @Ignore
  public void test1607() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1607");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        mutableInterval3.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval(0L, 1L, chronology9);
        org.joda.time.Interval interval11 = mutableInterval10.toInterval();
        long long12 = interval11.getEndMillis();
        boolean boolean14 = interval11.isAfter((long) (byte) 100);
        boolean boolean15 = mutableInterval3.overlaps((org.joda.time.ReadableInterval) interval11);
        org.joda.time.Duration duration16 = mutableInterval3.toDuration();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval(0L, 1L, chronology19);
        org.joda.time.Interval interval21 = mutableInterval20.toInterval();
        org.joda.time.DateTime dateTime22 = mutableInterval20.getStart();
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.MutableInterval mutableInterval25 = new org.joda.time.MutableInterval(readableInstant23, readablePeriod24);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MutableInterval mutableInterval29 = new org.joda.time.MutableInterval(0L, 1L, chronology28);
        org.joda.time.Interval interval30 = mutableInterval29.toInterval();
        org.joda.time.DateTime dateTime31 = mutableInterval29.getStart();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MutableInterval mutableInterval35 = new org.joda.time.MutableInterval(0L, 1L, chronology34);
        org.joda.time.Interval interval36 = mutableInterval35.toInterval();
        org.joda.time.DateTime dateTime37 = mutableInterval35.getStart();
        mutableInterval25.setInterval((org.joda.time.ReadableInstant) dateTime31, (org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.MutableInterval mutableInterval39 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime22, (org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.MutableInterval mutableInterval40 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration16, (org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.ReadablePeriod readablePeriod41 = null;
        mutableInterval40.setPeriodAfterStart(readablePeriod41);
        org.joda.time.Chronology chronology43 = mutableInterval40.getChronology();
        long long44 = mutableInterval40.getStartMillis();
        org.joda.time.MutableInterval mutableInterval45 = mutableInterval40.copy();
        java.lang.String str46 = mutableInterval40.toString();
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.MutableInterval mutableInterval50 = new org.joda.time.MutableInterval(0L, 1L, chronology49);
        org.joda.time.Interval interval51 = mutableInterval50.toInterval();
        mutableInterval50.setDurationAfterStart((long) (byte) 1);
        boolean boolean55 = mutableInterval50.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology56 = mutableInterval50.getChronology();
        org.joda.time.MutableInterval mutableInterval57 = mutableInterval50.toMutableInterval();
        boolean boolean58 = mutableInterval40.contains((org.joda.time.ReadableInterval) mutableInterval50);
        org.joda.time.DateTime dateTime59 = mutableInterval50.getEnd();
        org.joda.time.MutableInterval mutableInterval60 = mutableInterval50.toMutableInterval();
        java.lang.Object obj61 = mutableInterval50.clone();
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(interval30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(interval36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + (-1L) + "'", long44 == (-1L));
        org.junit.Assert.assertNotNull(mutableInterval45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "1969-12-31T23:59:59.999Z/1969-12-31T23:59:59.999Z" + "'", str46, "1969-12-31T23:59:59.999Z/1969-12-31T23:59:59.999Z");
        org.junit.Assert.assertNotNull(interval51);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(chronology56);
        org.junit.Assert.assertNotNull(mutableInterval57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(mutableInterval60);
        org.junit.Assert.assertNotNull(obj61);
        org.junit.Assert.assertEquals(obj61.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj61), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj61), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
    }

    @Test
    @Ignore
  public void test1608() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1608");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        java.lang.Object obj5 = mutableInterval3.clone();
        org.joda.time.Interval interval6 = mutableInterval3.toInterval();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        mutableInterval3.setPeriodAfterStart(readablePeriod7);
        mutableInterval3.setEndMillis((long) 100);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutableInterval mutableInterval14 = new org.joda.time.MutableInterval(0L, 1L, chronology13);
        org.joda.time.Interval interval15 = mutableInterval14.toInterval();
        mutableInterval14.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MutableInterval mutableInterval21 = new org.joda.time.MutableInterval(0L, 1L, chronology20);
        org.joda.time.Interval interval22 = mutableInterval21.toInterval();
        java.lang.Object obj23 = mutableInterval21.clone();
        org.joda.time.Interval interval24 = mutableInterval21.toInterval();
        org.joda.time.ReadableInterval readableInterval25 = null;
        boolean boolean26 = mutableInterval21.isBefore(readableInterval25);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MutableInterval mutableInterval30 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology29);
        boolean boolean31 = mutableInterval21.isAfter((org.joda.time.ReadableInterval) mutableInterval30);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MutableInterval mutableInterval35 = new org.joda.time.MutableInterval(0L, 1L, chronology34);
        org.joda.time.Interval interval36 = mutableInterval35.toInterval();
        org.joda.time.DateTime dateTime37 = mutableInterval35.getStart();
        boolean boolean38 = mutableInterval21.isBefore((org.joda.time.ReadableInstant) dateTime37);
        boolean boolean39 = mutableInterval14.contains((org.joda.time.ReadableInstant) dateTime37);
        boolean boolean40 = mutableInterval3.isBefore((org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.MutableInterval mutableInterval44 = new org.joda.time.MutableInterval(0L, 1L, chronology43);
        org.joda.time.Interval interval45 = mutableInterval44.toInterval();
        mutableInterval44.setDurationAfterStart((long) (byte) 1);
        boolean boolean49 = mutableInterval44.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology50 = mutableInterval44.getChronology();
        long long51 = mutableInterval44.getStartMillis();
        org.joda.time.Duration duration52 = mutableInterval44.toDuration();
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.MutableInterval mutableInterval56 = new org.joda.time.MutableInterval(0L, 1L, chronology55);
        org.joda.time.Interval interval57 = mutableInterval56.toInterval();
        mutableInterval56.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.MutableInterval mutableInterval63 = new org.joda.time.MutableInterval(0L, 1L, chronology62);
        org.joda.time.Interval interval64 = mutableInterval63.toInterval();
        long long65 = interval64.getEndMillis();
        boolean boolean67 = interval64.isAfter((long) (byte) 100);
        boolean boolean68 = mutableInterval56.overlaps((org.joda.time.ReadableInterval) interval64);
        org.joda.time.Duration duration69 = mutableInterval56.toDuration();
        mutableInterval44.setInterval((org.joda.time.ReadableInterval) mutableInterval56);
        long long71 = mutableInterval44.getStartMillis();
        org.joda.time.Chronology chronology74 = null;
        org.joda.time.MutableInterval mutableInterval75 = new org.joda.time.MutableInterval(0L, 1L, chronology74);
        org.joda.time.Interval interval76 = mutableInterval75.toInterval();
        org.joda.time.DateTime dateTime77 = mutableInterval75.getStart();
        org.joda.time.Chronology chronology80 = null;
        org.joda.time.MutableInterval mutableInterval81 = new org.joda.time.MutableInterval(0L, 1L, chronology80);
        org.joda.time.Interval interval82 = mutableInterval81.toInterval();
        java.lang.Object obj83 = mutableInterval81.clone();
        org.joda.time.Interval interval84 = mutableInterval81.toInterval();
        org.joda.time.ReadableInterval readableInterval85 = null;
        boolean boolean86 = mutableInterval81.isBefore(readableInterval85);
        org.joda.time.MutableInterval mutableInterval87 = mutableInterval81.copy();
        boolean boolean88 = mutableInterval75.contains((org.joda.time.ReadableInterval) mutableInterval81);
        mutableInterval81.setInterval((long) '#', 1606267292730L);
        org.joda.time.Chronology chronology92 = mutableInterval81.getChronology();
        org.joda.time.MutableInterval mutableInterval93 = new org.joda.time.MutableInterval((java.lang.Object) mutableInterval44, chronology92);
        org.joda.time.MutableInterval mutableInterval94 = new org.joda.time.MutableInterval((java.lang.Object) mutableInterval3, chronology92);
        boolean boolean95 = mutableInterval3.isAfterNow();
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertNotNull(obj23);
        org.junit.Assert.assertEquals(obj23.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj23), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj23), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(interval36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(interval45);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 0L + "'", long51 == 0L);
        org.junit.Assert.assertNotNull(duration52);
        org.junit.Assert.assertNotNull(interval57);
        org.junit.Assert.assertNotNull(interval64);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 1L + "'", long65 == 1L);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(duration69);
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 0L + "'", long71 == 0L);
        org.junit.Assert.assertNotNull(interval76);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertNotNull(interval82);
        org.junit.Assert.assertNotNull(obj83);
        org.junit.Assert.assertEquals(obj83.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj83), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj83), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval84);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertNotNull(mutableInterval87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertNotNull(chronology92);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
    }

    @Test
    public void test1609() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1609");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        long long5 = interval4.getEndMillis();
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.MutableInterval mutableInterval8 = new org.joda.time.MutableInterval(readableInstant6, readablePeriod7);
        mutableInterval8.setDurationBeforeEnd(1L);
        org.joda.time.MutableInterval mutableInterval11 = mutableInterval8.toMutableInterval();
        boolean boolean12 = interval4.overlaps((org.joda.time.ReadableInterval) mutableInterval8);
        org.joda.time.Period period13 = interval4.toPeriod();
        long long14 = interval4.getEndMillis();
        org.joda.time.PeriodType periodType15 = null;
        org.joda.time.Period period16 = interval4.toPeriod(periodType15);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1L + "'", long5 == 1L);
        org.junit.Assert.assertNotNull(mutableInterval11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1L + "'", long14 == 1L);
        org.junit.Assert.assertNotNull(period16);
    }

    @Test
    @Ignore
  public void test1610() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1610");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        java.lang.Object obj5 = mutableInterval3.clone();
        java.lang.Object obj6 = mutableInterval3.clone();
        org.joda.time.MutableInterval mutableInterval7 = mutableInterval3.copy();
        org.joda.time.Chronology chronology8 = mutableInterval7.getChronology();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology11);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        mutableInterval12.setPeriodBeforeEnd(readablePeriod13);
        mutableInterval12.setStartMillis((-1L));
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        org.joda.time.MutableInterval mutableInterval19 = new org.joda.time.MutableInterval(readableInstant17, readablePeriod18);
        long long20 = mutableInterval19.getEndMillis();
        boolean boolean21 = mutableInterval12.overlaps((org.joda.time.ReadableInterval) mutableInterval19);
        boolean boolean22 = mutableInterval19.isAfterNow();
        boolean boolean24 = mutableInterval19.isBefore((long) (byte) 10);
        boolean boolean25 = mutableInterval19.isBeforeNow();
        boolean boolean26 = mutableInterval7.equals((java.lang.Object) boolean25);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertEquals(obj6.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(mutableInterval7);
        org.junit.Assert.assertNotNull(chronology8);
// flaky:         org.junit.Assert.assertTrue("'" + long20 + "' != '" + 1606267579963L + "'", long20 == 1606267579963L);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    @Ignore
  public void test1611() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1611");
        org.joda.time.MutableInterval mutableInterval1 = org.joda.time.MutableInterval.parse("1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MutableInterval mutableInterval5 = new org.joda.time.MutableInterval(0L, 1L, chronology4);
        org.joda.time.Interval interval6 = mutableInterval5.toInterval();
        java.lang.Object obj7 = mutableInterval5.clone();
        org.joda.time.Interval interval8 = mutableInterval5.toInterval();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval(0L, 1L, chronology11);
        org.joda.time.Interval interval13 = mutableInterval12.toInterval();
        java.lang.Object obj14 = mutableInterval12.clone();
        boolean boolean15 = interval8.isBefore((org.joda.time.ReadableInterval) mutableInterval12);
        boolean boolean16 = mutableInterval1.isAfter((org.joda.time.ReadableInterval) mutableInterval12);
        org.joda.time.MutableInterval mutableInterval17 = mutableInterval12.toMutableInterval();
        org.joda.time.ReadableInstant readableInstant18 = null;
        boolean boolean19 = mutableInterval17.contains(readableInstant18);
        org.junit.Assert.assertNotNull(mutableInterval1);
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(obj14);
        org.junit.Assert.assertEquals(obj14.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj14), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj14), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(mutableInterval17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    @Ignore
  public void test1612() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1612");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        org.joda.time.DateTime dateTime5 = mutableInterval3.getStart();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutableInterval mutableInterval9 = new org.joda.time.MutableInterval(0L, 1L, chronology8);
        org.joda.time.Interval interval10 = mutableInterval9.toInterval();
        java.lang.Object obj11 = mutableInterval9.clone();
        org.joda.time.Interval interval12 = mutableInterval9.toInterval();
        org.joda.time.ReadableInterval readableInterval13 = null;
        boolean boolean14 = mutableInterval9.isBefore(readableInterval13);
        org.joda.time.MutableInterval mutableInterval15 = mutableInterval9.copy();
        boolean boolean16 = mutableInterval3.contains((org.joda.time.ReadableInterval) mutableInterval9);
        mutableInterval9.setInterval((long) '#', 1606267292730L);
        org.joda.time.Chronology chronology20 = mutableInterval9.getChronology();
        boolean boolean21 = mutableInterval9.isBeforeNow();
        org.joda.time.PeriodType periodType22 = null;
        org.joda.time.Period period23 = mutableInterval9.toPeriod(periodType22);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MutableInterval mutableInterval27 = new org.joda.time.MutableInterval(0L, 1L, chronology26);
        org.joda.time.Interval interval28 = mutableInterval27.toInterval();
        org.joda.time.MutableInterval mutableInterval29 = new org.joda.time.MutableInterval((java.lang.Object) mutableInterval27);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MutableInterval mutableInterval35 = new org.joda.time.MutableInterval(0L, 1L, chronology34);
        org.joda.time.Interval interval36 = mutableInterval35.toInterval();
        java.lang.Object obj37 = mutableInterval35.clone();
        mutableInterval35.setStartMillis((long) (short) -1);
        org.joda.time.Chronology chronology40 = mutableInterval35.getChronology();
        org.joda.time.MutableInterval mutableInterval41 = mutableInterval35.toMutableInterval();
        org.joda.time.MutableInterval mutableInterval42 = mutableInterval35.copy();
        org.joda.time.Duration duration43 = mutableInterval35.toDuration();
        org.joda.time.ReadableInstant readableInstant46 = null;
        org.joda.time.ReadablePeriod readablePeriod47 = null;
        org.joda.time.MutableInterval mutableInterval48 = new org.joda.time.MutableInterval(readableInstant46, readablePeriod47);
        mutableInterval48.setDurationBeforeEnd(1L);
        org.joda.time.MutableInterval mutableInterval51 = mutableInterval48.toMutableInterval();
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.MutableInterval mutableInterval55 = new org.joda.time.MutableInterval(0L, 1L, chronology54);
        long long56 = mutableInterval55.toDurationMillis();
        mutableInterval48.setInterval((org.joda.time.ReadableInterval) mutableInterval55);
        mutableInterval48.setDurationAfterStart(100L);
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.MutableInterval mutableInterval67 = new org.joda.time.MutableInterval(0L, 1L, chronology66);
        org.joda.time.Interval interval68 = mutableInterval67.toInterval();
        mutableInterval67.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology73 = null;
        org.joda.time.MutableInterval mutableInterval74 = new org.joda.time.MutableInterval(0L, 1L, chronology73);
        org.joda.time.Interval interval75 = mutableInterval74.toInterval();
        mutableInterval74.setDurationAfterStart((long) (byte) 1);
        boolean boolean79 = mutableInterval74.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology80 = mutableInterval74.getChronology();
        mutableInterval67.setChronology(chronology80);
        org.joda.time.MutableInterval mutableInterval82 = new org.joda.time.MutableInterval((long) (-1), (long) '4', chronology80);
        org.joda.time.MutableInterval mutableInterval83 = new org.joda.time.MutableInterval((long) (short) 1, (long) 100, chronology80);
        org.joda.time.MutableInterval mutableInterval84 = new org.joda.time.MutableInterval((java.lang.Object) mutableInterval48, chronology80);
        org.joda.time.MutableInterval mutableInterval85 = new org.joda.time.MutableInterval((long) (short) 1, (long) ' ', chronology80);
        mutableInterval35.setChronology(chronology80);
        org.joda.time.MutableInterval mutableInterval87 = new org.joda.time.MutableInterval((long) (short) 0, 1606267316350L, chronology80);
        mutableInterval27.setChronology(chronology80);
        org.joda.time.MutableInterval mutableInterval89 = new org.joda.time.MutableInterval((java.lang.Object) periodType22, chronology80);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertEquals(obj11.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj11), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj11), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(mutableInterval15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertNotNull(interval36);
        org.junit.Assert.assertNotNull(obj37);
        org.junit.Assert.assertEquals(obj37.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj37), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj37), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(mutableInterval41);
        org.junit.Assert.assertNotNull(mutableInterval42);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertNotNull(mutableInterval51);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 1L + "'", long56 == 1L);
        org.junit.Assert.assertNotNull(interval68);
        org.junit.Assert.assertNotNull(interval75);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(chronology80);
    }

    @Test
    @Ignore
  public void test1613() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1613");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        java.lang.Object obj5 = mutableInterval3.clone();
        java.lang.Object obj6 = mutableInterval3.clone();
        org.joda.time.MutableInterval mutableInterval7 = mutableInterval3.copy();
        org.joda.time.Duration duration8 = mutableInterval3.toDuration();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval(0L, 1L, chronology11);
        org.joda.time.Interval interval13 = mutableInterval12.toInterval();
        java.lang.Object obj14 = mutableInterval12.clone();
        mutableInterval12.setStartMillis((long) 1);
        org.joda.time.DateTime dateTime17 = mutableInterval12.getStart();
        mutableInterval3.setInterval((org.joda.time.ReadableInterval) mutableInterval12);
        org.joda.time.Interval interval19 = mutableInterval12.toInterval();
        boolean boolean20 = interval19.isAfterNow();
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertEquals(obj6.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(mutableInterval7);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(obj14);
        org.junit.Assert.assertEquals(obj14.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj14), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj14), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    @Ignore
  public void test1614() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1614");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        mutableInterval3.setDurationAfterStart((long) (byte) 1);
        org.joda.time.ReadableInstant readableInstant7 = null;
        mutableInterval3.setEnd(readableInstant7);
        mutableInterval3.setEndMillis((long) (byte) 10);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutableInterval mutableInterval14 = new org.joda.time.MutableInterval(0L, 1L, chronology13);
        org.joda.time.Interval interval15 = mutableInterval14.toInterval();
        org.joda.time.DateTime dateTime16 = mutableInterval14.getStart();
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        org.joda.time.MutableInterval mutableInterval19 = new org.joda.time.MutableInterval(readableInstant17, readablePeriod18);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.MutableInterval mutableInterval23 = new org.joda.time.MutableInterval(0L, 1L, chronology22);
        org.joda.time.Interval interval24 = mutableInterval23.toInterval();
        org.joda.time.DateTime dateTime25 = mutableInterval23.getStart();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MutableInterval mutableInterval29 = new org.joda.time.MutableInterval(0L, 1L, chronology28);
        org.joda.time.Interval interval30 = mutableInterval29.toInterval();
        org.joda.time.DateTime dateTime31 = mutableInterval29.getStart();
        mutableInterval19.setInterval((org.joda.time.ReadableInstant) dateTime25, (org.joda.time.ReadableInstant) dateTime31);
        org.joda.time.MutableInterval mutableInterval33 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime16, (org.joda.time.ReadableInstant) dateTime31);
        org.joda.time.DateTime dateTime34 = mutableInterval33.getStart();
        org.joda.time.DateTime dateTime35 = mutableInterval33.getEnd();
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.MutableInterval mutableInterval39 = new org.joda.time.MutableInterval(0L, 1L, chronology38);
        org.joda.time.Interval interval40 = mutableInterval39.toInterval();
        mutableInterval39.setDurationAfterStart((long) (byte) 1);
        boolean boolean44 = mutableInterval39.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.MutableInterval mutableInterval48 = new org.joda.time.MutableInterval(0L, 1L, chronology47);
        org.joda.time.Interval interval49 = mutableInterval48.toInterval();
        java.lang.Object obj50 = mutableInterval48.clone();
        mutableInterval48.setStartMillis((long) (short) -1);
        org.joda.time.Chronology chronology53 = mutableInterval48.getChronology();
        mutableInterval39.setChronology(chronology53);
        mutableInterval33.setChronology(chronology53);
        org.joda.time.MutableInterval mutableInterval56 = new org.joda.time.MutableInterval((java.lang.Object) mutableInterval3, chronology53);
        java.lang.Object obj57 = mutableInterval3.clone();
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(interval30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(interval49);
        org.junit.Assert.assertNotNull(obj50);
        org.junit.Assert.assertEquals(obj50.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj50), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj50), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(obj57);
        org.junit.Assert.assertEquals(obj57.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.010Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj57), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.010Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj57), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.010Z");
    }

    @Test
    @Ignore
  public void test1615() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1615");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        mutableInterval3.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval(0L, 1L, chronology9);
        org.joda.time.Interval interval11 = mutableInterval10.toInterval();
        mutableInterval10.setDurationAfterStart((long) (byte) 1);
        boolean boolean15 = mutableInterval10.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology16 = mutableInterval10.getChronology();
        mutableInterval3.setChronology(chronology16);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MutableInterval mutableInterval21 = new org.joda.time.MutableInterval(0L, 1L, chronology20);
        org.joda.time.Interval interval22 = mutableInterval21.toInterval();
        java.lang.Object obj23 = mutableInterval21.clone();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MutableInterval mutableInterval25 = new org.joda.time.MutableInterval(obj23, chronology24);
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        mutableInterval25.setPeriodAfterStart(readablePeriod26);
        org.joda.time.Period period28 = mutableInterval25.toPeriod();
        org.joda.time.MutableInterval mutableInterval29 = mutableInterval25.copy();
        boolean boolean30 = mutableInterval3.isAfter((org.joda.time.ReadableInterval) mutableInterval25);
        org.joda.time.MutableInterval mutableInterval31 = mutableInterval25.copy();
        mutableInterval25.setDurationAfterStart(1606267456524L);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertNotNull(obj23);
        org.junit.Assert.assertEquals(obj23.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj23), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj23), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(mutableInterval29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(mutableInterval31);
    }

    @Test
    @Ignore
  public void test1616() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1616");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        mutableInterval3.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval(0L, 1L, chronology9);
        org.joda.time.Interval interval11 = mutableInterval10.toInterval();
        mutableInterval10.setDurationAfterStart((long) (byte) 1);
        boolean boolean15 = mutableInterval10.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology16 = mutableInterval10.getChronology();
        mutableInterval3.setChronology(chronology16);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MutableInterval mutableInterval21 = new org.joda.time.MutableInterval(0L, 1L, chronology20);
        org.joda.time.Interval interval22 = mutableInterval21.toInterval();
        java.lang.Object obj23 = mutableInterval21.clone();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MutableInterval mutableInterval25 = new org.joda.time.MutableInterval(obj23, chronology24);
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        mutableInterval25.setPeriodAfterStart(readablePeriod26);
        org.joda.time.Period period28 = mutableInterval25.toPeriod();
        org.joda.time.MutableInterval mutableInterval29 = mutableInterval25.copy();
        boolean boolean30 = mutableInterval3.isAfter((org.joda.time.ReadableInterval) mutableInterval25);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.MutableInterval mutableInterval34 = new org.joda.time.MutableInterval(0L, 1L, chronology33);
        org.joda.time.Interval interval35 = mutableInterval34.toInterval();
        java.lang.Object obj36 = mutableInterval34.clone();
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.MutableInterval mutableInterval38 = new org.joda.time.MutableInterval(obj36, chronology37);
        boolean boolean39 = mutableInterval3.equals((java.lang.Object) mutableInterval38);
        mutableInterval3.setInterval(1606267440912L, 1606267525526L);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertNotNull(obj23);
        org.junit.Assert.assertEquals(obj23.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj23), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj23), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(mutableInterval29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(interval35);
        org.junit.Assert.assertNotNull(obj36);
        org.junit.Assert.assertEquals(obj36.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj36), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj36), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
    }

    @Test
    public void test1617() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1617");
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval(99L, 1606267556173L);
    }

    @Test
    @Ignore
  public void test1618() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1618");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        org.joda.time.DateTime dateTime5 = mutableInterval3.getStart();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutableInterval mutableInterval9 = new org.joda.time.MutableInterval(0L, 1L, chronology8);
        org.joda.time.Interval interval10 = mutableInterval9.toInterval();
        java.lang.Object obj11 = mutableInterval9.clone();
        org.joda.time.Interval interval12 = mutableInterval9.toInterval();
        org.joda.time.ReadableInterval readableInterval13 = null;
        boolean boolean14 = mutableInterval9.isBefore(readableInterval13);
        org.joda.time.MutableInterval mutableInterval15 = mutableInterval9.copy();
        boolean boolean16 = mutableInterval3.contains((org.joda.time.ReadableInterval) mutableInterval9);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval(0L, 1L, chronology19);
        org.joda.time.Interval interval21 = mutableInterval20.toInterval();
        java.lang.Object obj22 = mutableInterval20.clone();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MutableInterval mutableInterval24 = new org.joda.time.MutableInterval(obj22, chronology23);
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        mutableInterval24.setPeriodAfterStart(readablePeriod25);
        org.joda.time.Period period27 = mutableInterval24.toPeriod();
        org.joda.time.MutableInterval mutableInterval28 = mutableInterval24.copy();
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MutableInterval mutableInterval32 = new org.joda.time.MutableInterval(0L, 1L, chronology31);
        org.joda.time.Interval interval33 = mutableInterval32.toInterval();
        java.lang.Object obj34 = mutableInterval32.clone();
        mutableInterval32.setStartMillis((long) (short) -1);
        org.joda.time.Chronology chronology37 = mutableInterval32.getChronology();
        org.joda.time.MutableInterval mutableInterval38 = mutableInterval32.toMutableInterval();
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.MutableInterval mutableInterval42 = new org.joda.time.MutableInterval(0L, 1L, chronology41);
        org.joda.time.Interval interval43 = mutableInterval42.toInterval();
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.MutableInterval mutableInterval47 = new org.joda.time.MutableInterval(0L, 1L, chronology46);
        org.joda.time.Interval interval48 = mutableInterval47.toInterval();
        mutableInterval47.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.MutableInterval mutableInterval54 = new org.joda.time.MutableInterval(0L, 1L, chronology53);
        org.joda.time.Interval interval55 = mutableInterval54.toInterval();
        long long56 = interval55.getEndMillis();
        boolean boolean58 = interval55.isAfter((long) (byte) 100);
        boolean boolean59 = mutableInterval47.overlaps((org.joda.time.ReadableInterval) interval55);
        org.joda.time.Duration duration60 = mutableInterval47.toDuration();
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.MutableInterval mutableInterval64 = new org.joda.time.MutableInterval(0L, 1L, chronology63);
        org.joda.time.Interval interval65 = mutableInterval64.toInterval();
        org.joda.time.DateTime dateTime66 = mutableInterval64.getStart();
        org.joda.time.ReadableInstant readableInstant67 = null;
        org.joda.time.ReadablePeriod readablePeriod68 = null;
        org.joda.time.MutableInterval mutableInterval69 = new org.joda.time.MutableInterval(readableInstant67, readablePeriod68);
        org.joda.time.Chronology chronology72 = null;
        org.joda.time.MutableInterval mutableInterval73 = new org.joda.time.MutableInterval(0L, 1L, chronology72);
        org.joda.time.Interval interval74 = mutableInterval73.toInterval();
        org.joda.time.DateTime dateTime75 = mutableInterval73.getStart();
        org.joda.time.Chronology chronology78 = null;
        org.joda.time.MutableInterval mutableInterval79 = new org.joda.time.MutableInterval(0L, 1L, chronology78);
        org.joda.time.Interval interval80 = mutableInterval79.toInterval();
        org.joda.time.DateTime dateTime81 = mutableInterval79.getStart();
        mutableInterval69.setInterval((org.joda.time.ReadableInstant) dateTime75, (org.joda.time.ReadableInstant) dateTime81);
        org.joda.time.MutableInterval mutableInterval83 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime66, (org.joda.time.ReadableInstant) dateTime81);
        org.joda.time.MutableInterval mutableInterval84 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration60, (org.joda.time.ReadableInstant) dateTime81);
        mutableInterval42.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration60);
        mutableInterval38.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration60);
        boolean boolean87 = mutableInterval24.contains((org.joda.time.ReadableInterval) mutableInterval38);
        boolean boolean88 = mutableInterval9.isBefore((org.joda.time.ReadableInterval) mutableInterval38);
        mutableInterval9.setDurationAfterStart(1606267426265L);
        org.joda.time.Interval interval91 = mutableInterval9.toInterval();
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertEquals(obj11.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj11), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj11), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(mutableInterval15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertEquals(obj22.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj22), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj22), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(mutableInterval28);
        org.junit.Assert.assertNotNull(interval33);
        org.junit.Assert.assertNotNull(obj34);
        org.junit.Assert.assertEquals(obj34.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj34), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj34), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(mutableInterval38);
        org.junit.Assert.assertNotNull(interval43);
        org.junit.Assert.assertNotNull(interval48);
        org.junit.Assert.assertNotNull(interval55);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 1L + "'", long56 == 1L);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(duration60);
        org.junit.Assert.assertNotNull(interval65);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(interval74);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertNotNull(interval80);
        org.junit.Assert.assertNotNull(dateTime81);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(interval91);
    }

    @Test
    @Ignore
  public void test1619() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1619");
        org.joda.time.MutableInterval mutableInterval1 = org.joda.time.MutableInterval.parse("2020-11-25T01:25:01.147Z/2020-11-25T01:25:01.147Z");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MutableInterval mutableInterval5 = new org.joda.time.MutableInterval(0L, 1L, chronology4);
        org.joda.time.Interval interval6 = mutableInterval5.toInterval();
        java.lang.Object obj7 = mutableInterval5.clone();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutableInterval mutableInterval9 = new org.joda.time.MutableInterval(obj7, chronology8);
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        mutableInterval9.setPeriodAfterStart(readablePeriod10);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutableInterval mutableInterval15 = new org.joda.time.MutableInterval(0L, 1L, chronology14);
        org.joda.time.Interval interval16 = mutableInterval15.toInterval();
        java.lang.Object obj17 = mutableInterval15.clone();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.MutableInterval mutableInterval19 = new org.joda.time.MutableInterval(obj17, chronology18);
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        mutableInterval19.setPeriodAfterStart(readablePeriod20);
        org.joda.time.Period period22 = mutableInterval19.toPeriod();
        org.joda.time.MutableInterval mutableInterval23 = mutableInterval19.copy();
        long long24 = mutableInterval19.getEndMillis();
        boolean boolean25 = mutableInterval9.isAfter((org.joda.time.ReadableInterval) mutableInterval19);
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.MutableInterval mutableInterval28 = new org.joda.time.MutableInterval(readableInstant26, readablePeriod27);
        mutableInterval28.setDurationBeforeEnd(1L);
        org.joda.time.MutableInterval mutableInterval31 = mutableInterval28.toMutableInterval();
        org.joda.time.Period period32 = mutableInterval28.toPeriod();
        org.joda.time.ReadablePeriod readablePeriod33 = null;
        org.joda.time.ReadablePeriod readablePeriod34 = null;
        org.joda.time.ReadableInstant readableInstant35 = null;
        org.joda.time.ReadablePeriod readablePeriod36 = null;
        org.joda.time.MutableInterval mutableInterval37 = new org.joda.time.MutableInterval(readableInstant35, readablePeriod36);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.MutableInterval mutableInterval41 = new org.joda.time.MutableInterval(0L, 1L, chronology40);
        org.joda.time.Interval interval42 = mutableInterval41.toInterval();
        org.joda.time.DateTime dateTime43 = mutableInterval41.getStart();
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.MutableInterval mutableInterval47 = new org.joda.time.MutableInterval(0L, 1L, chronology46);
        org.joda.time.Interval interval48 = mutableInterval47.toInterval();
        org.joda.time.DateTime dateTime49 = mutableInterval47.getStart();
        mutableInterval37.setInterval((org.joda.time.ReadableInstant) dateTime43, (org.joda.time.ReadableInstant) dateTime49);
        org.joda.time.MutableInterval mutableInterval51 = new org.joda.time.MutableInterval(readablePeriod34, (org.joda.time.ReadableInstant) dateTime43);
        org.joda.time.MutableInterval mutableInterval52 = new org.joda.time.MutableInterval(readablePeriod33, (org.joda.time.ReadableInstant) dateTime43);
        org.joda.time.ReadableInstant readableInstant53 = null;
        org.joda.time.ReadablePeriod readablePeriod54 = null;
        org.joda.time.MutableInterval mutableInterval55 = new org.joda.time.MutableInterval(readableInstant53, readablePeriod54);
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.MutableInterval mutableInterval59 = new org.joda.time.MutableInterval(0L, 1L, chronology58);
        org.joda.time.Interval interval60 = mutableInterval59.toInterval();
        org.joda.time.DateTime dateTime61 = mutableInterval59.getStart();
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.MutableInterval mutableInterval65 = new org.joda.time.MutableInterval(0L, 1L, chronology64);
        org.joda.time.Interval interval66 = mutableInterval65.toInterval();
        org.joda.time.DateTime dateTime67 = mutableInterval65.getStart();
        mutableInterval55.setInterval((org.joda.time.ReadableInstant) dateTime61, (org.joda.time.ReadableInstant) dateTime67);
        org.joda.time.MutableInterval mutableInterval69 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime43, (org.joda.time.ReadableInstant) dateTime61);
        boolean boolean70 = mutableInterval28.isAfter((org.joda.time.ReadableInstant) dateTime61);
        boolean boolean71 = mutableInterval9.contains((org.joda.time.ReadableInstant) dateTime61);
        mutableInterval1.setStart((org.joda.time.ReadableInstant) dateTime61);
        org.joda.time.ReadableDuration readableDuration73 = null;
        org.joda.time.MutableInterval mutableInterval74 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime61, readableDuration73);
        // The following exception was thrown during execution in test generation
        try {
            mutableInterval74.setInterval(1606267303785L, (long) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableInterval1);
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertNotNull(obj17);
        org.junit.Assert.assertEquals(obj17.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj17), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj17), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(mutableInterval23);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(mutableInterval31);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertNotNull(interval42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(interval48);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(interval60);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(interval66);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
    }

    @Test
    @Ignore
  public void test1620() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1620");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        java.lang.Object obj5 = mutableInterval3.clone();
        org.joda.time.Interval interval6 = mutableInterval3.toInterval();
        mutableInterval3.setDurationBeforeEnd(0L);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval(0L, 1L, chronology11);
        org.joda.time.Interval interval13 = mutableInterval12.toInterval();
        java.lang.Object obj14 = mutableInterval12.clone();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MutableInterval mutableInterval16 = new org.joda.time.MutableInterval(obj14, chronology15);
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        mutableInterval16.setPeriodBeforeEnd(readablePeriod17);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.MutableInterval mutableInterval22 = new org.joda.time.MutableInterval(0L, 1L, chronology21);
        org.joda.time.Interval interval23 = mutableInterval22.toInterval();
        mutableInterval22.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MutableInterval mutableInterval29 = new org.joda.time.MutableInterval(0L, 1L, chronology28);
        org.joda.time.Interval interval30 = mutableInterval29.toInterval();
        long long31 = interval30.getEndMillis();
        boolean boolean33 = interval30.isAfter((long) (byte) 100);
        boolean boolean34 = mutableInterval22.overlaps((org.joda.time.ReadableInterval) interval30);
        org.joda.time.Duration duration35 = mutableInterval22.toDuration();
        boolean boolean36 = mutableInterval16.isBefore((org.joda.time.ReadableInterval) mutableInterval22);
        org.joda.time.MutableInterval mutableInterval37 = mutableInterval22.toMutableInterval();
        boolean boolean38 = mutableInterval3.overlaps((org.joda.time.ReadableInterval) mutableInterval37);
        boolean boolean40 = mutableInterval37.contains(1606267316350L);
        org.joda.time.Chronology chronology41 = mutableInterval37.getChronology();
        long long42 = mutableInterval37.getStartMillis();
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(obj14);
        org.junit.Assert.assertEquals(obj14.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj14), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj14), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertNotNull(interval30);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 1L + "'", long31 == 1L);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(mutableInterval37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
    }

    @Test
    @Ignore
  public void test1621() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1621");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MutableInterval mutableInterval5 = new org.joda.time.MutableInterval(0L, 1L, chronology4);
        org.joda.time.Interval interval6 = mutableInterval5.toInterval();
        mutableInterval5.setDurationAfterStart((long) (byte) 1);
        org.joda.time.ReadableInstant readableInstant9 = null;
        mutableInterval5.setEnd(readableInstant9);
        mutableInterval5.setEndMillis((long) (byte) 10);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MutableInterval mutableInterval16 = new org.joda.time.MutableInterval(0L, 1L, chronology15);
        org.joda.time.Interval interval17 = mutableInterval16.toInterval();
        org.joda.time.DateTime dateTime18 = mutableInterval16.getStart();
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.MutableInterval mutableInterval21 = new org.joda.time.MutableInterval(readableInstant19, readablePeriod20);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MutableInterval mutableInterval25 = new org.joda.time.MutableInterval(0L, 1L, chronology24);
        org.joda.time.Interval interval26 = mutableInterval25.toInterval();
        org.joda.time.DateTime dateTime27 = mutableInterval25.getStart();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.MutableInterval mutableInterval31 = new org.joda.time.MutableInterval(0L, 1L, chronology30);
        org.joda.time.Interval interval32 = mutableInterval31.toInterval();
        org.joda.time.DateTime dateTime33 = mutableInterval31.getStart();
        mutableInterval21.setInterval((org.joda.time.ReadableInstant) dateTime27, (org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.MutableInterval mutableInterval35 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime18, (org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.DateTime dateTime36 = mutableInterval35.getStart();
        org.joda.time.DateTime dateTime37 = mutableInterval35.getEnd();
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.MutableInterval mutableInterval41 = new org.joda.time.MutableInterval(0L, 1L, chronology40);
        org.joda.time.Interval interval42 = mutableInterval41.toInterval();
        mutableInterval41.setDurationAfterStart((long) (byte) 1);
        boolean boolean46 = mutableInterval41.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.MutableInterval mutableInterval50 = new org.joda.time.MutableInterval(0L, 1L, chronology49);
        org.joda.time.Interval interval51 = mutableInterval50.toInterval();
        java.lang.Object obj52 = mutableInterval50.clone();
        mutableInterval50.setStartMillis((long) (short) -1);
        org.joda.time.Chronology chronology55 = mutableInterval50.getChronology();
        mutableInterval41.setChronology(chronology55);
        mutableInterval35.setChronology(chronology55);
        org.joda.time.MutableInterval mutableInterval58 = new org.joda.time.MutableInterval((java.lang.Object) mutableInterval5, chronology55);
        org.joda.time.MutableInterval mutableInterval59 = new org.joda.time.MutableInterval((long) (byte) 10, 1606267388950L, chronology55);
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.MutableInterval mutableInterval63 = new org.joda.time.MutableInterval(0L, 1L, chronology62);
        org.joda.time.Interval interval64 = mutableInterval63.toInterval();
        boolean boolean66 = mutableInterval63.contains((long) ' ');
        mutableInterval59.setInterval((org.joda.time.ReadableInterval) mutableInterval63);
        org.joda.time.MutableInterval mutableInterval68 = mutableInterval63.copy();
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertNotNull(interval17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(interval32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(interval42);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(interval51);
        org.junit.Assert.assertNotNull(obj52);
        org.junit.Assert.assertEquals(obj52.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj52), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj52), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertNotNull(interval64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(mutableInterval68);
    }

    @Test
    public void test1622() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1622");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        mutableInterval3.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval(0L, 1L, chronology9);
        org.joda.time.Interval interval11 = mutableInterval10.toInterval();
        long long12 = interval11.getEndMillis();
        boolean boolean14 = interval11.isAfter((long) (byte) 100);
        boolean boolean15 = mutableInterval3.overlaps((org.joda.time.ReadableInterval) interval11);
        org.joda.time.Duration duration16 = mutableInterval3.toDuration();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval(0L, 1L, chronology19);
        org.joda.time.Interval interval21 = mutableInterval20.toInterval();
        org.joda.time.DateTime dateTime22 = mutableInterval20.getStart();
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.MutableInterval mutableInterval25 = new org.joda.time.MutableInterval(readableInstant23, readablePeriod24);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MutableInterval mutableInterval29 = new org.joda.time.MutableInterval(0L, 1L, chronology28);
        org.joda.time.Interval interval30 = mutableInterval29.toInterval();
        org.joda.time.DateTime dateTime31 = mutableInterval29.getStart();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MutableInterval mutableInterval35 = new org.joda.time.MutableInterval(0L, 1L, chronology34);
        org.joda.time.Interval interval36 = mutableInterval35.toInterval();
        org.joda.time.DateTime dateTime37 = mutableInterval35.getStart();
        mutableInterval25.setInterval((org.joda.time.ReadableInstant) dateTime31, (org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.MutableInterval mutableInterval39 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime22, (org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.MutableInterval mutableInterval40 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration16, (org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.ReadablePeriod readablePeriod41 = null;
        mutableInterval40.setPeriodAfterStart(readablePeriod41);
        long long43 = mutableInterval40.getEndMillis();
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(interval30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(interval36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + (-1L) + "'", long43 == (-1L));
    }

    @Test
    @Ignore
  public void test1623() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1623");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        java.lang.Object obj5 = mutableInterval3.clone();
        mutableInterval3.setStartMillis((long) (short) -1);
        org.joda.time.Chronology chronology8 = mutableInterval3.getChronology();
        org.joda.time.MutableInterval mutableInterval9 = mutableInterval3.toMutableInterval();
        org.joda.time.MutableInterval mutableInterval10 = mutableInterval3.copy();
        org.joda.time.Duration duration11 = mutableInterval3.toDuration();
        org.joda.time.DateTime dateTime12 = mutableInterval3.getStart();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MutableInterval mutableInterval16 = new org.joda.time.MutableInterval(0L, 1L, chronology15);
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        mutableInterval16.setPeriodAfterStart(readablePeriod17);
        org.joda.time.MutableInterval mutableInterval19 = mutableInterval16.toMutableInterval();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.MutableInterval mutableInterval23 = new org.joda.time.MutableInterval(0L, 1L, chronology22);
        long long24 = mutableInterval23.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval25 = mutableInterval23.copy();
        org.joda.time.Period period26 = mutableInterval23.toPeriod();
        mutableInterval16.setPeriodAfterStart((org.joda.time.ReadablePeriod) period26);
        org.joda.time.MutableInterval mutableInterval28 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime12, (org.joda.time.ReadablePeriod) period26);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MutableInterval mutableInterval32 = new org.joda.time.MutableInterval(0L, 1L, chronology31);
        org.joda.time.Interval interval33 = mutableInterval32.toInterval();
        boolean boolean35 = mutableInterval32.contains((long) ' ');
        org.joda.time.MutableInterval mutableInterval36 = mutableInterval32.copy();
        org.joda.time.MutableInterval mutableInterval39 = new org.joda.time.MutableInterval(10L, (long) (short) 100);
        org.joda.time.ReadableDuration readableDuration40 = null;
        org.joda.time.ReadableInstant readableInstant41 = null;
        org.joda.time.MutableInterval mutableInterval42 = new org.joda.time.MutableInterval(readableDuration40, readableInstant41);
        org.joda.time.PeriodType periodType43 = null;
        org.joda.time.Period period44 = mutableInterval42.toPeriod(periodType43);
        mutableInterval39.setPeriodBeforeEnd((org.joda.time.ReadablePeriod) period44);
        mutableInterval36.setPeriodAfterStart((org.joda.time.ReadablePeriod) period44);
        org.joda.time.MutableInterval mutableInterval47 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime12, (org.joda.time.ReadablePeriod) period44);
        boolean boolean49 = mutableInterval47.isBefore(1606267379550L);
        mutableInterval47.setDurationAfterStart(1606267303785L);
        org.joda.time.DateTime dateTime52 = mutableInterval47.getStart();
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(mutableInterval9);
        org.junit.Assert.assertNotNull(mutableInterval10);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(mutableInterval19);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 1L + "'", long24 == 1L);
        org.junit.Assert.assertNotNull(mutableInterval25);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(interval33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(mutableInterval36);
        org.junit.Assert.assertNotNull(period44);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(dateTime52);
    }

    @Test
    @Ignore
  public void test1624() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1624");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadablePeriod readablePeriod1 = null;
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval(readableInstant0, readablePeriod1);
        mutableInterval2.setDurationBeforeEnd(1L);
        org.joda.time.MutableInterval mutableInterval5 = mutableInterval2.toMutableInterval();
        org.joda.time.MutableInterval mutableInterval7 = org.joda.time.MutableInterval.parse("1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MutableInterval mutableInterval11 = new org.joda.time.MutableInterval(0L, 1L, chronology10);
        org.joda.time.Interval interval12 = mutableInterval11.toInterval();
        java.lang.Object obj13 = mutableInterval11.clone();
        org.joda.time.Interval interval14 = mutableInterval11.toInterval();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutableInterval mutableInterval18 = new org.joda.time.MutableInterval(0L, 1L, chronology17);
        org.joda.time.Interval interval19 = mutableInterval18.toInterval();
        java.lang.Object obj20 = mutableInterval18.clone();
        boolean boolean21 = interval14.isBefore((org.joda.time.ReadableInterval) mutableInterval18);
        boolean boolean22 = mutableInterval7.isAfter((org.joda.time.ReadableInterval) mutableInterval18);
        org.joda.time.MutableInterval mutableInterval23 = mutableInterval18.toMutableInterval();
        org.joda.time.PeriodType periodType24 = null;
        org.joda.time.Period period25 = mutableInterval18.toPeriod(periodType24);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MutableInterval mutableInterval29 = new org.joda.time.MutableInterval(0L, 1L, chronology28);
        org.joda.time.Interval interval30 = mutableInterval29.toInterval();
        java.lang.Object obj31 = mutableInterval29.clone();
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.MutableInterval mutableInterval33 = new org.joda.time.MutableInterval(obj31, chronology32);
        org.joda.time.DateTime dateTime34 = mutableInterval33.getEnd();
        boolean boolean35 = mutableInterval18.contains((org.joda.time.ReadableInterval) mutableInterval33);
        org.joda.time.PeriodType periodType36 = null;
        org.joda.time.Period period37 = mutableInterval18.toPeriod(periodType36);
        mutableInterval5.setPeriodAfterStart((org.joda.time.ReadablePeriod) period37);
        org.joda.time.ReadableInstant readableInstant39 = null;
        org.joda.time.ReadablePeriod readablePeriod40 = null;
        org.joda.time.MutableInterval mutableInterval41 = new org.joda.time.MutableInterval(readableInstant39, readablePeriod40);
        mutableInterval41.setDurationBeforeEnd(1L);
        org.joda.time.MutableInterval mutableInterval44 = mutableInterval41.toMutableInterval();
        org.joda.time.MutableInterval mutableInterval45 = new org.joda.time.MutableInterval((java.lang.Object) mutableInterval44);
        org.joda.time.DateTime dateTime46 = mutableInterval45.getStart();
        org.joda.time.MutableInterval mutableInterval47 = new org.joda.time.MutableInterval((org.joda.time.ReadablePeriod) period37, (org.joda.time.ReadableInstant) dateTime46);
        org.junit.Assert.assertNotNull(mutableInterval5);
        org.junit.Assert.assertNotNull(mutableInterval7);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(obj13.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertNotNull(obj20);
        org.junit.Assert.assertEquals(obj20.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj20), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj20), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(mutableInterval23);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(interval30);
        org.junit.Assert.assertNotNull(obj31);
        org.junit.Assert.assertEquals(obj31.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj31), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj31), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertNotNull(mutableInterval44);
        org.junit.Assert.assertNotNull(dateTime46);
    }

    @Test
    public void test1625() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1625");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadablePeriod readablePeriod1 = null;
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval(readableInstant0, readablePeriod1);
        mutableInterval2.setDurationBeforeEnd(1L);
        org.joda.time.MutableInterval mutableInterval5 = mutableInterval2.toMutableInterval();
        org.joda.time.DateTime dateTime6 = mutableInterval5.getEnd();
        org.joda.time.MutableInterval mutableInterval7 = mutableInterval5.toMutableInterval();
        org.joda.time.DateTime dateTime8 = mutableInterval7.getStart();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval(0L, 1L, chronology11);
        org.joda.time.Interval interval13 = mutableInterval12.toInterval();
        mutableInterval12.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.MutableInterval mutableInterval19 = new org.joda.time.MutableInterval(0L, 1L, chronology18);
        org.joda.time.Interval interval20 = mutableInterval19.toInterval();
        long long21 = interval20.getEndMillis();
        boolean boolean23 = interval20.isAfter((long) (byte) 100);
        boolean boolean24 = mutableInterval12.overlaps((org.joda.time.ReadableInterval) interval20);
        org.joda.time.Duration duration25 = mutableInterval12.toDuration();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MutableInterval mutableInterval29 = new org.joda.time.MutableInterval(0L, 1L, chronology28);
        org.joda.time.Interval interval30 = mutableInterval29.toInterval();
        org.joda.time.DateTime dateTime31 = mutableInterval29.getStart();
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.ReadablePeriod readablePeriod33 = null;
        org.joda.time.MutableInterval mutableInterval34 = new org.joda.time.MutableInterval(readableInstant32, readablePeriod33);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.MutableInterval mutableInterval38 = new org.joda.time.MutableInterval(0L, 1L, chronology37);
        org.joda.time.Interval interval39 = mutableInterval38.toInterval();
        org.joda.time.DateTime dateTime40 = mutableInterval38.getStart();
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.MutableInterval mutableInterval44 = new org.joda.time.MutableInterval(0L, 1L, chronology43);
        org.joda.time.Interval interval45 = mutableInterval44.toInterval();
        org.joda.time.DateTime dateTime46 = mutableInterval44.getStart();
        mutableInterval34.setInterval((org.joda.time.ReadableInstant) dateTime40, (org.joda.time.ReadableInstant) dateTime46);
        org.joda.time.MutableInterval mutableInterval48 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime31, (org.joda.time.ReadableInstant) dateTime46);
        org.joda.time.MutableInterval mutableInterval49 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration25, (org.joda.time.ReadableInstant) dateTime46);
        org.joda.time.ReadablePeriod readablePeriod50 = null;
        mutableInterval49.setPeriodAfterStart(readablePeriod50);
        org.joda.time.Chronology chronology52 = mutableInterval49.getChronology();
        org.joda.time.MutableInterval mutableInterval53 = new org.joda.time.MutableInterval((java.lang.Object) mutableInterval7, chronology52);
        boolean boolean54 = mutableInterval7.isBeforeNow();
        org.joda.time.Chronology chronology55 = mutableInterval7.getChronology();
        org.junit.Assert.assertNotNull(mutableInterval5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(mutableInterval7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(interval20);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 1L + "'", long21 == 1L);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(interval30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(interval39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(interval45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(chronology55);
    }

    @Test
    @Ignore
  public void test1626() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1626");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MutableInterval mutableInterval4 = new org.joda.time.MutableInterval(0L, 1L, chronology3);
        org.joda.time.Interval interval5 = mutableInterval4.toInterval();
        org.joda.time.DateTime dateTime6 = mutableInterval4.getStart();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval(0L, 1L, chronology9);
        org.joda.time.Interval interval11 = mutableInterval10.toInterval();
        java.lang.Object obj12 = mutableInterval10.clone();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutableInterval mutableInterval14 = new org.joda.time.MutableInterval(obj12, chronology13);
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        mutableInterval14.setPeriodAfterStart(readablePeriod15);
        org.joda.time.Period period17 = mutableInterval14.toPeriod();
        org.joda.time.MutableInterval mutableInterval18 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime6, (org.joda.time.ReadablePeriod) period17);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.MutableInterval mutableInterval22 = new org.joda.time.MutableInterval(0L, 1L, chronology21);
        org.joda.time.Interval interval23 = mutableInterval22.toInterval();
        java.lang.Object obj24 = mutableInterval22.clone();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MutableInterval mutableInterval26 = new org.joda.time.MutableInterval(obj24, chronology25);
        org.joda.time.Duration duration27 = mutableInterval26.toDuration();
        org.joda.time.MutableInterval mutableInterval28 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime6, (org.joda.time.ReadableDuration) duration27);
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.MutableInterval mutableInterval31 = new org.joda.time.MutableInterval(readableInstant29, readablePeriod30);
        long long32 = mutableInterval31.getEndMillis();
        org.joda.time.MutableInterval mutableInterval33 = mutableInterval31.copy();
        org.joda.time.ReadableDuration readableDuration34 = null;
        org.joda.time.ReadableInstant readableInstant35 = null;
        org.joda.time.MutableInterval mutableInterval36 = new org.joda.time.MutableInterval(readableDuration34, readableInstant35);
        org.joda.time.PeriodType periodType37 = null;
        org.joda.time.Period period38 = mutableInterval36.toPeriod(periodType37);
        mutableInterval31.setPeriodBeforeEnd((org.joda.time.ReadablePeriod) period38);
        org.joda.time.DateTime dateTime40 = mutableInterval31.getStart();
        org.joda.time.MutableInterval mutableInterval41 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration27, (org.joda.time.ReadableInstant) dateTime40);
        org.joda.time.MutableInterval mutableInterval42 = new org.joda.time.MutableInterval(readableInstant0, (org.joda.time.ReadableDuration) duration27);
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(obj12);
        org.junit.Assert.assertEquals(obj12.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj12), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj12), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertNotNull(obj24);
        org.junit.Assert.assertEquals(obj24.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj24), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj24), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(duration27);
// flaky:         org.junit.Assert.assertTrue("'" + long32 + "' != '" + 1606267581406L + "'", long32 == 1606267581406L);
        org.junit.Assert.assertNotNull(mutableInterval33);
        org.junit.Assert.assertNotNull(period38);
        org.junit.Assert.assertNotNull(dateTime40);
    }

    @Test
    @Ignore
  public void test1627() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1627");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadablePeriod readablePeriod1 = null;
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval(readableInstant0, readablePeriod1);
        long long3 = mutableInterval2.getEndMillis();
        org.joda.time.MutableInterval mutableInterval4 = mutableInterval2.copy();
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval(readableDuration5, readableInstant6);
        org.joda.time.PeriodType periodType8 = null;
        org.joda.time.Period period9 = mutableInterval7.toPeriod(periodType8);
        mutableInterval2.setPeriodBeforeEnd((org.joda.time.ReadablePeriod) period9);
        org.joda.time.DateTime dateTime11 = mutableInterval2.getStart();
        mutableInterval2.setDurationBeforeEnd((long) (short) 10);
        boolean boolean15 = mutableInterval2.contains(10L);
        org.joda.time.Period period16 = mutableInterval2.toPeriod();
        org.joda.time.Interval interval17 = mutableInterval2.toInterval();
        org.joda.time.DateTime dateTime18 = mutableInterval2.getStart();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.MutableInterval mutableInterval22 = new org.joda.time.MutableInterval(0L, 1L, chronology21);
        org.joda.time.Interval interval23 = mutableInterval22.toInterval();
        mutableInterval22.setDurationAfterStart((long) (byte) 1);
        org.joda.time.ReadableInstant readableInstant26 = null;
        mutableInterval22.setEnd(readableInstant26);
        mutableInterval22.setEndMillis((long) (byte) 10);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.MutableInterval mutableInterval33 = new org.joda.time.MutableInterval(0L, 1L, chronology32);
        org.joda.time.Interval interval34 = mutableInterval33.toInterval();
        org.joda.time.DateTime dateTime35 = mutableInterval33.getStart();
        org.joda.time.ReadableInstant readableInstant36 = null;
        org.joda.time.ReadablePeriod readablePeriod37 = null;
        org.joda.time.MutableInterval mutableInterval38 = new org.joda.time.MutableInterval(readableInstant36, readablePeriod37);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.MutableInterval mutableInterval42 = new org.joda.time.MutableInterval(0L, 1L, chronology41);
        org.joda.time.Interval interval43 = mutableInterval42.toInterval();
        org.joda.time.DateTime dateTime44 = mutableInterval42.getStart();
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.MutableInterval mutableInterval48 = new org.joda.time.MutableInterval(0L, 1L, chronology47);
        org.joda.time.Interval interval49 = mutableInterval48.toInterval();
        org.joda.time.DateTime dateTime50 = mutableInterval48.getStart();
        mutableInterval38.setInterval((org.joda.time.ReadableInstant) dateTime44, (org.joda.time.ReadableInstant) dateTime50);
        org.joda.time.MutableInterval mutableInterval52 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime35, (org.joda.time.ReadableInstant) dateTime50);
        org.joda.time.DateTime dateTime53 = mutableInterval52.getStart();
        org.joda.time.DateTime dateTime54 = mutableInterval52.getEnd();
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.MutableInterval mutableInterval58 = new org.joda.time.MutableInterval(0L, 1L, chronology57);
        org.joda.time.Interval interval59 = mutableInterval58.toInterval();
        mutableInterval58.setDurationAfterStart((long) (byte) 1);
        boolean boolean63 = mutableInterval58.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.MutableInterval mutableInterval67 = new org.joda.time.MutableInterval(0L, 1L, chronology66);
        org.joda.time.Interval interval68 = mutableInterval67.toInterval();
        java.lang.Object obj69 = mutableInterval67.clone();
        mutableInterval67.setStartMillis((long) (short) -1);
        org.joda.time.Chronology chronology72 = mutableInterval67.getChronology();
        mutableInterval58.setChronology(chronology72);
        mutableInterval52.setChronology(chronology72);
        org.joda.time.MutableInterval mutableInterval75 = new org.joda.time.MutableInterval((java.lang.Object) mutableInterval22, chronology72);
        boolean boolean76 = mutableInterval2.isBefore((org.joda.time.ReadableInterval) mutableInterval22);
        java.lang.Object obj77 = mutableInterval2.clone();
// flaky:         org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1606267581554L + "'", long3 == 1606267581554L);
        org.junit.Assert.assertNotNull(mutableInterval4);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(interval17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertNotNull(interval34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(interval43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(interval49);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(interval59);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(interval68);
        org.junit.Assert.assertNotNull(obj69);
        org.junit.Assert.assertEquals(obj69.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj69), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj69), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(chronology72);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(obj77);
// flaky:         org.junit.Assert.assertEquals(obj77.toString(), "2020-11-25T01:26:21.544Z/2020-11-25T01:26:21.554Z");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj77), "2020-11-25T01:26:21.544Z/2020-11-25T01:26:21.554Z");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj77), "2020-11-25T01:26:21.544Z/2020-11-25T01:26:21.554Z");
    }

    @Test
    @Ignore
  public void test1628() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1628");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        java.lang.Object obj5 = mutableInterval3.clone();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval(obj5, chronology6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        mutableInterval7.setPeriodBeforeEnd(readablePeriod8);
        mutableInterval7.setDurationBeforeEnd((long) 100);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutableInterval mutableInterval15 = new org.joda.time.MutableInterval(0L, 1L, chronology14);
        org.joda.time.Interval interval16 = mutableInterval15.toInterval();
        mutableInterval15.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.MutableInterval mutableInterval22 = new org.joda.time.MutableInterval(0L, 1L, chronology21);
        org.joda.time.Interval interval23 = mutableInterval22.toInterval();
        long long24 = interval23.getEndMillis();
        boolean boolean26 = interval23.isAfter((long) (byte) 100);
        boolean boolean27 = mutableInterval15.overlaps((org.joda.time.ReadableInterval) interval23);
        org.joda.time.Duration duration28 = mutableInterval15.toDuration();
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MutableInterval mutableInterval32 = new org.joda.time.MutableInterval(0L, 1L, chronology31);
        org.joda.time.Interval interval33 = mutableInterval32.toInterval();
        org.joda.time.DateTime dateTime34 = mutableInterval32.getStart();
        org.joda.time.ReadableInstant readableInstant35 = null;
        org.joda.time.ReadablePeriod readablePeriod36 = null;
        org.joda.time.MutableInterval mutableInterval37 = new org.joda.time.MutableInterval(readableInstant35, readablePeriod36);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.MutableInterval mutableInterval41 = new org.joda.time.MutableInterval(0L, 1L, chronology40);
        org.joda.time.Interval interval42 = mutableInterval41.toInterval();
        org.joda.time.DateTime dateTime43 = mutableInterval41.getStart();
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.MutableInterval mutableInterval47 = new org.joda.time.MutableInterval(0L, 1L, chronology46);
        org.joda.time.Interval interval48 = mutableInterval47.toInterval();
        org.joda.time.DateTime dateTime49 = mutableInterval47.getStart();
        mutableInterval37.setInterval((org.joda.time.ReadableInstant) dateTime43, (org.joda.time.ReadableInstant) dateTime49);
        org.joda.time.MutableInterval mutableInterval51 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime34, (org.joda.time.ReadableInstant) dateTime49);
        org.joda.time.MutableInterval mutableInterval52 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration28, (org.joda.time.ReadableInstant) dateTime49);
        org.joda.time.ReadableInstant readableInstant53 = null;
        org.joda.time.ReadablePeriod readablePeriod54 = null;
        org.joda.time.MutableInterval mutableInterval55 = new org.joda.time.MutableInterval(readableInstant53, readablePeriod54);
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.MutableInterval mutableInterval59 = new org.joda.time.MutableInterval(0L, 1L, chronology58);
        org.joda.time.Interval interval60 = mutableInterval59.toInterval();
        org.joda.time.DateTime dateTime61 = mutableInterval59.getStart();
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.MutableInterval mutableInterval65 = new org.joda.time.MutableInterval(0L, 1L, chronology64);
        org.joda.time.Interval interval66 = mutableInterval65.toInterval();
        org.joda.time.DateTime dateTime67 = mutableInterval65.getStart();
        mutableInterval55.setInterval((org.joda.time.ReadableInstant) dateTime61, (org.joda.time.ReadableInstant) dateTime67);
        org.joda.time.MutableInterval mutableInterval69 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration28, (org.joda.time.ReadableInstant) dateTime61);
        boolean boolean71 = mutableInterval69.isBefore((long) (byte) 1);
        boolean boolean72 = mutableInterval7.isAfter((org.joda.time.ReadableInterval) mutableInterval69);
        org.joda.time.MutableInterval mutableInterval73 = mutableInterval69.toMutableInterval();
        boolean boolean75 = mutableInterval69.isAfter((long) 'a');
        long long76 = mutableInterval69.getStartMillis();
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 1L + "'", long24 == 1L);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(interval33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(interval42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(interval48);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(interval60);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(interval66);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(mutableInterval73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + long76 + "' != '" + (-1L) + "'", long76 == (-1L));
    }

    @Test
    @Ignore
  public void test1629() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1629");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        org.joda.time.DateTime dateTime5 = mutableInterval3.getStart();
        org.joda.time.Interval interval6 = mutableInterval3.toInterval();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval(0L, 1L, chronology9);
        org.joda.time.Interval interval11 = mutableInterval10.toInterval();
        org.joda.time.DateTime dateTime12 = mutableInterval10.getStart();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MutableInterval mutableInterval16 = new org.joda.time.MutableInterval(0L, 1L, chronology15);
        org.joda.time.Interval interval17 = mutableInterval16.toInterval();
        java.lang.Object obj18 = mutableInterval16.clone();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval(obj18, chronology19);
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        mutableInterval20.setPeriodAfterStart(readablePeriod21);
        org.joda.time.Period period23 = mutableInterval20.toPeriod();
        org.joda.time.MutableInterval mutableInterval24 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime12, (org.joda.time.ReadablePeriod) period23);
        boolean boolean25 = interval6.equals((java.lang.Object) dateTime12);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MutableInterval mutableInterval29 = new org.joda.time.MutableInterval(0L, 1L, chronology28);
        org.joda.time.Interval interval30 = mutableInterval29.toInterval();
        java.lang.Object obj31 = mutableInterval29.clone();
        mutableInterval29.setStartMillis((long) (short) -1);
        org.joda.time.Chronology chronology34 = mutableInterval29.getChronology();
        org.joda.time.MutableInterval mutableInterval35 = mutableInterval29.toMutableInterval();
        org.joda.time.MutableInterval mutableInterval36 = mutableInterval29.copy();
        boolean boolean37 = mutableInterval29.isAfterNow();
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.MutableInterval mutableInterval41 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology40);
        org.joda.time.ReadablePeriod readablePeriod42 = null;
        mutableInterval41.setPeriodBeforeEnd(readablePeriod42);
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.MutableInterval mutableInterval47 = new org.joda.time.MutableInterval(0L, 1L, chronology46);
        org.joda.time.Interval interval48 = mutableInterval47.toInterval();
        mutableInterval47.setDurationAfterStart((long) (byte) 1);
        boolean boolean52 = mutableInterval47.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology53 = mutableInterval47.getChronology();
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.MutableInterval mutableInterval57 = new org.joda.time.MutableInterval(0L, 1L, chronology56);
        org.joda.time.Interval interval58 = mutableInterval57.toInterval();
        java.lang.Object obj59 = mutableInterval57.clone();
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.MutableInterval mutableInterval61 = new org.joda.time.MutableInterval(obj59, chronology60);
        org.joda.time.ReadablePeriod readablePeriod62 = null;
        mutableInterval61.setPeriodAfterStart(readablePeriod62);
        org.joda.time.Period period64 = mutableInterval61.toPeriod();
        mutableInterval47.setPeriodBeforeEnd((org.joda.time.ReadablePeriod) period64);
        mutableInterval41.setPeriodBeforeEnd((org.joda.time.ReadablePeriod) period64);
        org.joda.time.Period period67 = mutableInterval41.toPeriod();
        mutableInterval29.setPeriodAfterStart((org.joda.time.ReadablePeriod) period67);
        org.joda.time.MutableInterval mutableInterval69 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime12, (org.joda.time.ReadablePeriod) period67);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(interval17);
        org.junit.Assert.assertNotNull(obj18);
        org.junit.Assert.assertEquals(obj18.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj18), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj18), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(interval30);
        org.junit.Assert.assertNotNull(obj31);
        org.junit.Assert.assertEquals(obj31.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj31), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj31), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(mutableInterval35);
        org.junit.Assert.assertNotNull(mutableInterval36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(interval48);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(interval58);
        org.junit.Assert.assertNotNull(obj59);
        org.junit.Assert.assertEquals(obj59.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj59), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj59), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(period64);
        org.junit.Assert.assertNotNull(period67);
    }

    @Test
    @Ignore
  public void test1630() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1630");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadablePeriod readablePeriod1 = null;
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval(readableInstant0, readablePeriod1);
        mutableInterval2.setDurationBeforeEnd(1L);
        org.joda.time.MutableInterval mutableInterval5 = mutableInterval2.toMutableInterval();
        java.lang.String str6 = mutableInterval2.toString();
        long long7 = mutableInterval2.getStartMillis();
        mutableInterval2.setInterval(1606267445776L, 1606267466518L);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutableInterval mutableInterval14 = new org.joda.time.MutableInterval(0L, 1L, chronology13);
        org.joda.time.Interval interval15 = mutableInterval14.toInterval();
        java.lang.Object obj16 = mutableInterval14.clone();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutableInterval mutableInterval18 = new org.joda.time.MutableInterval(obj16, chronology17);
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        mutableInterval18.setPeriodBeforeEnd(readablePeriod19);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MutableInterval mutableInterval24 = new org.joda.time.MutableInterval(0L, 1L, chronology23);
        org.joda.time.Interval interval25 = mutableInterval24.toInterval();
        mutableInterval24.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.MutableInterval mutableInterval31 = new org.joda.time.MutableInterval(0L, 1L, chronology30);
        org.joda.time.Interval interval32 = mutableInterval31.toInterval();
        long long33 = interval32.getEndMillis();
        boolean boolean35 = interval32.isAfter((long) (byte) 100);
        boolean boolean36 = mutableInterval24.overlaps((org.joda.time.ReadableInterval) interval32);
        org.joda.time.Duration duration37 = mutableInterval24.toDuration();
        boolean boolean38 = mutableInterval18.isBefore((org.joda.time.ReadableInterval) mutableInterval24);
        org.joda.time.MutableInterval mutableInterval39 = mutableInterval24.toMutableInterval();
        java.lang.String str40 = mutableInterval39.toString();
        org.joda.time.MutableInterval mutableInterval41 = new org.joda.time.MutableInterval((java.lang.Object) str40);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.MutableInterval mutableInterval45 = new org.joda.time.MutableInterval(0L, 1L, chronology44);
        org.joda.time.Interval interval46 = mutableInterval45.toInterval();
        java.lang.Object obj47 = mutableInterval45.clone();
        org.joda.time.Interval interval48 = mutableInterval45.toInterval();
        mutableInterval45.setDurationBeforeEnd(0L);
        org.joda.time.MutableInterval mutableInterval51 = mutableInterval45.copy();
        boolean boolean52 = mutableInterval41.isBefore((org.joda.time.ReadableInterval) mutableInterval51);
        boolean boolean53 = mutableInterval2.equals((java.lang.Object) boolean52);
        boolean boolean54 = mutableInterval2.containsNow();
        org.junit.Assert.assertNotNull(mutableInterval5);
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "2020-11-25T01:26:22.032Z/2020-11-25T01:26:22.033Z" + "'", str6, "2020-11-25T01:26:22.032Z/2020-11-25T01:26:22.033Z");
// flaky:         org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1606267582032L + "'", long7 == 1606267582032L);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(obj16);
        org.junit.Assert.assertEquals(obj16.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj16), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj16), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(interval32);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 1L + "'", long33 == 1L);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(mutableInterval39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z" + "'", str40, "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval46);
        org.junit.Assert.assertNotNull(obj47);
        org.junit.Assert.assertEquals(obj47.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj47), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj47), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval48);
        org.junit.Assert.assertNotNull(mutableInterval51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
    }

    @Test
    public void test1631() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1631");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MutableInterval mutableInterval5 = new org.joda.time.MutableInterval(0L, 1L, chronology4);
        org.joda.time.Interval interval6 = mutableInterval5.toInterval();
        mutableInterval5.setDurationAfterStart((long) (byte) 1);
        boolean boolean10 = mutableInterval5.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology11 = mutableInterval5.getChronology();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval(1606267513454L, 1606267384938L, chronology11);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(chronology11);
    }

    @Test
    @Ignore
  public void test1632() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1632");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        java.lang.Object obj5 = mutableInterval3.clone();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval(obj5, chronology6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        mutableInterval7.setPeriodBeforeEnd(readablePeriod8);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutableInterval mutableInterval13 = new org.joda.time.MutableInterval(0L, 1L, chronology12);
        org.joda.time.Interval interval14 = mutableInterval13.toInterval();
        mutableInterval13.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval(0L, 1L, chronology19);
        org.joda.time.Interval interval21 = mutableInterval20.toInterval();
        long long22 = interval21.getEndMillis();
        boolean boolean24 = interval21.isAfter((long) (byte) 100);
        boolean boolean25 = mutableInterval13.overlaps((org.joda.time.ReadableInterval) interval21);
        org.joda.time.Duration duration26 = mutableInterval13.toDuration();
        boolean boolean27 = mutableInterval7.isBefore((org.joda.time.ReadableInterval) mutableInterval13);
        org.joda.time.MutableInterval mutableInterval28 = mutableInterval13.toMutableInterval();
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        org.joda.time.MutableInterval mutableInterval32 = new org.joda.time.MutableInterval(readableInstant30, readablePeriod31);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.MutableInterval mutableInterval36 = new org.joda.time.MutableInterval(0L, 1L, chronology35);
        org.joda.time.Interval interval37 = mutableInterval36.toInterval();
        org.joda.time.DateTime dateTime38 = mutableInterval36.getStart();
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.MutableInterval mutableInterval42 = new org.joda.time.MutableInterval(0L, 1L, chronology41);
        org.joda.time.Interval interval43 = mutableInterval42.toInterval();
        org.joda.time.DateTime dateTime44 = mutableInterval42.getStart();
        mutableInterval32.setInterval((org.joda.time.ReadableInstant) dateTime38, (org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.MutableInterval mutableInterval46 = new org.joda.time.MutableInterval(readablePeriod29, (org.joda.time.ReadableInstant) dateTime38);
        mutableInterval13.setEnd((org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.MutableInterval mutableInterval51 = new org.joda.time.MutableInterval(0L, 1L, chronology50);
        org.joda.time.Interval interval52 = mutableInterval51.toInterval();
        mutableInterval51.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.MutableInterval mutableInterval58 = new org.joda.time.MutableInterval(0L, 1L, chronology57);
        org.joda.time.Interval interval59 = mutableInterval58.toInterval();
        long long60 = interval59.getEndMillis();
        boolean boolean62 = interval59.isAfter((long) (byte) 100);
        boolean boolean63 = mutableInterval51.overlaps((org.joda.time.ReadableInterval) interval59);
        boolean boolean64 = mutableInterval13.contains((org.joda.time.ReadableInterval) mutableInterval51);
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.MutableInterval mutableInterval68 = new org.joda.time.MutableInterval(0L, 1L, chronology67);
        org.joda.time.Interval interval69 = mutableInterval68.toInterval();
        java.lang.Object obj70 = mutableInterval68.clone();
        org.joda.time.Chronology chronology71 = null;
        org.joda.time.MutableInterval mutableInterval72 = new org.joda.time.MutableInterval(obj70, chronology71);
        org.joda.time.Duration duration73 = mutableInterval72.toDuration();
        mutableInterval13.setDurationAfterStart((org.joda.time.ReadableDuration) duration73);
        mutableInterval13.setEndMillis(1L);
        boolean boolean78 = mutableInterval13.isBefore(1606267388350L);
        org.joda.time.Duration duration79 = mutableInterval13.toDuration();
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 1L + "'", long22 == 1L);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(mutableInterval28);
        org.junit.Assert.assertNotNull(interval37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(interval43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(interval52);
        org.junit.Assert.assertNotNull(interval59);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 1L + "'", long60 == 1L);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(interval69);
        org.junit.Assert.assertNotNull(obj70);
        org.junit.Assert.assertEquals(obj70.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj70), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj70), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(duration73);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertNotNull(duration79);
    }

    @Test
    @Ignore
  public void test1633() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1633");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        java.lang.Object obj5 = mutableInterval3.clone();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval(obj5, chronology6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        mutableInterval7.setPeriodBeforeEnd(readablePeriod8);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutableInterval mutableInterval13 = new org.joda.time.MutableInterval(0L, 1L, chronology12);
        org.joda.time.Interval interval14 = mutableInterval13.toInterval();
        mutableInterval13.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval(0L, 1L, chronology19);
        org.joda.time.Interval interval21 = mutableInterval20.toInterval();
        long long22 = interval21.getEndMillis();
        boolean boolean24 = interval21.isAfter((long) (byte) 100);
        boolean boolean25 = mutableInterval13.overlaps((org.joda.time.ReadableInterval) interval21);
        org.joda.time.Duration duration26 = mutableInterval13.toDuration();
        boolean boolean27 = mutableInterval7.isBefore((org.joda.time.ReadableInterval) mutableInterval13);
        org.joda.time.MutableInterval mutableInterval28 = mutableInterval13.toMutableInterval();
        java.lang.String str29 = mutableInterval28.toString();
        org.joda.time.MutableInterval mutableInterval30 = new org.joda.time.MutableInterval((java.lang.Object) str29);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.MutableInterval mutableInterval34 = new org.joda.time.MutableInterval(0L, 1L, chronology33);
        org.joda.time.Interval interval35 = mutableInterval34.toInterval();
        org.joda.time.DateTime dateTime36 = mutableInterval34.getStart();
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.MutableInterval mutableInterval40 = new org.joda.time.MutableInterval(0L, 1L, chronology39);
        org.joda.time.Interval interval41 = mutableInterval40.toInterval();
        java.lang.Object obj42 = mutableInterval40.clone();
        org.joda.time.Interval interval43 = mutableInterval40.toInterval();
        org.joda.time.ReadableInterval readableInterval44 = null;
        boolean boolean45 = mutableInterval40.isBefore(readableInterval44);
        org.joda.time.MutableInterval mutableInterval46 = mutableInterval40.copy();
        boolean boolean47 = mutableInterval34.contains((org.joda.time.ReadableInterval) mutableInterval40);
        mutableInterval40.setInterval((long) '#', 1606267292730L);
        org.joda.time.Chronology chronology51 = mutableInterval40.getChronology();
        long long52 = mutableInterval40.toDurationMillis();
        mutableInterval40.setDurationAfterStart(1606267339733L);
        org.joda.time.ReadableInstant readableInstant55 = null;
        org.joda.time.ReadablePeriod readablePeriod56 = null;
        org.joda.time.MutableInterval mutableInterval57 = new org.joda.time.MutableInterval(readableInstant55, readablePeriod56);
        mutableInterval57.setDurationBeforeEnd(1L);
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.MutableInterval mutableInterval63 = new org.joda.time.MutableInterval(0L, 1L, chronology62);
        org.joda.time.Interval interval64 = mutableInterval63.toInterval();
        java.lang.Object obj65 = mutableInterval63.clone();
        mutableInterval63.setStartMillis((long) (short) -1);
        org.joda.time.Chronology chronology68 = mutableInterval63.getChronology();
        mutableInterval57.setChronology(chronology68);
        mutableInterval40.setChronology(chronology68);
        boolean boolean71 = mutableInterval30.isBefore((org.joda.time.ReadableInterval) mutableInterval40);
        org.joda.time.Chronology chronology72 = mutableInterval40.getChronology();
        org.joda.time.Interval interval73 = mutableInterval40.toInterval();
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 1L + "'", long22 == 1L);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(mutableInterval28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z" + "'", str29, "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(interval41);
        org.junit.Assert.assertNotNull(obj42);
        org.junit.Assert.assertEquals(obj42.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj42), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj42), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(mutableInterval46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 1606267292695L + "'", long52 == 1606267292695L);
        org.junit.Assert.assertNotNull(interval64);
        org.junit.Assert.assertNotNull(obj65);
        org.junit.Assert.assertEquals(obj65.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj65), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj65), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(chronology68);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(chronology72);
        org.junit.Assert.assertNotNull(interval73);
    }

    @Test
    @Ignore
  public void test1634() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1634");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        mutableInterval3.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval(0L, 1L, chronology9);
        org.joda.time.Interval interval11 = mutableInterval10.toInterval();
        java.lang.Object obj12 = mutableInterval10.clone();
        org.joda.time.Interval interval13 = mutableInterval10.toInterval();
        org.joda.time.ReadableInterval readableInterval14 = null;
        boolean boolean15 = mutableInterval10.isBefore(readableInterval14);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.MutableInterval mutableInterval19 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology18);
        boolean boolean20 = mutableInterval10.isAfter((org.joda.time.ReadableInterval) mutableInterval19);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MutableInterval mutableInterval24 = new org.joda.time.MutableInterval(0L, 1L, chronology23);
        org.joda.time.Interval interval25 = mutableInterval24.toInterval();
        org.joda.time.DateTime dateTime26 = mutableInterval24.getStart();
        boolean boolean27 = mutableInterval10.isBefore((org.joda.time.ReadableInstant) dateTime26);
        boolean boolean28 = mutableInterval3.contains((org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MutableInterval mutableInterval32 = new org.joda.time.MutableInterval(0L, 1L, chronology31);
        org.joda.time.Interval interval33 = mutableInterval32.toInterval();
        java.lang.Object obj34 = mutableInterval32.clone();
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.MutableInterval mutableInterval36 = new org.joda.time.MutableInterval(obj34, chronology35);
        org.joda.time.ReadablePeriod readablePeriod37 = null;
        mutableInterval36.setPeriodAfterStart(readablePeriod37);
        org.joda.time.Period period39 = mutableInterval36.toPeriod();
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.MutableInterval mutableInterval43 = new org.joda.time.MutableInterval(0L, 1L, chronology42);
        org.joda.time.Interval interval44 = mutableInterval43.toInterval();
        java.lang.Object obj45 = mutableInterval43.clone();
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.MutableInterval mutableInterval47 = new org.joda.time.MutableInterval(obj45, chronology46);
        org.joda.time.ReadablePeriod readablePeriod48 = null;
        mutableInterval47.setPeriodAfterStart(readablePeriod48);
        org.joda.time.Period period50 = mutableInterval47.toPeriod();
        mutableInterval36.setPeriodAfterStart((org.joda.time.ReadablePeriod) period50);
        org.joda.time.MutableInterval mutableInterval52 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime26, (org.joda.time.ReadablePeriod) period50);
        org.joda.time.Duration duration53 = mutableInterval52.toDuration();
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.MutableInterval mutableInterval57 = new org.joda.time.MutableInterval(0L, 1L, chronology56);
        org.joda.time.Interval interval58 = mutableInterval57.toInterval();
        java.lang.Object obj59 = mutableInterval57.clone();
        java.lang.Object obj60 = mutableInterval57.clone();
        org.joda.time.MutableInterval mutableInterval61 = mutableInterval57.copy();
        java.lang.Object obj62 = mutableInterval61.clone();
        org.joda.time.ReadableInstant readableInstant63 = null;
        org.joda.time.ReadablePeriod readablePeriod64 = null;
        org.joda.time.MutableInterval mutableInterval65 = new org.joda.time.MutableInterval(readableInstant63, readablePeriod64);
        mutableInterval65.setDurationBeforeEnd(1L);
        org.joda.time.MutableInterval mutableInterval68 = mutableInterval65.toMutableInterval();
        org.joda.time.Period period69 = mutableInterval65.toPeriod();
        mutableInterval61.setPeriodAfterStart((org.joda.time.ReadablePeriod) period69);
        org.joda.time.MutableInterval mutableInterval71 = mutableInterval61.toMutableInterval();
        org.joda.time.MutableInterval mutableInterval73 = org.joda.time.MutableInterval.parse("2020-11-25T01:22:00.162Z/2020-11-25T01:22:00.163Z");
        org.joda.time.MutableInterval mutableInterval74 = mutableInterval73.toMutableInterval();
        boolean boolean75 = mutableInterval61.isAfter((org.joda.time.ReadableInterval) mutableInterval73);
        boolean boolean76 = mutableInterval52.isBefore((org.joda.time.ReadableInterval) mutableInterval73);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(obj12);
        org.junit.Assert.assertEquals(obj12.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj12), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj12), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(interval33);
        org.junit.Assert.assertNotNull(obj34);
        org.junit.Assert.assertEquals(obj34.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj34), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj34), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertNotNull(interval44);
        org.junit.Assert.assertNotNull(obj45);
        org.junit.Assert.assertEquals(obj45.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj45), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj45), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(period50);
        org.junit.Assert.assertNotNull(duration53);
        org.junit.Assert.assertNotNull(interval58);
        org.junit.Assert.assertNotNull(obj59);
        org.junit.Assert.assertEquals(obj59.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj59), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj59), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(obj60);
        org.junit.Assert.assertEquals(obj60.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj60), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj60), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(mutableInterval61);
        org.junit.Assert.assertNotNull(obj62);
        org.junit.Assert.assertEquals(obj62.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj62), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj62), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(mutableInterval68);
        org.junit.Assert.assertNotNull(period69);
        org.junit.Assert.assertNotNull(mutableInterval71);
        org.junit.Assert.assertNotNull(mutableInterval73);
        org.junit.Assert.assertNotNull(mutableInterval74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
    }

    @Test
    @Ignore
  public void test1635() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1635");
        org.joda.time.ReadableDuration readableDuration0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval(readableDuration0, readableInstant1);
        org.joda.time.PeriodType periodType3 = null;
        org.joda.time.Period period4 = mutableInterval2.toPeriod(periodType3);
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval(readableInstant5, readablePeriod6);
        long long8 = mutableInterval7.getEndMillis();
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.MutableInterval mutableInterval11 = new org.joda.time.MutableInterval(readableInstant9, readablePeriod10);
        mutableInterval11.setDurationBeforeEnd(1L);
        org.joda.time.MutableInterval mutableInterval14 = mutableInterval11.toMutableInterval();
        org.joda.time.DateTime dateTime15 = mutableInterval14.getEnd();
        boolean boolean16 = mutableInterval7.isAfter((org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.MutableInterval mutableInterval17 = new org.joda.time.MutableInterval((org.joda.time.ReadablePeriod) period4, (org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MutableInterval mutableInterval21 = new org.joda.time.MutableInterval(0L, 1L, chronology20);
        org.joda.time.Interval interval22 = mutableInterval21.toInterval();
        java.lang.Object obj23 = mutableInterval21.clone();
        org.joda.time.Interval interval24 = mutableInterval21.toInterval();
        org.joda.time.ReadableInterval readableInterval25 = null;
        boolean boolean26 = mutableInterval21.isBefore(readableInterval25);
        org.joda.time.MutableInterval mutableInterval27 = mutableInterval21.copy();
        boolean boolean29 = mutableInterval21.contains(1606267294061L);
        org.joda.time.DateTime dateTime30 = mutableInterval21.getStart();
        java.lang.Object obj31 = mutableInterval21.clone();
        org.joda.time.PeriodType periodType32 = null;
        org.joda.time.Period period33 = mutableInterval21.toPeriod(periodType32);
        org.joda.time.MutableInterval mutableInterval34 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime15, (org.joda.time.ReadablePeriod) period33);
        org.junit.Assert.assertNotNull(period4);
// flaky:         org.junit.Assert.assertTrue("'" + long8 + "' != '" + 1606267582543L + "'", long8 == 1606267582543L);
        org.junit.Assert.assertNotNull(mutableInterval14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertNotNull(obj23);
        org.junit.Assert.assertEquals(obj23.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj23), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj23), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(mutableInterval27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(obj31);
        org.junit.Assert.assertEquals(obj31.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj31), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj31), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(period33);
    }

    @Test
    @Ignore
  public void test1636() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1636");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        java.lang.Object obj5 = mutableInterval3.clone();
        org.joda.time.Interval interval6 = mutableInterval3.toInterval();
        org.joda.time.ReadableInterval readableInterval7 = null;
        boolean boolean8 = mutableInterval3.isBefore(readableInterval7);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology11);
        boolean boolean13 = mutableInterval3.isAfter((org.joda.time.ReadableInterval) mutableInterval12);
        org.joda.time.Interval interval14 = mutableInterval3.toInterval();
        boolean boolean15 = mutableInterval3.isBeforeNow();
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
    }

    @Test
    @Ignore
  public void test1637() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1637");
        org.joda.time.MutableInterval mutableInterval1 = org.joda.time.MutableInterval.parse("2020-11-25T01:22:00.162Z/2020-11-25T01:22:00.163Z");
        org.joda.time.MutableInterval mutableInterval2 = mutableInterval1.toMutableInterval();
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.MutableInterval mutableInterval5 = new org.joda.time.MutableInterval(readableInstant3, readablePeriod4);
        mutableInterval5.setDurationBeforeEnd(1L);
        org.joda.time.MutableInterval mutableInterval8 = mutableInterval5.toMutableInterval();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval(0L, 1L, chronology11);
        long long13 = mutableInterval12.toDurationMillis();
        mutableInterval5.setInterval((org.joda.time.ReadableInterval) mutableInterval12);
        org.joda.time.Duration duration15 = mutableInterval12.toDuration();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.MutableInterval mutableInterval19 = new org.joda.time.MutableInterval(0L, 1L, chronology18);
        org.joda.time.Interval interval20 = mutableInterval19.toInterval();
        java.lang.Object obj21 = mutableInterval19.clone();
        org.joda.time.Interval interval22 = mutableInterval19.toInterval();
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        mutableInterval19.setPeriodAfterStart(readablePeriod23);
        mutableInterval19.setEndMillis((long) 100);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MutableInterval mutableInterval30 = new org.joda.time.MutableInterval(0L, 1L, chronology29);
        org.joda.time.Interval interval31 = mutableInterval30.toInterval();
        mutableInterval30.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.MutableInterval mutableInterval37 = new org.joda.time.MutableInterval(0L, 1L, chronology36);
        org.joda.time.Interval interval38 = mutableInterval37.toInterval();
        java.lang.Object obj39 = mutableInterval37.clone();
        org.joda.time.Interval interval40 = mutableInterval37.toInterval();
        org.joda.time.ReadableInterval readableInterval41 = null;
        boolean boolean42 = mutableInterval37.isBefore(readableInterval41);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.MutableInterval mutableInterval46 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology45);
        boolean boolean47 = mutableInterval37.isAfter((org.joda.time.ReadableInterval) mutableInterval46);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.MutableInterval mutableInterval51 = new org.joda.time.MutableInterval(0L, 1L, chronology50);
        org.joda.time.Interval interval52 = mutableInterval51.toInterval();
        org.joda.time.DateTime dateTime53 = mutableInterval51.getStart();
        boolean boolean54 = mutableInterval37.isBefore((org.joda.time.ReadableInstant) dateTime53);
        boolean boolean55 = mutableInterval30.contains((org.joda.time.ReadableInstant) dateTime53);
        boolean boolean56 = mutableInterval19.isBefore((org.joda.time.ReadableInstant) dateTime53);
        org.joda.time.MutableInterval mutableInterval57 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration15, (org.joda.time.ReadableInstant) dateTime53);
        boolean boolean58 = mutableInterval1.contains((org.joda.time.ReadableInstant) dateTime53);
        java.lang.String str59 = mutableInterval1.toString();
        org.junit.Assert.assertNotNull(mutableInterval1);
        org.junit.Assert.assertNotNull(mutableInterval2);
        org.junit.Assert.assertNotNull(mutableInterval8);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1L + "'", long13 == 1L);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(interval20);
        org.junit.Assert.assertNotNull(obj21);
        org.junit.Assert.assertEquals(obj21.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj21), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj21), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertNotNull(interval31);
        org.junit.Assert.assertNotNull(interval38);
        org.junit.Assert.assertNotNull(obj39);
        org.junit.Assert.assertEquals(obj39.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj39), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj39), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(interval52);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "2020-11-25T01:22:00.162Z/2020-11-25T01:22:00.163Z" + "'", str59, "2020-11-25T01:22:00.162Z/2020-11-25T01:22:00.163Z");
    }

    @Test
    @Ignore
  public void test1638() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1638");
        org.joda.time.ReadableDuration readableDuration0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval(readableDuration0, readableInstant1);
        org.joda.time.MutableInterval mutableInterval3 = mutableInterval2.toMutableInterval();
        org.joda.time.Interval interval4 = mutableInterval2.toInterval();
        mutableInterval2.setStartMillis((long) ' ');
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval(0L, 1L, chronology9);
        org.joda.time.Interval interval11 = mutableInterval10.toInterval();
        org.joda.time.DateTime dateTime12 = mutableInterval10.getStart();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MutableInterval mutableInterval16 = new org.joda.time.MutableInterval(0L, 1L, chronology15);
        org.joda.time.Interval interval17 = mutableInterval16.toInterval();
        java.lang.Object obj18 = mutableInterval16.clone();
        org.joda.time.Interval interval19 = mutableInterval16.toInterval();
        org.joda.time.ReadableInterval readableInterval20 = null;
        boolean boolean21 = mutableInterval16.isBefore(readableInterval20);
        org.joda.time.MutableInterval mutableInterval22 = mutableInterval16.copy();
        boolean boolean23 = mutableInterval10.contains((org.joda.time.ReadableInterval) mutableInterval16);
        mutableInterval16.setInterval((long) '#', 1606267292730L);
        org.joda.time.Chronology chronology27 = mutableInterval16.getChronology();
        long long28 = mutableInterval16.toDurationMillis();
        mutableInterval16.setDurationAfterStart(1606267339733L);
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.ReadablePeriod readablePeriod32 = null;
        org.joda.time.MutableInterval mutableInterval33 = new org.joda.time.MutableInterval(readableInstant31, readablePeriod32);
        mutableInterval33.setDurationBeforeEnd(1L);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.MutableInterval mutableInterval39 = new org.joda.time.MutableInterval(0L, 1L, chronology38);
        org.joda.time.Interval interval40 = mutableInterval39.toInterval();
        java.lang.Object obj41 = mutableInterval39.clone();
        mutableInterval39.setStartMillis((long) (short) -1);
        org.joda.time.Chronology chronology44 = mutableInterval39.getChronology();
        mutableInterval33.setChronology(chronology44);
        mutableInterval16.setChronology(chronology44);
        org.joda.time.DateTime dateTime47 = mutableInterval16.getEnd();
        long long48 = mutableInterval16.getEndMillis();
        org.joda.time.Period period49 = mutableInterval16.toPeriod();
        mutableInterval2.setPeriodBeforeEnd((org.joda.time.ReadablePeriod) period49);
        org.joda.time.ReadableInstant readableInstant51 = null;
        org.joda.time.ReadablePeriod readablePeriod52 = null;
        org.joda.time.MutableInterval mutableInterval53 = new org.joda.time.MutableInterval(readableInstant51, readablePeriod52);
        mutableInterval53.setDurationBeforeEnd(1L);
        org.joda.time.MutableInterval mutableInterval56 = mutableInterval53.toMutableInterval();
        boolean boolean57 = mutableInterval56.containsNow();
        org.joda.time.ReadablePeriod readablePeriod58 = null;
        org.joda.time.ReadableInstant readableInstant59 = null;
        org.joda.time.ReadablePeriod readablePeriod60 = null;
        org.joda.time.MutableInterval mutableInterval61 = new org.joda.time.MutableInterval(readableInstant59, readablePeriod60);
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.MutableInterval mutableInterval65 = new org.joda.time.MutableInterval(0L, 1L, chronology64);
        org.joda.time.Interval interval66 = mutableInterval65.toInterval();
        org.joda.time.DateTime dateTime67 = mutableInterval65.getStart();
        org.joda.time.Chronology chronology70 = null;
        org.joda.time.MutableInterval mutableInterval71 = new org.joda.time.MutableInterval(0L, 1L, chronology70);
        org.joda.time.Interval interval72 = mutableInterval71.toInterval();
        org.joda.time.DateTime dateTime73 = mutableInterval71.getStart();
        mutableInterval61.setInterval((org.joda.time.ReadableInstant) dateTime67, (org.joda.time.ReadableInstant) dateTime73);
        org.joda.time.MutableInterval mutableInterval75 = new org.joda.time.MutableInterval(readablePeriod58, (org.joda.time.ReadableInstant) dateTime67);
        boolean boolean76 = mutableInterval56.isAfter((org.joda.time.ReadableInstant) dateTime67);
        boolean boolean78 = mutableInterval56.isAfter(1606267318278L);
        org.joda.time.Duration duration79 = mutableInterval56.toDuration();
        mutableInterval2.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration79);
        org.junit.Assert.assertNotNull(mutableInterval3);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(interval17);
        org.junit.Assert.assertNotNull(obj18);
        org.junit.Assert.assertEquals(obj18.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj18), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj18), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(mutableInterval22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 1606267292695L + "'", long28 == 1606267292695L);
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertNotNull(obj41);
        org.junit.Assert.assertEquals(obj41.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj41), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj41), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 1606267339768L + "'", long48 == 1606267339768L);
        org.junit.Assert.assertNotNull(period49);
        org.junit.Assert.assertNotNull(mutableInterval56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(interval66);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(interval72);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertNotNull(duration79);
    }

    @Test
    @Ignore
  public void test1639() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1639");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadablePeriod readablePeriod1 = null;
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval(readableInstant0, readablePeriod1);
        mutableInterval2.setDurationBeforeEnd(1L);
        org.joda.time.MutableInterval mutableInterval5 = mutableInterval2.toMutableInterval();
        boolean boolean6 = mutableInterval5.containsNow();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval(readableInstant8, readablePeriod9);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutableInterval mutableInterval14 = new org.joda.time.MutableInterval(0L, 1L, chronology13);
        org.joda.time.Interval interval15 = mutableInterval14.toInterval();
        org.joda.time.DateTime dateTime16 = mutableInterval14.getStart();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval(0L, 1L, chronology19);
        org.joda.time.Interval interval21 = mutableInterval20.toInterval();
        org.joda.time.DateTime dateTime22 = mutableInterval20.getStart();
        mutableInterval10.setInterval((org.joda.time.ReadableInstant) dateTime16, (org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.MutableInterval mutableInterval24 = new org.joda.time.MutableInterval(readablePeriod7, (org.joda.time.ReadableInstant) dateTime16);
        boolean boolean25 = mutableInterval5.isAfter((org.joda.time.ReadableInstant) dateTime16);
        boolean boolean27 = mutableInterval5.isAfter(1606267318278L);
        mutableInterval5.setDurationAfterStart(1606267436769L);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.MutableInterval mutableInterval33 = new org.joda.time.MutableInterval(0L, 1L, chronology32);
        org.joda.time.Interval interval34 = mutableInterval33.toInterval();
        long long35 = interval34.getEndMillis();
        org.joda.time.ReadableInstant readableInstant36 = null;
        org.joda.time.ReadablePeriod readablePeriod37 = null;
        org.joda.time.MutableInterval mutableInterval38 = new org.joda.time.MutableInterval(readableInstant36, readablePeriod37);
        mutableInterval38.setDurationBeforeEnd(1L);
        org.joda.time.MutableInterval mutableInterval41 = mutableInterval38.toMutableInterval();
        boolean boolean42 = interval34.overlaps((org.joda.time.ReadableInterval) mutableInterval38);
        org.joda.time.Period period43 = interval34.toPeriod();
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.MutableInterval mutableInterval47 = new org.joda.time.MutableInterval(0L, 1L, chronology46);
        org.joda.time.Interval interval48 = mutableInterval47.toInterval();
        java.lang.Object obj49 = mutableInterval47.clone();
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.MutableInterval mutableInterval51 = new org.joda.time.MutableInterval(obj49, chronology50);
        org.joda.time.ReadablePeriod readablePeriod52 = null;
        mutableInterval51.setPeriodAfterStart(readablePeriod52);
        org.joda.time.Period period54 = mutableInterval51.toPeriod();
        org.joda.time.MutableInterval mutableInterval55 = mutableInterval51.copy();
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.MutableInterval mutableInterval59 = new org.joda.time.MutableInterval(0L, 1L, chronology58);
        org.joda.time.Interval interval60 = mutableInterval59.toInterval();
        org.joda.time.DateTime dateTime61 = mutableInterval59.getStart();
        org.joda.time.ReadableInstant readableInstant62 = null;
        org.joda.time.ReadablePeriod readablePeriod63 = null;
        org.joda.time.MutableInterval mutableInterval64 = new org.joda.time.MutableInterval(readableInstant62, readablePeriod63);
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.MutableInterval mutableInterval68 = new org.joda.time.MutableInterval(0L, 1L, chronology67);
        org.joda.time.Interval interval69 = mutableInterval68.toInterval();
        org.joda.time.DateTime dateTime70 = mutableInterval68.getStart();
        org.joda.time.Chronology chronology73 = null;
        org.joda.time.MutableInterval mutableInterval74 = new org.joda.time.MutableInterval(0L, 1L, chronology73);
        org.joda.time.Interval interval75 = mutableInterval74.toInterval();
        org.joda.time.DateTime dateTime76 = mutableInterval74.getStart();
        mutableInterval64.setInterval((org.joda.time.ReadableInstant) dateTime70, (org.joda.time.ReadableInstant) dateTime76);
        org.joda.time.MutableInterval mutableInterval78 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime61, (org.joda.time.ReadableInstant) dateTime76);
        boolean boolean79 = mutableInterval55.isBefore((org.joda.time.ReadableInstant) dateTime76);
        org.joda.time.MutableInterval mutableInterval80 = new org.joda.time.MutableInterval((org.joda.time.ReadablePeriod) period43, (org.joda.time.ReadableInstant) dateTime76);
        mutableInterval5.setPeriodAfterStart((org.joda.time.ReadablePeriod) period43);
        org.junit.Assert.assertNotNull(mutableInterval5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(interval34);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 1L + "'", long35 == 1L);
        org.junit.Assert.assertNotNull(mutableInterval41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(period43);
        org.junit.Assert.assertNotNull(interval48);
        org.junit.Assert.assertNotNull(obj49);
        org.junit.Assert.assertEquals(obj49.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj49), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj49), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(period54);
        org.junit.Assert.assertNotNull(mutableInterval55);
        org.junit.Assert.assertNotNull(interval60);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(interval69);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(interval75);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
    }

    @Test
    public void test1640() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1640");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadablePeriod readablePeriod1 = null;
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval(readableInstant0, readablePeriod1);
        mutableInterval2.setDurationBeforeEnd(1L);
        org.joda.time.MutableInterval mutableInterval5 = mutableInterval2.toMutableInterval();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutableInterval mutableInterval9 = new org.joda.time.MutableInterval(0L, 1L, chronology8);
        long long10 = mutableInterval9.toDurationMillis();
        mutableInterval2.setInterval((org.joda.time.ReadableInterval) mutableInterval9);
        org.joda.time.DateTime dateTime12 = mutableInterval2.getEnd();
        boolean boolean14 = mutableInterval2.isAfter(1606267528257L);
        org.joda.time.MutableInterval mutableInterval15 = mutableInterval2.copy();
        org.junit.Assert.assertNotNull(mutableInterval5);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1L + "'", long10 == 1L);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(mutableInterval15);
    }

    @Test
    @Ignore
  public void test1641() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1641");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        org.joda.time.DateTime dateTime5 = mutableInterval3.getStart();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutableInterval mutableInterval9 = new org.joda.time.MutableInterval(0L, 1L, chronology8);
        org.joda.time.Interval interval10 = mutableInterval9.toInterval();
        java.lang.Object obj11 = mutableInterval9.clone();
        org.joda.time.Interval interval12 = mutableInterval9.toInterval();
        org.joda.time.ReadableInterval readableInterval13 = null;
        boolean boolean14 = mutableInterval9.isBefore(readableInterval13);
        org.joda.time.MutableInterval mutableInterval15 = mutableInterval9.copy();
        boolean boolean16 = mutableInterval3.contains((org.joda.time.ReadableInterval) mutableInterval9);
        org.joda.time.MutableInterval mutableInterval17 = mutableInterval9.toMutableInterval();
        org.joda.time.Period period18 = mutableInterval9.toPeriod();
        org.joda.time.Duration duration19 = mutableInterval9.toDuration();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.MutableInterval mutableInterval23 = new org.joda.time.MutableInterval(0L, 1L, chronology22);
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        mutableInterval23.setPeriodAfterStart(readablePeriod24);
        org.joda.time.MutableInterval mutableInterval26 = mutableInterval23.toMutableInterval();
        org.joda.time.ReadableInterval readableInterval27 = null;
        boolean boolean28 = mutableInterval23.overlaps(readableInterval27);
        mutableInterval23.setStartMillis((long) 0);
        org.joda.time.DateTime dateTime31 = mutableInterval23.getStart();
        org.joda.time.MutableInterval mutableInterval32 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration19, (org.joda.time.ReadableInstant) dateTime31);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertEquals(obj11.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj11), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj11), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(mutableInterval15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(mutableInterval17);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(mutableInterval26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(dateTime31);
    }

    @Test
    @Ignore
  public void test1642() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1642");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(readableInstant1, readablePeriod2);
        mutableInterval3.setDurationBeforeEnd(1L);
        org.joda.time.MutableInterval mutableInterval6 = mutableInterval3.toMutableInterval();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval(0L, 1L, chronology9);
        long long11 = mutableInterval10.toDurationMillis();
        mutableInterval3.setInterval((org.joda.time.ReadableInterval) mutableInterval10);
        org.joda.time.Duration duration13 = mutableInterval10.toDuration();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MutableInterval mutableInterval17 = new org.joda.time.MutableInterval(0L, 1L, chronology16);
        org.joda.time.Interval interval18 = mutableInterval17.toInterval();
        java.lang.Object obj19 = mutableInterval17.clone();
        org.joda.time.Interval interval20 = mutableInterval17.toInterval();
        org.joda.time.ReadableInterval readableInterval21 = null;
        boolean boolean22 = mutableInterval17.isBefore(readableInterval21);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MutableInterval mutableInterval26 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology25);
        boolean boolean27 = mutableInterval17.isAfter((org.joda.time.ReadableInterval) mutableInterval26);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.MutableInterval mutableInterval31 = new org.joda.time.MutableInterval(0L, 1L, chronology30);
        org.joda.time.Interval interval32 = mutableInterval31.toInterval();
        org.joda.time.DateTime dateTime33 = mutableInterval31.getStart();
        boolean boolean34 = mutableInterval17.isBefore((org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.MutableInterval mutableInterval35 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration13, (org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.MutableInterval mutableInterval36 = new org.joda.time.MutableInterval(readableInstant0, (org.joda.time.ReadableDuration) duration13);
        java.lang.Object obj37 = mutableInterval36.clone();
        org.junit.Assert.assertNotNull(mutableInterval6);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1L + "'", long11 == 1L);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertNotNull(obj19);
        org.junit.Assert.assertEquals(obj19.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj19), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj19), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(interval32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(obj37);
// flaky:         org.junit.Assert.assertEquals(obj37.toString(), "2020-11-25T01:26:23.669Z/2020-11-25T01:26:23.670Z");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj37), "2020-11-25T01:26:23.669Z/2020-11-25T01:26:23.670Z");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj37), "2020-11-25T01:26:23.669Z/2020-11-25T01:26:23.670Z");
    }

    @Test
    @Ignore
  public void test1643() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1643");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        java.lang.Object obj5 = mutableInterval3.clone();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval(obj5, chronology6);
        org.joda.time.DateTime dateTime8 = mutableInterval7.getEnd();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval(0L, 1L, chronology11);
        org.joda.time.Interval interval13 = mutableInterval12.toInterval();
        java.lang.Object obj14 = mutableInterval12.clone();
        mutableInterval12.setStartMillis((long) (short) -1);
        org.joda.time.Chronology chronology17 = mutableInterval12.getChronology();
        org.joda.time.MutableInterval mutableInterval18 = mutableInterval12.toMutableInterval();
        org.joda.time.MutableInterval mutableInterval19 = mutableInterval12.copy();
        org.joda.time.Duration duration20 = mutableInterval12.toDuration();
        org.joda.time.DateTime dateTime21 = mutableInterval12.getStart();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MutableInterval mutableInterval25 = new org.joda.time.MutableInterval(0L, 1L, chronology24);
        org.joda.time.Interval interval26 = mutableInterval25.toInterval();
        mutableInterval25.setDurationAfterStart((long) (byte) 1);
        boolean boolean30 = mutableInterval25.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.MutableInterval mutableInterval34 = new org.joda.time.MutableInterval(0L, 1L, chronology33);
        org.joda.time.Interval interval35 = mutableInterval34.toInterval();
        java.lang.Object obj36 = mutableInterval34.clone();
        mutableInterval34.setStartMillis((long) (short) -1);
        org.joda.time.Chronology chronology39 = mutableInterval34.getChronology();
        mutableInterval25.setChronology(chronology39);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.MutableInterval mutableInterval44 = new org.joda.time.MutableInterval(0L, 1L, chronology43);
        org.joda.time.Interval interval45 = mutableInterval44.toInterval();
        mutableInterval44.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.MutableInterval mutableInterval51 = new org.joda.time.MutableInterval(0L, 1L, chronology50);
        org.joda.time.Interval interval52 = mutableInterval51.toInterval();
        java.lang.Object obj53 = mutableInterval51.clone();
        org.joda.time.Interval interval54 = mutableInterval51.toInterval();
        org.joda.time.ReadableInterval readableInterval55 = null;
        boolean boolean56 = mutableInterval51.isBefore(readableInterval55);
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.MutableInterval mutableInterval60 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology59);
        boolean boolean61 = mutableInterval51.isAfter((org.joda.time.ReadableInterval) mutableInterval60);
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.MutableInterval mutableInterval65 = new org.joda.time.MutableInterval(0L, 1L, chronology64);
        org.joda.time.Interval interval66 = mutableInterval65.toInterval();
        org.joda.time.DateTime dateTime67 = mutableInterval65.getStart();
        boolean boolean68 = mutableInterval51.isBefore((org.joda.time.ReadableInstant) dateTime67);
        boolean boolean69 = mutableInterval44.contains((org.joda.time.ReadableInstant) dateTime67);
        boolean boolean70 = mutableInterval25.isAfter((org.joda.time.ReadableInstant) dateTime67);
        mutableInterval7.setInterval((org.joda.time.ReadableInstant) dateTime21, (org.joda.time.ReadableInstant) dateTime67);
        org.joda.time.ReadableInstant readableInstant72 = null;
        mutableInterval7.setEnd(readableInstant72);
        org.joda.time.Chronology chronology76 = null;
        org.joda.time.MutableInterval mutableInterval77 = new org.joda.time.MutableInterval(0L, 1L, chronology76);
        org.joda.time.Interval interval78 = mutableInterval77.toInterval();
        java.lang.Object obj79 = mutableInterval77.clone();
        org.joda.time.Chronology chronology80 = null;
        org.joda.time.MutableInterval mutableInterval81 = new org.joda.time.MutableInterval(obj79, chronology80);
        org.joda.time.ReadablePeriod readablePeriod82 = null;
        mutableInterval81.setPeriodBeforeEnd(readablePeriod82);
        mutableInterval81.setDurationAfterStart((long) (byte) 10);
        mutableInterval7.setInterval((org.joda.time.ReadableInterval) mutableInterval81);
        org.joda.time.DateTime dateTime87 = mutableInterval81.getStart();
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(obj14);
        org.junit.Assert.assertEquals(obj14.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj14), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj14), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(mutableInterval18);
        org.junit.Assert.assertNotNull(mutableInterval19);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(interval35);
        org.junit.Assert.assertNotNull(obj36);
        org.junit.Assert.assertEquals(obj36.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj36), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj36), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(interval45);
        org.junit.Assert.assertNotNull(interval52);
        org.junit.Assert.assertNotNull(obj53);
        org.junit.Assert.assertEquals(obj53.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj53), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj53), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(interval66);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(interval78);
        org.junit.Assert.assertNotNull(obj79);
        org.junit.Assert.assertEquals(obj79.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj79), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj79), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(dateTime87);
    }

    @Test
    @Ignore
  public void test1644() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1644");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval(0L, 1L, chronology6);
        org.joda.time.Interval interval8 = mutableInterval7.toInterval();
        java.lang.Object obj9 = mutableInterval7.clone();
        mutableInterval7.setStartMillis((long) (short) -1);
        org.joda.time.Chronology chronology12 = mutableInterval7.getChronology();
        org.joda.time.MutableInterval mutableInterval13 = mutableInterval7.toMutableInterval();
        org.joda.time.MutableInterval mutableInterval14 = mutableInterval7.copy();
        org.joda.time.Duration duration15 = mutableInterval7.toDuration();
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval(readableInstant18, readablePeriod19);
        mutableInterval20.setDurationBeforeEnd(1L);
        org.joda.time.MutableInterval mutableInterval23 = mutableInterval20.toMutableInterval();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MutableInterval mutableInterval27 = new org.joda.time.MutableInterval(0L, 1L, chronology26);
        long long28 = mutableInterval27.toDurationMillis();
        mutableInterval20.setInterval((org.joda.time.ReadableInterval) mutableInterval27);
        mutableInterval20.setDurationAfterStart(100L);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.MutableInterval mutableInterval39 = new org.joda.time.MutableInterval(0L, 1L, chronology38);
        org.joda.time.Interval interval40 = mutableInterval39.toInterval();
        mutableInterval39.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.MutableInterval mutableInterval46 = new org.joda.time.MutableInterval(0L, 1L, chronology45);
        org.joda.time.Interval interval47 = mutableInterval46.toInterval();
        mutableInterval46.setDurationAfterStart((long) (byte) 1);
        boolean boolean51 = mutableInterval46.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology52 = mutableInterval46.getChronology();
        mutableInterval39.setChronology(chronology52);
        org.joda.time.MutableInterval mutableInterval54 = new org.joda.time.MutableInterval((long) (-1), (long) '4', chronology52);
        org.joda.time.MutableInterval mutableInterval55 = new org.joda.time.MutableInterval((long) (short) 1, (long) 100, chronology52);
        org.joda.time.MutableInterval mutableInterval56 = new org.joda.time.MutableInterval((java.lang.Object) mutableInterval20, chronology52);
        org.joda.time.MutableInterval mutableInterval57 = new org.joda.time.MutableInterval((long) (short) 1, (long) ' ', chronology52);
        mutableInterval7.setChronology(chronology52);
        org.joda.time.MutableInterval mutableInterval59 = new org.joda.time.MutableInterval((long) (short) 0, 1606267316350L, chronology52);
        org.joda.time.MutableInterval mutableInterval60 = new org.joda.time.MutableInterval(10L, 1606267304978L, chronology52);
        long long61 = mutableInterval60.getStartMillis();
        long long62 = mutableInterval60.getStartMillis();
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(obj9);
        org.junit.Assert.assertEquals(obj9.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj9), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj9), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(mutableInterval13);
        org.junit.Assert.assertNotNull(mutableInterval14);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(mutableInterval23);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 1L + "'", long28 == 1L);
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertNotNull(interval47);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 10L + "'", long61 == 10L);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 10L + "'", long62 == 10L);
    }

    @Test
    public void test1645() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1645");
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval(1606267376475L, 1606267525526L);
    }

    @Test
    public void test1646() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1646");
        org.joda.time.ReadableDuration readableDuration0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval(readableDuration0, readableInstant1);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.MutableInterval mutableInterval6 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology5);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        mutableInterval6.setPeriodBeforeEnd(readablePeriod7);
        mutableInterval2.setInterval((org.joda.time.ReadableInterval) mutableInterval6);
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval((java.lang.Object) mutableInterval2);
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.Period period12 = mutableInterval2.toPeriod(periodType11);
        mutableInterval2.setDurationBeforeEnd(1606267384938L);
        org.joda.time.PeriodType periodType15 = null;
        org.joda.time.Period period16 = mutableInterval2.toPeriod(periodType15);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(period16);
    }

    @Test
    public void test1647() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1647");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableInterval mutableInterval1 = new org.joda.time.MutableInterval((java.lang.Object) 1606267500207L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No interval converter found for type: java.lang.Long");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    @Ignore
  public void test1648() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1648");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        mutableInterval3.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval(0L, 1L, chronology9);
        org.joda.time.Interval interval11 = mutableInterval10.toInterval();
        mutableInterval10.setDurationAfterStart((long) (byte) 1);
        boolean boolean15 = mutableInterval10.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology16 = mutableInterval10.getChronology();
        mutableInterval3.setChronology(chronology16);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MutableInterval mutableInterval21 = new org.joda.time.MutableInterval(0L, 1L, chronology20);
        org.joda.time.Interval interval22 = mutableInterval21.toInterval();
        java.lang.Object obj23 = mutableInterval21.clone();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MutableInterval mutableInterval25 = new org.joda.time.MutableInterval(obj23, chronology24);
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        mutableInterval25.setPeriodAfterStart(readablePeriod26);
        org.joda.time.Period period28 = mutableInterval25.toPeriod();
        org.joda.time.MutableInterval mutableInterval29 = mutableInterval25.copy();
        boolean boolean30 = mutableInterval3.isAfter((org.joda.time.ReadableInterval) mutableInterval25);
        org.joda.time.Interval interval31 = mutableInterval3.toInterval();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MutableInterval mutableInterval35 = new org.joda.time.MutableInterval(0L, 1L, chronology34);
        org.joda.time.Interval interval36 = mutableInterval35.toInterval();
        java.lang.Object obj37 = mutableInterval35.clone();
        org.joda.time.Interval interval38 = mutableInterval35.toInterval();
        mutableInterval35.setDurationBeforeEnd(0L);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.MutableInterval mutableInterval44 = new org.joda.time.MutableInterval(0L, 1L, chronology43);
        org.joda.time.Interval interval45 = mutableInterval44.toInterval();
        java.lang.Object obj46 = mutableInterval44.clone();
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.MutableInterval mutableInterval48 = new org.joda.time.MutableInterval(obj46, chronology47);
        org.joda.time.ReadablePeriod readablePeriod49 = null;
        mutableInterval48.setPeriodBeforeEnd(readablePeriod49);
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.MutableInterval mutableInterval54 = new org.joda.time.MutableInterval(0L, 1L, chronology53);
        org.joda.time.Interval interval55 = mutableInterval54.toInterval();
        mutableInterval54.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.MutableInterval mutableInterval61 = new org.joda.time.MutableInterval(0L, 1L, chronology60);
        org.joda.time.Interval interval62 = mutableInterval61.toInterval();
        long long63 = interval62.getEndMillis();
        boolean boolean65 = interval62.isAfter((long) (byte) 100);
        boolean boolean66 = mutableInterval54.overlaps((org.joda.time.ReadableInterval) interval62);
        org.joda.time.Duration duration67 = mutableInterval54.toDuration();
        boolean boolean68 = mutableInterval48.isBefore((org.joda.time.ReadableInterval) mutableInterval54);
        org.joda.time.MutableInterval mutableInterval69 = mutableInterval54.toMutableInterval();
        boolean boolean70 = mutableInterval35.overlaps((org.joda.time.ReadableInterval) mutableInterval69);
        boolean boolean71 = mutableInterval3.isBefore((org.joda.time.ReadableInterval) mutableInterval69);
        org.joda.time.MutableInterval mutableInterval73 = org.joda.time.MutableInterval.parse("2020-11-25T01:21:49.998Z/2020-11-25T01:21:49.999Z");
        boolean boolean74 = mutableInterval69.overlaps((org.joda.time.ReadableInterval) mutableInterval73);
        long long75 = mutableInterval69.toDurationMillis();
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertNotNull(obj23);
        org.junit.Assert.assertEquals(obj23.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj23), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj23), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(mutableInterval29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(interval31);
        org.junit.Assert.assertNotNull(interval36);
        org.junit.Assert.assertNotNull(obj37);
        org.junit.Assert.assertEquals(obj37.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj37), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj37), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval38);
        org.junit.Assert.assertNotNull(interval45);
        org.junit.Assert.assertNotNull(obj46);
        org.junit.Assert.assertEquals(obj46.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj46), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj46), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval55);
        org.junit.Assert.assertNotNull(interval62);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 1L + "'", long63 == 1L);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(duration67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(mutableInterval69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(mutableInterval73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 1L + "'", long75 == 1L);
    }

    @Test
    public void test1649() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1649");
        org.joda.time.ReadableDuration readableDuration0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval(readableDuration0, readableInstant1);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.MutableInterval mutableInterval6 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology5);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        mutableInterval6.setPeriodBeforeEnd(readablePeriod7);
        mutableInterval2.setInterval((org.joda.time.ReadableInterval) mutableInterval6);
        boolean boolean11 = mutableInterval2.isBefore(1606267294061L);
        mutableInterval2.setDurationBeforeEnd(1606267400057L);
        org.joda.time.Duration duration14 = mutableInterval2.toDuration();
        boolean boolean16 = mutableInterval2.isBefore((long) (byte) 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    @Ignore
  public void test1650() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1650");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        org.joda.time.DateTime dateTime5 = mutableInterval3.getStart();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutableInterval mutableInterval9 = new org.joda.time.MutableInterval(0L, 1L, chronology8);
        org.joda.time.Interval interval10 = mutableInterval9.toInterval();
        java.lang.Object obj11 = mutableInterval9.clone();
        org.joda.time.Interval interval12 = mutableInterval9.toInterval();
        org.joda.time.ReadableInterval readableInterval13 = null;
        boolean boolean14 = mutableInterval9.isBefore(readableInterval13);
        org.joda.time.MutableInterval mutableInterval15 = mutableInterval9.copy();
        boolean boolean16 = mutableInterval3.contains((org.joda.time.ReadableInterval) mutableInterval9);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval(0L, 1L, chronology19);
        org.joda.time.Interval interval21 = mutableInterval20.toInterval();
        java.lang.Object obj22 = mutableInterval20.clone();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MutableInterval mutableInterval24 = new org.joda.time.MutableInterval(obj22, chronology23);
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        mutableInterval24.setPeriodBeforeEnd(readablePeriod25);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MutableInterval mutableInterval30 = new org.joda.time.MutableInterval(0L, 1L, chronology29);
        org.joda.time.Interval interval31 = mutableInterval30.toInterval();
        mutableInterval30.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.MutableInterval mutableInterval37 = new org.joda.time.MutableInterval(0L, 1L, chronology36);
        org.joda.time.Interval interval38 = mutableInterval37.toInterval();
        long long39 = interval38.getEndMillis();
        boolean boolean41 = interval38.isAfter((long) (byte) 100);
        boolean boolean42 = mutableInterval30.overlaps((org.joda.time.ReadableInterval) interval38);
        org.joda.time.Duration duration43 = mutableInterval30.toDuration();
        boolean boolean44 = mutableInterval24.isBefore((org.joda.time.ReadableInterval) mutableInterval30);
        org.joda.time.MutableInterval mutableInterval45 = mutableInterval30.toMutableInterval();
        mutableInterval3.setInterval((org.joda.time.ReadableInterval) mutableInterval45);
        java.lang.Class<?> wildcardClass47 = mutableInterval45.getClass();
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertEquals(obj11.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj11), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj11), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(mutableInterval15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertEquals(obj22.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj22), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj22), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval31);
        org.junit.Assert.assertNotNull(interval38);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 1L + "'", long39 == 1L);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(mutableInterval45);
        org.junit.Assert.assertNotNull(wildcardClass47);
    }

    @Test
    @Ignore
  public void test1651() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1651");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval(10L, (long) (short) 100);
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval(readableDuration8, readableInstant9);
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.Period period12 = mutableInterval10.toPeriod(periodType11);
        mutableInterval7.setPeriodBeforeEnd((org.joda.time.ReadablePeriod) period12);
        boolean boolean14 = interval4.contains((org.joda.time.ReadableInterval) mutableInterval7);
        org.joda.time.DateTime dateTime15 = mutableInterval7.getStart();
        long long16 = mutableInterval7.toDurationMillis();
        java.lang.Object obj17 = mutableInterval7.clone();
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertNotNull(obj17);
        org.junit.Assert.assertEquals(obj17.toString(), "1970-01-01T00:00:00.100Z/1970-01-01T00:00:00.100Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj17), "1970-01-01T00:00:00.100Z/1970-01-01T00:00:00.100Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj17), "1970-01-01T00:00:00.100Z/1970-01-01T00:00:00.100Z");
    }

    @Test
    @Ignore
  public void test1652() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1652");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        java.lang.Object obj5 = mutableInterval3.clone();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval(obj5, chronology6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        mutableInterval7.setPeriodAfterStart(readablePeriod8);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutableInterval mutableInterval13 = new org.joda.time.MutableInterval(0L, 1L, chronology12);
        org.joda.time.Interval interval14 = mutableInterval13.toInterval();
        java.lang.Object obj15 = mutableInterval13.clone();
        mutableInterval13.setStartMillis((long) (short) -1);
        org.joda.time.Chronology chronology18 = mutableInterval13.getChronology();
        org.joda.time.MutableInterval mutableInterval19 = mutableInterval13.toMutableInterval();
        boolean boolean20 = mutableInterval7.isAfter((org.joda.time.ReadableInterval) mutableInterval19);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MutableInterval mutableInterval24 = new org.joda.time.MutableInterval(0L, 1L, chronology23);
        org.joda.time.Interval interval25 = mutableInterval24.toInterval();
        java.lang.Object obj26 = mutableInterval24.clone();
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.MutableInterval mutableInterval28 = new org.joda.time.MutableInterval(obj26, chronology27);
        org.joda.time.Duration duration29 = mutableInterval28.toDuration();
        mutableInterval19.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration29);
        org.joda.time.MutableInterval mutableInterval31 = new org.joda.time.MutableInterval((java.lang.Object) mutableInterval19);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(obj15);
        org.junit.Assert.assertEquals(obj15.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj15), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj15), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(mutableInterval19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(obj26);
        org.junit.Assert.assertEquals(obj26.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj26), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj26), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(duration29);
    }

    @Test
    @Ignore
  public void test1653() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1653");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        java.lang.Object obj5 = mutableInterval3.clone();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval(obj5, chronology6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        mutableInterval7.setPeriodBeforeEnd(readablePeriod8);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutableInterval mutableInterval13 = new org.joda.time.MutableInterval(0L, 1L, chronology12);
        org.joda.time.Interval interval14 = mutableInterval13.toInterval();
        mutableInterval13.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval(0L, 1L, chronology19);
        org.joda.time.Interval interval21 = mutableInterval20.toInterval();
        long long22 = interval21.getEndMillis();
        boolean boolean24 = interval21.isAfter((long) (byte) 100);
        boolean boolean25 = mutableInterval13.overlaps((org.joda.time.ReadableInterval) interval21);
        org.joda.time.Duration duration26 = mutableInterval13.toDuration();
        boolean boolean27 = mutableInterval7.isBefore((org.joda.time.ReadableInterval) mutableInterval13);
        org.joda.time.MutableInterval mutableInterval28 = mutableInterval13.toMutableInterval();
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        org.joda.time.MutableInterval mutableInterval32 = new org.joda.time.MutableInterval(readableInstant30, readablePeriod31);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.MutableInterval mutableInterval36 = new org.joda.time.MutableInterval(0L, 1L, chronology35);
        org.joda.time.Interval interval37 = mutableInterval36.toInterval();
        org.joda.time.DateTime dateTime38 = mutableInterval36.getStart();
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.MutableInterval mutableInterval42 = new org.joda.time.MutableInterval(0L, 1L, chronology41);
        org.joda.time.Interval interval43 = mutableInterval42.toInterval();
        org.joda.time.DateTime dateTime44 = mutableInterval42.getStart();
        mutableInterval32.setInterval((org.joda.time.ReadableInstant) dateTime38, (org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.MutableInterval mutableInterval46 = new org.joda.time.MutableInterval(readablePeriod29, (org.joda.time.ReadableInstant) dateTime38);
        mutableInterval13.setEnd((org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.MutableInterval mutableInterval51 = new org.joda.time.MutableInterval(0L, 1L, chronology50);
        org.joda.time.Interval interval52 = mutableInterval51.toInterval();
        mutableInterval51.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.MutableInterval mutableInterval58 = new org.joda.time.MutableInterval(0L, 1L, chronology57);
        org.joda.time.Interval interval59 = mutableInterval58.toInterval();
        long long60 = interval59.getEndMillis();
        boolean boolean62 = interval59.isAfter((long) (byte) 100);
        boolean boolean63 = mutableInterval51.overlaps((org.joda.time.ReadableInterval) interval59);
        boolean boolean64 = mutableInterval13.contains((org.joda.time.ReadableInterval) mutableInterval51);
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.MutableInterval mutableInterval68 = new org.joda.time.MutableInterval(0L, 1L, chronology67);
        org.joda.time.Interval interval69 = mutableInterval68.toInterval();
        org.joda.time.DateTime dateTime70 = mutableInterval68.getStart();
        boolean boolean71 = mutableInterval13.contains((org.joda.time.ReadableInstant) dateTime70);
        org.joda.time.Period period72 = mutableInterval13.toPeriod();
        org.joda.time.Chronology chronology75 = null;
        org.joda.time.MutableInterval mutableInterval76 = new org.joda.time.MutableInterval(0L, 1L, chronology75);
        org.joda.time.Interval interval77 = mutableInterval76.toInterval();
        java.lang.Object obj78 = mutableInterval76.clone();
        mutableInterval76.setStartMillis((long) (short) -1);
        org.joda.time.Chronology chronology81 = mutableInterval76.getChronology();
        org.joda.time.MutableInterval mutableInterval82 = mutableInterval76.toMutableInterval();
        org.joda.time.MutableInterval mutableInterval83 = mutableInterval76.copy();
        boolean boolean84 = mutableInterval76.isAfterNow();
        boolean boolean85 = mutableInterval13.overlaps((org.joda.time.ReadableInterval) mutableInterval76);
        boolean boolean87 = mutableInterval76.isAfter(10L);
        long long88 = mutableInterval76.toDurationMillis();
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 1L + "'", long22 == 1L);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(mutableInterval28);
        org.junit.Assert.assertNotNull(interval37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(interval43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(interval52);
        org.junit.Assert.assertNotNull(interval59);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 1L + "'", long60 == 1L);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(interval69);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(period72);
        org.junit.Assert.assertNotNull(interval77);
        org.junit.Assert.assertNotNull(obj78);
        org.junit.Assert.assertEquals(obj78.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj78), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj78), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(chronology81);
        org.junit.Assert.assertNotNull(mutableInterval82);
        org.junit.Assert.assertNotNull(mutableInterval83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + long88 + "' != '" + 2L + "'", long88 == 2L);
    }

    @Test
    @Ignore
  public void test1654() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1654");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        mutableInterval3.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval(0L, 1L, chronology9);
        org.joda.time.Interval interval11 = mutableInterval10.toInterval();
        long long12 = interval11.getEndMillis();
        boolean boolean14 = interval11.isAfter((long) (byte) 100);
        boolean boolean15 = mutableInterval3.overlaps((org.joda.time.ReadableInterval) interval11);
        org.joda.time.Duration duration16 = mutableInterval3.toDuration();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval(0L, 1L, chronology19);
        org.joda.time.Interval interval21 = mutableInterval20.toInterval();
        org.joda.time.DateTime dateTime22 = mutableInterval20.getStart();
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.MutableInterval mutableInterval25 = new org.joda.time.MutableInterval(readableInstant23, readablePeriod24);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MutableInterval mutableInterval29 = new org.joda.time.MutableInterval(0L, 1L, chronology28);
        org.joda.time.Interval interval30 = mutableInterval29.toInterval();
        org.joda.time.DateTime dateTime31 = mutableInterval29.getStart();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MutableInterval mutableInterval35 = new org.joda.time.MutableInterval(0L, 1L, chronology34);
        org.joda.time.Interval interval36 = mutableInterval35.toInterval();
        org.joda.time.DateTime dateTime37 = mutableInterval35.getStart();
        mutableInterval25.setInterval((org.joda.time.ReadableInstant) dateTime31, (org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.MutableInterval mutableInterval39 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime22, (org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.MutableInterval mutableInterval40 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration16, (org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.ReadableInstant readableInstant41 = null;
        org.joda.time.ReadablePeriod readablePeriod42 = null;
        org.joda.time.MutableInterval mutableInterval43 = new org.joda.time.MutableInterval(readableInstant41, readablePeriod42);
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.MutableInterval mutableInterval47 = new org.joda.time.MutableInterval(0L, 1L, chronology46);
        org.joda.time.Interval interval48 = mutableInterval47.toInterval();
        org.joda.time.DateTime dateTime49 = mutableInterval47.getStart();
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.MutableInterval mutableInterval53 = new org.joda.time.MutableInterval(0L, 1L, chronology52);
        org.joda.time.Interval interval54 = mutableInterval53.toInterval();
        org.joda.time.DateTime dateTime55 = mutableInterval53.getStart();
        mutableInterval43.setInterval((org.joda.time.ReadableInstant) dateTime49, (org.joda.time.ReadableInstant) dateTime55);
        org.joda.time.MutableInterval mutableInterval57 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration16, (org.joda.time.ReadableInstant) dateTime49);
        java.lang.Object obj58 = mutableInterval57.clone();
        org.joda.time.Period period59 = mutableInterval57.toPeriod();
        boolean boolean61 = mutableInterval57.isBefore(1606267330041L);
        // The following exception was thrown during execution in test generation
        try {
            mutableInterval57.setStartMillis(1606267339768L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(interval30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(interval36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(interval48);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(interval54);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(obj58);
        org.junit.Assert.assertEquals(obj58.toString(), "1969-12-31T23:59:59.999Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj58), "1969-12-31T23:59:59.999Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj58), "1969-12-31T23:59:59.999Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertNotNull(period59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
    }

    @Test
    @Ignore
  public void test1655() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1655");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        java.lang.Object obj5 = mutableInterval3.clone();
        org.joda.time.Interval interval6 = mutableInterval3.toInterval();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval(0L, 1L, chronology9);
        org.joda.time.Interval interval11 = mutableInterval10.toInterval();
        java.lang.Object obj12 = mutableInterval10.clone();
        boolean boolean13 = interval6.isBefore((org.joda.time.ReadableInterval) mutableInterval10);
        boolean boolean15 = mutableInterval10.isAfter((long) (short) 1);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.MutableInterval mutableInterval19 = new org.joda.time.MutableInterval(0L, 1L, chronology18);
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        mutableInterval19.setPeriodAfterStart(readablePeriod20);
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.MutableInterval mutableInterval24 = new org.joda.time.MutableInterval(readableInstant22, readablePeriod23);
        mutableInterval24.setDurationBeforeEnd(1L);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MutableInterval mutableInterval30 = new org.joda.time.MutableInterval(0L, 1L, chronology29);
        org.joda.time.Interval interval31 = mutableInterval30.toInterval();
        mutableInterval30.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.MutableInterval mutableInterval37 = new org.joda.time.MutableInterval(0L, 1L, chronology36);
        org.joda.time.Interval interval38 = mutableInterval37.toInterval();
        long long39 = interval38.getEndMillis();
        boolean boolean41 = interval38.isAfter((long) (byte) 100);
        boolean boolean42 = mutableInterval30.overlaps((org.joda.time.ReadableInterval) interval38);
        org.joda.time.Duration duration43 = mutableInterval30.toDuration();
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.MutableInterval mutableInterval47 = new org.joda.time.MutableInterval(0L, 1L, chronology46);
        org.joda.time.Interval interval48 = mutableInterval47.toInterval();
        mutableInterval47.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.MutableInterval mutableInterval54 = new org.joda.time.MutableInterval(0L, 1L, chronology53);
        org.joda.time.Interval interval55 = mutableInterval54.toInterval();
        long long56 = interval55.getEndMillis();
        boolean boolean58 = interval55.isAfter((long) (byte) 100);
        boolean boolean59 = mutableInterval47.overlaps((org.joda.time.ReadableInterval) interval55);
        org.joda.time.Duration duration60 = mutableInterval47.toDuration();
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.MutableInterval mutableInterval64 = new org.joda.time.MutableInterval(0L, 1L, chronology63);
        org.joda.time.Interval interval65 = mutableInterval64.toInterval();
        org.joda.time.DateTime dateTime66 = mutableInterval64.getStart();
        org.joda.time.ReadableInstant readableInstant67 = null;
        org.joda.time.ReadablePeriod readablePeriod68 = null;
        org.joda.time.MutableInterval mutableInterval69 = new org.joda.time.MutableInterval(readableInstant67, readablePeriod68);
        org.joda.time.Chronology chronology72 = null;
        org.joda.time.MutableInterval mutableInterval73 = new org.joda.time.MutableInterval(0L, 1L, chronology72);
        org.joda.time.Interval interval74 = mutableInterval73.toInterval();
        org.joda.time.DateTime dateTime75 = mutableInterval73.getStart();
        org.joda.time.Chronology chronology78 = null;
        org.joda.time.MutableInterval mutableInterval79 = new org.joda.time.MutableInterval(0L, 1L, chronology78);
        org.joda.time.Interval interval80 = mutableInterval79.toInterval();
        org.joda.time.DateTime dateTime81 = mutableInterval79.getStart();
        mutableInterval69.setInterval((org.joda.time.ReadableInstant) dateTime75, (org.joda.time.ReadableInstant) dateTime81);
        org.joda.time.MutableInterval mutableInterval83 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime66, (org.joda.time.ReadableInstant) dateTime81);
        org.joda.time.MutableInterval mutableInterval84 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration60, (org.joda.time.ReadableInstant) dateTime81);
        mutableInterval30.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration60);
        mutableInterval24.setInterval((org.joda.time.ReadableInterval) mutableInterval30);
        boolean boolean87 = mutableInterval19.contains((org.joda.time.ReadableInterval) mutableInterval30);
        boolean boolean88 = mutableInterval10.contains((org.joda.time.ReadableInterval) mutableInterval30);
        org.joda.time.DateTime dateTime89 = mutableInterval30.getEnd();
        long long90 = mutableInterval30.toDurationMillis();
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(obj12);
        org.junit.Assert.assertEquals(obj12.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj12), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj12), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(interval31);
        org.junit.Assert.assertNotNull(interval38);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 1L + "'", long39 == 1L);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertNotNull(interval48);
        org.junit.Assert.assertNotNull(interval55);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 1L + "'", long56 == 1L);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(duration60);
        org.junit.Assert.assertNotNull(interval65);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(interval74);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertNotNull(interval80);
        org.junit.Assert.assertNotNull(dateTime81);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertNotNull(dateTime89);
        org.junit.Assert.assertTrue("'" + long90 + "' != '" + 1L + "'", long90 == 1L);
    }

    @Test
    @Ignore
  public void test1656() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1656");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadablePeriod readablePeriod1 = null;
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval(readableInstant0, readablePeriod1);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.MutableInterval mutableInterval6 = new org.joda.time.MutableInterval(0L, 1L, chronology5);
        org.joda.time.Interval interval7 = mutableInterval6.toInterval();
        org.joda.time.DateTime dateTime8 = mutableInterval6.getStart();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval(0L, 1L, chronology11);
        org.joda.time.Interval interval13 = mutableInterval12.toInterval();
        org.joda.time.DateTime dateTime14 = mutableInterval12.getStart();
        mutableInterval2.setInterval((org.joda.time.ReadableInstant) dateTime8, (org.joda.time.ReadableInstant) dateTime14);
        boolean boolean16 = mutableInterval2.isBeforeNow();
        long long17 = mutableInterval2.getStartMillis();
        java.lang.String str18 = mutableInterval2.toString();
        org.junit.Assert.assertNotNull(interval7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z" + "'", str18, "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
    }

    @Test
    @Ignore
  public void test1657() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1657");
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        org.joda.time.MutableInterval mutableInterval4 = new org.joda.time.MutableInterval(readableInstant2, readablePeriod3);
        long long5 = mutableInterval4.getEndMillis();
        org.joda.time.MutableInterval mutableInterval6 = mutableInterval4.copy();
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.MutableInterval mutableInterval9 = new org.joda.time.MutableInterval(readableDuration7, readableInstant8);
        org.joda.time.PeriodType periodType10 = null;
        org.joda.time.Period period11 = mutableInterval9.toPeriod(periodType10);
        mutableInterval4.setPeriodBeforeEnd((org.joda.time.ReadablePeriod) period11);
        org.joda.time.DateTime dateTime13 = mutableInterval4.getStart();
        mutableInterval4.setDurationBeforeEnd((long) (short) 10);
        boolean boolean17 = mutableInterval4.contains(10L);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.MutableInterval mutableInterval23 = new org.joda.time.MutableInterval(0L, 1L, chronology22);
        org.joda.time.Interval interval24 = mutableInterval23.toInterval();
        java.lang.Object obj25 = mutableInterval23.clone();
        org.joda.time.Interval interval26 = mutableInterval23.toInterval();
        org.joda.time.ReadableInterval readableInterval27 = null;
        boolean boolean28 = mutableInterval23.isBefore(readableInterval27);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MutableInterval mutableInterval32 = new org.joda.time.MutableInterval(0L, 1L, chronology31);
        org.joda.time.Interval interval33 = mutableInterval32.toInterval();
        mutableInterval32.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.MutableInterval mutableInterval39 = new org.joda.time.MutableInterval(0L, 1L, chronology38);
        org.joda.time.Interval interval40 = mutableInterval39.toInterval();
        mutableInterval39.setDurationAfterStart((long) (byte) 1);
        boolean boolean44 = mutableInterval39.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology45 = mutableInterval39.getChronology();
        mutableInterval32.setChronology(chronology45);
        mutableInterval23.setChronology(chronology45);
        org.joda.time.MutableInterval mutableInterval48 = new org.joda.time.MutableInterval(1L, 1606267303786L, chronology45);
        org.joda.time.Chronology chronology49 = mutableInterval48.getChronology();
        mutableInterval4.setChronology(chronology49);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableInterval mutableInterval51 = new org.joda.time.MutableInterval(1606267576981L, 1606267558564L, chronology49);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
// flaky:         org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1606267585273L + "'", long5 == 1606267585273L);
        org.junit.Assert.assertNotNull(mutableInterval6);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(obj25);
        org.junit.Assert.assertEquals(obj25.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj25), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj25), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(interval33);
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(chronology49);
    }

    @Test
    @Ignore
  public void test1658() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1658");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        org.joda.time.DateTime dateTime5 = mutableInterval3.getStart();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutableInterval mutableInterval9 = new org.joda.time.MutableInterval(0L, 1L, chronology8);
        org.joda.time.Interval interval10 = mutableInterval9.toInterval();
        java.lang.Object obj11 = mutableInterval9.clone();
        org.joda.time.Interval interval12 = mutableInterval9.toInterval();
        org.joda.time.ReadableInterval readableInterval13 = null;
        boolean boolean14 = mutableInterval9.isBefore(readableInterval13);
        org.joda.time.MutableInterval mutableInterval15 = mutableInterval9.copy();
        boolean boolean16 = mutableInterval3.contains((org.joda.time.ReadableInterval) mutableInterval9);
        mutableInterval9.setInterval((long) '#', 1606267292730L);
        org.joda.time.Chronology chronology20 = mutableInterval9.getChronology();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MutableInterval mutableInterval24 = new org.joda.time.MutableInterval(0L, 1L, chronology23);
        org.joda.time.Interval interval25 = mutableInterval24.toInterval();
        mutableInterval24.setDurationAfterStart((long) (byte) 1);
        boolean boolean29 = mutableInterval24.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology30 = mutableInterval24.getChronology();
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.MutableInterval mutableInterval34 = new org.joda.time.MutableInterval(0L, 1L, chronology33);
        org.joda.time.Interval interval35 = mutableInterval34.toInterval();
        java.lang.Object obj36 = mutableInterval34.clone();
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.MutableInterval mutableInterval38 = new org.joda.time.MutableInterval(obj36, chronology37);
        org.joda.time.ReadablePeriod readablePeriod39 = null;
        mutableInterval38.setPeriodAfterStart(readablePeriod39);
        org.joda.time.Period period41 = mutableInterval38.toPeriod();
        mutableInterval24.setPeriodBeforeEnd((org.joda.time.ReadablePeriod) period41);
        boolean boolean43 = mutableInterval24.isAfterNow();
        boolean boolean44 = mutableInterval9.equals((java.lang.Object) mutableInterval24);
        boolean boolean46 = mutableInterval24.equals((java.lang.Object) (-1.0d));
        java.lang.String str47 = mutableInterval24.toString();
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertEquals(obj11.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj11), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj11), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(mutableInterval15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(interval35);
        org.junit.Assert.assertNotNull(obj36);
        org.junit.Assert.assertEquals(obj36.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj36), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj36), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "1970-01-01T00:00:00.001Z/1970-01-01T00:00:00.001Z" + "'", str47, "1970-01-01T00:00:00.001Z/1970-01-01T00:00:00.001Z");
    }

    @Test
    @Ignore
  public void test1659() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1659");
        org.joda.time.MutableInterval mutableInterval1 = org.joda.time.MutableInterval.parse("1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MutableInterval mutableInterval5 = new org.joda.time.MutableInterval(0L, 1L, chronology4);
        org.joda.time.Interval interval6 = mutableInterval5.toInterval();
        java.lang.Object obj7 = mutableInterval5.clone();
        org.joda.time.Interval interval8 = mutableInterval5.toInterval();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval(0L, 1L, chronology11);
        org.joda.time.Interval interval13 = mutableInterval12.toInterval();
        java.lang.Object obj14 = mutableInterval12.clone();
        boolean boolean15 = interval8.isBefore((org.joda.time.ReadableInterval) mutableInterval12);
        boolean boolean16 = mutableInterval1.isAfter((org.joda.time.ReadableInterval) mutableInterval12);
        mutableInterval1.setDurationBeforeEnd(1606267412650L);
        java.lang.Object obj19 = mutableInterval1.clone();
        org.junit.Assert.assertNotNull(mutableInterval1);
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(obj14);
        org.junit.Assert.assertEquals(obj14.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj14), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj14), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(obj19);
        org.junit.Assert.assertEquals(obj19.toString(), "1919-02-06T22:36:27.351Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj19), "1919-02-06T22:36:27.351Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj19), "1919-02-06T22:36:27.351Z/1970-01-01T00:00:00.001Z");
    }

    @Test
    @Ignore
  public void test1660() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1660");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        mutableInterval3.setDurationAfterStart((long) (byte) 1);
        boolean boolean8 = mutableInterval3.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval(0L, 1L, chronology11);
        org.joda.time.Interval interval13 = mutableInterval12.toInterval();
        java.lang.Object obj14 = mutableInterval12.clone();
        mutableInterval12.setStartMillis((long) (short) -1);
        org.joda.time.Chronology chronology17 = mutableInterval12.getChronology();
        mutableInterval3.setChronology(chronology17);
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.MutableInterval mutableInterval21 = new org.joda.time.MutableInterval(readableInstant19, readablePeriod20);
        mutableInterval21.setDurationBeforeEnd(1L);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MutableInterval mutableInterval27 = new org.joda.time.MutableInterval(0L, 1L, chronology26);
        org.joda.time.Interval interval28 = mutableInterval27.toInterval();
        java.lang.Object obj29 = mutableInterval27.clone();
        mutableInterval27.setStartMillis((long) (short) -1);
        org.joda.time.Chronology chronology32 = mutableInterval27.getChronology();
        mutableInterval21.setChronology(chronology32);
        org.joda.time.MutableInterval mutableInterval34 = new org.joda.time.MutableInterval((java.lang.Object) mutableInterval3, chronology32);
        org.joda.time.DateTime dateTime35 = mutableInterval34.getEnd();
        org.joda.time.ReadablePeriod readablePeriod36 = null;
        mutableInterval34.setPeriodAfterStart(readablePeriod36);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.MutableInterval mutableInterval41 = new org.joda.time.MutableInterval(0L, 1L, chronology40);
        org.joda.time.Interval interval42 = mutableInterval41.toInterval();
        mutableInterval41.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.MutableInterval mutableInterval48 = new org.joda.time.MutableInterval(0L, 1L, chronology47);
        org.joda.time.Interval interval49 = mutableInterval48.toInterval();
        mutableInterval48.setDurationAfterStart((long) (byte) 1);
        boolean boolean53 = mutableInterval48.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology54 = mutableInterval48.getChronology();
        mutableInterval41.setChronology(chronology54);
        mutableInterval41.setEndMillis((long) '#');
        org.joda.time.Duration duration58 = mutableInterval41.toDuration();
        mutableInterval34.setInterval((org.joda.time.ReadableInterval) mutableInterval41);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(obj14);
        org.junit.Assert.assertEquals(obj14.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj14), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj14), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertNotNull(obj29);
        org.junit.Assert.assertEquals(obj29.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj29), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj29), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(interval42);
        org.junit.Assert.assertNotNull(interval49);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertNotNull(duration58);
    }

    @Test
    public void test1661() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1661");
        org.joda.time.ReadablePeriod readablePeriod0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(readableInstant1, readablePeriod2);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval(0L, 1L, chronology6);
        org.joda.time.Interval interval8 = mutableInterval7.toInterval();
        org.joda.time.DateTime dateTime9 = mutableInterval7.getStart();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutableInterval mutableInterval13 = new org.joda.time.MutableInterval(0L, 1L, chronology12);
        org.joda.time.Interval interval14 = mutableInterval13.toInterval();
        org.joda.time.DateTime dateTime15 = mutableInterval13.getStart();
        mutableInterval3.setInterval((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.MutableInterval mutableInterval17 = new org.joda.time.MutableInterval(readablePeriod0, (org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.MutableInterval mutableInterval18 = new org.joda.time.MutableInterval((java.lang.Object) mutableInterval17);
        java.lang.Object obj19 = null;
        boolean boolean20 = mutableInterval17.equals(obj19);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    @Ignore
  public void test1662() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1662");
        org.joda.time.ReadableDuration readableDuration0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval(readableDuration0, readableInstant1);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.MutableInterval mutableInterval6 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology5);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        mutableInterval6.setPeriodBeforeEnd(readablePeriod7);
        mutableInterval2.setInterval((org.joda.time.ReadableInterval) mutableInterval6);
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval((java.lang.Object) mutableInterval2);
        java.lang.Object obj11 = mutableInterval10.clone();
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertEquals(obj11.toString(), "1970-01-01T00:00:00.100Z/1970-01-01T00:00:00.100Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj11), "1970-01-01T00:00:00.100Z/1970-01-01T00:00:00.100Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj11), "1970-01-01T00:00:00.100Z/1970-01-01T00:00:00.100Z");
    }

    @Test
    @Ignore
  public void test1663() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1663");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        java.lang.Object obj5 = mutableInterval3.clone();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval(obj5, chronology6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        mutableInterval7.setPeriodAfterStart(readablePeriod8);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutableInterval mutableInterval13 = new org.joda.time.MutableInterval(0L, 1L, chronology12);
        org.joda.time.Interval interval14 = mutableInterval13.toInterval();
        java.lang.Object obj15 = mutableInterval13.clone();
        mutableInterval13.setStartMillis((long) (short) -1);
        org.joda.time.Chronology chronology18 = mutableInterval13.getChronology();
        org.joda.time.MutableInterval mutableInterval19 = mutableInterval13.toMutableInterval();
        boolean boolean20 = mutableInterval7.isAfter((org.joda.time.ReadableInterval) mutableInterval19);
        org.joda.time.MutableInterval mutableInterval21 = mutableInterval19.copy();
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(obj15);
        org.junit.Assert.assertEquals(obj15.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj15), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj15), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(mutableInterval19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(mutableInterval21);
    }

    @Test
    @Ignore
  public void test1664() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1664");
        org.joda.time.MutableInterval mutableInterval1 = org.joda.time.MutableInterval.parse("1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MutableInterval mutableInterval5 = new org.joda.time.MutableInterval(0L, 1L, chronology4);
        org.joda.time.Interval interval6 = mutableInterval5.toInterval();
        java.lang.Object obj7 = mutableInterval5.clone();
        org.joda.time.Interval interval8 = mutableInterval5.toInterval();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval(0L, 1L, chronology11);
        org.joda.time.Interval interval13 = mutableInterval12.toInterval();
        java.lang.Object obj14 = mutableInterval12.clone();
        boolean boolean15 = interval8.isBefore((org.joda.time.ReadableInterval) mutableInterval12);
        boolean boolean16 = mutableInterval1.isAfter((org.joda.time.ReadableInterval) mutableInterval12);
        org.joda.time.MutableInterval mutableInterval17 = mutableInterval12.toMutableInterval();
        org.joda.time.ReadableInterval readableInterval18 = null;
        boolean boolean19 = mutableInterval12.contains(readableInterval18);
        org.junit.Assert.assertNotNull(mutableInterval1);
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(obj14);
        org.junit.Assert.assertEquals(obj14.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj14), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj14), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(mutableInterval17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    @Ignore
  public void test1665() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1665");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology2);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.MutableInterval mutableInterval6 = new org.joda.time.MutableInterval(readableInstant4, readablePeriod5);
        mutableInterval6.setDurationBeforeEnd(1L);
        org.joda.time.MutableInterval mutableInterval9 = mutableInterval6.toMutableInterval();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutableInterval mutableInterval13 = new org.joda.time.MutableInterval(0L, 1L, chronology12);
        long long14 = mutableInterval13.toDurationMillis();
        mutableInterval6.setInterval((org.joda.time.ReadableInterval) mutableInterval13);
        org.joda.time.Duration duration16 = mutableInterval13.toDuration();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval(0L, 1L, chronology19);
        org.joda.time.Interval interval21 = mutableInterval20.toInterval();
        java.lang.Object obj22 = mutableInterval20.clone();
        org.joda.time.Interval interval23 = mutableInterval20.toInterval();
        org.joda.time.ReadableInterval readableInterval24 = null;
        boolean boolean25 = mutableInterval20.isBefore(readableInterval24);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MutableInterval mutableInterval29 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology28);
        boolean boolean30 = mutableInterval20.isAfter((org.joda.time.ReadableInterval) mutableInterval29);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.MutableInterval mutableInterval34 = new org.joda.time.MutableInterval(0L, 1L, chronology33);
        org.joda.time.Interval interval35 = mutableInterval34.toInterval();
        org.joda.time.DateTime dateTime36 = mutableInterval34.getStart();
        boolean boolean37 = mutableInterval20.isBefore((org.joda.time.ReadableInstant) dateTime36);
        org.joda.time.MutableInterval mutableInterval38 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration16, (org.joda.time.ReadableInstant) dateTime36);
        mutableInterval3.setDurationAfterStart((org.joda.time.ReadableDuration) duration16);
        org.junit.Assert.assertNotNull(mutableInterval9);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1L + "'", long14 == 1L);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertEquals(obj22.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj22), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj22), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(interval35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    }

    @Test
    @Ignore
  public void test1666() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1666");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        java.lang.Object obj5 = mutableInterval3.clone();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval(obj5, chronology6);
        org.joda.time.DateTime dateTime8 = mutableInterval7.getEnd();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval(0L, 1L, chronology11);
        org.joda.time.Interval interval13 = mutableInterval12.toInterval();
        java.lang.Object obj14 = mutableInterval12.clone();
        mutableInterval12.setStartMillis((long) (short) -1);
        org.joda.time.Chronology chronology17 = mutableInterval12.getChronology();
        org.joda.time.MutableInterval mutableInterval18 = mutableInterval12.toMutableInterval();
        org.joda.time.MutableInterval mutableInterval19 = mutableInterval12.copy();
        org.joda.time.Duration duration20 = mutableInterval12.toDuration();
        org.joda.time.DateTime dateTime21 = mutableInterval12.getStart();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MutableInterval mutableInterval25 = new org.joda.time.MutableInterval(0L, 1L, chronology24);
        org.joda.time.Interval interval26 = mutableInterval25.toInterval();
        mutableInterval25.setDurationAfterStart((long) (byte) 1);
        boolean boolean30 = mutableInterval25.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.MutableInterval mutableInterval34 = new org.joda.time.MutableInterval(0L, 1L, chronology33);
        org.joda.time.Interval interval35 = mutableInterval34.toInterval();
        java.lang.Object obj36 = mutableInterval34.clone();
        mutableInterval34.setStartMillis((long) (short) -1);
        org.joda.time.Chronology chronology39 = mutableInterval34.getChronology();
        mutableInterval25.setChronology(chronology39);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.MutableInterval mutableInterval44 = new org.joda.time.MutableInterval(0L, 1L, chronology43);
        org.joda.time.Interval interval45 = mutableInterval44.toInterval();
        mutableInterval44.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.MutableInterval mutableInterval51 = new org.joda.time.MutableInterval(0L, 1L, chronology50);
        org.joda.time.Interval interval52 = mutableInterval51.toInterval();
        java.lang.Object obj53 = mutableInterval51.clone();
        org.joda.time.Interval interval54 = mutableInterval51.toInterval();
        org.joda.time.ReadableInterval readableInterval55 = null;
        boolean boolean56 = mutableInterval51.isBefore(readableInterval55);
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.MutableInterval mutableInterval60 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology59);
        boolean boolean61 = mutableInterval51.isAfter((org.joda.time.ReadableInterval) mutableInterval60);
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.MutableInterval mutableInterval65 = new org.joda.time.MutableInterval(0L, 1L, chronology64);
        org.joda.time.Interval interval66 = mutableInterval65.toInterval();
        org.joda.time.DateTime dateTime67 = mutableInterval65.getStart();
        boolean boolean68 = mutableInterval51.isBefore((org.joda.time.ReadableInstant) dateTime67);
        boolean boolean69 = mutableInterval44.contains((org.joda.time.ReadableInstant) dateTime67);
        boolean boolean70 = mutableInterval25.isAfter((org.joda.time.ReadableInstant) dateTime67);
        mutableInterval7.setInterval((org.joda.time.ReadableInstant) dateTime21, (org.joda.time.ReadableInstant) dateTime67);
        org.joda.time.ReadableInstant readableInstant72 = null;
        mutableInterval7.setEnd(readableInstant72);
        mutableInterval7.setStartMillis(1606267506817L);
        mutableInterval7.setDurationAfterStart(1606267416835L);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(obj14);
        org.junit.Assert.assertEquals(obj14.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj14), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj14), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(mutableInterval18);
        org.junit.Assert.assertNotNull(mutableInterval19);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(interval35);
        org.junit.Assert.assertNotNull(obj36);
        org.junit.Assert.assertEquals(obj36.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj36), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj36), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(interval45);
        org.junit.Assert.assertNotNull(interval52);
        org.junit.Assert.assertNotNull(obj53);
        org.junit.Assert.assertEquals(obj53.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj53), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj53), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(interval66);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
    }

    @Test
    @Ignore
  public void test1667() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1667");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadablePeriod readablePeriod1 = null;
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval(readableInstant0, readablePeriod1);
        mutableInterval2.setDurationBeforeEnd(1L);
        org.joda.time.MutableInterval mutableInterval5 = mutableInterval2.toMutableInterval();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutableInterval mutableInterval9 = new org.joda.time.MutableInterval(0L, 1L, chronology8);
        long long10 = mutableInterval9.toDurationMillis();
        mutableInterval2.setInterval((org.joda.time.ReadableInterval) mutableInterval9);
        org.joda.time.Duration duration12 = mutableInterval9.toDuration();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MutableInterval mutableInterval16 = new org.joda.time.MutableInterval(0L, 1L, chronology15);
        org.joda.time.Interval interval17 = mutableInterval16.toInterval();
        java.lang.Object obj18 = mutableInterval16.clone();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval(obj18, chronology19);
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        mutableInterval20.setPeriodBeforeEnd(readablePeriod21);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MutableInterval mutableInterval26 = new org.joda.time.MutableInterval(0L, 1L, chronology25);
        org.joda.time.Interval interval27 = mutableInterval26.toInterval();
        mutableInterval26.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.MutableInterval mutableInterval33 = new org.joda.time.MutableInterval(0L, 1L, chronology32);
        org.joda.time.Interval interval34 = mutableInterval33.toInterval();
        long long35 = interval34.getEndMillis();
        boolean boolean37 = interval34.isAfter((long) (byte) 100);
        boolean boolean38 = mutableInterval26.overlaps((org.joda.time.ReadableInterval) interval34);
        org.joda.time.Duration duration39 = mutableInterval26.toDuration();
        boolean boolean40 = mutableInterval20.isBefore((org.joda.time.ReadableInterval) mutableInterval26);
        org.joda.time.MutableInterval mutableInterval41 = mutableInterval26.toMutableInterval();
        org.joda.time.ReadablePeriod readablePeriod42 = null;
        org.joda.time.ReadableInstant readableInstant43 = null;
        org.joda.time.ReadablePeriod readablePeriod44 = null;
        org.joda.time.MutableInterval mutableInterval45 = new org.joda.time.MutableInterval(readableInstant43, readablePeriod44);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.MutableInterval mutableInterval49 = new org.joda.time.MutableInterval(0L, 1L, chronology48);
        org.joda.time.Interval interval50 = mutableInterval49.toInterval();
        org.joda.time.DateTime dateTime51 = mutableInterval49.getStart();
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.MutableInterval mutableInterval55 = new org.joda.time.MutableInterval(0L, 1L, chronology54);
        org.joda.time.Interval interval56 = mutableInterval55.toInterval();
        org.joda.time.DateTime dateTime57 = mutableInterval55.getStart();
        mutableInterval45.setInterval((org.joda.time.ReadableInstant) dateTime51, (org.joda.time.ReadableInstant) dateTime57);
        org.joda.time.MutableInterval mutableInterval59 = new org.joda.time.MutableInterval(readablePeriod42, (org.joda.time.ReadableInstant) dateTime51);
        mutableInterval26.setEnd((org.joda.time.ReadableInstant) dateTime51);
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.MutableInterval mutableInterval64 = new org.joda.time.MutableInterval(0L, 1L, chronology63);
        org.joda.time.Interval interval65 = mutableInterval64.toInterval();
        mutableInterval64.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology70 = null;
        org.joda.time.MutableInterval mutableInterval71 = new org.joda.time.MutableInterval(0L, 1L, chronology70);
        org.joda.time.Interval interval72 = mutableInterval71.toInterval();
        long long73 = interval72.getEndMillis();
        boolean boolean75 = interval72.isAfter((long) (byte) 100);
        boolean boolean76 = mutableInterval64.overlaps((org.joda.time.ReadableInterval) interval72);
        boolean boolean77 = mutableInterval26.contains((org.joda.time.ReadableInterval) mutableInterval64);
        org.joda.time.Chronology chronology80 = null;
        org.joda.time.MutableInterval mutableInterval81 = new org.joda.time.MutableInterval(0L, 1L, chronology80);
        org.joda.time.Interval interval82 = mutableInterval81.toInterval();
        java.lang.Object obj83 = mutableInterval81.clone();
        org.joda.time.Chronology chronology84 = null;
        org.joda.time.MutableInterval mutableInterval85 = new org.joda.time.MutableInterval(obj83, chronology84);
        org.joda.time.Duration duration86 = mutableInterval85.toDuration();
        mutableInterval26.setDurationAfterStart((org.joda.time.ReadableDuration) duration86);
        mutableInterval9.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration86);
        org.joda.time.MutableInterval mutableInterval89 = new org.joda.time.MutableInterval((java.lang.Object) mutableInterval9);
        org.junit.Assert.assertNotNull(mutableInterval5);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1L + "'", long10 == 1L);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(interval17);
        org.junit.Assert.assertNotNull(obj18);
        org.junit.Assert.assertEquals(obj18.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj18), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj18), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertNotNull(interval34);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 1L + "'", long35 == 1L);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(mutableInterval41);
        org.junit.Assert.assertNotNull(interval50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(interval56);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(interval65);
        org.junit.Assert.assertNotNull(interval72);
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + 1L + "'", long73 == 1L);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(interval82);
        org.junit.Assert.assertNotNull(obj83);
        org.junit.Assert.assertEquals(obj83.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj83), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj83), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(duration86);
    }

    @Test
    @Ignore
  public void test1668() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1668");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        mutableInterval3.setDurationAfterStart((long) (byte) 1);
        boolean boolean8 = mutableInterval3.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology9 = mutableInterval3.getChronology();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutableInterval mutableInterval13 = new org.joda.time.MutableInterval(0L, 1L, chronology12);
        org.joda.time.Interval interval14 = mutableInterval13.toInterval();
        java.lang.Object obj15 = mutableInterval13.clone();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MutableInterval mutableInterval17 = new org.joda.time.MutableInterval(obj15, chronology16);
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        mutableInterval17.setPeriodAfterStart(readablePeriod18);
        org.joda.time.Period period20 = mutableInterval17.toPeriod();
        mutableInterval3.setPeriodBeforeEnd((org.joda.time.ReadablePeriod) period20);
        java.lang.Object obj22 = mutableInterval3.clone();
        long long23 = mutableInterval3.toDurationMillis();
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(obj15);
        org.junit.Assert.assertEquals(obj15.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj15), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj15), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertEquals(obj22.toString(), "1970-01-01T00:00:00.001Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj22), "1970-01-01T00:00:00.001Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj22), "1970-01-01T00:00:00.001Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
    }

    @Test
    @Ignore
  public void test1669() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1669");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        mutableInterval3.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval(0L, 1L, chronology9);
        org.joda.time.Interval interval11 = mutableInterval10.toInterval();
        long long12 = interval11.getEndMillis();
        boolean boolean14 = interval11.isAfter((long) (byte) 100);
        boolean boolean15 = mutableInterval3.overlaps((org.joda.time.ReadableInterval) interval11);
        org.joda.time.Duration duration16 = mutableInterval3.toDuration();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval(0L, 1L, chronology19);
        org.joda.time.Interval interval21 = mutableInterval20.toInterval();
        org.joda.time.DateTime dateTime22 = mutableInterval20.getStart();
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.MutableInterval mutableInterval25 = new org.joda.time.MutableInterval(readableInstant23, readablePeriod24);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MutableInterval mutableInterval29 = new org.joda.time.MutableInterval(0L, 1L, chronology28);
        org.joda.time.Interval interval30 = mutableInterval29.toInterval();
        org.joda.time.DateTime dateTime31 = mutableInterval29.getStart();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MutableInterval mutableInterval35 = new org.joda.time.MutableInterval(0L, 1L, chronology34);
        org.joda.time.Interval interval36 = mutableInterval35.toInterval();
        org.joda.time.DateTime dateTime37 = mutableInterval35.getStart();
        mutableInterval25.setInterval((org.joda.time.ReadableInstant) dateTime31, (org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.MutableInterval mutableInterval39 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime22, (org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.MutableInterval mutableInterval40 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration16, (org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.ReadableInstant readableInstant41 = null;
        org.joda.time.ReadablePeriod readablePeriod42 = null;
        org.joda.time.MutableInterval mutableInterval43 = new org.joda.time.MutableInterval(readableInstant41, readablePeriod42);
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.MutableInterval mutableInterval47 = new org.joda.time.MutableInterval(0L, 1L, chronology46);
        org.joda.time.Interval interval48 = mutableInterval47.toInterval();
        org.joda.time.DateTime dateTime49 = mutableInterval47.getStart();
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.MutableInterval mutableInterval53 = new org.joda.time.MutableInterval(0L, 1L, chronology52);
        org.joda.time.Interval interval54 = mutableInterval53.toInterval();
        org.joda.time.DateTime dateTime55 = mutableInterval53.getStart();
        mutableInterval43.setInterval((org.joda.time.ReadableInstant) dateTime49, (org.joda.time.ReadableInstant) dateTime55);
        org.joda.time.MutableInterval mutableInterval57 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration16, (org.joda.time.ReadableInstant) dateTime49);
        java.lang.Object obj58 = mutableInterval57.clone();
        org.joda.time.Period period59 = mutableInterval57.toPeriod();
        long long60 = mutableInterval57.getEndMillis();
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(interval30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(interval36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(interval48);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(interval54);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(obj58);
        org.junit.Assert.assertEquals(obj58.toString(), "1969-12-31T23:59:59.999Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj58), "1969-12-31T23:59:59.999Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj58), "1969-12-31T23:59:59.999Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertNotNull(period59);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 0L + "'", long60 == 0L);
    }

    @Test
    @Ignore
  public void test1670() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1670");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.MutableInterval mutableInterval8 = new org.joda.time.MutableInterval(readableInstant6, readablePeriod7);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval(0L, 1L, chronology11);
        org.joda.time.Interval interval13 = mutableInterval12.toInterval();
        org.joda.time.DateTime dateTime14 = mutableInterval12.getStart();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutableInterval mutableInterval18 = new org.joda.time.MutableInterval(0L, 1L, chronology17);
        org.joda.time.Interval interval19 = mutableInterval18.toInterval();
        org.joda.time.DateTime dateTime20 = mutableInterval18.getStart();
        mutableInterval8.setInterval((org.joda.time.ReadableInstant) dateTime14, (org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.MutableInterval mutableInterval22 = new org.joda.time.MutableInterval(readablePeriod5, (org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.MutableInterval mutableInterval23 = new org.joda.time.MutableInterval(readablePeriod4, (org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        org.joda.time.MutableInterval mutableInterval26 = new org.joda.time.MutableInterval(readableInstant24, readablePeriod25);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MutableInterval mutableInterval30 = new org.joda.time.MutableInterval(0L, 1L, chronology29);
        org.joda.time.Interval interval31 = mutableInterval30.toInterval();
        org.joda.time.DateTime dateTime32 = mutableInterval30.getStart();
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.MutableInterval mutableInterval36 = new org.joda.time.MutableInterval(0L, 1L, chronology35);
        org.joda.time.Interval interval37 = mutableInterval36.toInterval();
        org.joda.time.DateTime dateTime38 = mutableInterval36.getStart();
        mutableInterval26.setInterval((org.joda.time.ReadableInstant) dateTime32, (org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.MutableInterval mutableInterval40 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime14, (org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.DateTime dateTime41 = mutableInterval40.getStart();
        mutableInterval40.setInterval((long) (byte) 1, (long) (short) 1);
        boolean boolean45 = mutableInterval3.overlaps((org.joda.time.ReadableInterval) mutableInterval40);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.MutableInterval mutableInterval49 = new org.joda.time.MutableInterval(0L, 1L, chronology48);
        org.joda.time.Interval interval50 = mutableInterval49.toInterval();
        java.lang.Object obj51 = mutableInterval49.clone();
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.MutableInterval mutableInterval53 = new org.joda.time.MutableInterval(obj51, chronology52);
        org.joda.time.ReadablePeriod readablePeriod54 = null;
        mutableInterval53.setPeriodBeforeEnd(readablePeriod54);
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.MutableInterval mutableInterval59 = new org.joda.time.MutableInterval(0L, 1L, chronology58);
        org.joda.time.Interval interval60 = mutableInterval59.toInterval();
        mutableInterval59.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.MutableInterval mutableInterval66 = new org.joda.time.MutableInterval(0L, 1L, chronology65);
        org.joda.time.Interval interval67 = mutableInterval66.toInterval();
        long long68 = interval67.getEndMillis();
        boolean boolean70 = interval67.isAfter((long) (byte) 100);
        boolean boolean71 = mutableInterval59.overlaps((org.joda.time.ReadableInterval) interval67);
        org.joda.time.Duration duration72 = mutableInterval59.toDuration();
        boolean boolean73 = mutableInterval53.isBefore((org.joda.time.ReadableInterval) mutableInterval59);
        org.joda.time.MutableInterval mutableInterval74 = mutableInterval59.toMutableInterval();
        java.lang.String str75 = mutableInterval74.toString();
        java.lang.String str76 = mutableInterval74.toString();
        boolean boolean77 = mutableInterval40.isBefore((org.joda.time.ReadableInterval) mutableInterval74);
        org.joda.time.ReadableInterval readableInterval78 = null;
        boolean boolean79 = mutableInterval74.isAfter(readableInterval78);
        org.joda.time.Interval interval80 = mutableInterval74.toInterval();
        org.joda.time.MutableInterval mutableInterval81 = mutableInterval74.copy();
        long long82 = mutableInterval81.toDurationMillis();
        org.joda.time.Duration duration83 = mutableInterval81.toDuration();
        long long84 = mutableInterval81.getEndMillis();
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(interval31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(interval37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(interval50);
        org.junit.Assert.assertNotNull(obj51);
        org.junit.Assert.assertEquals(obj51.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj51), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj51), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval60);
        org.junit.Assert.assertNotNull(interval67);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 1L + "'", long68 == 1L);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(duration72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(mutableInterval74);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z" + "'", str75, "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z" + "'", str76, "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(interval80);
        org.junit.Assert.assertNotNull(mutableInterval81);
        org.junit.Assert.assertTrue("'" + long82 + "' != '" + 1L + "'", long82 == 1L);
        org.junit.Assert.assertNotNull(duration83);
        org.junit.Assert.assertTrue("'" + long84 + "' != '" + 1L + "'", long84 == 1L);
    }

    @Test
    @Ignore
  public void test1671() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1671");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        long long4 = mutableInterval3.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval5 = mutableInterval3.copy();
        org.joda.time.Period period6 = mutableInterval3.toPeriod();
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.MutableInterval mutableInterval9 = new org.joda.time.MutableInterval(readableInstant7, readablePeriod8);
        mutableInterval9.setDurationBeforeEnd(1L);
        org.joda.time.MutableInterval mutableInterval12 = mutableInterval9.toMutableInterval();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MutableInterval mutableInterval16 = new org.joda.time.MutableInterval(0L, 1L, chronology15);
        long long17 = mutableInterval16.toDurationMillis();
        mutableInterval9.setInterval((org.joda.time.ReadableInterval) mutableInterval16);
        org.joda.time.Duration duration19 = mutableInterval16.toDuration();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.MutableInterval mutableInterval23 = new org.joda.time.MutableInterval(0L, 1L, chronology22);
        org.joda.time.Interval interval24 = mutableInterval23.toInterval();
        java.lang.Object obj25 = mutableInterval23.clone();
        org.joda.time.Interval interval26 = mutableInterval23.toInterval();
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        mutableInterval23.setPeriodAfterStart(readablePeriod27);
        mutableInterval23.setEndMillis((long) 100);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.MutableInterval mutableInterval34 = new org.joda.time.MutableInterval(0L, 1L, chronology33);
        org.joda.time.Interval interval35 = mutableInterval34.toInterval();
        mutableInterval34.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.MutableInterval mutableInterval41 = new org.joda.time.MutableInterval(0L, 1L, chronology40);
        org.joda.time.Interval interval42 = mutableInterval41.toInterval();
        java.lang.Object obj43 = mutableInterval41.clone();
        org.joda.time.Interval interval44 = mutableInterval41.toInterval();
        org.joda.time.ReadableInterval readableInterval45 = null;
        boolean boolean46 = mutableInterval41.isBefore(readableInterval45);
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.MutableInterval mutableInterval50 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology49);
        boolean boolean51 = mutableInterval41.isAfter((org.joda.time.ReadableInterval) mutableInterval50);
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.MutableInterval mutableInterval55 = new org.joda.time.MutableInterval(0L, 1L, chronology54);
        org.joda.time.Interval interval56 = mutableInterval55.toInterval();
        org.joda.time.DateTime dateTime57 = mutableInterval55.getStart();
        boolean boolean58 = mutableInterval41.isBefore((org.joda.time.ReadableInstant) dateTime57);
        boolean boolean59 = mutableInterval34.contains((org.joda.time.ReadableInstant) dateTime57);
        boolean boolean60 = mutableInterval23.isBefore((org.joda.time.ReadableInstant) dateTime57);
        org.joda.time.MutableInterval mutableInterval61 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration19, (org.joda.time.ReadableInstant) dateTime57);
        org.joda.time.MutableInterval mutableInterval62 = new org.joda.time.MutableInterval((org.joda.time.ReadablePeriod) period6, (org.joda.time.ReadableInstant) dateTime57);
        org.joda.time.Duration duration63 = mutableInterval62.toDuration();
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.MutableInterval mutableInterval67 = new org.joda.time.MutableInterval(0L, 1L, chronology66);
        org.joda.time.ReadablePeriod readablePeriod68 = null;
        mutableInterval67.setPeriodAfterStart(readablePeriod68);
        org.joda.time.MutableInterval mutableInterval70 = mutableInterval67.toMutableInterval();
        org.joda.time.ReadableInterval readableInterval71 = null;
        boolean boolean72 = mutableInterval67.overlaps(readableInterval71);
        mutableInterval67.setStartMillis((long) 0);
        org.joda.time.DateTime dateTime75 = mutableInterval67.getStart();
        org.joda.time.MutableInterval mutableInterval76 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration63, (org.joda.time.ReadableInstant) dateTime75);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1L + "'", long4 == 1L);
        org.junit.Assert.assertNotNull(mutableInterval5);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(mutableInterval12);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1L + "'", long17 == 1L);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(obj25);
        org.junit.Assert.assertEquals(obj25.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj25), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj25), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertNotNull(interval35);
        org.junit.Assert.assertNotNull(interval42);
        org.junit.Assert.assertNotNull(obj43);
        org.junit.Assert.assertEquals(obj43.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj43), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj43), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(interval56);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(duration63);
        org.junit.Assert.assertNotNull(mutableInterval70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(dateTime75);
    }

    @Test
    @Ignore
  public void test1672() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1672");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        mutableInterval3.setDurationAfterStart((long) (byte) 1);
        boolean boolean8 = mutableInterval3.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval(0L, 1L, chronology11);
        org.joda.time.Interval interval13 = mutableInterval12.toInterval();
        java.lang.Object obj14 = mutableInterval12.clone();
        mutableInterval12.setStartMillis((long) (short) -1);
        org.joda.time.Chronology chronology17 = mutableInterval12.getChronology();
        mutableInterval3.setChronology(chronology17);
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.MutableInterval mutableInterval21 = new org.joda.time.MutableInterval(readableInstant19, readablePeriod20);
        mutableInterval21.setDurationBeforeEnd(1L);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MutableInterval mutableInterval27 = new org.joda.time.MutableInterval(0L, 1L, chronology26);
        org.joda.time.Interval interval28 = mutableInterval27.toInterval();
        java.lang.Object obj29 = mutableInterval27.clone();
        mutableInterval27.setStartMillis((long) (short) -1);
        org.joda.time.Chronology chronology32 = mutableInterval27.getChronology();
        mutableInterval21.setChronology(chronology32);
        org.joda.time.MutableInterval mutableInterval34 = new org.joda.time.MutableInterval((java.lang.Object) mutableInterval3, chronology32);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.MutableInterval mutableInterval38 = new org.joda.time.MutableInterval(0L, 1L, chronology37);
        org.joda.time.Interval interval39 = mutableInterval38.toInterval();
        java.lang.Object obj40 = mutableInterval38.clone();
        java.lang.Object obj41 = mutableInterval38.clone();
        org.joda.time.MutableInterval mutableInterval42 = mutableInterval38.copy();
        org.joda.time.Duration duration43 = mutableInterval38.toDuration();
        mutableInterval34.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration43);
        boolean boolean45 = mutableInterval34.isBeforeNow();
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(obj14);
        org.junit.Assert.assertEquals(obj14.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj14), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj14), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertNotNull(obj29);
        org.junit.Assert.assertEquals(obj29.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj29), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj29), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(interval39);
        org.junit.Assert.assertNotNull(obj40);
        org.junit.Assert.assertEquals(obj40.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj40), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj40), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(obj41);
        org.junit.Assert.assertEquals(obj41.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj41), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj41), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(mutableInterval42);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
    }

    @Test
    public void test1673() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1673");
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval((-1L), 1606267320597L);
        boolean boolean3 = mutableInterval2.isAfterNow();
        org.joda.time.MutableInterval mutableInterval4 = mutableInterval2.copy();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(mutableInterval4);
    }

    @Test
    @Ignore
  public void test1674() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1674");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        java.lang.Object obj5 = mutableInterval3.clone();
        org.joda.time.Interval interval6 = mutableInterval3.toInterval();
        mutableInterval3.setDurationBeforeEnd(0L);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval(0L, 1L, chronology11);
        org.joda.time.Interval interval13 = mutableInterval12.toInterval();
        mutableInterval12.setDurationAfterStart((long) (byte) 1);
        boolean boolean17 = mutableInterval12.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology18 = mutableInterval12.getChronology();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.MutableInterval mutableInterval22 = new org.joda.time.MutableInterval(0L, 1L, chronology21);
        org.joda.time.Interval interval23 = mutableInterval22.toInterval();
        java.lang.Object obj24 = mutableInterval22.clone();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MutableInterval mutableInterval26 = new org.joda.time.MutableInterval(obj24, chronology25);
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        mutableInterval26.setPeriodAfterStart(readablePeriod27);
        org.joda.time.Period period29 = mutableInterval26.toPeriod();
        mutableInterval12.setPeriodBeforeEnd((org.joda.time.ReadablePeriod) period29);
        mutableInterval3.setPeriodBeforeEnd((org.joda.time.ReadablePeriod) period29);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MutableInterval mutableInterval35 = new org.joda.time.MutableInterval(0L, 1L, chronology34);
        org.joda.time.Interval interval36 = mutableInterval35.toInterval();
        mutableInterval35.setDurationAfterStart((long) (byte) 1);
        boolean boolean40 = mutableInterval35.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology41 = mutableInterval35.getChronology();
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.MutableInterval mutableInterval45 = new org.joda.time.MutableInterval(0L, 1L, chronology44);
        org.joda.time.Interval interval46 = mutableInterval45.toInterval();
        java.lang.Object obj47 = mutableInterval45.clone();
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.MutableInterval mutableInterval49 = new org.joda.time.MutableInterval(obj47, chronology48);
        org.joda.time.ReadablePeriod readablePeriod50 = null;
        mutableInterval49.setPeriodAfterStart(readablePeriod50);
        org.joda.time.Period period52 = mutableInterval49.toPeriod();
        mutableInterval35.setPeriodBeforeEnd((org.joda.time.ReadablePeriod) period52);
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.MutableInterval mutableInterval57 = new org.joda.time.MutableInterval(0L, 1L, chronology56);
        org.joda.time.Interval interval58 = mutableInterval57.toInterval();
        java.lang.Object obj59 = mutableInterval57.clone();
        org.joda.time.Interval interval60 = mutableInterval57.toInterval();
        org.joda.time.ReadableInterval readableInterval61 = null;
        boolean boolean62 = mutableInterval57.isBefore(readableInterval61);
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.MutableInterval mutableInterval66 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology65);
        boolean boolean67 = mutableInterval57.isAfter((org.joda.time.ReadableInterval) mutableInterval66);
        org.joda.time.Chronology chronology70 = null;
        org.joda.time.MutableInterval mutableInterval71 = new org.joda.time.MutableInterval(0L, 1L, chronology70);
        org.joda.time.Interval interval72 = mutableInterval71.toInterval();
        org.joda.time.DateTime dateTime73 = mutableInterval71.getStart();
        boolean boolean74 = mutableInterval57.isBefore((org.joda.time.ReadableInstant) dateTime73);
        org.joda.time.MutableInterval mutableInterval75 = new org.joda.time.MutableInterval((org.joda.time.ReadablePeriod) period52, (org.joda.time.ReadableInstant) dateTime73);
        org.joda.time.MutableInterval mutableInterval76 = new org.joda.time.MutableInterval((org.joda.time.ReadablePeriod) period29, (org.joda.time.ReadableInstant) dateTime73);
        org.joda.time.Chronology chronology79 = null;
        org.joda.time.MutableInterval mutableInterval80 = new org.joda.time.MutableInterval(0L, 1L, chronology79);
        org.joda.time.Interval interval81 = mutableInterval80.toInterval();
        java.lang.Object obj82 = mutableInterval80.clone();
        java.lang.Object obj83 = mutableInterval80.clone();
        org.joda.time.MutableInterval mutableInterval84 = mutableInterval80.copy();
        java.lang.Object obj85 = mutableInterval84.clone();
        org.joda.time.ReadableInstant readableInstant86 = null;
        org.joda.time.ReadablePeriod readablePeriod87 = null;
        org.joda.time.MutableInterval mutableInterval88 = new org.joda.time.MutableInterval(readableInstant86, readablePeriod87);
        mutableInterval88.setDurationBeforeEnd(1L);
        org.joda.time.MutableInterval mutableInterval91 = mutableInterval88.toMutableInterval();
        org.joda.time.Period period92 = mutableInterval88.toPeriod();
        mutableInterval84.setPeriodAfterStart((org.joda.time.ReadablePeriod) period92);
        mutableInterval76.setPeriodAfterStart((org.joda.time.ReadablePeriod) period92);
        boolean boolean96 = mutableInterval76.isBefore(1606267337298L);
        org.joda.time.PeriodType periodType97 = null;
        org.joda.time.Period period98 = mutableInterval76.toPeriod(periodType97);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertNotNull(obj24);
        org.junit.Assert.assertEquals(obj24.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj24), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj24), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(interval36);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(interval46);
        org.junit.Assert.assertNotNull(obj47);
        org.junit.Assert.assertEquals(obj47.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj47), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj47), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(period52);
        org.junit.Assert.assertNotNull(interval58);
        org.junit.Assert.assertNotNull(obj59);
        org.junit.Assert.assertEquals(obj59.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj59), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj59), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(interval72);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(interval81);
        org.junit.Assert.assertNotNull(obj82);
        org.junit.Assert.assertEquals(obj82.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj82), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj82), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(obj83);
        org.junit.Assert.assertEquals(obj83.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj83), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj83), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(mutableInterval84);
        org.junit.Assert.assertNotNull(obj85);
        org.junit.Assert.assertEquals(obj85.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj85), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj85), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(mutableInterval91);
        org.junit.Assert.assertNotNull(period92);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + true + "'", boolean96 == true);
        org.junit.Assert.assertNotNull(period98);
    }
}
